// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPTKXFR
// ?Date: 14.08.2025 Time: 03:41:54
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?*********ST Joe Only
//?            If item str type (not) = 900 or  cls (not)  = 900
//?            create new records for the company 362
//?            If company 362 exists then change the co/item
//?            from the values in the Item Default
//?            and the BOM from 360 to 362 BOM
//?092805 slm  Allow Bill of Material for all records do not check class
//?            class, or meat ...all records.
EXECUTE FUNCTION(Cnv CoItm362 -ID&Co360 RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1753686;
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 CASE;

 // IF DB1.Item Structure Type Code is EQ 900
 IF DB1.Item_Structure_Type_Code = 900;

 // OR DB1.Item Structure Class Code is Pumped
 OR DB1.Item_Structure_Class_Code = 900;

 // IF DB1.Item Structure Type Code is EQ 600
 IF DB1.Item_Structure_Type_Code = 600;

 // AND DB1.Item Structure Group Code is Ground Pork
 AND DB1.Item_Structure_Group_Code = 640;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?read 360 company item
 EXECUTE FUNCTION(CnvRdCo 360 to crt 362RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1753685;
 PARAMETER(360);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Description_Line_One);
 PARAMETER(LCL.Description_Line_Two);
 PARAMETER(LCL.Item_Label_Line_1);
 PARAMETER(LCL.Item_Label_Line_2);
 PARAMETER(LCL.Item_Label_Line_3);
 PARAMETER(LCL.Item_Label_Line_4);
 PARAMETER(LCL.UOM_Primary);
 PARAMETER(LCL.Conversion_Factor_1);
 PARAMETER(LCL.Operation_Factor_1);
 PARAMETER(LCL.UOM_Second);
 PARAMETER(LCL.Conversion_Factor_2);
 PARAMETER(LCL.Operation_Factor_2);
 PARAMETER(LCL.UOM_Third);
 PARAMETER(LCL.UOM_Pricing);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.Quality_Level);
 PARAMETER(LCL.Item_Level);
 PARAMETER(LCL.Production_Date_Control);
 PARAMETER(LCL.Catch_Weight_Status);
 PARAMETER(LCL.Minimum_Weight_Per_Case);
 PARAMETER(LCL.Maximum_Weight_Per_Case);
 PARAMETER(LCL.Number_Cases_On_A_Pallet);
 PARAMETER(LCL.Vendor_Item_Default);
 PARAMETER(LCL.Item_Structure_Class_Code);
 PARAMETER(LCL.Item_Structure_Group_Code);
 PARAMETER(LCL.Item_Structure_Type_Code);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(LCL.Transportation_Temp);
 PARAMETER(LCL.Item_Type_Code);
 PARAMETER(LCL.Package_Type_Code);
 PARAMETER(LCL.Maximum_Audit_Value);
 PARAMETER(LCL.Minimum_Audit_Value);
 PARAMETER(LCL.Market_Overage);
 PARAMETER(LCL.Standard_Overage_Underage);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Item_Pricing_Operation);
 PARAMETER(LCL.Item_Pricing_Constant);
 PARAMETER(LCL.Default_Warehouse);
 PARAMETER(LCL.Price_Method_Default);
 PARAMETER(LCL.Fresh_Chilling_Time);
 PARAMETER(LCL.Base_Conv_Loss_Item);
 PARAMETER(LCL.Variety_Rendered_Cut);
 PARAMETER(LCL.Frozen_Make_to_Order_Sts);
 PARAMETER(LCL.Credit_Item_Status);
 PARAMETER(LCL.Std_Weight_Head_Var_Ren);
 PARAMETER(LCL.Pieces_Per_Head);
 PARAMETER(LCL.Department_Code);
 PARAMETER(LCL.Group_for_Packaging);
 PARAMETER(LCL.Item_Category_Number_1);
 PARAMETER(LCL.Made_to_Order_Code);
 PARAMETER(LCL.Item_Category_Number_2);
 PARAMETER(LCL.Transportation_Equip_Type);
 PARAMETER(LCL.Item_Category_Number_3);
 PARAMETER(LCL.Item_Category_Code_3);
 PARAMETER(LCL.Item_Category_Number_4);
 PARAMETER(LCL.GL_Sub_Code);
 PARAMETER(LCL.Item_Category_Number_5);
 PARAMETER(LCL.Item_Structure_Sub_Class);
 PARAMETER(LCL.Item_Category_Number_6);
 PARAMETER(LCL.Item_Primal_Sched_Report);
 PARAMETER(LCL.Item_Category_Number_7);
 PARAMETER(LCL.Item_Exc_Man_Prc_Excp);
 PARAMETER(LCL.Item_Category_Number_8);
 PARAMETER(LCL.Item_Prod_Sched_Send_PFS);
 PARAMETER(LCL.Item_Category_Number_9);
 PARAMETER(LCL.Item_Category_Code_9);
 PARAMETER(LCL.Item_Category_Number_10);
 PARAMETER(LCL.Item_Category_Code_10);
 PARAMETER(LCL.Pallet_Tare_Weight);
 PARAMETER(LCL.Misc_Tare_Weight);
 PARAMETER(LCL.Production_Lead_Days);
 PARAMETER(LCL.Packaging_Code);
 PARAMETER(LCL.Item_Market_Code);
 PARAMETER(LCL.TF_Co_Ownership_Sts);
 PARAMETER(LCL.Agrimetrics_group);
 PARAMETER(LCL.Agrimetrics_pack);
 PARAMETER(LCL.Agrimetrics_grade);
 PARAMETER(LCL.PA_Base_Avail_Rpt_Include);
 PARAMETER(LCL.PM_Pounds_per_Hour);
 PARAMETER(LCL.Item_Frt_Overage_Prc_UOM);
 PARAMETER(LCL.Packages_per_case);
 PARAMETER(LCL.Use_Freeze_Sell_By_Days);
 PARAMETER(LCL.PM_Batch_Size);
 PARAMETER(LCL.Package_Level_size);
 PARAMETER(LCL.Partial_Item_Code);
 PARAMETER(LCL.WIP_Item_Code);
 PARAMETER(LCL.WIP_Reject_Code);
 PARAMETER(LCL.Std_Costing_Unit_Weight);
 PARAMETER(LCL.FP_Std_Green_Weight);
 PARAMETER(LCL.PM_Std_LBS_Man_Per_Hour);
 PARAMETER(LCL.PM_Raw_Meat_LBS_Per_Hour);
 PARAMETER(LCL.PM_Formula_LBS_Per_Hour);
 PARAMETER(LCL.PM_Finished_LBS_Per_Hour);
 PARAMETER(LCL.SH_Unused_was_broker);
 PARAMETER(LCL.PM_Raw_Material_Type_Code);
 PARAMETER(LCL.PM_Line_Number);
 PARAMETER(LCL.Seconds_Item);
 PARAMETER(LCL.Print_on_Realization_Rpt);
 PARAMETER(LCL.Unit_Weight_Change_Sts);
 PARAMETER(LCL.Piece_Count_Item);
 PARAMETER(LCL.Pieces_Per_Bag);
 PARAMETER(LCL.Bags_Per_Unit);
 PARAMETER(LCL.Export_Domestic);
 PARAMETER(LCL.Print_On_Schedule);
 PARAMETER(LCL.Fresh_Inv_Allocation_Seq);
 PARAMETER(LCL.Fresh_Sched_As_Ordered);
 PARAMETER(LCL.Frozen_Inv_Allocation_Seq);
 PARAMETER(LCL.Primal_Group_Code);
 PARAMETER(LCL.Item_Meat_Cost_Group_Code);
 PARAMETER(LCL.UPC_Code_2);
 PARAMETER(LCL.Item_Target_Price);
 PARAMETER(LCL.Minimum_Piece_Weight);
 PARAMETER(LCL.Maximum_Piece_Weight);
 PARAMETER(LCL.Seaboard_Equivalent_Item);
 PARAMETER(LCL.Production_Qty_Per_Shift);
 PARAMETER(LCL.Scheduling_Position_Grade);
 PARAMETER(LCL.Sold_100_Percent_Frozen);
 PARAMETER(LCL.Maximum_Shifts);
 PARAMETER(LCL.Value_Added_Sts);
 PARAMETER(LCL.Label_Type);
 PARAMETER(LCL.Item_TF_Exempt_Code);
 PARAMETER(LCL.Item_TF_Classification);
 PARAMETER(LCL.Default_Workcenter);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 PARAMETER(LCL.Record_Status);
 PARAMETER(LCL.Job_Time);
 PARAMETER(LCL.User_Id);
 PARAMETER(LCL.Job_Name);
 PARAMETER(LCL.Job_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?093005 Allow meat products = warehouse of SJ1, NON Meat blank
 CASE;

 // IF DB1.Item Type Code is FG/RM/WP
 IF DB1.Item_Type_Code = 'FG'/'RM'/'WP';

 // LCL.Default Warehouse = CON.SJ1
 LCL.Default_Warehouse = 'SJ1';

 //?093005 Allow meat products = warehouse of SJ1, NON Meat blank
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Default Warehouse = CON.*BLANK
 LCL.Default_Warehouse = *BLANK;

 ENDIF;

 EXECUTE FUNCTION(Crt Assign Co/Item     IF) TYPE(EXCINTFUN)                     AC1700427;
 PARAMETER(960);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Description_Line_One);
 PARAMETER(LCL.Description_Line_Two);
 PARAMETER(LCL.Item_Label_Line_1);
 PARAMETER(LCL.Item_Label_Line_2);
 PARAMETER(LCL.Item_Label_Line_3);
 PARAMETER(LCL.Item_Label_Line_4);
 PARAMETER(LCL.UOM_Primary);
 PARAMETER(LCL.Conversion_Factor_1);
 PARAMETER(LCL.Operation_Factor_1);
 PARAMETER(LCL.UOM_Second);
 PARAMETER(LCL.Conversion_Factor_2);
 PARAMETER(LCL.Operation_Factor_2);
 PARAMETER(LCL.UOM_Third);
 PARAMETER(LCL.UOM_Pricing);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.Quality_Level);
 PARAMETER(LCL.Item_Level);
 PARAMETER(LCL.Production_Date_Control);
 PARAMETER(LCL.Catch_Weight_Status);
 PARAMETER(LCL.Minimum_Weight_Per_Case);
 PARAMETER(LCL.Maximum_Weight_Per_Case);
 PARAMETER(LCL.Number_Cases_On_A_Pallet);
 PARAMETER(LCL.Vendor_Item_Default);
 PARAMETER(LCL.Item_Structure_Class_Code);
 PARAMETER(LCL.Item_Structure_Group_Code);
 PARAMETER(LCL.Item_Structure_Type_Code);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(LCL.Transportation_Temp);
 PARAMETER(LCL.Item_Type_Code);
 PARAMETER(LCL.Package_Type_Code);
 PARAMETER(LCL.Maximum_Audit_Value);
 PARAMETER(LCL.Minimum_Audit_Value);
 PARAMETER(LCL.Market_Overage);
 PARAMETER(LCL.Standard_Overage_Underage);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Item_Pricing_Operation);
 PARAMETER(LCL.Item_Pricing_Constant);
 PARAMETER(LCL.Default_Warehouse);
 PARAMETER(LCL.Price_Method_Default);
 PARAMETER(LCL.Fresh_Chilling_Time);
 PARAMETER(LCL.Base_Conv_Loss_Item);
 PARAMETER(LCL.Variety_Rendered_Cut);
 PARAMETER(LCL.Frozen_Make_to_Order_Sts);
 PARAMETER(LCL.Credit_Item_Status);
 PARAMETER(LCL.Std_Weight_Head_Var_Ren);
 PARAMETER(LCL.Pieces_Per_Head);
 PARAMETER(LCL.Department_Code);
 PARAMETER(LCL.Group_for_Packaging);
 PARAMETER(LCL.Item_Category_Number_1);
 PARAMETER(LCL.Made_to_Order_Code);
 PARAMETER(LCL.Item_Category_Number_2);
 PARAMETER(LCL.Transportation_Equip_Type);
 PARAMETER(LCL.Item_Category_Number_3);
 PARAMETER(LCL.Item_Category_Code_3);
 PARAMETER(LCL.Item_Category_Number_4);
 PARAMETER(LCL.GL_Sub_Code);
 PARAMETER(LCL.Item_Category_Number_5);
 PARAMETER(LCL.Item_Structure_Sub_Class);
 PARAMETER(LCL.Item_Category_Number_6);
 PARAMETER(LCL.Item_Primal_Sched_Report);
 PARAMETER(LCL.Item_Category_Number_7);
 PARAMETER(LCL.Item_Exc_Man_Prc_Excp);
 PARAMETER(LCL.Item_Category_Number_8);
 PARAMETER(LCL.Item_Prod_Sched_Send_PFS);
 PARAMETER(LCL.Item_Category_Number_9);
 PARAMETER(LCL.Item_Category_Code_9);
 PARAMETER(LCL.Item_Category_Number_10);
 PARAMETER(LCL.Item_Category_Code_10);
 PARAMETER(LCL.Pallet_Tare_Weight);
 PARAMETER(LCL.Misc_Tare_Weight);
 PARAMETER(LCL.Production_Lead_Days);
 PARAMETER(LCL.Packaging_Code);
 PARAMETER(LCL.Item_Market_Code);
 PARAMETER(LCL.TF_Co_Ownership_Sts);
 PARAMETER(LCL.Agrimetrics_group);
 PARAMETER(LCL.Agrimetrics_pack);
 PARAMETER(LCL.Agrimetrics_grade);
 PARAMETER(LCL.PA_Base_Avail_Rpt_Include);
 PARAMETER(LCL.PM_Pounds_per_Hour);
 PARAMETER(LCL.Item_Frt_Overage_Prc_UOM);
 PARAMETER(LCL.Packages_per_case);
 PARAMETER(LCL.Use_Freeze_Sell_By_Days);
 PARAMETER(LCL.PM_Batch_Size);
 PARAMETER(LCL.Package_Level_size);
 PARAMETER(LCL.Partial_Item_Code);
 PARAMETER(LCL.WIP_Item_Code);
 PARAMETER(LCL.WIP_Reject_Code);
 PARAMETER(LCL.Std_Costing_Unit_Weight);
 PARAMETER(LCL.FP_Std_Green_Weight);
 PARAMETER(LCL.PM_Std_LBS_Man_Per_Hour);
 PARAMETER(LCL.PM_Raw_Meat_LBS_Per_Hour);
 PARAMETER(LCL.PM_Formula_LBS_Per_Hour);
 PARAMETER(LCL.PM_Finished_LBS_Per_Hour);
 PARAMETER(LCL.SH_Unused_was_broker);
 PARAMETER(LCL.PM_Raw_Material_Type_Code);
 PARAMETER(LCL.PM_Line_Number);
 PARAMETER(LCL.Seconds_Item);
 PARAMETER(LCL.Print_on_Realization_Rpt);
 PARAMETER(LCL.Unit_Weight_Change_Sts);
 PARAMETER(LCL.Piece_Count_Item);
 PARAMETER(LCL.Pieces_Per_Bag);
 PARAMETER(LCL.Bags_Per_Unit);
 PARAMETER(LCL.Export_Domestic);
 PARAMETER(LCL.Print_On_Schedule);
 PARAMETER(LCL.Fresh_Inv_Allocation_Seq);
 PARAMETER(LCL.Fresh_Sched_As_Ordered);
 PARAMETER(LCL.Frozen_Inv_Allocation_Seq);
 PARAMETER(LCL.Primal_Group_Code);
 PARAMETER(LCL.Item_Meat_Cost_Group_Code);
 PARAMETER(LCL.UPC_Code_2);
 PARAMETER(LCL.Item_Target_Price);
 PARAMETER(LCL.Minimum_Piece_Weight);
 PARAMETER(LCL.Maximum_Piece_Weight);
 PARAMETER(LCL.Seaboard_Equivalent_Item);
 PARAMETER(LCL.Production_Qty_Per_Shift);
 PARAMETER(LCL.Scheduling_Position_Grade);
 PARAMETER(LCL.Sold_100_Percent_Frozen);
 PARAMETER(LCL.Maximum_Shifts);
 PARAMETER(LCL.Value_Added_Sts);
 PARAMETER(LCL.Label_Type);
 PARAMETER(LCL.Item_TF_Exempt_Code);
 PARAMETER(LCL.Item_TF_Classification);
 PARAMETER(LCL.Default_Workcenter);
 PARAMETER(LCL.Record_Status);
 {
  //?Execute internal function

  EXECUTE FUNCTION(CRT Item/Add to AvlGrp CR) TYPE(CRTOBJ) FILE(CABZREP)          AC1120696;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.Description_Line_Two);
  PARAMETER(PAR.Item_Label_Line_1);
  PARAMETER(PAR.Item_Label_Line_2);
  PARAMETER(PAR.Item_Label_Line_3);
  PARAMETER(PAR.Item_Label_Line_4);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second);
  PARAMETER(PAR.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third);
  PARAMETER(PAR.UOM_Pricing);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Quality_Level);
  PARAMETER(PAR.Item_Level);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(PAR.Minimum_Weight_Per_Case);
  PARAMETER(PAR.Maximum_Weight_Per_Case);
  PARAMETER(PAR.Number_Cases_On_A_Pallet);
  PARAMETER(PAR.Vendor_Item_Default);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Default_Commod_Mark_basis);
  PARAMETER(PAR.Transportation_Temp);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Package_Type_Code);
  PARAMETER(PAR.Maximum_Audit_Value);
  PARAMETER(PAR.Minimum_Audit_Value);
  PARAMETER(PAR.Market_Overage);
  PARAMETER(PAR.Standard_Overage_Underage);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(PAR.Item_Pricing_Operation);
  PARAMETER(PAR.Item_Pricing_Constant);
  PARAMETER(PAR.Default_Warehouse);
  PARAMETER(PAR.Price_Method_Default);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Frozen_Make_to_Order_Sts);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(PAR.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Item_Category_Number_1);
  PARAMETER(PAR.Made_to_Order_Code);
  PARAMETER(PAR.Item_Category_Number_2);
  PARAMETER(PAR.Transportation_Equip_Type);
  PARAMETER(PAR.Item_Category_Number_3);
  PARAMETER(PAR.Item_Category_Code_3);
  PARAMETER(PAR.Item_Category_Number_4);
  PARAMETER(PAR.GL_Sub_Code);
  PARAMETER(PAR.Item_Category_Number_5);
  PARAMETER(PAR.Item_Structure_Sub_Class);
  PARAMETER(PAR.Item_Category_Number_6);
  PARAMETER(PAR.Item_Primal_Sched_Report);
  PARAMETER(PAR.Item_Category_Number_7);
  PARAMETER(PAR.Item_Exc_Man_Prc_Excp);
  PARAMETER(PAR.Item_Category_Number_8);
  PARAMETER(PAR.Item_Prod_Sched_Send_PFS);
  PARAMETER(PAR.Item_Category_Number_9);
  PARAMETER(PAR.Item_Category_Code_9);
  PARAMETER(PAR.Item_Category_Number_10);
  PARAMETER(PAR.Item_Category_Code_10);
  PARAMETER(PAR.Pallet_Tare_Weight);
  PARAMETER(PAR.Misc_Tare_Weight);
  PARAMETER(PAR.Production_Lead_Days);
  PARAMETER(PAR.Packaging_Code);
  PARAMETER(PAR.Item_Market_Code);
  PARAMETER(PAR.TF_Co_Ownership_Sts);
  PARAMETER(PAR.Agrimetrics_group);
  PARAMETER(PAR.Agrimetrics_pack);
  PARAMETER(PAR.Agrimetrics_grade);
  PARAMETER(PAR.PA_Base_Avail_Rpt_Include);
  PARAMETER(PAR.PM_Pounds_per_Hour);
  PARAMETER(PAR.Item_Frt_Overage_Prc_UOM);
  PARAMETER(PAR.Packages_per_case);
  PARAMETER(PAR.Use_Freeze_Sell_By_Days);
  PARAMETER(PAR.PM_Batch_Size);
  PARAMETER(PAR.Package_Level_size);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.WIP_Item_Code);
  PARAMETER(PAR.WIP_Reject_Code);
  PARAMETER(PAR.Std_Costing_Unit_Weight);
  PARAMETER(PAR.FP_Std_Green_Weight);
  PARAMETER(PAR.PM_Std_LBS_Man_Per_Hour);
  PARAMETER(PAR.PM_Raw_Meat_LBS_Per_Hour);
  PARAMETER(PAR.PM_Formula_LBS_Per_Hour);
  PARAMETER(PAR.PM_Finished_LBS_Per_Hour);
  PARAMETER(PAR.SH_Unused_was_broker);
  PARAMETER(PAR.PM_Raw_Material_Type_Code);
  PARAMETER(PAR.PM_Line_Number);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Print_on_Realization_Rpt);
  PARAMETER(PAR.Unit_Weight_Change_Sts);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(PAR.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.Item_Meat_Cost_Group_Code);
  PARAMETER(PAR.UPC_Code_2);
  PARAMETER(PAR.Item_Target_Price);
  PARAMETER(PAR.Minimum_Piece_Weight);
  PARAMETER(PAR.Maximum_Piece_Weight);
  PARAMETER(PAR.Seaboard_Equivalent_Item);
  PARAMETER(PAR.Production_Qty_Per_Shift);
  PARAMETER(PAR.Scheduling_Position_Grade);
  PARAMETER(PAR.Sold_100_Percent_Frozen);
  PARAMETER(PAR.Maximum_Shifts);
  PARAMETER(PAR.Value_Added_Sts);
  PARAMETER(PAR.Label_Type);
  PARAMETER(PAR.Item_TF_Exempt_Code);
  PARAMETER(PAR.Item_TF_Classification);
  PARAMETER(PAR.Default_Workcenter);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   CASE;

   // IF DB1.Item Type Code is Finished Goods
   IF DB1.Item_Type_Code = 'FG';

   EXECUTE FUNCTION(CRT Co Item/Avail Grp  CR) TYPE(CRTOBJ) FILE(PDKLREP)          AC1380738;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER('ALL');
   PARAMETER(*ZERO);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // IF DB1.Item Type Code is Work in Process
   IF DB1.Item_Type_Code = 'WP';

   EXECUTE FUNCTION(CRT Co Item/Avail Grp  CR) TYPE(CRTOBJ) FILE(PDKLREP)          AC1380738;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER('WIP');
   PARAMETER(*ZERO);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   //?06/17/09 PKD FP1054 Create Company Item EXT & Upd PLAN PRODUCTION STS
   // Call program Rtv Plant Co/Org      XF.
   CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(LCL.Plant_Company_Sts);
   PARAMETER(LCL.Company_Organization);

   //?LCL. Plant Production Sts
   CASE;

   // IF LCL.Company Organization is Not Seaboard
   IF LCL.Company_Organization = 'D'/'H';

   // OR DB1.Item Type Code is Not Finished Good
   OR DB1.Item_Type_Code <> 'FG';

   // LCL.Plan Production Sts = CND.No
   LCL.Plan_Production_Sts = 'N';

   // LCL.Allocation Method = CND.Forward - ASAP
   LCL.Allocation_Method = 'F';

   //?LCL. Plant Production Sts
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Plan Production Sts = CND.Yes
   LCL.Plan_Production_Sts = *BLANK;

   ENDIF;

   EXECUTE FUNCTION(Crt Company Item Ext  CR) TYPE(CRTOBJ) FILE(PMFDREP)           AC1926035;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Produce_on_Sunday_Sts);
   PARAMETER(LCL.Produce_on_Monday_Sts);
   PARAMETER(LCL.Produce_on_Tuesday_Sts);
   PARAMETER(LCL.Produce_on_Wednesday_Sts);
   PARAMETER(LCL.Produce_on_Thursday_Sts);
   PARAMETER(LCL.Produce_on_Friday_Sts);
   PARAMETER(LCL.Produce_on_Saturday_Sts);
   PARAMETER(LCL.Plan_Production_Sts);
   PARAMETER(LCL.Allocation_Method);
   PARAMETER(LCL.Adjust_Credit_Pieces);
   PARAMETER(LCL.CIE_Use_Age_Days_over_Max);
   PARAMETER(LCL.CIE_MPR_Report_to_USDA);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(DB1.Record_Status);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     //?*** Set RECORD STATUS field. ***
     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     //?*** Set CREATE fields. ***
     // PAR.Create Date = JOB.*Job date
     PAR.Create_Date = JOB.*Job_date;

     // PAR.Create Time = JOB.*Job time
     PAR.Create_Time = JOB.*Job_time;

     // PAR.Create User = JOB.*USER
     PAR.Create_User = JOB.*USER;

     // PAR.Create Program = JOB.*PROGRAM
     PAR.Create_Program = JOB.*PROGRAM;

     //?*** Set CHANGE fields. ***
     // PAR.Change Date = CON.*ZERO
     PAR.Change_Date = *ZERO;

     // PAR.Change Time = CON.*ZERO
     PAR.Change_Time = *ZERO;

     // PAR.Change User = CON.*BLANK
     PAR.Change_User = *BLANK;

     // PAR.Change Program = CON.*BLANK
     PAR.Change_Program = *BLANK;

    }

   }

   // Send information message - 'Company &1 for Item &2 was created'
   MESSAGE(USR3361 *INFO);
   MSGPARM(DB1.Company_Number);
   MSGPARM(DB1.Item_Code);

  }

  //?RMC Crt Box in Packaging Item Master also  04/26/07
  CASE;

  // IF PAR.Item Type Code is Packaging and Supplies
  IF PAR.Item_Type_Code = 'PS';

  EXECUTE FUNCTION(RTV CRT Pck Itm Assgn RT) TYPE(RTVOBJ) FILE(POARREP)           AC1816985;
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Process Data record

   //?if rcd read doesnt eq par.new company , then create new company
   //? using found rcd's fields
   CASE;

   // IF DB1.Company Number NE PAR.Company Number Select
   IF DB1.Company_Number <> PAR.Company_Number_Select;

   EXECUTE FUNCTION(Crt Packaging Item    CR) TYPE(CRTOBJ) FILE(POARREP)           AC1602023;
   PARAMETER(PAR.Company_Number_Select);
   PARAMETER(DB1.Packaging_Item_Code);
   PARAMETER(DB1.Pckg_Item_Description);
   PARAMETER(DB1.Pckg_List_Sequence);
   PARAMETER(DB1.Pckg_Type_Class);
   PARAMETER(DB1.Pckg_Item_Type);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Pckg_Unit_Cost);
   PARAMETER(DB1.Pckg_Tare_Weight);
   PARAMETER(DB1.Pckg_Reporting_Group);
   PARAMETER(DB1.Pckg_Group_Category);
   PARAMETER(DB1.Pckg_Modified_Weight);
   PARAMETER(DB1.Pckg_Unused_Status_3);
   PARAMETER(DB1.Pckg_Unused_Sts_2);
   PARAMETER(DB1.Pre_printed_Bag_Sts);
   PARAMETER(DB1.Pckg_Unused_Status_5);
   PARAMETER(DB1.Pckg_Unused_Status_6);
   PARAMETER(DB1.Pckg_Unused_Status_7);
   PARAMETER(DB1.Pckg_Unused_Status_8);
   PARAMETER(DB1.Pckg_Unused_Status_9);
   PARAMETER(DB1.Pckg_Unused_Status_10);
   PARAMETER(DB1.Pckg_Unused_Code);
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     //?*** Set RECORD STATUS field. ***
     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     //?*** Set CREATE fields. ***
     // PAR.Create Date = JOB.*Job date
     PAR.Create_Date = JOB.*Job_date;

     // PAR.Create Time = JOB.*Job time
     PAR.Create_Time = JOB.*Job_time;

     // PAR.Create User = JOB.*USER
     PAR.Create_User = JOB.*USER;

     // PAR.Create Program = JOB.*PROGRAM
     PAR.Create_Program = JOB.*PROGRAM;

     //?*** Set CHANGE fields. ***
     // PAR.Change Date = CON.*ZERO
     PAR.Change_Date = *ZERO;

     // PAR.Change Time = CON.*ZERO
     PAR.Change_Time = *ZERO;

     // PAR.Change User = CON.*BLANK
     PAR.Change_User = *BLANK;

     // PAR.Change Program = CON.*BLANK
     PAR.Change_Program = *BLANK;

    }

    EXECUTE FUNCTION(Rtv Pckng Reprtng Cat RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1653012;
    PARAMETER(DB1.Pckg_Reporting_Group);
    PARAMETER(DB1.Pckg_Group_Category);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

   }

   ENDIF;

  }

  ENDIF;

 }

 CASE;

 // IF PGM.*Return code is Company Item Found
 IF PGM.*Return_code = 'USR0327';

 EXECUTE FUNCTION(Chg Item w/Defaults NW CH) TYPE(CHGOBJ) FILE(CABZREP)          AC1701546;
 PARAMETER(960);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Description_Line_One);
 PARAMETER(LCL.Description_Line_Two);
 PARAMETER(LCL.Item_Label_Line_1);
 PARAMETER(LCL.Item_Label_Line_2);
 PARAMETER(LCL.Item_Label_Line_3);
 PARAMETER(LCL.Item_Label_Line_4);
 PARAMETER(LCL.UOM_Primary);
 PARAMETER(LCL.Conversion_Factor_1);
 PARAMETER(LCL.Operation_Factor_1);
 PARAMETER(LCL.UOM_Second);
 PARAMETER(LCL.Conversion_Factor_2);
 PARAMETER(LCL.Operation_Factor_2);
 PARAMETER(LCL.UOM_Third);
 PARAMETER(LCL.UOM_Pricing);
 PARAMETER(LCL.Unit_Weight);
 PARAMETER(LCL.Quality_Level);
 PARAMETER(LCL.Item_Level);
 PARAMETER(LCL.Production_Date_Control);
 PARAMETER(LCL.Catch_Weight_Status);
 PARAMETER(LCL.Minimum_Weight_Per_Case);
 PARAMETER(LCL.Maximum_Weight_Per_Case);
 PARAMETER(LCL.Number_Cases_On_A_Pallet);
 PARAMETER(LCL.Vendor_Item_Default);
 PARAMETER(LCL.Item_Structure_Class_Code);
 PARAMETER(LCL.Item_Structure_Group_Code);
 PARAMETER(LCL.Item_Structure_Type_Code);
 PARAMETER(LCL.Default_Commod_Mark_basis);
 PARAMETER(LCL.Transportation_Temp);
 PARAMETER(LCL.Item_Type_Code);
 PARAMETER(LCL.Package_Type_Code);
 PARAMETER(LCL.Maximum_Audit_Value);
 PARAMETER(LCL.Minimum_Audit_Value);
 PARAMETER(LCL.Market_Overage);
 PARAMETER(LCL.Standard_Overage_Underage);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Item_Pricing_Operation);
 PARAMETER(LCL.Item_Pricing_Constant);
 PARAMETER(LCL.Default_Warehouse);
 PARAMETER(LCL.Price_Method_Default);
 PARAMETER(LCL.Fresh_Chilling_Time);
 PARAMETER(LCL.Base_Conv_Loss_Item);
 PARAMETER(LCL.Variety_Rendered_Cut);
 PARAMETER(LCL.Frozen_Make_to_Order_Sts);
 PARAMETER(LCL.Credit_Item_Status);
 PARAMETER(LCL.Std_Weight_Head_Var_Ren);
 PARAMETER(LCL.Pieces_Per_Head);
 PARAMETER(LCL.Department_Code);
 PARAMETER(LCL.Group_for_Packaging);
 PARAMETER(LCL.Item_Category_Number_1);
 PARAMETER(LCL.Made_to_Order_Code);
 PARAMETER(LCL.Item_Category_Number_2);
 PARAMETER(LCL.Transportation_Equip_Type);
 PARAMETER(LCL.Item_Category_Number_3);
 PARAMETER(LCL.Item_Category_Code_3);
 PARAMETER(LCL.Item_Category_Number_4);
 PARAMETER(LCL.GL_Sub_Code);
 PARAMETER(LCL.Item_Category_Number_5);
 PARAMETER(LCL.Item_Structure_Sub_Class);
 PARAMETER(LCL.Item_Category_Number_6);
 PARAMETER(LCL.Item_Primal_Sched_Report);
 PARAMETER(LCL.Item_Category_Number_7);
 PARAMETER(LCL.Item_Exc_Man_Prc_Excp);
 PARAMETER(LCL.Item_Category_Number_8);
 PARAMETER(LCL.Item_Prod_Sched_Send_PFS);
 PARAMETER(LCL.Item_Category_Number_9);
 PARAMETER(LCL.Item_Category_Code_9);
 PARAMETER(LCL.Item_Category_Number_10);
 PARAMETER(LCL.Item_Category_Code_10);
 PARAMETER(LCL.Pallet_Tare_Weight);
 PARAMETER(LCL.Misc_Tare_Weight);
 PARAMETER(LCL.Production_Lead_Days);
 PARAMETER(LCL.Packaging_Code);
 PARAMETER(LCL.Item_Market_Code);
 PARAMETER(LCL.TF_Co_Ownership_Sts);
 PARAMETER(LCL.Agrimetrics_group);
 PARAMETER(LCL.Agrimetrics_pack);
 PARAMETER(LCL.Agrimetrics_grade);
 PARAMETER(LCL.PA_Base_Avail_Rpt_Include);
 PARAMETER(LCL.PM_Pounds_per_Hour);
 PARAMETER(LCL.Item_Frt_Overage_Prc_UOM);
 PARAMETER(LCL.Packages_per_case);
 PARAMETER(LCL.Use_Freeze_Sell_By_Days);
 PARAMETER(LCL.PM_Batch_Size);
 PARAMETER(LCL.Package_Level_size);
 PARAMETER(LCL.Partial_Item_Code);
 PARAMETER(LCL.WIP_Item_Code);
 PARAMETER(LCL.WIP_Reject_Code);
 PARAMETER(LCL.Std_Costing_Unit_Weight);
 PARAMETER(LCL.FP_Std_Green_Weight);
 PARAMETER(LCL.PM_Std_LBS_Man_Per_Hour);
 PARAMETER(LCL.PM_Raw_Meat_LBS_Per_Hour);
 PARAMETER(LCL.PM_Formula_LBS_Per_Hour);
 PARAMETER(LCL.PM_Finished_LBS_Per_Hour);
 PARAMETER(LCL.SH_Unused_was_broker);
 PARAMETER(LCL.PM_Raw_Material_Type_Code);
 PARAMETER(LCL.PM_Line_Number);
 PARAMETER(LCL.Seconds_Item);
 PARAMETER(LCL.Print_on_Realization_Rpt);
 PARAMETER(LCL.Unit_Weight_Change_Sts);
 PARAMETER(LCL.Piece_Count_Item);
 PARAMETER(LCL.Pieces_Per_Bag);
 PARAMETER(LCL.Bags_Per_Unit);
 PARAMETER(LCL.Export_Domestic);
 PARAMETER(LCL.Print_On_Schedule);
 PARAMETER(LCL.Fresh_Inv_Allocation_Seq);
 PARAMETER(LCL.Fresh_Sched_As_Ordered);
 PARAMETER(LCL.Frozen_Inv_Allocation_Seq);
 PARAMETER(LCL.Primal_Group_Code);
 PARAMETER(LCL.Item_Meat_Cost_Group_Code);
 PARAMETER(LCL.UPC_Code_2);
 PARAMETER(LCL.Item_Target_Price);
 PARAMETER(LCL.Minimum_Piece_Weight);
 PARAMETER(LCL.Maximum_Piece_Weight);
 PARAMETER(LCL.Seaboard_Equivalent_Item);
 PARAMETER(LCL.Production_Qty_Per_Shift);
 PARAMETER(LCL.Scheduling_Position_Grade);
 PARAMETER(LCL.Sold_100_Percent_Frozen);
 PARAMETER(LCL.Maximum_Shifts);
 PARAMETER(LCL.Value_Added_Sts);
 PARAMETER(LCL.Label_Type);
 PARAMETER(LCL.Item_TF_Exempt_Code);
 PARAMETER(LCL.Item_TF_Classification);
 PARAMETER(LCL.Default_Workcenter);
 {
  //?USER: Processing after Data read

  //?Notification of change
  DO;

  // LCL.Company Number Alpha = CVTVAR(DB1.Company Number)
  LCL.Company_Number_Alpha = CVTVAR(DB1.Company_Number);

  // LCL.Item Code Txt = CVTVAR(DB1.Item Code)
  LCL.Item_Code_Txt = CVTVAR(DB1.Item_Code);

  // LCL.Text USR 8 = CONCAT(CON.Type:,DB1.Item Type Code,CON.1)
  LCL.Text_USR_8 = 'Type:' + DB1.Item_Type_Code (1);

  // LCL.Text USR 20 = CONCAT(CON.Changed By:,JOB.*USER,CON.1)
  LCL.Text_USR_20 = 'Changed By:' + JOB.*USER (1);

  // LCL.Note: Text Usr - 50 = CONCAT(CON.CO/ITEM:,LCL.Company Number Alpha,CON.1)
  LCL.Note_Text_Usr_50 = 'CO/ITEM:' + LCL.Company_Number_Alpha (1);

  // LCL.Note: Text Usr - 50 = CONCAT(LCL.Note: Text Usr - 50,LCL.Item Code Txt,CON.1)
  LCL.Note_Text_Usr_50 = LCL.Note_Text_Usr_50 + LCL.Item_Code_Txt (1);

  // LCL.Note: Text Usr - 50 = CONCAT(LCL.Note: Text Usr - 50,LCL.Text USR 8,CON.1)
  LCL.Note_Text_Usr_50 = LCL.Note_Text_Usr_50 + LCL.Text_USR_8 (1);

  // LCL.Note: Text Usr - 50 = CONCAT(LCL.Note: Text Usr - 50,LCL.Text USR 20,CON.1)
  LCL.Note_Text_Usr_50 = LCL.Note_Text_Usr_50 + LCL.Text_USR_20 (1);

  //?Packaging & Supply
  CASE;

  // IF DB1.Item Type Code is Packaging and Supplies
  IF DB1.Item_Type_Code = 'PS';

  //?Box Unit Weight
  CASE;

  // IF DB1.Unit Weight NE PAR.Unit Weight
  IF DB1.Unit_Weight <> PAR.Unit_Weight;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_1 = RTVMSG(USR3138);
  PARAMETER('Unit Weight:');
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(*BLANK);

  ENDIF;

  ENDIF;

  //?Finished Goods
  CASE;

  // IF DB1.Item Type Code is Finished Goods
  IF DB1.Item_Type_Code = 'FG';

  //?Misc Tare Weight will not be overlayed from the Item Default.
  //?Misc Tare Weight be the same. company item misc tare weight
  //?is being moved, so the following compare will not be true
  //?will go ahead and leave in case rules do change
  //?Misc Tare Weight
  CASE;

  // IF PAR.Misc Tare Weight NE DB1.Misc Tare Weight
  IF PAR.Misc_Tare_Weight <> DB1.Misc_Tare_Weight;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_1 = RTVMSG(USR3138);
  PARAMETER('Misc Tare Weight:');
  PARAMETER(PAR.Misc_Tare_Weight);
  PARAMETER(',');

  ENDIF;

  //?Minimum Weight Per Case
  CASE;

  // IF PAR.Minimum Weight Per Case NE DB1.Minimum Weight Per Case
  IF PAR.Minimum_Weight_Per_Case <> DB1.Minimum_Weight_Per_Case;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_2 = RTVMSG(USR3138);
  PARAMETER('Min Wt per Case:');
  PARAMETER(PAR.Minimum_Weight_Per_Case);
  PARAMETER(',');

  ENDIF;

  //?Maximum Weight Per Case
  CASE;

  // IF PAR.Maximum Weight Per Case NE DB1.Maximum Weight Per Case
  IF PAR.Maximum_Weight_Per_Case <> DB1.Maximum_Weight_Per_Case;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_3 = RTVMSG(USR3138);
  PARAMETER('Max Wt per Case:');
  PARAMETER(PAR.Maximum_Weight_Per_Case);
  PARAMETER(',');

  ENDIF;

  //?Pieces per Bag
  CASE;

  // IF PAR.Pieces Per Bag NE DB1.Pieces Per Bag
  IF PAR.Pieces_Per_Bag <> DB1.Pieces_Per_Bag;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_4 = RTVMSG(USR3138);
  PARAMETER('Pieces per Bag:');
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(',');

  ENDIF;

  //?Bags per Unit
  CASE;

  // IF PAR.Bags Per Unit NE DB1.Bags Per Unit
  IF PAR.Bags_Per_Unit <> DB1.Bags_Per_Unit;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_5 = RTVMSG(USR3138);
  PARAMETER('Bags per Unit:');
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(',');

  ENDIF;

  ENDIF;

  CASE;

  // IF LCL.Change Flag USR is Yes
  IF LCL.Change_Flag_USR = 'Y';

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PRKSCHED');
  PARAMETER(WRK.DL_List_ID);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program SND Pager Msg-Long-50 UP.
  CALL PROGRAM(SND Pager Msg-Long-50 UP) ('PPFVUPC');
  PARAMETER(WRK.DL_List_ID);
  PARAMETER(LCL.Note_Text_Usr_50);
  PARAMETER(LCL.Office_Message_USR_1);
  PARAMETER(LCL.Office_Message_USR_2);
  PARAMETER(LCL.Office_Message_USR_3);
  PARAMETER(LCL.Office_Message_USR_4);
  PARAMETER(LCL.Office_Message_USR_5);

  ENDIF;

  ENDDO;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?Read the BOM for company 360 and create information for 960
 EXECUTE FUNCTION(Rtv BOM Conv - All Plants) TYPE(RTVOBJ) FILE(PDIOREP)          AC1706100;
 PARAMETER(DB1.Item_Code);
 PARAMETER(360);
 {
  //?USER: Process Data record

  //?Have read by company 360, create by 960
  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?copy with out the check on meat
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // AND LCL.Company Number NE DB1.Company Number
  AND LCL.Company_Number <> DB1.Company_Number;

  QUIT;

  ENDIF;

  CASE;

  // IF DB1.Company Number NE PAR.Company Number
  IF DB1.Company_Number <> PAR.Company_Number;

  // AND DB1.BOM Type is Meat Items
  AND DB1.BOM_Type = 'C'/'P';

  // LCL.Company Number = DB1.Company Number
  LCL.Company_Number = DB1.Company_Number;

  EXECUTE FUNCTION(CRT Item Bill of Mat   CR) TYPE(CRTOBJ) FILE(PDIOREP)          AC1706103;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(DB1.BOM_Type);
  PARAMETER(DB1.Sales_Yield);
  PARAMETER(DB1.Production_Yield);
  PARAMETER(DB1.Packaging_Quantity);
  PARAMETER(DB1.UOM_Primary_Dft);
  PARAMETER(DB1.Upd_Standard_Production);
  PARAMETER(DB1.Consume_Priority);
  PARAMETER(DB1.Consume_Priority_Percent);
  PARAMETER(DB1.BOM_Pumped_Percent);
  PARAMETER(DB1.BOM_Meat_Cost_ConsumedPCT);
  PARAMETER(DB1.BOM_Off_Line_Yield_Pct);
  PARAMETER(DB1.BOM_Multi_RM_Option);
  PARAMETER(DB1.BOM_Group_Prod_Yield);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

}


