// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDD4XFR
// ?Date: 14.08.2025 Time: 03:31:30
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(CPY Copy Carrier Rates RT) TYPE(RTVOBJ) FILE(PDKHREP)          AC1380412;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Region_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Starting_Miles);
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.@Region_Code);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER(PAR.USR_Carrier_Code);
PARAMETER(PAR.Unused_Mile_Range_1);
PARAMETER(PAR.Status_Y_or_N);
{
 //?USER: Initialize routine

 //?***** Change Log
 DO;

 //?** 04/03/2006 LJB L060329C
 //?** Add test for Warehouse Code and Miles being left blank.
 //?*****
 //?** 12/07/2006 RMC TRF015 allow copy to all active whses for company
 //?*****
 ENDDO;

 //?USER: Process Data record

 // PAR.USR Update Flag = CND.No
 PAR.USR_Update_Flag = *BLANK;

 //?Set update flag based on parameters passed
 CASE;

 // IF PAR.Region Code EQ WRK.BLANK
 IF PAR.Region_Code = WRK.BLANK;

 // AND PAR.Warehouse Code EQ WRK.BLANK
 AND PAR.Warehouse_Code = WRK.BLANK;

 // AND PAR.Carrier Code EQ WRK.BLANK
 AND PAR.Carrier_Code = WRK.BLANK;

 // AND PAR.Starting Miles EQ WRK.ZERO
 AND PAR.Starting_Miles = WRK.ZERO;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 //?Set update flag based on parameters passed
 // IF PAR.Region Code NE WRK.BLANK
 IF PAR.Region_Code <> WRK.BLANK;

 // AND PAR.Warehouse Code NE WRK.BLANK
 AND PAR.Warehouse_Code <> WRK.BLANK;

 // AND PAR.Carrier Code NE WRK.BLANK
 AND PAR.Carrier_Code <> WRK.BLANK;

 // AND PAR.Starting Miles NE WRK.ZERO
 AND PAR.Starting_Miles <> WRK.ZERO;

 //?Match on all
 CASE;

 // IF DB1.Region Code EQ PAR.Region Code
 IF DB1.Region_Code = PAR.Region_Code;

 // AND DB1.Warehouse Code EQ PAR.Warehouse Code
 AND DB1.Warehouse_Code = PAR.Warehouse_Code;

 // AND DB1.Carrier Code EQ PAR.Carrier Code
 AND DB1.Carrier_Code = PAR.Carrier_Code;

 // AND DB1.Starting Miles EQ PAR.Starting Miles
 AND DB1.Starting_Miles = PAR.Starting_Miles;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?Set update flag based on parameters passed
 // IF PAR.Region Code NE WRK.BLANK
 IF PAR.Region_Code <> WRK.BLANK;

 // AND PAR.Warehouse Code NE WRK.BLANK
 AND PAR.Warehouse_Code <> WRK.BLANK;

 // AND PAR.Carrier Code NE WRK.BLANK
 AND PAR.Carrier_Code <> WRK.BLANK;

 //?Match on Region, Whse, Carrier
 CASE;

 // IF DB1.Region Code EQ PAR.Region Code
 IF DB1.Region_Code = PAR.Region_Code;

 // AND DB1.Warehouse Code EQ PAR.Warehouse Code
 AND DB1.Warehouse_Code = PAR.Warehouse_Code;

 // AND DB1.Carrier Code EQ PAR.Carrier Code
 AND DB1.Carrier_Code = PAR.Carrier_Code;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?Set update flag based on parameters passed
 // IF PAR.Region Code NE WRK.BLANK
 IF PAR.Region_Code <> WRK.BLANK;

 // AND PAR.Warehouse Code NE WRK.BLANK
 AND PAR.Warehouse_Code <> WRK.BLANK;

 //?Match on Region, Whse
 CASE;

 // IF DB1.Region Code EQ PAR.Region Code
 IF DB1.Region_Code = PAR.Region_Code;

 // AND DB1.Warehouse Code EQ PAR.Warehouse Code
 AND DB1.Warehouse_Code = PAR.Warehouse_Code;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?Set update flag based on parameters passed
 // IF PAR.Warehouse Code NE WRK.BLANK
 IF PAR.Warehouse_Code <> WRK.BLANK;

 // AND PAR.Carrier Code NE WRK.BLANK
 AND PAR.Carrier_Code <> WRK.BLANK;

 // AND PAR.Starting Miles NE WRK.ZERO
 AND PAR.Starting_Miles <> WRK.ZERO;

 //?Match on Whse, Carrier, Miles
 CASE;

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // AND DB1.Carrier Code EQ PAR.Carrier Code
 AND DB1.Carrier_Code = PAR.Carrier_Code;

 // AND DB1.Starting Miles EQ PAR.Starting Miles
 AND DB1.Starting_Miles = PAR.Starting_Miles;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?Set update flag based on parameters passed
 // IF PAR.Warehouse Code NE WRK.BLANK
 IF PAR.Warehouse_Code <> WRK.BLANK;

 // AND PAR.Carrier Code NE WRK.BLANK
 AND PAR.Carrier_Code <> WRK.BLANK;

 //?Match on Whse, Carrier
 CASE;

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // AND DB1.Carrier Code EQ PAR.Carrier Code
 AND DB1.Carrier_Code = PAR.Carrier_Code;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?Set update flag based on parameters passed
 // IF PAR.Carrier Code NE WRK.BLANK
 IF PAR.Carrier_Code <> WRK.BLANK;

 // AND PAR.Starting Miles NE WRK.ZERO
 AND PAR.Starting_Miles <> WRK.ZERO;

 //?Match on Carrier, Miles
 CASE;

 // IF DB1.Carrier Code EQ PAR.Carrier Code
 IF DB1.Carrier_Code = PAR.Carrier_Code;

 // AND DB1.Starting Miles EQ PAR.Starting Miles
 AND DB1.Starting_Miles = PAR.Starting_Miles;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?** Add test for Warehouse & Miles blank          04/03/06 LJB
 //?Set update flag based on parameters passed
 // IF PAR.Region Code NE WRK.BLANK
 IF PAR.Region_Code <> WRK.BLANK;

 // AND PAR.Carrier Code NE WRK.BLANK
 AND PAR.Carrier_Code <> WRK.BLANK;

 //?Match on Region, Carrier Code
 CASE;

 // IF DB1.Region Code EQ PAR.Region Code
 IF DB1.Region_Code = PAR.Region_Code;

 // AND DB1.Carrier Code EQ PAR.Carrier Code
 AND DB1.Carrier_Code = PAR.Carrier_Code;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?Set update flag based on parameters passed
 // IF PAR.Region Code NE WRK.BLANK
 IF PAR.Region_Code <> WRK.BLANK;

 //?Match on Region Code
 CASE;

 // IF DB1.Region Code EQ PAR.Region Code
 IF DB1.Region_Code = PAR.Region_Code;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?Set update flag based on parameters passed
 // IF PAR.Warehouse Code NE WRK.BLANK
 IF PAR.Warehouse_Code <> WRK.BLANK;

 //?Match on Warehouse Code
 CASE;

 // IF DB1.Warehouse Code EQ PAR.Warehouse Code
 IF DB1.Warehouse_Code = PAR.Warehouse_Code;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?Set update flag based on parameters passed
 // IF PAR.Carrier Code NE WRK.BLANK
 IF PAR.Carrier_Code <> WRK.BLANK;

 //?Match on Carrier Code
 CASE;

 // IF DB1.Carrier Code EQ PAR.Carrier Code
 IF DB1.Carrier_Code = PAR.Carrier_Code;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?Set update flag based on parameters passed
 // IF PAR.Starting Miles NE WRK.ZERO
 IF PAR.Starting_Miles <> WRK.ZERO;

 //?Match on Starting Miles
 CASE;

 // IF DB1.Starting Miles EQ PAR.Starting Miles
 IF DB1.Starting_Miles = PAR.Starting_Miles;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.USR Update Flag is Yes
 IF PAR.USR_Update_Flag = 'Y';

 //?Fill in fields for create
 DO;

 //?Region
 CASE;

 // IF PAR.@Region Code EQ WRK.BLANK
 IF PAR.@Region_Code = WRK.BLANK;

 // WRK.@Region Code = DB1.Region Code
 WRK.@Region_Code = DB1.Region_Code;

 //?Region
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.@Region Code = PAR.@Region Code
 WRK.@Region_Code = PAR.@Region_Code;

 ENDIF;

 //?Warehouse
 CASE;

 // IF PAR.USR Warehouse Code EQ WRK.BLANK
 IF PAR.USR_Warehouse_Code = WRK.BLANK;

 // WRK.USR Warehouse Code = DB1.Warehouse Code
 WRK.USR_Warehouse_Code = DB1.Warehouse_Code;

 //?Warehouse
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.USR Warehouse Code = PAR.USR Warehouse Code
 WRK.USR_Warehouse_Code = PAR.USR_Warehouse_Code;

 ENDIF;

 //?Carrier
 CASE;

 // IF PAR.USR Carrier Code EQ WRK.BLANK
 IF PAR.USR_Carrier_Code = WRK.BLANK;

 // WRK.USR Carrier Code = DB1.Carrier Code
 WRK.USR_Carrier_Code = DB1.Carrier_Code;

 //?Carrier
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.USR Carrier Code = PAR.USR Carrier Code
 WRK.USR_Carrier_Code = PAR.USR_Carrier_Code;

 ENDIF;

 //?Miles
 CASE;

 // IF PAR.Mile Range 1 EQ WRK.ZERO
 IF PAR.Unused_Mile_Range_1 = WRK.ZERO;

 // WRK.Mile Range 1 = DB1.Starting Miles
 WRK.Unused_Mile_Range_1 = DB1.Starting_Miles;

 //?Miles
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Mile Range 1 = PAR.Mile Range 1
 WRK.Unused_Mile_Range_1 = PAR.Unused_Mile_Range_1;

 ENDIF;

 ENDDO;

 //? 10/15/04 PKD Changed the process to update the rate if the
 //?              carrier is an established carrier.
 CASE;

 // IF PAR.Status - Y or N is no
 IF PAR.Status_Y_or_N = 'N';

 EXECUTE FUNCTION(Upd Rate              RT) TYPE(RTVOBJ) FILE(PDKHREP)           AC1710618;
 PARAMETER(PAR.USR_Company_Number);
 PARAMETER(WRK.@Region_Code);
 PARAMETER(WRK.USR_Warehouse_Code);
 PARAMETER(WRK.USR_Carrier_Code);
 PARAMETER(WRK.Unused_Mile_Range_1);
 PARAMETER(DB1.Carrier_Rate);
 PARAMETER(DB1.Description);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT PD Carrier Rates   CR) TYPE(CRTOBJ) FILE(PDKHREP)          AC1379030;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Region_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Starting_Miles);
  PARAMETER(PAR.Carrier_Rate);
  PARAMETER(PAR.Description);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(CHG PD Carrier Rates   CH) TYPE(CHGOBJ) FILE(PDKHREP)          AC1379031;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Region_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Starting_Miles);
  PARAMETER(PAR.Carrier_Rate);
  PARAMETER(DB1.Description);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?RMC 12/7/06 copy to all active whse for TO company
 EXECUTE FUNCTION(Rtv Cpy Carr Reg Rate RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1802752;
 PARAMETER(PAR.USR_Company_Number);
 PARAMETER(DB1.Region_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Starting_Miles);
 PARAMETER(DB1.Carrier_Rate);
 PARAMETER(DB1.Description);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  EXECUTE FUNCTION(Upd Rate              RT) TYPE(RTVOBJ) FILE(PDKHREP)           AC1710618;
  PARAMETER(DB1.Shipping_Company);
  PARAMETER(PAR.Region_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Starting_Miles);
  PARAMETER(PAR.Carrier_Rate);
  PARAMETER(PAR.Description);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT PD Carrier Rates   CR) TYPE(CRTOBJ) FILE(PDKHREP)          AC1379030;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Region_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Carrier_Code);
   PARAMETER(PAR.Starting_Miles);
   PARAMETER(PAR.Carrier_Rate);
   PARAMETER(PAR.Description);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(CHG PD Carrier Rates   CH) TYPE(CHGOBJ) FILE(PDKHREP)          AC1379031;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Region_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Starting_Miles);
   PARAMETER(PAR.Carrier_Rate);
   PARAMETER(DB1.Description);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

}


