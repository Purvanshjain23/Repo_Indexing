// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMRXEFR
// ?Date: 14.08.2025 Time: 03:43:52
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E00221 10/02/08 RMC - added company to key of packaging type file
//?E00197 RMC 07/24/08 Dont allow weight on BT items
//?FP1271 RMC 01/30/08 New pgm for Damon to use when entering Pkg Wgts mnthly
//?  If pkg item's weights are changed and the Type is "Incl in Misc
//?  Tare", then Chg Modified Weight Sts to "Y" so it will be read in
//? the bat pgm and all misc tares on FG items using the
//?  pkg item are recalcd AND the Carlisle download rcd is created
//?E00221 update comp item's unit wt if Pkg type is not incl in misc tare
//?and comp item is on the packaging item rcd              10/08/08
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.USR Record Updated = CND.no
PAR.USR_Record_Updated = 'N';

//?USER: Initialize subfile header

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record (existing record)

//?Sel Company
CASE;

// IF CTL.Company Number NE RCD.Company Number
IF CTL.Company_Number <> RCD.Company_Number;

// OR DB1.Record Status is Deleted & Inactive
OR DB1.Record_Status = 'D'/'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel package item type
CASE;

// IF CTL.Pckg Item Type NE WRK.Blank for 4           USR
IF CTL.Pckg_Item_Type <> WRK.Blank_for_4_USR;

// AND CTL.Pckg Item Type NE DB1.Pckg Item Type
AND CTL.Pckg_Item_Type <> DB1.Pckg_Item_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Incl in Misc Tare RT) TYPE(RTVOBJ) FILE(POCAREP)           AC1865444;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Pckg_Item_Type);
PARAMETER(RCD.Incl_in_Misc_Tare);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Sel Incl in Misc Tare
CASE;

// IF CTL.Incl in Misc Tare NE WRK.Blank for 4           USR
IF CTL.Incl_in_Misc_Tare <> WRK.Blank_for_4_USR;

// AND CTL.Incl in Misc Tare NE RCD.Incl in Misc Tare
AND CTL.Incl_in_Misc_Tare <> RCD.Incl_in_Misc_Tare;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Validate subfile control

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// AND PAR.Allow Multi-Company is yes
AND PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.Packaging Item Code
IF PGM.*Cursor_field = CTL.Packaging_Item_Code;

// Call program Sel Packaging Item    SR.
CALL PROGRAM(Sel Packaging Item    SR) ('POFRSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Packaging_Item_Code);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.Pckg Item Type
IF PGM.*Cursor_field = CTL.Pckg_Item_Type;

// Call program Sel Packaging Type    SL.
CALL PROGRAM(Sel Packaging Type    SL) ('PORQSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Pckg_Item_Type);

ENDIF;

ENDIF;

CASE;

// IF CTL.Pckg Item Type NE LCL.Pckg Item Type
IF CTL.Pckg_Item_Type <> LCL.Pckg_Item_Type;

// LCL.Pckg Item Type = CTL.Pckg Item Type
LCL.Pckg_Item_Type = CTL.Pckg_Item_Type;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Incl in Misc Tare NE LCL.Incl in Misc Tare
IF CTL.Incl_in_Misc_Tare <> LCL.Incl_in_Misc_Tare;

// LCL.Incl in Misc Tare = CTL.Incl in Misc Tare
LCL.Incl_in_Misc_Tare = CTL.Incl_in_Misc_Tare;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Packaging Itm-Wt  IF) TYPE(EXCINTFUN) FILE(POARREP)        AC1865861;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Packaging_Item_Code);
PARAMETER(RCD.Pckg_Item_Description);
PARAMETER(RCD.Pckg_List_Sequence);
PARAMETER(RCD.Pckg_Type_Class);
PARAMETER(RCD.Pckg_Item_Type);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Pckg_Unit_Cost);
PARAMETER(RCD.Pckg_Tare_Weight);
PARAMETER(RCD.Pckg_Reporting_Group);
PARAMETER(RCD.Pckg_Group_Category);
PARAMETER(RCD.Pckg_Modified_Weight);
PARAMETER(RCD.Pckg_Unused_Status_3);
PARAMETER(RCD.Pckg_Unused_Sts_2);
PARAMETER(RCD.Pre_printed_Bag_Sts);
PARAMETER(RCD.Pckg_Unused_Status_5);
PARAMETER(RCD.Pckg_Unused_Status_6);
PARAMETER(RCD.Pckg_Unused_Status_7);
PARAMETER(RCD.Pckg_Unused_Status_8);
PARAMETER(RCD.Pckg_Unused_Status_9);
PARAMETER(RCD.Pckg_Unused_Status_10);
PARAMETER(RCD.Pckg_Unused_Code);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
PARAMETER(RCD.USR_Weight_9_2);
PARAMETER(PAR.USR_Record_Updated);
{
 //?Execute internal function

 CASE;

 // IF PAR.USR Weight, 9.2 is Not equal to Zeros
 IF PAR.USR_Weight_9_2 <> *ZERO;

 //?new weight
 // LCL.Pckg Tare Weight = PAR.USR Weight, 9.2
 LCL.Pckg_Tare_Weight = PAR.USR_Weight_9_2;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?old weight
 // LCL.Pckg Tare Weight = PAR.Pckg Tare Weight
 LCL.Pckg_Tare_Weight = PAR.Pckg_Tare_Weight;

 ENDIF;

 //?FP1271 - RMC - 04/03/08
 //? If the tare weight changed and Include in Misc Tare = Y then
 //?  Chg Modified Weight Sts to "Y" so bat pgm will read the item
 // LCL.Pckg Modified Weight = CND.No
 LCL.Pckg_Modified_Weight = 'N';

 EXECUTE FUNCTION(Rtv Incl in Misc Tare RT) TYPE(RTVOBJ) FILE(POCAREP)           AC1865444;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Pckg_Item_Type);
 PARAMETER(LCL.Incl_in_Misc_Tare);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Set Modified sts if Pkg Item's wt was changed
 CASE;

 // IF LCL.Pckg Tare Weight NE PAR.Pckg Tare Weight
 IF LCL.Pckg_Tare_Weight <> PAR.Pckg_Tare_Weight;

 // PAR.USR Record Updated = CND.yes
 PAR.USR_Record_Updated = 'Y';

 CASE;

 // IF LCL.Incl in Misc Tare is Yes
 IF LCL.Incl_in_Misc_Tare = 'Y';

 // LCL.Pckg Modified Weight = CND.Yes
 LCL.Pckg_Modified_Weight = 'Y';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Chg Packaging Item    CH) TYPE(CHGOBJ) FILE(POARREP)           AC1602024;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Packaging_Item_Code);
 PARAMETER(PAR.Pckg_Item_Description);
 PARAMETER(PAR.Pckg_List_Sequence);
 PARAMETER(PAR.Pckg_Type_Class);
 PARAMETER(PAR.Pckg_Item_Type);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Pckg_Unit_Cost);
 PARAMETER(LCL.Pckg_Tare_Weight);
 PARAMETER(PAR.Pckg_Reporting_Group);
 PARAMETER(PAR.Pckg_Group_Category);
 PARAMETER(LCL.Pckg_Modified_Weight);
 PARAMETER(PAR.Pckg_Unused_Status_3);
 PARAMETER(PAR.Pckg_Unused_Sts_2);
 PARAMETER(PAR.Pre_printed_Bag_Sts);
 PARAMETER(PAR.Pckg_Unused_Status_5);
 PARAMETER(PAR.Pckg_Unused_Status_6);
 PARAMETER(PAR.Pckg_Unused_Status_7);
 PARAMETER(PAR.Pckg_Unused_Status_8);
 PARAMETER(PAR.Pckg_Unused_Status_9);
 PARAMETER(PAR.Pckg_Unused_Status_10);
 PARAMETER(PAR.Pckg_Unused_Code);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing after Data read

  CASE;

  // IF PAR.Pckg Reporting Group NE DB1.Pckg Reporting Group
  IF PAR.Pckg_Reporting_Group <> DB1.Pckg_Reporting_Group;

  EXECUTE FUNCTION(Rtv Pckng Reprtng Cat RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1653012;
  PARAMETER(PAR.Pckg_Reporting_Group);
  PARAMETER(WRK.Pckg_Group_Category);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Pckg Group Category = DB1.Pckg Group Category
  WRK.Pckg_Group_Category = DB1.Pckg_Group_Category;

  ENDIF;

  CASE;

  // IF DB1.Pckg Item Type NE PAR.Pckg Item Type
  IF DB1.Pckg_Item_Type <> PAR.Pckg_Item_Type;

  // OR DB1.Pckg Reporting Group NE PAR.Pckg Reporting Group
  OR DB1.Pckg_Reporting_Group <> PAR.Pckg_Reporting_Group;

  // OR DB1.Pckg Group Category NE WRK.Pckg Group Category
  OR DB1.Pckg_Group_Category <> WRK.Pckg_Group_Category;

  EXECUTE FUNCTION(Rtv Chg Pckg Itm flds RT) TYPE(RTVOBJ) FILE(POAZCPP)           AC1658130;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Packaging_Item_Code);
  PARAMETER(PAR.Pckg_Item_Type);
  PARAMETER(PAR.Pckg_Reporting_Group);
  PARAMETER(WRK.Pckg_Group_Category);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Packaging BOM     CH) TYPE(CHGOBJ) FILE(POAZCPP)           AC1606856;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Packaging_Item_Code);
   PARAMETER(DB1.Packaging_Item_Quantity);
   PARAMETER(PAR.Pckg_Item_Type);
   PARAMETER(PAR.Pckg_Reporting_Group);
   PARAMETER(PAR.Pckg_Group_Category);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     // PAR.Change Date = JOB.*Job date
     PAR.Change_Date = JOB.*Job_date;

     // PAR.Change Time = JOB.*Job time
     PAR.Change_Time = JOB.*Job_time;

     // PAR.Change User = JOB.*USER
     PAR.Change_User = JOB.*USER;

     // PAR.Change Program = JOB.*PROGRAM
     PAR.Change_Program = JOB.*PROGRAM;

    }

    //?USER: Processing after Data update

    EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
    PARAMETER(DB1.Company_Number);
    PARAMETER('PRDPKG');
    PARAMETER(LCL.PFS_AccuSort_Active);
    PARAMETER(LCL.PFS_Carlisle_Active);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.PFS Carlisle Active is Yes
    IF LCL.PFS_Carlisle_Active = 'Y';

    // Call program PFS One Prod Pkging   XF.
    CALL PROGRAM(PFS One Prod Pkging   XF) ('PPNIXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Packaging_Item_Code);
    PARAMETER('C');

    ENDIF;

   }

  }

  ENDIF;

  //?USER: Processing before Data update

  // DB1.Pckg Group Category = WRK.Pckg Group Category
  DB1.Pckg_Group_Category = WRK.Pckg_Group_Category;

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?RMC E00221 10/08/08 update comp item if item code is on packaging item
 CASE;

 // IF PAR.Item Code is Entered
 IF PAR.Item_Code <> *ZERO;

 CASE;

 // IF LCL.Incl in Misc Tare is No
 IF LCL.Incl_in_Misc_Tare = 'N';

 //?this will update the PS item's unit weight in the comp item
 EXECUTE FUNCTION(CHG Item Unit Wt only CH) TYPE(CHGOBJ) FILE(CABZREP)           AC1897520;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Pckg_Tare_Weight);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Rtv/Chg Unt wgt,sts    RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1465399;
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Unit_Weight_Change_Sts);
  {
   //?USER: Process Data record

   // WRK.Conversion Factor 1 = DB1.Conversion Factor 1
   WRK.Conversion_Factor_1 = DB1.Conversion_Factor_1;

   // WRK.Conversion Factor 2 = DB1.Conversion Factor 2
   WRK.Conversion_Factor_2 = DB1.Conversion_Factor_2;

   //?IF Update the Conversion Factor who's unit of measure = LB
   CASE;

   // IF DB1.U/M - Second Dft is Pounds
   IF DB1.UOM_Second_Dft = 'LB';

   // WRK.Conversion Factor 1 = PAR.Unit Weight
   WRK.Conversion_Factor_1 = PAR.Unit_Weight;

   //?IF Update the Conversion Factor who's unit of measure = LB
   // IF DB1.U/M - Third Dft is Pounds
   IF DB1.UOM_Third_Dft = 'LB';

   // WRK.Conversion Factor 2 = PAR.Unit Weight
   WRK.Conversion_Factor_2 = PAR.Unit_Weight;

   ENDIF;

   EXECUTE FUNCTION(Chg Unt Wgt & chg sts CH) TYPE(CHGOBJ) FILE(OMBYREP)           AC1465398;
   PARAMETER(DB1.Item_Code);
   PARAMETER(WRK.Conversion_Factor_1);
   PARAMETER(WRK.Conversion_Factor_2);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Unit_Weight_Change_Sts);
  }

 }

 //?4/13/09 PKD Send Box info to PFS
 EXECUTE FUNCTION(RTV Box Pkg Values     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1655255;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(NLL.Description_Line_One);
 PARAMETER(NLL.Description_Line_Two);
 PARAMETER(NLL.Item_Label_Line_1);
 PARAMETER(NLL.Item_Label_Line_2);
 PARAMETER(NLL.Item_Label_Line_3);
 PARAMETER(NLL.Item_Label_Line_4);
 PARAMETER(NLL.UOM_Primary);
 PARAMETER(NLL.Conversion_Factor_1);
 PARAMETER(NLL.Operation_Factor_1);
 PARAMETER(NLL.UOM_Second);
 PARAMETER(NLL.Conversion_Factor_2);
 PARAMETER(NLL.Operation_Factor_2);
 PARAMETER(NLL.UOM_Third);
 PARAMETER(NLL.UOM_Pricing);
 PARAMETER(NLL.Unit_Weight);
 PARAMETER(NLL.Quality_Level);
 PARAMETER(NLL.Item_Level);
 PARAMETER(NLL.Production_Date_Control);
 PARAMETER(NLL.Catch_Weight_Status);
 PARAMETER(NLL.Minimum_Weight_Per_Case);
 PARAMETER(NLL.Maximum_Weight_Per_Case);
 PARAMETER(NLL.Number_Cases_On_A_Pallet);
 PARAMETER(NLL.Vendor_Item_Default);
 PARAMETER(NLL.Item_Structure_Class_Code);
 PARAMETER(NLL.Item_Structure_Group_Code);
 PARAMETER(NLL.Item_Structure_Type_Code);
 PARAMETER(NLL.Default_Commod_Mark_basis);
 PARAMETER(NLL.Transportation_Temp);
 PARAMETER(NLL.Item_Type_Code);
 PARAMETER(LCL.Package_Type_Code);
 PARAMETER(NLL.Maximum_Audit_Value);
 PARAMETER(NLL.Minimum_Audit_Value);
 PARAMETER(NLL.Market_Overage);
 PARAMETER(NLL.Standard_Overage_Underage);
 PARAMETER(NLL.Commodity_Price_Group);
 PARAMETER(NLL.Item_Pricing_Operation);
 PARAMETER(NLL.Item_Pricing_Constant);
 PARAMETER(NLL.Default_Warehouse);
 PARAMETER(NLL.Price_Method_Default);
 PARAMETER(NLL.Fresh_Chilling_Time);
 PARAMETER(NLL.Base_Conv_Loss_Item);
 PARAMETER(NLL.Variety_Rendered_Cut);
 PARAMETER(NLL.Frozen_Make_to_Order_Sts);
 PARAMETER(NLL.Credit_Item_Status);
 PARAMETER(NLL.Std_Weight_Head_Var_Ren);
 PARAMETER(NLL.Pieces_Per_Head);
 PARAMETER(NLL.Department_Code);
 PARAMETER(NLL.Group_for_Packaging);
 PARAMETER(NLL.Item_Category_Number_1);
 PARAMETER(NLL.Made_to_Order_Code);
 PARAMETER(NLL.Item_Category_Number_2);
 PARAMETER(NLL.Transportation_Equip_Type);
 PARAMETER(NLL.Item_Category_Number_3);
 PARAMETER(NLL.Item_Category_Code_3);
 PARAMETER(NLL.Item_Category_Number_4);
 PARAMETER(NLL.GL_Sub_Code);
 PARAMETER(NLL.Item_Category_Number_5);
 PARAMETER(NLL.Item_Structure_Sub_Class);
 PARAMETER(NLL.Item_Category_Number_6);
 PARAMETER(NLL.Item_Primal_Sched_Report);
 PARAMETER(NLL.Item_Category_Number_7);
 PARAMETER(NLL.Item_Exc_Man_Prc_Excp);
 PARAMETER(NLL.Item_Category_Number_8);
 PARAMETER(NLL.Item_Prod_Sched_Send_PFS);
 PARAMETER(NLL.Item_Category_Number_9);
 PARAMETER(NLL.Item_Category_Code_9);
 PARAMETER(NLL.Item_Category_Number_10);
 PARAMETER(NLL.Item_Category_Code_10);
 PARAMETER(NLL.Pallet_Tare_Weight);
 PARAMETER(NLL.Misc_Tare_Weight);
 PARAMETER(NLL.Production_Lead_Days);
 PARAMETER(NLL.Packaging_Code);
 PARAMETER(NLL.Item_Market_Code);
 PARAMETER(NLL.TF_Co_Ownership_Sts);
 PARAMETER(NLL.Agrimetrics_group);
 PARAMETER(NLL.Agrimetrics_pack);
 PARAMETER(NLL.Agrimetrics_grade);
 PARAMETER(NLL.PA_Base_Avail_Rpt_Include);
 PARAMETER(NLL.PM_Pounds_per_Hour);
 PARAMETER(NLL.Item_Frt_Overage_Prc_UOM);
 PARAMETER(NLL.Packages_per_case);
 PARAMETER(NLL.Use_Freeze_Sell_By_Days);
 PARAMETER(NLL.PM_Batch_Size);
 PARAMETER(NLL.Package_Level_size);
 PARAMETER(NLL.Partial_Item_Code);
 PARAMETER(NLL.WIP_Item_Code);
 PARAMETER(NLL.WIP_Reject_Code);
 PARAMETER(NLL.Std_Costing_Unit_Weight);
 PARAMETER(NLL.FP_Std_Green_Weight);
 PARAMETER(NLL.PM_Std_LBS_Man_Per_Hour);
 PARAMETER(NLL.PM_Raw_Meat_LBS_Per_Hour);
 PARAMETER(NLL.PM_Formula_LBS_Per_Hour);
 PARAMETER(NLL.PM_Finished_LBS_Per_Hour);
 PARAMETER(NLL.SH_Unused_was_broker);
 PARAMETER(NLL.PM_Raw_Material_Type_Code);
 PARAMETER(NLL.PM_Line_Number);
 PARAMETER(NLL.Seconds_Item);
 PARAMETER(NLL.Print_on_Realization_Rpt);
 PARAMETER(NLL.Unit_Weight_Change_Sts);
 PARAMETER(NLL.Piece_Count_Item);
 PARAMETER(NLL.Pieces_Per_Bag);
 PARAMETER(NLL.Bags_Per_Unit);
 PARAMETER(NLL.Export_Domestic);
 PARAMETER(NLL.Print_On_Schedule);
 PARAMETER(NLL.Fresh_Inv_Allocation_Seq);
 PARAMETER(NLL.Fresh_Sched_As_Ordered);
 PARAMETER(NLL.Frozen_Inv_Allocation_Seq);
 PARAMETER(NLL.Primal_Group_Code);
 PARAMETER(NLL.Item_Meat_Cost_Group_Code);
 PARAMETER(NLL.UPC_Code_2);
 PARAMETER(NLL.Item_Target_Price);
 PARAMETER(NLL.Minimum_Piece_Weight);
 PARAMETER(NLL.Maximum_Piece_Weight);
 PARAMETER(NLL.Seaboard_Equivalent_Item);
 PARAMETER(NLL.Production_Qty_Per_Shift);
 PARAMETER(NLL.Scheduling_Position_Grade);
 PARAMETER(NLL.Sold_100_Percent_Frozen);
 PARAMETER(NLL.Maximum_Shifts);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Package Type Code is Box Kit
 IF LCL.Package_Type_Code = 'B';

 // Call program PFS One Box           XF.
 CALL PROGRAM(PFS One Box           XF) ('PPMYXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);

 ENDIF;

 ENDIF;

 ENDIF;

}


