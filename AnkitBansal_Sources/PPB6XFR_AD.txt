// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPB6XFR
// ?Date: 14.08.2025 Time: 03:39:58
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(VAL Set Int. Acc EXTNL IF) TYPE(EXCINTFUN)                     AC1277374;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(PAR.Name);
PARAMETER(PAR.System_Value_Alpha);
PARAMETER(PAR.Access_Denied_Y_N);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Appl EXTERNAL IF) TYPE(EXCINTFUN)                     AC1277611;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(WRK.Access_Denied_Y_N);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  //?User Profile Record Not found
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // PAR.Access Denied (Y/N) = CND.no
  PAR.Access_Denied_Y_N = 'N';

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Access Denied (Y/N) = CND.yes
  PAR.Access_Denied_Y_N = 'Y';

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Use User Profile Control company if entered,get whse if the appl got one
  CASE;

  // IF LCL.Company Number is greater than zero
  IF LCL.Company_Number > *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Shipping_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   CASE;

   // IF DB1.Production Warehouse Code is Warehouse Code not Blank
   IF DB1.Production_Warehouse_Code <> *BLANK;

   // PAR.Warehouse Code = DB1.Production Warehouse Code
   PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

   QUIT;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 // PAR.Company Number = WRK.Company Number
 PAR.Company_Number = WRK.Company_Number;

 // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
 PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

 //?If access denied is no, rtv co. name
 CASE;

 // IF WRK.Access Denied (Y/N) is no
 IF WRK.Access_Denied_Y_N = 'N';

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(WRK.Company_Number);
 PARAMETER(PAR.Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 EXECUTE FUNCTION(RTV Screen Heading     RT) TYPE(EXCINTFUN)                     AC1277375;
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.System_Value_Alpha);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function DSP Center Text Str 40 US.
  EXECUTE FUNCTION(DSP Center Text Str 40 US) TYPE(EXCUSRSRC) ('PDA0UFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C                     MOVE 'N'       FLAG    1        FLAG
   C           UX        DOWGT0
   C           FLAG      ANDEQ'N'
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     MOVE 'Y'       FLAG
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   *** ADDED FOR HPE, THERE HEADER FOOTER IS OFF   MEA 042494
   C                     SUB  1         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // PAR.System Value Alpha = WRK.USR Description 40   2
  PAR.System_Value_Alpha = WRK.USR_Description_40_2;

 }

}


EXECUTE FUNCTION(Prc Manifest Report   RT) TYPE(RTVOBJ) FILE(PPACCPP)           AC1681701;
PARAMETER(1);
PARAMETER(PAR.Company_Number);
{
 //?USER: Process Data record

 // PAR.Search Text USR = DB1.Report Line
 PAR.Search_Text_USR = DB1.Report_Line;

 // PAR.Search Pattern USR = CON.Order
 PAR.Search_Pattern_USR = 'Order';

 // PAR.Scan Length USR = CON.5
 PAR.Scan_Length_USR = 5;

 // PAR.Start Position USR = CON.1
 PAR.Start_Position_USR = 1;

 // Execute function Scn Text              US.
 EXECUTE FUNCTION(Scn Text              US) TYPE(EXCUSRSRC) ('PPB8UFR');
 PARAMETER(PAR.Scan_Length_USR);
 PARAMETER(PAR.Start_Position_USR);
 PARAMETER(PAR.Search_Pattern_USR);
 PARAMETER(PAR.Search_Text_USR);
 PARAMETER(PAR.Position_USR);
 {
  C                     Z-ADD*ZEROS    POS     50
  C                     MOVE #ILN      LEN     50
  C                     MOVE #IST      ST      50
  C           #IPTN:LEN SCAN #IDTA:ST  POS
  C                     MOVE POS       #OU3NX
 }

 CASE;

 // IF PAR.Position USR is Greater than zero
 IF PAR.Position_USR > *ZERO;

 // PAR.AS Order Number = SUBSTRING(DB1.Report Line,CON.12,CON.7)
 PAR.AS_Order_Number = SUBSTRING(DB1.Report_Line:12:7);

 // PAR.Order Number = CVTVAR(PAR.AS Order Number)
 PAR.Order_Number = CVTVAR(PAR.AS_Order_Number);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Search Pattern USR = CON.PRODUCT :
 PAR.Search_Pattern_USR = 'PRODUCT :';

 // PAR.Scan Length USR = CON.9
 PAR.Scan_Length_USR = 9;

 // Execute function Scn Text              US.
 EXECUTE FUNCTION(Scn Text              US) TYPE(EXCUSRSRC) ('PPB8UFR');
 PARAMETER(PAR.Scan_Length_USR);
 PARAMETER(PAR.Start_Position_USR);
 PARAMETER(PAR.Search_Pattern_USR);
 PARAMETER(PAR.Search_Text_USR);
 PARAMETER(PAR.Position_USR);
 {
  C                     Z-ADD*ZEROS    POS     50
  C                     MOVE #ILN      LEN     50
  C                     MOVE #IST      ST      50
  C           #IPTN:LEN SCAN #IDTA:ST  POS
  C                     MOVE POS       #OU3NX
 }

 CASE;

 // IF PAR.Position USR is Greater than zero
 IF PAR.Position_USR > *ZERO;

 // PAR.AS Product Code = SUBSTRING(DB1.Report Line,CON.34,CON.5)
 PAR.AS_Product_Code = SUBSTRING(DB1.Report_Line:34:5);

 // PAR.Item Code = CVTVAR(PAR.AS Product Code)
 PAR.Item_Code = CVTVAR(PAR.AS_Product_Code);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?--------------- Case 1 -----------------
 //?* Serial Number *
 // WRK.Text USR 8 = SUBSTRING(DB1.Report Line,CON.8,CON.8)
 WRK.Text_USR_8 = SUBSTRING(DB1.Report_Line:8:8);

 // Execute function RPG TESTN for 8 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 8 pos.  US) TYPE(EXCUSRSRC) ('POPTUFR');
 PARAMETER(WRK.Text_USR_8);
 {
  C                     TESTN          WUYMTX  8  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 //?Create Case 1 Record
 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 //?Create Case 1 Record
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?* Case Net Weight *
 // LCL.Text USR 4 = SUBSTRING(DB1.Report Line,CON.1,CON.4)
 LCL.Text_USR_4 = SUBSTRING(DB1.Report_Line:1:4);

 // LCL.Calc 4 = CVTVAR(LCL.Text USR 4)
 LCL.Calc_4 = CVTVAR(LCL.Text_USR_4);

 // LCL.Text 1 Length USR = SUBSTRING(DB1.Report Line,CON.6,CON.1)
 LCL.Text_1_Length_USR = SUBSTRING(DB1.Report_Line:6:1);

 // LCL.Numeral 1             USR = CVTVAR(LCL.Text 1 Length USR)
 LCL.Numeral_1_USR = CVTVAR(LCL.Text_1_Length_USR);

 // LCL.Case Net Weight = LCL.Numeral 1             USR * CON..1 *Rounded
 LCL.Case_Net_Weight = LCL.Numeral_1_USR * .1 'H';

 // PAR.Case Net Weight = LCL.Case Net Weight + LCL.Calc 4
 PAR.Case_Net_Weight = LCL.Case_Net_Weight + LCL.Calc_4;

 //?* Case Serial Number *
 // PAR.Case Serial Number = CVTVAR(WRK.Text USR 8)
 PAR.Case_Serial_Number = CVTVAR(WRK.Text_USR_8);

 //?* Case Label Date *
 // LCL.Month USR = SUBSTRING(DB1.Report Line,CON.17,CON.2)
 LCL.Month_USR = SUBSTRING(DB1.Report_Line:17:2);

 // LCL.Day USR = SUBSTRING(DB1.Report Line,CON.20,CON.2)
 LCL.Day_USR = SUBSTRING(DB1.Report_Line:20:2);

 // LCL.Year 2A USR = SUBSTRING(DB1.Report Line,CON.23,CON.2)
 LCL.Year_2A_USR = SUBSTRING(DB1.Report_Line:23:2);

 // LCL.PT Prod Date ALPHA = CONCAT(CON.20,LCL.Year 2A USR,CND.*None)
 LCL.PT_Prod_Date_ALPHA = '20' + LCL.Year_2A_USR (*ZERO);

 // LCL.PT Prod Date ALPHA = CONCAT(LCL.PT Prod Date ALPHA,LCL.Month USR,CND.*None)
 LCL.PT_Prod_Date_ALPHA = LCL.PT_Prod_Date_ALPHA + LCL.Month_USR (*ZERO);

 // LCL.PT Prod Date ALPHA = CONCAT(LCL.PT Prod Date ALPHA,LCL.Day USR,CND.*None)
 LCL.PT_Prod_Date_ALPHA = LCL.PT_Prod_Date_ALPHA + LCL.Day_USR (*ZERO);

 // LCL.Date 8.0 USR = CVTVAR(LCL.PT Prod Date ALPHA)
 LCL.Date_8_0_USR = CVTVAR(LCL.PT_Prod_Date_ALPHA);

 // PAR.Case Label date = LCL.Date 8.0 USR
 PAR.Case_Label_date = LCL.Date_8_0_USR;

 //?* Create Order Manifest Record *
 EXECUTE FUNCTION(Crt Order Manifest    IF) TYPE(EXCINTFUN)                      AC1682726;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Case_Serial_Number);
 PARAMETER(PAR.Case_Label_date);
 PARAMETER(PAR.Case_Net_Weight);
 PARAMETER(*BLANK);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Sequence     RT) TYPE(RTVOBJ) FILE(PPADCPP)           AC1682728;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Case_Serial_Number);
  PARAMETER(PAR.Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.Sequence Number = CON.1
   PAR.Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.Sequence Number = DB1.Sequence Number + CON.1
   PAR.Sequence_Number = DB1.Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Order Manifest    CR) TYPE(CRTOBJ) FILE(PPADCPP)           AC1681752;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Case_Serial_Number);
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(PAR.Case_Label_date);
  PARAMETER(PAR.Case_Net_Weight);
  PARAMETER(PAR.Process_Status);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

 }

 EXECUTE FUNCTION(Upd Order Number      RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1682097;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Case_Serial_Number);
 PARAMETER(PAR.Case_Label_date);
 PARAMETER(PAR.Case_Net_Weight);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Item_Code);
 {
  //?USER: Processing if Data record not found

  //?When Co-Packer Products are shipped, the cases will be listed
  //?in the Manifest report, but we will not have a Product Trace
  //?record for it.  So, we need to create one.
  // LCL.AS Serial Number = CVTVAR(PAR.PT Serial Number)
  LCL.AS_Serial_Number = CVTVAR(PAR.PT_Serial_Number);

  // LCL.Scale ID = SUBSTRING(LCL.AS Serial Number,CON.1,CON.2)
  LCL.Scale_ID = SUBSTRING(LCL.AS_Serial_Number:1:2);

  // LCL.Date From Convert USR = CVTVAR(PAR.PT Label Date YYYYMMDD)
  LCL.Date_From_Convert_USR = CVTVAR(PAR.PT_Label_Date_YYYYMMDD);

  // Call program Cvt Date              UP.
  CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
  PARAMETER(LCL.Date_From_Convert_USR);
  PARAMETER(LCL.Date_To_Convert_USR);
  PARAMETER(*YYMD);
  PARAMETER(*CYMD);
  PARAMETER(*NONE);

  // LCL.Effective Label Date = CVTVAR(LCL.Date To Convert USR)
  LCL.Effective_Label_Date = CVTVAR(LCL.Date_To_Convert_USR);

  EXECUTE FUNCTION(Rtv Manifest Upl Info RT) TYPE(RTVOBJ) FILE(PPAAREP)           AC1682621;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Scale_ID);
  PARAMETER(LCL.Effective_Label_Date);
  PARAMETER(LCL.Line_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  CASE;

  // IF LCL.Scale ID is GE 20
  IF LCL.Scale_ID >= '20';

  EXECUTE FUNCTION(Crt Product Trace     CR) TYPE(CRTOBJ) FILE(POB2CPP)           AC1646314;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.PT_Serial_Number);
  PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
  PARAMETER(JOB.*Job_time);
  PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
  PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
  PARAMETER(JOB.*Job_time);
  PARAMETER(3);
  PARAMETER(PAR.PT_Net_Weight);
  PARAMETER(*ZERO);
  PARAMETER(WRK.PT_Shift_Number);
  PARAMETER(LCL.Line_Code);
  PARAMETER(PAR.PT_Order_Number);
  PARAMETER(*BLANK);
  PARAMETER(PAR.PT_Product_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(WRK.PT_Fresh_Frozen_Code);
  PARAMETER('LOGO');
  PARAMETER(*ZERO);
  PARAMETER(WRK.PT_Source_Type);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(WRK.PT_Item_Type_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.PT_WIP_Dump_Production_Sh);
  PARAMETER(WRK.PT_WIP_Used_Not_Used_Sts);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(WRK.PT_Unused_Sts_4);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  //?USER: Process Data record

  //?If the Order Number is 9999999, then the boxes were taken
  //?off of the truck and placed back in Inventory.
  CASE;

  // IF PAR.PT Order Number is EQ 9999999
  IF PAR.PT_Order_Number = 9999999;

  EXECUTE FUNCTION(Chg Order Number      CH) TYPE(CHGOBJ) FILE(POB2CPP)           AC1682100;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.PT_Serial_Number);
  PARAMETER(DB1.PT_Prod_Date_YYYYMMDD);
  PARAMETER(DB1.PT_Production_Time);
  PARAMETER(1);
  PARAMETER(*ZERO);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Order Number      CH) TYPE(CHGOBJ) FILE(POB2CPP)           AC1682100;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.PT_Serial_Number);
  PARAMETER(DB1.PT_Prod_Date_YYYYMMDD);
  PARAMETER(DB1.PT_Production_Time);
  PARAMETER(3);
  PARAMETER(PAR.PT_Order_Number);
  ENDIF;

 }

 ENDIF;

 //?--------------- Case 2 -----------------
 //?* Serial Number *
 // WRK.Text USR 8 = SUBSTRING(DB1.Report Line,CON.34,CON.8)
 WRK.Text_USR_8 = SUBSTRING(DB1.Report_Line:34:8);

 // Execute function RPG TESTN for 8 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 8 pos.  US) TYPE(EXCUSRSRC) ('POPTUFR');
 PARAMETER(WRK.Text_USR_8);
 {
  C                     TESTN          WUYMTX  8  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 //?Create Case 2 Record
 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 //?Create Case 2 Record
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?* Case Net Weight *
 // LCL.Text USR 4 = SUBSTRING(DB1.Report Line,CON.27,CON.4)
 LCL.Text_USR_4 = SUBSTRING(DB1.Report_Line:27:4);

 // LCL.Calc 4 = CVTVAR(LCL.Text USR 4)
 LCL.Calc_4 = CVTVAR(LCL.Text_USR_4);

 // LCL.Text 1 Length USR = SUBSTRING(DB1.Report Line,CON.32,CON.1)
 LCL.Text_1_Length_USR = SUBSTRING(DB1.Report_Line:32:1);

 // LCL.Numeral 1             USR = CVTVAR(LCL.Text 1 Length USR)
 LCL.Numeral_1_USR = CVTVAR(LCL.Text_1_Length_USR);

 // LCL.Case Net Weight = LCL.Numeral 1             USR * CON..1 *Rounded
 LCL.Case_Net_Weight = LCL.Numeral_1_USR * .1 'H';

 // PAR.Case Net Weight = LCL.Case Net Weight + LCL.Calc 4
 PAR.Case_Net_Weight = LCL.Case_Net_Weight + LCL.Calc_4;

 //?* Case Serial Number *
 // PAR.Case Serial Number = CVTVAR(WRK.Text USR 8)
 PAR.Case_Serial_Number = CVTVAR(WRK.Text_USR_8);

 //?* Case Label Date *
 // LCL.Month USR = SUBSTRING(DB1.Report Line,CON.43,CON.2)
 LCL.Month_USR = SUBSTRING(DB1.Report_Line:43:2);

 // LCL.Day USR = SUBSTRING(DB1.Report Line,CON.46,CON.2)
 LCL.Day_USR = SUBSTRING(DB1.Report_Line:46:2);

 // LCL.Year 2A USR = SUBSTRING(DB1.Report Line,CON.49,CON.2)
 LCL.Year_2A_USR = SUBSTRING(DB1.Report_Line:49:2);

 // LCL.PT Prod Date ALPHA = CONCAT(CON.20,LCL.Year 2A USR,CND.*None)
 LCL.PT_Prod_Date_ALPHA = '20' + LCL.Year_2A_USR (*ZERO);

 // LCL.PT Prod Date ALPHA = CONCAT(LCL.PT Prod Date ALPHA,LCL.Month USR,CND.*None)
 LCL.PT_Prod_Date_ALPHA = LCL.PT_Prod_Date_ALPHA + LCL.Month_USR (*ZERO);

 // LCL.PT Prod Date ALPHA = CONCAT(LCL.PT Prod Date ALPHA,LCL.Day USR,CND.*None)
 LCL.PT_Prod_Date_ALPHA = LCL.PT_Prod_Date_ALPHA + LCL.Day_USR (*ZERO);

 // LCL.Date 8.0 USR = CVTVAR(LCL.PT Prod Date ALPHA)
 LCL.Date_8_0_USR = CVTVAR(LCL.PT_Prod_Date_ALPHA);

 // PAR.Case Label date = LCL.Date 8.0 USR
 PAR.Case_Label_date = LCL.Date_8_0_USR;

 //?* Create Order Manifest Record *
 EXECUTE FUNCTION(Crt Order Manifest    IF) TYPE(EXCINTFUN)                      AC1682726;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Case_Serial_Number);
 PARAMETER(PAR.Case_Label_date);
 PARAMETER(PAR.Case_Net_Weight);
 PARAMETER(*BLANK);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Sequence     RT) TYPE(RTVOBJ) FILE(PPADCPP)           AC1682728;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Case_Serial_Number);
  PARAMETER(PAR.Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.Sequence Number = CON.1
   PAR.Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.Sequence Number = DB1.Sequence Number + CON.1
   PAR.Sequence_Number = DB1.Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Order Manifest    CR) TYPE(CRTOBJ) FILE(PPADCPP)           AC1681752;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Case_Serial_Number);
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(PAR.Case_Label_date);
  PARAMETER(PAR.Case_Net_Weight);
  PARAMETER(PAR.Process_Status);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

 }

 EXECUTE FUNCTION(Upd Order Number      RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1682097;
 PARAMETER(*MISSING);
 PARAMETER(PAR.Case_Serial_Number);
 PARAMETER(PAR.Case_Label_date);
 PARAMETER(PAR.Case_Net_Weight);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Item_Code);
 {
  //?USER: Processing if Data record not found

  //?When Co-Packer Products are shipped, the cases will be listed
  //?in the Manifest report, but we will not have a Product Trace
  //?record for it.  So, we need to create one.
  // LCL.AS Serial Number = CVTVAR(PAR.PT Serial Number)
  LCL.AS_Serial_Number = CVTVAR(PAR.PT_Serial_Number);

  // LCL.Scale ID = SUBSTRING(LCL.AS Serial Number,CON.1,CON.2)
  LCL.Scale_ID = SUBSTRING(LCL.AS_Serial_Number:1:2);

  // LCL.Date From Convert USR = CVTVAR(PAR.PT Label Date YYYYMMDD)
  LCL.Date_From_Convert_USR = CVTVAR(PAR.PT_Label_Date_YYYYMMDD);

  // Call program Cvt Date              UP.
  CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
  PARAMETER(LCL.Date_From_Convert_USR);
  PARAMETER(LCL.Date_To_Convert_USR);
  PARAMETER(*YYMD);
  PARAMETER(*CYMD);
  PARAMETER(*NONE);

  // LCL.Effective Label Date = CVTVAR(LCL.Date To Convert USR)
  LCL.Effective_Label_Date = CVTVAR(LCL.Date_To_Convert_USR);

  EXECUTE FUNCTION(Rtv Manifest Upl Info RT) TYPE(RTVOBJ) FILE(PPAAREP)           AC1682621;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Scale_ID);
  PARAMETER(LCL.Effective_Label_Date);
  PARAMETER(LCL.Line_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  CASE;

  // IF LCL.Scale ID is GE 20
  IF LCL.Scale_ID >= '20';

  EXECUTE FUNCTION(Crt Product Trace     CR) TYPE(CRTOBJ) FILE(POB2CPP)           AC1646314;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.PT_Serial_Number);
  PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
  PARAMETER(JOB.*Job_time);
  PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
  PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
  PARAMETER(JOB.*Job_time);
  PARAMETER(3);
  PARAMETER(PAR.PT_Net_Weight);
  PARAMETER(*ZERO);
  PARAMETER(WRK.PT_Shift_Number);
  PARAMETER(LCL.Line_Code);
  PARAMETER(PAR.PT_Order_Number);
  PARAMETER(*BLANK);
  PARAMETER(PAR.PT_Product_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(WRK.PT_Fresh_Frozen_Code);
  PARAMETER('LOGO');
  PARAMETER(*ZERO);
  PARAMETER(WRK.PT_Source_Type);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(WRK.PT_Item_Type_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.PT_WIP_Dump_Production_Sh);
  PARAMETER(WRK.PT_WIP_Used_Not_Used_Sts);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(WRK.PT_Unused_Sts_4);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  //?USER: Process Data record

  //?If the Order Number is 9999999, then the boxes were taken
  //?off of the truck and placed back in Inventory.
  CASE;

  // IF PAR.PT Order Number is EQ 9999999
  IF PAR.PT_Order_Number = 9999999;

  EXECUTE FUNCTION(Chg Order Number      CH) TYPE(CHGOBJ) FILE(POB2CPP)           AC1682100;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.PT_Serial_Number);
  PARAMETER(DB1.PT_Prod_Date_YYYYMMDD);
  PARAMETER(DB1.PT_Production_Time);
  PARAMETER(1);
  PARAMETER(*ZERO);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Order Number      CH) TYPE(CHGOBJ) FILE(POB2CPP)           AC1682100;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.PT_Serial_Number);
  PARAMETER(DB1.PT_Prod_Date_YYYYMMDD);
  PARAMETER(DB1.PT_Production_Time);
  PARAMETER(3);
  PARAMETER(PAR.PT_Order_Number);
  ENDIF;

 }

 ENDIF;

 //?--------------- Case 3 -----------------
 //?* Serial Number *
 // WRK.Text USR 8 = SUBSTRING(DB1.Report Line,CON.60,CON.8)
 WRK.Text_USR_8 = SUBSTRING(DB1.Report_Line:60:8);

 // Execute function RPG TESTN for 8 pos.  US.
 EXECUTE FUNCTION(RPG TESTN for 8 pos.  US) TYPE(EXCUSRSRC) ('POPTUFR');
 PARAMETER(WRK.Text_USR_8);
 {
  C                     TESTN          WUYMTX  8  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'DECERR ' WUH3TX
  C                     ELSE
  C                     MOVE '       ' WUH3TX
  C                     END
 }

 //?Create Case 3 Record
 CASE;

 // IF WRK.Return Code Usr is DECERR
 IF WRK.Return_Code_Usr = 'DECERR';

 //?Create Case 3 Record
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?* Case Net Weight *
 // LCL.Text USR 4 = SUBSTRING(DB1.Report Line,CON.53,CON.4)
 LCL.Text_USR_4 = SUBSTRING(DB1.Report_Line:53:4);

 // LCL.Calc 4 = CVTVAR(LCL.Text USR 4)
 LCL.Calc_4 = CVTVAR(LCL.Text_USR_4);

 // LCL.Text 1 Length USR = SUBSTRING(DB1.Report Line,CON.58,CON.1)
 LCL.Text_1_Length_USR = SUBSTRING(DB1.Report_Line:58:1);

 // LCL.Numeral 1             USR = CVTVAR(LCL.Text 1 Length USR)
 LCL.Numeral_1_USR = CVTVAR(LCL.Text_1_Length_USR);

 // LCL.Case Net Weight = LCL.Numeral 1             USR * CON..1 *Rounded
 LCL.Case_Net_Weight = LCL.Numeral_1_USR * .1 'H';

 // PAR.Case Net Weight = LCL.Case Net Weight + LCL.Calc 4
 PAR.Case_Net_Weight = LCL.Case_Net_Weight + LCL.Calc_4;

 //?* Case Serial Number *
 // PAR.Case Serial Number = CVTVAR(WRK.Text USR 8)
 PAR.Case_Serial_Number = CVTVAR(WRK.Text_USR_8);

 //?* Case Label Date *
 // LCL.Month USR = SUBSTRING(DB1.Report Line,CON.69,CON.2)
 LCL.Month_USR = SUBSTRING(DB1.Report_Line:69:2);

 // LCL.Day USR = SUBSTRING(DB1.Report Line,CON.72,CON.2)
 LCL.Day_USR = SUBSTRING(DB1.Report_Line:72:2);

 // LCL.Year 2A USR = SUBSTRING(DB1.Report Line,CON.75,CON.2)
 LCL.Year_2A_USR = SUBSTRING(DB1.Report_Line:75:2);

 // LCL.PT Prod Date ALPHA = CONCAT(CON.20,LCL.Year 2A USR,CND.*None)
 LCL.PT_Prod_Date_ALPHA = '20' + LCL.Year_2A_USR (*ZERO);

 // LCL.PT Prod Date ALPHA = CONCAT(LCL.PT Prod Date ALPHA,LCL.Month USR,CND.*None)
 LCL.PT_Prod_Date_ALPHA = LCL.PT_Prod_Date_ALPHA + LCL.Month_USR (*ZERO);

 // LCL.PT Prod Date ALPHA = CONCAT(LCL.PT Prod Date ALPHA,LCL.Day USR,CND.*None)
 LCL.PT_Prod_Date_ALPHA = LCL.PT_Prod_Date_ALPHA + LCL.Day_USR (*ZERO);

 // LCL.Date 8.0 USR = CVTVAR(LCL.PT Prod Date ALPHA)
 LCL.Date_8_0_USR = CVTVAR(LCL.PT_Prod_Date_ALPHA);

 // PAR.Case Label date = LCL.Date 8.0 USR
 PAR.Case_Label_date = LCL.Date_8_0_USR;

 //?* Create Order Manifest Record *
 EXECUTE FUNCTION(Crt Order Manifest    IF) TYPE(EXCINTFUN)                      AC1682726;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Case_Serial_Number);
 PARAMETER(PAR.Case_Label_date);
 PARAMETER(PAR.Case_Net_Weight);
 PARAMETER(*BLANK);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Sequence     RT) TYPE(RTVOBJ) FILE(PPADCPP)           AC1682728;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Case_Serial_Number);
  PARAMETER(PAR.Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.Sequence Number = CON.1
   PAR.Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.Sequence Number = DB1.Sequence Number + CON.1
   PAR.Sequence_Number = DB1.Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Order Manifest    CR) TYPE(CRTOBJ) FILE(PPADCPP)           AC1681752;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Case_Serial_Number);
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(PAR.Case_Label_date);
  PARAMETER(PAR.Case_Net_Weight);
  PARAMETER(PAR.Process_Status);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(UPS CRTOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359517;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

 }

 EXECUTE FUNCTION(Upd Order Number      RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1682097;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Case_Serial_Number);
 PARAMETER(PAR.Case_Label_date);
 PARAMETER(PAR.Case_Net_Weight);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Item_Code);
 {
  //?USER: Processing if Data record not found

  //?When Co-Packer Products are shipped, the cases will be listed
  //?in the Manifest report, but we will not have a Product Trace
  //?record for it.  So, we need to create one.
  // LCL.AS Serial Number = CVTVAR(PAR.PT Serial Number)
  LCL.AS_Serial_Number = CVTVAR(PAR.PT_Serial_Number);

  // LCL.Scale ID = SUBSTRING(LCL.AS Serial Number,CON.1,CON.2)
  LCL.Scale_ID = SUBSTRING(LCL.AS_Serial_Number:1:2);

  // LCL.Date From Convert USR = CVTVAR(PAR.PT Label Date YYYYMMDD)
  LCL.Date_From_Convert_USR = CVTVAR(PAR.PT_Label_Date_YYYYMMDD);

  // Call program Cvt Date              UP.
  CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
  PARAMETER(LCL.Date_From_Convert_USR);
  PARAMETER(LCL.Date_To_Convert_USR);
  PARAMETER(*YYMD);
  PARAMETER(*CYMD);
  PARAMETER(*NONE);

  // LCL.Effective Label Date = CVTVAR(LCL.Date To Convert USR)
  LCL.Effective_Label_Date = CVTVAR(LCL.Date_To_Convert_USR);

  EXECUTE FUNCTION(Rtv Manifest Upl Info RT) TYPE(RTVOBJ) FILE(PPAAREP)           AC1682621;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Scale_ID);
  PARAMETER(LCL.Effective_Label_Date);
  PARAMETER(LCL.Line_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  CASE;

  // IF LCL.Scale ID is GE 20
  IF LCL.Scale_ID >= '20';

  EXECUTE FUNCTION(Crt Product Trace     CR) TYPE(CRTOBJ) FILE(POB2CPP)           AC1646314;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.PT_Serial_Number);
  PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
  PARAMETER(JOB.*Job_time);
  PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
  PARAMETER(PAR.PT_Label_Date_YYYYMMDD);
  PARAMETER(JOB.*Job_time);
  PARAMETER(3);
  PARAMETER(PAR.PT_Net_Weight);
  PARAMETER(*ZERO);
  PARAMETER(WRK.PT_Shift_Number);
  PARAMETER(LCL.Line_Code);
  PARAMETER(PAR.PT_Order_Number);
  PARAMETER(*BLANK);
  PARAMETER(PAR.PT_Product_Code);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(WRK.PT_Fresh_Frozen_Code);
  PARAMETER('LOGO');
  PARAMETER(*ZERO);
  PARAMETER(WRK.PT_Source_Type);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(WRK.PT_Item_Type_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.PT_WIP_Dump_Production_Sh);
  PARAMETER(WRK.PT_WIP_Used_Not_Used_Sts);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(WRK.PT_Unused_Sts_4);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  //?USER: Process Data record

  //?If the Order Number is 9999999, then the boxes were taken
  //?off of the truck and placed back in Inventory.
  CASE;

  // IF PAR.PT Order Number is EQ 9999999
  IF PAR.PT_Order_Number = 9999999;

  EXECUTE FUNCTION(Chg Order Number      CH) TYPE(CHGOBJ) FILE(POB2CPP)           AC1682100;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.PT_Serial_Number);
  PARAMETER(DB1.PT_Prod_Date_YYYYMMDD);
  PARAMETER(DB1.PT_Production_Time);
  PARAMETER(1);
  PARAMETER(*ZERO);
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Order Number      CH) TYPE(CHGOBJ) FILE(POB2CPP)           AC1682100;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.PT_Serial_Number);
  PARAMETER(DB1.PT_Prod_Date_YYYYMMDD);
  PARAMETER(DB1.PT_Production_Time);
  PARAMETER(3);
  PARAMETER(PAR.PT_Order_Number);
  ENDIF;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(PAR.Company_Number);
 PARAMETER('FRZMANPTR');
 PARAMETER(LCL.System_Value_Alpha);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.PRT Printer Device = LCL.System Value Alpha
 LCL.PRT_Printer_Device = LCL.System_Value_Alpha;

 // LCL.Order Alpha = CVTVAR(PAR.Order Number)
 LCL.Order_Alpha = CVTVAR(PAR.Order_Number);

 // Call program EXC Command SBDOVR     UP.
 CALL PROGRAM(EXC Command SBDOVR     UP) ('PDPOUPR');
 PARAMETER('PPCIPFR$');
 PARAMETER(LCL.PRT_Printer_Device);
 PARAMETER(*YES);
 PARAMETER(*YES);
 PARAMETER(1);

 // Call program Zzz Manifest          PF.
 CALL PROGRAM(Zzz Manifest          PF) ('PPCIPFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);

 // Execute command - 'Chg User Data'
 EXECUTE COMMAND(USR3343);
 PARAMETER('PPCIPFR$');
 PARAMETER(LCL.Order_Alpha);

}


