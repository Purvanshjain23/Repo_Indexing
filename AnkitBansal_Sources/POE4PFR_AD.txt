// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POE4PFR
// ?Date: 14.08.2025 Time: 12:06:09
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log and Comments
//?E5262 JJH 09/09/16 - Chargebacks and Rebills
//?- RSQ Cust,PIF Date/IN,DM,CB,RB ARBDCPQO access path modified to
//?  now include RB.
//?- Report will now print RB
//?***** 05/19/2006 LJB T00009
//?** Size of the Days to Pay User fields was changed from
//?** 3.0 to 5.0 to prevent truncating when accumulating
//?** for large volume customers.
//?*****
//?** 09/12/2006 LJB L60906C
//?** Change the retrieve average days to pay to accumulate the
//?** file Days to Pay and divide by the accum'd total invoices if
//?** the report is for all companies.
//?*****
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?RMC 3/7/06 Heading Print Control
// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

//?USER: Record selection processing

//?Comp nbr selection          RMC 3/7/6
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

// AND PAR.Company Number NE DB1.Company Number
AND PAR.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Cust nbr selection
CASE;

// IF PAR.A/R Customer Number is not equal to zero
IF PAR.AR_Customer_Number <> *ZERO;

// AND PAR.A/R Customer Number NE DB1.A/R Customer Number
AND PAR.AR_Customer_Number <> DB1.AR_Customer_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Parent Cust selection
CASE;

// IF PAR.Parent Customer is not equal to zero
IF PAR.Parent_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Parent Customer    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1225254;
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(LCL.Parent_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Parent Customer NE LCL.Parent Customer
IF PAR.Parent_Customer <> LCL.Parent_Customer;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(TOP_Company_Name_DRV);
PARAMETER(TOP_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Name DRV = CON.All
TOP_Company_Name_DRV = 'All';

ENDIF;

CASE;

// IF TOP.A/R Customer Number is not equal to zero
IF TOP_AR_Customer_Number <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(TOP_AR_Customer_Number);
PARAMETER(TOP_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Customer Name = CON.All
TOP_Customer_Name = 'All';

ENDIF;

CASE;

// IF TOP.Parent Customer is not equal to zero
IF TOP_Parent_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(TOP_Parent_Customer);
PARAMETER(TOP_Parent_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Parent Customer Name = CON.All
TOP_Parent_Customer_Name = 'All';

ENDIF;

// TOP.Month 1 USR = PAR.To Date               USR *MONTH
TOP_Month_1_USR = DATEDTLS(PAR.To_Date_USR 'MO' 1111111 'NONE' 'N' 1);

// LCL.Year Code = JOB.*Job date *YEAR
LCL.Year_Code = DATEDTLS(JOB.*Job_date 'YR' 1111111 'NONE' 'N' 1);

// LCL.A/R Balance Year = PAR.To Date               USR *YEAR
LCL.A_R_Balance_Year = DATEDTLS(PAR.To_Date_USR 'YR' 1111111 'NONE' 'N' 1);

// TOP.Month 1 USR = TOP.Month 1 USR - CON.1
TOP_Month_1_USR = TOP_Month_1_USR - 1;

// LCL.YEAR 1 USR = LCL.A/R Balance Year
LCL.YEAR_1_USR = LCL.A_R_Balance_Year;

CASE;

// IF TOP.Month 1 USR is Zero
IF TOP_Month_1_USR = *ZERO;

// TOP.Month 1 USR = CON.12
TOP_Month_1_USR = 12;

// LCL.YEAR 1 USR = LCL.A/R Balance Year - CON.1
LCL.YEAR_1_USR = LCL.A_R_Balance_Year - 1;

ENDIF;

// TOP.Month 2 USR = TOP.Month 1 USR - CON.1
TOP_Month_2_USR = TOP_Month_1_USR - 1;

// LCL.YEAR 2 USR = LCL.YEAR 1 USR
LCL.YEAR_2_USR = LCL.YEAR_1_USR;

CASE;

// IF TOP.Month 2 USR is Zero
IF TOP_Month_2_USR = *ZERO;

// TOP.Month 2 USR = CON.12
TOP_Month_2_USR = 12;

// LCL.YEAR 2 USR = LCL.YEAR 2 USR - CON.1
LCL.YEAR_2_USR = LCL.YEAR_2_USR - 1;

ENDIF;

// TOP.Month 3 USR = TOP.Month 2 USR - CON.1
TOP_Month_3_USR = TOP_Month_2_USR - 1;

// LCL.YEAR 3 USR = LCL.YEAR 2 USR
LCL.YEAR_3_USR = LCL.YEAR_2_USR;

CASE;

// IF TOP.Month 3 USR is Zero
IF TOP_Month_3_USR = *ZERO;

// TOP.Month 3 USR = CON.12
TOP_Month_3_USR = 12;

// LCL.YEAR 3 USR = LCL.YEAR 3 USR - CON.1
LCL.YEAR_3_USR = LCL.YEAR_3_USR - 1;

ENDIF;

// TOP.Month 4 USR = TOP.Month 3 USR - CON.1
TOP_Month_4_USR = TOP_Month_3_USR - 1;

// LCL.YEAR 4 USR = LCL.YEAR 3 USR
LCL.YEAR_4_USR = LCL.YEAR_3_USR;

CASE;

// IF TOP.Month 4 USR is Zero
IF TOP_Month_4_USR = *ZERO;

// TOP.Month 4 USR = CON.12
TOP_Month_4_USR = 12;

// LCL.YEAR 4 USR = LCL.YEAR 4 USR - CON.1
LCL.YEAR_4_USR = LCL.YEAR_4_USR - 1;

ENDIF;

// TOP.Month 5 USR = TOP.Month 4 USR - CON.1
TOP_Month_5_USR = TOP_Month_4_USR - 1;

// LCL.YEAR 5 USR = LCL.YEAR 4 USR
LCL.YEAR_5_USR = LCL.YEAR_4_USR;

CASE;

// IF TOP.Month 5 USR is Zero
IF TOP_Month_5_USR = *ZERO;

// TOP.Month 5 USR = CON.12
TOP_Month_5_USR = 12;

// LCL.YEAR 5 USR = LCL.YEAR 5 USR - CON.1
LCL.YEAR_5_USR = LCL.YEAR_5_USR - 1;

ENDIF;

// TOP.Month 6 USR = TOP.Month 5 USR - CON.1
TOP_Month_6_USR = TOP_Month_5_USR - 1;

// LCL.YEAR 6 USR = LCL.YEAR 5 USR
LCL.YEAR_6_USR = LCL.YEAR_5_USR;

CASE;

// IF TOP.Month 6 USR is Zero
IF TOP_Month_6_USR = *ZERO;

// TOP.Month 6 USR = CON.12
TOP_Month_6_USR = 12;

// LCL.YEAR 6 USR = LCL.YEAR 6 USR - CON.1
LCL.YEAR_6_USR = LCL.YEAR_6_USR - 1;

ENDIF;

// TOP.Month 7 USR = TOP.Month 6 USR - CON.1
TOP_Month_7_USR = TOP_Month_6_USR - 1;

// LCL.YEAR 7 USR = LCL.YEAR 6 USR
LCL.YEAR_7_USR = LCL.YEAR_6_USR;

CASE;

// IF TOP.Month 7 USR is Zero
IF TOP_Month_7_USR = *ZERO;

// TOP.Month 7 USR = CON.12
TOP_Month_7_USR = 12;

// LCL.YEAR 7 USR = LCL.YEAR 7 USR - CON.1
LCL.YEAR_7_USR = LCL.YEAR_7_USR - 1;

ENDIF;

// TOP.Month 8 USR = TOP.Month 7 USR - CON.1
TOP_Month_8_USR = TOP_Month_7_USR - 1;

// LCL.YEAR 8 USR = LCL.YEAR 7 USR
LCL.YEAR_8_USR = LCL.YEAR_7_USR;

CASE;

// IF TOP.Month 8 USR is Zero
IF TOP_Month_8_USR = *ZERO;

// TOP.Month 8 USR = CON.12
TOP_Month_8_USR = 12;

// LCL.YEAR 8 USR = LCL.YEAR 8 USR - CON.1
LCL.YEAR_8_USR = LCL.YEAR_8_USR - 1;

ENDIF;

// TOP.Month 9 USR = TOP.Month 8 USR - CON.1
TOP_Month_9_USR = TOP_Month_8_USR - 1;

// LCL.YEAR 9 USR = LCL.YEAR 8 USR
LCL.YEAR_9_USR = LCL.YEAR_8_USR;

CASE;

// IF TOP.Month 9 USR is Zero
IF TOP_Month_9_USR = *ZERO;

// TOP.Month 9 USR = CON.12
TOP_Month_9_USR = 12;

// LCL.YEAR 9 USR = LCL.YEAR 9 USR - CON.1
LCL.YEAR_9_USR = LCL.YEAR_9_USR - 1;

ENDIF;

// TOP.Month 10 USR = TOP.Month 9 USR - CON.1
TOP_Month_10_USR = TOP_Month_9_USR - 1;

// LCL.YEAR 10 USR = LCL.YEAR 9 USR
LCL.YEAR_10_USR = LCL.YEAR_9_USR;

CASE;

// IF TOP.Month 10 USR is Zero
IF TOP_Month_10_USR = *ZERO;

// TOP.Month 10 USR = CON.12
TOP_Month_10_USR = 12;

// LCL.YEAR 10 USR = LCL.YEAR 10 USR - CON.1
LCL.YEAR_10_USR = LCL.YEAR_10_USR - 1;

ENDIF;

// TOP.Month 11 USR = TOP.Month 10 USR - CON.1
TOP_Month_11_USR = TOP_Month_10_USR - 1;

// LCL.YEAR 11 USR = LCL.YEAR 10 USR
LCL.YEAR_11_USR = LCL.YEAR_10_USR;

CASE;

// IF TOP.Month 11 USR is Zero
IF TOP_Month_11_USR = *ZERO;

// TOP.Month 11 USR = CON.12
TOP_Month_11_USR = 12;

// LCL.YEAR 11 USR = LCL.YEAR 11 USR - CON.1
LCL.YEAR_11_USR = LCL.YEAR_11_USR - 1;

ENDIF;

// TOP.Month 12 USR = TOP.Month 11 USR - CON.1
TOP_Month_12_USR = TOP_Month_11_USR - 1;

// LCL.YEAR 12 USR = LCL.YEAR 11 USR
LCL.YEAR_12_USR = LCL.YEAR_11_USR;

CASE;

// IF TOP.Month 12 USR is Zero
IF TOP_Month_12_USR = *ZERO;

// TOP.Month 12 USR = CON.12
TOP_Month_12_USR = 12;

// LCL.YEAR 12 USR = LCL.YEAR 12 USR - CON.1
LCL.YEAR_12_USR = LCL.YEAR_12_USR - 1;

ENDIF;

// LCL.Month 1 USR = TOP.Month 1 USR
LCL.Month_1_USR = TOP_Month_1_USR;

// LCL.Month 2 USR = TOP.Month 2 USR
LCL.Month_2_USR = TOP_Month_2_USR;

// LCL.Month 3 USR = TOP.Month 3 USR
LCL.Month_3_USR = TOP_Month_3_USR;

// LCL.Month 4 USR = TOP.Month 4 USR
LCL.Month_4_USR = TOP_Month_4_USR;

// LCL.Month 5 USR = TOP.Month 5 USR
LCL.Month_5_USR = TOP_Month_5_USR;

// LCL.Month 6 USR = TOP.Month 6 USR
LCL.Month_6_USR = TOP_Month_6_USR;

// LCL.Month 7 USR = TOP.Month 7 USR
LCL.Month_7_USR = TOP_Month_7_USR;

// LCL.Month 8 USR = TOP.Month 8 USR
LCL.Month_8_USR = TOP_Month_8_USR;

// LCL.Month 9 USR = TOP.Month 9 USR
LCL.Month_9_USR = TOP_Month_9_USR;

// LCL.Month 10 USR = TOP.Month 10 USR
LCL.Month_10_USR = TOP_Month_10_USR;

// LCL.Month 11 USR = TOP.Month 11 USR
LCL.Month_11_USR = TOP_Month_11_USR;

// LCL.Month 12 USR = TOP.Month 12 USR
LCL.Month_12_USR = TOP_Month_12_USR;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW AR_Customer_Number;
// SUPPRESSED PRINT A/R Customer Number header format

ENDIF;

// SUPPRESSED PRINT Company Number header format

//?USER: Print required level totals

// SUPPRESSED PRINT Company Number totals format

CASE;

IF NEW AR_Customer_Number;
// WRK.Print (Yes/No) USR = CND.No
WRK.Print_Yes_No_USR = 'N';

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(CUR.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Get average days to pay from date range.
// LCL.Days to Pay = CON.*ZERO
LCL.Days_to_Pay = *ZERO;

// LCL.MTD Invoices Paid = CON.*ZERO
LCL.MTD_Invoices_Paid = *ZERO;

EXECUTE FUNCTION(RTV Days Paid Date Rng RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1599647;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.From_Date_USR);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(LCL.Days_to_Pay);
PARAMETER(LCL.MTD_Invoices_Paid);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.To_Date_USR);
{
 //?USER: Initialize routine

 // PAR.Days to Pay = CND.equal to zero
 PAR.Days_to_Pay = *ZERO;

 // PAR.MTD Invoices Paid = CND.Equal zero
 PAR.MTD_Invoices_Paid = *ZERO;

 //?USER: Process Data record

 //?RMC 3/7/06 Sel Company or All
 CASE;

 // IF PAR.Company Number is Equal to zero
 IF PAR.Company_Number = *ZERO;

 // OR PAR.Company Number EQ DB1.Company Number
 OR PAR.Company_Number = DB1.Company_Number;

 CASE;

 // IF DB1.Remaining Balance Due is equal to zero
 IF DB1.Remaining_Balance_Due = *ZERO;

 // AND DB1.Invoice Suffix is Invoice or Debit Memo
 AND DB1.Invoice_Suffix = 'DM'/'IN';

 CASE;

 // IF DB1.Paid in Full Date GE PAR.From Date             USR
 IF DB1.Paid_in_Full_Date >= PAR.From_Date_USR;

 // AND DB1.Paid in Full Date LE PAR.To Date               USR
 AND DB1.Paid_in_Full_Date <= PAR.To_Date_USR;

 // PAR.Days to Pay = DB1.Days to Pay + PAR.Days to Pay
 PAR.Days_to_Pay = DB1.Days_to_Pay + PAR.Days_to_Pay;

 // PAR.MTD Invoices Paid = PAR.MTD Invoices Paid + CON.1
 PAR.MTD_Invoices_Paid = PAR.MTD_Invoices_Paid + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.MTD Invoices Paid is Not zero
IF LCL.MTD_Invoices_Paid <> *ZERO;

// CUR.DSO Avg Days to Pay = LCL.Days to Pay / LCL.MTD Invoices Paid *Rounded
CUR.DSO_Avg_Days_to_Pay = LCL.Days_to_Pay / LCL.MTD_Invoices_Paid 'H';

ENDIF;

//?Get Past Monthly Trend   11/22/02   PK0477
// Call program Rtv Past 12 AvgDys Pay XF.
CALL PROGRAM(Rtv Past 12 AvgDys Pay XF) ('POTFXFR');
PARAMETER(LCL.Month_1_USR);
PARAMETER(CUR.Days_to_Pay_1_USR);
PARAMETER(LCL.Month_2_USR);
PARAMETER(CUR.Days_to_Pay_2_USR);
PARAMETER(LCL.Month_3_USR);
PARAMETER(CUR.Days_to_Pay_3_USR);
PARAMETER(LCL.Month_4_USR);
PARAMETER(CUR.Days_to_Pay_4_USR);
PARAMETER(LCL.Month_5_USR);
PARAMETER(CUR.Days_to_Pay_5_USR);
PARAMETER(LCL.Month_6_USR);
PARAMETER(CUR.Days_to_Pay_6_USR);
PARAMETER(LCL.Month_7_USR);
PARAMETER(CUR.Days_to_Pay_7_USR);
PARAMETER(LCL.Month_8_USR);
PARAMETER(CUR.Days_to_Pay_8_USR);
PARAMETER(LCL.Month_9_USR);
PARAMETER(CUR.Days_to_Pay_9_USR);
PARAMETER(LCL.Month_10_USR);
PARAMETER(CUR.Days_to_Pay_10_USR);
PARAMETER(LCL.YEAR_1_USR);
PARAMETER(LCL.YEAR_2_USR);
PARAMETER(LCL.YEAR_3_USR);
PARAMETER(LCL.YEAR_4_USR);
PARAMETER(LCL.YEAR_5_USR);
PARAMETER(LCL.YEAR_6_USR);
PARAMETER(LCL.YEAR_7_USR);
PARAMETER(LCL.YEAR_8_USR);
PARAMETER(LCL.YEAR_9_USR);
PARAMETER(LCL.YEAR_10_USR);
PARAMETER(LCL.YEAR_11_USR);
PARAMETER(LCL.YEAR_12_USR);
PARAMETER(LCL.Month_11_USR);
PARAMETER(CUR.Days_to_Pay_11_USR);
PARAMETER(LCL.Month_12_USR);
PARAMETER(CUR.Days_to_Pay_12_USR);
PARAMETER(PAR.Company_Number);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(LCL.A_R_Balance_Year);

CASE;

// IF CUR.DSO Avg Days to Pay NE WRK.ZERO
IF CUR.DSO_Avg_Days_to_Pay <> WRK.ZERO;

// OR CUR.Days to Pay 1 USR NE WRK.ZERO
OR CUR.Days_to_Pay_1_USR <> WRK.ZERO;

// OR CUR.Days to Pay 2 USR NE WRK.ZERO
OR CUR.Days_to_Pay_2_USR <> WRK.ZERO;

// OR CUR.Days to Pay 3 USR NE WRK.ZERO
OR CUR.Days_to_Pay_3_USR <> WRK.ZERO;

// OR CUR.Days to Pay 4 USR NE WRK.ZERO
OR CUR.Days_to_Pay_4_USR <> WRK.ZERO;

// OR CUR.Days to Pay 5 USR NE WRK.ZERO
OR CUR.Days_to_Pay_5_USR <> WRK.ZERO;

// OR CUR.Days to Pay 6 USR NE WRK.ZERO
OR CUR.Days_to_Pay_6_USR <> WRK.ZERO;

// OR CUR.Days to Pay 7 USR NE WRK.ZERO
OR CUR.Days_to_Pay_7_USR <> WRK.ZERO;

// OR CUR.Days to Pay 8 USR NE WRK.ZERO
OR CUR.Days_to_Pay_8_USR <> WRK.ZERO;

// OR CUR.Days to Pay 9 USR NE WRK.ZERO
OR CUR.Days_to_Pay_9_USR <> WRK.ZERO;

// OR CUR.Days to Pay 10 USR NE WRK.ZERO
OR CUR.Days_to_Pay_10_USR <> WRK.ZERO;

// OR CUR.Days to Pay 11 USR NE WRK.ZERO
OR CUR.Days_to_Pay_11_USR <> WRK.ZERO;

// OR CUR.Days to Pay 12 USR NE WRK.ZERO
OR CUR.Days_to_Pay_12_USR <> WRK.ZERO;

EXECUTE FUNCTION(Crt A/R Summary DSO Wk CR) TYPE(CRTOBJ) FILE(POANCPP)          AC1599831;
PARAMETER(PAR.Company_Number);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(1);
PARAMETER(CUR.Customer_Name);
PARAMETER(PAR.Parent_Customer);
PARAMETER(*ZERO);
PARAMETER(CUR.DSO_Avg_Days_to_Pay);
PARAMETER(LCL.Month_1_USR);
PARAMETER(CUR.Days_to_Pay_1_USR);
PARAMETER(LCL.Month_2_USR);
PARAMETER(CUR.Days_to_Pay_2_USR);
PARAMETER(LCL.Month_3_USR);
PARAMETER(CUR.Days_to_Pay_3_USR);
PARAMETER(LCL.Month_4_USR);
PARAMETER(CUR.Days_to_Pay_4_USR);
PARAMETER(LCL.Month_5_USR);
PARAMETER(CUR.Days_to_Pay_5_USR);
PARAMETER(LCL.Month_6_USR);
PARAMETER(CUR.Days_to_Pay_6_USR);
PARAMETER(LCL.Month_7_USR);
PARAMETER(CUR.Days_to_Pay_7_USR);
PARAMETER(LCL.Month_8_USR);
PARAMETER(CUR.Days_to_Pay_8_USR);
PARAMETER(LCL.Month_9_USR);
PARAMETER(CUR.Days_to_Pay_9_USR);
PARAMETER(LCL.Month_10_USR);
PARAMETER(CUR.Days_to_Pay_10_USR);
PARAMETER(LCL.Month_11_USR);
PARAMETER(CUR.Days_to_Pay_11_USR);
PARAMETER(LCL.Month_12_USR);
PARAMETER(CUR.Days_to_Pay_12_USR);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print A/R Customer Number totals format
PRINT A/R Customer Number totals format;

ENDIF;

