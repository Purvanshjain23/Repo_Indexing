      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF411
      * TITLE:       Specify Options for Weekly Product Report
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     09/28/04
      *
      *
      * FUNCTION: This Specify uses an edit record format to allow the user
      *           to specify options for generating the report.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 03/13/06  LeAnne Fedor
      *           Added a "report selection" to this function. You can now generate:
      *           either:
      *           1) Weekly Product Revenue Report (existing report)
      *           2) Weekly Product Floor Production Report  (new report)
      *
      * 04/11/06  LeAnne Fedor
      *           Added a new report:
      *              Weekly Product Sales Production Report
      *
      * 04/18/06  LeAnne Fedor
      *           Added a download/email option.
      *
      * 09/19/06  LeAnne Ramsey
      *           Recompile only. Synon file PPAMREP was changed.
      *
      * 05/02/07  LeAnne Ramsey
      *           Recompile only. Synon file PPAMREP was changed.
      *
      * 05/11/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd411    cf   e             workstn infds(iofeed)
      *
      *
     Ftfp095    if   e           k disk
      *    Include/exclude options
      *
      *
     Fome8rel0  if   e           k disk
      *    Product type
      *
      *
     Fome9rel0  if   e           k disk
      *    Product group
      *
      *
     Fomfarel1  if   e           k disk
      *    Product class
      *
      *
     Fombyrel0  if   e           k disk
      *    Item default
      *
      *
     Fppamrel1  if   e           k disk
      *    TF Classification
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Parm fields
      *
     D xxedfl          s                   like(d1edfl)
     D xxedds          s                   like(d1edds)
      *
     D xxcofl          s                   like(d1cofl)
     D xxcods          s                   like(d1cods)
      *
     D xxdsfl          s                   like(d1dsfl)
     D xxdsds          s                   like(d1dsds)
      *
     D xxrpfl          s                   like(d1rpfl)
     D xxrpds          s                   like(d1rpds)
      *
     D xxiecd          s                   like(d1iecd)
     D xxieds          s                   like(d1ieds)
      *
     D xxver           s                   like(d1ver)
     D xxverds         s                   like(d1verds)
      *
     D xxprcd          s                   like(d1prcd)
     D xxprds          s                   like(d1prds)
     D xxalphprcd      s              7
      *
     D xxisclcd        s                   like(d1isclcd)
     D xxisclds        s                   like(d1isclds)
     D xxalphclcd      s              3
      *
     D xxisgrcd        s                   like(d1isgrcd)
     D xxisgrds        s                   like(d1isgrds)
     D xxalphgrcd      s              3
      *
     D xxistycd        s                   like(d1istycd)
     D xxistyds        s                   like(d1istyds)
     D xxalphtycd      s              3
      *
     D xxtfclcd        s                   like(d1tfclcd)
     D xxtfclds        s                   like(d1tfclds)
      *
     D xxtfcgcd        s                   like(d1tfcgcd)
     D xxtfcgds        s                   like(d1tfcgds)
      *
     D xxsatdt         s              8  0
     D xxdt            s              8  0
     D xxyr            s              4  0
     D xxpe            s              2  0
     D xxwk            s              2  0
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Workfields for date manipulation
      *
     D wkcymdiso       s               d   datfmt(*iso)
     D wkmdydt         s               d   datfmt(*mdy)
     D wkdt            s              8  0
     D wkmdy           s              6  0
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
      *
      * Do not use the first 38 LDA positions. We have to generate this from the Revenue
      * Close function as well as on-demand from this program. So, the LDAs have to
      * match up (The Revenue Close function is already using the first 38 positions.)
      * EXCEPT, put blanks in position 37 (prelimary/final code) to match TF410.
      *
     D  ldpfcd                37     37
      *
     D  ldfmdy                39     44  0
     D  ldtmdy                45     50  0
     D  ldfcymd               52     59  0
     D  ldtcymd               60     67  0
      *
     D  lddsfl                71     71
     D  lddsds                73     82
      *
     D  ldistycd              83     85  0
     D  ldistyds              86    115
     D  ldisgrcd             116    118  0
     D  ldisgrds             119    148
     D  ldisclcd             149    151  0
     D  ldisclds             152    181
     D  ldprcd               182    188  0
     D  ldprds               189    218
      *
     D  ldtfcgcd             219    220
     D  ldtfcgds             221    235
     D  ldtfclcd             236    238
     D  ldtfclds             239    268
      *
     D  ldver                269    269
     D  ldverds              270    299
      *
     D  lddemand             300    300
      *
     D  ldiecd               301    301
     D  ldieds               302    327
     D  ldrpfl               328    328
     D  ldcofl               329    329
      *
     D  ldedfl               349    349
      *
     D  ldemail              350    399
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf411k1
     C                   write     tf411ec
     C                   exfmt     tf411r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in08 = *on                                  F8-submit
     C                   exsr      $edit1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate required fields:
      *   1) from date
      *   2) to date
      *   3) report
      *   4) detail/summary flag
      *   5) sort/print sequence (aka: version)
      *   6) exempt records options
      *   7) co-owned options
      *   8) export/domestic flag
      *   9) email address
      *
     C                   exsr      $fmdy
     C                   exsr      $tmdy
     C                   exsr      $rpfl
     C                   exsr      $dsfl
     C                   exsr      $ver
     C                   exsr      $iecd
     C                   exsr      $cofl
     C                   exsr      $edfl
     C                   exsr      $email
      *
      * Validate optional fields:
      *   1) item structure type
      *   2) item structure group
      *   3) item structure class
      *   4) TF class group
      *   5) TF classification
      *   6) product
      *
     C                   exsr      $istycd
     C                   exsr      $isgrcd
     C                   exsr      $isclcd
     C                   exsr      $tfcgcd
     C                   exsr      $tfclcd
     C                   exsr      $prcd
      *
      * If there are no errors, execute the subroutine to submit the report.
      *
     C                   if        error = 0 and *in08 = *on                    If no error
     C                   exsr      $proc1
     C                   endif                                                  If no error
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate From Date
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) cannot be negative
      *  3) must be a valid date
      *
      *
     C     $fmdy         begsr
      *
     C                   z-add     0             ldfcymd
     C                   z-add     0             d1fwemdy
      *
     C                   select
     C                   when      d1fmdy = 0
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1fmdy < 0
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1fmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and go find the 'week-ending date'
      * assocated with this date.
      *
     C     *mdy          move      d1fmdy        wkcymdiso
     C                   move      wkcymdiso     wkdt
     C                   exsr      $wedt
      *
     C                   if        wkmdy = 0
     C                   seton                                        37
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09229'
     C                   endif
     C                   else
     C                   z-add     wkmdy         d1fwemdy
     C                   z-add     xxsatdt       ldfcymd
     C                   endif
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Validate to date
      *----------------------------------------------------------------
      *
      *  1) required
      *  2) cannot be negative
      *  3) must be a valid date
      *  4) must be on/after From Date
      *
      *
     C     $tmdy         begsr
      *
     C                   z-add     0             ldtcymd
     C                   z-add     0             d1twemdy
      *
     C                   select
     C                   when      d1tmdy = 0
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1tmdy < 0
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1tmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and go find the 'week-ending date'
      * assocated with this date.
      *
     C     *mdy          move      d1tmdy        wkcymdiso
     C                   move      wkcymdiso     wkdt
     C                   exsr      $wedt
      *
     C                   if        wkmdy = 0
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09229'
     C                   endif
     C                   else
     C                   z-add     wkmdy         d1twemdy
     C                   z-add     xxsatdt       ldtcymd
     C                   endif
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
      * To date cannot be earlier than from date.
      *
     C                   if        *in37 = *off and
     C                             *in36 = *off and
     C                             ldtcymd < ldfcymd
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09009'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Report Flag
      *---------------------------------------------------------------
      *
     C     $rpfl         begsr
      *
     C                   move      *blank        d1rpds
      *
     C                   select
     C                   when      d1rpfl = 'R'
     C                   eval      d1rpds = 'Weekly Product Revenue Report'
      *
     C                   when      d1rpfl = 'F'
     C                   eval      d1rpds = 'Weekly Product Floor Production +
     C                                       Report'
      *
     C                   when      d1rpfl = 'S'
     C                   eval      d1rpds = 'Weekly Product Sales Production +
     C                                       Report'
      *
     C                   when      d1rpfl = 'D'
     C                   eval      d1rpds = 'Weekly Product Download'
     C                   other
      *
     C                   seton                                        46
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00451'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate detail/summary flag
      *---------------------------------------------------------------
      *
     C     $dsfl         begsr
      *
      * If the From/To Week-Ending dates are the same, Alice wants us to
      * run the Summary version--regardless of what the user entered on the screen.
      * So, check/override the user's entry--and tell him that you did so.
      *
     C                   if        d1fwemdy = d1twemdy and
     C                             *in36 = *off and
     C                             *in37 = *off and
     C                             d1dsfl <> 'S'
     C                   move      'S'           d1dsfl
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00452'
     C                   endif
     C                   endif
      *
      * Now, perform regular editing.
      *
     C                   move      *blank        d1dsds
      *
     C                   select
     C                   when      d1dsfl = 'S'
     C                   movel(p)  'Summary'     d1dsds
      *
     C                   when      d1dsfl = 'D'
     C                   movel(p)  'Detail'      d1dsds
     C                   other
      *
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00454'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Version
      *---------------------------------------------------------------
      *
     C     $ver          begsr
      *
     C                   move      *blank        d1verds
      *
     C                   select
     C                   when      d1ver = '1'
     C                   eval      d1verds = 'Sort/Print by Item Structure'
      *
     C                   when      d1ver = '2'
     C                   eval      d1verds = 'Sort/Print by TF Structure'
     C                   other
      *
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00453'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Exempt Records Option
      *----------------------------------------------------------------
      *
     C     $iecd         begsr
      *
     C                   move      *blank        d1ieds
      *
     C                   select
     C                   when      d1iecd = *blank
     C                   seton                                        47
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1iecd        chain     tfp095                             92
     C                   if        *in92 = *off                                 If ok
     C                   move      ieieds        d1ieds
     C                   else
      *
     C                   seton                                        47
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08045'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1iecd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Co-owned/Not Co-Owned/Both Flag
      *---------------------------------------------------------------
      *
     C     $cofl         begsr
      *
     C                   move      *blank        d1cods
      *
     C                   select
     C                   when      d1cofl = 'B'
     C                   eval      d1cods = 'Both CoOwned and Not CoOwned'
      *
     C                   when      d1cofl = 'C'
     C                   eval      d1cods = 'CoOwned Only'
      *
     C                   when      d1cofl = 'N'
     C                   eval      d1cods = 'Not CoOwned Only'
     C                   other
      *
     C                   seton                                        29
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00448'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Export/Domestic Flag
      *----------------------------------------------------------------
      *
     C     $edfl         begsr
      *
     C                   move      *blank        d1edds
      *
     C                   select
     C                   when      d1edfl = 'B'
     C                   eval      d1edds = 'Both Export and Domestic'
      *
     C                   when      d1edfl = 'E'
     C                   eval      d1edds = 'Export Only'
      *
     C                   when      d1edfl = 'D'
     C                   eval      d1edds = 'Domestic Only'
     C                   other
      *
     C                   seton                                        45
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08153'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Email address
      *----------------------------------------------------------------
      *
     C     $email        begsr
      *
     C                   if        d1rpfl = 'D' and d1email = *blank
     C                   seton                                        40
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Item Structure Type Code
      *----------------------------------------------------------------
      *
     C     $istycd       begsr
      *
     C                   move      *blank        d1istyds
      *
     C                   select
     C                   when      d1istycd = 0
      *
     C                   when      d1istycd < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1istycd      chain     ome8rel0                           92
     C                   if        *in92 = *off                                 If ok
     C                   move(p)   e8dctx        d1istyds
     C                   else
      *
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08003'     mgid(e)
     C                   clear                   mgw
     C                   move      d1istycd      xxalphtycd
     C                   movea     xxalphtycd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Item Structure Group Code
      *----------------------------------------------------------------
      *
     C     $isgrcd       begsr
      *
     C                   move      *blank        d1isgrds
      *
     C                   select
     C                   when      d1isgrcd = 0
      *
     C                   when      d1isgrcd < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1isgrcd      chain     ome9rel0                           92
     C                   if        *in92 = *off                                 If ok
     C                   move(p)   e9ddtx        d1isgrds
     C                   else
      *
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08005'     mgid(e)
     C                   clear                   mgw
     C                   move      d1isgrcd      xxalphgrcd
     C                   movea     xxalphgrcd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Item Structure Class
      *----------------------------------------------------------------
      *
     C     $isclcd       begsr
      *
     C                   move      *blank        d1isclds
      *
     C                   select
     C                   when      d1isclcd = 0
      *
     C                   when      d1isclcd < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1isclcd      chain     omfarel1                           92
     C                   if        *in92 = *off                                 If ok
     C                   move(p)   fadetx        d1isclds
     C                   else
      *
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08004'     mgid(e)
     C                   clear                   mgw
     C                   move      d1isclcd      xxalphclcd
     C                   movea     xxalphclcd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate TF Class Group
      *----------------------------------------------------------------
      *
     C     $tfcgcd       begsr
      *
     C                   move      *blank        d1tfcgds
      *
     C                   select
     C                   when      d1tfcgcd = *blank
     C                   other
      *
     C                   call      'TF804'
     C                   parm      d1tfcgcd      xxtfcgcd
     C                   parm      *blank        xxtfcgds
      *
     C                   if        xxtfcgds = *blank                            If bad
     C                   seton                                        38
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08013'     mgid(e)
     C                   endif
     C                   else
      *
     C                   eval      d1tfcgds = xxtfcgds
     C                   endif                                                  If bad
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate TF Classification
      *----------------------------------------------------------------
      *
     C     $tfclcd       begsr
      *
     C                   move      *blank        d1tfclds
      *
     C                   select
     C                   when      d1tfclcd = *blank
     C                   other
      *
     C     d1tfclcd      chain     ppamrel1                           92
     C                   if        *in92 = *off                                 If ok
     C                   eval      d1tfclds = amq0na
     C                   else
      *
     C                   seton                                        39
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08012'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1tfclcd      mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate Product
      *----------------------------------------------------------------
      *
     C     $prcd         begsr
      *
     C                   move      *blank        d1prds
      *
     C                   select
     C                   when      d1prcd = 0
      *
     C                   when      d1prcd < 0
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1prcd        chain     ombyrel0                           92
     C                   if        *in92 = *off                                 If ok
     C                   move(p)   byavna        d1prds
     C                   else
      *
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08006'     mgid(e)
     C                   clear                   mgw
     C                   move      d1prcd        xxalphprcd
     C                   movea     xxalphprcd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Retrieve Week-ending date
      *----------------------------------------------------------------
      *
     C     $wedt         begsr
      *
     C                   call      'TF811'
     C                   parm      wkdt          xxdt
     C                   parm      0             xxsatdt
     C                   parm      0             xxyr
     C                   parm      0             xxpe
     C                   parm      0             xxwk
      *
      * Get returned 'week-ending date' into MMDDYY format.
      *
     C     *iso          test(d)                 xxsatdt                92
     C                   if        *in92 = *off                                 If good
     C     *iso          move      xxsatdt       wkmdydt
     C                   move      wkmdydt       wkmdy
     C                   else
     C                   z-add     0             wkmdy
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * F4 prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Detail/summary
     C                   select
     C                   when      fld = 'D1DSFL'
     C                   call      'HP565'
     C                   parm      *blank        xxdsfl
     C                   parm      *blank        xxdsds
     C                   seton                                        55
     C                   if        xxdsfl <> *blank
     C                   move      xxdsfl        d1dsfl
     C                   move      xxdsds        d1dsds
     C                   endif
      *
      * Report
     C                   when      fld = 'D1RPFL'
     C                   call      'TF521'
     C                   parm      *blank        xxrpfl
     C                   parm      *blank        xxrpds
     C                   seton                                        56
     C                   if        xxrpfl <> *blank
     C                   move      xxrpfl        d1rpfl
     C                   move      xxrpds        d1rpds
     C                   endif
      *
      * Version
     C                   when      fld = 'D1VER'
     C                   call      'TF507'
     C                   parm      *blank        xxver
     C                   parm      *blank        xxverds
     C                   seton                                        50
     C                   if        xxver <> *blank
     C                   move      xxver         d1ver
     C                   move      xxverds       d1verds
     C                   endif
      *
      * Include/Exclude
     C                   when      fld = 'D1IECD'
     C                   call      'TF518'
     C                   parm      *blank        xxiecd
     C                   parm      *blank        xxieds
     C                   seton                                        57
     C                   if        xxiecd <> *blank
     C                   move      xxiecd        d1iecd
     C                   move      xxieds        d1ieds
     C                   endif
      *
      * Co-Owned/Not Co-Owned/Both
      *
     C                   when      fld = 'D1COFL'
     C                   call      'TF527'
     C                   parm      *blank        xxcofl
     C                   parm      *blank        xxcods
     C                   seton                                        49
     C                   if        xxcofl <> *blank
     C                   move      xxcofl        d1cofl
     C                   move      xxcods        d1cods
     C                   endif
      *
      * Export/Domestic/Both
      *
     C                   when      fld = 'D1EDFL'
     C                   call      'TF531'
     C                   parm      *blank        xxedfl
     C                   parm      *blank        xxedds
     C                   seton                                        75
     C                   if        xxedfl <> *blank
     C                   move      xxedfl        d1edfl
     C                   move      xxedds        d1edds
     C                   endif
      *
      * Item Structure Type
      *
     C                   when      fld = 'D1ISTYCD'
     C                   call      'TF501'
     C                   parm      0             xxistycd
     C                   parm      *blank        xxistyds
     C                   seton                                        51
     C                   if        xxistycd <> 0
     C                   z-add     xxistycd      d1istycd
     C                   movel(p)  xxistyds      d1istyds
     C                   endif
      *
      * Item Structure Group
      *
     C                   when      fld = 'D1ISGRCD'
     C                   call      'TF502'
     C                   parm      0             xxisgrcd
     C                   parm      *blank        xxisgrds
     C                   seton                                        52
     C                   if        xxisgrcd <> 0
     C                   z-add     xxisgrcd      d1isgrcd
     C                   movel(p)  xxisgrds      d1isgrds
     C                   endif
      *
      * Item Structure Class
      *
     C                   when      fld = 'D1ISCLCD'
     C                   call      'TF503'
     C                   parm      0             xxisclcd
     C                   parm      *blank        xxisclds
     C                   seton                                        53
     C                   if        xxisclcd <> 0
     C                   z-add     xxisclcd      d1isclcd
     C                   movel(p)  xxisclds      d1isclds
     C                   endif
      *
      * TF Class Group
      *
     C                   when      fld = 'D1TFCGCD'
     C                   call      'TF506'
     C                   parm      *blank        xxtfcgcd
     C                   parm      *blank        xxtfcgds
     C                   seton                                        58
     C                   if        xxtfcgcd <> *blank
     C                   move      xxtfcgcd      d1tfcgcd
     C                   move      xxtfcgds      d1tfcgds
     C                   endif
      *
      * TF Classification
      *
     C                   when      fld = 'D1TFCLCD'
     C                   call      'TF505'
     C                   parm      *blank        xxtfclcd
     C                   parm      *blank        xxtfclds
     C                   seton                                        59
     C                   if        xxtfclcd <> *blank
     C                   move      xxtfclcd      d1tfclcd
     C                   move      xxtfclds      d1tfclds
     C                   endif
      *
      * Product
     C                   when      fld = 'D1PRCD'
     C                   call      'TF504'
     C                   parm      0             xxprcd
     C                   parm      *blank        xxprds
     C                   seton                                        54
     C                   if        xxprcd <> 0
     C                   z-add     xxprcd        d1prcd
     C                   movel(p)  xxprds        d1prds
     C                   endif
     C                   other
      *
      * F4 not valid for this field, so issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09011'
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits the listing
      *
     C     $proc1        begsr
      *
      *
      * Move submission values into LDA
      *
     C                   move      d1ver         ldver
     C                   move      d1verds       ldverds
      *
     C                   move      d1iecd        ldiecd
     C                   move      d1ieds        ldieds
      *
     C                   move      d1cofl        ldcofl
     C                   move      d1edfl        ldedfl
     C                   move      d1rpfl        ldrpfl
      *
     C                   move      yes           lddemand
     C                   move      *blank        ldpfcd
      *
     C                   move      d1email       ldemail
      *
     C                   z-add     d1fwemdy      ldfmdy
     C                   z-add     d1twemdy      ldtmdy
      *
      * If the From/To Week-Ending dates are the same, Alice wants us to
      * set for Summary--regardless of what the user entered on the screen.
      *
     C                   if        ldfmdy = ldtmdy
     C                   move      'S'           lddsfl
     C                   movel(p)  'Summary'     lddsds
     C                   else
     C                   move      d1dsfl        lddsfl
     C                   move      d1dsds        lddsds
     C                   endif
      *
     C                   z-add     d1istycd      ldistycd
     C                   move      d1istyds      ldistyds
      *
     C                   z-add     d1isgrcd      ldisgrcd
     C                   move      d1isgrds      ldisgrds
      *
     C                   z-add     d1isclcd      ldisclcd
     C                   move      d1isclds      ldisclds
      *
     C                   move      d1tfclcd      ldtfclcd
     C                   move      d1tfclds      ldtfclds
      *
     C                   move      d1tfcgcd      ldtfcgcd
     C                   move      d1tfcgds      ldtfcgds
      *
     C                   z-add     d1prcd        ldprcd
     C                   move      d1prds        ldprds
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *    None
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldfmdy
     C                   z-add     0             ldfcymd
     C                   z-add     0             ldistycd
     C                   z-add     0             ldisgrcd
     C                   z-add     0             ldisclcd
     C                   z-add     0             ldprcd
      *
     C                   z-add     0             ldtmdy
     C                   z-add     0             ldtcymd
     C                   out       lda
      *
      * Set some screen defaults.
      *
     C                   move      'R'           d1rpfl
     C                   move      'D'           d1dsfl
     C                   move      '1'           d1ver
     C                   move      'B'           d1iecd
     C                   move      'B'           d1cofl
     C                   move      'B'           d1edfl
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(TF411CL))  JOB(WEEKLYRV) JOBQ(*JOBD)
