// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POF1XFR
// ?Date: 14.08.2025 Time: 03:37:03
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?*****************
CASE;

// IF PAR.Report Type is Detail
IF PAR.Report_Type = 'D';

EXECUTE FUNCTION(Bld Sales Hst Dwn-Dtl RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1602684;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.Report_Type);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.To_Date_USR);
PARAMETER(PAR.USR_Sales_Realiz_Flag);
PARAMETER(PAR.USR_Active_Flag);
PARAMETER(PAR.Change_Flag_USR);
{
 //?USER: Initialize routine

 //?** 06/01/2009 LJB E00423 Add: Include/Exclude/Only Sample items
 //?pk0224 -- Create Sales History download Detail by order number
 //?USER: Process Data record

 CASE;

 // IF DB1.Actual Shipped Date GE PAR.From Date             USR
 IF DB1.Actual_Shipped_Date >= PAR.From_Date_USR;

 // AND DB1.Actual Shipped Date LE PAR.To Date               USR
 AND DB1.Actual_Shipped_Date <= PAR.To_Date_USR;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(RTV Print Realization  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1387825;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Shipped_Item_Code);
 PARAMETER(WRK.Default_Commod_Mark_basis);
 PARAMETER(PAR.Print_on_Realization_Rpt);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(PAR.Billing_Activity_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Exclude CM/DM
 CASE;

 // IF PAR.Billing Activity Type is Credit or Debit Memo
 IF PAR.Billing_Activity_Type = '2'/'3';

 // AND PAR.USR Sales Realiz. Flag is None
 AND PAR.USR_Sales_Realiz_Flag = 'N';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?CM/DM Only
 CASE;

 // IF PAR.USR Sales Realiz. Flag is CM/DM Only
 IF PAR.USR_Sales_Realiz_Flag = 'O';

 // AND PAR.Billing Activity Type is Invoice or Transfer
 AND PAR.Billing_Activity_Type = '1'/'4';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Include All Products?
 CASE;

 // IF PAR.USR Active Flag is Record Not Found
 IF PAR.USR_Active_Flag = 'N';

 // AND PAR.Print on Realization Rpt is No
 AND PAR.Print_on_Realization_Rpt = 'N';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Include Samples? (Unit Price <= .01 are samples)     E00423
 CASE;

 // IF PAR.Change Flag USR is Only
 IF PAR.Change_Flag_USR = 'O';

 // AND DB1.Unit Price is GT .01
 AND DB1.Unit_Price > .01;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?Include Samples? (Unit Price <= .01 are samples)     E00423
 // IF PAR.Change Flag USR is No
 IF PAR.Change_Flag_USR = 'N';

 // AND DB1.Unit Price is LE .0100
 AND DB1.Unit_Price <= .0100;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Record Selected
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?FOB amount and weight
 CASE;

 // IF PAR.Billing Activity Type is Invoice
 IF PAR.Billing_Activity_Type = '1';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // LCL.FOB Gross Amount = CON.*ZERO
 LCL.FOB_Gross_Amount = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.FOB Gross Amount = DB1.FOB Gross Amount
 LCL.FOB_Gross_Amount = DB1.FOB_Gross_Amount;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // LCL.Weight Billed = CON.*ZERO
 LCL.Weight_Billed = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Weight Billed = DB1.Weight Billed
 LCL.Weight_Billed = DB1.Weight_Billed;

 ENDIF;

 //?FOB amount and weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Credit or Debit Memo
 CASE;

 // IF PAR.USR Sales Realiz. Flag is Process by Flags
 IF PAR.USR_Sales_Realiz_Flag = 'P';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // LCL.FOB Gross Amount = CON.*ZERO
 LCL.FOB_Gross_Amount = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.FOB Gross Amount = DB1.FOB Gross Amount
 LCL.FOB_Gross_Amount = DB1.FOB_Gross_Amount;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // LCL.Weight Billed = CON.*ZERO
 LCL.Weight_Billed = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Weight Billed = DB1.Weight Billed
 LCL.Weight_Billed = DB1.Weight_Billed;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.USR Sales Realiz. Flag is All
 IF PAR.USR_Sales_Realiz_Flag = 'A';

 // OR PAR.USR Sales Realiz. Flag is CM/DM Only
 OR PAR.USR_Sales_Realiz_Flag = 'O';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // AND DB1.Affect Sales Pnds Status is yes
 AND DB1.Affect_Sales_Pnds_Status = 'Y';

 // LCL.FOB Gross Amount = CON.*ZERO
 LCL.FOB_Gross_Amount = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.FOB Gross Amount = DB1.FOB Gross Amount
 LCL.FOB_Gross_Amount = DB1.FOB_Gross_Amount;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // AND DB1.Affect Sales Doll Status is yes
 AND DB1.Affect_Sales_Doll_Status = 'Y';

 // LCL.Weight Billed = CON.*ZERO
 LCL.Weight_Billed = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Weight Billed = DB1.Weight Billed
 LCL.Weight_Billed = DB1.Weight_Billed;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?reverse sign if credit memo and positive
 CASE;

 // IF PAR.Billing Activity Type is Credit Memo
 IF PAR.Billing_Activity_Type = '2';

 // AND LCL.Weight Billed is Greater than zero
 AND LCL.Weight_Billed > *ZERO;

 // LCL.Weight Billed = CON.*ZERO - LCL.Weight Billed
 LCL.Weight_Billed = *ZERO - LCL.Weight_Billed;

 ENDIF;

 //?Calc fob gross
 CASE;

 // IF LCL.Weight Billed is Not equal zero
 IF LCL.Weight_Billed <> *ZERO;

 // Compute: FOB price/cwt
 LCL.FOB_Price_CWT = ( LCL.FOB_Gross_Amount / LCL.Weight_Billed ) / 100;

 ENDIF;

 EXECUTE FUNCTION(Crt W010 Sales Hist   CR) TYPE(CRTOBJ) FILE(POAUCPP)           AC1602652;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Report_Type);
 PARAMETER(DB1.Shipped_Item_Code);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Commodity_Market_Price);
 PARAMETER(DB1.Quantity_Billed);
 PARAMETER(LCL.Weight_Billed);
 PARAMETER(LCL.FOB_Gross_Amount);
 PARAMETER(LCL.FOB_Price_CWT);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Order_TF_Exempt_Code);
 ENDIF;

 ENDIF;

}


// IF PAR.Report Type is Summary
IF PAR.Report_Type = 'S';

EXECUTE FUNCTION(Bld Sales Hst Dwn-Smm RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1602685;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.Report_Type);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.To_Date_USR);
PARAMETER(PAR.USR_Sales_Realiz_Flag);
PARAMETER(PAR.USR_Active_Flag);
PARAMETER(PAR.Change_Flag_USR);
{
 //?USER: Initialize routine

 //?** 06/01/2009 LJB E00423 Add: Include/Exclude/Only Sample items
 //?pk0224 - Create Sales History Download Summary by Shipped item code
 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // WRK.Record Found USR = CND.Record Not Found
 WRK.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Actual Shipped Date GE PAR.From Date             USR
 IF DB1.Actual_Shipped_Date >= PAR.From_Date_USR;

 // AND DB1.Actual Shipped Date LE PAR.To Date               USR
 AND DB1.Actual_Shipped_Date <= PAR.To_Date_USR;

 //?Item code or Whse break --  Calc FOB and write record
 CASE;

 // IF DB1.Shipped Item Code NE LCL.USR Item Code
 IF DB1.Shipped_Item_Code <> LCL.USR_Item_Code;

 // OR DB1.Warehouse Code NE LCL.Warehouse Code
 OR DB1.Warehouse_Code <> LCL.Warehouse_Code;

 CASE;

 // IF LCL.First Time Flag is NO
 IF LCL.First_Time_Flag = 'N';

 CASE;

 // IF LCL.Weight Billed is Not equal zero
 IF LCL.Weight_Billed <> *ZERO;

 // Compute: FOB price/cwt
 LCL.FOB_Price_CWT = ( LCL.FOB_Gross_Amount / LCL.Weight_Billed ) / 100;

 ENDIF;

 EXECUTE FUNCTION(Rtv Last Seq Nbr      RT) TYPE(RTVOBJ) FILE(POAUCPP)           AC1628054;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.USR_Item_Code);
 PARAMETER(LCL.Order_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // LCL.Order Sequence Number = LCL.Order Sequence Number + CON.1
 LCL.Order_Sequence_Number = LCL.Order_Sequence_Number + 1;

 EXECUTE FUNCTION(Crt W010 Sales Hist   CR) TYPE(CRTOBJ) FILE(POAUCPP)           AC1602652;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.USR_Item_Code);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Report_Type);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(LCL.Commodity_Market_Price);
 PARAMETER(LCL.Quantity_Billed);
 PARAMETER(LCL.Weight_Billed);
 PARAMETER(LCL.FOB_Gross_Amount);
 PARAMETER(LCL.FOB_Price_CWT);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(WRK.Blank_for_4_USR);
 ENDIF;

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // LCL.USR Item Code = DB1.Shipped Item Code
 LCL.USR_Item_Code = DB1.Shipped_Item_Code;

 // LCL.Warehouse Code = DB1.Warehouse Code
 LCL.Warehouse_Code = DB1.Warehouse_Code;

 // LCL.Actual Shipped Date = DB1.Actual Shipped Date
 LCL.Actual_Shipped_Date = DB1.Actual_Shipped_Date;

 // LCL.Commodity Market Price = DB1.Commodity Market Price
 LCL.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // LCL.FOB Gross Amount = CON.*ZERO
 LCL.FOB_Gross_Amount = *ZERO;

 // LCL.Weight Billed = CON.*ZERO
 LCL.Weight_Billed = *ZERO;

 // LCL.Quantity Billed = CON.*ZERO
 LCL.Quantity_Billed = *ZERO;

 // WRK.Record Found USR = CND.Record Not Found
 WRK.Record_Found_USR = 'N';

 ENDIF;

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(PAR.Billing_Activity_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Print Realization  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1387825;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Shipped_Item_Code);
 PARAMETER(WRK.Default_Commod_Mark_basis);
 PARAMETER(PAR.Print_on_Realization_Rpt);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Exclude CM/DM
 CASE;

 // IF PAR.Billing Activity Type is Credit or Debit Memo
 IF PAR.Billing_Activity_Type = '2'/'3';

 // AND PAR.USR Sales Realiz. Flag is None
 AND PAR.USR_Sales_Realiz_Flag = 'N';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?CM/DM Only
 CASE;

 // IF PAR.USR Sales Realiz. Flag is CM/DM Only
 IF PAR.USR_Sales_Realiz_Flag = 'O';

 // AND PAR.Billing Activity Type is Invoice or Transfer
 AND PAR.Billing_Activity_Type = '1'/'4';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Include All Products?
 CASE;

 // IF PAR.USR Active Flag is Record Not Found
 IF PAR.USR_Active_Flag = 'N';

 // AND PAR.Print on Realization Rpt is No
 AND PAR.Print_on_Realization_Rpt = 'N';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Include Samples? (Unit Price <= .01 are samples)     E00423
 CASE;

 // IF PAR.Change Flag USR is Only
 IF PAR.Change_Flag_USR = 'O';

 // AND DB1.Unit Price is GT .01
 AND DB1.Unit_Price > .01;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?Include Samples? (Unit Price <= .01 are samples)     E00423
 // IF PAR.Change Flag USR is No
 IF PAR.Change_Flag_USR = 'N';

 // AND DB1.Unit Price is LE .0100
 AND DB1.Unit_Price <= .0100;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Record Selected
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?FOB amount and weight
 CASE;

 // IF PAR.Billing Activity Type is Invoice
 IF PAR.Billing_Activity_Type = '1';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // LCL.FOB Gross Amount      USR = CON.*ZERO
 LCL.FOB_Gross_Amount_USR = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.FOB Gross Amount      USR = DB1.FOB Gross Amount
 LCL.FOB_Gross_Amount_USR = DB1.FOB_Gross_Amount;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // LCL.USR Weight Billed 11.2  7 = CON.*ZERO
 LCL.USR_Weight_Billed_11_2_7 = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.USR Weight Billed 11.2  7 = DB1.Weight Billed
 LCL.USR_Weight_Billed_11_2_7 = DB1.Weight_Billed;

 ENDIF;

 //?FOB amount and weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Credit or Debit Memo
 CASE;

 // IF PAR.USR Sales Realiz. Flag is Process by Flags
 IF PAR.USR_Sales_Realiz_Flag = 'P';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // LCL.FOB Gross Amount      USR = CON.*ZERO
 LCL.FOB_Gross_Amount_USR = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.FOB Gross Amount      USR = DB1.FOB Gross Amount
 LCL.FOB_Gross_Amount_USR = DB1.FOB_Gross_Amount;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // LCL.USR Weight Billed 11.2  7 = CON.*ZERO
 LCL.USR_Weight_Billed_11_2_7 = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.USR Weight Billed 11.2  7 = DB1.Weight Billed
 LCL.USR_Weight_Billed_11_2_7 = DB1.Weight_Billed;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.USR Sales Realiz. Flag is All
 IF PAR.USR_Sales_Realiz_Flag = 'A';

 // OR PAR.USR Sales Realiz. Flag is CM/DM Only
 OR PAR.USR_Sales_Realiz_Flag = 'O';

 CASE;

 // IF DB1.Affect Sales Doll Status is no
 IF DB1.Affect_Sales_Doll_Status = 'N';

 // AND DB1.Affect Sales Pnds Status is yes
 AND DB1.Affect_Sales_Pnds_Status = 'Y';

 // LCL.FOB Gross Amount      USR = CON.*ZERO
 LCL.FOB_Gross_Amount_USR = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.FOB Gross Amount      USR = DB1.FOB Gross Amount
 LCL.FOB_Gross_Amount_USR = DB1.FOB_Gross_Amount;

 ENDIF;

 CASE;

 // IF DB1.Affect Sales Pnds Status is no
 IF DB1.Affect_Sales_Pnds_Status = 'N';

 // AND DB1.Affect Sales Doll Status is yes
 AND DB1.Affect_Sales_Doll_Status = 'Y';

 // LCL.USR Weight Billed 11.2  7 = CON.*ZERO
 LCL.USR_Weight_Billed_11_2_7 = *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.USR Weight Billed 11.2  7 = DB1.Weight Billed
 LCL.USR_Weight_Billed_11_2_7 = DB1.Weight_Billed;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?reverse sign if credit memo and positive
 CASE;

 // IF PAR.Billing Activity Type is Credit Memo
 IF PAR.Billing_Activity_Type = '2';

 // AND LCL.USR Weight Billed 11.2  7 is GT Zero
 AND LCL.USR_Weight_Billed_11_2_7 > 0;

 // LCL.USR Weight Billed 11.2  7 = CON.*ZERO - LCL.USR Weight Billed 11.2  7
 LCL.USR_Weight_Billed_11_2_7 = *ZERO - LCL.USR_Weight_Billed_11_2_7;

 ENDIF;

 // LCL.FOB Gross Amount = LCL.FOB Gross Amount + LCL.FOB Gross Amount      USR
 LCL.FOB_Gross_Amount = LCL.FOB_Gross_Amount + LCL.FOB_Gross_Amount_USR;

 // LCL.Weight Billed = LCL.Weight Billed + LCL.USR Weight Billed 11.2  7
 LCL.Weight_Billed = LCL.Weight_Billed + LCL.USR_Weight_Billed_11_2_7;

 // LCL.Quantity Billed = LCL.Quantity Billed + DB1.Quantity Billed
 LCL.Quantity_Billed = LCL.Quantity_Billed + DB1.Quantity_Billed;

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?Last record
 CASE;

 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 CASE;

 // IF LCL.First Time Flag is NO
 IF LCL.First_Time_Flag = 'N';

 CASE;

 // IF LCL.Weight Billed is Not equal zero
 IF LCL.Weight_Billed <> *ZERO;

 // Compute: FOB price/cwt
 LCL.FOB_Price_CWT = ( LCL.FOB_Gross_Amount / LCL.Weight_Billed ) / 100;

 ENDIF;

 EXECUTE FUNCTION(Rtv Last Seq Nbr      RT) TYPE(RTVOBJ) FILE(POAUCPP)           AC1628054;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.USR_Item_Code);
 PARAMETER(LCL.Order_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // LCL.Order Sequence Number = LCL.Order Sequence Number + CON.1
 LCL.Order_Sequence_Number = LCL.Order_Sequence_Number + 1;

 EXECUTE FUNCTION(Crt W010 Sales Hist   CR) TYPE(CRTOBJ) FILE(POAUCPP)           AC1602652;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.USR_Item_Code);
 PARAMETER(LCL.Order_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Report_Type);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Actual_Shipped_Date);
 PARAMETER(LCL.Commodity_Market_Price);
 PARAMETER(LCL.Quantity_Billed);
 PARAMETER(LCL.Weight_Billed);
 PARAMETER(LCL.FOB_Gross_Amount);
 PARAMETER(LCL.FOB_Price_CWT);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(WRK.Blank_for_4_USR);
 ENDIF;

 ENDIF;

}


ENDIF;

//?***** Change log and comments
DO;

//?RMC 1/5/6 Add Sbd Marketing Accrual back into Fob Gross Amount
//?RMC 1/12/6 Dont add Sbd Marketing Accrual back into Fob Gross Amount,
//?  now it is in the calculation of the fob gross
//?RMC 1/20/6 For Dtl Dwnld - output Order TF Exempt code
//?6/01/2009 LJB E00423 Add: Include/Exclude/Only Sample Items
ENDDO;

