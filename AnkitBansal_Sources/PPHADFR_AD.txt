// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPHADFR
// ?Date: 14.08.2025 Time: 03:40:37
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.Company Number Pass   USR = LCL.Company Number
PAR.Company_Number_Pass_USR = LCL.Company_Number;

//?03/05/25 DN DO23471-Get 'Restrict to P2P' Flag for CST Module.
// Call program Rtv Restrict to P2P    XF.
CALL PROGRAM(Rtv Restrict to P2P    XF) ('PVKAXFR');
PARAMETER('CST');
PARAMETER(1);
PARAMETER(LCL.Restrict_to_P2P);

//?03/05/25 DN DO23471-Get 'Company Organization' Value.
EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile control

//?First time, through, load ctl. positioners
CASE;

// IF PAR.USR First New Subfile Rcd is blank
IF PAR.USR_First_New_Subfile_Rcd = *BLANK;

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// PAR.USR First New Subfile Rcd = CND.no
PAR.USR_First_New_Subfile_Rcd = 'N';

// CTL.Company Number = LCL.Company Number
CTL.Company_Number = LCL.Company_Number;

ENDIF;

// LCL.Customer Market Code = CTL.Customer Market Code
LCL.Customer_Market_Code = CTL.Customer_Market_Code;

//?USER: Initialize subfile record from DBF record

//?Display only if matches company selected
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

CASE;

// IF DB1.Company Number NE CTL.Company Number
IF DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?DLY029T - need to get Ship-to flag so replaced 3 separate RTV's
//?with 1 getting all the required info.
EXECUTE FUNCTION(RTV various for WW Sls RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1846478;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Customer_Name);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Ship_To_Customer_Flag);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Customer_Market_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(Rtv Customer Market   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1859495;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Customer_Market_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Customer Name
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Customer Name NE WRK.BLANK
IF CTL.Customer_Name <> WRK.BLANK;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.Customer_Name);
PARAMETER(WRK.Case_Upper_Field);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Customer_Name);
PARAMETER(30);
PARAMETER(1);
PARAMETER(WRK.Case_Upper_Field);
PARAMETER(30);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?A/R Customer Number
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.A/R Customer Number is not equal to zero
IF CTL.AR_Customer_Number <> *ZERO;

CASE;

// IF RCD.A/R Customer Number EQ CTL.A/R Customer Number
IF RCD.AR_Customer_Number = CTL.AR_Customer_Number;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?get rcd sts from customer file
//?Record Status
CASE;

// IF CTL.Record Status is Valid Entries
IF CTL.Record_Status = 'A'/'D'/'I';

CASE;

// IF RCD.Record Status NE CTL.Record Status
IF RCD.Record_Status <> CTL.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Chk Acrl Exists   RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1680272;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Status_Y_or_N);
{
 //?USER: Processing if Data record not found

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 //?USER: Process Data record

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 QUIT;

}


//?SEL: Customer Market Code
CASE;

// IF CTL.Customer Market Code is Entered
IF CTL.Customer_Market_Code <> *BLANK;

CASE;

// IF CTL.Customer Market Code NE RCD.Customer Market Code
IF CTL.Customer_Market_Code <> RCD.Customer_Market_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Customer Appt ExstRT) TYPE(RTVOBJ) FILE(PNGZREP)           AC2020832;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER('D');
PARAMETER(RCD.Status_Flag_1_Y_N);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?Sel if standing appts exist
CASE;

// IF CTL.Status Flag 1  Y/N is Not Blank
IF CTL.Status_Flag_1_Y_N = 'N'/'Y';

CASE;

// IF RCD.Status Flag 1  Y/N NE CTL.Status Flag 1  Y/N
IF RCD.Status_Flag_1_Y_N <> CTL.Status_Flag_1_Y_N;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// PGM.*Scan limit = CON.999999
PGM.*Scan_limit = 999999;

//?USER: Process subfile control (Pre-confirm)

//?CHG: Market Code
CASE;

// IF CTL.Customer Market Code NE LCL.Customer Market Code
IF CTL.Customer_Market_Code <> LCL.Customer_Market_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?Process company search request
CASE;

// IF WRK.USR Search Request is Search requested
IF WRK.USR_Search_Request = '?';

// CTL.Company Number = CON.*ZERO
CTL.Company_Number = *ZERO;

// Call program ZZZ Company by Alpha   SR.
CALL PROGRAM(ZZZ Company by Alpha   SR) ('CAAMSRR');
PARAMETER(CTL.Company_Number);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?F4=Sel Sales Route
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Sales Route Code
IF PGM.*Cursor_field = CTL.Sales_Route_Code;

// Call program SEL PD Sales Route Act SR.
CALL PROGRAM(SEL PD Sales Route Act SR) ('PDFWSRR');
PARAMETER(CTL.Sales_Route_Code);

ENDIF;

ENDIF;

//?F8=Phone lookup
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

// Call program PMT Phone Lookup      PV.
CALL PROGRAM(PMT Phone Lookup      PV) ('PNXZPVR');
PARAMETER(LCL.Telephone_Number_FF);

CASE;

// IF LCL.Telephone Number FF is Not equal to blanks
IF LCL.Telephone_Number_FF <> *BLANK;

// Call program Exc Phone Lookup      XF.
CALL PROGRAM(Exc Phone Lookup      XF) ('PNX0XFR');
PARAMETER(LCL.Telephone_Number_FF);
PARAMETER(CTL.Ship_To_Customer);

CASE;

// IF CTL.Ship To Customer is not equal to zero
IF CTL.Ship_To_Customer <> *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?F20=WW Buying Group.                          05/20/20 DN R16543
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

//?03/05/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// Call program Edt Buying Group      EF.
CALL PROGRAM(Edt Buying Group      EF) ('PUQ2EFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21 - Print customer sales information
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

//?01/27/05 slm
//?Allow the submit of report for a specific sales route or all
//?08/07/06 rmc pass record sts as selector
// PAR.Company Number Pass   USR = CTL.Company Number
PAR.Company_Number_Pass_USR = CTL.Company_Number;

// Call program PRT Prmt Sending Co,   UP.
CALL PROGRAM(PRT Prmt Sending Co,   UP) ('PDNRUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('A/R');
PARAMETER('PDGBPCLP');
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('Customer Sales Info');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(CTL.Sales_Route_Code);
PARAMETER(CTL.Record_Status);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company number must be entered.'
ERROR(USR2384);
MSGPARM(CTL.Company_Number);

ENDIF;

ENDIF;

//?F23=Print Collection Notes
CASE;

// IF CTL.*CMD key is CF23
IF CTL.*CMD_key = '23';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Collection Notes');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('CLCTNNOTES');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// LCL.Copies NBR USR = CVTVAR(PAR.PRT Number of Copies)
LCL.Copies_NBR_USR = CVTVAR(PAR.PRT_Number_of_Copies);

// Call program Prt Collection Notes  CL.
SBMJOB;
CALL PROGRAM(Prt Collection Notes  CL) ('PMYFUPC');
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.Sales_Route_Code);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
SBMJOBEND;

ENDIF;

ENDIF;

//?SEL: Market Code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Customer Market Code
IF PGM.*Cursor_field = CTL.Customer_Market_Code;

// Call program Sel Market            SR.
CALL PROGRAM(Sel Market            SR) ('PMQYSRR');
PARAMETER(CTL.Customer_Market_Code);

ENDIF;

ENDIF;

//?* Disable the following if live with TPM   E004019
//?F22 = Print Customer/Company Traffic Information
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

//?** Submit report for all companies - Company Number = Zeros **
// PAR.Company Number Pass   USR = CND.Equal to zero
PAR.Company_Number_Pass_USR = *ZERO;

//?** Put sales route into the salesperson parm   07/27/2006 LJB
// PAR.Salesperson Code = CTL.Sales Route Code
PAR.Salesperson_Code = CTL.Sales_Route_Code;

//?** Put record sts into parm   08/09/2006 RMC
// Call program PRT Pmt Cst/Cmp TrfInf UP.
CALL PROGRAM(PRT Pmt Cst/Cmp TrfInf UP) ('PPWZPCLP');
PARAMETER(PGM.*Return_code);
PARAMETER('PPU9UPC');
PARAMETER('PPU8PFR');
PARAMETER(PAR.Application_Code);
PARAMETER('Cust/Comp Traff Info');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(CTL.Record_Status);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

//?F24=Work With Follow Up Notes
CASE;

// IF CTL.*CMD key is CF24
IF CTL.*CMD_key = '24';

// Call program WW Follow Up Notes    DF.
CALL PROGRAM(WW Follow Up Notes    DF) ('PMYKDFR');

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Sales Route Desc      DRV) TYPE(DRVFLD)                        AC1575490;
PARAMETER(RCD.Sales_Route_Desc_DRV);
PARAMETER(RCD.Sales_Route_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
 PARAMETER(PAR.Sales_Route_Code);
 PARAMETER(PAR.Sales_Route_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile record (Pre-confirm)

//?Process 2=change request
CASE;

// IF RCD.*SFLSEL is *Change
IF RCD.*SFLSEL = '2';

//?03/05/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// Call program EDT Cust Sls Info      E1.
CALL PROGRAM(EDT Cust Sls Info      E1) ('PPG8E1R');
PARAMETER(LCL.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Sales_Route_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Process 5=Edt Pick Comments
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

//?03/05/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// Call program Edt Customer Comment  EF.
CALL PROGRAM(Edt Customer Comment  EF) ('POF9EFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER('PI');

ENDIF;

//?Process 6=Edit Item Reference
CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

// Call program Edt Cust Item Ref     EF.
CALL PROGRAM(Edt Cust Item Ref     EF) ('POMXEFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Customer_Name);

ENDIF;

//?Process 7=Display Pricing Details
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

//?DLY029T - 09/10/07 - Add option 7
//?Only allowed for Ship-to Customers.
CASE;

// IF RCD.Ship To Customer Flag is Allow Use as Ship To Cust
IF RCD.Ship_To_Customer_Flag = 'Y';

// Call program DSP Pricing Details    DF.
CALL PROGRAM(DSP Pricing Details    DF) ('PMMXDFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(*ZERO);
PARAMETER(*ZERO);

//?Only allowed for Ship-to Customers.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'This option is only available for Ship-to Customers.'
ERROR(USR3797);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?Process 8=WW Company Customer
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

//?03/05/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// LCL.Company Number CDE = CON.*ZERO
LCL.Company_Number_CDE = *ZERO;

// Call program WW Customer/Company    EF.
CALL PROGRAM(WW Customer/Company    EF) ('PPIQEFR');
PARAMETER(LCL.Company_Number_CDE);
PARAMETER(RCD.Ship_To_Customer);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Process 9=Dsp Cust Accruals
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program WW Cust Accruals-Dsp  DF.
CALL PROGRAM(WW Cust Accruals-Dsp  DF) ('PPB2DFR');
PARAMETER(RCD.Ship_To_Customer);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Process 10=Work With Contacts
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

// Call program WW Customer Contacts  DF.
CALL PROGRAM(WW Customer Contacts  DF) ('CAP6DFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Customer_Name);

ENDIF;

//?Process 11=Work With Customer Invoices
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

// Call program WW Customer/Invoices   DF.
CALL PROGRAM(WW Customer/Invoices   DF) ('POONDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.AR_Customer_Number);

ENDIF;

//?* Disable the following if Live with TPM=Yes    E004019
//?Process 12=Edit appts E01488 6/07/11 RMC
CASE;

// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

// Call program Edt Customer Appt     EF.
CALL PROGRAM(Edt Customer Appt     EF) ('PNXGEFR');
PARAMETER(RCD.Ship_To_Customer);

ENDIF;

//?Process 13=Edt Delv appt comment E01488 6/07/11 RMC
CASE;

// IF RCD.*SFLSEL is Option 13
IF RCD.*SFLSEL = '13';

//?03/05/25 DN DO23471-Inform User to Use P2P to Perform Action.
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// AND LCL.Restrict to P2P is Yes
AND LCL.Restrict_to_P2P = 'Y';

// Call program Pmt Use P2P Info Msg   PV.
CALL PROGRAM(Pmt Use P2P Info Msg   PV) ('PVJ7PVR');

QUIT;

ENDIF;

// Call program Edt Customer Comment  EF.
CALL PROGRAM(Edt Customer Comment  EF) ('POF9EFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER('DL');

ENDIF;

//?USER: Final processing (Pre-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

