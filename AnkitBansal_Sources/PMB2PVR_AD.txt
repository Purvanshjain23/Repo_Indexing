// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMB2PVR
// ?Date: 14.08.2025 Time: 03:42:34
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Validate fields

//?** F4 on Bank Code - Display active only
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Bank Code
IF PGM.*Cursor_field = DTL.Bank_Code;

// Call program SEL Bank Master Active SR.
CALL PROGRAM(SEL Bank Master Active SR) ('PDD8SRR');
PARAMETER(DTL.Bank_Code);

EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(DTL.Bank_Code);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Validate relations

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

//?** Validate bank code
CASE;

// IF DTL.Bank Code is Entered
IF DTL.Bank_Code <> *BLANK;

EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(DTL.Bank_Code);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Bank Master not found.'
ERROR(USR0850);
MSGPARM(DTL.Bank_Code);

ENDIF;

//?** Validate bank code
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Bank Master not found.'
ERROR(USR0850);
MSGPARM(DTL.Bank_Code);

ENDIF;

//?** Error if no Year or Period Range is entered
CASE;

// IF DTL.Accounting Year is equal to zeros
IF DTL.Accounting_Year = *ZERO;

// AND DTL.Prm From Period is Zeros
AND DTL.Prm_From_Period = *ZERO;

// AND DTL.Prm To Period is Zeros
AND DTL.Prm_To_Period = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.Accounting_Year);

ENDIF;

//?** Error if Year and Period Range is entered
CASE;

// IF DTL.Accounting Year is Not equal zeros
IF DTL.Accounting_Year <> *ZERO;

// AND DTL.Prm From Period is Not equal zeros
AND DTL.Prm_From_Period <> *ZERO;

// Send error message - 'Only one date selection allowed.'
ERROR(USR1904);

ENDIF;

//?** Error if Beginning Period is after Ending Period
CASE;

// IF DTL.Prm From Period GT DTL.Prm To Period
IF DTL.Prm_From_Period > DTL.Prm_To_Period;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.Prm_From_Period);

ENDIF;

//?** Error if Periods and Period Years are not both entered
CASE;

// IF DTL.Prm From Period is Not equal zeros
IF ( DTL.Prm_From_Period <> *ZERO;

// AND DTL.YEAR 1 USR is equal to zero
AND DTL.YEAR_1_USR = *ZERO );

// OR DTL.Prm From Period is Zeros
OR ( DTL.Prm_From_Period = *ZERO;

// AND DTL.YEAR 1 USR is Greater than zero
AND DTL.YEAR_1_USR > *ZERO );

// OR DTL.Prm To Period is Not equal zeros
OR ( DTL.Prm_To_Period <> *ZERO;

// AND DTL.YEAR 2 USR is equal to zero
AND DTL.YEAR_2_USR = *ZERO );

// OR DTL.Prm To Period is Zeros
OR ( DTL.Prm_To_Period = *ZERO;

// AND DTL.YEAR 2 USR is Greater than zero
AND DTL.YEAR_2_USR > *ZERO );

// Send error message - 'A Date Range is Required.'
ERROR(USR2591);
MSGPARM(DTL.Prm_From_Period);
MSGPARM(DTL.YEAR_1_USR);
MSGPARM(DTL.Prm_To_Period);

ENDIF;

//?** Verify ending period is a valid period number
CASE;

// IF DTL.Prm To Period is Not equal zeros
IF DTL.Prm_To_Period <> *ZERO;

EXECUTE FUNCTION(RTV Chk Calendar - pos RT) TYPE(RTVOBJ) FILE(CAATREP)          AC1117094;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.YEAR_2_USR);
PARAMETER(DTL.Prm_To_Period);
{
 //?USER: Process Data record

 //?>>  Quit as soon as one record found for year
 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Mo/Year'
ERROR(USR3326);

ENDIF;

ENDIF;

//?** Email format required when email address is entered
CASE;

// IF DTL.Email Address is Entered
IF DTL.Email_Address <> *BLANK;

CASE;

// IF DTL.Email Format is Not Entered
IF DTL.Email_Format = *BLANK;

// Send error message - 'Email format is required when email address is entered.'
ERROR(USR3676);
MSGPARM(DTL.Email_Format);

ENDIF;

ENDIF;

//?USER: User defined action

//?Submit job for Print
// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CND.Not entered
PAR.PRT_Night_Queue = *BLANK;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Bank Letter of Credit Rpt');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

//?If user did not F3 from prompt, submit report
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?** Put the Fiscal Year into the Customer # Pass field
// PAR.Customer Number Pass  USR = DTL.Accounting Year
PAR.Customer_Number_Pass_USR = DTL.Accounting_Year;

// PAR.Date 1          PASS  USR = DTL.Prm From Period
PAR.Date_1_PASS_USR = DTL.Prm_From_Period;

// PAR.Date 2          PASS  USR = DTL.Prm To Period
PAR.Date_2_PASS_USR = DTL.Prm_To_Period;

// PAR.From Date Pass        USR = DTL.YEAR 1 USR
PAR.From_Date_Pass_USR = DTL.YEAR_1_USR;

// PAR.Thru Date Pass        USR = DTL.YEAR 2 USR
PAR.Thru_Date_Pass_USR = DTL.YEAR_2_USR;

// Call program PRT Bank LOC Fees Rpt  CL.
SBMJOB;
CALL PROGRAM(PRT Bank LOC Fees Rpt  CL) ('PMB4UPC');
PARAMETER(DTL.Bank_Code);
PARAMETER('A/R');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Detail_Summary_Report_Usr);
PARAMETER(DTL.Email_Address);
PARAMETER(DTL.Email_Format);
SBMJOBOVR JOB(SBMBNKLOCF);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

