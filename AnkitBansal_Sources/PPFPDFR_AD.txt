// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPFPDFR
// ?Date: 14.08.2025 Time: 03:40:14
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile record from DBF record

//?01/26/07 PKD Use the Plant Designation instead of hard coding
//?             the Company Number.
EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

EXECUTE FUNCTION(Rtv Company Item       RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1700479;
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 // PAR.Record Status = CND.*blank
 PAR.Record_Status = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Assigned or Unassigned, and record sts from Company item
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// RCD.Co/Item Assign Sts    Usr = CND.yes
RCD.Co_Item_Assign_Sts_Usr = 'Y';

// RCD.Description 14A      USR = Condition name of LCL.Record Status
RCD.Description_14A_USR = RTVCND(LCL.Record_Status);

//?Assigned or Unassigned, and record sts from Company item
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Co/Item Assign Sts    Usr = CND.no
RCD.Co_Item_Assign_Sts_Usr = 'N';

// RCD.Description 14A      USR = CON.*BLANK
RCD.Description_14A_USR = *BLANK;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Assign the Company that is selected to this Item and BOM
CASE;

// IF RCD.*SFLSEL is *Select#1
IF RCD.*SFLSEL = '1';

// AND RCD.Description 14A      USR EQ WRK.BLANK
AND RCD.Description_14A_USR = WRK.BLANK;

EXECUTE FUNCTION(Rtv Prd WHS w/AcctCo  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1917599;
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.Default_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Crt Assign Co/Item     IF) TYPE(EXCINTFUN)                     AC1700427;
PARAMETER(RCD.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Description_Line_One);
PARAMETER(PAR.Description_Line_Two);
PARAMETER(PAR.Item_Label_Line_1);
PARAMETER(PAR.Item_Label_Line_2);
PARAMETER(PAR.Item_Label_Line_3);
PARAMETER(PAR.Item_Label_Line_4);
PARAMETER(PAR.UOM_Primary_Dft);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second_Dft);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third_Dft);
PARAMETER(PAR.UOM_Pricing_Dft);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Quality_Level);
PARAMETER(PAR.Item_Level);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(PAR.Minimum_Weight_Per_Case);
PARAMETER(PAR.Maximum_Weight_Per_Case);
PARAMETER(PAR.Number_Cases_On_A_Pallet);
PARAMETER(PAR.Vendor_item_Default_Dft);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(PAR.Transportation_Temp);
PARAMETER(PAR.Item_Type_Code);
PARAMETER(PAR.Package_Type_Code);
PARAMETER(PAR.Maximum_Audit_Value);
PARAMETER(PAR.Minimum_Audit_Value);
PARAMETER(PAR.Market_Overage);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);
PARAMETER(LCL.Default_Warehouse);
PARAMETER(PAR.Price_Method_Default);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Variety_Rendered_Cut);
PARAMETER(PAR.Frozen_Make_to_Order_Sts);
PARAMETER(PAR.Credit_Item_Status);
PARAMETER(PAR.Std_Weight_Head_Var_Ren);
PARAMETER(PAR.Pieces_Per_Head);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Group_for_Packaging);
PARAMETER(PAR.Item_Category_Number_1);
PARAMETER(PAR.Made_to_Order_Code);
PARAMETER(PAR.Item_Category_Number_2);
PARAMETER(PAR.Transportation_Equip_Type);
PARAMETER(PAR.Item_Category_Number_3);
PARAMETER(PAR.Item_Category_Code_3);
PARAMETER(PAR.Item_Category_Number_4);
PARAMETER(PAR.GL_Sub_Code);
PARAMETER(PAR.Item_Category_Number_5);
PARAMETER(PAR.Item_Structure_Sub_Class);
PARAMETER(PAR.Item_Category_Number_6);
PARAMETER(PAR.Item_Primal_Sched_Report);
PARAMETER(PAR.Item_Category_Number_7);
PARAMETER(PAR.Item_Exc_Man_Prc_Excp);
PARAMETER(PAR.Item_Category_Number_8);
PARAMETER(PAR.Item_Prod_Sched_Send_PFS);
PARAMETER(PAR.Item_Category_Number_9);
PARAMETER(PAR.Item_Category_Code_9);
PARAMETER(PAR.Item_Category_Number_10);
PARAMETER(PAR.Item_Category_Code_10);
PARAMETER(PAR.Pallet_Tare_Weight);
PARAMETER(PAR.Misc_Tare_Weight);
PARAMETER(PAR.Production_Lead_Days);
PARAMETER(PAR.Packaging_Code);
PARAMETER(PAR.Item_Market_Code);
PARAMETER(PAR.TF_Co_Ownership_Sts);
PARAMETER(PAR.Agrimetrics_group);
PARAMETER(PAR.Agrimetrics_pack);
PARAMETER(PAR.Agrimetrics_grade);
PARAMETER(PAR.PA_Base_Avail_Rpt_Include);
PARAMETER(PAR.PM_Pounds_per_Hour);
PARAMETER(PAR.Item_Frt_Overage_Prc_UOM);
PARAMETER(PAR.Packages_per_case);
PARAMETER(PAR.Use_Freeze_Sell_By_Days);
PARAMETER(PAR.PM_Batch_Size);
PARAMETER(PAR.Package_Level_size);
PARAMETER(PAR.Partial_Item_Code);
PARAMETER(PAR.WIP_Item_Code);
PARAMETER(PAR.WIP_Reject_Code);
PARAMETER(PAR.Std_Costing_Unit_Weight);
PARAMETER(PAR.FP_Std_Green_Weight);
PARAMETER(PAR.PM_Std_LBS_Man_Per_Hour);
PARAMETER(PAR.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(PAR.PM_Formula_LBS_Per_Hour);
PARAMETER(PAR.PM_Finished_LBS_Per_Hour);
PARAMETER(PAR.SH_Unused_was_broker);
PARAMETER(PAR.PM_Raw_Material_Type_Code);
PARAMETER(PAR.PM_Line_Number);
PARAMETER(PAR.Seconds_Item);
PARAMETER(PAR.Print_on_Realization_Rpt);
PARAMETER(PAR.Unit_Weight_Change_Sts);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Export_Domestic);
PARAMETER(PAR.Print_On_Schedule);
PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
PARAMETER(PAR.Fresh_Sched_As_Ordered);
PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
PARAMETER(PAR.Primal_Group_Code);
PARAMETER(PAR.Item_Meat_Cost_Group_Code);
PARAMETER(PAR.UPC_Code_2);
PARAMETER(PAR.Item_Target_Price);
PARAMETER(PAR.Minimum_Piece_Weight);
PARAMETER(PAR.Maximum_Piece_Weight);
PARAMETER(PAR.Seaboard_Equivalent_Item);
PARAMETER(PAR.Production_Qty_Per_Shift);
PARAMETER(PAR.Scheduling_Position_Grade);
PARAMETER(PAR.Sold_100_Percent_Frozen);
PARAMETER(PAR.Maximum_Shifts);
PARAMETER(PAR.Value_Added_Sts);
PARAMETER(PAR.Label_Type);
PARAMETER(PAR.Item_TF_Exempt_Code);
PARAMETER(PAR.Item_TF_Classification);
PARAMETER(PAR.Default_Workcenter);
PARAMETER(RCD.Record_Status);
{
 //?Execute internal function

 EXECUTE FUNCTION(CRT Item/Add to AvlGrp CR) TYPE(CRTOBJ) FILE(CABZREP)          AC1120696;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.Description_Line_Two);
 PARAMETER(PAR.Item_Label_Line_1);
 PARAMETER(PAR.Item_Label_Line_2);
 PARAMETER(PAR.Item_Label_Line_3);
 PARAMETER(PAR.Item_Label_Line_4);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Conversion_Factor_1);
 PARAMETER(PAR.Operation_Factor_1);
 PARAMETER(PAR.UOM_Second);
 PARAMETER(PAR.Conversion_Factor_2);
 PARAMETER(PAR.Operation_Factor_2);
 PARAMETER(PAR.UOM_Third);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Quality_Level);
 PARAMETER(PAR.Item_Level);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Minimum_Weight_Per_Case);
 PARAMETER(PAR.Maximum_Weight_Per_Case);
 PARAMETER(PAR.Number_Cases_On_A_Pallet);
 PARAMETER(PAR.Vendor_Item_Default);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Transportation_Temp);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Package_Type_Code);
 PARAMETER(PAR.Maximum_Audit_Value);
 PARAMETER(PAR.Minimum_Audit_Value);
 PARAMETER(PAR.Market_Overage);
 PARAMETER(PAR.Standard_Overage_Underage);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Item_Pricing_Operation);
 PARAMETER(PAR.Item_Pricing_Constant);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Price_Method_Default);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Frozen_Make_to_Order_Sts);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Item_Category_Number_1);
 PARAMETER(PAR.Made_to_Order_Code);
 PARAMETER(PAR.Item_Category_Number_2);
 PARAMETER(PAR.Transportation_Equip_Type);
 PARAMETER(PAR.Item_Category_Number_3);
 PARAMETER(PAR.Item_Category_Code_3);
 PARAMETER(PAR.Item_Category_Number_4);
 PARAMETER(PAR.GL_Sub_Code);
 PARAMETER(PAR.Item_Category_Number_5);
 PARAMETER(PAR.Item_Structure_Sub_Class);
 PARAMETER(PAR.Item_Category_Number_6);
 PARAMETER(PAR.Item_Primal_Sched_Report);
 PARAMETER(PAR.Item_Category_Number_7);
 PARAMETER(PAR.Item_Exc_Man_Prc_Excp);
 PARAMETER(PAR.Item_Category_Number_8);
 PARAMETER(PAR.Item_Prod_Sched_Send_PFS);
 PARAMETER(PAR.Item_Category_Number_9);
 PARAMETER(PAR.Item_Category_Code_9);
 PARAMETER(PAR.Item_Category_Number_10);
 PARAMETER(PAR.Item_Category_Code_10);
 PARAMETER(PAR.Pallet_Tare_Weight);
 PARAMETER(PAR.Misc_Tare_Weight);
 PARAMETER(PAR.Production_Lead_Days);
 PARAMETER(PAR.Packaging_Code);
 PARAMETER(PAR.Item_Market_Code);
 PARAMETER(PAR.TF_Co_Ownership_Sts);
 PARAMETER(PAR.Agrimetrics_group);
 PARAMETER(PAR.Agrimetrics_pack);
 PARAMETER(PAR.Agrimetrics_grade);
 PARAMETER(PAR.PA_Base_Avail_Rpt_Include);
 PARAMETER(PAR.PM_Pounds_per_Hour);
 PARAMETER(PAR.Item_Frt_Overage_Prc_UOM);
 PARAMETER(PAR.Packages_per_case);
 PARAMETER(PAR.Use_Freeze_Sell_By_Days);
 PARAMETER(PAR.PM_Batch_Size);
 PARAMETER(PAR.Package_Level_size);
 PARAMETER(PAR.Partial_Item_Code);
 PARAMETER(PAR.WIP_Item_Code);
 PARAMETER(PAR.WIP_Reject_Code);
 PARAMETER(PAR.Std_Costing_Unit_Weight);
 PARAMETER(PAR.FP_Std_Green_Weight);
 PARAMETER(PAR.PM_Std_LBS_Man_Per_Hour);
 PARAMETER(PAR.PM_Raw_Meat_LBS_Per_Hour);
 PARAMETER(PAR.PM_Formula_LBS_Per_Hour);
 PARAMETER(PAR.PM_Finished_LBS_Per_Hour);
 PARAMETER(PAR.SH_Unused_was_broker);
 PARAMETER(PAR.PM_Raw_Material_Type_Code);
 PARAMETER(PAR.PM_Line_Number);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Print_on_Realization_Rpt);
 PARAMETER(PAR.Unit_Weight_Change_Sts);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.Item_Meat_Cost_Group_Code);
 PARAMETER(PAR.UPC_Code_2);
 PARAMETER(PAR.Item_Target_Price);
 PARAMETER(PAR.Minimum_Piece_Weight);
 PARAMETER(PAR.Maximum_Piece_Weight);
 PARAMETER(PAR.Seaboard_Equivalent_Item);
 PARAMETER(PAR.Production_Qty_Per_Shift);
 PARAMETER(PAR.Scheduling_Position_Grade);
 PARAMETER(PAR.Sold_100_Percent_Frozen);
 PARAMETER(PAR.Maximum_Shifts);
 PARAMETER(PAR.Value_Added_Sts);
 PARAMETER(PAR.Label_Type);
 PARAMETER(PAR.Item_TF_Exempt_Code);
 PARAMETER(PAR.Item_TF_Classification);
 PARAMETER(PAR.Default_Workcenter);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  CASE;

  // IF DB1.Item Type Code is Finished Goods
  IF DB1.Item_Type_Code = 'FG';

  EXECUTE FUNCTION(CRT Co Item/Avail Grp  CR) TYPE(CRTOBJ) FILE(PDKLREP)          AC1380738;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER('ALL');
  PARAMETER(*ZERO);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF DB1.Item Type Code is Work in Process
  IF DB1.Item_Type_Code = 'WP';

  EXECUTE FUNCTION(CRT Co Item/Avail Grp  CR) TYPE(CRTOBJ) FILE(PDKLREP)          AC1380738;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER('WIP');
  PARAMETER(*ZERO);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  //?06/17/09 PKD FP1054 Create Company Item EXT & Upd PLAN PRODUCTION STS
  // Call program Rtv Plant Co/Org      XF.
  CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Plant_Company_Sts);
  PARAMETER(LCL.Company_Organization);

  //?LCL. Plant Production Sts
  CASE;

  // IF LCL.Company Organization is Not Seaboard
  IF LCL.Company_Organization = 'D'/'H';

  // OR DB1.Item Type Code is Not Finished Good
  OR DB1.Item_Type_Code <> 'FG';

  // LCL.Plan Production Sts = CND.No
  LCL.Plan_Production_Sts = 'N';

  // LCL.Allocation Method = CND.Forward - ASAP
  LCL.Allocation_Method = 'F';

  //?LCL. Plant Production Sts
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Plan Production Sts = CND.Yes
  LCL.Plan_Production_Sts = *BLANK;

  ENDIF;

  EXECUTE FUNCTION(Crt Company Item Ext  CR) TYPE(CRTOBJ) FILE(PMFDREP)           AC1926035;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Produce_on_Sunday_Sts);
  PARAMETER(LCL.Produce_on_Monday_Sts);
  PARAMETER(LCL.Produce_on_Tuesday_Sts);
  PARAMETER(LCL.Produce_on_Wednesday_Sts);
  PARAMETER(LCL.Produce_on_Thursday_Sts);
  PARAMETER(LCL.Produce_on_Friday_Sts);
  PARAMETER(LCL.Produce_on_Saturday_Sts);
  PARAMETER(LCL.Plan_Production_Sts);
  PARAMETER(LCL.Allocation_Method);
  PARAMETER(LCL.Adjust_Credit_Pieces);
  PARAMETER(LCL.CIE_Use_Age_Days_over_Max);
  PARAMETER(LCL.CIE_MPR_Report_to_USDA);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(DB1.Record_Status);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  // Send information message - 'Company &1 for Item &2 was created'
  MESSAGE(USR3361 *INFO);
  MSGPARM(DB1.Company_Number);
  MSGPARM(DB1.Item_Code);

 }

 //?RMC Crt Box in Packaging Item Master also  04/26/07
 CASE;

 // IF PAR.Item Type Code is Packaging and Supplies
 IF PAR.Item_Type_Code = 'PS';

 EXECUTE FUNCTION(RTV CRT Pck Itm Assgn RT) TYPE(RTVOBJ) FILE(POARREP)           AC1816985;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Process Data record

  //?if rcd read doesnt eq par.new company , then create new company
  //? using found rcd's fields
  CASE;

  // IF DB1.Company Number NE PAR.Company Number Select
  IF DB1.Company_Number <> PAR.Company_Number_Select;

  EXECUTE FUNCTION(Crt Packaging Item    CR) TYPE(CRTOBJ) FILE(POARREP)           AC1602023;
  PARAMETER(PAR.Company_Number_Select);
  PARAMETER(DB1.Packaging_Item_Code);
  PARAMETER(DB1.Pckg_Item_Description);
  PARAMETER(DB1.Pckg_List_Sequence);
  PARAMETER(DB1.Pckg_Type_Class);
  PARAMETER(DB1.Pckg_Item_Type);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Pckg_Unit_Cost);
  PARAMETER(DB1.Pckg_Tare_Weight);
  PARAMETER(DB1.Pckg_Reporting_Group);
  PARAMETER(DB1.Pckg_Group_Category);
  PARAMETER(DB1.Pckg_Modified_Weight);
  PARAMETER(DB1.Pckg_Unused_Status_3);
  PARAMETER(DB1.Pckg_Unused_Sts_2);
  PARAMETER(DB1.Pre_printed_Bag_Sts);
  PARAMETER(DB1.Pckg_Unused_Status_5);
  PARAMETER(DB1.Pckg_Unused_Status_6);
  PARAMETER(DB1.Pckg_Unused_Status_7);
  PARAMETER(DB1.Pckg_Unused_Status_8);
  PARAMETER(DB1.Pckg_Unused_Status_9);
  PARAMETER(DB1.Pckg_Unused_Status_10);
  PARAMETER(DB1.Pckg_Unused_Code);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

   EXECUTE FUNCTION(Rtv Pckng Reprtng Cat RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1653012;
   PARAMETER(DB1.Pckg_Reporting_Group);
   PARAMETER(DB1.Pckg_Group_Category);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

  }

  ENDIF;

 }

 ENDIF;

}


//?Get the company item for this company and then create BOM
//?for this company or for all companies that are plant companies
//?R9547 DN 03/17/17-Commented out Rtv BOM Conv - All Plants function.
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// Call program Edt Company Item Spc  ER.
CALL PROGRAM(Edt Company Item Spc  ER) ('PPFQE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.Item_Code);

ENDIF;

