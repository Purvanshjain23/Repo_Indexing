// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLGVE1R
// ?Date: 14.08.2025 Time: 02:54:15
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 4/12/2017 JBB E12898 - Validate Commodity Market Code/Price Group
//?- Validate against the OMS Commodity Mrkt Price file OMF0CPL0.
//?  Currently, the fields are only validated if the Buy Order Type is
//?  'O'pen Market.  After discussion with Susan Blakey, the values
//?  will be validated if entered regardless of Buy Order Type.
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.Company_Number_USR);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(WRK.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Initialize key screen

CASE;

// IF PAR.PSC Sub-Contract Code EQ WRK.Blank USR
IF PAR.PSC_Sub_Contract_Code = WRK.Blank_USR;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.PD Producer Code = PAR.PD Producer Code
DTL.PD_Producer_Code = PAR.PD_Producer_Code;

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


MOVE *ALL (To: DTL From: PAR);

// DTL.RS Record Status = CND.Active
DTL.RS_Record_Status = 'A';

// DTL.PSC Sub-Contract Code = KEY.PSC Sub-Contract Code
DTL.PSC_Sub_Contract_Code = KEY.PSC_Sub_Contract_Code;

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DB1.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.GN_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.GN_Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Price Option Info RT) TYPE(RTVOBJ) FILE(PKAKREP)           AB1116516;
PARAMETER(DTL.PO_Option_Code);
PARAMETER(DTL.PO_Description);
PARAMETER(WRK.PO_Unused_Code_1);
PARAMETER(WRK.PO_Unused_Code_2);
PARAMETER(WRK.PO_Floor_Price_Req);
PARAMETER(WRK.PO_Ceiling_Price_Req);
PARAMETER(WRK.PO_Market_Req);
PARAMETER(WRK.PO_Base_Prch_Prc_Req);
PARAMETER(WRK.PO_Comp_Price_Adj_Req);
PARAMETER(WRK.PO_Rsrv_Acct_Bal_Sts_Req);
PARAMETER(WRK.PO_Mkt_Crc_Prc_Adj_Req);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv CMP Info          RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1116767;
PARAMETER(DTL.CMP_Program_Code);
PARAMETER(DTL.CMP_Description);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.#Num_USR);
PARAMETER(WRK.#Num_USR);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.CMP_Market_Add_Deduct);
PARAMETER(WRK.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// *RT.VCND           1182898*Bu = Condition name of ilt. in functions
DTL.Record_Status_Desc_Usr = RTVCND(DB1.RS_Record_Status);

// Call program Val Commodity Group   XF.
CALL PROGRAM(Val Commodity Group   XF) ('PDG2XFR');
PARAMETER(*MISSING);
PARAMETER(DTL.Market_Group_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// DTL.Market Group Desc USR = CONCAT(CON.Invalid Price Group,CON.*BLANK,CND.*None)
DTL.Market_Group_Desc_USR = 'Invalid Price Group' + *BLANK (*ZERO);

ENDIF;

// Call program Val Commodity Market  XF.
CALL PROGRAM(Val Commodity Market  XF) ('PDG1XFR');
PARAMETER(DB1.PSC_Commodity_Market_Code);
PARAMETER(DTL.Market_Code_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// DTL.Market Code Desc USR = CONCAT(CON.Invalid Market Code,CON.*BLANK,CND.*None)
DTL.Market_Code_Desc_USR = 'Invalid Market Code' + *BLANK (*ZERO);

ENDIF;

// Call program Val Market Date Method UP.
CALL PROGRAM(Val Market Date Method UP) ('PDZUXFR');
PARAMETER(WRK.*Return_code);
PARAMETER(WRK.Company_Number_USR);
PARAMETER(DB1.PSC_Market_Date_Method);
PARAMETER(DTL.Market_Date_Method_Desc);
PARAMETER('H');

CASE;

// IF DTL.Market Date Method Desc EQ WRK.Blank USR
IF DTL.Market_Date_Method_Desc = WRK.Blank_USR;

// DTL.Market Date Method Desc = CONCAT(CON.Invalid Market Date Metho,CON.d,CND.*No
DTL.Market_Date_Method_Desc = 'Invalid Market Date Metho' + 'd' (*ZERO);

ENDIF;

// DTL.Condition Name USR = Condition name of DTL.PSC Sub-Contract Type
DTL.Condition_Name_USR = RTVCND(DTL.PSC_Sub_Contract_Type);

//?USER: Validate detail screen fields

// DTL.Condition Name USR = Condition name of DTL.PSC Sub-Contract Type
DTL.Condition_Name_USR = RTVCND(DTL.PSC_Sub_Contract_Type);

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.GN_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.GN_Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Price Option Info RT) TYPE(RTVOBJ) FILE(PKAKREP)           AB1116516;
PARAMETER(DTL.PO_Option_Code);
PARAMETER(DTL.PO_Description);
PARAMETER(WRK.PO_Unused_Code_1);
PARAMETER(WRK.PO_Unused_Code_2);
PARAMETER(WRK.PO_Floor_Price_Req);
PARAMETER(WRK.PO_Ceiling_Price_Req);
PARAMETER(WRK.PO_Market_Req);
PARAMETER(WRK.PO_Base_Prch_Prc_Req);
PARAMETER(WRK.PO_Comp_Price_Adj_Req);
PARAMETER(WRK.PO_Rsrv_Acct_Bal_Sts_Req);
PARAMETER(WRK.PO_Mkt_Crc_Prc_Adj_Req);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv CMP Info          RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1116767;
PARAMETER(DTL.CMP_Program_Code);
PARAMETER(DTL.CMP_Description);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.#Num_USR);
PARAMETER(WRK.#Num_USR);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.#Txt_USR);
PARAMETER(WRK.CMP_Market_Add_Deduct);
PARAMETER(WRK.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// *RT.VCND           1182898*Bu = Condition name of ilt. in functions
DTL.Record_Status_Desc_Usr = RTVCND(DTL.RS_Record_Status);

//?Validate Floor Price
CASE;

// IF DTL.PSC Floor Price EQ WRK.Zero USR
IF DTL.PSC_Floor_Price = WRK.Zero_USR;

// AND WRK.PO Floor Price Req is Yes
AND WRK.PO_Floor_Price_Req = 'Y';

// Send error message - 'Floor Price is required'
ERROR(PRK0216);
MSGPARM(DTL.PSC_Floor_Price);

ENDIF;

//?Validate Ceiling Price
CASE;

// IF DTL.PSC Ceiling Price EQ WRK.Zero USR
IF DTL.PSC_Ceiling_Price = WRK.Zero_USR;

// AND WRK.PO Ceiling Price Req is Yes
AND WRK.PO_Ceiling_Price_Req = 'Y';

// Send error message - 'Ceiling Price is required'
ERROR(PRK0217);
MSGPARM(DTL.PSC_Ceiling_Price);

ENDIF;

//?Validate Floor < Ceiling
CASE;

// IF DTL.PSC Floor Price NE WRK.Zero USR
IF DTL.PSC_Floor_Price <> WRK.Zero_USR;

// AND DTL.PSC Ceiling Price NE WRK.Zero USR
AND DTL.PSC_Ceiling_Price <> WRK.Zero_USR;

// AND DTL.PSC Ceiling Price LT DTL.PSC Floor Price
AND DTL.PSC_Ceiling_Price < DTL.PSC_Floor_Price;

// Send error message - 'Floor price must be less than ceiling price.'
ERROR(PRK0243);

ENDIF;

//?Validate Market Percent
CASE;

// IF DTL.PSC Mkt Percent EQ WRK.Zero USR
IF DTL.PSC_Mkt_Percent = WRK.Zero_USR;

// AND WRK.PO Market % Req is Yes
AND WRK.PO_Market_Req = 'Y';

// Send error message - 'Market % is required'
ERROR(PRK0218);
MSGPARM(DTL.PSC_Mkt_Percent);

ENDIF;

//?Select Commodity Market Code & Price Group
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.PSC Commodity Market Code
IF PGM.*Cursor_field = DTL.PSC_Commodity_Market_Code;

// Call program Sel Commodity Market  XF.
CALL PROGRAM(Sel Commodity Market  XF) ('PDEDSRR');
PARAMETER(DTL.PSC_Commodity_Market_Code);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'Y';

QUIT;

// IF PGM.*Cursor field <IS> DTL.PSC Commodity Price Group
IF PGM.*Cursor_field = DTL.PSC_Commodity_Price_Group;

// Call program Sel Commodity Group   XF.
CALL PROGRAM(Sel Commodity Group   XF) ('PDECSRR');
PARAMETER(DTL.PSC_Commodity_Price_Group);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

//?Select Market Date Method
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.PSC Market Date Method
IF PGM.*Cursor_field = DTL.PSC_Market_Date_Method;

// Call program Sel Market Date Method UP.
CALL PROGRAM(Sel Market Date Method UP) ('PDZWXFR');
PARAMETER(PGM.*Return_code);
PARAMETER(WRK.Company_Number_USR);
PARAMETER(DTL.PSC_Market_Date_Method);
PARAMETER(DTL.Market_Date_Method_Desc);
PARAMETER('H');

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

//?Validate Market and Group
DO;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Invalid_Y_N_USR = *BLANK;

// Call program Val Commodity Market  XF.
CALL PROGRAM(Val Commodity Market  XF) ('PDG1XFR');
PARAMETER(*MISSING);
PARAMETER(DTL.Market_Code_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Market Code is invalid.'
ERROR(PRK0028);
MSGPARM(DTL.PSC_Commodity_Market_Code);

ENDIF;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.Invalid_Y_N_USR = *BLANK;

// Call program Val Commodity Group   XF.
CALL PROGRAM(Val Commodity Group   XF) ('PDG2XFR');
PARAMETER(*MISSING);
PARAMETER(DTL.Market_Group_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Price Group is invalid.'
ERROR(PRK0027);
MSGPARM(DTL.PSC_Commodity_Price_Group);

ENDIF;

//?If Commodity Market Code/Price Group entered, validate combination
CASE;

// IF DTL.PSC Commodity Market Code is Entered
IF DTL.PSC_Commodity_Market_Code <> *BLANK;

// OR DTL.PSC Commodity Price Group is Entered
OR DTL.PSC_Commodity_Price_Group <> *BLANK;

// WRK.Invalid Y/N USR = CND.Blank
WRK.Invalid_Y_N_USR = *BLANK;

// Call program Val Commodity Cde/Grp XF.
CALL PROGRAM(Val Commodity Cde/Grp XF) ('PNH5XFR');
PARAMETER(DTL.PSC_Commodity_Market_Code);
PARAMETER(DTL.PSC_Commodity_Price_Group);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Market Code/Price Group combination is invalid.'
ERROR(PRK1492);
MSGPARM(DTL.PSC_Commodity_Market_Code);
MSGPARM(DTL.PSC_Commodity_Price_Group);

ENDIF;

ENDIF;

ENDDO;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.*Return_code = *BLANK;

// Call program Val Market Date Method UP.
CALL PROGRAM(Val Market Date Method UP) ('PDZUXFR');
PARAMETER(WRK.*Return_code);
PARAMETER(WRK.Company_Number_USR);
PARAMETER(DTL.PSC_Market_Date_Method);
PARAMETER(DTL.Market_Date_Method_Desc);
PARAMETER('H');

CASE;

// IF DTL.Market Date Method Desc EQ WRK.Blank USR
IF DTL.Market_Date_Method_Desc = WRK.Blank_USR;

// Send error message - 'Invalid Market Date Method.'
ERROR(PRK0556);
MSGPARM(DTL.PSC_Market_Date_Method);

ENDIF;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.*Return_code = *BLANK;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Sub-Contract      CR) TYPE(CRTOBJ) FILE(PKAQCPP)           AB1100352;
PARAMETER(DTL.PC_Contract_Code);
PARAMETER(DTL.PSC_Sub_Contract_Code);
PARAMETER(DTL.PSC_Date);
PARAMETER(DTL.PSC_Sts);
PARAMETER(DTL.PSC_Floor_Price);
PARAMETER(DTL.PSC_Ceiling_Price);
PARAMETER(DTL.PSC_Market_Percent_NU);
PARAMETER(DTL.PSC_Break_Even_Percent);
PARAMETER(DTL.PSC_FLoor_Price_+);
PARAMETER(DTL.PSC_Sub_Contract_Type);
PARAMETER(DTL.PSC_Mkt_Percent);
PARAMETER(DTL.PSC_Commodity_Market_Code);
PARAMETER(DTL.PSC_Commodity_Price_Group);
PARAMETER(DTL.PSC_Mkt_+_or);
PARAMETER(DTL.PSC_Market_Date_Method);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.PO_Option_Code);
PARAMETER(DTL.CMP_Program_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Sub-Contract      CH) TYPE(CHGOBJ) FILE(PKAQCPP)           AB1100353;
PARAMETER(DTL.PC_Contract_Code);
PARAMETER(DTL.PSC_Sub_Contract_Code);
PARAMETER(DTL.PSC_Date);
PARAMETER(DTL.PSC_Sts);
PARAMETER(DTL.PSC_Floor_Price);
PARAMETER(DTL.PSC_Ceiling_Price);
PARAMETER(DTL.PSC_Market_Percent_NU);
PARAMETER(DTL.PSC_Break_Even_Percent);
PARAMETER(DTL.PSC_FLoor_Price_+);
PARAMETER(DTL.PSC_Sub_Contract_Type);
PARAMETER(DTL.PSC_Mkt_Percent);
PARAMETER(DTL.PSC_Commodity_Market_Code);
PARAMETER(DTL.PSC_Commodity_Price_Group);
PARAMETER(DTL.PSC_Mkt_+_or);
PARAMETER(DTL.PSC_Market_Date_Method);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.PO_Option_Code);
PARAMETER(DTL.CMP_Program_Code);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

