// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLQBXFR
// ?Date: 14.08.2025 Time: 02:55:07
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification history
DO;

//?09/15/2016 JBB  E7214 - MMP Pricing with Floor and Ceiling Prices
//?Modify the RTVOBJ to check the Producer SC FP Commodity file and
//?the Producer SC CP Commodity file for records.  If records exist,
//?then calculate the Floor and Ceiling prices for the Sub-Contract
//?and Date.  Then, after getting the Base price, compare the base
//?price to the floor and ceiling prices.  If the base price is
//?below the floor price, change the base price to the floor price.
//?If the base price is above the ceiling price, then set the base
//?price to the ceiling price.
//?============================================================
//?R6410 RMC 7/6/16 Zerout the market price if the correct date wasnt found
//? for either market, ie. pricing date usr n= purchase date. cant price
//? until the purchase date is reached and there are prices there.
ENDDO;

EXECUTE FUNCTION(Rtv Prod SC Multi Prc RT) TYPE(RTVOBJ) FILE(PLBDREP)           AB1302191;
PARAMETER(PAR.PC_Contract_Code);
PARAMETER(PAR.PSC_Sub_Contract_Code);
PARAMETER(PAR.BOH_Market_Date_Method);
PARAMETER(PAR.CMP_Program_Code);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Purchase_Date);
PARAMETER(PAR.TH_CM_Base_Mkt_Price);
PARAMETER(PAR.Market_Price_USR);
PARAMETER(PAR.Pricing_UOM_USR);
PARAMETER(WRK.Pricing_Date_USR);
PARAMETER(PAR.Multi_Mkt_Prc_1_usr);
PARAMETER(PAR.Base_Mkt_Price_1_Usr);
PARAMETER(PAR.Multi_Mkt_Prc_2_Usr);
PARAMETER(PAR.Base_Mkt_Price_2_Usr);
PARAMETER(PAR.Multi_Mkt_Prc_3_Usr);
PARAMETER(PAR.Base_Mkt_Price_3_Usr);
PARAMETER(PAR.Multi_Mkt_Prc_4_Usr);
PARAMETER(PAR.Base_Mkt_Price_4_Usr);
PARAMETER(PAR.Multi_Mkt_Prc_5_Usr);
PARAMETER(PAR.Base_Mkt_Price_5_Usr);
PARAMETER(PAR.Floor_Ceiling_Price_Type);
{
 //?USER: Initialize routine

 //?R6410 RMC 7/06/16   DONT DO THIS !!!  7/13/16
 //?zero out the price if the right date wasnt found for either Market
 // WRK.Multi Prices Accum Usr = CON.*ZERO
 WRK.Multi_Prices_Accum_Usr = *ZERO;

 // WRK.*Synon (17,9) work field = CON.*ZERO
 WRK.*Synon_179_work_field = *ZERO;

 //?09/16/2016 Brad Baden  E7214 - Multi Pricing Calculation Change
 EXECUTE FUNCTION(RTV for CAK/Sub-CAK   RT) TYPE(RTVOBJ) FILE(PKEBREP)           AB1328365;
 PARAMETER(PAR.PC_Contract_Code);
 PARAMETER(PAR.PSC_Sub_Contract_Code);
 PARAMETER(LCL.FPC_Commodity_Market_Code);
 PARAMETER(LCL.FPC_Commodity_Price_Group);
 PARAMETER(NLL.FPC_Commodity_Description);
 PARAMETER(NLL.FPC_Company_Number);
 PARAMETER(LCL.FPC_Market_Date_Method);
 PARAMETER(LCL.FPC_Constant_1);
 PARAMETER(NLL.FPC_Constant_1_Desc);
 PARAMETER(LCL.FPC_Constant_2);
 PARAMETER(NLL.FPC_Constant_2_Desc);
 PARAMETER(NLL.FPC_Unused_Constant_3);
 PARAMETER(NLL.FPC_Unused_Const_3_Desc);
 PARAMETER(NLL.FPC_Unused_Constant_4);
 PARAMETER(NLL.FPC_Unused_Const_4_Desc);
 PARAMETER(NLL.FPC_Unused_Constant_5);
 PARAMETER(NLL.FPC_Unused_Const_5_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If record found, get Base Price and calculate Floor Price
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Call program RTV Market Price      XF.
 CALL PROGRAM(RTV Market Price      XF) ('PDMWXFR');
 PARAMETER(WRK.*Return_code);
 PARAMETER(LCL.FPC_Commodity_Market_Code);
 PARAMETER(LCL.FPC_Commodity_Price_Group);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Base_Price_Floor_USR);
 PARAMETER(LCL.Pricing_Date_USR);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(LCL.FPC_Market_Date_Method);
 PARAMETER('H');
 PARAMETER(WRK.OMS_Error_Return_Usr);

 //?If no error, caluclate Base Price
 CASE;

 // IF WRK.*Return code is *Normal
 IF WRK.*Return_code = *BLANK;

 //?If Constant 1 factor <> 0, adjust base floor price
 CASE;

 // IF LCL.FPC Constant 1 is Entered
 IF LCL.FPC_Constant_1 <> *ZERO;

 // LCL.Base Price - Floor   USR = LCL.Base Price - Floor   USR * LCL.FPC Constant 1 *
 LCL.Base_Price_Floor_USR = LCL.Base_Price_Floor_USR * LCL.FPC_Constant_1;

 ENDIF;

 // LCL.Base Price - Floor   USR = LCL.Base Price - Floor   USR + LCL.FPC Constant 2
 LCL.Base_Price_Floor_USR = LCL.Base_Price_Floor_USR + LCL.FPC_Constant_2;

 ENDIF;

 //?If record found, get Base Price and calculate Floor Price
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Base Price - Floor   USR = CON.*ZERO
 LCL.Base_Price_Floor_USR = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(RTV for CAK/Sub-CAK   RT) TYPE(RTVOBJ) FILE(PLCOREP)           AB1328366;
 PARAMETER(PAR.PC_Contract_Code);
 PARAMETER(PAR.PSC_Sub_Contract_Code);
 PARAMETER(LCL.CPC_Commodity_Market_Code);
 PARAMETER(LCL.CPC_Commodity_Price_Group);
 PARAMETER(NLL.CPC_Commodity_Description);
 PARAMETER(NLL.CPC_Company_Number);
 PARAMETER(LCL.CPC_Market_Date_Method);
 PARAMETER(LCL.CPC_Constant_1);
 PARAMETER(NLL.CPC_Constant_1_Desc);
 PARAMETER(LCL.CPC_Constant_2);
 PARAMETER(NLL.CPC_Constant_2_Desc);
 PARAMETER(NLL.CPC_Unused_Constant_3);
 PARAMETER(NLL.CPC_Unused_Const_3_Desc);
 PARAMETER(NLL.CPC_Unused_Constant_4);
 PARAMETER(NLL.CPC_Unused_Const_4_Desc);
 PARAMETER(NLL.CPC_Unused_Constant_5);
 PARAMETER(NLL.CPC_Unused_Const_5_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If record found, get Base Price and calculate Ceiling Price
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Call program RTV Market Price      XF.
 CALL PROGRAM(RTV Market Price      XF) ('PDMWXFR');
 PARAMETER(WRK.*Return_code);
 PARAMETER(LCL.CPC_Commodity_Market_Code);
 PARAMETER(LCL.CPC_Commodity_Price_Group);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Base_Price_Ceiling_USR);
 PARAMETER(LCL.Pricing_Date_USR);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(LCL.CPC_Market_Date_Method);
 PARAMETER('H');
 PARAMETER(WRK.OMS_Error_Return_Usr);

 //?If no error, caluclate Base Price
 CASE;

 // IF WRK.*Return code is *Normal
 IF WRK.*Return_code = *BLANK;

 //?If Constant 1 factor <> 0, adjust base ceiling price
 CASE;

 // IF LCL.CPC Constant 1 is Entered
 IF LCL.CPC_Constant_1 <> *ZERO;

 // LCL.Base Price - Ceiling USR = LCL.Base Price - Ceiling USR * LCL.CPC Constant 1 *
 LCL.Base_Price_Ceiling_USR = LCL.Base_Price_Ceiling_USR * LCL.CPC_Constant_1;

 ENDIF;

 // LCL.Base Price - Ceiling USR = LCL.Base Price - Ceiling USR + LCL.CPC Constant 2
 LCL.Base_Price_Ceiling_USR = LCL.Base_Price_Ceiling_USR + LCL.CPC_Constant_2;

 ENDIF;

 //?If record found, get Base Price and calculate Ceiling Price
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Base Price - Ceiling USR = CON.*ZERO
 LCL.Base_Price_Ceiling_USR = *ZERO;

 ENDIF;

 //?USER: Process Data record

 //?*----------------------------------------------------------------*
 //?Special Feature for Triumph Foods.
 //?Read each record and gets its price, then perform its % of Base
 //?and accumulate this price until done
 //?when done then multiple this and perform the rounding
 //?per Jerry Lehenbauer
 //?*----------------------------------------------------------------*
 //?Retrieve Market Price from OMS into PAR.Market Price USR
 //?Function for retrieving the price needs to be in the OMS system.
 // Call program RTV Market Price      XF.
 CALL PROGRAM(RTV Market Price      XF) ('PDMWXFR');
 PARAMETER(WRK.*Return_code);
 PARAMETER(DB1.PSCM_Commodity_Market);
 PARAMETER(DB1.PSCM_Commodity_Price_Grp);
 PARAMETER(PAR.TH_Purchase_Date);
 PARAMETER(*ZERO);
 PARAMETER(WRK.OMS_Market_Price_Amt_Usr);
 PARAMETER(PAR.Pricing_Date_USR);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Market_Date_Method);
 PARAMETER('H');
 PARAMETER(WRK.OMS_Error_Return_Usr);

 // PAR.Market Price USR = WRK.OMS Market Price Amt Usr * CON.1 *
 PAR.Market_Price_USR = WRK.OMS_Market_Price_Amt_Usr * 1;

 // Call program Rtv Commod Group U/M  XF.
 CALL PROGRAM(Rtv Commod Group U/M  XF) ('PDUVXFR');
 PARAMETER(DB1.PSCM_Commodity_Price_Grp);
 PARAMETER(PAR.Pricing_UOM_USR);

 //?*----------------------------------------------------------------*
 //?* Per Jancie do not use the addition cut out for this pricing method
 //?*----------------------------------------------------------------*
 //?*----------------------------------------------------------------*
 // LCL.Market Price USR = PAR.Market Price USR
 LCL.Market_Price_USR = PAR.Market_Price_USR;

 // LCL.Market Price Usr W/O Roud = PAR.Market Price USR
 LCL.Market_Price_Usr_W_O_Roud = PAR.Market_Price_USR;

 //?*----------------------------------------------------------------*
 //?1/24/2008 SLM Add the changes to the Adjust the Market Price
 //?in the Cash Basis Price only.
 //?Mult Market Price will use the CBP
 //?Susan Review 1
 // WRK.Market Price Usr W/O Roud = CON.*ZERO
 WRK.Market_Price_Usr_W_O_Roud = *ZERO;

 CASE;

 // IF DB1.PSCM Mkt Percent is Not Zeros
 IF DB1.PSCM_Mkt_Percent <> *ZERO;

 // Market Price  w/o round
 WRK.Market_Price_Usr_W_O_Roud = LCL.Market_Price_Usr_W_O_Roud * ( DB1.PSCM_Mkt_Percent
 / 100 );

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Market Price Usr W/O Roud = PAR.Market Price USR
 WRK.Market_Price_Usr_W_O_Roud = PAR.Market_Price_USR;

 ENDIF;

 //?add market + or -
 //?Susan Review 2
 // WRK.Market Price Usr W/O Roud = WRK.Market Price Usr W/O Roud + DB1.PSCM Mrkt + or -
 WRK.Market_Price_Usr_W_O_Roud = WRK.Market_Price_Usr_W_O_Roud + DB1.PSCM_Mrkt_+_or;

 // Synon (17,9) work field =       * CAL MUITL MARKET PRICE
 PGM.*Synon_179_work_field = WRK.Market_Price_Usr_W_O_Roud * ( DB1.PSCM_of_Base_Price
 / 100 );

 //?Susan Review 3
 CASE;

 // IF PAR.Multi Mkt Prc 1 usr is EQ *ZERO
 IF PAR.Multi_Mkt_Prc_1_usr = *ZERO;

 // PAR.Multi Mkt Prc 1 usr = PGM.*Synon (17,9) work field
 PAR.Multi_Mkt_Prc_1_usr = PGM.*Synon_179_work_field;

 // PAR.Base Mkt Price 1 Usr = LCL.Market Price Usr W/O Roud
 PAR.Base_Mkt_Price_1_Usr = LCL.Market_Price_Usr_W_O_Roud;

 // IF PAR.Multi Mkt Prc 2 Usr is EQ *ZERO
 IF PAR.Multi_Mkt_Prc_2_Usr = *ZERO;

 // PAR.Multi Mkt Prc 2 Usr = PGM.*Synon (17,9) work field
 PAR.Multi_Mkt_Prc_2_Usr = PGM.*Synon_179_work_field;

 // PAR.Base Mkt Price 2 Usr = LCL.Market Price Usr W/O Roud
 PAR.Base_Mkt_Price_2_Usr = LCL.Market_Price_Usr_W_O_Roud;

 // IF PAR.Multi Mkt Prc 3 Usr is EQ *ZERO
 IF PAR.Multi_Mkt_Prc_3_Usr = *ZERO;

 // PAR.Multi Mkt Prc 3 Usr = PGM.*Synon (17,9) work field
 PAR.Multi_Mkt_Prc_3_Usr = PGM.*Synon_179_work_field;

 // PAR.Base Mkt Price 3 Usr = LCL.Market Price Usr W/O Roud
 PAR.Base_Mkt_Price_3_Usr = LCL.Market_Price_Usr_W_O_Roud;

 // IF PAR.Multi Mkt Prc 4 Usr is EQ *ZERO
 IF PAR.Multi_Mkt_Prc_4_Usr = *ZERO;

 // PAR.Multi Mkt Prc 4 Usr = PGM.*Synon (17,9) work field
 PAR.Multi_Mkt_Prc_4_Usr = PGM.*Synon_179_work_field;

 // PAR.Base Mkt Price 4 Usr = LCL.Market Price Usr W/O Roud
 PAR.Base_Mkt_Price_4_Usr = LCL.Market_Price_Usr_W_O_Roud;

 // IF PAR.Multi Mkt Prc 5 Usr is EQ *ZERO
 IF PAR.Multi_Mkt_Prc_5_Usr = *ZERO;

 // PAR.Multi Mkt Prc 5 Usr = PGM.*Synon (17,9) work field
 PAR.Multi_Mkt_Prc_5_Usr = PGM.*Synon_179_work_field;

 // PAR.Base Mkt Price 5 Usr = LCL.Market Price Usr W/O Roud
 PAR.Base_Mkt_Price_5_Usr = LCL.Market_Price_Usr_W_O_Roud;

 ENDIF;

 // WRK.*Synon (17,9) work field = WRK.*Synon (17,9) work field + PGM.*Synon (17,9) work field
 WRK.*Synon_179_work_field = WRK.*Synon_179_work_field + PGM.*Synon_179_work_field;

 //?USER: Exit processing

 //?Adjust for Floor and Ceiling Price if they were calculated
 CASE;

 // IF WRK.*Synon (17,9) work field is Entered
 IF WRK.*Synon_179_work_field <> *ZERO;

 // AND LCL.Base Price - Floor   USR is Entered
 AND LCL.Base_Price_Floor_USR <> *ZERO;

 // AND WRK.*Synon (17,9) work field LT LCL.Base Price - Floor   USR
 AND WRK.*Synon_179_work_field < LCL.Base_Price_Floor_USR;

 // WRK.*Synon (17,9) work field = LCL.Base Price - Floor   USR
 WRK.*Synon_179_work_field = LCL.Base_Price_Floor_USR;

 // PAR.Floor/Ceiling Price Type = CND.Floor
 PAR.Floor_Ceiling_Price_Type = 'F';

 //?Adjust for Floor and Ceiling Price if they were calculated
 // IF WRK.*Synon (17,9) work field is Entered
 IF WRK.*Synon_179_work_field <> *ZERO;

 // AND LCL.Base Price - Ceiling USR is Entered
 AND LCL.Base_Price_Ceiling_USR <> *ZERO;

 // AND WRK.*Synon (17,9) work field GT LCL.Base Price - Ceiling USR
 AND WRK.*Synon_179_work_field > LCL.Base_Price_Ceiling_USR;

 // WRK.*Synon (17,9) work field = LCL.Base Price - Ceiling USR
 WRK.*Synon_179_work_field = LCL.Base_Price_Ceiling_USR;

 // PAR.Floor/Ceiling Price Type = CND.Ceiling
 PAR.Floor_Ceiling_Price_Type = 'C';

 //?Adjust for Floor and Ceiling Price if they were calculated
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Floor/Ceiling Price Type = CND.Blank
 PAR.Floor_Ceiling_Price_Type = *BLANK;

 ENDIF;

 // WRK.*Synon (15,3) work field = WRK.*Synon (17,9) work field * CON.1 *Rounded
 WRK.*Synon_153_work_field = WRK.*Synon_179_work_field * 1 'H';

 // PAR.TH CM Base Mkt Price = WRK.*Synon (15,3) work field * CON.1 *Rounded
 PAR.TH_CM_Base_Mkt_Price = WRK.*Synon_153_work_field * 1 'H';

 // PAR.Market Price USR = WRK.*Synon (15,3) work field * CON.1 *Rounded
 PAR.Market_Price_USR = WRK.*Synon_153_work_field * 1 'H';

}


