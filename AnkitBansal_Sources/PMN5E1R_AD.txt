// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMN5E1R
// ?Date: 14.08.2025 Time: 03:43:34
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E00398 RMC 4/30/09 allow for desc line 2 of fuel - print on fx/emld bol
EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

// LCL.RFS Volume Corr Mthd  USR = CND.API Volume Corr Table
LCL.RFS_Volume_Corr_Mthd_USR = 'A';

//?P000579 RMC 6/24/2010  use new formula
//?P000579 RMC 7/14/2010  use api table to get the factor
//?USER: Validate key screen

// Execute function SET Move 'V1' Co Nbr   US.
EXECUTE FUNCTION(SET Move 'V1' Co Nbr   US) TYPE(EXCUSRSRC) ('PDGAUFR');
PARAMETER(LCL.USR_Search_Request);
{
 C                     MOVELV1AIC3    #OELST
}


CASE;

// IF LCL.USR Search Request is Search requested
IF LCL.USR_Search_Request = '?';

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(KEY.Company_Number);

ENDIF;

//?USER: Initialize detail screen (new record)

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Status Description 3  USR = Condition name of DTL.Record Status
DTL.Status_Description_3_USR = RTVCND(DTL.Record_Status);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize detail screen (existing record)

// DTL.Status Description 3  USR = Condition name of DTL.Record Status
DTL.Status_Description_3_USR = RTVCND(DTL.Record_Status);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.COA Temperature Loadout = DB1.COA Temperature Loadout
LCL.COA_Temperature_Loadout = DB1.COA_Temperature_Loadout;

// WRK.Text USR 5 = DB1.COA OMS Item Code
WRK.Text_USR_5 = DB1.COA_OMS_Item_Code;

// WRK.Item Code 5.0 = CVTVAR(WRK.Text USR 5)
WRK.Item_Code_5_0 = CVTVAR(WRK.Text_USR_5);

// DTL.Item Code = CON.1 * WRK.Item Code 5.0 *
DTL.Item_Code = 1 * WRK.Item_Code_5_0;

//?USER: Validate detail screen fields

//?Process F4 prompt requests
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.COA Active Whse/Tank 1
IF PGM.*Cursor_field = DTL.COA_Active_Whse_Tank_1;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.COA_Active_Whse_Tank_1);
PARAMETER(DTL.Company_Number);

// IF PGM.*Cursor field <IS> DTL.COA Active Whse/Tank 2
IF PGM.*Cursor_field = DTL.COA_Active_Whse_Tank_2;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.COA_Active_Whse_Tank_2);
PARAMETER(DTL.Company_Number);

// IF PGM.*Cursor field <IS> DTL.COA Active Whse/Tank 3
IF PGM.*Cursor_field = DTL.COA_Active_Whse_Tank_3;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.COA_Active_Whse_Tank_3);
PARAMETER(DTL.Company_Number);

// IF PGM.*Cursor field <IS> DTL.COA Active Whse/Tank 4
IF PGM.*Cursor_field = DTL.COA_Active_Whse_Tank_4;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.COA_Active_Whse_Tank_4);
PARAMETER(DTL.Company_Number);

// IF PGM.*Cursor field <IS> DTL.COA Active Whse/Tank 5
IF PGM.*Cursor_field = DTL.COA_Active_Whse_Tank_5;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.COA_Active_Whse_Tank_5);
PARAMETER(DTL.Company_Number);

// IF PGM.*Cursor field <IS> DTL.COA Active Whse/Tank 6
IF PGM.*Cursor_field = DTL.COA_Active_Whse_Tank_6;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.COA_Active_Whse_Tank_6);
PARAMETER(DTL.Company_Number);

ENDIF;

ENDIF;

// DTL.Status Description 3  USR = Condition name of DTL.Record Status
DTL.Status_Description_3_USR = RTVCND(DTL.Record_Status);

//?Recalc Density ref if Loadout temperature changes
CASE;

// IF DTL.COA Temperature Loadout NE LCL.COA Temperature Loadout
IF DTL.COA_Temperature_Loadout <> LCL.COA_Temperature_Loadout;

// OR DTL.COA Density Reference is Not entered
OR DTL.COA_Density_Reference = *ZERO;

//?Use API Vol Corr table or calc factor - 7/14
CASE;

// IF LCL.RFS Volume Corr Mthd  USR is Calculate factor per Prop
IF LCL.RFS_Volume_Corr_Mthd_USR = 'C';

//?New formula - after 6/27/10 -  goes in with RFS2/EMTS    P000579
// WRK.COA Temp Conv Factor 1 = CON.-.00045767
WRK.COA_Temp_Conv_Factor_1 = -.00045767;

// WRK.COA Temp Conv Factor 2 = CON.1.02746025
WRK.COA_Temp_Conv_Factor_2 = 1.02746025;

// Compute: temp adj
WRK.HPB_Temperature_Adjustmnt = ( ( WRK.COA_Temp_Conv_Factor_1                                     +
* DTL.COA_Temperature_Loadout ) + WRK.COA_Temp_Conv_Factor_2 ) * 1 'H';

//?Use API Vol Corr table or calc factor - 7/14
// IF LCL.RFS Volume Corr Mthd  USR is API Volume Corr Table
IF LCL.RFS_Volume_Corr_Mthd_USR = 'A';

// LCL.RFS Loadout Temperature = DTL.COA Temperature Loadout
LCL.RFS_Loadout_Temperature = DTL.COA_Temperature_Loadout;

EXECUTE FUNCTION(Rtv API Vol Cor Fctor RT) TYPE(RTVOBJ) FILE(PNGJREP)           AC1999417;
PARAMETER(30);
PARAMETER(LCL.RFS_Loadout_Temperature);
PARAMETER(LCL.RFS_API_Vol_Corr_Factor);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.HPB Temperature Adjustmnt = LCL.RFS API Vol Corr Factor
WRK.HPB_Temperature_Adjustmnt = LCL.RFS_API_Vol_Corr_Factor;

CASE;

// IF LCL.RFS API Vol Corr Factor is Not Found
IF LCL.RFS_API_Vol_Corr_Factor = *ZERO;

// Send error message - 'Temperature Loadout invalid'
ERROR(USR3925);
MSGPARM(DTL.COA_Temperature_Loadout);

ENDIF;

ENDIF;

// Compute: density ref NEW
WRK.COA_Density_Ref_Adj_4_dec = WRK.HPB_Temperature_Adjustmnt * DTL.COA_Density_Loadout            +
'H';

// DTL.COA Density Reference = WRK.COA Density Ref Adj 4 dec
DTL.COA_Density_Reference = WRK.COA_Density_Ref_Adj_4_dec;

// LCL.COA Temperature Loadout = DB1.COA Temperature Loadout
LCL.COA_Temperature_Loadout = DB1.COA_Temperature_Loadout;

ENDIF;

EXECUTE FUNCTION(Val Item Exists        RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1305841;
PARAMETER(DTL.Item_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Item not found'
ERROR(USR0374);
MSGPARM(DTL.Item_Code);

ENDIF;

//?CALC: Detail screen function fields

//?Blank out description fields
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Yld Component Desc 1 USR = CON.*BLANK
DTL.Yld_Component_Desc_1_USR = *BLANK;

// DTL.Yld Component Desc 2 USR = CON.*BLANK
DTL.Yld_Component_Desc_2_USR = *BLANK;

// DTL.Yld Component Desc 3 USR = CON.*BLANK
DTL.Yld_Component_Desc_3_USR = *BLANK;

// DTL.Yld Component Desc 4 USR = CON.*BLANK
DTL.Yld_Component_Desc_4_USR = *BLANK;

// DTL.Yld Component Desc 5 USR = CON.*BLANK
DTL.Yld_Component_Desc_5_USR = *BLANK;

// DTL.Yld Component Desc 6 USR = CON.*BLANK
DTL.Yld_Component_Desc_6_USR = *BLANK;

ENDIF;

EXECUTE FUNCTION(RTV Shipping Co,Desc   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1738204;
PARAMETER(DTL.COA_Active_Whse_Tank_1);
PARAMETER(DTL.Yld_Component_Desc_1_USR);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Shipping Co,Desc   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1738204;
PARAMETER(DTL.COA_Active_Whse_Tank_2);
PARAMETER(DTL.Yld_Component_Desc_2_USR);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Shipping Co,Desc   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1738204;
PARAMETER(DTL.COA_Active_Whse_Tank_3);
PARAMETER(DTL.Yld_Component_Desc_3_USR);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Shipping Co,Desc   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1738204;
PARAMETER(DTL.COA_Active_Whse_Tank_4);
PARAMETER(DTL.Yld_Component_Desc_4_USR);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Shipping Co,Desc   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1738204;
PARAMETER(DTL.COA_Active_Whse_Tank_5);
PARAMETER(DTL.Yld_Component_Desc_5_USR);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Shipping Co,Desc   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1738204;
PARAMETER(DTL.COA_Active_Whse_Tank_6);
PARAMETER(DTL.Yld_Component_Desc_6_USR);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Item Code 5.0 = DTL.Item Code
WRK.Item_Code_5_0 = DTL.Item_Code;

// WRK.Text USR 5 = CVTVAR(WRK.Item Code 5.0)
WRK.Text_USR_5 = CVTVAR(WRK.Item_Code_5_0);

// DTL.COA OMS Item Code = WRK.Text USR 5
DTL.COA_OMS_Item_Code = WRK.Text_USR_5;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt COA Property Def  CR) TYPE(CRTOBJ) FILE(PMCAREP)           AC1847472;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(DTL.COA_Bio_dsl_Fuel_Cd_Descr);
PARAMETER(DTL.COA_Producer_Regist_Nbr);
PARAMETER(DTL.COA_Employer_ID);
PARAMETER(DTL.COA_Sold_From_Address);
PARAMETER(DTL.COA_Sold_From_Name);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_ULSD_Facility_#);
PARAMETER(DTL.COA_RIN_Equivalence_Valu);
PARAMETER(DTL.COA_RIN_Renewable_Enrgy);
PARAMETER(DTL.COA_RIN_Type_Flag);
PARAMETER(DTL.COA_Density_Loadout);
PARAMETER(DTL.COA_Density_Reference);
PARAMETER(DTL.COA_Temperature_Loadout);
PARAMETER(DTL.COA_Temperature_Ref);
PARAMETER(DTL.COA_BOL_Percent);
PARAMETER(DTL.COA_Sale_Location);
PARAMETER(DTL.COA_Active_Whse_Tank_1);
PARAMETER(DTL.COA_Active_Whse_Tank_2);
PARAMETER(DTL.COA_Active_Whse_Tank_3);
PARAMETER(DTL.COA_Active_Whse_Tank_4);
PARAMETER(DTL.COA_Active_Whse_Tank_5);
PARAMETER(DTL.COA_Active_Whse_Tank_6);
PARAMETER(DTL.COA_Temp_Conv_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.COA_Temp_Conv_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.COA_RFS_Renew_Fuel_Code);
PARAMETER(DTL.COA_RFS_Rnwbl_Feedstock);
PARAMETER(DTL.COA_OMS_Item_Code);
PARAMETER(DTL.Sold_To_Customer_hpb_biod);
PARAMETER(DTL.COA_Footnote_Indicator);
PARAMETER(DTL.COA_Fuel_Desc2_Prop_Value);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg COA Property Def  CH) TYPE(CHGOBJ) FILE(PMCAREP)           AC1847473;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_Bio_diesel_Fuel_Code);
PARAMETER(DTL.COA_Bio_dsl_Fuel_Cd_Descr);
PARAMETER(DTL.COA_Producer_Regist_Nbr);
PARAMETER(DTL.COA_Employer_ID);
PARAMETER(DTL.COA_Sold_From_Address);
PARAMETER(DTL.COA_Sold_From_Name);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_ULSD_Facility_#);
PARAMETER(DTL.COA_RIN_Equivalence_Valu);
PARAMETER(DTL.COA_RIN_Renewable_Enrgy);
PARAMETER(DTL.COA_RIN_Type_Flag);
PARAMETER(DTL.COA_Density_Loadout);
PARAMETER(DTL.COA_Density_Reference);
PARAMETER(DTL.COA_Temperature_Loadout);
PARAMETER(DTL.COA_Temperature_Ref);
PARAMETER(DTL.COA_BOL_Percent);
PARAMETER(DTL.COA_Sale_Location);
PARAMETER(DTL.COA_Active_Whse_Tank_1);
PARAMETER(DTL.COA_Active_Whse_Tank_2);
PARAMETER(DTL.COA_Active_Whse_Tank_3);
PARAMETER(DTL.COA_Active_Whse_Tank_4);
PARAMETER(DTL.COA_Active_Whse_Tank_5);
PARAMETER(DTL.COA_Active_Whse_Tank_6);
PARAMETER(DTL.COA_Temp_Conv_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.COA_Temp_Conv_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.COA_RFS_Renew_Fuel_Code);
PARAMETER(DTL.COA_RFS_Rnwbl_Feedstock);
PARAMETER(DTL.COA_OMS_Item_Code);
PARAMETER(DTL.Sold_To_Customer_hpb_biod);
PARAMETER(DTL.COA_Footnote_Indicator);
PARAMETER(DTL.COA_Fuel_Desc2_Prop_Value);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


