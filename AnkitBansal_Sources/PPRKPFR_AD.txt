// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPRKPFR
// ?Date: 14.08.2025 Time: 12:06:39
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log and Comments
//?***********
//?S019492  AB  09/09/2024  Re-compiled as ARBDCPP is converted to DDL and
//?Logicals with sub-select of fields converted to all fields indexes
//?***********
//?** 02/20/2019 RMC S14541
//?** Get the Cust PO# ONLY if the order number is entered.
//?*****
//?** 12/13/2016 JBB E8097
//?** Added logic in CLC Age Cust Inv.      IF - A/R Header to get
//?** aging for Rebills
//?*****
//?** 02/10/2014 RMC E3013
//?** Change the LF to arbdcpqr - seq by suffix Descending to get CB
//?** after INvoices
//?*****
//?** 06/12/2009 LJB S00831
//?** Change the RTV for PO# to retrieve by order number only, not
//?** co# & order#
//?*****
//?** 12/01/2006 LJB  PK0039
//?** Retrieve aging information from the new A/R Aging Control file
//?** for the Default Record and pass the Aging Code to the
//?** CLC RTV Age Cust Inv IF in the A/R Header
//?*****
//?** 07/07/2006 LJB  L060606
//?** Use a function that selects just the Company Number records
//?** if it is passed in from the screen or selects ALL records for
//?** this Customer from all companies if no company number is passed
//?** in. Be careful if changes are made to use the correct Co#.
//?** Company Number CDE is put into USR Company Number - this is
//?** what was entered on the prompt screen. CUR.Company Number is
//?** ONLY used to get information from the Company Values file.
//?*****
//?** 02/18/2008 SAZ  S00118
//?Added code to retrieve the company name & address instead of hardcoded.
//?**Set the company key with the Parm passed  in or default to Seaboard.
//?**concatenate the city, state, zip together.
CASE;

// IF PAR.USR Company Number is Equal to zero
IF PAR.USR_Company_Number = *ZERO;

// LCL.USR Company Number = CON.300
LCL.USR_Company_Number = 300;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.USR Company Number = PAR.USR Company Number
LCL.USR_Company_Number = PAR.USR_Company_Number;

ENDIF;

EXECUTE FUNCTION(RTV Company Address    RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1113470;
PARAMETER(LCL.USR_Company_Number);
PARAMETER(LCL.Name);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(LCL.State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.Customer Name         USR = LCL.Name
TOP_Customer_Name_USR = LCL.Name;

// TOP.Address Line 1 = LCL.Address Line 1
TOP_Address_Line_1 = LCL.Address_Line_1;

// LCL.Text 1 USR = CONCAT(LCL.City,CON.,,CON.*ZERO)
LCL.Text_1_USR = LCL.City + ',' (*ZERO);

// LCL.Text 1 USR = CONCAT(LCL.Text 1 USR,LCL.State Code,CON.1)
LCL.Text_1_USR = LCL.Text_1_USR + LCL.State_Code (1);

// LCL.Text 1 USR = CONCAT(LCL.Text 1 USR,LCL.Zip/Postal Code,CON.1)
LCL.Text_1_USR = LCL.Text_1_USR + LCL.Zip_Postal_Code (1);

// TOP.City/State/Zip        USR = LCL.Text 1 USR
TOP_City_State_Zip_USR = LCL.Text_1_USR;

//?USER: Record selection processing

CASE;

// IF PAR.Include Credit Memos is No
IF PAR.Include_Credit_Memos = 'N';

CASE;

// IF DB1.Remaining Balance Due is less than zero
IF DB1.Remaining_Balance_Due < *ZERO;

// OR DB1.Invoice Suffix is CM or OA
OR DB1.Invoice_Suffix = 'CM'/'OA';

// AND DB1.Transaction Amount is greater than zero
AND DB1.Transaction_Amount > *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW AR_Customer_Number;
EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(LCL.Customer_Name);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.State_Code);
PARAMETER(LCL.Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Country Code       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1395144;
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(LCL.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(LCL.Country_Code);
PARAMETER(WRK.Country_Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Execute function RTV Comprs Nme/Add/CtryUS.
EXECUTE FUNCTION(RTV Comprs Nme/Add/CtryUS) TYPE(EXCUSRSRC) ('PDRYUFR');
PARAMETER(LCL.Customer_Name);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.State_Code);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(WRK.Country_Description);
PARAMETER(CUR.USR_Compressed_Address_1);
PARAMETER(CUR.USR_Compressed_Address_2);
PARAMETER(CUR.USR_Compressed_Address_3);
PARAMETER(CUR.USR_Compressed_Address_4);
PARAMETER(CUR.USR_Compressed_Address_5);
PARAMETER(WRK.USR_Country_Description);
{
 * Use this function to compress name/address information
 *
 E                    UAD         6 34               Name/Address
 *
 C                     MOVEL#IADTX    UUADTX           Name
 C                     MOVEL#IACNA    UUACNA           Address 1
 C                     MOVEL#IADNA    UUADNA           Address 2
 C                     MOVEL#IAENA    UUAENA           Address 3
 C                     MOVEL#IAJNA    UUAJNA           City
 C                     MOVEL#IEINA    UUEINA           State
 C                     MOVEL#IBTTX    UUBTTX           Zip
 C                     MOVEL#IDATX    UUDATX           Country
 C                     EXSR UJ1UF
 C                     MOVELUAD,1     #OEJNA
 C                     MOVELUAD,2     #OEKNA
 C                     MOVELUAD,3     #OELNA
 C                     MOVELUAD,4     #OEMNA
 C                     MOVELUAD,5     #OENNA
 C                     MOVELUAD,6     #OKSTX
 C           UJ1UF     BEGSR
 *============================================================
 * UJ1UF - COMPRESS NAME/ADDRESS/COUNTRY INFORMATION
 *============================================================
 *
 C           *LIKE     DEFN #IADTX    UUADTX
 C           *LIKE     DEFN #IACNA    UUACNA
 C           *LIKE     DEFN #IADNA    UUADNA
 C           *LIKE     DEFN #IAENA    UUAENA
 C           *LIKE     DEFN #IAJNA    UUAJNA
 C           *LIKE     DEFN #IEINA    UUEINA
 C           *LIKE     DEFN #IBTTX    UUBTTX- 1
 C           *LIKE     DEFN #IDATX    UUDATX
 * CLEAR OUTPUT ARRAY
 C                     MOVE *BLANK    UAD
 C                     Z-ADD1         UX      20
 C                     MOVELUUADTX    UAD,UX
 C                     ADD  1         UX
 C           UUACNA    IFNE *BLANK
 C                     MOVELUUACNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUADNA    IFNE *BLANK
 C                     MOVELUUADNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUAENA    IFNE *BLANK
 C                     MOVELUUAENA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C                     MOVE *BLANK    UUCSTZ 34
 C                     MOVELUUAJNA    UUCST  23
 C                     MOVE UUEINA    UUCST
 C                     MOVELUUCST     UUCSTZ
 C                     MOVE UUBTTX    UUCSTZ
 C                     MOVELUUCSTZ    UAD,UX
 C           UUDATX    IFNE *BLANK
 C                     ADD  1         UX
 C                     MOVELUUDATX    UAD,UX
 C                     END
 C                     ENDSR
}


EXECUTE FUNCTION(RTV Contact Info.      RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1356453;
PARAMETER(CUR.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(CUR.Credit_Contact_Name);
PARAMETER(LCL.Credit_Contact_Telephone);
PARAMETER(LCL.Credit_Contact_Bus_Title);
PARAMETER(CUR.Credit_Contact_Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve default aging control record values
//?** Use these to fill in the report heading values
// WRK.A/R Aging Code = CND.Default
WRK.A_R_Aging_Code = '7DAY';

EXECUTE FUNCTION(RTV Default Aging Code RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1801040;
PARAMETER(PAR.A_R_Aging_Code);
PARAMETER(CUR.A_R_Aging_Days_1);
PARAMETER(CUR.A_R_Aging_Days_2);
PARAMETER(CUR.A_R_Aging_Days_3);
PARAMETER(CUR.A_R_Aging_Days_4);
PARAMETER(WRK.Age_by_Trans_or_Due_Date);
PARAMETER(WRK.Default_Y_N);
PARAMETER(WRK.Record_Status);
{
 //?USER: Initialize routine

 // PAR.A/R Aging Code = CND.Not Entered
 PAR.A_R_Aging_Code = *BLANK;

 //?USER: Process Data record

 // PAR.A/R Aging Code = DB1.A/R Aging Code
 PAR.A_R_Aging_Code = DB1.A_R_Aging_Code;

 CASE;

 // IF DB1.Default Y/N is yes
 IF DB1.Default_Y_N = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// CUR.USR Aging Days 1 = CUR.A/R Aging Days - 1 + CON.1
CUR.USR_Aging_Days_1 = CUR.A_R_Aging_Days_1 + 1;

// CUR.USR Aging Days 2 = CUR.A/R Aging Days - 2 + CON.1
CUR.USR_Aging_Days_2 = CUR.A_R_Aging_Days_2 + 1;

// CUR.USR aging days 3 = CUR.A/R Aging Days - 3 + CON.1
CUR.USR_aging_days_3 = CUR.A_R_Aging_Days_3 + 1;

// CUR.Aging Day 4 = CUR.A/R Aging Days - 4
CUR.Aging_Day_4 = CUR.A_R_Aging_Days_4;

// Print A/R Customer Number header format
PRINT A/R Customer Number header format;

ENDIF;

// SUPPRESSED PRINT Invoice Suffix header format

// SUPPRESSED PRINT Invoice Number header format

//?USER: On print of detail format

//?** Use file company to retrieve PO#            S00831
// CUR.Customer Purchase Order # = CON.*BLANK
CUR.Customer_Purchase_Order_# = *BLANK;

CASE;

// IF CUR.Order Number Ref is Entered
IF CUR.Order_Number_Ref <> *ZERO;

EXECUTE FUNCTION(RTV Purch Order No Co# RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1942245;
PARAMETER(CUR.Order_Number_Ref);
PARAMETER(CUR.Customer_Purchase_Order_#);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF DB1.Invoice Suffix is CM or OA
IF DB1.Invoice_Suffix = 'CM'/'OA';

// LCL.Remaining Balance Due = CON.*ZERO - DB1.Remaining Balance Due
LCL.Remaining_Balance_Due = 0 - DB1.Remaining_Balance_Due;

// CUR.USR Credit Amount = CUR.USR Credit Amount + LCL.Remaining Balance Due
CUR.USR_Credit_Amount = CUR.USR_Credit_Amount + LCL.Remaining_Balance_Due;

// IF *OTHERWISE
IF *OTHERWISE;

//?** Use the Aging Code retrieved for the headings
EXECUTE FUNCTION(CLC Age Cust Inv.      IF) TYPE(EXCINTFUN)                     AC1640420;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(CUR.Age_$_Due_Curr_CB_9_2);
PARAMETER(CUR.Age_Due_Aging_1_CB);
PARAMETER(CUR.Age_Due_Aging_2_CB);
PARAMETER(CUR.Age_Due_Aging_3_CB);
PARAMETER(CUR.Age_Due_Aging_4_CB);
PARAMETER(CUR.Age_Due_Aging_5_CB);
PARAMETER(WRK.Age_Due_Current_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_1_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_2_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_3_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_4_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_5_W_O_CB);
PARAMETER(DB1.Invoice_Number);
PARAMETER(DB1.Invoice_Suffix);
PARAMETER(DB1.Remaining_Balance_Due);
PARAMETER(DB1.Due_Date);
PARAMETER(PAR.A_R_Aging_Code);
{
 //?Execute internal function

 //?Initialize Neither Parameters.
 DO;

 // PAR.USR Age Current = CND.equal to zero
 PAR.USR_Age_Current = *ZERO;

 // PAR.USR Age Value 1 = CND.equal to zero
 PAR.USR_Age_Value_1 = *ZERO;

 // PAR.USR Age Value 2 = CND.equal to zero
 PAR.USR_Age_Value_2 = *ZERO;

 // PAR.USR Age Value 3 = CND.equal to zero
 PAR.USR_Age_Value_3 = *ZERO;

 // PAR.USR Age Value 4 = CND.equal to zero
 PAR.USR_Age_Value_4 = *ZERO;

 // PAR.USR Age Value 5 = CND.equal to zero
 PAR.USR_Age_Value_5 = *ZERO;

 // PAR.USR Age Current A = CND.equal to zero
 PAR.USR_Age_Current_A = *ZERO;

 // PAR.USR Age Value 1 A = CND.equal to zero
 PAR.USR_Age_Value_1_A = *ZERO;

 // PAR.USR Age Value 2 A = CND.equal to zero
 PAR.USR_Age_Value_2_A = *ZERO;

 // PAR.USR Age Value 3 A = CND.equal to zero
 PAR.USR_Age_Value_3_A = *ZERO;

 // PAR.USR Age Value 4 A = CND.equal to zero
 PAR.USR_Age_Value_4_A = *ZERO;

 // PAR.USR Age Value 5 A = CND.equal to zero
 PAR.USR_Age_Value_5_A = *ZERO;

 // PAR.USR Age Current B = CND.equal to zero
 PAR.USR_Age_Current_B = *ZERO;

 // PAR.USR Age Value 1 B = CND.equal to zero
 PAR.USR_Age_Value_1_B = *ZERO;

 // PAR.USR Age Value 2 B = CND.equal to zero
 PAR.USR_Age_Value_2_B = *ZERO;

 // PAR.USR Age Value 3 B = CND.equal to zero
 PAR.USR_Age_Value_3_B = *ZERO;

 // PAR.USR Age Value 4 B = CND.equal to zero
 PAR.USR_Age_Value_4_B = *ZERO;

 // PAR.USR Age Value 5 B = CND.equal to zero
 PAR.USR_Age_Value_5_B = *ZERO;

 // PAR.USR Total Credit Amount = CND.Zero
 PAR.USR_Total_Credit_Amount = *ZERO;

 ENDDO;

 //?Retrieve Aging Ranges.
 DO;

 //?** A/R aging info is now in a file - retrieve from there  12/01/06 LJB
 EXECUTE FUNCTION(RTV A/R Aging Control  RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1800594;
 PARAMETER(PAR.A_R_Aging_Code);
 PARAMETER(PAR.A_R_Aging_Days_1);
 PARAMETER(PAR.A_R_Aging_Days_2);
 PARAMETER(PAR.A_R_Aging_Days_3);
 PARAMETER(PAR.A_R_Aging_Days_4);
 PARAMETER(WRK.Age_by_Trans_or_Due_Date);
 PARAMETER(WRK.Default_Y_N);
 PARAMETER(WRK.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDDO;

 CASE;

 // IF PAR.Remaining Balance Due is not equal to zeros
 IF PAR.Remaining_Balance_Due <> *ZERO;

 //?Sum A/R Cust Invoices with a Remaining Bal.(IN,DM)(CB)(CM,OA)
 DO;

 // PAR.Days Past Due  USR = JOB.*Job date - PAR.Due Date *DAYS
 PAR.Days_Past_Due_USR = DURATION(JOB.*Job_date PAR.Due_Date 'DY' 1111111 'NONE' 'N' 1);

 CASE;

 // IF PAR.Days Past Due  USR is <= Zero
 IF PAR.Days_Past_Due_USR <= *ZERO;

 //?Current.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Current);
 PARAMETER(PAR.USR_Age_Current_A);
 PARAMETER(PAR.USR_Age_Current_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 1
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_1;

 //?Past Due Period 1.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_1);
 PARAMETER(PAR.USR_Age_Value_1_A);
 PARAMETER(PAR.USR_Age_Value_1_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 2
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_2;

 //?Past Due Period 2.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_2);
 PARAMETER(PAR.USR_Age_Value_2_A);
 PARAMETER(PAR.USR_Age_Value_2_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 3
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_3;

 //?Past Due Period 3.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_3);
 PARAMETER(PAR.USR_Age_Value_3_A);
 PARAMETER(PAR.USR_Age_Value_3_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 4
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_4;

 //?Past Due Period 4.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_4);
 PARAMETER(PAR.USR_Age_Value_4_A);
 PARAMETER(PAR.USR_Age_Value_4_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Past Due Period 5.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(PAR.Invoice_Suffix);
 PARAMETER(PAR.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_5);
 PARAMETER(PAR.USR_Age_Value_5_A);
 PARAMETER(PAR.USR_Age_Value_5_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 ENDIF;

 ENDDO;

 ENDIF;

 //?Load Output Parameters.
 DO;

 // PAR.Age $ Due - Current - CB = PAR.USR Age Current B
 PAR.Age_Due_Current_CB = PAR.USR_Age_Current_B;

 // PAR.Age $ Due - Aging 1 - CB = PAR.USR Age Value 1 B
 PAR.Age_Due_Aging_1_CB = PAR.USR_Age_Value_1_B;

 // PAR.Age $ Due - Aging 2 - CB = PAR.USR Age Value 2 B
 PAR.Age_Due_Aging_2_CB = PAR.USR_Age_Value_2_B;

 // PAR.Age $ Due - Aging 3 - CB = PAR.USR Age Value 3 B
 PAR.Age_Due_Aging_3_CB = PAR.USR_Age_Value_3_B;

 // PAR.Age $ Due - Aging 4 - CB = PAR.USR Age Value 4 B
 PAR.Age_Due_Aging_4_CB = PAR.USR_Age_Value_4_B;

 // PAR.Age $ Due - Aging 5 - CB = PAR.USR Age Value 5 B
 PAR.Age_Due_Aging_5_CB = PAR.USR_Age_Value_5_B;

 // PAR.Age $ Due-Current-W/O CB = PAR.USR Age Current
 PAR.Age_Due_Current_W_O_CB = PAR.USR_Age_Current;

 // PAR.Age $ Due-Aging 1-W/O CB = PAR.USR Age Value 1
 PAR.Age_Due_Aging_1_W_O_CB = PAR.USR_Age_Value_1;

 // PAR.Age $ Due-Aging 2-W/O CB = PAR.USR Age Value 2
 PAR.Age_Due_Aging_2_W_O_CB = PAR.USR_Age_Value_2;

 // PAR.Age $ Due-Aging 3-W/O CB = PAR.USR Age Value 3
 PAR.Age_Due_Aging_3_W_O_CB = PAR.USR_Age_Value_3;

 // PAR.Age $ Due-Aging 4-W/O CB = PAR.USR Age Value 4
 PAR.Age_Due_Aging_4_W_O_CB = PAR.USR_Age_Value_4;

 // PAR.Age $ Due-Aging 5-W/O CB = PAR.USR Age Value 5
 PAR.Age_Due_Aging_5_W_O_CB = PAR.USR_Age_Value_5;

 ENDDO;

 //?***** Change Log and Comments
 //?** 12/01/2006 LJB PK0039
 //?** A/R aging info is now in a file - retrieve from there
 //?*****
}


ENDIF;

// CUR.Company Number = DB1.Company Number
CUR.Company_Number = DB1.Company_Number;

//?USER: Process after print of detail format

// COMPUTE:TOTAL AMOUNT
NXT.Total_Amount = ( ( ( ( ( ( NXT.Total_Amount + CUR.Age_$_Due_Curr_CB_9_2 )                      +
+ CUR.Age_Due_Aging_1_CB ) + CUR.Age_Due_Aging_2_CB ) + CUR.Age_Due_Aging_3_CB )                  +
+ CUR.Age_Due_Aging_4_CB ) + CUR.Age_Due_Aging_5_CB ) + CUR.USR_Credit_Amount;

NXT.USR_Age_Current_A = SUM(CUR.Age_$_Due_Curr_CB_9_2);

NXT.USR_Age_Value_1_A = SUM(CUR.Age_Due_Aging_1_CB);

NXT.USR_Age_Value_2_A = SUM(CUR.Age_Due_Aging_2_CB);

NXT.USR_Age_Value_4_A = SUM(CUR.Age_Due_Aging_4_CB);

NXT.USR_Age_Value_3_A = SUM(CUR.Age_Due_Aging_3_CB);

NXT.USR_Age_Value_5_A = SUM(CUR.Age_Due_Aging_5_CB);

NXT.USR_Age_Value_5_C = SUM(CUR.USR_Credit_Amount);

//?USER: Print required level totals

// SUPPRESSED PRINT Invoice Number totals format

// SUPPRESSED PRINT Invoice Suffix totals format

CASE;

IF NEW AR_Customer_Number;
//?** Use a function that selects just the Company Number records
//?** if it is passed in from the screen or selects ALL records for
//?** this Customer from all companies if no company number is passed
//?** in. Be careful if changes are made to use the correct Co#.
//?** Apply credit
CASE;

// IF PAR.Include Credit Memos is Yes
IF PAR.Include_Credit_Memos = 'Y';

//?** Use the Aging Code retrieved for the headings
EXECUTE FUNCTION(RTV CLC Age Inv-Cust/CoRT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1787322;
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Age_$_Due_Curr_CB_9_2);
PARAMETER(CUR.Age_Due_Aging_1_CB);
PARAMETER(CUR.Age_Due_Aging_2_CB);
PARAMETER(CUR.Age_Due_Aging_3_CB);
PARAMETER(CUR.Age_Due_Aging_4_CB);
PARAMETER(CUR.Age_Due_Aging_5_CB);
PARAMETER(WRK.Age_Due_Current_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_1_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_2_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_3_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_4_W_O_CB);
PARAMETER(WRK.Age_Due_Aging_5_W_O_CB);
PARAMETER(PAR.USR_Company_Number);
PARAMETER(PAR.A_R_Aging_Code);
{
 //?USER: Initialize routine

 //?Initialize Neither Parameters.
 DO;

 // PAR.USR Age Current = CND.equal to zero
 PAR.USR_Age_Current = *ZERO;

 // PAR.USR Age Value 1 = CND.equal to zero
 PAR.USR_Age_Value_1 = *ZERO;

 // PAR.USR Age Value 2 = CND.equal to zero
 PAR.USR_Age_Value_2 = *ZERO;

 // PAR.USR Age Value 3 = CND.equal to zero
 PAR.USR_Age_Value_3 = *ZERO;

 // PAR.USR Age Value 4 = CND.equal to zero
 PAR.USR_Age_Value_4 = *ZERO;

 // PAR.USR Age Value 5 = CND.equal to zero
 PAR.USR_Age_Value_5 = *ZERO;

 // PAR.USR Age Current A = CND.equal to zero
 PAR.USR_Age_Current_A = *ZERO;

 // PAR.USR Age Value 1 A = CND.equal to zero
 PAR.USR_Age_Value_1_A = *ZERO;

 // PAR.USR Age Value 2 A = CND.equal to zero
 PAR.USR_Age_Value_2_A = *ZERO;

 // PAR.USR Age Value 3 A = CND.equal to zero
 PAR.USR_Age_Value_3_A = *ZERO;

 // PAR.USR Age Value 4 A = CND.equal to zero
 PAR.USR_Age_Value_4_A = *ZERO;

 // PAR.USR Age Value 5 A = CND.equal to zero
 PAR.USR_Age_Value_5_A = *ZERO;

 // PAR.USR Age Current B = CND.equal to zero
 PAR.USR_Age_Current_B = *ZERO;

 // PAR.USR Age Value 1 B = CND.equal to zero
 PAR.USR_Age_Value_1_B = *ZERO;

 // PAR.USR Age Value 2 B = CND.equal to zero
 PAR.USR_Age_Value_2_B = *ZERO;

 // PAR.USR Age Value 3 B = CND.equal to zero
 PAR.USR_Age_Value_3_B = *ZERO;

 // PAR.USR Age Value 4 B = CND.equal to zero
 PAR.USR_Age_Value_4_B = *ZERO;

 // PAR.USR Age Value 5 B = CND.equal to zero
 PAR.USR_Age_Value_5_B = *ZERO;

 // PAR.USR Total Credit Amount = CND.Zero
 PAR.USR_Total_Credit_Amount = *ZERO;

 ENDDO;

 //?Retrieve Aging Ranges.
 DO;

 //?** Retrieve aging days from new file    12/01/2006 LJB
 EXECUTE FUNCTION(RTV A/R Aging Control  RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1800594;
 PARAMETER(PAR.A_R_Aging_Code);
 PARAMETER(PAR.A_R_Aging_Days_1);
 PARAMETER(PAR.A_R_Aging_Days_2);
 PARAMETER(PAR.A_R_Aging_Days_3);
 PARAMETER(PAR.A_R_Aging_Days_4);
 PARAMETER(WRK.Age_by_Trans_or_Due_Date);
 PARAMETER(WRK.Default_Y_N);
 PARAMETER(WRK.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDDO;

 //?***** Change Log and Comments
 DO;

 //?*****
 //?** 12/01/2006 LJB PK0039
 //?** Change retrieve of aging info from the company control to the
 //?** new A/R Aging Control file. Use the code passed in.
 //?*****
 ENDDO;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?** Test the Company# that was passed in from the prompt screen
 CASE;

 // IF PAR.USR Company Number is not equal to zero
 IF PAR.USR_Company_Number <> *ZERO;

 // AND DB1.Company Number NE PAR.USR Company Number
 AND DB1.Company_Number <> PAR.USR_Company_Number;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?** Process only selected records
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 CASE;

 // IF DB1.Remaining Balance Due is not equal to zeros
 IF DB1.Remaining_Balance_Due <> *ZERO;

 //?** Sum A/R Cust Invoices with a Remaining Bal.(IN,DM)(CB)(CM,OA)
 DO;

 // PAR.Days Past Due  USR = JOB.*Job date - DB1.Due Date *DAYS
 PAR.Days_Past_Due_USR = DURATION(JOB.*Job_date DB1.Due_Date 'DY' 1111111 'NONE' 'N' 1);

 CASE;

 // IF PAR.Days Past Due  USR is <= Zero
 IF PAR.Days_Past_Due_USR <= *ZERO;

 //?** Current is in current
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Current);
 PARAMETER(PAR.USR_Age_Current_A);
 PARAMETER(PAR.USR_Age_Current_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 1
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_1;

 //?** Past Due Period 1 is in USR Age Value 1x
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_1);
 PARAMETER(PAR.USR_Age_Value_1_A);
 PARAMETER(PAR.USR_Age_Value_1_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 2
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_2;

 //?** Past Due Period 2 is in Usr Age Value 2x
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_2);
 PARAMETER(PAR.USR_Age_Value_2_A);
 PARAMETER(PAR.USR_Age_Value_2_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 3
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_3;

 //?** Past Due Period 3 USR Age Value 3x
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_3);
 PARAMETER(PAR.USR_Age_Value_3_A);
 PARAMETER(PAR.USR_Age_Value_3_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 4
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_4;

 //?** Past Due Period 4 is in USR Age Value 4x
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_4);
 PARAMETER(PAR.USR_Age_Value_4_A);
 PARAMETER(PAR.USR_Age_Value_4_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Past Due Period 5 is in USR Age Value 5x
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_5);
 PARAMETER(PAR.USR_Age_Value_5_A);
 PARAMETER(PAR.USR_Age_Value_5_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 ENDIF;

 ENDDO;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 //?Apply Credits.
 DO;

 //?*** Save total credit amount for later. ***
 // PAR.Save Total Credit Amt USR = PAR.USR Total Credit Amount
 PAR.Save_Total_Credit_Amt_USR = PAR.USR_Total_Credit_Amount;

 //?*** Apply credits to oldest dollars first. (without CB) ***
 //?Start by Applying Credit to Bucket 5.
 CASE;

 // IF PAR.USR Age Value 5 GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_5 >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 5 = PAR.USR Age Value 5 - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_5 = PAR.USR_Age_Value_5 - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Start by Applying Credit to Bucket 5.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 5
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_5;

 // PAR.USR Age Value 5 = CON.*ZERO
 PAR.USR_Age_Value_5 = *ZERO;

 //?Apply Remaining Credit to Bucket 4.
 CASE;

 // IF PAR.USR Age Value 4 GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_4 >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 4 = PAR.USR Age Value 4 - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_4 = PAR.USR_Age_Value_4 - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 4.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 4
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_4;

 // PAR.USR Age Value 4 = CON.*ZERO
 PAR.USR_Age_Value_4 = *ZERO;

 //?Apply Remaining Credit to Bucket 3.
 CASE;

 // IF PAR.USR Age Value 3 GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_3 >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 3 = PAR.USR Age Value 3 - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_3 = PAR.USR_Age_Value_3 - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 3.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 3
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_3;

 // PAR.USR Age Value 3 = CON.*ZERO
 PAR.USR_Age_Value_3 = *ZERO;

 //?Apply Remaining Credit to Bucket 2.
 CASE;

 // IF PAR.USR Age Value 2 GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_2 >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 2 = PAR.USR Age Value 2 - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_2 = PAR.USR_Age_Value_2 - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 2.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 2
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_2;

 // PAR.USR Age Value 2 = CON.*ZERO
 PAR.USR_Age_Value_2 = *ZERO;

 //?Apply Remaining Credit to Bucket 1.
 CASE;

 // IF PAR.USR Age Value 1 GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_1 >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 1 = PAR.USR Age Value 1 - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_1 = PAR.USR_Age_Value_1 - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 1.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 1
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_1;

 // PAR.USR Age Value 1 = CON.*ZERO
 PAR.USR_Age_Value_1 = *ZERO;

 // PAR.USR Age Current = PAR.USR Age Current - PAR.USR Total Credit Amount
 PAR.USR_Age_Current = PAR.USR_Age_Current - PAR.USR_Total_Credit_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?*** Reset total credit amount. ***
 // PAR.USR Total Credit Amount = PAR.Save Total Credit Amt USR
 PAR.USR_Total_Credit_Amount = PAR.Save_Total_Credit_Amt_USR;

 //?*** Apply credits to oldest dollars first. (with CB) ***
 //?Start by Applying Credit to Bucket 5.
 CASE;

 // IF PAR.USR Age Value 5 B GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_5_B >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 5 B = PAR.USR Age Value 5 B - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_5_B = PAR.USR_Age_Value_5_B - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Start by Applying Credit to Bucket 5.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 5 B
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_5_B;

 // PAR.USR Age Value 5 B = CON.*ZERO
 PAR.USR_Age_Value_5_B = *ZERO;

 //?Apply Remaining Credit to Bucket 4.
 CASE;

 // IF PAR.USR Age Value 4 B GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_4_B >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 4 B = PAR.USR Age Value 4 B - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_4_B = PAR.USR_Age_Value_4_B - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 4.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 4
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_4_B;

 // PAR.USR Age Value 4 B = CON.*ZERO
 PAR.USR_Age_Value_4_B = *ZERO;

 //?Apply Remaining Credit to Bucket 3.
 CASE;

 // IF PAR.USR Age Value 3 B GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_3_B >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 3 B = PAR.USR Age Value 3 B - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_3_B = PAR.USR_Age_Value_3_B - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 3.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 3
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_3_B;

 // PAR.USR Age Value 3 B = CON.*ZERO
 PAR.USR_Age_Value_3_B = *ZERO;

 //?Apply Remaining Credit to Bucket 2.
 CASE;

 // IF PAR.USR Age Value 2 B GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_2_B >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 2 B = PAR.USR Age Value 2 B - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_2_B = PAR.USR_Age_Value_2_B - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 2.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 2
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_2_B;

 // PAR.USR Age Value 2 B = CON.*ZERO
 PAR.USR_Age_Value_2_B = *ZERO;

 //?Apply Remaining Credit to Bucket 1.
 CASE;

 // IF PAR.USR Age Value 1 B GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_1_B >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 1 B = PAR.USR Age Value 1 B - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_1_B = PAR.USR_Age_Value_1_B - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 1.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 1
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_1_B;

 // PAR.USR Age Value 1 B = CON.*ZERO
 PAR.USR_Age_Value_1_B = *ZERO;

 // PAR.USR Age Current B = PAR.USR Age Current B - PAR.USR Total Credit Amount
 PAR.USR_Age_Current_B = PAR.USR_Age_Current_B - PAR.USR_Total_Credit_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDDO;

 //?Load Output Parameters.
 DO;

 // PAR.Age $ Due - Current - CB = PAR.USR Age Current B
 PAR.Age_Due_Current_CB = PAR.USR_Age_Current_B;

 // PAR.Age $ Due - Aging 1 - CB = PAR.USR Age Value 1 B
 PAR.Age_Due_Aging_1_CB = PAR.USR_Age_Value_1_B;

 // PAR.Age $ Due - Aging 2 - CB = PAR.USR Age Value 2 B
 PAR.Age_Due_Aging_2_CB = PAR.USR_Age_Value_2_B;

 // PAR.Age $ Due - Aging 3 - CB = PAR.USR Age Value 3 B
 PAR.Age_Due_Aging_3_CB = PAR.USR_Age_Value_3_B;

 // PAR.Age $ Due - Aging 4 - CB = PAR.USR Age Value 4 B
 PAR.Age_Due_Aging_4_CB = PAR.USR_Age_Value_4_B;

 // PAR.Age $ Due - Aging 5 - CB = PAR.USR Age Value 5 B
 PAR.Age_Due_Aging_5_CB = PAR.USR_Age_Value_5_B;

 // PAR.Age $ Due-Current-W/O CB = PAR.USR Age Current
 PAR.Age_Due_Current_W_O_CB = PAR.USR_Age_Current;

 // PAR.Age $ Due-Aging 1-W/O CB = PAR.USR Age Value 1
 PAR.Age_Due_Aging_1_W_O_CB = PAR.USR_Age_Value_1;

 // PAR.Age $ Due-Aging 2-W/O CB = PAR.USR Age Value 2
 PAR.Age_Due_Aging_2_W_O_CB = PAR.USR_Age_Value_2;

 // PAR.Age $ Due-Aging 3-W/O CB = PAR.USR Age Value 3
 PAR.Age_Due_Aging_3_W_O_CB = PAR.USR_Age_Value_3;

 // PAR.Age $ Due-Aging 4-W/O CB = PAR.USR Age Value 4
 PAR.Age_Due_Aging_4_W_O_CB = PAR.USR_Age_Value_4;

 // PAR.Age $ Due-Aging 5-W/O CB = PAR.USR Age Value 5
 PAR.Age_Due_Aging_5_W_O_CB = PAR.USR_Age_Value_5;

 ENDDO;

}


ENDIF;

// Print A/R Customer Number totals format
PRINT A/R Customer Number totals format;

ENDIF;

