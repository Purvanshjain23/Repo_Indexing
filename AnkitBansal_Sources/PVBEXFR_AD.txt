// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PVBEXFR
// ?Date: 14.08.2025 Time: 03:51:52
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Validation / Reconcile AS400 Inventory.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Upd Proc 846 Whs InvInqRT) TYPE(RTVOBJ) FILE(ECP080)           AC2148708;
{
 //?USER: Initialize routine

 // LCL.Email Subject USR = CONCAT(CON.EDI 846 Error-Inv Reconci,CON.le:,CON.*ZERO)
 LCL.Email_Subject_USR = 'EDI 846 Error-Inv Reconci' + 'le:' (0);

 //?USER: Process Data record

 //?Data Validation.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Initialize.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI-Record Processed = CND.Not Processed
 PAR.EDI_Record_Processed = 'N';

 // PAR.EDI 846 Error Desc USR = CND.Not entered
 PAR.EDI_846_Error_Desc_USR = *BLANK;

 // PAR.Email Subject USR = CND.Not entered
 PAR.Email_Subject_USR = *BLANK;

 ENDIF;

 //?Validate Trade Partner/Warehouse Code.
 CASE;

 // IF DB1.TRADE PARTNER CODE is Not Entered
 IF DB1.TRADE_PARTNER_CODE = *BLANK;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 846 Error Desc USR = CONCAT(CON.Invalid Trade Partner,CON.code.,CON.1)
 PAR.EDI_846_Error_Desc_USR = 'Invalid Trade Partner' + 'code.' (1);

 //?Validate Trade Partner/Warehouse Code.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Warehouse/Company RT) TYPE(RTVOBJ) FILE(ECP082)            AC2148711;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Company_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.N101-NAME TYPE CODE is Warehouse
  IF DB1.N101_NAME_TYPE_CODE = 'WH';

  // Execute function EUS TrimL Warehouse CdeUS.
  EXECUTE FUNCTION(EUS TrimL Warehouse CdeUS) TYPE(EXCUSRSRC) ('PUGHUFR');
  PARAMETER(DB1.N104_ID_CODE);
  PARAMETER(PAR.Warehouse_Code);
  {
   * Trim Left Warehouse Code.
   c                   eval      #OAJCD = %triml(#IDCDE)
   *
  }

  //?Get EDI WHS INterchange override company 5/13/21 RMC if entered get acctCo
  EXECUTE FUNCTION(Rtv EDI Company # ovrd RT) TYPE(RTVOBJ) FILE(PNG0REP)          AC2197166;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('WHSRST');
  PARAMETER(LCL.EDI_Company_#_940_846_947);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.EDI Company # 940 846 947 is Entered
  IF LCL.EDI_Company_#_940_846_947 > 0;

  EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // IF DB1.N101-NAME TYPE CODE is Company Number
  IF DB1.N101_NAME_TYPE_CODE = 'B5';

  // AND DB1.N104-ID CODE is Guymon 360
  AND ( DB1.N104_ID_CODE = '360';

  // OR DB1.N104-ID CODE is Sioux City 440
  OR DB1.N104_ID_CODE = '440';

  // OR DB1.N104-ID CODE is Triumph 960
  OR DB1.N104_ID_CODE = '960' );

  //?Hard Coding Company Number.
  CASE;

  // IF DB1.N104-ID CODE is Guymon 360
  IF DB1.N104_ID_CODE = '360';

  // PAR.Company Number = CND.Guymon
  PAR.Company_Number = 360;

  //?Hard Coding Company Number.
  // IF DB1.N104-ID CODE is Sioux City 440
  IF DB1.N104_ID_CODE = '440';

  // PAR.Company Number = CND.Sioux City
  PAR.Company_Number = 440;

  //?Hard Coding Company Number.
  // IF DB1.N104-ID CODE is Triumph 960
  IF DB1.N104_ID_CODE = '960';

  // PAR.Company Number = CND.St. Joseph
  PAR.Company_Number = 960;

  ENDIF;

  ENDIF;

 }

 //?Ensure Warehouse/Company is Entered & Trade Partner Matches.
 CASE;

 // IF LCL.Warehouse Code is Blanks
 IF LCL.Warehouse_Code = *BLANK;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 846 Error Desc USR = CON.Warehouse Code is blank.
 PAR.EDI_846_Error_Desc_USR = 'Warehouse Code is blank.';

 //?Ensure Warehouse/Company is Entered & Trade Partner Matches.
 // IF LCL.Company Number is Equal to zero
 IF LCL.Company_Number = *ZERO;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 846 Error Desc USR = CON.Company Number is blank.
 PAR.EDI_846_Error_Desc_USR = 'Company Number is blank.';

 //?Ensure Warehouse/Company is Entered & Trade Partner Matches.
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv WHS Interchg All  RT) TYPE(RTVOBJ) FILE(PNG0REP)           AC2138766;
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER('WHSRST');
 PARAMETER(NLL.Class_Code);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(NLL.EDI_Whs_Duns_Number);
 PARAMETER(LCL.Record_Status);
 PARAMETER(NLL.Create_Date);
 PARAMETER(NLL.Create_Time);
 PARAMETER(NLL.Create_User);
 PARAMETER(NLL.Create_Program);
 PARAMETER(NLL.Change_Date);
 PARAMETER(NLL.Change_Time);
 PARAMETER(NLL.Change_User);
 PARAMETER(NLL.Change_Program);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?EDI Warehouse Code Found?
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Trade Partner Mismatch / Not Active.
 CASE;

 // IF DB1.TRADE PARTNER CODE NE LCL.EDI Trading Partner No.
 IF DB1.TRADE_PARTNER_CODE <> LCL.EDI_Trading_Partner_No;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 846 Error Desc USR = CONCAT(CON.Invalid Trade Partner,CON.code.,CON.1)
 PAR.EDI_846_Error_Desc_USR = 'Invalid Trade Partner' + 'code.' (1);

 //?Trade Partner Mismatch / Not Active.
 // IF NOT LCL.Record Status is Active
 IF ! LCL.Record_Status = 'A';

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 846 Error Desc USR = CONCAT(CON.EDI Interchange WHSRST,CON.code is not active.,CON.1)
 PAR.EDI_846_Error_Desc_USR = 'EDI Interchange WHSRST' + 'code is not active.' (1);

 ENDIF;

 //?EDI Warehouse Code Found?
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 846 Error Desc USR = CON.Invalid Warehouse Code.
 PAR.EDI_846_Error_Desc_USR = 'Invalid Warehouse Code.';

 ENDIF;

 ENDIF;

 ENDIF;

 //?If Not in Error, Check Company/Warehouse Combination.
 CASE;

 // IF NOT PAR.EDI-Record Processed is Error
 IF ! PAR.EDI_Record_Processed = 'E';

 //?RMC s/check accounting company 4.18.19
 EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Shipping_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Company # from EDI NAM (ECP082) File Mismatch with Shipping Company.
 CASE;

 // IF LCL.Accounting Company NE LCL.Company Number
 IF LCL.Accounting_Company <> LCL.Company_Number;

 // PAR.EDI-Record Processed = CND.Error
 PAR.EDI_Record_Processed = 'E';

 // PAR.EDI 846 Error Desc USR = CONCAT(CON.Invalid Company/Warehouse,CON.combination.,CON.1)
 PAR.EDI_846_Error_Desc_USR = 'Invalid Company/Warehouse' + 'combination.' (1);

 ENDIF;

 ENDIF;

 //?If Not in Error, Check Product Code.
 CASE;

 // IF NOT PAR.EDI-Record Processed is Error
 IF ! PAR.EDI_Record_Processed = 'E';

 EXECUTE FUNCTION(Val Product Items      RT) TYPE(RTVOBJ) FILE(ECP081)           AC2148726;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(LCL.Company_Number);
 PARAMETER(PAR.EDI_Record_Processed);
 PARAMETER(PAR.EDI_846_Error_Desc_USR);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?Validate Product.
  CASE;

  // IF DB1.LN03 PRODUCT CODE is Entered
  IF DB1.LN03_PRODUCT_CODE <> *ZERO;

  EXECUTE FUNCTION(Val Company/Item Exist RT) TYPE(RTVOBJ) FILE(CABZREP)          AC2148148;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.LN03_PRODUCT_CODE);
  //?Record Found?
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Record Found?
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EDI-Record Processed = CND.Error
  PAR.EDI_Record_Processed = 'E';

  // PAR.EDI 846 Error Desc USR = CONCAT(CON.Invalid Company/Product,CON.combination.,CON.1)
  PAR.EDI_846_Error_Desc_USR = 'Invalid Company/Product' + 'combination.' (1);

  QUIT;

  ENDIF;

  //?Validate Product.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EDI-Record Processed = CND.Error
  PAR.EDI_Record_Processed = 'E';

  // PAR.EDI 846 Error Desc USR = CON.Invalid Product Number.
  PAR.EDI_846_Error_Desc_USR = 'Invalid Product Number.';

  QUIT;

  ENDIF;

  //?Validate Reference Status Code.
  CASE;

  // IF DB1.REF02 REFERENCE STATUS CD is All except AU
  IF DB1.REF02_REFERENCE_STATUS_CD = 'AL'/'AV'/*BLANK/'BL'/'HO'/'QU';

  //?was all values until AU was added to the 947 - 5/5/20 RMC
  //?Validate Reference Status Code.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EDI-Record Processed = CND.Error
  PAR.EDI_Record_Processed = 'E';

  // PAR.EDI 846 Error Desc USR = CONCAT(CON.Invalid Reference Status,CON.code.,CON.1)
  PAR.EDI_846_Error_Desc_USR = 'Invalid Reference Status' + 'code.' (1);

  QUIT;

  ENDIF;

  //?Validate Production Date.
  CASE;

  // IF DB1.DTM02 PRODUCTION DATE is Entered
  IF DB1.DTM02_PRODUCTION_DATE <> *ZERO;

  // Execute function EUS Val Production Dte US.
  EXECUTE FUNCTION(EUS Val Production Dte US) TYPE(EXCUSRSRC) ('PUGKUFR');
  PARAMETER(DB1.DTM02_PRODUCTION_DATE);
  PARAMETER(LCL.Validation_Pass_USR);
  {
   * Check Production Date is a Valid Date.
   d wkccyymmdd      S              8A
   *
   c                   eval      #OFASC = 'Y'
   c                   eval      wkccyymmdd = %char(#ICTNZ)                   Convert to Charc.
   /free
   test(de) *iso0 wkccyymmdd ;
   if %error() ;
   #OFASC = 'N' ;  // Invalid Date
   endif ;
   /end-free
   *
  }

  //?Invalid Date.
  CASE;

  // IF LCL.Validation Pass USR is No
  IF LCL.Validation_Pass_USR = 'N';

  // PAR.EDI-Record Processed = CND.Error
  PAR.EDI_Record_Processed = 'E';

  // PAR.EDI 846 Error Desc USR = CON.Invalid Production Date.
  PAR.EDI_846_Error_Desc_USR = 'Invalid Production Date.';

  QUIT;

  ENDIF;

  //?Validate Production Date.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.EDI-Record Processed = CND.Error
  PAR.EDI_Record_Processed = 'E';

  // PAR.EDI 846 Error Desc USR = CON.Invalid Production Date.
  PAR.EDI_846_Error_Desc_USR = 'Invalid Production Date.';

  QUIT;

  ENDIF;

  //?Validate Net Weight -- dont error -- send email
  CASE;

  // IF DB1.MEA03 MEASURE NET WGT is Not Entered
  IF DB1.MEA03_MEASURE_NET_WGT = *ZERO;

  // LCL.FILLER3 = CONCAT(CON.Invalid Net Weight For,CON.Product,CON.1)
  LCL.FILLER3 = 'Invalid Net Weight For' + 'Product' (1);

  // LCL.W1906 PRODUCT = CONCAT(CON.EDI 846 Error -,LCL.FILLER3,CON.1)
  LCL.W1906_PRODUCT = 'EDI 846 Error -' + LCL.FILLER3 (1);

  // LCL.Item Code Txt = CVTVAR(DB1.LN03 PRODUCT CODE)
  LCL.Item_Code_Txt = CVTVAR(DB1.LN03_PRODUCT_CODE);

  //?Format Email Subject & Message and Send Email.
  // LCL.Email Subject USR = CONCAT(CON.EDI 846 Error-Inv Reconci,CON.le:,CON.*ZERO)
  LCL.Email_Subject_USR = 'EDI 846 Error-Inv Reconci' + 'le:' (0);

  // LCL.EDI Surrogate Nbr Txt USR = CVTVAR(DB1.EDI SURROGATE NUMBER)
  LCL.EDI_Surrogate_Nbr_Txt_USR = CVTVAR(DB1.EDI_SURROGATE_NUMBER);

  // Execute function EUS TrimL Surrogate #  US.
  EXECUTE FUNCTION(EUS TrimL Surrogate #  US) TYPE(EXCUSRSRC) ('PUGGUFR');
  PARAMETER(LCL.EDI_Surrogate_Nbr_Txt_USR);
  {
   * Trim Left EDI Surrogate Number; Suppress Leading Zero.
   c                   eval      #BIWU1 = %triml(#BIWU1 : '0 ')
   *
  }

  // LCL.Email Subject USR = CONCAT(LCL.Email Subject USR,CON.Surrogate,CON.1)
  LCL.Email_Subject_USR = LCL.Email_Subject_USR + 'Surrogate' (1);

  // LCL.Text usr 14 = CONCAT(LCL.EDI Surrogate Nbr Txt USR,PAR.Warehouse Code,CON.1)
  LCL.Text_usr_14 = LCL.EDI_Surrogate_Nbr_Txt_USR + PAR.Warehouse_Code (1);

  // LCL.Email Subject USR = CONCAT(LCL.Email Subject USR,LCL.Text usr 14,CON.1)
  LCL.Email_Subject_USR = LCL.Email_Subject_USR + LCL.Text_usr_14 (1);

  // LCL.Email Message USR = CONCAT(LCL.W1906 PRODUCT,LCL.Item Code Txt,CON.1)
  LCL.Email_Message_USR = LCL.W1906_PRODUCT + LCL.Item_Code_Txt (1);

  //?Default Company to 360 if Zero.
  CASE;

  // IF LCL.Company Number is Equal to zero
  IF LCL.Company_Number = *ZERO;

  // LCL.Company Number = CND.Guymon
  LCL.Company_Number = 360;

  ENDIF;

  EXECUTE FUNCTION(Exc ESNDMAIL Generic  IF) TYPE(EXCINTFUN)                      AC2144041;
  PARAMETER(LCL.Company_Number);
  PARAMETER('EDI846ERR');
  PARAMETER(LCL.Email_Subject_USR);
  PARAMETER(LCL.Email_Message_USR);
  {
   //?Execute internal function

   //?Execute ESNDMAIL to Send Email Message.
   EXECUTE FUNCTION(RTV Alpha Value 2     RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2134765;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Company_Value_Code);
   PARAMETER(LCL.Email_Address);
   {
    //?USER: Initialize routine

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Email Address is Entered
   IF LCL.Email_Address <> *BLANK;

   // Call program Exc ESNDMAIL Generic  CL.
   CALL PROGRAM(Exc ESNDMAIL Generic  CL) ('PUE8UPC');
   PARAMETER(LCL.Email_Address);
   PARAMETER(PAR.Email_Subject_USR);
   PARAMETER(PAR.Email_Message_USR);

   ENDIF;

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?Validation Passed Then Update for Inventory Restoration.
 CASE;

 // IF NOT PAR.EDI-Record Processed is Error
 IF ! PAR.EDI_Record_Processed = 'E';

 //?inventory is by shipping company
 EXECUTE FUNCTION(Upd Inv Rest fm EDI 846RT) TYPE(RTVOBJ) FILE(ECP081)           AC2148755;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Code_SavUsr);
 PARAMETER(PAR.Shipping_Company_USR);
 {
  //?USER: Initialize routine

  // Execute function Get System Date       US.
  EXECUTE FUNCTION(Get System Date       US) TYPE(EXCUSRSRC) ('PUGLUFR');
  PARAMETER(LCL.System_Date_Nbr_USR);
  {
   * Get System Date - CCYYMMDD
   c                   eval      #OC0NZ = *date
  }

  // PAR.PFS Transaction Date = LCL.System Date Nbr USR
  PAR.PFS_Transaction_Date = LCL.System_Date_Nbr_USR;

  //?dont zero the trans seq - needs to increment for all 4.25.19 RMC
  // Call program RTV System Date/Time   UP.
  CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
  PARAMETER(LCL.Current_System_Date);
  PARAMETER(LCL.Current_System_Time);

  // PAR.Job Time = LCL.Current System Time
  PAR.Job_Time = LCL.Current_System_Time;

  // PAR.Job Time User = PAR.Job Time + CON.1 *MINUTES
  PAR.Job_Time_User = TIMEINCR(PAR.Job_Time 1 'MN');

  // PAR.Warehouse Code SavUsr = CND.Blanks
  PAR.Warehouse_Code_SavUsr = *BLANK;

  // PAR.Shipping Company USR = CND.Equal to zero
  PAR.Shipping_Company_USR = *ZERO;

  //?USER: Process Data record

  // PAR.PFS Transaction Seq = PAR.PFS Transaction Seq + CON.1
  PAR.PFS_Transaction_Seq = PAR.PFS_Transaction_Seq + 1;

  CASE;

  // IF DB1.REF02 REFERENCE STATUS CD is Available
  IF DB1.REF02_REFERENCE_STATUS_CD = 'AV';

  // OR DB1.REF02 REFERENCE STATUS CD is Available (blank)
  OR DB1.REF02_REFERENCE_STATUS_CD = *BLANK;

  // OR DB1.REF02 REFERENCE STATUS CD is Hold
  OR DB1.REF02_REFERENCE_STATUS_CD = 'HO';

  //?RMC Added "HO" particularily for Nor-am   1/14/19
  CASE;

  // IF DB1.MEA03 MEASURE NET WGT is Not Entered
  IF DB1.MEA03_MEASURE_NET_WGT = *ZERO;

  EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.LN03_PRODUCT_CODE);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Quality_Level);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.MEA03 MEASURE NET WGT = LCL.Unit Weight * DB1.QTY02 QUANTITY *
  LCL.MEA03_MEASURE_NET_WGT = LCL.Unit_Weight * DB1.QTY02_QUANTITY;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.MEA03 MEASURE NET WGT = DB1.MEA03 MEASURE NET WGT
  LCL.MEA03_MEASURE_NET_WGT = DB1.MEA03_MEASURE_NET_WGT;

  ENDIF;

  //?MANIPULATE THE WAREHOUSES IF NA3 OR NA5 ELSE WRITE RCD  RMC 4.23.19 R14364
  CASE;

  // IF PAR.Warehouse Code is NA3 Nor Am-Fresh-360
  IF PAR.Warehouse_Code = 'NA3';

  // OR PAR.Warehouse Code is NA5 Nor Am-Fresh-960
  OR PAR.Warehouse_Code = 'NA5';

  // LCL.Warehouse Code = PAR.Warehouse Code
  LCL.Warehouse_Code = PAR.Warehouse_Code;

  // LCL.Shipping Company Number = PAR.Company Number
  LCL.Shipping_Company_Number = PAR.Company_Number;

  // LCL.Job Time = PAR.Job Time
  LCL.Job_Time = PAR.Job_Time;

  //?change to item dft..item not active for all companies!   10/16/19 RMC
  EXECUTE FUNCTION(Rtv Sold 100% FZ      RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC2177449;
  PARAMETER(DB1.LN03_PRODUCT_CODE);
  PARAMETER(LCL.Sold_100_Percent_Frozen);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Change 100% frozen product in NA3 to NA8 (101257 = No longer 100%)
  CASE;

  // IF PAR.Warehouse Code is NA3 Nor Am-Fresh-360
  IF PAR.Warehouse_Code = 'NA3';

  //?W101257 DN 06/20/22-Removed test: LCL.Sold 100% Frozen is yes
  // LCL.Warehouse Code = CND.NA8 Nor Am-Frozen-360
  LCL.Warehouse_Code = 'NA8';

  // PAR.Warehouse Code SavUsr = CND.NA8 Nor Am-Frozen-360
  PAR.Warehouse_Code_SavUsr = 'NA8';

  EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
  PARAMETER(PAR.Warehouse_Code_SavUsr);
  PARAMETER(PAR.Shipping_Company_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.Shipping Company Number = PAR.Shipping Company USR
  LCL.Shipping_Company_Number = PAR.Shipping_Company_USR;

  ENDIF;

  //?Change 100% frozen product in NA5 to NA6
  CASE;

  // IF PAR.Warehouse Code is NA5 Nor Am-Fresh-960
  IF PAR.Warehouse_Code = 'NA5';

  // AND LCL.Sold 100% Frozen is yes
  AND LCL.Sold_100_Percent_Frozen = 'Y';

  // LCL.Warehouse Code = CND.NA6 Nor Am-Frozen-960
  LCL.Warehouse_Code = 'NA6';

  // PAR.Warehouse Code SavUsr = CND.NA6 Nor Am-Frozen-960
  PAR.Warehouse_Code_SavUsr = 'NA6';

  EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
  PARAMETER(PAR.Warehouse_Code_SavUsr);
  PARAMETER(PAR.Shipping_Company_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.Shipping Company Number = PAR.Shipping Company USR
  LCL.Shipping_Company_Number = PAR.Shipping_Company_USR;

  ENDIF;

  EXECUTE FUNCTION(Crt PFS Inventory Rest CR) TYPE(CRTOBJ) FILE(PPB0CPP)          AC1748442;
  PARAMETER(LCL.Shipping_Company_Number);
  PARAMETER(PAR.PFS_Transaction_Date);
  PARAMETER(LCL.Job_Time);
  PARAMETER(PAR.PFS_Transaction_Seq);
  PARAMETER(0);
  PARAMETER(DB1.LN03_PRODUCT_CODE);
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(*ZERO);
  PARAMETER(DB1.DTM02_PRODUCTION_DATE);
  PARAMETER(DB1.DTM02_PRODUCTION_DATE);
  PARAMETER(*ZERO);
  PARAMETER(DB1.QTY02_QUANTITY);
  PARAMETER(LCL.MEA03_MEASURE_NET_WGT);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.PFS_Transaction_Date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  //?MANIPULATE THE WAREHOUSES IF NA3 OR NA5 ELSE WRITE RCD  RMC 4.23.19 R14364
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Crt PFS Inventory Rest CR) TYPE(CRTOBJ) FILE(PPB0CPP)          AC1748442;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.PFS_Transaction_Date);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.PFS_Transaction_Seq);
  PARAMETER(0);
  PARAMETER(DB1.LN03_PRODUCT_CODE);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(*ZERO);
  PARAMETER(DB1.DTM02_PRODUCTION_DATE);
  PARAMETER(DB1.DTM02_PRODUCTION_DATE);
  PARAMETER(*ZERO);
  PARAMETER(DB1.QTY02_QUANTITY);
  PARAMETER(LCL.MEA03_MEASURE_NET_WGT);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.PFS_Transaction_Date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?Make PFS Inv Rest rcd for NA3 or  NA5 if it came in 846 but no itms stayed
  CASE;

  // IF PAR.Warehouse Code is NA3 Nor Am-Fresh-360
  IF PAR.Warehouse_Code = 'NA3';

  // OR PAR.Warehouse Code is NA5 Nor Am-Fresh-960
  OR PAR.Warehouse_Code = 'NA5';

  //?we need this so Physical count control will be made, and proc will
  //? remove inventory if no longer there.
  EXECUTE FUNCTION(Rtv Total Records-dt  RT) TYPE(RTVOBJ) FILE(PPB0CPP)           AC2175126;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PFS_Transaction_Date);
  PARAMETER(PAR.Job_Time);
  PARAMETER(LCL.Count_Records_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.PFS Process Status is Not Processed
   IF DB1.PFS_Process_Status = *ZERO;

   // PAR.Count Records        USR = PAR.Count Records        USR + CON.1
   PAR.Count_Records_USR = PAR.Count_Records_USR + 1;

   ENDIF;

  }

  CASE;

  // IF LCL.Count Records        USR is Zero
  IF LCL.Count_Records_USR = *ZERO;

  //?rtv 1st item that has on hand inventory - use it to make a pfs rest rcd
  EXECUTE FUNCTION(RTV On Hand Qty-1stItmRT) TYPE(RTVOBJ) FILE(CAB0REP)           AC2175127;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.On Hand U/M1 Summary is Greater than zero
   IF DB1.On_Hand_UOM1_Summary > *ZERO;

   // PAR.Item Code = DB1.Item Code
   PAR.Item_Code = DB1.Item_Code;

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.Item Code is Entered
  IF LCL.Item_Code <> *ZERO;

  // PAR.PFS Transaction Seq = PAR.PFS Transaction Seq + CON.1
  PAR.PFS_Transaction_Seq = PAR.PFS_Transaction_Seq + 1;

  EXECUTE FUNCTION(Crt PFS Inventory Rest CR) TYPE(CRTOBJ) FILE(PPB0CPP)          AC1748442;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.PFS_Transaction_Date);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.PFS_Transaction_Seq);
  PARAMETER(0);
  PARAMETER(LCL.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(*ZERO);
  PARAMETER(DB1.DTM02_PRODUCTION_DATE);
  PARAMETER(DB1.DTM02_PRODUCTION_DATE);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.PFS_Transaction_Date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  ENDIF;

  ENDIF;

  ENDIF;

  // Call program Exc Upd EDI OnHn w/int XF.
  CALL PROGRAM(Exc Upd EDI OnHn w/int XF) ('PUJBXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.PFS_Transaction_Date);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.PFS_Transaction_Seq);

  CASE;

  // IF PAR.Warehouse Code SavUsr is Not Blanks
  IF PAR.Warehouse_Code_SavUsr <> *BLANK;

  //?RMC CHG SHIPPING CO.. WAS USING WRONG ONE 4.14.20
  // Call program Exc Upd EDI OnHn w/int XF.
  CALL PROGRAM(Exc Upd EDI OnHn w/int XF) ('PUJBXFR');
  PARAMETER(PAR.Warehouse_Code_SavUsr);
  PARAMETER(LCL.Shipping_Company_Number);
  PARAMETER(LCL.Shipping_Company_Number);
  PARAMETER(PAR.PFS_Transaction_Date);
  PARAMETER(PAR.Job_Time_User);
  PARAMETER(PAR.PFS_Transaction_Seq);

  ENDIF;

 }

 // Call program PRC EDI 846 Inv Rest   XF.
 CALL PROGRAM(PRC EDI 846 Inv Rest   XF) ('PUGNXFR');
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.Warehouse_Code);

 CASE;

 // IF PAR.Warehouse Code SavUsr is Not Blanks
 IF PAR.Warehouse_Code_SavUsr <> *BLANK;

 //?CHG TO PAR.SHIPPING CO   4.14.20 RMC
 // Call program PRC EDI 846 Inv Rest   XF.
 CALL PROGRAM(PRC EDI 846 Inv Rest   XF) ('PUGNXFR');
 PARAMETER(PAR.Shipping_Company_USR);
 PARAMETER(PAR.Warehouse_Code_SavUsr);

 ENDIF;

 // PAR.EDI-Record Processed = CND.Processed
 PAR.EDI_Record_Processed = 'Y';

 // Call program Rtv Alpha Value       XF.
 CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
 PARAMETER(LCL.Company_Number);
 PARAMETER('EDI846CMP');
 PARAMETER(LCL.Email_Address);

 // LCL.Message Line 1 = CONCAT(CON.EDI 846 Raw Data For,LCL.Warehouse Code,CON.1)
 LCL.Message_Line_1 = 'EDI 846 Raw Data For' + LCL.Warehouse_Code (1);

 // Execute command - 'EXECUTE SQL VIEW'
 EXECUTE COMMAND(USR5091);
 PARAMETER(LCL.Email_Address);
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(LCL.Message_Line_1);

 ENDIF;

 EXECUTE FUNCTION(Chg Whs Inv Inq Adv HDRCH) TYPE(CHGOBJ) FILE(ECP080)           AC2148291;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.TRADE_PARTNER_CODE);
 PARAMETER(PAR.EDI_Record_Processed);
 PARAMETER(DB1.BIA01_Trans_Set_Purpose);
 PARAMETER(DB1.BAI02_Report_Type_Code);
 PARAMETER(DB1.BAI03_Reference_Number);
 PARAMETER(DB1.BAI04_Adjustment_Date);
 PARAMETER(DB1.BAI06_Action_Code);
 PARAMETER(DB1.BAI05_Adjustment_Time);
 //?Validation Failed, Send Email.
 CASE;

 // IF PAR.EDI-Record Processed is Error
 IF PAR.EDI_Record_Processed = 'E';

 //?Format Email Subject & Message and Send Email.
 // LCL.EDI Surrogate Nbr Txt USR = CVTVAR(DB1.EDI SURROGATE NUMBER)
 LCL.EDI_Surrogate_Nbr_Txt_USR = CVTVAR(DB1.EDI_SURROGATE_NUMBER);

 // Execute function EUS TrimL Surrogate #  US.
 EXECUTE FUNCTION(EUS TrimL Surrogate #  US) TYPE(EXCUSRSRC) ('PUGGUFR');
 PARAMETER(LCL.EDI_Surrogate_Nbr_Txt_USR);
 {
  * Trim Left EDI Surrogate Number; Suppress Leading Zero.
  c                   eval      #BIWU1 = %triml(#BIWU1 : '0 ')
  *
 }

 // PAR.Email Subject USR = CONCAT(LCL.Email Subject USR,CON.Surrogate #,CON.1)
 PAR.Email_Subject_USR = LCL.Email_Subject_USR + 'Surrogate #' (1);

 // PAR.Email Subject USR = CONCAT(PAR.Email Subject USR,LCL.EDI Surrogate Nbr Txt USR,CON.1)
 PAR.Email_Subject_USR = PAR.Email_Subject_USR + LCL.EDI_Surrogate_Nbr_Txt_USR (1);

 // LCL.Email Message USR = CONCAT(CON.EDI 846 Error -,PAR.EDI 846 Error Desc USR,CON.1)
 LCL.Email_Message_USR = 'EDI 846 Error -' + PAR.EDI_846_Error_Desc_USR (1);

 //?Default Company to 360 if Zero.
 CASE;

 // IF LCL.Company Number is Equal to zero
 IF LCL.Company_Number = *ZERO;

 // LCL.Company Number = CND.Guymon
 LCL.Company_Number = 360;

 ENDIF;

 EXECUTE FUNCTION(Exc ESNDMAIL Generic  IF) TYPE(EXCINTFUN)                      AC2144041;
 PARAMETER(LCL.Company_Number);
 PARAMETER('EDI846ERR');
 PARAMETER(PAR.Email_Subject_USR);
 PARAMETER(LCL.Email_Message_USR);
 {
  //?Execute internal function

  //?Execute ESNDMAIL to Send Email Message.
  EXECUTE FUNCTION(RTV Alpha Value 2     RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2134765;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Company_Value_Code);
  PARAMETER(LCL.Email_Address);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Email Address is Entered
  IF LCL.Email_Address <> *BLANK;

  // Call program Exc ESNDMAIL Generic  CL.
  CALL PROGRAM(Exc ESNDMAIL Generic  CL) ('PUE8UPC');
  PARAMETER(LCL.Email_Address);
  PARAMETER(PAR.Email_Subject_USR);
  PARAMETER(PAR.Email_Message_USR);

  ENDIF;

 }

 ENDIF;

}


ENDIF;

