// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POUMPVR
// ?Date: 14.08.2025 Time: 03:39:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

MOVE *ALL (To: DTL From: PAR);

//?Copy Default Values
CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

// DTL.Text USR = CON.   COPY
DTL.Text_USR = 'COPY';

// DTL.First Lvl Prod Sts USR = CND.yes
DTL.First_Lvl_Prod_Sts_USR = 'Y';

//?Copy Default Values
// IF PAR.Status Flag 1  Y/N is Yes
IF PAR.Status_Flag_1_Y_N = 'Y';

// DTL.Text USR = CON. DELETE
DTL.Text_USR = 'DELETE';

// DTL.First Lvl Prod Sts USR = CND.blank
DTL.First_Lvl_Prod_Sts_USR = *BLANK;

ENDIF;

//?USER: Validate fields

//?Copy Validation
CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

//?VAL:  To Production Date
CASE;

// IF DTL.Production Date RGF is Not Entered
IF DTL.Production_Date_RGF = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.Production_Date_RGF);

ENDIF;

//?VAL:  Copy Standard Production
CASE;

// IF DTL.First Lvl Prod Sts USR is blank
IF DTL.First_Lvl_Prod_Sts_USR = *BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.First_Lvl_Prod_Sts_USR);

//?VAL:  Copy Standard Production
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.First Lvl Prod Sts USR is yes
IF DTL.First_Lvl_Prod_Sts_USR = 'Y';

//?*
EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Production_Date_RGF);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?VAL:  Kill Day
CASE;

// IF PAR.Hog Volume USR is GT Zero
IF PAR.Hog_Volume_USR > *ZERO;

// AND LCL.Kill Day Status is no
AND LCL.Kill_Day_Status = 'N';

// Send error message - '&2 is not a Kill Day.  Cannot copy Standard Production from &1.'
ERROR(USR3207);
MSGPARM(DTL.Production_Date);
MSGPARM(DTL.Production_Date_RGF);

ENDIF;

//?VAL:  Cut Day
CASE;

// IF PAR.Hog Volume is GT Zero
IF ( PAR.Hog_Volume > *ZERO;

// AND LCL.Production Day Status is no
AND LCL.Production_Day_Status = 'N' );

// Send error message - '&2 is not a Production Day.  Cannot copy Standard Production from &1.'
ERROR(USR3208);
MSGPARM(DTL.Production_Date);
MSGPARM(DTL.Production_Date_RGF);

ENDIF;

//?*
EXECUTE FUNCTION(Val Sched Existance   RT) TYPE(RTVOBJ) FILE(PDJCCPP)           AC1372033;
PARAMETER(DTL.Company_Number);
PARAMETER('P');
PARAMETER(DTL.Production_Date_RGF);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'Production Schedule already exists.'
ERROR(USR1764);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: User defined action

//?Copy
CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

CASE;

// IF DTL.First Lvl Prod Sts USR is yes
IF DTL.First_Lvl_Prod_Sts_USR = 'Y';

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('CPYPRDDAY');
PARAMETER(*JOBD);
PARAMETER('4 00 *SECLVL');
PARAMETER(*JOBD);

// Call program Zzy Production Sched  XF.
SBMJOB;
CALL PROGRAM(Zzy Production Sched  XF) ('POUTXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Production_Type);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Production_Date_RGF);
PARAMETER(DTL.Hog_Volume_USR);
PARAMETER(DTL.Hog_Volume);
SBMJOBEND;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Upd Kill/Cut Pln 4OMS XF.
CALL PROGRAM(Upd Kill/Cut Pln 4OMS XF) ('PLDBXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Production_Date_RGF);
PARAMETER(DTL.Hog_Volume_USR);
PARAMETER(DTL.Hog_Volume);

ENDIF;

ENDIF;

//?Delete
CASE;

// IF PAR.Status Flag 1  Y/N is Yes
IF PAR.Status_Flag_1_Y_N = 'Y';

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('DELPRDDAY');
PARAMETER(*JOBD);
PARAMETER('4 00 *SECLVL');
PARAMETER(*JOBD);

// Call program Zzz Production Sched  XF.
SBMJOB;
CALL PROGRAM(Zzz Production Sched  XF) ('POUQXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Production_Type);
PARAMETER(DTL.Production_Date);
SBMJOBEND;

// Send information message - 'Job &1 has been submitted to job queue &2.'
MESSAGE(USR2685 *INFO);
MSGPARM('DLTPRDDAY');
MSGPARM(*JOBD);

ENDIF;

