// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POLTDFR
// ?Date: 14.08.2025 Time: 03:37:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('POBHUFU');
PARAMETER(12);
{
 ) find text=#SFLCTL
 ) insert
 A                                      SFLDROP(CF07)
 A* 07                                  SFLFOLD(CF07)
}


// LCL.Select Status = CND.no
LCL.Select_Status = 'N';

// LCL.Status Flag 1  Y/N = CND.No
LCL.Status_Flag_1_Y_N = 'N';

// LCL.Status Flag 2  Y/N = CND.No
LCL.Status_Flag_2_Y_N = 'N';

//?** Set condition for OCEAN or AIRFRT orders
// WRK.Reverse Image Flag USR = CND.No
WRK.Reverse_Image_Flag_USR = 'N';

//?** Set condition for Override Total Load Miles           E00207
// WRK.Change Flag USR = CND.No
WRK.Change_Flag_USR = 'N';

//?USER: Initialize subfile control

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?** Retrieve Charge Code Headings
EXECUTE FUNCTION(Rtv Edit Freight Hdg  RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627045;
PARAMETER(CTL.Charge_Code_1_USR);
PARAMETER(CTL.Charge_Code_2_USR);
PARAMETER(CTL.Charge_Code_3_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.FC Edit Sequence is One
 IF DB1.FC_Edit_Sequence = '1';

 // PAR.Charge Code 1 USR = DB1.FC Code
 PAR.Charge_Code_1_USR = DB1.FC_Code;

 // IF DB1.FC Edit Sequence is Two
 IF DB1.FC_Edit_Sequence = '2';

 // PAR.Charge Code 2 USR = DB1.FC Code
 PAR.Charge_Code_2_USR = DB1.FC_Code;

 // IF DB1.FC Edit Sequence is Three
 IF DB1.FC_Edit_Sequence = '3';

 // PAR.Charge Code 3 USR = DB1.FC Code
 PAR.Charge_Code_3_USR = DB1.FC_Code;

 ENDIF;

}


//?** Save Payment Status selector field
// LCL.LH Carrier Payment Sts = CTL.LH Carrier Payment Sts
LCL.LH_Carrier_Payment_Sts = CTL.LH_Carrier_Payment_Sts;

//?USER: Initialize subfile record from DBF record

// RCD.Rated Freight 7.2 USR = DB1.Rated Freight
RCD.Rated_Freight_7_2_USR = DB1.Rated_Freight;

// RCD.Total Freight 7.2 USR = DB1.Load Carrier Pay Amt
RCD.Total_Freight_7_2_USR = DB1.Load_Carrier_Pay_Amt;

//?SEL:  Load ID
CASE;

// IF CTL.Load ID is NE Blank
IF CTL.Load_ID <> *ZERO;

// AND RCD.Load ID NE CTL.Load ID
AND RCD.Load_ID <> CTL.Load_ID;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?** Add quit so synon stops loading subfile fields for non-matching load ID
QUIT;

ENDIF;

//?SEL: Toggle Rated Freight = 0
CASE;

// IF LCL.Select Status is yes
IF LCL.Select_Status = 'Y';

CASE;

// IF RCD.Rated Freight 7.2 USR is Entered
IF RCD.Rated_Freight_7_2_USR <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Carrier Payment Entered
CASE;

// IF LCL.Status Flag 1  Y/N is Yes
IF LCL.Status_Flag_1_Y_N = 'Y';

CASE;

// IF RCD.Total Freight 7.2 USR is Not Entered
IF RCD.Total_Freight_7_2_USR = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// RCD.Charge Output Sts 1 USR = CND.No
RCD.Charge_Output_Sts_1_USR = 'N';

// RCD.Charge Output Sts 2 USR = CND.No
RCD.Charge_Output_Sts_2_USR = 'N';

// RCD.Charge Output Sts 3 USR = CND.No
RCD.Charge_Output_Sts_3_USR = 'N';

// RCD.Charge Output Sts 4 USR = CND.No
RCD.Charge_Output_Sts_4_USR = 'N';

// RCD.Display Flag = CND.No
RCD.Display_Flag = 'N';

EXECUTE FUNCTION(Rtv Freight Charges   RT) TYPE(RTVOBJ) FILE(POBCCPP)           AC1627043;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Fuel_Surcharge_Amt);
PARAMETER(CTL.Charge_Code_1_USR);
PARAMETER(RCD.Charge_Amount_1_USR);
PARAMETER(CTL.Charge_Code_2_USR);
PARAMETER(RCD.Charge_Amount_2_USR);
PARAMETER(RCD.Actual_Frt_Other_Tot_USR);
PARAMETER(RCD.Actual_Frt_Tot_USR);
PARAMETER(RCD.Shag_Wash_Charge_USR);
PARAMETER(CTL.Charge_Code_3_USR);
PARAMETER(RCD.Charge_Amount_3_USR);
PARAMETER(RCD.Freight_Other_Tot_USR);
PARAMETER(RCD.Total_Freight_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.Actual Frt Tot USR = PAR.Rated Freight
 PAR.Actual_Frt_Tot_USR = PAR.Rated_Freight;

 // PAR.Total Freight USR = PAR.Rated Freight
 PAR.Total_Freight_USR = PAR.Rated_Freight;

 //?***** Change Log and Comments
 DO;

 //?** 03/10/2008 LJB FP1271
 //?** Comment out FC Code = Actual Freight calcs
 //?** 03/03/2008 PKD FP1271
 //?** If LFC Include In Actual Freight = "Y" then add to Actual
 //?** Freight Total
 ENDDO;

 //?USER: Process Data record

 //?Total Freight
 CASE;

 // IF DB1.LFC Tot Freight Inc Sts is Yes
 IF DB1.LFC_Tot_Freight_Inc_Sts = 'Y';

 // PAR.Total Freight USR = PAR.Total Freight USR + DB1.LFC Amount
 PAR.Total_Freight_USR = PAR.Total_Freight_USR + DB1.LFC_Amount;

 ENDIF;

 //?Accum into buckets
 CASE;

 // IF DB1.LFC Special Type is Fuel Surcharge Component
 IF DB1.LFC_Special_Type = 'F'/'R'/'S';

 // PAR.Fuel Surcharge Amt = PAR.Fuel Surcharge Amt + DB1.LFC Amount
 PAR.Fuel_Surcharge_Amt = PAR.Fuel_Surcharge_Amt + DB1.LFC_Amount;

 CASE;

 // IF DB1.LFC Act Frt Include Sts is Yes
 IF DB1.LFC_Act_Frt_Include_Sts = 'Y';

 // PAR.Actual Frt Tot USR = PAR.Actual Frt Tot USR + DB1.LFC Amount
 PAR.Actual_Frt_Tot_USR = PAR.Actual_Frt_Tot_USR + DB1.LFC_Amount;

 ENDIF;

 //?Accum into buckets
 // IF DB1.LFC Shag/Wash Comp is Shag/Wash
 IF DB1.LFC_Shag_Wash_Comp = 'S'/'W';

 // PAR.Shag/Wash Charge USR = PAR.Shag/Wash Charge USR + DB1.LFC Amount
 PAR.Shag_Wash_Charge_USR = PAR.Shag_Wash_Charge_USR + DB1.LFC_Amount;

 //?Accum into buckets
 // IF DB1.FC Code EQ PAR.Charge Code 1 USR
 IF DB1.FC_Code = PAR.Charge_Code_1_USR;

 // PAR.Charge Amount 1 USR = PAR.Charge Amount 1 USR + DB1.LFC Amount
 PAR.Charge_Amount_1_USR = PAR.Charge_Amount_1_USR + DB1.LFC_Amount;

 CASE;

 // IF DB1.LFC Act Frt Include Sts is Yes
 IF DB1.LFC_Act_Frt_Include_Sts = 'Y';

 // PAR.Actual Frt Tot USR = PAR.Actual Frt Tot USR + DB1.LFC Amount
 PAR.Actual_Frt_Tot_USR = PAR.Actual_Frt_Tot_USR + DB1.LFC_Amount;

 ENDIF;

 //?Accum into buckets
 // IF DB1.FC Code EQ PAR.Charge Code 2 USR
 IF DB1.FC_Code = PAR.Charge_Code_2_USR;

 // PAR.Charge Amount 2 USR = PAR.Charge Amount 2 USR + DB1.LFC Amount
 PAR.Charge_Amount_2_USR = PAR.Charge_Amount_2_USR + DB1.LFC_Amount;

 CASE;

 // IF DB1.LFC Act Frt Include Sts is Yes
 IF DB1.LFC_Act_Frt_Include_Sts = 'Y';

 // PAR.Actual Frt Tot USR = PAR.Actual Frt Tot USR + DB1.LFC Amount
 PAR.Actual_Frt_Tot_USR = PAR.Actual_Frt_Tot_USR + DB1.LFC_Amount;

 ENDIF;

 //?Accum into buckets
 // IF DB1.FC Code EQ PAR.Charge Code 3 USR
 IF DB1.FC_Code = PAR.Charge_Code_3_USR;

 // PAR.Charge Amount 3 USR = PAR.Charge Amount 3 USR + DB1.LFC Amount
 PAR.Charge_Amount_3_USR = PAR.Charge_Amount_3_USR + DB1.LFC_Amount;

 CASE;

 // IF DB1.LFC Act Frt Include Sts is Yes
 IF DB1.LFC_Act_Frt_Include_Sts = 'Y';

 // PAR.Actual Frt Tot USR = PAR.Actual Frt Tot USR + DB1.LFC Amount
 PAR.Actual_Frt_Tot_USR = PAR.Actual_Frt_Tot_USR + DB1.LFC_Amount;

 ENDIF;

 //?Accum into buckets
 // IF DB1.FC Code is Fuel -- MG created
 IF DB1.FC_Code = 'FUE';

 // PAR.Fuel Surcharge Amt = PAR.Fuel Surcharge Amt + DB1.LFC Amount
 PAR.Fuel_Surcharge_Amt = PAR.Fuel_Surcharge_Amt + DB1.LFC_Amount;

 CASE;

 // IF DB1.LFC Act Frt Include Sts is Yes
 IF DB1.LFC_Act_Frt_Include_Sts = 'Y';

 // PAR.Actual Frt Tot USR = PAR.Actual Frt Tot USR + DB1.LFC Amount
 PAR.Actual_Frt_Tot_USR = PAR.Actual_Frt_Tot_USR + DB1.LFC_Amount;

 ENDIF;

 //?Accum into buckets
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.LFC Act Frt Include Sts is Yes
 IF DB1.LFC_Act_Frt_Include_Sts = 'Y';

 // PAR.Actual Frt Other Tot USR = PAR.Actual Frt Other Tot USR + DB1.LFC Amount
 PAR.Actual_Frt_Other_Tot_USR = PAR.Actual_Frt_Other_Tot_USR + DB1.LFC_Amount;

 // PAR.Actual Frt Tot USR = PAR.Actual Frt Tot USR + DB1.LFC Amount
 PAR.Actual_Frt_Tot_USR = PAR.Actual_Frt_Tot_USR + DB1.LFC_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Freight Other Tot USR = PAR.Freight Other Tot USR + DB1.LFC Amount
 PAR.Freight_Other_Tot_USR = PAR.Freight_Other_Tot_USR + DB1.LFC_Amount;

 ENDIF;

 ENDIF;

}


//?SEL: Ocean > 0
CASE;

// IF LCL.Status Flag 2  Y/N is Yes
IF LCL.Status_Flag_2_Y_N = 'Y';

CASE;

// IF RCD.Charge Amount 3 USR is Not Entered
IF RCD.Charge_Amount_3_USR = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Continue if record selected
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


// RCD.Status Flag 14 Y/N = CND.No
RCD.Status_Flag_14_Y_N = 'N';

//?Output Charges 1 - 4
CASE;

// IF RCD.LH Carrier Payment Sts is Paid
IF RCD.LH_Carrier_Payment_Sts = 'P';

// OR RCD.MG Created Load is Yes
OR RCD.MG_Created_Load = 'Y';

// RCD.Status Flag 14 Y/N = CND.Yes
RCD.Status_Flag_14_Y_N = 'Y';

// RCD.Charge Output Sts 1 USR = CND.Yes
RCD.Charge_Output_Sts_1_USR = 'Y';

// RCD.Charge Output Sts 2 USR = CND.Yes
RCD.Charge_Output_Sts_2_USR = 'Y';

// RCD.Charge Output Sts 3 USR = CND.Yes
RCD.Charge_Output_Sts_3_USR = 'Y';

// RCD.Charge Output Sts 4 USR = CND.Yes
RCD.Charge_Output_Sts_4_USR = 'Y';

ENDIF;

//?Output Charge 1
CASE;

// IF CTL.Charge Code 1 USR is Not Entered
IF CTL.Charge_Code_1_USR = *BLANK;

// OR RCD.MG Created Load is Yes
OR RCD.MG_Created_Load = 'Y';

// RCD.Charge Output Sts 1 USR = CND.Yes
RCD.Charge_Output_Sts_1_USR = 'Y';

ENDIF;

//?Output Charge 2
CASE;

// IF CTL.Charge Code 2 USR is Not Entered
IF CTL.Charge_Code_2_USR = *BLANK;

// OR RCD.MG Created Load is Yes
OR RCD.MG_Created_Load = 'Y';

// RCD.Charge Output Sts 2 USR = CND.Yes
RCD.Charge_Output_Sts_2_USR = 'Y';

ENDIF;

//?Output Charge 3
CASE;

// IF CTL.Charge Code 3 USR is Not Entered
IF CTL.Charge_Code_3_USR = *BLANK;

// RCD.Charge Output Sts 3 USR = CND.Yes
RCD.Charge_Output_Sts_3_USR = 'Y';

ENDIF;

//?** Retrieve Export info from Order Header Extension
// Call program RTV ExpOrd Info for LD XF.
CALL PROGRAM(RTV ExpOrd Info for LD XF) ('PMJMXFR');
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Carrier_Code);
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Export_Docs_Go_w_Driver);
PARAMETER(LCL.Air_Freight_Order);
PARAMETER(LCL.Export_USDA_Approved);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Stop_Drop_Sequence_Number);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.OHE_City);
PARAMETER(LCL.OHE_Vessel_Airline);
PARAMETER(LCL.OHE_Voyage_Flight);
PARAMETER(LCL.OHE_Booking_Number);
PARAMETER(LCL.OHE_Discharge_Port_Airprt);
PARAMETER(LCL.OHE_Sail_Flight_Date);
PARAMETER(LCL.OHE_Port_Cut_Date);
PARAMETER(LCL.OHE_Arrival_Date);
PARAMETER(LCL.OHE_Late_Delivery_Code);
PARAMETER(LCL.OHE_Ship_Status);
PARAMETER(LCL.OHE_Container_Number);
PARAMETER(LCL.OHE_Comment_1);
PARAMETER(LCL.OHE_Comment_2);
PARAMETER(LCL.Port_City);
PARAMETER(LCL.Port_Address_Line_1);
PARAMETER(LCL.Port_Address_Line_2);
PARAMETER(LCL.Sail_Port_State);
PARAMETER(LCL.Port_Zip_Postal_Code);
PARAMETER(LCL.Port_Phone_Number);
PARAMETER(LCL.Port_Fax_Number);

//?Validate if type code is 'ES' = Export Seaboard Bookings
CASE;

// IF LCL.Company Number is greater than zero
IF LCL.Company_Number > *ZERO;

// AND LCL.Ship To Customer is not equal to zero
AND LCL.Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(RTV All fields) TYPE(RTVOBJ) FILE(CAEOREP)                     AC1478596;
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Broker);
PARAMETER(NLL.P_O_Required_Flag);
PARAMETER(NLL.Deliver_after_time);
PARAMETER(NLL.Deliver_before_time);
PARAMETER(NLL.Alt_Remittance_Flag);
PARAMETER(LCL.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Mileage_To_Customer);
PARAMETER(NLL.Co_Cust_Overage_Rate_CWT);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Outside_Warehouse_Flag);
PARAMETER(NLL.Customer_Group_Code);
PARAMETER(NLL.Customer_Group_Code_2);
PARAMETER(NLL.G_L_Code);
PARAMETER(NLL.Commodity_Market_Code);
PARAMETER(NLL.Credit_Contact_Name);
PARAMETER(NLL.Credit_Contact_Telephone);
PARAMETER(NLL.Credit_Contact_Bus_Title);
PARAMETER(NLL.Credit_Contact_Fax_Number);
PARAMETER(NLL.Allow_Man_Qt_WO_Approval);
PARAMETER(NLL.Fax_Invoice_Flag);
PARAMETER(NLL.Fax_Invoice_Fax_Number);
PARAMETER(NLL.Fax_Invoice_Contact_Name);
PARAMETER(NLL.Distributor);
PARAMETER(NLL.Default_Shipping_Co_Sts);
PARAMETER(NLL.Ord_Ent_Default_Sls_Rte);
PARAMETER(NLL.Bypass_DDt_Delay_w_Invcng);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** International accounts
CASE;

// IF LCL.Ship To State Code is International Accounts
IF LCL.Ship_To_State_Code = '.';

// RCD.Ship To State Code = LCL.Ship To State Code
RCD.Ship_To_State_Code = LCL.Ship_To_State_Code;

// RCD.Shipping Line = LCL.Shipping Line
RCD.Shipping_Line = LCL.Shipping_Line;

// RCD.Discharge Port = LCL.OHE Discharge Port/Airprt
RCD.Discharge_Port = LCL.OHE_Discharge_Port_Airprt;

ENDIF;

//?Output Actual Freight
CASE;

// IF RCD.Ship To State Code is Not International
IF RCD.Ship_To_State_Code <> '.';

// OR RCD.LH Carrier Payment Sts is Paid
OR RCD.LH_Carrier_Payment_Sts = 'P';

// OR RCD.Warehouse Type is Fresh
OR RCD.Warehouse_Type = 'FR';

// RCD.Display Flag = CND.Yes
RCD.Display_Flag = 'Y';

ENDIF;

//?SEL:  Payment Status
CASE;

// IF CTL.LH Carrier Payment Sts is Paid
IF CTL.LH_Carrier_Payment_Sts = 'P';

// AND RCD.LH Carrier Payment Sts NE CTL.LH Carrier Payment Sts
AND RCD.LH_Carrier_Payment_Sts <> CTL.LH_Carrier_Payment_Sts;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?SEL:  Payment Status
// IF CTL.LH Carrier Payment Sts is Select Not Paid
IF CTL.LH_Carrier_Payment_Sts = *;

// AND RCD.LH Carrier Payment Sts is Paid
AND RCD.LH_Carrier_Payment_Sts = 'P';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Value 7.2 USR = RCD.Total Freight 7.2 USR
RCD.Value_7_2_USR = RCD.Total_Freight_7_2_USR;

// WRK.Reverse Image Flag USR = CND.No
WRK.Reverse_Image_Flag_USR = 'N';

// WRK.Change Flag USR = CND.No
WRK.Change_Flag_USR = 'N';

//?** Hilite if not paid and ocean or air freight charges exist
CASE;

// IF RCD.LH Carrier Payment Sts is Not Paid
IF RCD.LH_Carrier_Payment_Sts = *BLANK;

//?** If ShipToState = ".", or if Export Load has Air Freight
CASE;

// IF RCD.Ship To State Code is International Accounts
IF RCD.Ship_To_State_Code = '.';

// WRK.Reverse Image Flag USR = CND.Yes
WRK.Reverse_Image_Flag_USR = 'Y';

//?** If ShipToState = ".", or if Export Load has Air Freight
// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

EXECUTE FUNCTION(CHK Air Frt Order      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1787734;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Air_Freight_Order);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?*****
 //?** 07/17/2006 LJB TRF018 - CHK Air Frt Order RT over OH
 //?** This routine checks to see if at least one order is an air
 //?** freight order. If yes the program quits (only one is needed).
 //?*****
 ENDDO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?** Load parms and quit if this is an air freight order
 CASE;

 // IF DB1.Air Freight Order is yes
 IF DB1.Air_Freight_Order = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 //?** Load parms and quit if this is an air freight order
 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


//?** Reverse Image if Load has an Air Freight order
CASE;

// IF WRK.Air Freight Order is yes
IF WRK.Air_Freight_Order = 'Y';

// WRK.Reverse Image Flag USR = CND.Yes
WRK.Reverse_Image_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?** Hilite if Override miles exist and put on screen   E00207
CASE;

// IF DB1.Override Total Load Miles is Entered
IF DB1.Override_Total_Load_Miles <> *ZERO;

// RCD.Total Load Miles = DB1.Override Total Load Miles
RCD.Total_Load_Miles = DB1.Override_Total_Load_Miles;

// WRK.Change Flag USR = CND.Yes
WRK.Change_Flag_USR = 'Y';

//?** Hilite if Override miles exist and put on screen   E00207
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Load Miles = DB1.Total Load Miles
RCD.Total_Load_Miles = DB1.Total_Load_Miles;

ENDIF;

ENDIF;

// USR Total Due
RCD.USR_Total_Due = RCD.Total_Freight_USR + RCD.Shag_Wash_Charge_USR;

EXECUTE FUNCTION(Rtv Ld ShpCo/MultiCo  RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1909337;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Company_Number_041405);
PARAMETER(RCD.Multi_Company_Load);
{
 //?USER: Initialize routine

 // PAR.Multi Company Load = CND.no
 PAR.Multi_Company_Load = 'N';

 // PAR.Company Number = CON.*ZERO
 PAR.Company_Number = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.Company Number is Equal to zero
 IF PAR.Company_Number = *ZERO;

 // PAR.Company Number = DB1.Company Number
 PAR.Company_Number = DB1.Company_Number;

 ENDIF;

 CASE;

 // IF PAR.Company Number NE DB1.Company Number
 IF PAR.Company_Number <> DB1.Company_Number;

 // PAR.Multi Company Load = CND.yes
 PAR.Multi_Company_Load = 'Y';

 QUIT;

 ENDIF;

}


//?USER: Process subfile control (Pre-confirm)

//?F08 toggle Rated Freight
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

CASE;

// IF LCL.Select Status is yes
IF LCL.Select_Status = 'Y';

// LCL.Select Status = CND.no
LCL.Select_Status = 'N';

// IF LCL.Select Status is no
IF LCL.Select_Status = 'N';

// LCL.Select Status = CND.yes
LCL.Select_Status = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F10 toggle Carrier Payment = 0
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF LCL.Status Flag 1  Y/N is Yes
IF LCL.Status_Flag_1_Y_N = 'Y';

// LCL.Status Flag 1  Y/N = CND.No
LCL.Status_Flag_1_Y_N = 'N';

// IF LCL.Status Flag 1  Y/N is No
IF LCL.Status_Flag_1_Y_N = 'N';

// LCL.Status Flag 1  Y/N = CND.Yes
LCL.Status_Flag_1_Y_N = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F11 toggle Ocean > 0
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

CASE;

// IF LCL.Status Flag 2  Y/N is Yes
IF LCL.Status_Flag_2_Y_N = 'Y';

// LCL.Status Flag 2  Y/N = CND.No
LCL.Status_Flag_2_Y_N = 'N';

// IF LCL.Status Flag 2  Y/N is No
IF LCL.Status_Flag_2_Y_N = 'N';

// LCL.Status Flag 2  Y/N = CND.Yes
LCL.Status_Flag_2_Y_N = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F13 toggle Payment Status
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

CASE;

// IF CTL.LH Carrier Payment Sts is Select Not Paid
IF CTL.LH_Carrier_Payment_Sts = *;

// CTL.LH Carrier Payment Sts = CND.Paid
CTL.LH_Carrier_Payment_Sts = 'P';

// IF CTL.LH Carrier Payment Sts is Paid
IF CTL.LH_Carrier_Payment_Sts = 'P';

// CTL.LH Carrier Payment Sts = CND.Select Not Paid
CTL.LH_Carrier_Payment_Sts = *;

// IF CTL.LH Carrier Payment Sts is Not Paid
IF CTL.LH_Carrier_Payment_Sts = *BLANK;

// CTL.LH Carrier Payment Sts = CND.Select Not Paid
CTL.LH_Carrier_Payment_Sts = *;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?** Update Stop, Unload and Ocean charges, Total Frt, and Carrier Amt
CASE;

// IF RCD.MG Created Load is Yes
IF RCD.MG_Created_Load = 'Y';

CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// OR RCD.*SFLSEL is Option 2
OR RCD.*SFLSEL = '2'/'2';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Live With TMS: Option &1 Invalid.'
ERROR(USR4601);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

ENDIF;

//?1=ReCalculate Rated Freight
CASE;

// IF RCD.*SFLSEL is Option 1
IF RCD.*SFLSEL = '1'/'1';

//?Calculate Rated Freight & Update Order Files
// Call program UPD Rated Frt Post Shp XF.
CALL PROGRAM(UPD Rated Frt Post Shp XF) ('PDJVXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);

//?Update Sales History
EXECUTE FUNCTION(Upd Fix Rated Freight RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1628670;
PARAMETER(RCD.Load_ID);
{
 //?USER: Initialize routine

 //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
 //?                                    to remove Company RST or Pos
 //?USER: Process Data record

 EXECUTE FUNCTION(Upd Fix Rated Freight RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1628671;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Upd Fix Rated Freight RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1628672;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Rated_Freight);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Fix Rated Freight CH) TYPE(CHGOBJ) FILE(OMHSTPP)           AC1628674;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Rated_Freight);
   {
    //?USER: Processing after Data read

    // DB1.Process Sts for 3C = CND.No
    DB1.Process_Sts_for_3C = 'N';

    // DB1.Data Mart Process Sts = CND.no
    DB1.Data_Mart_Process_Sts = 'N';

    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


ENDIF;

//?2=Edit Charge
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

//?** Rtv load miles and override miles for this load and pass
//?** to the edit routine, rcd context may have either value in it  E00207
EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.Load_Status);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Edt Load Frt Charge   EF.
CALL PROGRAM(Edt Load Frt Charge   EF) ('POLSEFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Total_Stops);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Rated_Freight);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(RCD.LH_Carrier_Payment_Sts);
PARAMETER(WRK.Override_Total_Load_Miles);
PARAMETER(RCD.LH_On_Time_Reason_Code);
PARAMETER(RCD.LH_Held_Over_Reason);

CASE;

// IF RCD.LH Carrier Payment Sts is Not Paid
IF RCD.LH_Carrier_Payment_Sts = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

ENDIF;

//?5=Display Load Detail
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP Load Plan          DF.
CALL PROGRAM(DSP Load Plan          DF) ('PDSLDFR');
PARAMETER(RCD.Load_ID);

// PGM.*Reload subfile = CND.*NO
PGM.*Reload_subfile = 'N';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

QUIT;

ENDIF;

//?7=Create Auto Charges
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF RCD.LH Carrier Payment Sts is Paid
IF RCD.LH_Carrier_Payment_Sts = 'P';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

//?** Pass Override Miles                    E00207
// Call program Clc Freight Charges   XF.
CALL PROGRAM(Clc Freight Charges   XF) ('POL2XFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Total_Stops);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Total_Load_Miles);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Export_Status);
PARAMETER(RCD.BOL_Complete_Date);
PARAMETER(RCD.Shipping_Line);
PARAMETER(RCD.Discharge_Port);
PARAMETER(RCD.Load_Shag_Flag);
PARAMETER(RCD.Load_Wash_Flag);
PARAMETER(RCD.Override_Total_Load_Miles);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

ENDIF;

//?Carrier Payment, Check Export Sts to determine update process
CASE;

// IF RCD.Total Freight 7.2 USR NE RCD.Value 7.2 USR
IF RCD.Total_Freight_7_2_USR <> RCD.Value_7_2_USR;

//?** If an Export, check for Air Freight
CASE;

// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

EXECUTE FUNCTION(CHK Air Frt Order      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1787734;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Air_Freight_Order);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?*****
 //?** 07/17/2006 LJB TRF018 - CHK Air Frt Order RT over OH
 //?** This routine checks to see if at least one order is an air
 //?** freight order. If yes the program quits (only one is needed).
 //?*****
 ENDDO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?** Load parms and quit if this is an air freight order
 CASE;

 // IF DB1.Air Freight Order is yes
 IF DB1.Air_Freight_Order = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 //?** Load parms and quit if this is an air freight order
 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


EXECUTE FUNCTION(RTV FR/FZ sts for Ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1799778;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Chilled_Frozen_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Chilled/Frozen Sts USR = WRK.Blank for 4           USR
 PAR.Chilled_Frozen_Sts_USR = WRK.Blank_for_4_USR;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1575817;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Warehouse_Code);
 {
  //?USER: Process Data record

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  QUIT;

 }

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(WRK.Warehouse_Code);
 PARAMETER(WRK.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Warehouse Type is Fresh
 IF WRK.Warehouse_Type = 'FR';

 // PAR.Chilled/Frozen Sts USR = CND.Chilled
 PAR.Chilled_Frozen_Sts_USR = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Chilled/Frozen Sts USR = CND.Frozen
 PAR.Chilled_Frozen_Sts_USR = 'F';

 //?If any order is Frozen, then quit
 QUIT;

 ENDIF;

}


//?** Leave unpaid if International and Frozen & has Air Freight
CASE;

// IF WRK.Air Freight Order is yes
IF WRK.Air_Freight_Order = 'Y';

// OR RCD.Ship To State Code is International Accounts
OR ( RCD.Ship_To_State_Code = '.';

// AND LCL.Chilled/Frozen Sts USR is Frozen
AND LCL.Chilled_Frozen_Sts_USR = 'F';

// AND NOT LCL.Type Code is Export Seaboard Bookings
AND ! LCL.Type_Code = 'ES' );

//?RMC 11/9/6 TRF015
//?Added c3  -- Intl and Frozen are Not marked as paid. Chilled (fresh) are.
// RCD.LH Carrier Payment Sts = CND.Not Paid
RCD.LH_Carrier_Payment_Sts = *BLANK;

//?TRF015 RMC 11/15/06 Alloc Carrier Frt when still Unpaid
CASE;

// IF RCD.Total Freight 7.2 USR is Entered
IF RCD.Total_Freight_7_2_USR <> *ZERO;

//?       The Actual Freight will be allocated when Paid
EXECUTE FUNCTION(VAL Load ID in History RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1432319;
PARAMETER(RCD.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Call program UPD Alloc Frt to Hist  XF.
CALL PROGRAM(UPD Alloc Frt to Hist  XF) ('PLABXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Total_Freight_7_2_USR);
PARAMETER(RCD.Total_Freight_7_2_USR);

ENDIF;

ENDIF;

//?** Leave unpaid if International and Frozen & has Air Freight
// IF *OTHERWISE
IF *OTHERWISE;

//?** If export has no Air Freight, update payment sts flag and
//?** update Sales History with distributed Actual and Ref Freight
// RCD.LH Carrier Payment Sts = CND.Paid
RCD.LH_Carrier_Payment_Sts = 'P';

//?RMC 10/10/06 pass into Flat Amount the Rcd.actual frt tot usr
//?     instead of total freight usr
EXECUTE FUNCTION(VAL Load ID in History RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1432319;
PARAMETER(RCD.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Call program UPD Alloc Frt to Hist  XF.
CALL PROGRAM(UPD Alloc Frt to Hist  XF) ('PLABXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Actual_Frt_Tot_USR);
PARAMETER(RCD.Total_Freight_USR);

ENDIF;

ENDIF;

//?** If an Export, check for Air Freight
// IF *OTHERWISE
IF *OTHERWISE;

//?** If no export then update payment sts flag and
//?** update Sales History with distributed Actual and Air Freight
// RCD.LH Carrier Payment Sts = CND.Paid
RCD.LH_Carrier_Payment_Sts = 'P';

//?RMC 10/10/06 pass into Flat Amount the Rcd.actual frt tot usr
//?     instead of total freight usr
EXECUTE FUNCTION(VAL Load ID in History RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1432319;
PARAMETER(RCD.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Call program UPD Alloc Frt to Hist  XF.
CALL PROGRAM(UPD Alloc Frt to Hist  XF) ('PLABXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Actual_Frt_Tot_USR);
PARAMETER(RCD.Total_Freight_USR);

ENDIF;

ENDIF;

//?** Update Load Header with the Actual Freight that is being paid
//?** not the total freight charges. Update the Carrier Payment with
//?** the amount entered on the screen. Update the payment status.
EXECUTE FUNCTION(Upd Ld ActFrt/CarPay  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1628500;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Total_Freight_7_2_USR);
PARAMETER(RCD.Total_Freight_USR);
PARAMETER(RCD.LH_Carrier_Payment_Sts);
PARAMETER(RCD.Actual_Frt_Tot_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Ld ActFrt/CarPay  CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1628501;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Load_Carrier_Pay_Amt);
 PARAMETER(PAR.Load_Total_Freight);
 PARAMETER(PAR.LH_Carrier_Payment_Sts);
 PARAMETER(PAR.Load_Actual_Freight);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  CASE;

  // IF PAR.LH Carrier Payment Sts is Paid
  IF PAR.LH_Carrier_Payment_Sts = 'P';

  ENDIF;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?8=Mark Paid & Alloc Frt
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

//?** Update Sales History with distributed Actual and Air Freight
//?RMC 10/6/6 was passing the rcd.total freight usr into the Flat Amount
//?        should pass the rcd.actual frt tot usr into the Flat Amount
//?        which is the same actual frt amount that goes to the Load Hdr
// Call program UPD Alloc Frt to Hist  XF.
CALL PROGRAM(UPD Alloc Frt to Hist  XF) ('PLABXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Actual_Frt_Tot_USR);
PARAMETER(RCD.Total_Freight_USR);

//?** Update Load Header with the Actual Freight that is being paid
//?** not the total freight charges. Update the Carrier Payment with
//?** the amount entered on the screen. Mark Paid.
EXECUTE FUNCTION(Upd Ld ActFrt/CarPay  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1628500;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Total_Freight_7_2_USR);
PARAMETER(RCD.Total_Freight_USR);
PARAMETER('P');
PARAMETER(RCD.Actual_Frt_Tot_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Ld ActFrt/CarPay  CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1628501;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Load_Carrier_Pay_Amt);
 PARAMETER(PAR.Load_Total_Freight);
 PARAMETER(PAR.LH_Carrier_Payment_Sts);
 PARAMETER(PAR.Load_Actual_Freight);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  CASE;

  // IF PAR.LH Carrier Payment Sts is Paid
  IF PAR.LH_Carrier_Payment_Sts = 'P';

  ENDIF;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?9=Mark Unpaid
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

//?** UPDATE all of the charges as UnPaid.
EXECUTE FUNCTION(Upd Carrier Pay Sts   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1640056;
PARAMETER(RCD.Load_ID);
PARAMETER(*BLANK);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Carrier Pay Sts   CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1640057;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.LH_Carrier_Payment_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  CASE;

  // IF PAR.LH Carrier Payment Sts is Not Paid
  IF PAR.LH_Carrier_Payment_Sts = *BLANK;

  // AND DB1.LH Carrier Paid Dte NE WRK.ZERO
  AND DB1.LH_Carrier_Paid_Dte <> WRK.ZERO;

  // DB1.LH Carrier Paid Dte = CON.*ZERO
  DB1.LH_Carrier_Paid_Dte = *ZERO;

  // DB1.LH Carrier Paid Time = CON.*ZERO
  DB1.LH_Carrier_Paid_Time = *ZERO;

  ENDIF;

 }

}


//?TRF015 RMC 11/16/06 Alloc Carrier Freight when marked UnPaid
CASE;

// IF RCD.Total Freight 7.2 USR is Entered
IF RCD.Total_Freight_7_2_USR <> *ZERO;

//?     The Actual Freight will be allocated when Paid
EXECUTE FUNCTION(VAL Load ID in History RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1432319;
PARAMETER(RCD.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Call program UPD Alloc Frt to Hist  XF.
CALL PROGRAM(UPD Alloc Frt to Hist  XF) ('PLABXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Total_Freight_7_2_USR);
PARAMETER(RCD.Total_Freight_7_2_USR);

ENDIF;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?10=Edit Rated Freight
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

//?** Pass Override Miles in                  E00207
// Call program EDT Calc Rated Freight ET.
CALL PROGRAM(EDT Calc Rated Freight ET) ('PDYLETR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Allocate_Pounds_Miles);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.Total_Load_Miles);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Carrier_Broker);
PARAMETER(RCD.Override_Total_Load_Miles);
PARAMETER(PAR.Name);

//?Update Sales History
EXECUTE FUNCTION(Upd Fix Rated Freight RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1628670;
PARAMETER(RCD.Load_ID);
{
 //?USER: Initialize routine

 //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
 //?                                    to remove Company RST or Pos
 //?USER: Process Data record

 EXECUTE FUNCTION(Upd Fix Rated Freight RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1628671;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Upd Fix Rated Freight RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1628672;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Rated_Freight);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Fix Rated Freight CH) TYPE(CHGOBJ) FILE(OMHSTPP)           AC1628674;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Rated_Freight);
   {
    //?USER: Processing after Data read

    // DB1.Process Sts for 3C = CND.No
    DB1.Process_Sts_for_3C = 'N';

    // DB1.Data Mart Process Sts = CND.no
    DB1.Data_Mart_Process_Sts = 'N';

    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


ENDIF;

//?12=Calc Miles
CASE;

// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

// Call program EDT Stop Miles         EF.
CALL PROGRAM(EDT Stop Miles         EF) ('PDW7EFR');
PARAMETER(RCD.Load_ID);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?77=Create Auto Charges
CASE;

// IF RCD.*SFLSEL is Option 77
IF RCD.*SFLSEL = '77';

//?** Pass in Override Miles                          E00207
// Call program Clc Freight Charges   XF.
CALL PROGRAM(Clc Freight Charges   XF) ('POL2XFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Total_Stops);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Total_Load_Miles);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Export_Status);
PARAMETER(RCD.BOL_Complete_Date);
PARAMETER(RCD.Shipping_Line);
PARAMETER(RCD.Discharge_Port);
PARAMETER(RCD.Load_Shag_Flag);
PARAMETER(RCD.Load_Wash_Flag);
PARAMETER(RCD.Override_Total_Load_Miles);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?90=Allocate Freight
CASE;

// IF RCD.*SFLSEL is Option 90
IF RCD.*SFLSEL = '90';

// Call program UPD Alloc Frt to Hist  XF.
CALL PROGRAM(UPD Alloc Frt to Hist  XF) ('PLABXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Actual_Frt_Tot_USR);
PARAMETER(RCD.Total_Freight_USR);

ENDIF;

//?USER: Final processing (Pre-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


