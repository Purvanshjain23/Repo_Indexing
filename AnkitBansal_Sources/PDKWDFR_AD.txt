// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDKWDFR
// ?Date: 14.08.2025 Time: 03:30:19
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.USR Program name = CON.*BLANK
PAR.USR_Program_name = *BLANK;

// PAR.USR First Line on Screen = CON.*ZERO
PAR.USR_First_Line_on_Screen = *ZERO;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.USR Status (Y/N) = CND.no
PAR.USR_Status_Y_N = 'N';

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

// Call program Rtv Field Security    XF.
CALL PROGRAM(Rtv Field Security    XF) ('PDL1XFR');
PARAMETER(PAR.Display_Flag);

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(WRK.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(PAR.Company_Organization);

//?* Daily's
CASE;

// IF PAR.Company Organization is Daily's
IF PAR.Company_Organization = 'D';

// PAR.Allow Multi-Company = CND.yes
PAR.Allow_Multi_Company = 'Y';

ENDIF;

//?* Determine if 20=Email/Fax BOLs displays for HPB
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

ENDIF;

//?USER: Initialize subfile control

//?First time Through Program
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Order Type - Sales = CVTVAR(CND.Regular Order)
CTL.Order_Type_Sales = CVTVAR('OR');

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// CTL.Order Number = PAR.Order Number
CTL.Order_Number = PAR.Order_Number;

// CTL.Order Type - Sales = CND.Regular Order
CTL.Order_Type_Sales = 'OR';

// CTL.Ship To Customer = PAR.Ship To Customer
CTL.Ship_To_Customer = PAR.Ship_To_Customer;

// CTL.USR Description - 15 = PAR.Ship To Name
CTL.USR_Description_15 = PAR.Ship_To_Name;

// CTL.Order Date = PAR.Order Date
CTL.Order_Date = PAR.Order_Date;

// CTL.Header Status = PAR.Header Status
CTL.Header_Status = PAR.Header_Status;

SET CURSOR;

ENDIF;

// WRK.Warehouse Code = CTL.Warehouse Code
WRK.Warehouse_Code = CTL.Warehouse_Code;

// LCL.Country Code = CTL.Country Code
LCL.Country_Code = CTL.Country_Code;

//?** E00157
// LCL.OHE Intended for ExportCC = CTL.OHE Intended for ExportCC
LCL.OHE_Intended_for_ExportCC = CTL.OHE_Intended_for_ExportCC;

//?USER: Initialize subfile record from DBF record

//?   (PAR.order number holds the saved order #)
//?SEL:  Company Number
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

//?SEL:  Company Number
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Company Number EQ CTL.Company Number
IF DB1.Company_Number = CTL.Company_Number;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel: Customer Name
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.USR Description - 15 NE WRK.BLANK
IF CTL.USR_Description_15 <> WRK.BLANK;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.USR_Description_15);
PARAMETER(CTL.USR_Description_15);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Ship_To_Name);
PARAMETER(30);
PARAMETER(1);
PARAMETER(CTL.USR_Description_15);
PARAMETER(15);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Order number equal zeros
CASE;

// IF PAR.Order Number is Equal to zeros
IF PAR.Order_Number = *ZERO;

CASE;

// IF PAR.USR First Line on Screen is One
IF PAR.USR_First_Line_on_Screen = 1;

// PAR.Order Number = DB1.Order Number
PAR.Order_Number = DB1.Order_Number;

ENDIF;

ENDIF;

// Execute function Clc Line on Scrn       US.
EXECUTE FUNCTION(Clc Line on Scrn       US) TYPE(EXCUSRSRC) ('PDLCUFR');
PARAMETER(PAR.USR_First_Line_on_Screen);
{
 0110 C*****  ##RR CONTAINS THE 1ST LINE ON SCREEN                    *****
 0124 C*****  ##RRMAX CONTAINS THE LAST LINE ON PRIOR SCREEN          *****
 0124 C*****  IF ##RR - ##RRMAX = 1, THIS IS THE FIRST LINE ON SCREEN *****
 0125 C           ##RR      SUB  ##RRMX    #OPLUF
}


EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Select 1st Warehouse code
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

CASE;

// IF CTL.Warehouse Code NE RCD.Warehouse Code
IF CTL.Warehouse_Code <> RCD.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Country Code only  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1531787;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Country_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// RCD.Customer Name         USR = RCD.Ship To Name
RCD.Customer_Name_USR = RCD.Ship_To_Name;

EXECUTE FUNCTION(RTV OHE Intend for Exp RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1952288;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.OHE_Intended_for_ExportCC);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Stop Number       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197795;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Stop_Drop_Usr);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Appointment_Confirm_Date);
PARAMETER(WRK.Appointment_Confirm_Time);
{
 //?USER: Initialize routine

 // PAR.Stop/Drop = CON.*ZERO
 PAR.Stop_Drop = *ZERO;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?If order number is found, retrieve stop number
 CASE;

 // IF PAR.Order Number EQ DB1.Order Number
 IF PAR.Order_Number = DB1.Order_Number;

 // PAR.Stop/Drop = DB1.Stop/Drop
 PAR.Stop_Drop = DB1.Stop_Drop;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?** 05/19/16   RMC E4119  remove live with tpm check
//?SEL:  stop/drop number
CASE;

// IF CTL.Stop/Drop Usr is EQ Zero
IF CTL.Stop_Drop_Usr = *ZERO;

//?SEL:  stop/drop number
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Stop/Drop Usr EQ CTL.Stop/Drop Usr
IF RCD.Stop_Drop_Usr = CTL.Stop_Drop_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Country Code
CASE;

// IF CTL.Country Code is Entered
IF CTL.Country_Code <> *BLANK;

CASE;

// IF CTL.Country Code NE RCD.Country Code
IF CTL.Country_Code <> RCD.Country_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Intended for Export Country Code                 E00157
CASE;

// IF CTL.OHE Intended for ExportCC is Entered
IF CTL.OHE_Intended_for_ExportCC <> *BLANK;

CASE;

// IF CTL.OHE Intended for ExportCC NE RCD.OHE Intended for ExportCC
IF CTL.OHE_Intended_for_ExportCC <> RCD.OHE_Intended_for_ExportCC;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4 Prompt for Customer Number
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Ship To Customer
AND PGM.*Cursor_field = CTL.Ship_To_Customer;

// Call program SEL Ship To Customer   SR.
CALL PROGRAM(SEL Ship To Customer   SR) ('PDR5SRR');
PARAMETER(CTL.Ship_To_Customer);

ENDIF;

//?F4 Prompt for warehouse code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Warehouse Code
AND PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_Code);

ENDIF;

//?F4 Prompt for Sales Route
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Sales Route Code
AND PGM.*Cursor_field = CTL.Sales_Route_Code;

// Call program SEL PD Sales Route Act SR.
CALL PROGRAM(SEL PD Sales Route Act SR) ('PDFWSRR');
PARAMETER(CTL.Sales_Route_Code);

ENDIF;

//?F4 Customer name
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.USR Description - 15
AND PGM.*Cursor_field = CTL.USR_Description_15;

//?42704 slm add select on shipped to customer name
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Description - 15 = PAR.Ship To Name
CTL.USR_Description_15 = PAR.Ship_To_Name;

ENDIF;

//?F4 Prompt for Intended for Export country code
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.OHE Intended for ExportCC
AND PGM.*Cursor_field = CTL.OHE_Intended_for_ExportCC;

// Call program SEL Country Active     SR.
CALL PROGRAM(SEL Country Active     SR) ('PDEGSRR');
PARAMETER(CTL.OHE_Intended_for_ExportCC);

ENDIF;

//?description
CASE;

// IF CTL.USR Description - 15 NE WRK.USR Description - 15
IF CTL.USR_Description_15 <> WRK.USR_Description_15;

// WRK.USR Description - 15 = CTL.USR Description - 15
WRK.USR_Description_15 = CTL.USR_Description_15;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?whse change
CASE;

// IF CTL.Warehouse Code NE WRK.Warehouse Code
IF CTL.Warehouse_Code <> WRK.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?country code change
CASE;

// IF CTL.Country Code NE LCL.Country Code
IF CTL.Country_Code <> LCL.Country_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?intended for export country code change
CASE;

// IF CTL.OHE Intended for ExportCC NE LCL.OHE Intended for ExportCC
IF CTL.OHE_Intended_for_ExportCC <> LCL.OHE_Intended_for_ExportCC;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F11=WW EDI ASN 856
CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// Call program WW Cust Orders ASN 856 DF.
CALL PROGRAM(WW Cust Orders ASN 856 DF) ('PUODDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F13=WW EDI Orders
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program WW Whs Ord to Ship-EDI DF.
CALL PROGRAM(WW Whs Ord to Ship-EDI DF) ('PUDYDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F18 Order Inquiry by Load   Possibly Disable if not Live w/TPM  E004019
CASE;

// IF CTL.*CMD key is CF18
IF CTL.*CMD_key = '18';

// Call program DSP Main Ord Inq by Ld DF.
CALL PROGRAM(DSP Main Ord Inq by Ld DF) ('PDMCDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(CTL.Customer_Purchase_Order_#);
PARAMETER(CTL.Order_Date);
PARAMETER(CTL.Header_Status);
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Event_Code);
PARAMETER(CTL.USR_Program_name);

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

//?F19 Frzr Order Inq
CASE;

// IF CTL.*CMD key is CF19
IF CTL.*CMD_key = '19';

// Call program zDSP Frzr Order Inq    DF.
CALL PROGRAM(zDSP Frzr Order Inq    DF) ('PDTTDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Scheduled_Ship_Date);
PARAMETER(CTL.Requested_Delivery_Date);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Header_Status);
PARAMETER(CTL.USR_Description_15);

ENDIF;

//?05/17/24 SP S300250-Start
//?F20=By Del Dt
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

// Call program DSP Main Ord Inq by DelDt.
CALL PROGRAM(DSP Main Ord Inq by DelDt) ('PVFKDFR');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.USR_Program_name);

CASE;

// IF LCL.USR Program name is Order Inquiry View 2
IF LCL.USR_Program_name = 'PDWXDFR';

// OR LCL.USR Program name is Order Inquiry View 3
OR LCL.USR_Program_name = 'PDWZDFR';

// PAR.Company Number = LCL.Company Number
PAR.Company_Number = LCL.Company_Number;

// PAR.Order Number = LCL.Order Number
PAR.Order_Number = LCL.Order_Number;

// PAR.Order Type_Sales = LCL.Order Type_Sales
PAR.Order_Type_Sales = LCL.Order_Type_Sales;

// PAR.Ship To Customer = LCL.Ship To Customer
PAR.Ship_To_Customer = LCL.Ship_To_Customer;

// PAR.Ship To Name = LCL.USR Customer Short Name
PAR.Ship_To_Name = LCL.USR_Customer_Short_Name;

// PAR.Customer Purchase Order # = LCL.Customer Purchase Order #
PAR.Customer_Purchase_Order_# = LCL.Customer_Purchase_Order_#;

// PAR.Order Date = LCL.Order Date
PAR.Order_Date = LCL.Order_Date;

// PAR.Header Status = LCL.Header Status
PAR.Header_Status = LCL.Header_Status;

// PAR.USR Program name = LCL.USR Program name
PAR.USR_Program_name = LCL.USR_Program_name;

RETURN;

ENDIF;

ENDIF;

//?05/17/24 SP S300250-End
//?USER: Process subfile record (Pre-confirm)

//?5=Process request for detail
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF RCD.Billing Activity Type is Credit or Debit Memo
IF RCD.Billing_Activity_Type = '2'/'3';

// Call program DSP Credit/Debit Memo  D1.
CALL PROGRAM(DSP Credit/Debit Memo  D1) ('PDIXD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Date);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Event Code is Shipped Thru 07 History
IF RCD.Event_Code >= '04';
AND RCD.Event_Code <= '07';

// Call program DSP Ord Inq Ship Dtl   DF.
CALL PROGRAM(DSP Ord Inq Ship Dtl   DF) ('PDP3DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(PAR.Application_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

ENDIF;

ENDIF;

//?8=Process request Ordered vs. Shipped
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

CASE;

// IF RCD.Billing Activity Type is Credit or Debit Memo
IF RCD.Billing_Activity_Type = '2'/'3';

// Send information message - 'No Shipping Detail for CM/DM'
MESSAGE(USR2328 *INFO);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);

ENDIF;

ENDIF;

//?9=Process Display Dispatch/Tracer request (disabled if Live w/TPM)
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

//?** 05/19/16   RMC E4119  remove live with tpm check
// Call program DSP Dispatch/Tracer    DF.
CALL PROGRAM(DSP Dispatch/Tracer    DF) ('PDT3DFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

//?6=Print Manifest
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

EXECUTE FUNCTION(Upd Fax Detail        RT) TYPE(RTVOBJ) FILE(OPEYCPP)           AB1206264;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('04');
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Create Fax Detail) TYPE(CRTOBJ) FILE(PKEAREP)                  AB1206170;
 PARAMETER(PAR.FD_Application_Code);
 PARAMETER(PAR.FD_Fax_Area_Code);
 PARAMETER(PAR.FD_Fax_Number);
 PARAMETER(PAR.FD_Fax_Attention);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Change Fax Detail) TYPE(CHGOBJ) FILE(PKEAREP)                  AB1206171;
 PARAMETER(DB1.FD_Application_Code);
 PARAMETER(DB1.FD_Fax_Area_Code);
 PARAMETER(DB1.FD_Fax_Number);
 PARAMETER(PAR.FD_Fax_Attention);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?Send error for Order not being shipped
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Order is Not Shipped.'
ERROR(USR1363);
MSGPARM(RCD.Order_Number);

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

//?Send error for Order not being shipped
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Order Number 1  PASS  USR = RCD.Order Number
PAR.Order_Number_1_PASS_USR = RCD.Order_Number;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?Submit Manifest Print
// Call program PRT Manifest           PV.
CALL PROGRAM(PRT Manifest           PV) ('OMFDPVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('R');

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

ENDIF;

//?7=Reprint Invoice
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF PAR.Display Flag is No
IF PAR.Display_Flag = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Order Type-Sales  RT) TYPE(RTVOBJ) FILE(OPC0REP)           AC1683603;
PARAMETER(JOB.*USER);
PARAMETER('O/P');
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.USR_Order_Type_Sales);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(PAR.User_Profile_Name);
PARAMETER(LCL.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.Header Status is Complete
IF RCD.Header_Status = 'C';

// AND RCD.Order Type - Sales is Regular Order
AND RCD.Order_Type_Sales = 'OR';

// AND LCL.USR Order Type - Sales is Regular Order
AND ( LCL.USR_Order_Type_Sales = 'OR';

// OR LCL.User Code Model is Credit
OR LCL.User_Code_Model = 'PORKCRDT' );

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// LCL.Order Number 2  PASS  USR = RCD.Order Number
LCL.Order_Number_2_PASS_USR = RCD.Order_Number;

//?Use Usr Active Flag to signal Invoice print is from the Reprint option
// LCL.Reprint Status USR = CND.Reprint
LCL.Reprint_Status_USR = 'R';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// LCL.A/R Customer Num Pass USR = RCD.Bill to Customer
LCL.A_R_Customer_Num_Pass_USR = RCD.Bill_to_Customer;

// LCL.Job Name CDE = JOB.*JOB
LCL.Job_Name_CDE = JOB.*JOB;

// LCL.Job Number USR = CVTVAR(JOB.*Job number)
LCL.Job_Number_USR = CVTVAR(JOB.*Job_number);

EXECUTE FUNCTION(Rtv One Invoice /PO   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1801817;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.One_Invoice_Per_PO);
{
 //?USER: Processing if Data record not found

 // PAR.One Invoice Per PO = CND.No
 PAR.One_Invoice_Per_PO = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.One Invoice Per PO is Yes
IF LCL.One_Invoice_Per_PO = 'Y';

EXECUTE FUNCTION(Crt WF Invoice/Combine CR) TYPE(CRTOBJ) FILE(PMAFCPP)          AC1802039;
PARAMETER(LCL.Job_Name_CDE);
PARAMETER(LCL.Job_Number_USR);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Bill_to_Name);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER(RCD.Ship_To_Name);
PARAMETER('N');
PARAMETER(LCL.One_Invoice_Per_PO);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER('N');
PARAMETER(RCD.Billing_Activity_Type);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Bill_to_Customer);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER('A');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
PARAMETER(LCL.Job_Name_CDE);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Bill_to_Name);
PARAMETER('N');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
{
 //?USER: Processing if Data record already exists

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


ENDIF;

//?102605 SLM SET PROC CUST TYPE TO "OR" for Ord seletion
//?        so no check on customer type will be performed
// Call program PRT Invc/Pre-Invc Reg  UP.
CALL PROGRAM(PRT Invc/Pre-Invc Reg  UP) ('PDTLUPR');
PARAMETER(PGM.*Return_code);
PARAMETER('PDR4PCLP');
PARAMETER(JOB.*JOB);
PARAMETER(PAR.Application_Code);
PARAMETER(LCL.Job_Name_CDE);
PARAMETER(LCL.Job_Number_USR);
PARAMETER(RCD.Billing_Activity_Type);
PARAMETER('Reprint Invoice');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Order_Number_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(LCL.Reprint_Status_USR);
PARAMETER('N');
PARAMETER('N');
PARAMETER('I');
PARAMETER(LCL.A_R_Customer_Num_Pass_USR);
PARAMETER('OR');

//?Message if printed
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?16=Display Order Header
CASE;

// IF RCD.*SFLSEL is Option 16
IF RCD.*SFLSEL = '16';

// Call program Dsp Order Header       PV.
CALL PROGRAM(Dsp Order Header       PV) ('OMB5PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(PAR.Application_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?17=Display Export Document  Disable if Live w/TPM     E004019
CASE;

// IF RCD.*SFLSEL is Option 17
IF RCD.*SFLSEL = '17';

CASE;

// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

CASE;

// IF RCD.Country Code is Russia
IF RCD.Country_Code = 'RUS';

// Call program Dsp Export Document   DR.
CALL PROGRAM(Dsp Export Document   DR) ('PPD0D1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('E');
PARAMETER(RCD.Country_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Dsp Export Document   DR.
CALL PROGRAM(Dsp Export Document   DR) ('PPD0D1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('H');
PARAMETER(RCD.Country_Code);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?19=Display load             Disable if Live w/TPM     E004019
CASE;

// IF RCD.*SFLSEL is Option 19
IF RCD.*SFLSEL = '19';

// Call program DSP Load Plan          DF.
CALL PROGRAM(DSP Load Plan          DF) ('PDSLDFR');
PARAMETER(RCD.Load_ID);

ENDIF;

//?P=Select Plant Floor system   Disable if Live w/TPM   E004019
CASE;

// IF RCD.*SFLSEL is Plant Floor System
IF RCD.*SFLSEL = 'P';

//?Load id >0 and LDORDD is active    else if ORDONL is active
CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
PARAMETER(RCD.Company_Number);
PARAMETER('LDORDD');
PARAMETER(LCL.PFS_AccuSort_Active);
PARAMETER(LCL.PFS_Carlisle_Active);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.PFS Carlisle Active is Yes
IF LCL.PFS_Carlisle_Active = 'Y';

// Call program PFS Lock Load/Order   XF.
CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
PARAMETER(RCD.Load_ID);

ENDIF;

//?Load id >0 and LDORDD is active    else if ORDONL is active
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
PARAMETER(RCD.Company_Number);
PARAMETER('ORDONL');
PARAMETER(LCL.PFS_AccuSort_Active);
PARAMETER(LCL.PFS_Carlisle_Active);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.PFS Carlisle Active is Yes
IF LCL.PFS_Carlisle_Active = 'Y';

// LCL.Load Status = CND.*Blank
LCL.Load_Status = *BLANK;

// Call program Zzz Order Header      XF.
CALL PROGRAM(Zzz Order Header      XF) ('PBEYXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Load_Status);

ENDIF;

ENDIF;

ENDIF;

//?20=Email/Fax BOL   - new option 3/3/08 RMC FP1110
CASE;

// IF RCD.*SFLSEL is Option 20
IF RCD.*SFLSEL = '20';

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(PAR.Company_Organization);

//?Allow for HPB Only
CASE;

// IF PAR.Company Organization is Not HPB
IF PAR.Company_Organization = 'D'/'S';

//?Allow for HPB Only
// IF *OTHERWISE
IF *OTHERWISE;

//?Build workfile
CASE;

// IF RCD.Header Status is Confirmed & Complete
IF RCD.Header_Status = 'C'/'R';

// AND RCD.Order Type - Sales is Regular Order
AND ( RCD.Order_Type_Sales = 'OR';

// OR RCD.Order Type - Sales is Transfer Order
OR RCD.Order_Type_Sales = 'TR' );

// AND RCD.Load ID is GT Zero
AND RCD.Load_ID > *ZERO;

//?Create workfile rcd if all orders have the same ship to cust#
CASE;

// IF RCD.Bill to Customer EQ PAR.Ship to Customer Pass USR
IF RCD.Bill_to_Customer = PAR.Ship_to_Customer_Pass_USR;

// OR PAR.Ship to Customer Pass USR is Not entered
OR PAR.Ship_to_Customer_Pass_USR = *ZERO;

// PAR.Ship to Customer Pass USR = RCD.Bill to Customer
PAR.Ship_to_Customer_Pass_USR = RCD.Bill_to_Customer;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// LCL.Order Number 2  PASS  USR = RCD.Order Number
LCL.Order_Number_2_PASS_USR = RCD.Order_Number;

//?Use Usr Active Flag to signal Invoice print is from the Reprint option
// LCL.Reprint Status USR = CND.Reprint
LCL.Reprint_Status_USR = 'R';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// LCL.A/R Customer Num Pass USR = RCD.Bill to Customer
LCL.A_R_Customer_Num_Pass_USR = RCD.Bill_to_Customer;

// LCL.Number Value - 7 = JOB.*Job number * CON.10 *
LCL.Number_Value_7 = JOB.*Job_number * 10;

// LCL.Number Value - 7 = LCL.Number Value - 7 + LCL.Count USR
LCL.Number_Value_7 = LCL.Number_Value_7 + LCL.Count_USR;

// LCL.Text USR 7 = CVTVAR(LCL.Number Value - 7)
LCL.Text_USR_7 = CVTVAR(LCL.Number_Value_7);

// LCL.Job Name CDE = CONCAT(CON.BOL,LCL.Text USR 7,CON.*ZERO)
LCL.Job_Name_CDE = 'BOL' + LCL.Text_USR_7 (*ZERO);

// LCL.Customer Name         USR = RCD.Customer Name         USR
LCL.Customer_Name_USR = RCD.Customer_Name_USR;

EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
PARAMETER(LCL.Job_Name_CDE);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER(RCD.Customer_Name_USR);
PARAMETER(RCD.Bill_to_Name);
PARAMETER('N');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(*BLANK);
{
 //?USER: Processing if Data record already exists

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Create workfile rcd if all orders have the same ship to cust#
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Bill to customers must match for all selected orders.'
ERROR(USR3901);
MSGPARM(RCD.Bill_to_Customer);

ENDIF;

// PAR.USR Display 1 = CND.Yes
PAR.USR_Display_1 = 'Y';

//?Build workfile
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?Allow for Seaboard- check customer set up too    4/15/20 R16455
CASE;

// IF PAR.Company Organization is Seaboard
IF PAR.Company_Organization = 'S';

//?print/email one load at a time
CASE;

// IF RCD.Header Status is Confirmed & Complete
IF RCD.Header_Status = 'C'/'R';

// AND RCD.Order Type - Sales is Regular Order
AND ( RCD.Order_Type_Sales = 'OR';

// OR RCD.Order Type - Sales is Transfer Order
OR RCD.Order_Type_Sales = 'TR' );

// AND RCD.Load ID is GT Zero
AND RCD.Load_ID > *ZERO;

EXECUTE FUNCTION(RTV CDE by entry type RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC2044549;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER('SH-BOL');
PARAMETER(*ZERO);
PARAMETER(LCL.CDE_Name);
PARAMETER('E');
PARAMETER(LCL.CDE_Destination);
PARAMETER('A');
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.CDE Destination Type EQ PAR.CDE Destination Type
 IF DB1.CDE_Destination_Type = PAR.CDE_Destination_Type;

 // AND DB1.Record Status EQ PAR.Record Status
 AND DB1.Record_Status = PAR.Record_Status;

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.CDE Destination is Entered
IF LCL.CDE_Destination <> *BLANK;

EXECUTE FUNCTION(RTV Whse Acct Co      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1809259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


// Call program EXC Eml Sh-BOL p/load XF.
SBMJOB;
CALL PROGRAM(EXC Eml Sh-BOL p/load XF) ('PUQZXFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER('SH-BOL');
PARAMETER(*ZERO);
PARAMETER('E');
PARAMETER('A');
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Accounting_Company);
SBMJOBOVR JOB(BOLEMAIL);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'Email has been submitted'
MESSAGE(USR2977 *INFO);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

//?print/email one load at a time
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

ENDIF;

//?21=Display Customer Comments
CASE;

// IF RCD.*SFLSEL is Option 21
IF RCD.*SFLSEL = '21';

// Call program Dsp Customer Comment  DF.
CALL PROGRAM(Dsp Customer Comment  DF) ('PMH6DFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Blank_for_3_USR);
PARAMETER(RCD.Customer_Name_USR);

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Option 20=Email/Fax BOL
CASE;

// IF RCD.*SFLSEL is Option 20
IF RCD.*SFLSEL = '20';

//?HPB Process
CASE;

// IF PAR.Company Organization is High Plains Biodiesel
IF PAR.Company_Organization = 'H';

CASE;

// IF LCL.Email Address is Blank
IF LCL.Email_Address = *BLANK;

// AND LCL.Fax Number is Not Entered
AND LCL.Fax_Number = *BLANK;

// Call program PMT Cust to Eml/Fax   PV.
CALL PROGRAM(PMT Cust to Eml/Fax   PV) ('PMSOPVR');
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.Email_Address);
PARAMETER(LCL.Fax_Number);
PARAMETER(LCL.Company_Recipient_Name);
PARAMETER(** Bill of Ladings **);
PARAMETER(LCL.FAX_DTL_Status_1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Whse Acct Co      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1809259;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

//?submit job to email per jobname
//?get fax bol overlay name
// LCL.CDD Type = CND.Bill of Lading
LCL.CDD_Type = 'BL';

// LCL.CDD Department Code = CND.TRAFFIC BOL Fax
LCL.CDD_Department_Code = 'TRAFFX';

// Call program RTV CDD for Overlays   XF.
CALL PROGRAM(RTV CDD for Overlays   XF) ('PMG9XFR');
PARAMETER(LCL.Accounting_Company);
PARAMETER(LCL.CDD_Type);
PARAMETER(LCL.CDD_Department_Code);
PARAMETER(LCL.Generic_Heading);
PARAMETER(LCL.CDD_Program_Name);
PARAMETER(LCL.CDD_Printer_File_Name);
PARAMETER(LCL.CDD_Additional_Object);
PARAMETER(LCL.CDD_Sender_Phone);
PARAMETER(LCL.CDD_Sender_Fax);
PARAMETER(LCL.Output_Queue);
PARAMETER(LCL.Hold_File);
PARAMETER(LCL.Save_File);
PARAMETER(LCL.Source_Drawer);
PARAMETER(LCL.Printer_Device_Type);
PARAMETER(LCL.Page_Length_2);
PARAMETER(LCL.Page_Width_2);
PARAMETER(LCL.Page_LPI);
PARAMETER(LCL.Page_CPI);
PARAMETER(LCL.Page_Overflow);
PARAMETER(LCL.Page_Rotation);
PARAMETER(LCL.CDD_Comment_1);
PARAMETER(LCL.CDD_Comment_2);
PARAMETER(LCL.CDD_Comment_3);
PARAMETER(LCL.CDD_Comment_4);
PARAMETER(LCL.CDD_Comment_5);
PARAMETER(LCL.Record_Status);

// LCL.CDD Name of Overlay Back = CON.*BLANK
LCL.CDD_Name_of_Overlay_Back = *BLANK;

CASE;

// IF LCL.CDD Program Name is HPB BOL EMail
IF LCL.CDD_Program_Name = 'PMUCPFR';

// Call program RTV CDD for Overlays   XF.
CALL PROGRAM(RTV CDD for Overlays   XF) ('PMG9XFR');
PARAMETER(LCL.Accounting_Company);
PARAMETER('BK');
PARAMETER('TRAFF');
PARAMETER(LCL.CDD_Name_of_Overlay_Back);
PARAMETER(NLL.CDD_Program_Name);
PARAMETER(NLL.CDD_Printer_File_Name);
PARAMETER(NLL.CDD_Additional_Object);
PARAMETER(NLL.CDD_Sender_Phone);
PARAMETER(NLL.CDD_Sender_Fax);
PARAMETER(NLL.Output_Queue);
PARAMETER(NLL.Hold_File);
PARAMETER(NLL.Save_File);
PARAMETER(NLL.Source_Drawer);
PARAMETER(NLL.Printer_Device_Type);
PARAMETER(NLL.Page_Length_2);
PARAMETER(NLL.Page_Width_2);
PARAMETER(NLL.Page_LPI);
PARAMETER(NLL.Page_CPI);
PARAMETER(NLL.Page_Overflow);
PARAMETER(NLL.Page_Rotation);
PARAMETER(NLL.CDD_Comment_1);
PARAMETER(NLL.CDD_Comment_2);
PARAMETER(NLL.CDD_Comment_3);
PARAMETER(NLL.CDD_Comment_4);
PARAMETER(NLL.CDD_Comment_5);
PARAMETER(NLL.Record_Status);

ENDIF;

// Call program CLP ESNDMAIL BOL-Eml  UP.
SBMJOB;
CALL PROGRAM(CLP ESNDMAIL BOL-Eml  UP) ('PMSQUPC');
PARAMETER(*BLANK);
PARAMETER(LCL.Email_Address);
PARAMETER('Bill of Lading');
PARAMETER('Bill of Lading');
PARAMETER(LCL.Job_Name_CDE);
PARAMETER(LCL.Generic_Heading);
PARAMETER(LCL.CDD_Name_of_Overlay_Back);
SBMJOBOVR JOB(BOLEMAIL);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// IF LCL.Fax Number is Entered
IF LCL.Fax_Number <> *BLANK;

//?get fax bol cover sheet pgm
// LCL.CDD Type = CND.Fax
LCL.CDD_Type = 'FX';

// LCL.CDD Department Code = CND.Traffic
LCL.CDD_Department_Code = 'TRAFF';

// Call program RTV CDD for Overlays   XF.
CALL PROGRAM(RTV CDD for Overlays   XF) ('PMG9XFR');
PARAMETER(LCL.Accounting_Company);
PARAMETER(LCL.CDD_Type);
PARAMETER(LCL.CDD_Department_Code);
PARAMETER(LCL.CDD_Name_of_Overlay);
PARAMETER(LCL.CDD_Program_Name);
PARAMETER(LCL.CDD_Printer_File_Name);
PARAMETER(LCL.CDD_Additional_Object);
PARAMETER(LCL.CDD_Sender_Phone);
PARAMETER(LCL.CDD_Sender_Fax);
PARAMETER(LCL.Output_Queue);
PARAMETER(LCL.Hold_File);
PARAMETER(LCL.Save_File);
PARAMETER(LCL.Source_Drawer);
PARAMETER(LCL.Printer_Device_Type);
PARAMETER(LCL.Page_Length_2);
PARAMETER(LCL.Page_Width_2);
PARAMETER(LCL.Page_LPI);
PARAMETER(LCL.Page_CPI);
PARAMETER(LCL.Page_Overflow);
PARAMETER(LCL.Page_Rotation);
PARAMETER(LCL.CDD_Comment_1);
PARAMETER(LCL.CDD_Comment_2);
PARAMETER(LCL.CDD_Comment_3);
PARAMETER(LCL.CDD_Comment_4);
PARAMETER(LCL.CDD_Comment_5);
PARAMETER(LCL.Record_Status);

//?get fax bol overlay name
// LCL.CDD Type = CND.Bill of Lading
LCL.CDD_Type = 'BL';

// LCL.CDD Department Code = CND.TRAFFIC BOL Fax
LCL.CDD_Department_Code = 'TRAFFX';

// Call program RTV CDD for Overlays   XF.
CALL PROGRAM(RTV CDD for Overlays   XF) ('PMG9XFR');
PARAMETER(LCL.Accounting_Company);
PARAMETER(LCL.CDD_Type);
PARAMETER(LCL.CDD_Department_Code);
PARAMETER(LCL.Generic_Heading);
PARAMETER(LCL.CDD_Program_Name);
PARAMETER(LCL.CDD_Printer_File_Name);
PARAMETER(LCL.CDD_Additional_Object);
PARAMETER(LCL.CDD_Sender_Phone);
PARAMETER(LCL.CDD_Sender_Fax);
PARAMETER(LCL.Output_Queue);
PARAMETER(LCL.Hold_File);
PARAMETER(LCL.Save_File);
PARAMETER(LCL.Source_Drawer);
PARAMETER(LCL.Printer_Device_Type);
PARAMETER(LCL.Page_Length_2);
PARAMETER(LCL.Page_Width_2);
PARAMETER(LCL.Page_LPI);
PARAMETER(LCL.Page_CPI);
PARAMETER(LCL.Page_Overflow);
PARAMETER(LCL.Page_Rotation);
PARAMETER(LCL.CDD_Comment_1);
PARAMETER(LCL.CDD_Comment_2);
PARAMETER(LCL.CDD_Comment_3);
PARAMETER(LCL.CDD_Comment_4);
PARAMETER(LCL.CDD_Comment_5);
PARAMETER(LCL.Record_Status);

// LCL.CDD Name of Overlay Back = CON.*BLANK
LCL.CDD_Name_of_Overlay_Back = *BLANK;

CASE;

// IF LCL.CDD Program Name is HPB BOL EMail
IF LCL.CDD_Program_Name = 'PMUCPFR';

// Call program RTV CDD for Overlays   XF.
CALL PROGRAM(RTV CDD for Overlays   XF) ('PMG9XFR');
PARAMETER(LCL.Accounting_Company);
PARAMETER('BK');
PARAMETER('TRAFF');
PARAMETER(LCL.CDD_Name_of_Overlay_Back);
PARAMETER(NLL.CDD_Program_Name);
PARAMETER(NLL.CDD_Printer_File_Name);
PARAMETER(NLL.CDD_Additional_Object);
PARAMETER(NLL.CDD_Sender_Phone);
PARAMETER(NLL.CDD_Sender_Fax);
PARAMETER(NLL.Output_Queue);
PARAMETER(NLL.Hold_File);
PARAMETER(NLL.Save_File);
PARAMETER(NLL.Source_Drawer);
PARAMETER(NLL.Printer_Device_Type);
PARAMETER(NLL.Page_Length_2);
PARAMETER(NLL.Page_Width_2);
PARAMETER(NLL.Page_LPI);
PARAMETER(NLL.Page_CPI);
PARAMETER(NLL.Page_Overflow);
PARAMETER(NLL.Page_Rotation);
PARAMETER(NLL.CDD_Comment_1);
PARAMETER(NLL.CDD_Comment_2);
PARAMETER(NLL.CDD_Comment_3);
PARAMETER(NLL.CDD_Comment_4);
PARAMETER(NLL.CDD_Comment_5);
PARAMETER(NLL.Record_Status);

ENDIF;

//?submit job to fax bols per jobname
// LCL.Company Number Pass   USR = LCL.Accounting Company
LCL.Company_Number_Pass_USR = LCL.Accounting_Company;

// Call program Zzz ESNDMAIL BOL-Fax  UP.
SBMJOB;
CALL PROGRAM(Zzz ESNDMAIL BOL-Fax  UP) ('PMSRUPC');
PARAMETER(*BLANK);
PARAMETER(LCL.Fax_Number);
PARAMETER('Bill of Lading');
PARAMETER(LCL.Job_Name_CDE);
PARAMETER(LCL.CDD_Name_of_Overlay);
PARAMETER(LCL.CDD_Name_of_Overlay_Back);
PARAMETER(LCL.Customer_Name_USR);
PARAMETER(LCL.Company_Recipient_Name);
PARAMETER(LCL.Company_Number_Pass_USR);
PARAMETER(LCL.Generic_Heading);
SBMJOBOVR JOB(BOLEMAIL);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Final processing (Post-confirm)

//?FP1110 RMC 03/06/08  Reset fields used in email/fax option 20
// LCL.Email Address = CON.*BLANK
LCL.Email_Address = *BLANK;

// LCL.Fax Number = CON.*BLANK
LCL.Fax_Number = *BLANK;

// LCL.Count USR = LCL.Count USR + CON.1
LCL.Count_USR = LCL.Count_USR + 1;

// PAR.Ship to Customer Pass USR = CON.*ZERO
PAR.Ship_to_Customer_Pass_USR = *ZERO;

//?USER: Process command keys

//?** F4 on Company Number
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Company Number
AND PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

ENDIF;

//?** F14=Alternate View 2
CASE;

// IF CTL.*CMD key is *Display Order
IF CTL.*CMD_key = '14';

// PAR.Accounting Company Number = CTL.Accounting Company Number
PAR.Company_Number = CTL.Company_Number;

// PAR.Order Number = CTL.Order Number
PAR.Order_Number = CTL.Order_Number;

// PAR.Order Type - Sales = CTL.Order Type - Sales
PAR.Order_Type_Sales = CTL.Order_Type_Sales;

// PAR.Ship To Customer = CTL.Ship To Customer
PAR.Ship_To_Customer = CTL.Ship_To_Customer;

// PAR.Ship To Name = CTL.USR Customer Short Name
PAR.Ship_To_Name = CTL.USR_Customer_Short_Name;

// PAR.Customer Purchase Order # = CTL.Customer Purchase Order #
PAR.Customer_Purchase_Order_# = CTL.Customer_Purchase_Order_#;

// PAR.Order Date = CTL.Order Date
PAR.Order_Date = CTL.Order_Date;

// PAR.Header Status = CTL.Header Status
PAR.Header_Status = CTL.Header_Status;

// PAR.USR Program name = CND.Order Inquiry View 2
PAR.USR_Program_name = 'PDWXDFR';

RETURN;

//?Moved 1st line on Alt screen to CTL to position.  If don't want
//?to reposition, pass WRK (move PAR to WRK before call)  and don't reload
ENDIF;

//?** F15=Alternate view 3
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// PAR.Accounting Company Number = CTL.Accounting Company Number
PAR.Company_Number = CTL.Company_Number;

// PAR.Order Number = CTL.Order Number
PAR.Order_Number = CTL.Order_Number;

// PAR.Order Type - Sales = CTL.Order Type - Sales
PAR.Order_Type_Sales = CTL.Order_Type_Sales;

// PAR.Ship To Customer = CTL.Ship To Customer
PAR.Ship_To_Customer = CTL.Ship_To_Customer;

// PAR.Ship To Name = CTL.USR Customer Short Name
PAR.Ship_To_Name = CTL.USR_Customer_Short_Name;

// PAR.Customer Purchase Order # = CTL.Customer Purchase Order #
PAR.Customer_Purchase_Order_# = CTL.Customer_Purchase_Order_#;

// PAR.Order Date = CTL.Order Date
PAR.Order_Date = CTL.Order_Date;

// PAR.Header Status = CTL.Header Status
PAR.Header_Status = CTL.Header_Status;

// PAR.USR Program name = CND.Order Inquiry View 3
PAR.USR_Program_name = 'PDWZDFR';

RETURN;

//?Moved 1st line on Alt screen to CTL to position.  If don't want
//?to reposition, pass WRK (move PAR to WRK before call)  and don't reload
ENDIF;

//?** F16=Item Inquiry
CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

// Call program DSP Item Order Inquiry DF.
CALL PROGRAM(DSP Item Order Inquiry DF) ('PDPSDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(CTL.Order_Date);
PARAMETER(CTL.Header_Status);
PARAMETER(WRK.Credit_Hold);
PARAMETER(WRK.Production_Hold);
PARAMETER(WRK.New_Customer_Hold);
PARAMETER(PAR.Application_Code);

ENDIF;

//?** F17=Order Status by Route of non-invoiced orders
CASE;

// IF CTL.*CMD key is CF17
IF CTL.*CMD_key = '17';

// Call program WW Order Status Inq    DF.
CALL PROGRAM(WW Order Status Inq    DF) ('PDO3DFR');
PARAMETER(PAR.Display_Flag);

ENDIF;

//?USER: Exit program processing

//?CMD 3 Exit
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.USR Program name = CON.*BLANK
PAR.USR_Program_name = *BLANK;

RETURN;

ENDIF;

