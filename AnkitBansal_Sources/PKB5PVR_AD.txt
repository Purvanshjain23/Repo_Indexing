// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKB5PVR
// ?Date: 14.08.2025 Time: 02:51:30
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E15489 JBB  9/18/19 - Limit Kill Date Range
//?- Limit Kill Date range to 2 years
//?- Add From Date and To Date relationship checking.  If From Date
//?  is greater than To Date, send error message.
//?E50577 JJH 07/24/19 - Load Type conditions from 2D, 3D, and 4D
//?- Recompile only, no logic changes
//?E11245 JJH 07/20/17 - Receiving Report Modifications
//?- Add Selection by Source Code
//?ELDTYPE JBB 10/26/17 - Add Load Type to screen
//?- Added Load Type User to screen as a promptable field.
//?E14956 JBB  5/07/19 - Validate Company Number on screen
//?- The company number validation is currently performed in the
//?  User: Load.  It needs to be under the Validate Fields user
//?  point.
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.CC Company Number = WRK.CC Company Number
DTL.CC_Company_Number = WRK.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// DTL.Receiving Rpt Type    USR = CND.By Day
DTL.Receiving_Rpt_Type_USR = 'D';

// DTL.Report Type Desc Usr = Condition name of DTL.Receiving Rpt Type    USR
DTL.Report_Type_Desc_Usr = RTVCND(DTL.Receiving_Rpt_Type_USR);

ENDIF;

//?5/07/19 JBB E14956 - Validate Company Number
//?Validation moved to Validate fields user point
//?USER: Validate fields

//? 5/07/19 JBB E14956 - Validate Company Number
CASE;

// IF DTL.CC Company Number is *ZERO
IF DTL.CC_Company_Number = *ZERO;

// Send error message - 'Value Required.'
ERROR(PRK1406);
MSGPARM(DTL.CC_Company_Number);

//? 5/07/19 JBB E14956 - Validate Company Number
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Oms_Name);
PARAMETER(NLL.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


ENDIF;

//?Shift selection not allowed for summary  or log reports
CASE;

// IF DTL.TH Schedule Kill Shift NE WRK.Blank Usr 1 fld Usr
IF DTL.TH_Schedule_Kill_Shift <> WRK.Blank_Usr_1_fld_Usr;

CASE;

// IF DTL.Receiving Rpt Type    USR is Summary
IF DTL.Receiving_Rpt_Type_USR = 'S';

// OR DTL.Receiving Rpt Type    USR is Log
OR DTL.Receiving_Rpt_Type_USR = 'L';

// Send error message - 'Summary or Log Report not allowed with Shift Selection'
ERROR(PRK0736);

ENDIF;

ENDIF;

//?Prompt Farm Site
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Farm Site USR
AND PGM.*Cursor_field = DTL.Farm_Site_USR;

// Call program Sel HPS Farm Site     UP.
CALL PROGRAM(Sel HPS Farm Site     UP) ('HP5003');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.Farm_Site_USR);
PARAMETER(DTL.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);

ENDIF;

//?Farm Site selection not allowed for summary  or log reports
CASE;

// IF DTL.Farm Site USR NE WRK.Zero USR
IF DTL.Farm_Site_USR <> WRK.Zero_USR;

CASE;

// IF DTL.Receiving Rpt Type    USR is Summary
IF DTL.Receiving_Rpt_Type_USR = 'S';

// OR DTL.Receiving Rpt Type    USR is Log
OR DTL.Receiving_Rpt_Type_USR = 'L';

// Send error message - 'Summary or Log Report not allowed with Farm Site Selection'
ERROR(PRK0835);

ENDIF;

ENDIF;

//?Prompt Producer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.PD Producer Code
AND PGM.*Cursor_field = DTL.PD_Producer_Code;

// Call program Sel Producer          SR.
CALL PROGRAM(Sel Producer          SR) ('PKA1SRR');
PARAMETER(DTL.PD_Producer_Code);

ENDIF;

//?Val Producer
CASE;

// IF DTL.PD Producer Code is Entered
IF DTL.PD_Producer_Code <> *BLANK;

EXECUTE FUNCTION(Val Prod Existance    RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1176016;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Producer not found.'
ERROR(PRK0009);

ENDIF;

ENDIF;

//?Validate dates
CASE;

// IF DTL.Date To   USR LT DTL.Date From USR
IF DTL.Date_To_USR < DTL.Date_From_USR;

// Send error message - 'From date cannot be later than to date.'
ERROR(PRK1450);
MSGPARM(DTL.Date_From_USR);
MSGPARM(DTL.Date_To_USR);

ENDIF;

//?E11245 JJH 07/20/17 - Validate Source Code
//?Validate Source
CASE;

// IF DTL.SR Source Code is NE Blank
IF DTL.SR_Source_Code <> *BLANK;

EXECUTE FUNCTION(Val Source-2          RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1334189;
PARAMETER(DTL.SR_Source_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Source not found.'
ERROR(PRK0005);

ENDIF;

ENDIF;

//?E11245 JJH 07/20/17 - Prompt Source
//?Prompt Source
CASE;

// IF PGM.*Cursor field <IS> DTL.SR Source Code
IF PGM.*Cursor_field = DTL.SR_Source_Code;

// AND DTL.*CMD key is *Prompt
AND DTL.*CMD_key = '04';

// Call program Sel Source            SR.
CALL PROGRAM(Sel Source            SR) ('PKDRSRR');
PARAMETER(DTL.SR_Source_Code);

ENDIF;

//?CALC: Screen function fields

// DTL.Int/External Desc Usr = Condition name of DTL.SR Type
DTL.Int_External_Desc_Usr = RTVCND(DTL.SR_Type);

// DTL.Report Type Desc Usr = Condition name of DTL.Receiving Rpt Type    USR
DTL.Report_Type_Desc_Usr = RTVCND(DTL.Receiving_Rpt_Type_USR);

//?Validate farm site selection
CASE;

// IF DTL.Farm Site USR NE WRK.Zero USR
IF DTL.Farm_Site_USR <> WRK.Zero_USR;

// Call program Val HPS Farm Site     UP.
CALL PROGRAM(Val HPS Farm Site     UP) ('HP256');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.Farm_Site_USR);
PARAMETER(WRK.Txt_Field_Not_Needed);
PARAMETER(DTL.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);

CASE;

// IF DTL.Farm site Name f/ HPS USR EQ WRK.Blank USR
IF DTL.Farm_site_Name_f_HPS_USR = WRK.Blank_USR;

// Send error message - 'Farm Site &1 invalid.'
ERROR(PRK0688);
MSGPARM(DTL.Farm_Site_USR);

ENDIF;

//?Validate farm site selection
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Farm site Name f/ HPS USR = CON.*BLANK
DTL.Farm_site_Name_f_HPS_USR = *BLANK;

ENDIF;

//?E11245 JJH 07/20/17 - Display SR Source Code Description
EXECUTE FUNCTION(SR Description DRV) TYPE(DRVFLD)                               AB1338629;
PARAMETER(DTL.SR_Description_DRV);
PARAMETER(DTL.SR_Source_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Source Desc       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1124642;
 PARAMETER(PAR.SR_Source_Code);
 PARAMETER(PAR.SR_Description_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

// LCL.Date To   USR = DTL.Date From USR + CON.2 *YEARS
LCL.Date_To_USR = DATEINCR(DTL.Date_From_USR 2 'YR' 1111111 'NONE' 'N' 1);

//?SENDERRMSG: Kill Date Range > 2 years
CASE;

// IF DTL.Date To   USR GT LCL.Date To   USR
IF DTL.Date_To_USR > LCL.Date_To_USR;

// Send error message - 'Kill Date range cannot be more than 2 years.'
ERROR(PRK1550);
MSGPARM(DTL.Date_From_USR);
MSGPARM(DTL.Date_To_USR);

ENDIF;

//?USER: User defined action

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Print Receiving Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(1);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Company Number Alpha Usr = CVTVAR(DTL.CC Company Number)
WRK.Company_Number_Alpha_Usr = CVTVAR(DTL.CC_Company_Number);

// WRK.Date Alpha USR = CVTVAR(DTL.Date From USR)
WRK.Date_Alpha_USR = CVTVAR(DTL.Date_From_USR);

// WRK.Date Alpha Usr 2 = CVTVAR(DTL.Date To   USR)
WRK.Date_Alpha_Usr_2 = CVTVAR(DTL.Date_To_USR);

// DTL.TH Hog Class Type = WRK.Blank USR
DTL.TH_Hog_Class_Type = WRK.Blank_USR;

// WRK.Farm Site Alpha       USR = CVTVAR(DTL.Farm Site USR)
WRK.Farm_Site_Alpha_USR = CVTVAR(DTL.Farm_Site_USR);

// Execute command - 'SBM Prt Receiving Report'
EXECUTE COMMAND(PRK0657);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(WRK.Company_Number_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(DTL.SR_Type);
PARAMETER(DTL.Receiving_Rpt_Type_USR);
PARAMETER(DTL.TH_Schedule_Kill_Shift);
PARAMETER(WRK.Farm_Site_Alpha_USR);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.Load_Type_USR);

// DTL.Description 30 USR = WRK.Blank USR
DTL.Description_30_USR = WRK.Blank_USR;

// DTL.Int/External Desc Usr = WRK.Blank USR
DTL.Int_External_Desc_Usr = WRK.Blank_USR;

ENDIF;

