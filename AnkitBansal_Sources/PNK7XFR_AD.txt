// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNK7XFR
// ?Date: 14.08.2025 Time: 03:45:28
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?10/10/18 RMC/SLM E13896  Speed this up .
//?10/10/18 RMC/SLM chg to add from date as a position on schshipdte
//?05/23/16 RMC E4119 remove live with tpm check / parm
//?FP1309 - ADD of fields from the order header to the pstn key
EXECUTE FUNCTION(Rtv BldLdSchdPost    WFRT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1949756;
PARAMETER(PAR.PRP_Warehouse_Code);
PARAMETER(PAR.PRP_From_Date);
PARAMETER(PAR.PRP_To_Date);
PARAMETER(PAR.LSP_Accounting_Co);
PARAMETER(PAR.LSP_Prodution_Warehouse);
{
 //?USER: Initialize routine

 //?modification history
 DO;

 //?05/23/16 RMC E4119 remove live with tpm check  / parm
 //?E00466  - Chg to use qty order instead of sch qty
 //?FP1054 - do processing with prod whs and order whs
 ENDDO;

 // WRK.Item Code = CON.*ZERO
 WRK.Item_Code = *ZERO;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program Rtv Plant Co/Org      XF.
 CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(WRK.Plant_Company_Sts);
 PARAMETER(WRK.Company_Organization);

 CASE;

 // IF DB1.Production Warehouse NE PAR.LSP Prodution Warehouse
 IF DB1.Production_Warehouse <> PAR.LSP_Prodution_Warehouse;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(RTV SSD/Tm/SpecIns/RDlvRT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1977694;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Special_Instructions);
 PARAMETER(NLL.Special_Instructions_2);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(WRK.Requested_Delivery_Date);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?process detail if date selection is correct
 CASE;

 // IF WRK.Scheduled Ship Date LT PAR.From Date             USR
 IF WRK.Scheduled_Ship_Date < PAR.From_Date_USR;

 // OR WRK.Scheduled Ship Date GT PAR.To Date               USR
 OR WRK.Scheduled_Ship_Date > PAR.To_Date_USR;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?process detail if date selection is correct
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Calculate the production USING the Aged Code & Sch Shp Date from Ord
 //?the order detail
 EXECUTE FUNCTION(Val Age Information   IF) TYPE(EXCINTFUN)                      AC1984951;
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(WRK.Requested_Delivery_Date);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.LSPK_Production_Date);
 PARAMETER(LCL.Production_Date_RGT);
 PARAMETER(WRK.Error_Status);
 PARAMETER(WRK.Company_Organization);
 PARAMETER('C');
 {
  //?Execute internal function

  // WRK.Error Flag            USR = CND.Blank
  WRK.Error_Flag_USR = *BLANK;

  // PAR.Error Status = CND.blank
  PAR.Error_Status = *BLANK;

  // WRK.Error Reason Descript 1 = CON.*BLANK
  WRK.Error_Reason_Descript_1 = *BLANK;

  // WRK.Error Reason Descript 2 = CON.*BLANK
  WRK.Error_Reason_Descript_2 = *BLANK;

  // WRK.Error Reason Descript 3 = CON.*BLANK
  WRK.Error_Reason_Descript_3 = *BLANK;

  // WRK.Error Reason Descript 4 = CON.*BLANK
  WRK.Error_Reason_Descript_4 = *BLANK;

  // WRK.Error Reason Descript 5 = CON.*BLANK
  WRK.Error_Reason_Descript_5 = *BLANK;

  CASE;

  // IF PAR.Company Organization is Seaboard
  IF PAR.Company_Organization = 'S';

  CASE;

  // IF PAR.Requested Delivery Date is not entered
  IF PAR.Requested_Delivery_Date = *ZERO;

  // Send error message - 'Requested Delv Date is required'
  ERROR(USR4329);
  MSGPARM(PAR.Requested_Delivery_Date);

  // IF PAR.Scheduled Ship Date is not entered
  IF PAR.Scheduled_Ship_Date = *ZERO;

  // Send error message - 'Scheduled Ship Date is required when orders are assigned to load.'
  ERROR(USR2230);
  MSGPARM(PAR.Scheduled_Ship_Date);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Val Age information   XF.
  CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(WRK.Error_Flag_USR);
  PARAMETER(WRK.Error_Reason_Descript_1);
  PARAMETER(WRK.Error_Reason_Descript_2);
  PARAMETER(WRK.Error_Reason_Descript_3);
  PARAMETER(WRK.Error_Reason_Descript_4);
  PARAMETER(WRK.Error_Reason_Descript_5);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Item_Age_Days);
  PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
  PARAMETER(PAR.Production_Ovr_AgeDte_To);
  PARAMETER(PAR.Production_AgeDte_Fr);
  PARAMETER(PAR.Production_AgeDte_To);

  //?Verify if message should be sent if validation is required
  CASE;

  // IF WRK.Error Flag            USR is Yes
  IF WRK.Error_Flag_USR = 'Y';

  // AND PAR.Production Dates Sts Usr is Validation routine
  AND PAR.Production_Dates_Sts_Usr = 'V';

  //?message 1 Product is shipped before product is made
  CASE;

  // IF WRK.Error Reason Descript 1 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_1 <> WRK.Blank_for_30_USR;

  // Send error message - 'Prd Date is invalid for requested delivery date'
  ERROR(USR4307);
  MSGPARM(PAR.Production_AgeDte_Fr);

  ENDIF;

  //?message 2 Either Days or override date but not both
  CASE;

  // IF WRK.Error Reason Descript 2 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_2 <> WRK.Blank_for_30_USR;

  // Send error message - 'Enter Age Days or Dates'
  ERROR(USR4304);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 3 With Chill Days Either Days or Override Dates required
  CASE;

  // IF WRK.Error Reason Descript 3 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_3 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 4 From date is > then SHIP DATE
  CASE;

  // IF WRK.Error Reason Descript 4 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_4 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  //?message 5 To date is > then SHIP DATE
  CASE;

  // IF WRK.Error Reason Descript 5 NE WRK.Blank for 30          USR
  IF WRK.Error_Reason_Descript_5 <> WRK.Blank_for_30_USR;

  // Send error message - 'Override Dates is after shipped date'
  ERROR(USR4305);
  MSGPARM(PAR.Item_Age_Days);
  MSGPARM(PAR.Production_Ovr_AgeDte_Fr);
  MSGPARM(PAR.Production_Ovr_AgeDte_To);

  ENDIF;

  CASE;

  // IF PAR.Production Ovr AgeDte Fr is not entered
  IF PAR.Production_Ovr_AgeDte_Fr = *ZERO;

  // Send error message - 'Invalid Item Age Days'
  ERROR(USR4309);
  MSGPARM(PAR.Item_Age_Days);

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send error message - 'Invalid Production Override Age Frm/To Dates'
  ERROR(USR4310);
  MSGPARM(PAR.Production_AgeDte_Fr);
  MSGPARM(PAR.Production_AgeDte_To);

  ENDIF;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?Item Code Rtv Scheduling Position Grade Sts
 CASE;

 // IF DB1.Item Code NE WRK.Item Code
 IF DB1.Item_Code <> WRK.Item_Code;

 // WRK.Item Code = DB1.Item Code
 WRK.Item_Code = DB1.Item_Code;

 // WRK.Warehouse Code = DB1.Warehouse Code
 WRK.Warehouse_Code = DB1.Warehouse_Code;

 EXECUTE FUNCTION(Rtv Sched Pstn Grd sts RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1517564;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Scheduling_Position_Grade);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 //?Include the item if the Schd Pstn Grade Sts is Yes and qty is scheduled
 CASE;

 // IF PAR.Scheduling Position Grade is Yes
 IF PAR.Scheduling_Position_Grade = 'Y';

 // AND DB1.Quantity Ordered is Greater than zero
 AND DB1.Quantity_Ordered > *ZERO;

 //?Case changed to use Quantity Ordered instead of Quantity Scheduled
 //?being greater than zero.
 // PAR.Record Type = CND.Order tied to a load
 PAR.Record_Type = *BLANK;

 // PAR.Order Number = DB1.Order Number
 PAR.Order_Number = DB1.Order_Number;

 EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Ddln DprtDT/TM/Seq RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1540628;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Schedule_Sequence_Number);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Init Record Type either OR, NS
 CASE;

 // IF PAR.Load ID is Blank
 IF PAR.Load_ID = *ZERO;

 // PAR.Record Type = CND.Order not tied to a load
 PAR.Record_Type = 'OR';

 //?Init Record Type either OR, NS
 // IF PAR.Schedule Sequence Number is Zero
 IF PAR.Schedule_Sequence_Number = *ZERO;

 // PAR.Record Type = CND.No Sequence
 PAR.Record_Type = 'NS';

 ENDIF;

 //?Init Schedule Sequence Number
 CASE;

 // IF PAR.Schedule Sequence Number is Zero
 IF PAR.Schedule_Sequence_Number = *ZERO;

 // PAR.Schedule Sequence Number = CND.99999
 PAR.Schedule_Sequence_Number = 99999;

 ENDIF;

 //?E00466  - Chg to use qty order instead of sch qty
 // PAR.Scheduled Quantity = DB1.Quantity Ordered
 PAR.Scheduled_Quantity = DB1.Quantity_Ordered;

 //?Create key file with the fields at this point.
 EXECUTE FUNCTION(Rtv/Crt Ld Schd PstnWFRT) TYPE(RTVOBJ) FILE(PDMJCPP)           AC1912026;
 PARAMETER(PAR.LSP_Accounting_Co);
 PARAMETER(PAR.LSP_Prodution_Warehouse);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Schedule_Sequence_Number);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Quantity);
 PARAMETER(*ZERO);
 PARAMETER(LCL.LSPK_Order_Aged_Code);
 PARAMETER(LCL.LSPK_Production_Date);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);
 PARAMETER(LCL.LSPK_Production_Date);
 PARAMETER(LCL.Production_Date_RGT);
 PARAMETER(PAR.Record_Type);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Ld Schdl Pstn Key CR) TYPE(CRTOBJ) FILE(PDMJCPP)           AC1516079;
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.LSPK_Accounting_Company);
  PARAMETER(PAR.LSPK_Production_Whse);
  PARAMETER(PAR.LSPK_Order_Company);
  PARAMETER(PAR.LSPK_Order_Warehouse);
  PARAMETER(1);
  PARAMETER(PAR.Schedule_Sequence_Number);
  PARAMETER(PAR.Process_Sequence);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  PARAMETER(PAR.Event_Code);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Scheduled_Quantity);
  PARAMETER(PAR.Picked_to_Order);
  PARAMETER(PAR.LSPK_Order_Aged_Code);
  PARAMETER(PAR.LSPK_Production_Date);
  PARAMETER(PAR.Item_Age_Days);
  PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
  PARAMETER(PAR.Production_Ovr_AgeDte_To);
  PARAMETER(PAR.Production_AgeDte_Fr);
  PARAMETER(PAR.Production_AgeDte_To);
  PARAMETER(PAR.Record_Type);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // WRK.Sequence = DB1.Sequence + CON.1
  WRK.Sequence = DB1.Sequence + 1;

  EXECUTE FUNCTION(Crt Ld Schdl Pstn Key CR) TYPE(CRTOBJ) FILE(PDMJCPP)           AC1516079;
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.LSPK_Accounting_Company);
  PARAMETER(PAR.LSPK_Production_Whse);
  PARAMETER(PAR.LSPK_Order_Company);
  PARAMETER(PAR.LSPK_Order_Warehouse);
  PARAMETER(WRK.Sequence);
  PARAMETER(PAR.Schedule_Sequence_Number);
  PARAMETER(DB1.Process_Sequence);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  PARAMETER(PAR.Event_Code);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Scheduled_Quantity);
  PARAMETER(PAR.Picked_to_Order);
  PARAMETER(PAR.LSPK_Order_Aged_Code);
  PARAMETER(PAR.LSPK_Production_Date);
  PARAMETER(PAR.Item_Age_Days);
  PARAMETER(PAR.Production_Ovr_AgeDte_Fr);
  PARAMETER(PAR.Production_Ovr_AgeDte_To);
  PARAMETER(PAR.Production_AgeDte_Fr);
  PARAMETER(PAR.Production_AgeDte_To);
  PARAMETER(PAR.Record_Type);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

}


