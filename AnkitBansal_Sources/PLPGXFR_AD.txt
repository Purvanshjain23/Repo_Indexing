// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLPGXFR
// ?Date: 14.08.2025 Time: 02:55:02
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// Call program Val Application/User  XF.
CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('UET');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);

CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

// Send error message - 'Access Denied for User'
ERROR(PRK0298);

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?Busy Flag - Rule only want one person use this
DO;

//?Get the Busy Flag for the Eval Trans Upl
//?If the value is a Y, then this process is being used
//?by another party, if not then the user will have to call
//?for a reset for this function to continue.
ENDDO;

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEEVRMMO');
PARAMETER(LCL.System_Value_Alpha_USR);

CASE;

// IF LCL.System Value Alpha    USR is Yes
IF LCL.System_Value_Alpha_USR = 'Y';

//?insert a window to tell the user that this
//?program is busy and can not be used at this time.
// WRK.Text description = CONCAT(CON.Eval Trans Upl Maintenanc,CON.e is busy,CON.*ZERO)
WRK.Text_description = 'Eval Trans Upl Maintenanc' + 'e is busy' (0);

// Call program Pmt EvalMaintenceAllowPV.
CALL PROGRAM(Pmt EvalMaintenceAllowPV) ('PLPQPVR');
PARAMETER(WRK.Text_description);

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

//?Set company value to busy = Y
// Call program UPD HPEEVRMMO  To 'Y'  XF.
CALL PROGRAM(UPD HPEEVRMMO  To 'Y'  XF) ('PNULXFR');
PARAMETER(PAR.CC_Company_Number);

ENDIF;

// Call program WW EvalTran UplMovRmv DF.
CALL PROGRAM(WW EvalTran UplMovRmv DF) ('PLPEDFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Pmt_Current_Payment_Date);
PARAMETER(PAR.Pmt_Current_Payment_Date);
PARAMETER(PAR.Pmt_Current_Payment_Step);

EXECUTE FUNCTION(Val EvalTrnUplComProc RT) TYPE(RTVOBJ) FILE(PLBAREP)           AB1300185;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Pmt_Current_Payment_Date);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Event Process is Completed
 IF DB1.EV_Event_Process = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

//?If not found try again with 999  (records removed have 999)
EXECUTE FUNCTION(Val EvalTrnUplComProc RT) TYPE(RTVOBJ) FILE(PLBAREP)           AB1300185;
PARAMETER(999);
PARAMETER(PAR.Pmt_Current_Payment_Date);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Event Process is Completed
 IF DB1.EV_Event_Process = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


ENDIF;

CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// LCL.PRT Copies = CON.01
LCL.PRT_Copies = 01;

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Eval TrnUpl Move/Remove');
PARAMETER(LCL.PRT_Printer_Device);
PARAMETER(LCL.PRT_Hold_Output_Sts);
PARAMETER(LCL.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Copies);
PARAMETER('N');
PARAMETER(LCL.PRT_Night_Queue);
PARAMETER(PAR.Oms_Application_Code);
PARAMETER(2);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send status message - 'Processing...'
MESSAGE(PRK0957 *STATUS);

// LCL.PRT Copies Alpha = CVTVAR(LCL.PRT Copies)
LCL.PRT_Copies_Alpha = CVTVAR(LCL.PRT_Copies);

//?Flag records to be reprocessed in the Eval Trans Upl
//?Remove records to be reprocessed in the Eval Trans
// LCL.Company Number Alpha Usr = CVTVAR(PAR.CC Company Number)
LCL.Company_Number_Alpha_Usr = CVTVAR(PAR.CC_Company_Number);

// LCL.Pmt Cur Payment Dte-Alpha = CVTVAR(PAR.Pmt Current Payment Date)
LCL.Pmt_Cur_Payment_Dte_Alpha = CVTVAR(PAR.Pmt_Current_Payment_Date);

// Call program Prt EvalTrnUpl Restrt UP.
CALL PROGRAM(Prt EvalTrnUpl Restrt UP) ('PLPLPFRCL');
PARAMETER(LCL.Company_Number_Alpha_Usr);
PARAMETER(LCL.Pmt_Cur_Payment_Dte_Alpha);
PARAMETER(LCL.PRT_Printer_Device);
PARAMETER(LCL.PRT_Hold_Output_Sts);
PARAMETER(LCL.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Copies_Alpha);
PARAMETER(PAR.Oms_System_Value_Alpha);

//?Flag the Eval Trans Upl Comment as being completed
// Call program Upd EvalTrnUplComment XF.
CALL PROGRAM(Upd EvalTrnUplComment XF) ('PLPNXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Pmt_Current_Payment_Date);

// Send status message - 'Processing...'
MESSAGE(PRK0957 *STATUS);

ENDIF;

ENDIF;

//?Busy Flag - Set to the value of N for the next
DO;

//?Set the Busy Flag to UnBusy by placing the Value of N
ENDDO;

// Call program UPD HPEEVRMMO  To 'N'  XF.
CALL PROGRAM(UPD HPEEVRMMO  To 'N'  XF) ('PNUIXFR');
PARAMETER(PAR.CC_Company_Number);

