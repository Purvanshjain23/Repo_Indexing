// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PODRXFR
// ?Date: 14.08.2025 Time: 03:36:49
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// Call program Rtv Fuel Srchg Exp    XF.
CALL PROGRAM(Rtv Fuel Srchg Exp    XF) ('PKUOXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('FS');
PARAMETER(LCL.Expense_Description_USR);
PARAMETER(LCL.Expense_type_USR);
PARAMETER(LCL.Unit_of_Measure);
PARAMETER(LCL.Fuel_Surcharge_Amount);

//?** Use override load miles, if enterd             E00207 8/12/08
CASE;

// IF PAR.Override Total Load Miles is Entered
IF PAR.Override_Total_Load_Miles <> *ZERO;

// LCL.Total Load Miles = PAR.Override Total Load Miles
LCL.Total_Load_Miles = PAR.Override_Total_Load_Miles;

//?** Use override load miles, if enterd             E00207 8/12/08
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Total Load Miles = PAR.Total Load Miles
LCL.Total_Load_Miles = PAR.Total_Load_Miles;

ENDIF;

// LCL.Fuel Surcharge for Load = LCL.Total Load Miles * LCL.Fuel Surcharge Amount *Rounded
LCL.Fuel_Surcharge_for_Load = LCL.Total_Load_Miles * LCL.Fuel_Surcharge_Amount 'H';

CASE;

// IF LCL.Fuel Surcharge for Load NE WRK.ZERO
IF LCL.Fuel_Surcharge_for_Load <> WRK.ZERO;

EXECUTE FUNCTION(RTV Wgt Shipped Tot    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1574417;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.USR_Weight_9_1_3);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 // WRK.USR Weight   9.1  3 = CON.*ZERO
 WRK.USR_Weight_9_1_3 = *ZERO;

 EXECUTE FUNCTION(RTV Weight Shipped Tot RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1574424;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(WRK.USR_Weight_9_1_3);
 {
  //?USER: Initialize routine

  // PAR.USR Weight   9.1  3 = CON.*ZERO
  PAR.USR_Weight_9_1_3 = *ZERO;

  //?USER: Process Data record

  // PAR.USR Weight   9.1  3 = PAR.USR Weight   9.1  3 + DB1.Weight Shipped Total
  PAR.USR_Weight_9_1_3 = PAR.USR_Weight_9_1_3 + DB1.Weight_Shipped_Total;

 }

 // WRK.USR Weight   9.1  4 = CON.*ZERO
 WRK.USR_Weight_9_1_4 = *ZERO;

 CASE;

 // IF WRK.USR Weight   9.1  3 EQ WRK.USR Weight   9.1  4
 IF WRK.USR_Weight_9_1_3 = WRK.USR_Weight_9_1_4;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Weight   9.1  3 = PAR.USR Weight   9.1  3 + WRK.USR Weight   9.1  3
 PAR.USR_Weight_9_1_3 = PAR.USR_Weight_9_1_3 + WRK.USR_Weight_9_1_3;

 ENDIF;

}


CASE;

// IF LCL.USR Weight   9.1  3 NE WRK.ZERO
IF LCL.USR_Weight_9_1_3 <> WRK.ZERO;

// LCL.Fuel Surcharge per LB USR = LCL.Fuel Surcharge for Load / LCL.USR Weight   9.1  3 *Rounded
LCL.Fuel_Surcharge_per_LB_USR = LCL.Fuel_Surcharge_for_Load / LCL.USR_Weight_9_1_3 'H';

EXECUTE FUNCTION(Rtv Ords for FuelSrchg RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1596046;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Fuel_Surcharge_per_LB_USR);
PARAMETER(LCL.Fuel_Surcharge_for_Load);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Order_Sequence_Number);
{
 //?USER: Initialize routine

 //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
 //?                                    to remove Company RST or Pos
 // LCL.Fuel Surcharge for Load = PAR.Fuel Surcharge for Load
 LCL.Fuel_Surcharge_for_Load = PAR.Fuel_Surcharge_for_Load;

 //?USER: Process Data record

 // WRK.Weight Shipped Total = CON.*ZERO
 WRK.Weight_Shipped_Total = *ZERO;

 EXECUTE FUNCTION(RTV Actual Wgt Shipped RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1418098;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Weight_Shipped_Total);
 {
  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 }

 // LCL.Extended Amount = PAR.Fuel Surcharge per LB USR * WRK.Weight Shipped Total *Rounded
 LCL.Extended_Amount = PAR.Fuel_Surcharge_per_LB_USR * WRK.Weight_Shipped_Total 'H';

 //?Write Line item for Fuel Surcharge.
 CASE;

 // IF LCL.Extended Amount is not equal to zeros
 IF LCL.Extended_Amount <> *ZERO;

 // AND LCL.Extended Amount LE LCL.Fuel Surcharge for Load
 AND LCL.Extended_Amount <= LCL.Fuel_Surcharge_for_Load;

 CASE;

 // IF LCL.Extended Amount GE LCL.Fuel Surcharge for Load
 IF LCL.Extended_Amount >= LCL.Fuel_Surcharge_for_Load;

 // LCL.Extended Amount = LCL.Fuel Surcharge for Load
 LCL.Extended_Amount = LCL.Fuel_Surcharge_for_Load;

 ENDIF;

 // LCL.Order Value Total = DB1.Order Value Total + LCL.Extended Amount
 LCL.Order_Value_Total = DB1.Order_Value_Total + LCL.Extended_Amount;

 EXECUTE FUNCTION(CHG Order Value & Wght CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1575085;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 // WRK.Order Sequence Number = CON.*ZERO
 WRK.Order_Sequence_Number = *ZERO;

 EXECUTE FUNCTION(RTV Next Sequence/Whse RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1596508;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Order_Sequence_Number);
 PARAMETER(WRK.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PAR.Order Sequence Number = PAR.Order Sequence Number + CON.1
  PAR.Order_Sequence_Number = PAR.Order_Sequence_Number + 1;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // WRK.Order Sequence Number = WRK.Order Sequence Number + CON.1
 WRK.Order_Sequence_Number = WRK.Order_Sequence_Number + 1;

 // LCL.Item Code = CND.Fuel Surcharge Item Code
 LCL.Item_Code = 99400;

 EXECUTE FUNCTION(Rtv Base f/Misc Item   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1596431;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.Description_Line_Two);
 PARAMETER(WRK.UOM_Primary);
 PARAMETER(WRK.Conversion_Factor_1);
 PARAMETER(WRK.Operation_Factor_1);
 PARAMETER(WRK.UOM_Second);
 PARAMETER(WRK.Conversion_Factor_2);
 PARAMETER(WRK.Operation_Factor_2);
 PARAMETER(WRK.UOM_Third);
 PARAMETER(WRK.UOM_Pricing);
 PARAMETER(WRK.Unit_Weight);
 PARAMETER(WRK.Production_Date_Control);
 PARAMETER(WRK.Catch_Weight_Status);
 PARAMETER(WRK.Item_Structure_Class_Code);
 PARAMETER(WRK.Item_Structure_Group_Code);
 PARAMETER(WRK.Item_Structure_Type_Code);
 PARAMETER(WRK.Default_Warehouse);
 PARAMETER(WRK.Price_Method_Default);
 PARAMETER(WRK.Fresh_Chilling_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(CRT PD Order Detail    CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1425283;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Order_Sequence_Number);
 PARAMETER(1);
 PARAMETER(LCL.Item_Code);
 PARAMETER(WRK.Warehouse_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(*ZERO);
 PARAMETER('R');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Commodity_Market_Code);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Price_Method_Default);
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(*ZERO);
 PARAMETER('P');
 PARAMETER(*ZERO);
 PARAMETER(WRK.UOM_Primary);
 PARAMETER(WRK.UOM_Primary);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Production_Date_Control);
 PARAMETER(*ZERO);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(1);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(WRK.Item_Structure_Type_Code);
 PARAMETER(WRK.Item_Structure_Group_Code);
 PARAMETER(WRK.Item_Structure_Class_Code);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*USER);
 PARAMETER(*BLANK);
 PARAMETER(DB1.Event_Code);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER('NE');
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_3_USR);
 PARAMETER('NEG');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('X');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing before Data update

  // DB1.Age Code = CND.Blank
  DB1.Age_Code = *BLANK;

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program Rtv First Consumed Itm XF.
  CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Consumed_Item_Code);

  EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Warehouse);
  PARAMETER(NLL.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Calc Gross Weight from tares...    copied from Dsp Gross Wgt function
  DO;

  // Call program Rtv Tare Weight        XF.
  CALL PROGRAM(Rtv Tare Weight        XF) ('PBI3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Misc_Tare_Weight);

  //?wi464
  // Call program RTV Itm BxID & Tares  XF.
  CALL PROGRAM(RTV Itm BxID & Tares  XF) ('PBI4XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Box_Weight);
  PARAMETER(LCL.Number_Cases_On_A_Pallet);
  PARAMETER(LCL.Pallet_Tare_Weight);
  PARAMETER(LCL.Box_iD);
  PARAMETER(DB1.OD_Pallet_Type);

  // LCL.Total Tare USR = LCL.Box Weight + LCL.Misc Tare Weight
  LCL.Total_Tare_USR = LCL.Box_Weight + LCL.Misc_Tare_Weight;

  // Box + Misc Tare
  LCL.Weight_1_1_U = ( LCL.Box_Weight + LCL.Misc_Tare_Weight ) * DB1.Quantity_Ordered 'H';

  //?Pallet Tare
  CASE;

  // IF DB1.Palletize is yes
  IF DB1.Palletize = 'Y';

  CASE;

  // IF LCL.Number Cases On A Pallet is GT Zero
  IF LCL.Number_Cases_On_A_Pallet > *ZERO;

  // Pallet Weight
  LCL.Weight_1_2_U = ( DB1.Quantity_Ordered / LCL.Number_Cases_On_A_Pallet 'H' )
  * LCL.Pallet_Tare_Weight 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  //?Pallet Tare
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Weight 1.2             .U = CON.*ZERO
  LCL.Weight_1_2_U = *ZERO;

  ENDIF;

  // Estimated Gross
  DB1.OD_Estimated_Gross_Weight = ( DB1.Weight_Ordered + LCL.Weight_1_1_U )
  + LCL.Weight_1_2_U;

  //?E00196 RMC 8/24/12 chk pfs interface SHPTRN too
  ENDDO;

  //?USER: Processing after Data update

  //?WI642   JM-02/19/25-Add load order change log on new items.
  //?WI642   JM-02/19/25-Crt chg log if dtl has been sent to MPR USDA
  CASE;

  // IF DB1.OD MPR Prc Ready to Send is yes
  IF DB1.OD_MPR_Prc_Ready_to_Send = 'Y';

  //?Always create price type log ORDPRT
  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,CND.Not Entered,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + *BLANK (1);

  // LCL.Change Log New Value = PAR.OD Price Type
  LCL.Change_Log_New_Value = PAR.OD_Price_Type;

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDPRT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

  //?WI642   JM-02/19/25-If not the transfer order nbr 9999999->crt chg logs
  CASE;

  // IF DB1.Order Number is ne 9999999
  IF DB1.Order_Number <> 9999999;

  // LCL.Text 3 Length USR = DB1.Order Sequence Number
  LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Weight Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Weight_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDWGT');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  // LCL.Weight Beg Inv usr = CND.Not Entered
  LCL.Weight_Beg_Inv_usr = *ZERO;

  // LCL.Text USR 7 = LCL.Weight Beg Inv usr
  LCL.Text_USR_7 = LCL.Weight_Beg_Inv_usr;

  // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,LCL.Text USR 7,CON.1)
  LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + LCL.Text_USR_7 (1);

  // LCL.Weight Beg Inv usr = PAR.Quantity Ordered
  LCL.Weight_Beg_Inv_usr = PAR.Quantity_Ordered;

  // LCL.Change Log New Value = CVTVAR(LCL.Weight Beg Inv usr)
  LCL.Change_Log_New_Value = CVTVAR(LCL.Weight_Beg_Inv_usr);

  // Call program CRT Load/OrderChg n/ld XF.
  CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
  PARAMETER(*ZERO);
  PARAMETER('ORDQTY');
  PARAMETER('SLS');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(LCL.Change_Log_New_Value);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  ENDIF;

 }

 //?Reduce the fuel surcharge for the load with what was applied to this ordr
 // LCL.Fuel Surcharge for Load = LCL.Fuel Surcharge for Load - LCL.Extended Amount
 LCL.Fuel_Surcharge_for_Load = LCL.Fuel_Surcharge_for_Load - LCL.Extended_Amount;

 //?Save the last order dtl created in case a $surcharge is left unapplied.
 // PAR.Order Number = DB1.Order Number
 PAR.Order_Number = DB1.Order_Number;

 // PAR.Order Sequence Number = WRK.Order Sequence Number
 PAR.Order_Sequence_Number = WRK.Order_Sequence_Number;

 ENDIF;

 //?USER: Exit processing

 // PAR.Fuel Surcharge for Load = LCL.Fuel Surcharge for Load
 PAR.Fuel_Surcharge_for_Load = LCL.Fuel_Surcharge_for_Load;

}


//?If any fuel surcharge is unapplied, add it to the last order.
CASE;

// IF LCL.Fuel Surcharge for Load NE WRK.ZERO
IF LCL.Fuel_Surcharge_for_Load <> WRK.ZERO;

EXECUTE FUNCTION(Rtv/Add Fuel Surcharg RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1596452;
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Order_Sequence_Number);
PARAMETER(1);
PARAMETER(LCL.Fuel_Surcharge_for_Load);
{
 //?USER: Process Data record

 // LCL.Extended Amount = DB1.Extended Amount + PAR.Fuel Surcharge for Load
 LCL.Extended_Amount = DB1.Extended_Amount + PAR.Fuel_Surcharge_for_Load;

 EXECUTE FUNCTION(CHG for fuel surcharge CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1596453;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(LCL.Extended_Amount);
 PARAMETER(LCL.Extended_Amount);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(Rtv/Chg Order Value tt RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1596632;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Fuel_Surcharge_for_Load);
 {
  //?USER: Process Data record

  // LCL.Order Value Total = DB1.Order Value Total + PAR.Fuel Surcharge for Load
  LCL.Order_Value_Total = DB1.Order_Value_Total + PAR.Fuel_Surcharge_for_Load;

  EXECUTE FUNCTION(CHG Order Value & Wght CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1575085;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

  }

 }

}


ENDIF;

ENDIF;

ENDIF;

