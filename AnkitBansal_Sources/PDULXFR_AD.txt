// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDULXFR
// ?Date: 14.08.2025 Time: 03:36:11
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Remove Trailing Spaces.
DO;

// PAR.Position = PAR.Length
PAR.Position = PAR.Length;

// PAR.Stop = CND.No
PAR.Stop = 'N';

// PAR.Key = CND.255
PAR.Key = 255;

// PAR.Leading Spaces = CND.0
PAR.Leading_Spaces = *ZERO;

// DOW PAR.Position is Greater than zero
DOW PAR.Position > *ZERO;

//?Remove trailing spaces from input field.
DO;

// PAR.Byte = SUBSTRING(PAR.Right Justify - I/O,PAR.Position,CON.1)
PAR.Byte = SUBSTRING(PAR.Right_Justify_I_O:PAR.Position:1);

CASE;

// IF PAR.Byte is Blank
IF PAR.Byte = *BLANK;

// AND PAR.Stop is No
AND PAR.Stop = 'N';

// PAR.Leading Zeros = PAR.Leading Zeros + CND.1
PAR.Leading_Spaces = PAR.Leading_Spaces + 1;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Stop = CND.Yes
PAR.Stop = 'Y';

EXECUTE FUNCTION(CRT Right Justify Arry CR) TYPE(CRTOBJ) ARRAY(Right_Justify_ArrAC1557420;
PARAMETER(PAR.Key);
PARAMETER(PAR.Byte);

// PAR.Key = PAR.Key - CND.1
PAR.Key = PAR.Key - 1;

ENDIF;

// PAR.Position = PAR.Position - CND.One
PAR.Position = PAR.Position - 1;

ENDDO;

ENDDO;

ENDDO;

//?Load Output Field.
DO;

// PAR.Right Justify - I/O = CND.Blanks
PAR.Right_Justify_I_O = *BLANK;

// PAR.Key = PAR.Key + CND.1
PAR.Key = PAR.Key + 1;

// DOW PAR.Key is <= 255
DOW PAR.Key <= 255;

EXECUTE FUNCTION(RTV Right Justify Arry RT) TYPE(RTVOBJ) ARRAY(Right_Justify_ArrAC1557422;
PARAMETER(PAR.Key);
PARAMETER(PAR.Byte);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Byte is Blank
IF PAR.Byte = *BLANK;

// PAR.Leading Spaces = PAR.Leading Spaces + CON.1
PAR.Leading_Spaces = PAR.Leading_Spaces + 1;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Right Justify - I/O = CONCAT(PAR.Right Justify - I/O,PAR.Byte,PAR.Leading Sp
PAR.Right_Justify_I_O = PAR.Right_Justify_I_O + PAR.Byte (PAR.Leading_Spaces);

// PAR.Leading Spaces = CON.*ZERO
PAR.Leading_Spaces = *ZERO;

ENDIF;

// PAR.Key = PAR.Key + CND.1
PAR.Key = PAR.Key + 1;

ENDDO;

ENDDO;

