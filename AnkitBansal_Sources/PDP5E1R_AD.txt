// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDP5E1R
// ?Date: 14.08.2025 Time: 03:29:23
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize key screen

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

CASE;

// IF KEY.Company Number is not equal to zero
IF KEY.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// KEY.User Profile Name = PAR.User Profile Name
KEY.User_Profile_Name = PAR.User_Profile_Name;

//?USER: Initialize detail screen (new record)

// DTL.Comment Print Acknowledge = CND.no
DTL.Comment_Print_Acknowledge = 'N';

// DTL.Comment Print Inv/Cr.Memo = CND.no
DTL.Comment_Print_Inv_Cr_Memo = 'N';

EXECUTE FUNCTION(RTV Default Printers   RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1251186;
PARAMETER(KEY.User_Profile_Name);
PARAMETER(WRK.Printer_Device_Str);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
{
 //?USER: Process Data record

 // PAR.Printer Device Str. = DB1.Printer Device Str.
 PAR.Printer_Device_Str = DB1.Printer_Device_Str;

 // PAR.Default Printer = DB1.Default Printer
 PAR.Default_Printer = DB1.Default_Printer;

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 // PAR.Accounting Company Number = DB1.Accounting Company Number
 PAR.Company_Number = DB1.Company_Number;

}


// DTL.Sales Printer = PAR.Default Printer
DTL.Sales_Printer = PAR.Default_Printer;

// DTL.Production Printer = PAR.Default Printer
DTL.Production_Printer = PAR.Default_Printer;

// DTL.Company Number = KEY.Company Number
DTL.Company_Number = KEY.Company_Number;

// DTL.Company Name = KEY.Company Name
DTL.Company_Name = KEY.Company_Name;

//?Initialize the Debit Memo fields, too
DO;

EXECUTE FUNCTION(RTV Dflt Type for Co   RT) TYPE(RTVOBJ) FILE(OPC0REP)          AC1316112;
PARAMETER(PAR.User_Profile_Name);
PARAMETER('D/M');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Order_Type_Sales);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set Found flag
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// DTL.Debit Memo Entry Found = CND.yes
DTL.Debit_Memo_Entry_Found = 'Y';

//?Set Found flag
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Debit Memo Entry Found = CND.no
DTL.Debit_Memo_Entry_Found = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Order Type Desc.   RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1281766;
PARAMETER(DTL.USR_Order_Type_Sales);
PARAMETER(DTL.USR_Order_Type_Descriptio);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

//?Initialize the Sales Order fields, too
DO;

EXECUTE FUNCTION(RTV Dflt Type f/ Co/OP RT) TYPE(RTVOBJ) FILE(OPC0REP)          AC1736062;
PARAMETER(PAR.User_Profile_Name);
PARAMETER('O/P');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.UEC_Unused_Status);
PARAMETER(DTL.Unlock_Load_Authority);
PARAMETER(DTL.@Order_Type_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set Found flag
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// DTL.Sales Order Entry Found = CND.yes
DTL.Sales_Order_Entry_Found = 'Y';

//?Set Found flag
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Sales Order Entry Found = CND.no
DTL.Sales_Order_Entry_Found = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Order Type Desc.   RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1281766;
PARAMETER(DTL.@Order_Type_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

// WRK.Unlock Load Authority = DTL.Unlock Load Authority
WRK.Unlock_Load_Authority = DTL.Unlock_Load_Authority;

// DTL.UEC Unused Status = CND.yes
DTL.UEC_Unused_Status = 'Y';

//?USER: Initialize detail screen (existing record)

// DTL.Company Name = KEY.Company Name
DTL.Company_Name = KEY.Company_Name;

EXECUTE FUNCTION(RTV Order Type Desc.   RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1281766;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(DTL.Order_Type_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Initialize the Debit Memo fields, too
DO;

EXECUTE FUNCTION(RTV Dflt Type for Co   RT) TYPE(RTVOBJ) FILE(OPC0REP)          AC1316112;
PARAMETER(DB1.User_Profile_Name);
PARAMETER('D/M');
PARAMETER(DB1.Company_Number);
PARAMETER(DTL.USR_Order_Type_Sales);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set Found flag
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// DTL.Debit Memo Entry Found = CND.yes
DTL.Debit_Memo_Entry_Found = 'Y';

//?Set Found flag
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Debit Memo Entry Found = CND.no
DTL.Debit_Memo_Entry_Found = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Order Type Desc.   RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1281766;
PARAMETER(DTL.USR_Order_Type_Sales);
PARAMETER(DTL.USR_Order_Type_Descriptio);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

//?Initialize the Sales Order fields, too
DO;

EXECUTE FUNCTION(RTV Dflt Type f/ Co/OP RT) TYPE(RTVOBJ) FILE(OPC0REP)          AC1736062;
PARAMETER(DB1.User_Profile_Name);
PARAMETER('O/P');
PARAMETER(DB1.Company_Number);
PARAMETER(DTL.UEC_Unused_Status);
PARAMETER(DTL.Unlock_Load_Authority);
PARAMETER(DTL.@Order_Type_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set Found flag
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// DTL.Sales Order Entry Found = CND.yes
DTL.Sales_Order_Entry_Found = 'Y';

//?Set Found flag
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Sales Order Entry Found = CND.no
DTL.Sales_Order_Entry_Found = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Order Type Desc.   RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1281766;
PARAMETER(DTL.@Order_Type_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

// WRK.Unlock Load Authority = DTL.Unlock Load Authority
WRK.Unlock_Load_Authority = DTL.Unlock_Load_Authority;

SET CURSOR;

//?USER: Process key screen request

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

//?USER: Validate detail screen fields

//?Prompt on Debit memo default
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Order Type - Sales
AND PGM.*Cursor_field = DTL.USR_Order_Type_Sales;

// Call program Zzz Debit Memo Types   SR.
CALL PROGRAM(Zzz Debit Memo Types   SR) ('PDGTSRR');
PARAMETER(DTL.USR_Order_Type_Sales);

ENDIF;

//?Prompt on Sales Order default
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.@Order Type Code
AND PGM.*Cursor_field = DTL.@Order_Type_Code;

// Call program SEL Invc/Xfer Types    SR.
CALL PROGRAM(SEL Invc/Xfer Types    SR) ('PDG5SRR');
PARAMETER(DTL.@Order_Type_Code);

ENDIF;

//?USER: Validate detail screen relations

CASE;

// IF DTL.Order Type - Sales is Entered
IF DTL.Order_Type_Sales <> *BLANK;

EXECUTE FUNCTION(RTV Order Type Desc.   RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1281766;
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.Order_Type_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Order Type Description = CON.*BLANK
DTL.Order_Type_Description = *BLANK;

ENDIF;

// DTL.USR Order Type Descriptio = CON.*BLANK
DTL.USR_Order_Type_Descriptio = *BLANK;

// DTL.Description = CON.*BLANK
DTL.Description = *BLANK;

//?Validate Debit Memo default
CASE;

// IF DTL.USR Order Type - Sales is Entered
IF DTL.USR_Order_Type_Sales <> *BLANK;

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DTL.USR_Order_Type_Sales);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate Debit Memo Default
CASE;

// IF WRK.Billing Activity Type is Debit Memo
IF WRK.Billing_Activity_Type = '3';

//?Validate Debit Memo Default
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order Types not found.'
ERROR(USR1063);
MSGPARM(DTL.USR_Order_Type_Sales);

ENDIF;

EXECUTE FUNCTION(RTV Order Type Desc.   RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1281766;
PARAMETER(DTL.USR_Order_Type_Sales);
PARAMETER(DTL.USR_Order_Type_Descriptio);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Validate Sales order default
CASE;

// IF DTL.@Order Type Code is Entered
IF DTL.@Order_Type_Code <> *BLANK;

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DTL.@Order_Type_Code);
PARAMETER(WRK.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate Sales Order Default
CASE;

// IF WRK.Billing Activity Type is Invoice or Transfer
IF WRK.Billing_Activity_Type = '1'/'4';

//?Validate Sales Order Default
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order Types not found.'
ERROR(USR1063);
MSGPARM(DTL.@Order_Type_Code);

ENDIF;

EXECUTE FUNCTION(RTV Order Type Desc.   RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1281766;
PARAMETER(DTL.@Order_Type_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Cr Mem Ctl-NE blnk CR) TYPE(CRTOBJ) FILE(OPC0REP)          AC1338334;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('C/M');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(*BLANK);
PARAMETER(DTL.Process_Full_Screen_Entry);
PARAMETER(DTL.Unlock_Load_Authority);
PARAMETER(DTL.Process_Header_Comments);
PARAMETER(DTL.Process_Header_Financials);
PARAMETER(DTL.Pick_Slip_Printer);
PARAMETER(DTL.Immediate_Invoice_Printer);
PARAMETER(DTL.Sales_Printer);
PARAMETER(DTL.Production_Printer);
PARAMETER(DTL.BOL_Printer);
PARAMETER(DTL.Requested_Date_Days);
PARAMETER(DTL.Ship_Date_Days);
PARAMETER(DTL.Invoice_Date_Days);
PARAMETER(DTL.Notify_for_Order_Change);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Processing before Data update

 CASE;

 // IF PAR.Order Type - Sales EQ WRK.BLANK
 IF PAR.Order_Type_Sales = WRK.BLANK;

 QUIT;

 ENDIF;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Order Entry Cntrl  CH) TYPE(CHGOBJ) FILE(OPC0REP)          AC1132100;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('C/M');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(*BLANK);
PARAMETER(DTL.Process_Full_Screen_Entry);
PARAMETER(DTL.Unlock_Load_Authority);
PARAMETER(DTL.Process_Header_Comments);
PARAMETER(DTL.Process_Header_Financials);
PARAMETER(DTL.Pick_Slip_Printer);
PARAMETER(DTL.Immediate_Invoice_Printer);
PARAMETER(DTL.Sales_Printer);
PARAMETER(DTL.Production_Printer);
PARAMETER(DTL.BOL_Printer);
PARAMETER(DTL.Requested_Date_Days);
PARAMETER(DTL.Ship_Date_Days);
PARAMETER(DTL.Invoice_Date_Days);
PARAMETER(DTL.Notify_for_Order_Change);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?Create records for Debit Memos and Sales Orders, too
//?Add/Change/Delete Debit Memo entry
CASE;

// IF DTL.USR Order Type - Sales NE WRK.BLANK
IF DTL.USR_Order_Type_Sales <> WRK.BLANK;

CASE;

// IF DTL.Debit Memo Entry Found is yes
IF DTL.Debit_Memo_Entry_Found = 'Y';

EXECUTE FUNCTION(CHG Order Entry Cntrl  CH) TYPE(CHGOBJ) FILE(OPC0REP)          AC1132100;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('D/M');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(*BLANK);
PARAMETER(DTL.Process_Full_Screen_Entry);
PARAMETER(DTL.Unlock_Load_Authority);
PARAMETER(DTL.Process_Header_Comments);
PARAMETER(DTL.Process_Header_Financials);
PARAMETER(DTL.Pick_Slip_Printer);
PARAMETER(DTL.Immediate_Invoice_Printer);
PARAMETER(DTL.Sales_Printer);
PARAMETER(DTL.Production_Printer);
PARAMETER(DTL.BOL_Printer);
PARAMETER(DTL.Requested_Date_Days);
PARAMETER(DTL.Ship_Date_Days);
PARAMETER(DTL.Invoice_Date_Days);
PARAMETER(DTL.Notify_for_Order_Change);
PARAMETER(DTL.USR_Order_Type_Sales);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CRT Order Entry Cntrl  CR) TYPE(CRTOBJ) FILE(OPC0REP)          AC1132099;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('D/M');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(*BLANK);
PARAMETER(DTL.Process_Full_Screen_Entry);
PARAMETER(DTL.Unlock_Load_Authority);
PARAMETER(DTL.Process_Header_Comments);
PARAMETER(DTL.Process_Header_Financials);
PARAMETER(DTL.Pick_Slip_Printer);
PARAMETER(DTL.Immediate_Invoice_Printer);
PARAMETER(DTL.Sales_Printer);
PARAMETER(DTL.Production_Printer);
PARAMETER(DTL.BOL_Printer);
PARAMETER(DTL.Requested_Date_Days);
PARAMETER(DTL.Ship_Date_Days);
PARAMETER(DTL.Invoice_Date_Days);
PARAMETER(DTL.Notify_for_Order_Change);
PARAMETER(DTL.USR_Order_Type_Sales);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?Add/Change/Delete Debit Memo entry
// IF *OTHERWISE
IF *OTHERWISE;

//?Delete Debit Memo control
CASE;

// IF DTL.Debit Memo Entry Found is yes
IF DTL.Debit_Memo_Entry_Found = 'Y';

EXECUTE FUNCTION(DLT Order Entry Cntrl  DL) TYPE(DLTOBJ) FILE(OPC0REP)          AC1132101;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('D/M');
PARAMETER(DTL.Company_Number);

ENDIF;

ENDIF;

//?Add/Change/Delete Sales Order Entry
CASE;

// IF DTL.@Order Type Code NE WRK.BLANK
IF DTL.@Order_Type_Code <> WRK.BLANK;

// OR DTL.Unlock Load Authority is Select requested
OR DTL.Unlock_Load_Authority = 'X';

CASE;

// IF DTL.Sales Order Entry Found is yes
IF DTL.Sales_Order_Entry_Found = 'Y';

EXECUTE FUNCTION(CHG Order Entry Cntrl  CH) TYPE(CHGOBJ) FILE(OPC0REP)          AC1132100;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('O/P');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(DTL.UEC_Unused_Status);
PARAMETER(DTL.Process_Full_Screen_Entry);
PARAMETER(DTL.Unlock_Load_Authority);
PARAMETER(DTL.Process_Header_Comments);
PARAMETER(DTL.Process_Header_Financials);
PARAMETER(DTL.Pick_Slip_Printer);
PARAMETER(DTL.Immediate_Invoice_Printer);
PARAMETER(DTL.Sales_Printer);
PARAMETER(DTL.Production_Printer);
PARAMETER(DTL.BOL_Printer);
PARAMETER(DTL.Requested_Date_Days);
PARAMETER(DTL.Ship_Date_Days);
PARAMETER(DTL.Invoice_Date_Days);
PARAMETER(DTL.Notify_for_Order_Change);
PARAMETER(DTL.@Order_Type_Code);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CRT Order Entry Cntrl  CR) TYPE(CRTOBJ) FILE(OPC0REP)          AC1132099;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('O/P');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(DTL.UEC_Unused_Status);
PARAMETER(DTL.Process_Full_Screen_Entry);
PARAMETER(DTL.Unlock_Load_Authority);
PARAMETER(DTL.Process_Header_Comments);
PARAMETER(DTL.Process_Header_Financials);
PARAMETER(DTL.Pick_Slip_Printer);
PARAMETER(DTL.Immediate_Invoice_Printer);
PARAMETER(DTL.Sales_Printer);
PARAMETER(DTL.Production_Printer);
PARAMETER(DTL.BOL_Printer);
PARAMETER(DTL.Requested_Date_Days);
PARAMETER(DTL.Ship_Date_Days);
PARAMETER(DTL.Invoice_Date_Days);
PARAMETER(DTL.Notify_for_Order_Change);
PARAMETER(DTL.@Order_Type_Code);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?Add/Change/Delete Sales Order Entry
// IF *OTHERWISE
IF *OTHERWISE;

//?Delete Sales Order control
CASE;

// IF DTL.Sales Order Entry Found is yes
IF DTL.Sales_Order_Entry_Found = 'Y';

EXECUTE FUNCTION(DLT Order Entry Cntrl  DL) TYPE(DLTOBJ) FILE(OPC0REP)          AC1132101;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('O/P');
PARAMETER(DTL.Company_Number);

ENDIF;

ENDIF;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

//?Delete Credit Memo entry
CASE;

// IF DTL.Order Type - Sales EQ WRK.BLANK
IF DTL.Order_Type_Sales = WRK.BLANK;

EXECUTE FUNCTION(DLT Order Entry Cntrl  DL) TYPE(DLTOBJ) FILE(OPC0REP)          AC1132101;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('C/M');
PARAMETER(DTL.Company_Number);

ENDIF;

//?Add/Change/Delete records for Debit Memos and Sales Orders, too
//?Add/Change/Delete Debit Memo entry
CASE;

// IF DTL.USR Order Type - Sales NE WRK.BLANK
IF DTL.USR_Order_Type_Sales <> WRK.BLANK;

CASE;

// IF DTL.Debit Memo Entry Found is yes
IF DTL.Debit_Memo_Entry_Found = 'Y';

EXECUTE FUNCTION(CHG Order Entry Cntrl  CH) TYPE(CHGOBJ) FILE(OPC0REP)          AC1132100;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('D/M');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(*BLANK);
PARAMETER(DTL.Process_Full_Screen_Entry);
PARAMETER(DTL.Unlock_Load_Authority);
PARAMETER(DTL.Process_Header_Comments);
PARAMETER(DTL.Process_Header_Financials);
PARAMETER(DTL.Pick_Slip_Printer);
PARAMETER(DTL.Immediate_Invoice_Printer);
PARAMETER(DTL.Sales_Printer);
PARAMETER(DTL.Production_Printer);
PARAMETER(DTL.BOL_Printer);
PARAMETER(DTL.Requested_Date_Days);
PARAMETER(DTL.Ship_Date_Days);
PARAMETER(DTL.Invoice_Date_Days);
PARAMETER(DTL.Notify_for_Order_Change);
PARAMETER(DTL.USR_Order_Type_Sales);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CRT Order Entry Cntrl  CR) TYPE(CRTOBJ) FILE(OPC0REP)          AC1132099;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('D/M');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(*BLANK);
PARAMETER(DTL.Process_Full_Screen_Entry);
PARAMETER(DTL.Unlock_Load_Authority);
PARAMETER(DTL.Process_Header_Comments);
PARAMETER(DTL.Process_Header_Financials);
PARAMETER(DTL.Pick_Slip_Printer);
PARAMETER(DTL.Immediate_Invoice_Printer);
PARAMETER(DTL.Sales_Printer);
PARAMETER(DTL.Production_Printer);
PARAMETER(DTL.BOL_Printer);
PARAMETER(DTL.Requested_Date_Days);
PARAMETER(DTL.Ship_Date_Days);
PARAMETER(DTL.Invoice_Date_Days);
PARAMETER(DTL.Notify_for_Order_Change);
PARAMETER(DTL.USR_Order_Type_Sales);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?Add/Change/Delete Debit Memo entry
// IF *OTHERWISE
IF *OTHERWISE;

//?Delete Debit Memo control
CASE;

// IF DTL.Debit Memo Entry Found is yes
IF DTL.Debit_Memo_Entry_Found = 'Y';

EXECUTE FUNCTION(DLT Order Entry Cntrl  DL) TYPE(DLTOBJ) FILE(OPC0REP)          AC1132101;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('D/M');
PARAMETER(DTL.Company_Number);

ENDIF;

ENDIF;

//?Add/Change/Delete Sales Order Entry
CASE;

// IF DTL.@Order Type Code NE WRK.BLANK
IF DTL.@Order_Type_Code <> WRK.BLANK;

// OR DTL.Unlock Load Authority NE WRK.Unlock Load Authority
OR DTL.Unlock_Load_Authority <> WRK.Unlock_Load_Authority;

CASE;

// IF DTL.Sales Order Entry Found is yes
IF DTL.Sales_Order_Entry_Found = 'Y';

EXECUTE FUNCTION(CHG Order Entry Cntrl  CH) TYPE(CHGOBJ) FILE(OPC0REP)          AC1132100;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('O/P');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(DTL.UEC_Unused_Status);
PARAMETER(DTL.Process_Full_Screen_Entry);
PARAMETER(DTL.Unlock_Load_Authority);
PARAMETER(DTL.Process_Header_Comments);
PARAMETER(DTL.Process_Header_Financials);
PARAMETER(DTL.Pick_Slip_Printer);
PARAMETER(DTL.Immediate_Invoice_Printer);
PARAMETER(DTL.Sales_Printer);
PARAMETER(DTL.Production_Printer);
PARAMETER(DTL.BOL_Printer);
PARAMETER(DTL.Requested_Date_Days);
PARAMETER(DTL.Ship_Date_Days);
PARAMETER(DTL.Invoice_Date_Days);
PARAMETER(DTL.Notify_for_Order_Change);
PARAMETER(DTL.@Order_Type_Code);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CRT Order Entry Cntrl  CR) TYPE(CRTOBJ) FILE(OPC0REP)          AC1132099;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('O/P');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(DTL.UEC_Unused_Status);
PARAMETER(DTL.Process_Full_Screen_Entry);
PARAMETER(DTL.Unlock_Load_Authority);
PARAMETER(DTL.Process_Header_Comments);
PARAMETER(DTL.Process_Header_Financials);
PARAMETER(DTL.Pick_Slip_Printer);
PARAMETER(DTL.Immediate_Invoice_Printer);
PARAMETER(DTL.Sales_Printer);
PARAMETER(DTL.Production_Printer);
PARAMETER(DTL.BOL_Printer);
PARAMETER(DTL.Requested_Date_Days);
PARAMETER(DTL.Ship_Date_Days);
PARAMETER(DTL.Invoice_Date_Days);
PARAMETER(DTL.Notify_for_Order_Change);
PARAMETER(DTL.@Order_Type_Code);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?Add/Change/Delete Sales Order Entry
// IF *OTHERWISE
IF *OTHERWISE;

//?Delete Sales Order control
CASE;

// IF DTL.Sales Order Entry Found is yes
IF DTL.Sales_Order_Entry_Found = 'Y';

// AND DTL.Unlock Load Authority is Blank
AND DTL.Unlock_Load_Authority = *BLANK;

EXECUTE FUNCTION(DLT Order Entry Cntrl  DL) TYPE(DLTOBJ) FILE(OPC0REP)          AC1132101;
PARAMETER(DTL.User_Profile_Name);
PARAMETER('O/P');
PARAMETER(DTL.Company_Number);

ENDIF;

ENDIF;

RETURN;

ENDIF;

