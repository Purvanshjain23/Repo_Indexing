// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKUAPVR
// ?Date: 14.08.2025 Time: 02:50:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.CC Company Number = WRK.CC Company Number
DTL.CC_Company_Number = WRK.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// DTL.Include Yd Dd/Condemn USR = CND.No
DTL.Include_Yd_Dd_Condemn_USR = 'N';

// DTL.Text 10 1 USR = Condition name of DTL.Include Yd Dd/Condemn USR
DTL.Text_10_1_USR = RTVCND(DTL.Include_Yd_Dd_Condemn_USR);

// DTL.Print Carcass Analysis Us = CND.No
DTL.Print_Carcass_Analysis_Us = 'N';

// DTL.Status Desc 2 USR = Condition name of DTL.Print Carcass Analysis Us
DTL.Status_Desc_2_USR = RTVCND(DTL.Print_Carcass_Analysis_Us);

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// DTL.Status 1 = CND.No
DTL.Status_1 = 'N';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


// DTL.Name USR = PAR.Oms Name
DTL.Name_USR = PAR.Oms_Name;

//?USER: Process command keys

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.PD Producer Code
AND PGM.*Cursor_field = DTL.PD_Producer_Code;

// Call program Sel Producer          SR.
CALL PROGRAM(Sel Producer          SR) ('PKA1SRR');
PARAMETER(DTL.PD_Producer_Code);

ENDIF;

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.TH HPS Farm Site
AND PGM.*Cursor_field = DTL.TH_HPS_Farm_Site;

// Call program Sel HPS Farm Site     UP.
CALL PROGRAM(Sel HPS Farm Site     UP) ('HP5003');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(DTL.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);

ENDIF;

//?USER: Validate fields

// DTL.Name USR = CON.*BLANK
DTL.Name_USR = *BLANK;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Name_USR);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?Error
CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Company not found.'
ERROR(PRK0162);

ENDIF;

//?Val From and To Date
CASE;

// IF DTL.Date From USR GT DTL.Date To   USR
IF DTL.Date_From_USR > DTL.Date_To_USR;

// Send error message - 'From date must be less than or equal to the to date.'
ERROR(PRK0472);

ENDIF;

//?Enter either Source Type or Producer Code, but not both.
CASE;

// IF DTL.TH Source Type NE WRK.Blank USR
IF DTL.TH_Source_Type <> WRK.Blank_USR;

// AND DTL.PD Producer Code NE WRK.Blank USR
AND DTL.PD_Producer_Code <> WRK.Blank_USR;

// Send error message - 'Please enter a source type or a producer.'
ERROR(PRK0555);

ENDIF;

//?Val Producer Code.  Producer required if Location entered.
CASE;

// IF DTL.PL Location Code NE WRK.Blank USR
IF DTL.PL_Location_Code <> WRK.Blank_USR;

// AND DTL.PD Producer Code is Blank
AND DTL.PD_Producer_Code = *BLANK;

// Send error message - 'Producer Code is required with the Location Code &2.'
ERROR(PRK0803);
MSGPARM(DTL.PD_Producer_Code);
MSGPARM(DTL.PL_Location_Code);

ENDIF;

//?Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Producer Location
CASE;

// IF PGM.*Cursor field <IS> DTL.PL Location Code
IF PGM.*Cursor_field = DTL.PL_Location_Code;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);

ENDIF;

ENDIF;

//?CALC: Screen function fields

//?Producer Name
CASE;

// IF DTL.PD Producer Code is Blank
IF DTL.PD_Producer_Code = *BLANK;

//?Producer Name
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Name Producer DRV) TYPE(DRVFLD)                                AB1110026;
PARAMETER(DTL.Name_Producer_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Name_Producer_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?Producer Location
CASE;

// IF DTL.PL Location Code is Blank
IF DTL.PL_Location_Code = *BLANK;

//?Producer Location
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// DTL.Int/External Desc Usr = Condition name of DTL.TH Source Type
DTL.Int_External_Desc_Usr = RTVCND(DTL.TH_Source_Type);

// DTL.Text 10 1 USR = Condition name of DTL.Include Yd Dd/Condemn USR
DTL.Text_10_1_USR = RTVCND(DTL.Include_Yd_Dd_Condemn_USR);

// DTL.Payment Type Desc USR = Condition name of DTL.Payment Type USR
DTL.Payment_Type_Desc_USR = RTVCND(DTL.Payment_Type_USR);

// DTL.Status Desc 2 USR = Condition name of DTL.Print Carcass Analysis Us
DTL.Status_Desc_2_USR = RTVCND(DTL.Print_Carcass_Analysis_Us);

//?USER: User defined action

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Producer Merit Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(1);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Company Number Alpha Usr = CVTVAR(DTL.CC Company Number)
WRK.Company_Number_Alpha_Usr = CVTVAR(DTL.CC_Company_Number);

// WRK.Date Alpha USR = CVTVAR(DTL.Date From USR)
WRK.Date_Alpha_USR = CVTVAR(DTL.Date_From_USR);

// WRK.Date Alpha Usr 2 = CVTVAR(DTL.Date To   USR)
WRK.Date_Alpha_Usr_2 = CVTVAR(DTL.Date_To_USR);

// WRK.Farm Site Alpha       USR = CVTVAR(DTL.TH HPS Farm Site)
WRK.Farm_Site_Alpha_USR = CVTVAR(DTL.TH_HPS_Farm_Site);

// Execute command - 'SBM Prt Producer Merit Report'
EXECUTE COMMAND(PRK0471);
PARAMETER(WRK.Company_Number_Alpha_Usr);
PARAMETER(DTL.TH_Source_Type);
PARAMETER(DTL.Payment_Type_USR);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(WRK.Date_Alpha_Usr_2);
PARAMETER(DTL.Report_Type_Sum_Dtl_USR);
PARAMETER(DTL.Include_Yd_Dd_Condemn_USR);
PARAMETER(DTL.Print_Carcass_Analysis_Us);
PARAMETER(DTL.Status_1);
PARAMETER(WRK.Farm_Site_Alpha_USR);

ENDIF;

