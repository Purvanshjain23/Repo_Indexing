// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDJ3PFR
// ?Date: 14.08.2025 Time: 12:03:59
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?H16853 ISE 11/04/20 - Increased Buy order field length from 5 to 7.
MOVE *ALL (To: PAR From: CON);

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('P/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(RTV Cooler Shrink %    RT) TYPE(RTVOBJ) FILE(CAAQREP)          AC1255852;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Cooler_Shrink_Percent);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Accounting Company Number header format
PRINT Accounting Company Number header format;

ENDIF;

CASE;

IF NEW Kill_Date;
//?Retrieve Hog Volume
// Call program Rtv Hog Volume  2 HPE XF.
CALL PROGRAM(Rtv Hog Volume  2 HPE XF) ('PKQIXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Kill_Date);
PARAMETER(PAR.Hog_Volume);

// CUR.Hog Volume = PAR.Hog Volume
CUR.Hog_Volume = PAR.Hog_Volume;

// Print Kill Date header format
PRINT Kill Date header format;

ENDIF;

CASE;

IF NEW Buy_Order_Number;
// SUPPRESSED PRINT Buy Order Number header format

ENDIF;

CASE;

IF NEW Buy_Order_Load;
// SUPPRESSED PRINT Buy Order Load header format

ENDIF;

CASE;

IF NEW Tattoo_Number;
// Call program Rtv Tattoo Info  2 HPE XF.
CALL PROGRAM(Rtv Tattoo Info  2 HPE XF) ('PKO3XFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Kill_Date);
PARAMETER(CUR.Tattoo_Number);
PARAMETER(PAR.TH_Hot_Weight_USR);
PARAMETER(PAR.Hog_Producer_Code);
PARAMETER(PAR.Hog_Buyer_Code);
PARAMETER(PAR.Hog_Buyer_Type);
PARAMETER(PAR.Hog_Payment_Type);
PARAMETER(PAR.TH_Head_Killed_USR);
PARAMETER(PAR.TH_Live_Wgt_USR);
PARAMETER(PAR.TH_Avg_Backfat_USR);
PARAMETER(PAR.TH_Avg_Loin_Eye_USR);
PARAMETER(PAR.TH_Avg_Lean_USR);
PARAMETER(PAR.TH_Avg_Light_Ref_USR);
PARAMETER(PAR.Hog_Producer_Name_USR);
PARAMETER(PAR.Hog_Buyer_Name_USR);
PARAMETER(PAR.TH_Avg_Live_Wgt_USR);
PARAMETER(PAR.TH_Avg_Hot_Wgt_USR);
PARAMETER(CUR.Buy_Order_Number);
PARAMETER(CUR.Buy_Order_Load);

// WRK.Percent 7.4 USR = PAR.Cooler Shrink Percent / CON.100 *Rounded
WRK.Percent_7_4_USR = PAR.Cooler_Shrink_Percent / 100 'H';

// WRK.Percent 7.4 USR = CON.1 - WRK.Percent 7.4 USR
WRK.Percent_7_4_USR = 1 - WRK.Percent_7_4_USR;

// PAR.TH Cold Weight USR = PAR.TH Hot Weight USR * WRK.Percent 7.4 USR *Rounded
PAR.TH_Cold_Weight_USR = PAR.TH_Hot_Weight_USR * WRK.Percent_7_4_USR 'H';

MOVE *ALL (To: CUR From: PAR);

//?DOC: Accumulations
CASE;

// IF WRK.#Sequence Block is NULL
IF WRK.#Sequence_Block = *BLANK;

//?SUM(TH Head Killed)
//?SUM(TH Live Wgt)
//?SUM(TH Hot Wgt)
//?SUM(TH Avg Hot Wgt)
//?SUM(TH Avg Lean % * TH Hot Wgt)
//?SUM(TH Avg Backfat * TH Hot Wgt)
//?SUM(TH Avg Loin I * TH Hot Wgt)
ENDIF;

// PAR.Hog Volume USR = PAR.Hog Volume USR + PAR.TH Head Killed USR
PAR.Hog_Volume_USR = PAR.Hog_Volume_USR + PAR.TH_Head_Killed_USR;

// PAR.Live Weight Total USR = PAR.Live Weight Total USR + PAR.TH Live Wgt USR
PAR.Live_Weight_Total_USR = PAR.Live_Weight_Total_USR + PAR.TH_Live_Wgt_USR;

// PAR.Hot Weight Total = PAR.Hot Weight Total + PAR.TH Hot Weight USR
PAR.Hot_Weight_Total = PAR.Hot_Weight_Total + PAR.TH_Hot_Weight_USR;

// Wgt USR =       * SUM(TH Avg Lean %)
PAR.Average_Lean_Wgt_USR = PAR.Average_Lean_Wgt_USR + ( PAR.TH_Avg_Lean_USR                        +
* PAR.TH_Hot_Weight_USR 'H' );

// Wgt USR =       * SUM(TH Avg Loin I)
PAR.Average_Loin_I_Wgt_USR = PAR.Average_Loin_I_Wgt_USR + ( PAR.TH_Avg_Loin_Eye_USR                +
* PAR.TH_Hot_Weight_USR 'H' );

// Wgt USR =       * SUM(TH Avg Backfat)
PAR.Average_Backfat_Wgt_USR = PAR.Average_Backfat_Wgt_USR + ( PAR.TH_Avg_Backfat_USR               +
* PAR.TH_Hot_Weight_USR 'H' );

// Print Tattoo Number header format
PRINT Tattoo Number header format;

ENDIF;

//?USER: Process before print of detail format

CASE;

// IF PAR.TH Cold Weight USR is GT Zero
IF PAR.TH_Cold_Weight_USR > *ZERO;

// Carcass Yield
CUR.Carcass_Yield = ( CUR.Predicted_Pounds / PAR.TH_Cold_Weight_USR 'H' ) * 100 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Carcass Yield = CON.*ZERO
CUR.Carcass_Yield = *ZERO;

ENDIF;

EXECUTE FUNCTION(Rtv Mkt/Grp/Ovr/HdWgt RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1338204;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(PAR.Market_Overage);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Mkt Prc + Ovr CWT IF) TYPE(EXCINTFUN)                      AC1386862;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(CUR.Kill_Date);
PARAMETER(WRK.USR_Date_Priced);
PARAMETER(CUR.Margin_Market_Price);
PARAMETER(CUR.Margin_Market_Overage);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Market_Price_Date);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(PAR.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 // Call program CLC Convert Price - CW XF.
 CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(PAR.Market_Price_USR);

 //?Convert Std overage to U/M
 // Call program CLC Convert Price - CW XF.
 CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Standard_Overage_Underage);
 PARAMETER(PAR.Standard_Overage_USR);

}


// Product Value
CUR.Product_Value = ( CUR.Margin_Market_Price + CUR.Margin_Market_Overage ) * (                    +
CUR.Predicted_Pounds / 100 'H' ) 'H';

//?USER: Process after print of detail format

NXT.Predicted_Pounds_SUM = SUM(CUR.Predicted_Pounds);

NXT.Carcass_Yield_SUM = SUM(CUR.Carcass_Yield);

NXT.Product_Value_SUM = SUM(CUR.Product_Value);

EXECUTE FUNCTION(Chg Tattoo/Value      CH) TYPE(CHGOBJ) FILE(PDI2CPP)           AC1292014;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Kill_Date);
PARAMETER(CUR.Buy_Order_Number);
PARAMETER(CUR.Buy_Order_Load);
PARAMETER(CUR.Tattoo_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Carcass_Yield);
PARAMETER(CUR.Product_Value);
PARAMETER(CUR.Margin_Market_Price);
PARAMETER(CUR.Margin_Market_Overage);
PARAMETER(PAR.Hog_Producer_Code);
PARAMETER(PAR.Hog_Buyer_Code);
PARAMETER(PAR.Hog_Buyer_Type);
PARAMETER(PAR.Hog_Payment_Type);
PARAMETER(CUR.Item_Structure_Type_Code);
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(CUR.Item_Structure_Class_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(UPS CHGOBJ Stamp      IF) TYPE(EXCINTFUN)                      AC1359518;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Print required level totals

CASE;

IF NEW Tattoo_Number;
// Print Tattoo Number totals format
PRINT Tattoo Number totals format;

// Call program Upd Ct/Kl/Rd Val 2 HPE XF.
CALL PROGRAM(Upd Ct/Kl/Rd Val 2 HPE XF) ('PKUVXFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Buy_Order_Number);
PARAMETER(CUR.Buy_Order_Load);
PARAMETER(CUR.Tattoo_Number);
PARAMETER(CUR.Kill_Date);
PARAMETER(CUR.Product_Value_SUM);
PARAMETER(PAR.Product_Val_Hd_Kill_USR);
PARAMETER(PAR.Product_Val_Hd_Rnd_USR);

ENDIF;

CASE;

IF NEW Buy_Order_Load;
// SUPPRESSED PRINT Buy Order Load totals format

ENDIF;

CASE;

IF NEW Buy_Order_Number;
// SUPPRESSED PRINT Buy Order Number totals format

ENDIF;

CASE;

IF NEW Kill_Date;
// SUPPRESSED PRINT Kill Date totals format

ENDIF;

CASE;

IF NEW Company_Number;
// SUPPRESSED PRINT Accounting Company Number totals format

ENDIF;

