// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDGRPFR
// ?Date: 14.08.2025 Time: 12:03:54
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?USER: Record selection processing

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Exclude all rail Tanker trailer types.
CASE;

// IF DB1.Trailer Type is Tanker
IF DB1.Trailer_Type = 'T';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Carrier Code
CASE;

// IF PAR.Carrier Code is entered
IF PAR.Carrier_Code <> *BLANK;

// AND PAR.Carrier Code NE DB1.Carrier Code
AND PAR.Carrier_Code <> DB1.Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Company Code
CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

// AND PAR.Company Number NE DB1.Company Number
AND PAR.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?On yard status
CASE;

// IF PAR.On Yard Status is Y/N Values
IF PAR.On_Yard_Status = 'N'/'Y';

// AND PAR.On Yard Status NE DB1.On Yard Status
AND PAR.On_Yard_Status <> DB1.On_Yard_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Assigned status
CASE;

// IF PAR.Assigned Status is Y/N Values
IF PAR.Assigned_Status = 'N'/'Y';

// AND PAR.Assigned Status NE DB1.Assigned Status
AND PAR.Assigned_Status <> DB1.Assigned_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Available Status
CASE;

// IF PAR.Available Status is Y/N Values
IF PAR.Available_Status = 'N'/'Y';

// AND PAR.Available Status NE DB1.Available Status
AND PAR.Available_Status <> DB1.Available_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Record Status
CASE;

// IF PAR.Record Status NE WRK.BLANK
IF PAR.Record_Status <> WRK.BLANK;

// AND PAR.Record Status NE DB1.Record Status
AND PAR.Record_Status <> DB1.Record_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

//?Carrier name
CASE;

// IF 1PG.Carrier Code is not entered
IF X1PG_Carrier_Code = *BLANK;

// 1PG.Name = CON.*ALL
X1PG_Name = *ALL;

//?Carrier name
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(X1PG_Carrier_Code);
PARAMETER(X1PG_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?On Yard Status description
CASE;

// IF 1PG.On Yard Status is blank
IF X1PG_On_Yard_Status = *BLANK;

// 1PG.Status Description = CON.*ALL
X1PG_Status_Description = *ALL;

//?On Yard Status description
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Status Description = Condition name of 1PG.On Yard Status
X1PG_Status_Description = RTVCND(X1PG_On_Yard_Status);

ENDIF;

//?Assigned Status description
CASE;

// IF 1PG.Assigned Status is blank
IF X1PG_Assigned_Status = *BLANK;

// 1PG.Status Description 2 = CON.*ALL
X1PG_Status_Description_2 = *ALL;

//?Assigned Status description
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Status Description 2 = Condition name of 1PG.Assigned Status
X1PG_Status_Description_2 = RTVCND(X1PG_Assigned_Status);

ENDIF;

//?Available Status description
CASE;

// IF 1PG.Available Status is blank
IF X1PG_Available_Status = *BLANK;

// 1PG.Status Description 3  USR = CON.*ALL
X1PG_Status_Description_3_USR = *ALL;

//?Available Status description
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Status Description 3  USR = Condition name of 1PG.Available Status
X1PG_Status_Description_3_USR = RTVCND(X1PG_Available_Status);

ENDIF;

//?Record Status description
CASE;

// IF 1PG.Record Status EQ WRK.BLANK
IF X1PG_Record_Status = WRK.BLANK;

// 1PG.Condition Desc. 4  USR = CON.*ALL
X1PG_Condition_Desc_4_USR = *ALL;

//?Record Status description
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 4  USR = Condition name of 1PG.Record Status
X1PG_Condition_Desc_4_USR = RTVCND(X1PG_Record_Status);

ENDIF;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Carrier_Code;
// SUPPRESSED PRINT Carrier Code header format

ENDIF;

//?USER: On print of detail format

//?** Rtv 1st 4 char of Carrier Name to get the SCAC
EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(NXT.Carrier_Code);
PARAMETER(CUR.USR_Carrier_Name_4);
PARAMETER(CUR.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// CUR.Trailer ID USR = DB1.Trailer Id
CUR.Trailer_ID_USR = DB1.Trailer_Id;

// CUR.USR On Yard Time = DB1.On Yard Time / CON.100 *
CUR.USR_On_Yard_Time = DB1.On_Yard_Time / 100;

// PAR.BOL Complete Date = CON.*ZERO
PAR.BOL_Complete_Date = *ZERO;

CASE;

// IF CUR.Assigned Status is yes
IF CUR.Assigned_Status = 'Y';

EXECUTE FUNCTION(RTV Load for DrpTrlrRp RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1504531;
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Load_Start_Company_USR);
PARAMETER(CUR.Load_Status);
PARAMETER(CUR.Trailer_Id);
PARAMETER(CUR.Carrier_Code);
PARAMETER(CUR.Load_Type);
PARAMETER(PAR.BOL_Complete_Date);
PARAMETER(PAR.BOL_Complete_Time);
PARAMETER(PAR.Truck_Departure_Date);
PARAMETER(PAR.Truck_Departure_Time);
PARAMETER(CUR.Deadline_Departure_Date);
PARAMETER(CUR.Deadline_Departure_Time);
PARAMETER(WRK.USR_Active_Load);
{
 //?USER: Initialize routine

 // PAR.USR Active Load = CND.no
 PAR.USR_Active_Load = 'N';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.USR Active Load = CND.no
 PAR.USR_Active_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Truck Departure Date is not entered
 IF DB1.Truck_Departure_Date = *ZERO;

 //?Active load
 MOVE *ALL (To: PAR From: DB1);

 // PAR.USR Active Load = CND.yes
 PAR.USR_Active_Load = 'Y';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?NOT Active load
 ENDIF;

}


EXECUTE FUNCTION(RTV Last Load Dtl Seq  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1356474;
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Stop_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.USR Deadline Deprt Time = CUR.Deadline Departure Time / CON.100 *
CUR.USR_Deadline_Deprt_Time = CUR.Deadline_Departure_Time / 100;

CASE;

// IF PAR.BOL Complete Date is Entered
IF PAR.BOL_Complete_Date <> *ZERO;

// CUR.BOL Complete          USR = CON.*
CUR.BOL_Complete_USR = *;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Shag and Wash      RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1506198;
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Load_Shag_Flag);
PARAMETER(CUR.Load_Wash_Flag);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Load Shag Flag is blank
 IF DB1.Load_Shag_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Load Shag Flag = DB1.Load Shag Flag
 PAR.Load_Shag_Flag = DB1.Load_Shag_Flag;

 ENDIF;

 CASE;

 // IF DB1.Load Wash Flag is blank
 IF DB1.Load_Wash_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Load Wash Flag = DB1.Load Wash Flag
 PAR.Load_Wash_Flag = DB1.Load_Wash_Flag;

 ENDIF;

}


// CUR.BLANK 1               USR = CUR.Comment Line
CUR.BLANK_1_USR = CUR.Comment_Line;

//?USER: Print required level totals

CASE;

IF NEW Carrier_Code;
// SUPPRESSED PRINT Carrier Code totals format

ENDIF;

