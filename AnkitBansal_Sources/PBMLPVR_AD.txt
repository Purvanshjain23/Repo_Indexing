// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBMLPVR
// ?Date: 14.08.2025 Time: 03:48:34
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?** Change warehouse and company # to wrk context
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?***** Change Log
DO;

//?** 05/19/1014 E003118 LJB
ENDDO;

//?USER: Load screen

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// DTL.Rate Adjustment Type sts = CND.Increase
DTL.Rate_Adjustment_Type_sts = 'I';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?USER: Validate fields

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Select company
CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

ENDIF;

//?Select carrier
CASE;

// IF PGM.*Cursor field <IS> DTL.Carrier Code
IF PGM.*Cursor_field = DTL.Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Carrier_Code);

ENDIF;

//?Select region
CASE;

// IF PGM.*Cursor field <IS> DTL.Region Code
IF PGM.*Cursor_field = DTL.Region_Code;

// Call program SEL Active Region      SR.
CALL PROGRAM(SEL Active Region      SR) ('PDDOSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Region_Code);

ENDIF;

//?Select warehouse
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse Code
IF PGM.*Cursor_field = DTL.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Company required
CASE;

// IF DTL.Company Number EQ WRK.ZERO
IF DTL.Company_Number = WRK.ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(DTL.Company_Number);

ENDIF;

//?Carrier required
CASE;

// IF DTL.Carrier Code is not entered
IF DTL.Carrier_Code = *BLANK;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(DTL.Carrier_Code);

ENDIF;

//?Validate Company
DO;

//?* Company is required
EXECUTE FUNCTION(Val Company Number    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC1343408;
PARAMETER(DTL.Company_Number);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Error if not found
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Invalid Company Number'
ERROR(USR1783);
MSGPARM(DTL.Company_Number);

ENDIF;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate company/whse combo
CASE;

// IF DTL.Warehouse Code is Warehouse Code not Blank
IF DTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Shipping Company NE DTL.Company Number
IF WRK.Shipping_Company <> DTL.Company_Number;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.Warehouse_Code);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

ENDDO;

//?Validate Carrier
DO;

//?* Carrier is required
EXECUTE FUNCTION(Val Carrier           RT) TYPE(RTVOBJ) FILE(OMFFREP)           AC1197583;
PARAMETER(DTL.Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?Error if not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code);

ENDIF;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.USR_Carrier_Name);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDDO;

//?Validate Region
DO;

//?* Region
CASE;

// IF DTL.Region Code NE WRK.BLANK
IF DTL.Region_Code <> WRK.BLANK;

EXECUTE FUNCTION(VAL Region Exists      RT) TYPE(RTVOBJ) FILE(PDKFREP)          AC1381023;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Region_Code);

EXECUTE FUNCTION(RTV Active Region Desc RT) TYPE(RTVOBJ) FILE(PDKFREP)          AC1379082;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Region_Code);
PARAMETER(DTL.Region_Description);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Error if not found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if not found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'PD Region not found'
ERROR(USR2225);
MSGPARM(DTL.Company_Number);
MSGPARM(DTL.Region_Code);

ENDIF;

ENDIF;

ENDDO;

//?Validate Warehouse
DO;

//?* Warehouse
CASE;

// IF DTL.Warehouse Code NE WRK.BLANK
IF DTL.Warehouse_Code <> WRK.BLANK;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(DTL.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?Error if not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

ENDDO;

//?USER: Validate relations

//?Rate Adjustment amount cannot be zeros & Type cannot be blank
CASE;

// IF DTL.Rate Adjustment is equal to zero
IF DTL.Rate_Adjustment = *ZERO;

// Send error message - 'Rate required'
ERROR(USR3593);
MSGPARM(DTL.Rate_Adjustment);
MSGPARM(LCL.FCR_Rate_Amount_2);

//?Rate Adjustment amount cannot be zeros & Type cannot be blank
// IF DTL.Rate Adjustment Type sts is *Blanks
IF DTL.Rate_Adjustment_Type_sts = *BLANK;

// Send error message - 'Field cannot be blank'
ERROR(USR3741);
MSGPARM(DTL.Rate_Adjustment_Type_sts);

ENDIF;

//?USER: User defined action

//?* Determine selection criteria for the SQL's
CASE;

// IF DTL.Company Number is greater than zero
IF DTL.Company_Number > *ZERO;

// AND DTL.Carrier Code is entered
AND DTL.Carrier_Code <> *BLANK;

// AND DTL.Region Code is Not Entered
AND DTL.Region_Code = *BLANK;

// AND DTL.Warehouse Code is Blanks
AND DTL.Warehouse_Code = *BLANK;

// LCL.Select Option = CND.Option 1
LCL.Select_Option = 1;

//?* Determine selection criteria for the SQL's
// IF DTL.Company Number is greater than zero
IF DTL.Company_Number > *ZERO;

// AND DTL.Carrier Code is entered
AND DTL.Carrier_Code <> *BLANK;

// AND DTL.Region Code is Entered
AND DTL.Region_Code <> *BLANK;

// AND DTL.Warehouse Code is Blanks
AND DTL.Warehouse_Code = *BLANK;

// LCL.Select Option = CND.Option 2
LCL.Select_Option = 2;

//?* Determine selection criteria for the SQL's
// IF DTL.Company Number is greater than zero
IF DTL.Company_Number > *ZERO;

// AND DTL.Carrier Code is entered
AND DTL.Carrier_Code <> *BLANK;

// AND DTL.Region Code is Entered
AND DTL.Region_Code <> *BLANK;

// AND DTL.Warehouse Code is Not Blanks
AND DTL.Warehouse_Code <> *BLANK;

// LCL.Select Option = CND.Option 3
LCL.Select_Option = 3;

//?* Determine selection criteria for the SQL's
// IF DTL.Company Number is greater than zero
IF DTL.Company_Number > *ZERO;

// AND DTL.Carrier Code is entered
AND DTL.Carrier_Code <> *BLANK;

// AND DTL.Region Code is Not Entered
AND DTL.Region_Code = *BLANK;

// AND DTL.Warehouse Code is Not Blanks
AND DTL.Warehouse_Code <> *BLANK;

// LCL.Select Option = CND.Option 4
LCL.Select_Option = 4;

ENDIF;

// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number;

// PAR.System Value Numeric = DTL.Rate Adjustment
PAR.System_Value_Numeric = DTL.Rate_Adjustment;

// Call program CLP Upd Carrier Rates  CL.
CALL PROGRAM(CLP Upd Carrier Rates  CL) ('PBMOUPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(DTL.Region_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Carrier_Code);
PARAMETER(LCL.Select_Option);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Rate_Adjustment_Type_sts);

CASE;

// IF LCL.Return Code Usr is Not Blank
IF LCL.Return_Code_Usr <> *BLANK;

// Send error message - 'Rates could not be updated. Update process ended in error.'
ERROR(USR4705);

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Rates have been updated'
MESSAGE(USR4704 *INFO);

// PAR.Company Number Pass   USR = CON.*ZERO
PAR.Company_Number_Pass_USR = *ZERO;

// DTL.Company Number = CON.*ZERO
DTL.Company_Number = *ZERO;

// PAR.System Value Numeric = CON.*ZERO
PAR.System_Value_Numeric = *ZERO;

// DTL.Rate Adjustment = CON.*ZERO
DTL.Rate_Adjustment = *ZERO;

MOVE *ALL (To: DTL From: CON);

ENDIF;

// DTL.Rate Adjustment Type sts = CND.Increase
DTL.Rate_Adjustment_Type_sts = 'I';

