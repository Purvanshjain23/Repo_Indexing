// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTDE1R
// ?Date: 14.08.2025 Time: 03:29:47
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?***** Change Log and comments
DO;

//?** 02/18/2010 LJB E000512   New parm added to Val JDE Account
//?** No.s UP. Retrieve and recompile.
ENDDO;

//?USER: Initialize key screen

// KEY.Bank Code = PAR.Bank Code
KEY.Bank_Code = PAR.Bank_Code;

// KEY.Deposit Date = PAR.Deposit Date
KEY.Deposit_Date = PAR.Deposit_Date;

// KEY.Deposit Time = PAR.Deposit Time
KEY.Deposit_Time = PAR.Deposit_Time;

// KEY.Reference Field = PAR.Reference Field
KEY.Reference_Field = PAR.Reference_Field;

//?USER: Initialize detail screen (new record)

EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(KEY.Bank_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Deposit Amounts    RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1334003;
PARAMETER(KEY.Bank_Code);
PARAMETER(KEY.Deposit_Date);
PARAMETER(KEY.Deposit_Time);
PARAMETER(PAR.Deposit_Amount);
PARAMETER(PAR.Total_Cash_Applied);
PARAMETER(PAR.Number_of_Deposit_Checks);
PARAMETER(PAR.Number_of_Applied_Checks);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Deposit Amount = PAR.Deposit Amount
DTL.Deposit_Amount = PAR.Deposit_Amount;

// DTL.Total Cash Applied = PAR.Total Cash Applied
DTL.Total_Cash_Applied = PAR.Total_Cash_Applied;

// DTL.Remaining to Apply = DTL.Deposit Amount - DTL.Total Cash Applied
DTL.Remaining_to_Apply = DTL.Deposit_Amount - DTL.Total_Cash_Applied;

// PAR.USR Cash Appl Amount = CON.*ZERO
PAR.USR_Cash_Appl_Amount = *ZERO;

// DTL.Adjustment Type Code = CND.A/R Miscellaneous Acct
DTL.Adjustment_Type_Code = 'ARM';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Bank Description   RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333216;
PARAMETER(KEY.Bank_Code);
PARAMETER(DTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Deposit Amounts    RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1334003;
PARAMETER(KEY.Bank_Code);
PARAMETER(KEY.Deposit_Date);
PARAMETER(*MISSING);
PARAMETER(PAR.Deposit_Amount);
PARAMETER(PAR.Total_Cash_Applied);
PARAMETER(PAR.Number_of_Deposit_Checks);
PARAMETER(PAR.Number_of_Applied_Checks);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Deposit Amount = PAR.Deposit Amount
DTL.Deposit_Amount = PAR.Deposit_Amount;

// DTL.Total Cash Applied = PAR.Total Cash Applied
DTL.Total_Cash_Applied = PAR.Total_Cash_Applied;

// DTL.Remaining to Apply = DTL.Deposit Amount - DTL.Total Cash Applied
DTL.Remaining_to_Apply = DTL.Deposit_Amount - DTL.Total_Cash_Applied;

// PAR.USR Cash Appl Amount = DB1.Transaction Amount
PAR.USR_Cash_Appl_Amount = DB1.Transaction_Amount;

//?USER: Validate detail screen fields

// PAR.Access Denied (Y/N) = CND.no
PAR.Access_Denied_Y_N = 'N';

EXECUTE FUNCTION(RTV Adj Limits         RT) TYPE(RTVOBJ) FILE(PDJ3CPP)          AC1334715;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Adjustment_Type_Code);
PARAMETER(DTL.Adjustment_Description);
PARAMETER(PAR.Effect_on_Account);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(PAR.Adjustment_Limit_Amount);
PARAMETER(PAR.Cash_Adj);
PARAMETER(PAR.User_Enter_G_L_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Edit Adjustment type information
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'AR Adjustment Type not found.'
ERROR(USR2041);
MSGPARM(DTL.Adjustment_Type_Code);

// PAR.Access Denied (Y/N) = CND.yes
PAR.Access_Denied_Y_N = 'Y';

//?Edit Adjustment type information
// IF *OTHERWISE
IF *OTHERWISE;

//?Must be a cash account
CASE;

// IF PAR.Cash/Adj is Adjustment Amount
IF PAR.Cash_Adj = 'ADJ';

// Send error message - 'Adjustment must be a cash account.'
ERROR(USR2094);
MSGPARM(DTL.Adjustment_Type_Code);

// PAR.Access Denied (Y/N) = CND.yes
PAR.Access_Denied_Y_N = 'Y';

//?Must be a cash account
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Bank G/L           RT) TYPE(RTVOBJ) FILE(CAEBREP)          AC1333234;
PARAMETER(DTL.Bank_Code);
PARAMETER(WRK.G_L_Alpha_Code);
{
 //?USER: Process Data record

 // PAR.G/L Alpha Code = DB1.G/L Alpha Code
 PAR.G_L_Alpha_Code = DB1.G_L_Alpha_Code;

}


// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(WRK.G_L_Alpha_Code);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(WRK.G_L_Account_Type_1_USR);
PARAMETER(WRK.G_L_Account_Type_2_USR);
PARAMETER(WRK.Record_Found_USR);

ENDIF;

//?Transaction GT Limit set
CASE;

// IF DTL.Transaction Amount GT PAR.Adjustment Limit Amount
IF DTL.Transaction_Amount > PAR.Adjustment_Limit_Amount;

// AND PAR.Adjustment Limit Amount is Greater than zero
AND PAR.Adjustment_Limit_Amount > *ZERO;

// Send error message - 'Trans Amount greater than transaction limit of &2.'
ERROR(USR2050);
MSGPARM(DTL.Transaction_Amount);
MSGPARM(PAR.Adjustment_Limit_Amount);

// PAR.Access Denied (Y/N) = CND.yes
PAR.Access_Denied_Y_N = 'Y';

ENDIF;

ENDIF;

//?User Defined G/L Code
CASE;

// IF PAR.User Enter G/L Status is yes
IF PAR.User_Enter_G_L_Status = 'Y';

CASE;

// IF DTL.Cost Center. . . . . . . is Not Entered
IF DTL.Cost_Center = *BLANK;

// AND DTL.Object Account . . . . . is Not Entered
AND DTL.Object_Account = *BLANK;

// AND DTL.Subsidiary . . . . . . . is Not Entered
AND DTL.Subsidiary = *BLANK;

// Send error message - 'G/L Account Must be entered.'
ERROR(USR2051);
MSGPARM(DTL.Cost_Center);
MSGPARM(DTL.Object_Account);
MSGPARM(DTL.Subsidiary);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Alpha = CVTVAR(WRK.Company Number)
PAR.Company_Number_Alpha = CVTVAR(WRK.Company_Number);

// Call program VAL JDE Account No.s   UP.
CALL PROGRAM(VAL JDE Account No.s   UP) ('ARACTEDT');
PARAMETER(PAR.Company_Number_Alpha);
PARAMETER(DTL.Cost_Center);
PARAMETER(DTL.Object_Account);
PARAMETER(DTL.Subsidiary);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(PAR.JDE_Posting_Edit_Code_USR);
PARAMETER(DTL.G_L_Account_Description);
PARAMETER(WRK.Error_Return_text);

CASE;

// IF WRK.Error Return text is Error Return
IF WRK.Error_Return_text = 'ERR';

// Send error message - 'G/L Account Code is in Error'
ERROR(USR2070);
MSGPARM(WRK.G_L_Alpha_Code);

ENDIF;

ENDIF;

//?User Defined G/L Code
// IF *OTHERWISE
IF *OTHERWISE;

//?E000512
// Call program VAL Acct ID JDE-8 dgt  UP.
CALL PROGRAM(VAL Acct ID JDE-8 dgt  UP) ('ARACTRET');
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(WRK.Cost_Center);
PARAMETER(WRK.Object_Account);
PARAMETER(WRK.Subsidiary);
PARAMETER(DTL.G_L_Account_Description);
PARAMETER(WRK.G_L_Posting_Company);
PARAMETER(PAR.JDE_Posting_Edit_Code_USR);
PARAMETER(LCL.Error_Return_text);

ENDIF;

// WRK.Transaction Amount = DTL.Transaction Amount
WRK.Transaction_Amount = DTL.Transaction_Amount;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Non-A/R Cash       CR) TYPE(CRTOBJ) FILE(ARBKCPP)          AC1112390;
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(DTL.Deposit_Time);
PARAMETER(DTL.Reference_Field);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Adjustment_Type_Code);
PARAMETER(DTL.Transaction_Amount);
PARAMETER(DTL.A_R_Check_Number);
PARAMETER(DTL.Explanation);
PARAMETER(JOB.*Job_date);
PARAMETER('E');
PARAMETER(DTL.G_L_Post_Date);
PARAMETER(DTL.GL_Document_Number);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(DTL.Effect_on_Account);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER('A');
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
PARAMETER(PAR.Access_Denied_Y_N);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing if Data update error

 // PAR.Access Denied (Y/N) = CND.no
 PAR.Access_Denied_Y_N = 'N';

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Non-A/R Cash       CH) TYPE(CHGOBJ) FILE(ARBKCPP)          AC1112391;
PARAMETER(DTL.Bank_Code);
PARAMETER(DTL.Deposit_Date);
PARAMETER(DTL.Deposit_Time);
PARAMETER(DTL.Reference_Field);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Adjustment_Type_Code);
PARAMETER(DTL.Transaction_Amount);
PARAMETER(DTL.A_R_Check_Number);
PARAMETER(DTL.Explanation);
PARAMETER(DTL.Transaction_Date_Code);
PARAMETER(DTL.A_R_Processing_Status);
PARAMETER(DTL.G_L_Post_Date);
PARAMETER(DTL.GL_Document_Number);
PARAMETER(DTL.G_L_ID_Code_JDE);
PARAMETER(DTL.Effect_on_Account);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Exit program processing

//?New 12/17/01
CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

// PAR.Access Denied (Y/N) = CND.yes
PAR.Access_Denied_Y_N = 'Y';

ENDIF;

CASE;

// IF PAR.Access Denied (Y/N) is no
IF PAR.Access_Denied_Y_N = 'N';

CASE;

// IF PAR.USR Cash Appl Amount is Entered
IF PAR.USR_Cash_Appl_Amount > *ZERO;

// PAR.USR Cash Appl Amt Total = WRK.Transaction Amount - PAR.USR Cash Appl Amount
PAR.USR_Cash_Appl_Amt_Total = WRK.Transaction_Amount - PAR.USR_Cash_Appl_Amount;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Cash Appl Amt Total = WRK.Transaction Amount
PAR.USR_Cash_Appl_Amt_Total = WRK.Transaction_Amount;

ENDIF;

EXECUTE FUNCTION(CHG Cash Applied       RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1334014;
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(PAR.Deposit_Time);
PARAMETER(PAR.USR_Cash_Appl_Amt_Total);
{
 //?USER: Process Data record

 // WRK.Total Cash Applied = PAR.USR Cash Appl Amt Total + DB1.Total Cash Applied
 WRK.Total_Cash_Applied = PAR.USR_Cash_Appl_Amt_Total + DB1.Total_Cash_Applied;

 EXECUTE FUNCTION(CHG Cash Applied Field CH) TYPE(CHGOBJ) FILE(PDJ2CPP)          AC1334031;
 PARAMETER(DB1.Bank_Code);
 PARAMETER(DB1.Deposit_Date);
 PARAMETER(DB1.Deposit_Time);
 PARAMETER(WRK.Total_Cash_Applied);
 PARAMETER('E');
 PARAMETER(DB1.CD_TF_Internal_Batch_Nbr);
 PARAMETER(DB1.CD_TF_Immediate_Fund_Amt);
 PARAMETER(DB1.CD_TF_1_Day_Fund_Amt);
 PARAMETER(DB1.CD_TF_2_Day_Fund_Amt);
 PARAMETER(DB1.CD_SB_Exempt_Immed_Amt);
 PARAMETER(DB1.CD_SB_1_Day_Exempt_Immed);
 PARAMETER(DB1.CD_SB_2_Day_Exempt_Immed);
 PARAMETER(DB1.SBD_Exempt_Total_Amount);
 PARAMETER(DB1.ARBD_Unused_Amt_2);
 PARAMETER(DB1.ARBD_Unused_Amt_3);
 PARAMETER(DB1.ARBD_Unused_Amt_4);
 PARAMETER(DB1.ARBD_Unused_Amt_5);
}


ENDIF;

