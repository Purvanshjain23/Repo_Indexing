// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKLLXFR
// ?Date: 14.08.2025 Time: 02:52:04
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification Hist - changed slm 011019
DO;

//?E14348 SLM 01/10/19 - Replace Producer Subsidiary with Load Type
//?E13766 JJH 09/17/18 - Trucker Name
//?- On the EDI Carcass Summary file, use the Trucker Name from 440
//?  if Company is 961. Request from Jerry Lehenbauer who wants this
//?  Trucker Name since Freight is paid by 440.
//?R9771 RMC 03/24/17 - when chk for producer subs, chk active only
//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?4/6/99
//?PK0089 - output to EDI Carc Summ TH shipped weight, BOH buy order date
//?       - output to EDI Carc Dtl  CD Trim Area
//?7/7/99
//?PK0134 - output to EDI Carc Summ for Resale,Subj-- 5 defect reasons,hd
//?PK0151 - output to EDI Carc Dtl --backfat depth, loin eye depth
//?12/2/99
//?PK0166 - output to EDI Carc Summ--Hd Excl min/max fields, new head fields
//?       - output to EDI Carc Dtl --CD adj/add type
//?HPE011 02/07/2006 slm add the prod site, & bf & loin eye
//?E00144 06/11/08 SLM LFT Head and EUT/KOA head TattooHdr Bol
//?E00150 09/22/08 SLM Pass the Producer subsidiary to the EDI Carcass S
//?S00555 11/14/08 SLM Pass the Recreate EDI Files Usr
//?H16853 11/02/20 ISE - Increased the Buy Order Number field
//?                      length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(E00150 Prod/Subsidiary) TYPE(EXCINTFUN)                        AB1291893;
{
 //?Execute internal function

 //?09/19/08 SLM E00150 Add the Producer Subsidiary to the
 //?Tattoo Header Ext  -- Only on non Resale hogs
 //?Allow the user to inter the Producer Subsidiary for this
 //?tattoo if the Producer Subsidiary has records for any subsidiary
 //?then the Producer Subsidiary code will be required for this tattoo
}


EXECUTE FUNCTION(Val Event Existance   RT) TYPE(RTVOBJ) FILE(PKD9CPP)           AB1205071;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER('EDI');
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

EXECUTE FUNCTION(Crt Producer Event    CR) TYPE(CRTOBJ) FILE(PKD9CPP)           AB1205068;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER('EDI');
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.PE_Unused_Status_1);
PARAMETER(WRK.PE_Unused_Status_2);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


EXECUTE FUNCTION(Crt EDI Carc Summ/Dtl RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1200914;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.Recreate_EDI_Files_Usr);
{
 //?USER: Initialize routine

 //?E14348 SLM 01/10/19 - Producer Subsidary replaced with Load Type
 //?E13766 JJH 09/17/18 - Trucker Name
 //?- On the EDI Carcass Summary file, use the Trucker Name from 440
 //?  if Company is 961. Request from Jerry Lehenbauer who wants this
 //?  Trucker Name since Freight is paid by 440.
 //?Modifications --- Year 2014
 DO;

 //?0106/2014  Slm - If Resale then don't have anything in the
 //?Carcass Base Price, the Meat Value Factor - Avg, amt
 ENDDO;

 //?Modifications --- Year 2009
 DO;

 //?5/26/2009  E00412 Slm Show the USDA Market Prices where
 //?the USDA Pork Cut Out Prices are being shown on the CS & EDT File
 //?THIS IS CUSTOM FOR TRIUMPH FOODS
 ENDDO;

 //?Modification History-- Placed inside on 06/12/08
 DO;

 //?112905 slm Updates for the TF EDI new fields
 //?112905 changes to build of the edi summary for the various fields
 //?       for the Commission Producer Code, the Miles to the producer
 //?       the addition fields for the ded/add, and the Delivery tracking
 //?       and delivery tracking splits data
 //?112905 slm Updates for the TF EDI new fields
 //?Usda pork cutout, carcass base price, break even, meat calculations
 //?and fixed cost
 //?all of the fields (new) from the tattoo header has been calculated
 //?in the payment process.. this area is just to pull the data
 //?and calculate the break even, the meat value and fixed cost
 //?020706 slm Changes for TF...Add 2 dec backfat&loin, plus site,
 //?050108 slm Corrections to using DB1 but should either par or lcl
 //?       the db1 is the last record on the held over
 //?E00144 06/11/08 SLM LFT Head and EUT/KOA head TattooHdr Bol
 //?E00150 10/31/08 SLM Prior to 10/31/08 this was changed for this
 //?project -- forgot to doco it.
 //?E00150 10/31/08 SLM Changes to pull in the producer subsidiary
 //?other then market hogs -- additional work ask for by Triumph Foods
 ENDDO;

 // LCL.Company Value Code    USR = CND.Carcass Summary Custom
 LCL.Company_Value_Code_USR = 'HPECSBOLLN';

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(LCL.Company_Value_Code_USR);
 PARAMETER(LCL.Carcass_Summary_BOL_USR);

 // WRK.Carcass Summary BOL USR = LCL.Carcass Summary BOL USR
 WRK.Carcass_Summary_BOL_USR = LCL.Carcass_Summary_BOL_USR;

 //?USER: Process Data record

 //?slm 01/11/2019 testing of new loadtype
 //?Test Build of EDI Carcass Summary
 CASE;

 // IF DB1.TH Held Over is greater than 0
 IF DB1.TH_Held_Over > *ZERO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Held Over Processing  -- if not move db1 to par   (PK0016)
 CASE;

 // IF DB1.TH Held Over Record is Yes
 IF DB1.TH_Held_Over_Record = 'Y';

 EXECUTE FUNCTION(Prt Crc Sum (Hld Ovr) IF) TYPE(EXCINTFUN)                      AB1147033;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(WRK.Kill_Date_1_Usr);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(PAR.TH_FFLI);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.TH_Head_Adjusted_LN);
 PARAMETER(PAR.TH_PHA_Head_Adds);
 PARAMETER(PAR.TH_Excluded_Gross_Value);
 PARAMETER(LCL.TH_Excluded_Carc_Val);
 PARAMETER(LCL.TH_Excluded_Premium);
 PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
 PARAMETER(PAR.TH_Avg_Loin_Eye_2_dec);
 PARAMETER(PAR.TH_Avg_Backfat_2_Dec);
 PARAMETER(PAR.TH_Head_LFT);
 PARAMETER(PAR.TH_Head_EUT_KOA);
 PARAMETER('N');
 PARAMETER('N');
 PARAMETER(WRK.CMP_Grading_Type);
 {
  //?Execute internal function

  //?Modification History Created Str slm 061208
  DO;

  //?9/24/02 RMC Calc 2 dec backfat and loin eye
  //?050108 slm e00216 need additional fields on ho for meat
  //?061208 SLM E00144 LFT Head and Uat/Koa Head
  ENDDO;

  MOVE *ALL (To: PAR From: CON);

  EXECUTE FUNCTION(Prt Crc Sum (Hld Ovr) RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1147407;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Dead_On_Arrival);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Yard_Deads);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Hot_Wgt);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
  PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.TH_CM_Base_Carcass_Value);
  PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
  PARAMETER(PAR.TH_Deduction_Amt);
  PARAMETER(PAR.TH_Carcass_Net_Amt);
  PARAMETER(PAR.TH_Additions_Amt);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_Head_Adjusted_LN);
  PARAMETER(PAR.TH_PHA_Head_Adds);
  PARAMETER(PAR.TH_Excluded_Gross_Value);
  PARAMETER(PAR.TH_Excluded_Carc_Val);
  PARAMETER(PAR.TH_Excluded_Premium);
  PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
  PARAMETER(PAR.TH_Head_LFT);
  PARAMETER(PAR.TH_Head_EUT_KOA);
  PARAMETER(PAR.Lean_Wgt_USR);
  PARAMETER(PAR.Backfat_Wgt_USR);
  PARAMETER(PAR.Loin_Eye_Wgt_USR);
  PARAMETER(PAR.Print_Carcass_Analysis_Us);
  PARAMETER(PAR.Backfat_Wgt_USR_2);
  PARAMETER(PAR.Loin_Eye_Wgt_USR_2);
  PARAMETER(PAR.Status_3);
  PARAMETER(PAR.CMP_Grading_Type);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag Usr = CND.Yes
   WRK.First_Time_Flag_Usr = 'Y';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?061208 slm E00144 LFT and eut/koa
   //?050108 slm get TH Fixed Cost Amount
   //?               TH Meat Value Factor Amt
   //?First Kill Date
   CASE;

   // IF WRK.First Time Flag Usr is Yes
   IF WRK.First_Time_Flag_Usr = 'Y';

   // WRK.First Time Flag Usr = CND.No
   WRK.First_Time_Flag_Usr = 'N';

   ENDIF;

   // PAR.TH Kill Date = DB1.TH Kill Date
   PAR.TH_Kill_Date = DB1.TH_Kill_Date;

   // PAR.TH Dead On Arrival = PAR.TH Dead On Arrival + DB1.TH Dead On Arrival
   PAR.TH_Dead_On_Arrival = PAR.TH_Dead_On_Arrival + DB1.TH_Dead_On_Arrival;

   // PAR.TH Head LFT = PAR.TH Head LFT + DB1.TH Head LFT
   PAR.TH_Head_LFT = PAR.TH_Head_LFT + DB1.TH_Head_LFT;

   // PAR.TH Head EUT/KOA = PAR.TH Head EUT/KOA + DB1.TH Head EUT/KOA
   PAR.TH_Head_EUT_KOA = PAR.TH_Head_EUT_KOA + DB1.TH_Head_EUT_KOA;

   // PAR.TH Head Received = PAR.TH Head Received + DB1.TH Head Received
   PAR.TH_Head_Received = PAR.TH_Head_Received + DB1.TH_Head_Received;

   // PAR.TH Yard Deads = PAR.TH Yard Deads + DB1.TH Yard Deads
   PAR.TH_Yard_Deads = PAR.TH_Yard_Deads + DB1.TH_Yard_Deads;

   // PAR.TH Head Condemned = PAR.TH Head Condemned + DB1.TH Head Condemned
   PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + DB1.TH_Head_Condemned;

   // PAR.TH Head Killed = PAR.TH Head Killed + DB1.TH Head Killed
   PAR.TH_Head_Killed = PAR.TH_Head_Killed + DB1.TH_Head_Killed;

   // PAR.TH Head Adds = PAR.TH Head Adds + DB1.TH Head Adds
   PAR.TH_Head_Adds = PAR.TH_Head_Adds + DB1.TH_Head_Adds;

   // PAR.TH Live Wgt = PAR.TH Live Wgt + DB1.TH Live Wgt
   PAR.TH_Live_Wgt = PAR.TH_Live_Wgt + DB1.TH_Live_Wgt;

   // PAR.TH Adj Live Wgt = PAR.TH Adj Live Wgt + DB1.TH Adj Live Wgt
   PAR.TH_Adj_Live_Wgt = PAR.TH_Adj_Live_Wgt + DB1.TH_Adj_Live_Wgt;

   // PAR.TH Hot Wgt = PAR.TH Hot Wgt + DB1.TH Hot Wgt
   PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + DB1.TH_Hot_Wgt;

   // PAR.TH CM Base Mkt Price Amt = PAR.TH CM Base Mkt Price Amt + DB1.TH CM Base Mkt
   PAR.TH_CM_Base_Mkt_Price_Amt = PAR.TH_CM_Base_Mkt_Price_Amt
   + DB1.TH_CM_Base_Mkt_Price_Amt;

   //?5/29/03 new for sort loss print
   CASE;

   // IF PAR.Status 3 is Yes
   IF PAR.Status_3 = 'Y';

   // PAR.TH CM Sort Discount Amt = PAR.TH CM Sort Discount Amt + DB1.TH MPR Sort Loss
   PAR.TH_CM_Sort_Discount_Amt = PAR.TH_CM_Sort_Discount_Amt + DB1.TH_MPR_Sort_Loss;

   //?5/29/03 new for sort loss print
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH CM Sort Discount Amt = PAR.TH CM Sort Discount Amt + DB1.TH CM Sort Discount Amt
   PAR.TH_CM_Sort_Discount_Amt = PAR.TH_CM_Sort_Discount_Amt + DB1.TH_CM_Sort_Discount_Amt;

   ENDIF;

   // PAR.TH CM Yield Gain/Loss Amt = PAR.TH CM Yield Gain/Loss Amt + DB1.TH CM Yield
   PAR.TH_CM_Yield_Gain_Loss_Amt = PAR.TH_CM_Yield_Gain_Loss_Amt
   + DB1.TH_CM_Yield_Gain_Loss_Amt;

   CASE;

   // IF PAR.CMP Grading Type is Meat Value
   IF PAR.CMP_Grading_Type = 'M';

   // PAR.TH CM Base Carcass Value = PAR.TH CM Base Carcass Value + DB1.TH Fixed Cost Amount
   PAR.TH_CM_Base_Carcass_Value = PAR.TH_CM_Base_Carcass_Value + DB1.TH_Fixed_Cost_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH CM Base Carcass Value = PAR.TH CM Base Carcass Value + DB1.TH CM Base Car
   PAR.TH_CM_Base_Carcass_Value = PAR.TH_CM_Base_Carcass_Value
   + DB1.TH_CM_Base_Carcass_Value;

   ENDIF;

   // PAR.TH CM LN AddOn/Deduct Amt = PAR.TH CM LN AddOn/Deduct Amt + DB1.TH CM LN Add
   PAR.TH_CM_LN_AddOn_Deduct_Amt = PAR.TH_CM_LN_AddOn_Deduct_Amt
   + DB1.TH_CM_LN_AddOn_Deduct_Amt;

   // PAR.TH CM Carcass Gross Amt = PAR.TH CM Carcass Gross Amt + DB1.TH CM Carcass Gross Amt
   PAR.TH_CM_Carcass_Gross_Amt = PAR.TH_CM_Carcass_Gross_Amt + DB1.TH_CM_Carcass_Gross_Amt;

   // PAR.TH Carcass Net Amt = PAR.TH Carcass Net Amt + DB1.TH Carcass Net Amt
   PAR.TH_Carcass_Net_Amt = PAR.TH_Carcass_Net_Amt + DB1.TH_Carcass_Net_Amt;

   // PAR.TH Payment Gross = PAR.TH Payment Gross + DB1.TH Payment Gross
   PAR.TH_Payment_Gross = PAR.TH_Payment_Gross + DB1.TH_Payment_Gross;

   // PAR.Th Payment Net Amt = PAR.Th Payment Net Amt + DB1.Th Payment Net Amt
   PAR.Th_Payment_Net_Amt = PAR.Th_Payment_Net_Amt + DB1.Th_Payment_Net_Amt;

   // Wgt USR =       * Lean % * Wgt USR
   PAR.Lean_Wgt_USR = PAR.Lean_Wgt_USR + ( DB1.TH_Avg_Lean_Percent * DB1.TH_Hot_Wgt 'H' );

   // Wgt USR =       * Backfat * Wgt USR
   PAR.Backfat_Wgt_USR = PAR.Backfat_Wgt_USR + ( DB1.TH_Avg_Backfat * DB1.TH_Hot_Wgt 'H' );

   // Wgt USR =       * Loin-Eye * Wgt USR
   PAR.Loin_Eye_Wgt_USR = PAR.Loin_Eye_Wgt_USR + ( DB1.TH_Avg_Loin_Eye_Depth
   * DB1.TH_Hot_Wgt 'H' );

   // Wgt USR 2 =       * Backfat2 * Wgt USR
   PAR.Backfat_Wgt_USR_2 = PAR.Backfat_Wgt_USR_2 + ( DB1.TH_Avg_Backfat_2_Dec
   * DB1.TH_Hot_Wgt 'H' );

   // Wgt USR 2 =       * Loin-Eye2 * Wgt USR
   PAR.Loin_Eye_Wgt_USR_2 = PAR.Loin_Eye_Wgt_USR_2 + ( DB1.TH_Avg_Loin_Eye_2_dec
   * DB1.TH_Hot_Wgt 'H' );

   // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.TH Deduction Amt
   PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.TH_Deduction_Amt;

   // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.TH Additions Amt
   PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.TH_Additions_Amt;

   //?Analysis to Payments
   CASE;

   // IF PAR.Print Carcass Analysis Us is Yes
   IF PAR.Print_Carcass_Analysis_Us = 'Y';

   EXECUTE FUNCTION(Prt Crc Sum (Hld Ovr) RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1177503;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(WRK.TH_CA_Base_Mkt_Price_Amt);
   PARAMETER(WRK.TH_CA_Sort_Discount_Amt);
   PARAMETER(WRK.TH_CA_Yield_Gain_Loss_Amt);
   PARAMETER(WRK.TH_CA_Base_Carcass_Value);
   PARAMETER(WRK.TH_CA_Lean_Premium_Amt);
   PARAMETER(WRK.TH_CA_Carcass_Gross_Amt);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.TH CA Base Mkt Price Amt = PAR.TH CA Base Mkt Price Amt + WRK.TH CA Base Mkt
   PAR.TH_CA_Base_Mkt_Price_Amt = PAR.TH_CA_Base_Mkt_Price_Amt
   + WRK.TH_CA_Base_Mkt_Price_Amt;

   // PAR.TH CA Sort Discount Amt = PAR.TH CA Sort Discount Amt + WRK.TH CA Sort Disco
   PAR.TH_CA_Sort_Discount_Amt = PAR.TH_CA_Sort_Discount_Amt + WRK.TH_CA_Sort_Discount_Amt;

   // PAR.TH CA Yield Gain/Loss Amt = PAR.TH CA Yield Gain/Loss Amt + WRK.TH CA Yield
   PAR.TH_CA_Yield_Gain_Loss_Amt = PAR.TH_CA_Yield_Gain_Loss_Amt
   + WRK.TH_CA_Yield_Gain_Loss_Amt;

   // PAR.TH CA Base Carcass Value = PAR.TH CA Base Carcass Value + WRK.TH CA Base Car
   PAR.TH_CA_Base_Carcass_Value = PAR.TH_CA_Base_Carcass_Value
   + WRK.TH_CA_Base_Carcass_Value;

   // PAR.TH CA Lean Premium Amt = PAR.TH CA Lean Premium Amt + WRK.TH CA Lean Premium
   PAR.TH_CA_Lean_Premium_Amt = PAR.TH_CA_Lean_Premium_Amt + WRK.TH_CA_Lean_Premium_Amt;

   // PAR.TH CA Carcass Gross Amt = PAR.TH CA Carcass Gross Amt + WRK.TH CA Carcass Gr
   PAR.TH_CA_Carcass_Gross_Amt = PAR.TH_CA_Carcass_Gross_Amt + WRK.TH_CA_Carcass_Gross_Amt;

   ENDIF;

   //?PK0166 - New fields
   // PAR.TH Head Excluded = PAR.TH Head Excluded + DB1.TH Head Excluded
   PAR.TH_Head_Excluded = PAR.TH_Head_Excluded + DB1.TH_Head_Excluded;

   // PAR.TH Excluded Gross Value = PAR.TH Excluded Gross Value + DB1.TH Excluded Gross Value
   PAR.TH_Excluded_Gross_Value = PAR.TH_Excluded_Gross_Value + DB1.TH_Excluded_Gross_Value;

   // PAR.TH Excluded Carc Val = PAR.TH Excluded Carc Val + DB1.TH Excluded Carc Val
   PAR.TH_Excluded_Carc_Val = PAR.TH_Excluded_Carc_Val + DB1.TH_Excluded_Carc_Val;

   // PAR.TH Excluded Premium = PAR.TH Excluded Premium + DB1.TH Excluded Premium
   PAR.TH_Excluded_Premium = PAR.TH_Excluded_Premium + DB1.TH_Excluded_Premium;

   // PAR.TH Head Adjusted-LN% = PAR.TH Head Adjusted-LN% + DB1.TH Head Adjusted-LN%
   PAR.TH_Head_Adjusted_LN = PAR.TH_Head_Adjusted_LN + DB1.TH_Head_Adjusted_LN;

   // PAR.TH PHA Head Adds = PAR.TH PHA Head Adds + DB1.TH PHA Head Adds
   PAR.TH_PHA_Head_Adds = PAR.TH_PHA_Head_Adds + DB1.TH_PHA_Head_Adds;

   //?050108 slm get TH Fixed Cost Amount
   // PAR.TH Fixed Cost Amount = PAR.TH Fixed Cost Amount + DB1.TH Fixed Cost Amount
   PAR.TH_Fixed_Cost_Amount = PAR.TH_Fixed_Cost_Amount + DB1.TH_Fixed_Cost_Amount;

   // PAR.TH Meat Value Factor Amt = PAR.TH Meat Value Factor Amt + DB1.TH Meat Value Factor Amt
   PAR.TH_Meat_Value_Factor_Amt = PAR.TH_Meat_Value_Factor_Amt
   + DB1.TH_Meat_Value_Factor_Amt;

   //?USER: Exit processing

   //?Analysis to Payments
   CASE;

   // IF PAR.Print Carcass Analysis Us is Yes
   IF PAR.Print_Carcass_Analysis_Us = 'Y';

   // PAR.TH CM Base Mkt Price Amt = PAR.TH CA Base Mkt Price Amt
   PAR.TH_CM_Base_Mkt_Price_Amt = PAR.TH_CA_Base_Mkt_Price_Amt;

   // PAR.TH CM Sort Discount Amt = PAR.TH CA Sort Discount Amt
   PAR.TH_CM_Sort_Discount_Amt = PAR.TH_CA_Sort_Discount_Amt;

   // PAR.TH CM Yield Gain/Loss Amt = PAR.TH CA Yield Gain/Loss Amt
   PAR.TH_CM_Yield_Gain_Loss_Amt = PAR.TH_CA_Yield_Gain_Loss_Amt;

   // PAR.TH CM Base Carcass Value = PAR.TH CA Base Carcass Value
   PAR.TH_CM_Base_Carcass_Value = PAR.TH_CA_Base_Carcass_Value;

   // PAR.TH CM LN AddOn/Deduct Amt = PAR.TH CA Lean Premium Amt
   PAR.TH_CM_LN_AddOn_Deduct_Amt = PAR.TH_CA_Lean_Premium_Amt;

   // PAR.TH CM Carcass Gross Amt = PAR.TH CA Carcass Gross Amt
   PAR.TH_CM_Carcass_Gross_Amt = PAR.TH_CA_Carcass_Gross_Amt;

   ENDIF;

  }

  //?Calculate Live /CWT and Carc /CWT
  CASE;

  // IF WRK.#Sequence Block is NULL
  IF WRK.#Sequence_Block = *BLANK;

  //?Calculate Carc/CWT if Par.Th Hot Wt is n= 0
  CASE;

  // IF PAR.TH Hot Wgt NE WRK.Zero USR
  IF PAR.TH_Hot_Wgt <> WRK.Zero_USR;

  // TH CM Bse Mkt Carc /CWT
  PAR.TH_CM_Bse_Mkt_Carc_CWT = PAR.TH_CM_Base_Mkt_Price_Amt / ( PAR.TH_Hot_Wgt / 100 'H' )
  'H';

  // TH CM Srt Dsc Carc /CWT
  PAR.TH_CM_Srt_Dsc_Carc_CWT = PAR.TH_CM_Sort_Discount_Amt / ( PAR.TH_Hot_Wgt / 100 'H' )
  'H';

  // TH CM Crc Val Carc /CWT
  WRK.TH_CM_Crc_Val_Carc_CWT = PAR.TH_CM_Base_Carcass_Value / ( PAR.TH_Hot_Wgt / 100 'H' )
  'H';

  // PAR.TH CM Crc Val Carc /CWT = WRK.TH CM Crc Val Carc /CWT
  PAR.TH_CM_Crc_Val_Carc_CWT = WRK.TH_CM_Crc_Val_Carc_CWT;

  // TH CM Lean Prem Carc /CWT
  PAR.TH_CM_Lean_Prem_Carc_CWT = PAR.TH_CM_LN_AddOn_Deduct_Amt / ( PAR.TH_Hot_Wgt / 100
  'H' ) 'H';

  // TH CM Gross Carc /CWT
  PAR.TH_CM_Gross_Carc_CWT = PAR.TH_CM_Carcass_Gross_Amt / ( PAR.TH_Hot_Wgt / 100 'H' )
  'H';

  //?Calculate Carc/CWT if Par.Th Hot Wt is n= 0
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH CM Bse Mkt Carc /CWT = CON.*ZERO
  PAR.TH_CM_Bse_Mkt_Carc_CWT = *ZERO;

  // PAR.TH CM Srt Dsc Carc /CWT = CON.*ZERO
  PAR.TH_CM_Srt_Dsc_Carc_CWT = *ZERO;

  // PAR.TH CM Yld G/L Carc /CWT = CON.*ZERO
  PAR.TH_CM_Yld_G_L_Carc_CWT = *ZERO;

  // PAR.TH CM Crc Val Carc /CWT = CON.*ZERO
  PAR.TH_CM_Crc_Val_Carc_CWT = *ZERO;

  // PAR.TH CM Lean Prem Carc /CWT = CON.*ZERO
  PAR.TH_CM_Lean_Prem_Carc_CWT = *ZERO;

  // PAR.TH CM Gross Carc /CWT = CON.*ZERO
  PAR.TH_CM_Gross_Carc_CWT = *ZERO;

  ENDIF;

  //?Calculate Live/CWT if Par.Th live wt is n= 0
  CASE;

  // IF PAR.TH Live Wgt NE WRK.Zero USR
  IF PAR.TH_Live_Wgt <> WRK.Zero_USR;

  // TH CM Bse Mkt Live /CWT
  PAR.TH_CM_Bse_Mkt_Live_CWT = PAR.TH_CM_Base_Mkt_Price_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
  'H';

  // TH CM Srt Dsc Live /CWT
  PAR.TH_CM_Srt_Dsc_Live_CWT = PAR.TH_CM_Sort_Discount_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
  'H';

  // TH CM Yld G/L live /CWT
  PAR.TH_CM_Yld_G_L_Live_CWT = PAR.TH_CM_Yield_Gain_Loss_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
  'H';

  // TH CM Crc Val Live /CWT
  PAR.TH_CM_Crc_Val_Live_CWT = PAR.TH_CM_Base_Carcass_Value / ( PAR.TH_Live_Wgt / 100 'H' )
  'H';

  // TH CM Lean Prem Live /CWT
  PAR.TH_CM_Lean_Prem_Live_CWT = PAR.TH_CM_LN_AddOn_Deduct_Amt / ( PAR.TH_Live_Wgt / 100
  'H' ) 'H';

  // TH CM Gross Live /CWT
  PAR.TH_CM_Gross_Live_CWT = PAR.TH_CM_Carcass_Gross_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
  'H';

  //?Calculate Live/CWT if Par.Th live wt is n= 0
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH CM Bse Mkt Live /CWT = CON.*ZERO
  PAR.TH_CM_Bse_Mkt_Live_CWT = *ZERO;

  // PAR.TH CM Srt Dsc Live /CWT = CON.*ZERO
  PAR.TH_CM_Srt_Dsc_Live_CWT = *ZERO;

  // PAR.TH CM Yld G/L Live /CWT = CON.*ZERO
  PAR.TH_CM_Yld_G_L_Live_CWT = *ZERO;

  // PAR.TH CM Crc Val Live /CWT = CON.*ZERO
  PAR.TH_CM_Crc_Val_Live_CWT = *ZERO;

  // PAR.TH CM Lean Prem Live /CWT = CON.*ZERO
  PAR.TH_CM_Lean_Prem_Live_CWT = *ZERO;

  // PAR.TH CM Gross Live /CWT = CON.*ZERO
  PAR.TH_CM_Gross_Live_CWT = *ZERO;

  ENDIF;

  ENDIF;

  //?Calc Avg Live Wt
  CASE;

  // IF PAR.TH Head Received is *Zeros
  IF PAR.TH_Head_Received = *ZERO;

  // WRK.TH Avg Live Wgt = CON.*ZERO
  WRK.TH_Avg_Live_Wgt = *ZERO;

  //?Calc Avg Live Wt
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.TH Avg Live Wgt = PAR.TH Live Wgt / PAR.TH Head Received *
  WRK.TH_Avg_Live_Wgt = PAR.TH_Live_Wgt / PAR.TH_Head_Received;

  ENDIF;

  //?Calc Adj Live Weight
  CASE;

  // IF PAR.TH Head Received EQ PAR.TH Head Killed
  IF PAR.TH_Head_Received = PAR.TH_Head_Killed;

  // WRK.TH Adj Live Wgt = PAR.TH Live Wgt
  WRK.TH_Adj_Live_Wgt = PAR.TH_Live_Wgt;

  //?Calc Adj Live Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.TH Adj Live Wgt = PAR.TH Head Killed * WRK.TH Avg Live Wgt *
  WRK.TH_Adj_Live_Wgt = PAR.TH_Head_Killed * WRK.TH_Avg_Live_Wgt;

  ENDIF;

  // PAR.TH Avg Live Wgt = WRK.TH Avg Live Wgt
  PAR.TH_Avg_Live_Wgt = WRK.TH_Avg_Live_Wgt;

  // PAR.TH Adj Live Wgt = WRK.TH Adj Live Wgt
  PAR.TH_Adj_Live_Wgt = WRK.TH_Adj_Live_Wgt;

  //?Calc Actual Yield %
  CASE;

  // IF PAR.TH Live Wgt NE WRK.Zero USR
  IF PAR.TH_Live_Wgt <> WRK.Zero_USR;

  // TH Actual Yield %
  PAR.TH_Actual_Yield = ( PAR.TH_Hot_Wgt / PAR.TH_Live_Wgt 'H' ) * 100 'H';

  //?Calc Actual Yield %
  // IF *OTHERWISE
  IF *OTHERWISE;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.TH_Actual_Yield = *ZERO;

  ENDIF;

  //?Calc Adj Actual Yield %
  CASE;

  // IF PAR.TH Adj Live Wgt NE WRK.Zero USR
  IF PAR.TH_Adj_Live_Wgt <> WRK.Zero_USR;

  // TH Adj Actual Yield %
  PAR.TH_Adj_Actual_Yield = ( PAR.TH_Hot_Wgt / PAR.TH_Adj_Live_Wgt 'H' ) * 100 'H';

  //?Calc Adj Actual Yield %
  // IF *OTHERWISE
  IF *OTHERWISE;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.TH_Adj_Actual_Yield = *ZERO;

  ENDIF;

  //?Calc Avg Hot Wt
  CASE;

  // IF PAR.TH Head Killed NE WRK.Zero USR
  IF PAR.TH_Head_Killed <> WRK.Zero_USR;

  // PAR.TH Avg Hot Wgt = PAR.TH Hot Wgt / PAR.TH Head Killed *Rounded
  PAR.TH_Avg_Hot_Wgt = PAR.TH_Hot_Wgt / PAR.TH_Head_Killed 'H';

  //?Calc Avg Hot Wt
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH Avg Hot Wgt = CON.*ZERO
  PAR.TH_Avg_Hot_Wgt = *ZERO;

  ENDIF;

  //?Calc Avg Lean %, Loin eye, & Backfat
  CASE;

  // IF PAR.TH Hot Wgt NE WRK.Zero USR
  IF PAR.TH_Hot_Wgt <> WRK.Zero_USR;

  // PAR.TH Avg Lean Percent = PAR.Lean % * Wgt USR / PAR.TH Hot Wgt *Rounded
  PAR.TH_Avg_Lean_Percent = PAR.Lean_Wgt_USR / PAR.TH_Hot_Wgt 'H';

  // PAR.TH Avg Loin Eye Depth = PAR.Loin-Eye * Wgt USR / PAR.TH Hot Wgt *Rounded
  PAR.TH_Avg_Loin_Eye_Depth = PAR.Loin_Eye_Wgt_USR / PAR.TH_Hot_Wgt 'H';

  // PAR.TH Avg Backfat = PAR.Backfat * Wgt USR / PAR.TH Hot Wgt *Rounded
  PAR.TH_Avg_Backfat = PAR.Backfat_Wgt_USR / PAR.TH_Hot_Wgt 'H';

  // PAR.TH Avg Loin Eye - 2 dec = PAR.Loin-Eye * Wgt USR 2 / PAR.TH Hot Wgt *Rounded
  PAR.TH_Avg_Loin_Eye_2_dec = PAR.Loin_Eye_Wgt_USR_2 / PAR.TH_Hot_Wgt 'H';

  // PAR.TH Avg Backfat - 2 Dec = PAR.Backfat * Wgt USR 2 / PAR.TH Hot Wgt *Rounded
  PAR.TH_Avg_Backfat_2_Dec = PAR.Backfat_Wgt_USR_2 / PAR.TH_Hot_Wgt 'H';

  //?Calc Avg Lean %, Loin eye, & Backfat
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH Avg Lean Percent = CON.*ZERO
  PAR.TH_Avg_Lean_Percent = *ZERO;

  // PAR.TH Avg Loin Eye Depth = CON.*ZERO
  PAR.TH_Avg_Loin_Eye_Depth = *ZERO;

  // PAR.TH Avg Backfat = CON.*ZERO
  PAR.TH_Avg_Backfat = *ZERO;

  // PAR.TH Avg Loin Eye - 2 dec = CON.*ZERO
  PAR.TH_Avg_Loin_Eye_2_dec = *ZERO;

  // PAR.TH Avg Backfat - 2 Dec = CON.*ZERO
  PAR.TH_Avg_Backfat_2_Dec = *ZERO;

  ENDIF;

  // TH FFLI
  PAR.TH_FFLI = ( 51.537 + ( .035 * PAR.TH_Hot_Wgt ) ) - ( 12.26 * PAR.TH_Avg_Backfat );

 }

 //?Held Over Processing  -- if not move db1 to par   (PK0016)
 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

 EXECUTE FUNCTION(Rtv PrchPrc ClcInf,dt RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1218157;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOH_Buy_Order_Date);
 PARAMETER(WRK.#Num_USR);
 PARAMETER(PAR.BOH_Quote_Price_Type);
 PARAMETER(WRK.#Num_USR);
 PARAMETER(PAR.BOH_Commodity_Market_Code);
 PARAMETER(PAR.BOH_Commodity_Price_Group);
 PARAMETER(WRK.#Txt_USR);
 PARAMETER(WRK.#Txt_USR);
 PARAMETER(WRK.#Txt_USR);
 PARAMETER(WRK.#Txt_USR);
 PARAMETER(PAR.CMP_Program_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Pricing UOM
 CASE;

 // IF PAR.BOH Quote Price Type is Entered
 IF PAR.BOH_Quote_Price_Type = 'CP'/'LP';

 CASE;

 // IF PAR.BOH Quote Price Type is Carcass Price
 IF PAR.BOH_Quote_Price_Type = 'CP';

 // PAR.Pricing UOM USR = CND.Carcass Hundred Weight
 PAR.Pricing_UOM_USR = 'CW';

 // IF PAR.BOH Quote Price Type is Live Price
 IF PAR.BOH_Quote_Price_Type = 'LP';

 // PAR.Pricing UOM USR = CND.Live Hundred Weight
 PAR.Pricing_UOM_USR = 'LW';

 ENDIF;

 //?Pricing UOM
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Rtv Commod Group U/M  XF.
 CALL PROGRAM(Rtv Commod Group U/M  XF) ('PDUVXFR');
 PARAMETER(PAR.BOH_Commodity_Price_Group);
 PARAMETER(PAR.Pricing_UOM_USR);

 ENDIF;

 //?Calc /Live CWT based on Adjusted Live Weight if UOM=CW
 CASE;

 // IF PAR.Pricing UOM USR is Carcass Hundred Weight
 IF PAR.Pricing_UOM_USR = 'CW';

 // AND DB1.TH Payment Type is Carcass Merit
 AND DB1.TH_Payment_Type = 'C';

 CASE;

 // IF DB1.TH Adj Live Wgt is Greater then Zero
 IF DB1.TH_Adj_Live_Wgt > *ZERO;

 // Base Market /Live CWT
 PAR.TH_CM_Bse_Mkt_Live_CWT = PAR.TH_CM_Base_Mkt_Price_Amt / ( PAR.TH_Adj_Live_Wgt / 100
 'H' ) 'H';

 // Var f/ Top Wgt /Live CWT
 PAR.TH_CM_Srt_Dsc_Live_CWT = PAR.TH_CM_Sort_Discount_Amt / ( PAR.TH_Adj_Live_Wgt / 100
 'H' ) 'H';

 // Yield Gain/Loss /Live CWT
 PAR.TH_CM_Yld_G_L_Live_CWT = PAR.TH_CM_Yield_Gain_Loss_Amt / ( PAR.TH_Adj_Live_Wgt / 100
 'H' ) 'H';

 // farcass Value /Live CWT
 PAR.TH_CM_Crc_Val_Live_CWT = PAR.TH_CM_Base_Carcass_Value / ( PAR.TH_Adj_Live_Wgt / 100
 'H' ) 'H';

 // Lean Prem/Ded /Live CWT
 PAR.TH_CM_Lean_Prem_Live_CWT = PAR.TH_CM_LN_AddOn_Deduct_Amt / ( PAR.TH_Adj_Live_Wgt
 / 100 'H' ) 'H';

 // Gross Value /Live CWT
 PAR.TH_CM_Gross_Live_CWT = PAR.TH_CM_Carcass_Gross_Amt / ( PAR.TH_Adj_Live_Wgt / 100 'H' )
 'H';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv CMP Info          RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1116767;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(WRK.#Txt_USR);
 PARAMETER(LCL.CMP_Grading_Type);
 PARAMETER(PAR.CMP_Sort_Basis);
 PARAMETER(WRK.#Txt_USR);
 PARAMETER(WRK.#Num_USR);
 PARAMETER(WRK.#Num_USR);
 PARAMETER(WRK.#Txt_USR);
 PARAMETER(WRK.#Txt_USR);
 PARAMETER(WRK.#Num_USR);
 PARAMETER(WRK.#Txt_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Sort Basis = None
 CASE;

 // IF PAR.CMP Sort Basis is None
 IF PAR.CMP_Sort_Basis = *BLANK;

 // PAR.TH CM Base Mkt Price Amt = CON.*ZERO
 PAR.TH_CM_Base_Mkt_Price_Amt = *ZERO;

 // PAR.TH CM Sort Discount Amt = CON.*ZERO
 PAR.TH_CM_Sort_Discount_Amt = *ZERO;

 // PAR.TH CM Yield Gain/Loss Amt = CON.*ZERO
 PAR.TH_CM_Yield_Gain_Loss_Amt = *ZERO;

 // PAR.TH CM Bse Mkt Live /CWT = CON.*ZERO
 PAR.TH_CM_Bse_Mkt_Live_CWT = *ZERO;

 // PAR.TH CM Srt Dsc Live /CWT = CON.*ZERO
 PAR.TH_CM_Srt_Dsc_Live_CWT = *ZERO;

 // PAR.TH CM Yld G/L Live /CWT = CON.*ZERO
 PAR.TH_CM_Yld_G_L_Live_CWT = *ZERO;

 // PAR.TH CM Bse Mkt Carc /CWT = CON.*ZERO
 PAR.TH_CM_Bse_Mkt_Carc_CWT = *ZERO;

 // PAR.TH CM Srt Dsc Carc /CWT = CON.*ZERO
 PAR.TH_CM_Srt_Dsc_Carc_CWT = *ZERO;

 // PAR.TH CM Yld G/L Carc /CWT = CON.*ZERO
 PAR.TH_CM_Yld_G_L_Carc_CWT = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Prt Crc Sum Ded/Add   IF) TYPE(EXCINTFUN)                      AB1147491;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(PAR.Deduction_Desc_1);
 PARAMETER(PAR.Deduction_Desc_2);
 PARAMETER(PAR.Deduction_Desc_3);
 PARAMETER(PAR.Deduction_Desc_4);
 PARAMETER(PAR.Deduction_Desc_5);
 PARAMETER(PAR.Deduction_Desc_6);
 PARAMETER(PAR.Addition_Desc_1);
 PARAMETER(PAR.Addition_Desc_2);
 PARAMETER(PAR.Deduction_Amt_1);
 PARAMETER(PAR.Deduction_Amt_2);
 PARAMETER(PAR.Deduction_Amt_3);
 PARAMETER(PAR.Deduction_Amt_4);
 PARAMETER(PAR.Deduction_Amt_5);
 PARAMETER(PAR.Deduction_Amt_6);
 PARAMETER(PAR.Addition_Amt_1);
 PARAMETER(PAR.Addition_Amt_2);
 PARAMETER(PAR.Deduction_Code_1);
 PARAMETER(PAR.Deduction_Code_2);
 PARAMETER(PAR.Deduction_Code_3);
 PARAMETER(PAR.Deduction_Code_4);
 PARAMETER(PAR.Deduction_Code_5);
 PARAMETER(PAR.Deduction_Code_6);
 PARAMETER(PAR.Addition_Code_1);
 PARAMETER(PAR.Addition_Code_2);
 PARAMETER(PAR.Deduction_UOM_1);
 PARAMETER(PAR.Deduction_UOM_2);
 PARAMETER(PAR.Deduction_UOM_3);
 PARAMETER(PAR.Deduction_UOM_4);
 PARAMETER(PAR.Deduction_UOM_5);
 PARAMETER(PAR.Deduction_UOM_6);
 PARAMETER(PAR.Addition_UOM_1);
 PARAMETER(PAR.Addition_UOM_2);
 PARAMETER(PAR.Deduction_Unit_Amt_1);
 PARAMETER(PAR.Deduction_Unit_Amt_2);
 PARAMETER(PAR.Deduction_Unit_Amt_3);
 PARAMETER(PAR.Deduction_Unit_Amt_4);
 PARAMETER(PAR.Deduction_Unit_Amt_5);
 PARAMETER(PAR.Deduction_Unit_Amt_6);
 PARAMETER(PAR.Addition_Unit_Amt_1);
 PARAMETER(PAR.Addition_Unit_Amt_2);
 {
  //?Execute internal function

  MOVE *ALL (To: PAR From: CON);

  EXECUTE FUNCTION(Prt Crc Sum Ded/Add   RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1147490;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.Ded_Line_1_USR);
  PARAMETER(PAR.Ded_Line_2_USR);
  PARAMETER(PAR.Ded_Line_3_USR);
  PARAMETER(PAR.Ded_Line_4_USR);
  PARAMETER(PAR.Ded_Line_5_USR);
  PARAMETER(PAR.Ded_Line_6_USR);
  PARAMETER(PAR.Ded_Line_7_USR);
  PARAMETER(PAR.Ded_Line_8_USR);
  PARAMETER(PAR.Ded_D_A_Code_1_USR);
  PARAMETER(PAR.Ded_D_A_Code_2_USR);
  PARAMETER(PAR.Ded_D_A_Code_3_USR);
  PARAMETER(PAR.Ded_D_A_Code_4_USR);
  PARAMETER(PAR.Ded_D_A_Code_5_USR);
  PARAMETER(PAR.Ded_D_A_Code_6_USR);
  PARAMETER(PAR.Ded_D_A_Code_7_USR);
  PARAMETER(PAR.Ded_D_A_Code_8_USR);
  PARAMETER(PAR.Ded_Add_UOM_1_Usr);
  PARAMETER(PAR.Ded_Add_UOM_2_Usr);
  PARAMETER(PAR.Ded_Add_UOM_3_Usr);
  PARAMETER(PAR.Ded_Add_UOM_4_Usr);
  PARAMETER(PAR.Ded_Add_UOM_5_Usr);
  PARAMETER(PAR.Ded_Add_UOM_6_Usr);
  PARAMETER(PAR.Ded_Add_UOM_7_Usr);
  PARAMETER(PAR.Ded_Add_UOM_8_Usr);
  PARAMETER(PAR.Ded_Line_1_UnitAmt_Rate);
  PARAMETER(PAR.Ded_Line_2_UnitAmt_Rate);
  PARAMETER(PAR.Ded_Line_3_UnitAmt_Rate);
  PARAMETER(PAR.Ded_Line_4_UnitAmt_Rate);
  PARAMETER(PAR.Ded_Line_5_UnitAmt_Rate);
  PARAMETER(PAR.Ded_Line_6_UnitAmt_Rate);
  PARAMETER(PAR.Ded_Line_7_UnitAmt_Rate);
  PARAMETER(PAR.Ded_Line_8_UnitAmt_Rate);
  {
   //?USER: Initialize routine

   // Call program Rtv Company Values    XF.
   CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER('HPEEDITRN');
   PARAMETER(LCL.System_Value_Alpha_USR);

   CASE;

   // IF LCL.System Value Alpha    USR is Yes
   IF LCL.System_Value_Alpha_USR = 'Y';

   EXECUTE FUNCTION(Rtv EDI PositionDed/ADDRT) TYPE(RTVOBJ) FILE(PKBBREP)          AB1279797;
   PARAMETER(PAR.Ded_D_A_Code_1_USR);
   PARAMETER(PAR.Ded_D_A_Code_2_USR);
   PARAMETER(PAR.Ded_D_A_Code_3_USR);
   PARAMETER(PAR.Ded_D_A_Code_4_USR);
   PARAMETER(PAR.Ded_D_A_Code_5_USR);
   PARAMETER(PAR.Ded_D_A_Code_6_USR);
   PARAMETER(PAR.Ded_D_A_Code_7_USR);
   PARAMETER(PAR.Ded_D_A_Code_8_USR);
   {
    //?USER: Initialize routine

    // LCL.Deduction Code 1 = CON.*BLANK
    LCL.Deduction_Code_1 = *BLANK;

    //?USER: Process Data record

    CASE;

    // IF DB1.DED Fixed Unit Amt Sign is Add
    IF DB1.DED_Fixed_Unit_Amt_Sign = '+';

    CASE;

    // IF PAR.Addition Code 1 EQ LCL.Deduction Code 1
    IF PAR.Addition_Code_1 = LCL.Deduction_Code_1;

    // PAR.Addition Code 1 = DB1.DED D/A Code
    PAR.Addition_Code_1 = DB1.DED_D_A_Code;

    // IF PAR.Addition Code 2 EQ LCL.Deduction Code 1
    IF PAR.Addition_Code_2 = LCL.Deduction_Code_1;

    // PAR.Addition Code 2 = DB1.DED D/A Code
    PAR.Addition_Code_2 = DB1.DED_D_A_Code;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Addition Code 2 = CON.999
    PAR.Addition_Code_2 = 999;

    ENDIF;

    // IF PAR.Deduction Code 1 EQ LCL.Deduction Code 1
    IF PAR.Deduction_Code_1 = LCL.Deduction_Code_1;

    // PAR.Deduction Code 1 = DB1.DED D/A Code
    PAR.Deduction_Code_1 = DB1.DED_D_A_Code;

    // IF PAR.Deduction Code 2 EQ LCL.Deduction Code 1
    IF PAR.Deduction_Code_2 = LCL.Deduction_Code_1;

    // PAR.Deduction Code 2 = DB1.DED D/A Code
    PAR.Deduction_Code_2 = DB1.DED_D_A_Code;

    // IF PAR.Deduction Code 3 EQ LCL.Deduction Code 1
    IF PAR.Deduction_Code_3 = LCL.Deduction_Code_1;

    // PAR.Deduction Code 3 = DB1.DED D/A Code
    PAR.Deduction_Code_3 = DB1.DED_D_A_Code;

    // IF PAR.Deduction Code 4 EQ LCL.Deduction Code 1
    IF PAR.Deduction_Code_4 = LCL.Deduction_Code_1;

    // PAR.Deduction Code 4 = DB1.DED D/A Code
    PAR.Deduction_Code_4 = DB1.DED_D_A_Code;

    // IF PAR.Deduction Code 5 EQ LCL.Deduction Code 1
    IF PAR.Deduction_Code_5 = LCL.Deduction_Code_1;

    // PAR.Deduction Code 5 = DB1.DED D/A Code
    PAR.Deduction_Code_5 = DB1.DED_D_A_Code;

    // IF PAR.Deduction Code 5 EQ LCL.Deduction Code 1
    IF PAR.Deduction_Code_5 = LCL.Deduction_Code_1;

    // PAR.Deduction Code 5 = DB1.DED D/A Code
    PAR.Deduction_Code_5 = DB1.DED_D_A_Code;

    // IF PAR.Deduction Code 6 EQ LCL.Deduction Code 1
    IF PAR.Deduction_Code_6 = LCL.Deduction_Code_1;

    // PAR.Deduction Code 6 = DB1.DED D/A Code
    PAR.Deduction_Code_6 = DB1.DED_D_A_Code;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Deduction Code 6 = CON.999
    PAR.Deduction_Code_6 = 999;

    ENDIF;

   }

   ENDIF;

   //?USER: Process Data record

   //?Deductions
   CASE;

   // IF DB1.THD Unit Amt Sign is Subtract
   IF DB1.THD_Unit_Amt_Sign = '-';

   //?Deductions
   CASE;

   // IF PAR.Ded D/A Code 1 USR EQ WRK.Blank USR
   IF PAR.Ded_D_A_Code_1_USR = WRK.Blank_USR;

   // OR PAR.Ded D/A Code 1 USR EQ DB1.DED D/A Code
   OR PAR.Ded_D_A_Code_1_USR = DB1.DED_D_A_Code;

   // PAR.Ded D/A Code 1 USR = DB1.DED D/A Code
   PAR.Ded_D_A_Code_1_USR = DB1.DED_D_A_Code;

   // PAR.Ded Line 1 USR = PAR.Ded Line 1 USR + DB1.THD Ded/Add Amount
   PAR.Ded_Line_1_USR = PAR.Ded_Line_1_USR + DB1.THD_Ded_Add_Amount;

   // PAR.Ded/Add UOM 1 Usr = DB1.THD UOM
   PAR.Ded_Add_UOM_1_Usr = DB1.THD_UOM;

   // PAR.Ded Line 1 UnitAmt Rate = DB1.THD Unit Amt
   PAR.Ded_Line_1_UnitAmt_Rate = DB1.THD_Unit_Amt;

   //?Deductions
   // IF PAR.Ded D/A Code 2 USR EQ WRK.Blank USR
   IF PAR.Ded_D_A_Code_2_USR = WRK.Blank_USR;

   // OR PAR.Ded D/A Code 2 USR EQ DB1.DED D/A Code
   OR PAR.Ded_D_A_Code_2_USR = DB1.DED_D_A_Code;

   // PAR.Ded D/A Code 2 USR = DB1.DED D/A Code
   PAR.Ded_D_A_Code_2_USR = DB1.DED_D_A_Code;

   // PAR.Ded Line 2 USR = PAR.Ded Line 2 USR + DB1.THD Ded/Add Amount
   PAR.Ded_Line_2_USR = PAR.Ded_Line_2_USR + DB1.THD_Ded_Add_Amount;

   // PAR.Ded/Add UOM 2 Usr = DB1.THD UOM
   PAR.Ded_Add_UOM_2_Usr = DB1.THD_UOM;

   // PAR.Ded Line 2 UnitAmt Rate = DB1.THD Unit Amt
   PAR.Ded_Line_2_UnitAmt_Rate = DB1.THD_Unit_Amt;

   //?Deductions
   // IF PAR.Ded D/A Code 3 USR EQ WRK.Blank USR
   IF PAR.Ded_D_A_Code_3_USR = WRK.Blank_USR;

   // OR PAR.Ded D/A Code 3 USR EQ DB1.DED D/A Code
   OR PAR.Ded_D_A_Code_3_USR = DB1.DED_D_A_Code;

   // PAR.Ded D/A Code 3 USR = DB1.DED D/A Code
   PAR.Ded_D_A_Code_3_USR = DB1.DED_D_A_Code;

   // PAR.Ded Line 3 USR = PAR.Ded Line 3 USR + DB1.THD Ded/Add Amount
   PAR.Ded_Line_3_USR = PAR.Ded_Line_3_USR + DB1.THD_Ded_Add_Amount;

   // PAR.Ded/Add UOM 3 Usr = DB1.THD UOM
   PAR.Ded_Add_UOM_3_Usr = DB1.THD_UOM;

   // PAR.Ded Line 3 UnitAmt Rate = DB1.THD Unit Amt
   PAR.Ded_Line_3_UnitAmt_Rate = DB1.THD_Unit_Amt;

   //?Deductions
   // IF PAR.Ded D/A Code 4 USR EQ WRK.Blank USR
   IF PAR.Ded_D_A_Code_4_USR = WRK.Blank_USR;

   // OR PAR.Ded D/A Code 4 USR EQ DB1.DED D/A Code
   OR PAR.Ded_D_A_Code_4_USR = DB1.DED_D_A_Code;

   // PAR.Ded D/A Code 4 USR = DB1.DED D/A Code
   PAR.Ded_D_A_Code_4_USR = DB1.DED_D_A_Code;

   // PAR.Ded Line 4 USR = PAR.Ded Line 4 USR + DB1.THD Ded/Add Amount
   PAR.Ded_Line_4_USR = PAR.Ded_Line_4_USR + DB1.THD_Ded_Add_Amount;

   // PAR.Ded/Add UOM 4 Usr = DB1.THD UOM
   PAR.Ded_Add_UOM_4_Usr = DB1.THD_UOM;

   // PAR.Ded Line 4 UnitAmt Rate = DB1.THD Unit Amt
   PAR.Ded_Line_4_UnitAmt_Rate = DB1.THD_Unit_Amt;

   //?Deductions
   // IF PAR.Ded D/A Code 5 USR EQ WRK.Blank USR
   IF PAR.Ded_D_A_Code_5_USR = WRK.Blank_USR;

   // OR PAR.Ded D/A Code 5 USR EQ DB1.DED D/A Code
   OR PAR.Ded_D_A_Code_5_USR = DB1.DED_D_A_Code;

   // PAR.Ded D/A Code 5 USR = DB1.DED D/A Code
   PAR.Ded_D_A_Code_5_USR = DB1.DED_D_A_Code;

   // PAR.Ded Line 5 USR = PAR.Ded Line 5 USR + DB1.THD Ded/Add Amount
   PAR.Ded_Line_5_USR = PAR.Ded_Line_5_USR + DB1.THD_Ded_Add_Amount;

   // PAR.Ded/Add UOM 5 Usr = DB1.THD UOM
   PAR.Ded_Add_UOM_5_Usr = DB1.THD_UOM;

   // PAR.Ded Line 5 UnitAmt Rate = DB1.THD Unit Amt
   PAR.Ded_Line_5_UnitAmt_Rate = DB1.THD_Unit_Amt;

   //?Deductions
   // IF PAR.Ded D/A Code 6 USR EQ WRK.Blank USR
   IF PAR.Ded_D_A_Code_6_USR = WRK.Blank_USR;

   // OR PAR.Ded D/A Code 6 USR EQ DB1.DED D/A Code
   OR PAR.Ded_D_A_Code_6_USR = DB1.DED_D_A_Code;

   // PAR.Ded D/A Code 6 USR = DB1.DED D/A Code
   PAR.Ded_D_A_Code_6_USR = DB1.DED_D_A_Code;

   // PAR.Ded Line 6 USR = PAR.Ded Line 6 USR + DB1.THD Ded/Add Amount
   PAR.Ded_Line_6_USR = PAR.Ded_Line_6_USR + DB1.THD_Ded_Add_Amount;

   // PAR.Ded/Add UOM 6 Usr = DB1.THD UOM
   PAR.Ded_Add_UOM_6_Usr = DB1.THD_UOM;

   // PAR.Ded Line 6 UnitAmt Rate = DB1.THD Unit Amt
   PAR.Ded_Line_6_UnitAmt_Rate = DB1.THD_Unit_Amt;

   //?Deductions
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Ded D/A Code 6 USR = CON.999
   PAR.Ded_D_A_Code_6_USR = 999;

   // PAR.Ded Line 6 USR = PAR.Ded Line 6 USR + DB1.THD Ded/Add Amount
   PAR.Ded_Line_6_USR = PAR.Ded_Line_6_USR + DB1.THD_Ded_Add_Amount;

   // PAR.Ded/Add UOM 6 Usr = WRK.Blank USR
   PAR.Ded_Add_UOM_6_Usr = WRK.Blank_USR;

   // PAR.Ded Line 6 UnitAmt Rate = CON.*ZERO
   PAR.Ded_Line_6_UnitAmt_Rate = *ZERO;

   ENDIF;

   ENDIF;

   //?Additions
   CASE;

   // IF DB1.THD Unit Amt Sign is Add
   IF DB1.THD_Unit_Amt_Sign = '+';

   //?Additions
   CASE;

   // IF PAR.Ded D/A Code 7 USR EQ WRK.Blank USR
   IF PAR.Ded_D_A_Code_7_USR = WRK.Blank_USR;

   // OR PAR.Ded D/A Code 7 USR EQ DB1.DED D/A Code
   OR PAR.Ded_D_A_Code_7_USR = DB1.DED_D_A_Code;

   // PAR.Ded D/A Code 7 USR = DB1.DED D/A Code
   PAR.Ded_D_A_Code_7_USR = DB1.DED_D_A_Code;

   // PAR.Ded Line 7 USR = PAR.Ded Line 7 USR + DB1.THD Ded/Add Amount
   PAR.Ded_Line_7_USR = PAR.Ded_Line_7_USR + DB1.THD_Ded_Add_Amount;

   // PAR.Ded/Add UOM 7 Usr = DB1.THD UOM
   PAR.Ded_Add_UOM_7_Usr = DB1.THD_UOM;

   // PAR.Ded Line 7 UnitAmt Rate = DB1.THD Unit Amt
   PAR.Ded_Line_7_UnitAmt_Rate = DB1.THD_Unit_Amt;

   //?Additions
   // IF PAR.Ded D/A Code 8 USR EQ WRK.Blank USR
   IF PAR.Ded_D_A_Code_8_USR = WRK.Blank_USR;

   // OR PAR.Ded D/A Code 8 USR EQ DB1.DED D/A Code
   OR PAR.Ded_D_A_Code_8_USR = DB1.DED_D_A_Code;

   // PAR.Ded D/A Code 8 USR = DB1.DED D/A Code
   PAR.Ded_D_A_Code_8_USR = DB1.DED_D_A_Code;

   // PAR.Ded Line 8 USR = PAR.Ded Line 8 USR + DB1.THD Ded/Add Amount
   PAR.Ded_Line_8_USR = PAR.Ded_Line_8_USR + DB1.THD_Ded_Add_Amount;

   // PAR.Ded/Add UOM 8 Usr = DB1.THD UOM
   PAR.Ded_Add_UOM_8_Usr = DB1.THD_UOM;

   // PAR.Ded Line 8 UnitAmt Rate = DB1.THD Unit Amt
   PAR.Ded_Line_8_UnitAmt_Rate = DB1.THD_Unit_Amt;

   //?Additions
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Ded D/A Code 8 USR = CON.999
   PAR.Ded_D_A_Code_8_USR = 999;

   // PAR.Ded Line 8 USR = PAR.Ded Line 8 USR + DB1.THD Ded/Add Amount
   PAR.Ded_Line_8_USR = PAR.Ded_Line_8_USR + DB1.THD_Ded_Add_Amount;

   // PAR.Ded/Add UOM 8 Usr = WRK.Blank USR
   PAR.Ded_Add_UOM_8_Usr = WRK.Blank_USR;

   // PAR.Ded Line 8 UnitAmt Rate = CON.*ZERO
   PAR.Ded_Line_8_UnitAmt_Rate = *ZERO;

   ENDIF;

   ENDIF;

  }

  //?Deductions
  //?D/A 1
  CASE;

  // IF PAR.Ded D/A Code 1 USR NE WRK.Blank USR
  IF PAR.Ded_D_A_Code_1_USR <> WRK.Blank_USR;

  EXECUTE FUNCTION(Rtv D/A Desc          RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1104724;
  PARAMETER(PAR.Ded_D_A_Code_1_USR);
  PARAMETER(PAR.Ded_Line_1_Desc_USR);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Ded Line 1 USR = PAR.Ded Line 1 USR * CON.-1 *
  PAR.Ded_Line_1_USR = PAR.Ded_Line_1_USR * -1;

  ENDIF;

  //?D/A 2
  CASE;

  // IF PAR.Ded D/A Code 2 USR NE WRK.Blank USR
  IF PAR.Ded_D_A_Code_2_USR <> WRK.Blank_USR;

  EXECUTE FUNCTION(Rtv D/A Desc          RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1104724;
  PARAMETER(PAR.Ded_D_A_Code_2_USR);
  PARAMETER(PAR.Ded_Line_2_Desc_USR);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Ded Line 2 USR = PAR.Ded Line 2 USR * CON.-1 *
  PAR.Ded_Line_2_USR = PAR.Ded_Line_2_USR * -1;

  ENDIF;

  //?D/A 3
  CASE;

  // IF PAR.Ded D/A Code 3 USR NE WRK.Blank USR
  IF PAR.Ded_D_A_Code_3_USR <> WRK.Blank_USR;

  EXECUTE FUNCTION(Rtv D/A Desc          RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1104724;
  PARAMETER(PAR.Ded_D_A_Code_3_USR);
  PARAMETER(PAR.Ded_Line_3_Desc_USR);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Ded Line 3 USR = PAR.Ded Line 3 USR * CON.-1 *
  PAR.Ded_Line_3_USR = PAR.Ded_Line_3_USR * -1;

  ENDIF;

  //?D/A 4
  CASE;

  // IF PAR.Ded D/A Code 4 USR NE WRK.Blank USR
  IF PAR.Ded_D_A_Code_4_USR <> WRK.Blank_USR;

  EXECUTE FUNCTION(Rtv D/A Desc          RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1104724;
  PARAMETER(PAR.Ded_D_A_Code_4_USR);
  PARAMETER(PAR.Ded_Line_4_Desc_USR);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Ded Line 4 USR = PAR.Ded Line 4 USR * CON.-1 *
  PAR.Ded_Line_4_USR = PAR.Ded_Line_4_USR * -1;

  ENDIF;

  //?D/A 5
  CASE;

  // IF PAR.Ded D/A Code 5 USR NE WRK.Blank USR
  IF PAR.Ded_D_A_Code_5_USR <> WRK.Blank_USR;

  EXECUTE FUNCTION(Rtv D/A Desc          RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1104724;
  PARAMETER(PAR.Ded_D_A_Code_5_USR);
  PARAMETER(PAR.Ded_Line_5_Desc_USR);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Ded Line 5 USR = PAR.Ded Line 5 USR * CON.-1 *
  PAR.Ded_Line_5_USR = PAR.Ded_Line_5_USR * -1;

  ENDIF;

  //?D/A 6
  CASE;

  // IF PAR.Ded D/A Code 6 USR NE WRK.Blank USR
  IF PAR.Ded_D_A_Code_6_USR <> WRK.Blank_USR;

  CASE;

  // IF PAR.Ded D/A Code 6 USR is 999
  IF PAR.Ded_D_A_Code_6_USR = '999';

  // PAR.Ded Line 6 Desc USR = CON.Miscellaneous
  PAR.Ded_Line_6_Desc_USR = 'Miscellaneous';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv D/A Desc          RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1104724;
  PARAMETER(PAR.Ded_D_A_Code_6_USR);
  PARAMETER(PAR.Ded_Line_6_Desc_USR);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Ded Line 6 USR = PAR.Ded Line 6 USR * CON.-1 *
  PAR.Ded_Line_6_USR = PAR.Ded_Line_6_USR * -1;

  ENDIF;

  //?Additions
  //?D/A 7
  CASE;

  // IF PAR.Ded D/A Code 7 USR NE WRK.Blank USR
  IF PAR.Ded_D_A_Code_7_USR <> WRK.Blank_USR;

  EXECUTE FUNCTION(Rtv D/A Desc          RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1104724;
  PARAMETER(PAR.Ded_D_A_Code_7_USR);
  PARAMETER(PAR.Ded_Line_7_Desc_USR);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?D/A 8
  CASE;

  // IF PAR.Ded D/A Code 8 USR NE WRK.Blank USR
  IF PAR.Ded_D_A_Code_8_USR <> WRK.Blank_USR;

  CASE;

  // IF PAR.Ded D/A Code 8 USR is 999
  IF PAR.Ded_D_A_Code_8_USR = '999';

  // PAR.Ded Line 8 Desc USR = CON.Miscellaneous
  PAR.Ded_Line_8_Desc_USR = 'Miscellaneous';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv D/A Desc          RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1104724;
  PARAMETER(PAR.Ded_D_A_Code_8_USR);
  PARAMETER(PAR.Ded_Line_8_Desc_USR);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

 }

 //?021606 slm Trucker name is going in the Frt Description ......
 //?           for all companies.
 EXECUTE FUNCTION(Rtv Truck/Load        RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1269842;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.TRK_Trucker_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?E13766 JJH 09/17/18 - If Company 961, get Trucker Name from 440
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('TRKNAMEOVR');
 PARAMETER(LCL.Library);

 CASE;

 // IF LCL.Library is Not entered
 IF LCL.Library = *BLANK;

 //?Get Trucker Name from Company's Trucker file.
 EXECUTE FUNCTION(Rtv Trucker Name) TYPE(RTVOBJ) FILE(PKBAREP)                   AB1113396;
 PARAMETER(WRK.TRK_Trucker_Code);
 PARAMETER(WRK.TRK_Name);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Get Trucker Name from Overide Library Trucker file.
 // Call program Rtv Trucker Name Ovr  CL.
 CALL PROGRAM(Rtv Trucker Name Ovr  CL) ('PWHGUPR');
 PARAMETER(WRK.TRK_Trucker_Code);
 PARAMETER(LCL.Library);
 PARAMETER(WRK.TRK_Name);

 ENDIF;

 //?** Find Freight and put Trucker's Name in the Description field
 CASE;

 // IF PAR.Deduction Code 1 is Freight
 IF PAR.Deduction_Code_1 = 'FRT';

 // PAR.Deduction Desc 1 = WRK.TRK Name
 PAR.Deduction_Desc_1 = WRK.TRK_Name;

 //?** Find Freight and put Trucker's Name in the Description field
 // IF PAR.Deduction Code 2 is Freight
 IF PAR.Deduction_Code_2 = 'FRT';

 // PAR.Deduction Desc 2 = WRK.TRK Name
 PAR.Deduction_Desc_2 = WRK.TRK_Name;

 //?** Find Freight and put Trucker's Name in the Description field
 // IF PAR.Deduction Code 3 is Freight
 IF PAR.Deduction_Code_3 = 'FRT';

 // PAR.Deduction Desc 3 = WRK.TRK Name
 PAR.Deduction_Desc_3 = WRK.TRK_Name;

 //?** Find Freight and put Trucker's Name in the Description field
 // IF PAR.Deduction Code 4 is Freight
 IF PAR.Deduction_Code_4 = 'FRT';

 // PAR.Deduction Desc 4 = WRK.TRK Name
 PAR.Deduction_Desc_4 = WRK.TRK_Name;

 //?** Find Freight and put Trucker's Name in the Description field
 // IF PAR.Deduction Code 5 is Freight
 IF PAR.Deduction_Code_5 = 'FRT';

 // PAR.Deduction Desc 5 = WRK.TRK Name
 PAR.Deduction_Desc_5 = WRK.TRK_Name;

 //?** Find Freight and put Trucker's Name in the Description field
 // IF PAR.Deduction Code 6 is Freight
 IF PAR.Deduction_Code_6 = 'FRT';

 // PAR.Deduction Desc 6 = WRK.TRK Name
 PAR.Deduction_Desc_6 = WRK.TRK_Name;

 //?** Find Freight and put Trucker's Name in the Description field
 // IF PAR.Addition Code 1 is Freight
 IF PAR.Addition_Code_1 = 'FRT';

 // PAR.Addition Desc 1 = WRK.TRK Name
 PAR.Addition_Desc_1 = WRK.TRK_Name;

 //?** Find Freight and put Trucker's Name in the Description field
 // IF PAR.Addition Code 2 is Freight
 IF PAR.Addition_Code_2 = 'FRT';

 // PAR.Addition Desc 1 = WRK.TRK Name
 PAR.Addition_Desc_1 = WRK.TRK_Name;

 ENDIF;

 EXECUTE FUNCTION(Prt Crc Sum Cndmns    RT) TYPE(RTVOBJ) FILE(PKBPREP)           AB1147247;
 PARAMETER('C');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(PAR.Condemned_Reason_1);
 PARAMETER(PAR.Condemned_Reason_2);
 PARAMETER(PAR.Condemned_Reason_3);
 PARAMETER(PAR.Condemned_Reason_4);
 PARAMETER(PAR.Condemned_Reason_5);
 PARAMETER(PAR.Condemned_Reason_Head_1);
 PARAMETER(PAR.Condemned_Reason_Head_2);
 PARAMETER(PAR.Condemned_Reason_Head_3);
 PARAMETER(PAR.Condemned_Reason_Head_4);
 PARAMETER(PAR.Condemned_Reason_Head_5);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Crc Sum Cndmn Rsn RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1147266;
  PARAMETER(DB1.LT_Type_Code);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.Reason_Head_1_USR);
  PARAMETER(PAR.Reason_Head_2_USR);
  PARAMETER(PAR.Reason_Head_3_USR);
  PARAMETER(PAR.Reason_Head_4_USR);
  PARAMETER(PAR.Reason_Head_5_USR);
  PARAMETER(PAR.Loss_Reason_Code_1_USR);
  PARAMETER(PAR.Loss_Reason_Code_2_USR);
  PARAMETER(PAR.Loss_Reason_Code_3_USR);
  PARAMETER(PAR.Loss_Reason_Code_4_USR);
  PARAMETER(PAR.Loss_Reason_Code_5_USR);
  {
   //?USER: Process Data record

   //?Set up Reason Codes
   CASE;

   // IF PAR.Loss Reason Code 1 USR EQ WRK.Zero USR
   IF PAR.Loss_Reason_Code_1_USR = WRK.Zero_USR;

   // OR DB1.LR Reason Code EQ PAR.Loss Reason Code 1 USR
   OR DB1.LR_Reason_Code = PAR.Loss_Reason_Code_1_USR;

   // PAR.Loss Reason Code 1 USR = DB1.LR Reason Code
   PAR.Loss_Reason_Code_1_USR = DB1.LR_Reason_Code;

   // PAR.Reason Head 1 USR = PAR.Reason Head 1 USR + CON.1
   PAR.Reason_Head_1_USR = PAR.Reason_Head_1_USR + 1;

   //?Set up Reason Codes
   // IF PAR.Loss Reason Code 2 USR EQ WRK.Zero USR
   IF PAR.Loss_Reason_Code_2_USR = WRK.Zero_USR;

   // OR DB1.LR Reason Code EQ PAR.Loss Reason Code 2 USR
   OR DB1.LR_Reason_Code = PAR.Loss_Reason_Code_2_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Loss_Reason_Code_2_USR = DB1.LR_Reason_Code;

   // PAR.Reason Head 2 USR = PAR.Reason Head 2 USR + CON.1
   PAR.Reason_Head_2_USR = PAR.Reason_Head_2_USR + 1;

   //?Set up Reason Codes
   // IF PAR.Loss Reason Code 3 USR EQ WRK.Zero USR
   IF PAR.Loss_Reason_Code_3_USR = WRK.Zero_USR;

   // OR DB1.LR Reason Code EQ PAR.Loss Reason Code 3 USR
   OR DB1.LR_Reason_Code = PAR.Loss_Reason_Code_3_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Loss_Reason_Code_3_USR = DB1.LR_Reason_Code;

   // PAR.Reason Head 3 USR = PAR.Reason Head 3 USR + CON.1
   PAR.Reason_Head_3_USR = PAR.Reason_Head_3_USR + 1;

   //?Set up Reason Codes
   // IF PAR.Loss Reason Code 4 USR EQ WRK.Zero USR
   IF PAR.Loss_Reason_Code_4_USR = WRK.Zero_USR;

   // OR DB1.LR Reason Code EQ PAR.Loss Reason Code 4 USR
   OR DB1.LR_Reason_Code = PAR.Loss_Reason_Code_4_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Loss_Reason_Code_4_USR = DB1.LR_Reason_Code;

   // PAR.Reason Head 4 USR = PAR.Reason Head 4 USR + CON.1
   PAR.Reason_Head_4_USR = PAR.Reason_Head_4_USR + 1;

   //?Set up Reason Codes
   // IF PAR.Loss Reason Code 5 USR EQ WRK.Zero USR
   IF PAR.Loss_Reason_Code_5_USR = WRK.Zero_USR;

   // OR DB1.LR Reason Code EQ PAR.Loss Reason Code 5 USR
   OR DB1.LR_Reason_Code = PAR.Loss_Reason_Code_5_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Loss_Reason_Code_5_USR = DB1.LR_Reason_Code;

   // PAR.Reason Head 5 USR = PAR.Reason Head 5 USR + CON.1
   PAR.Reason_Head_5_USR = PAR.Reason_Head_5_USR + 1;

   //?Set up Reason Codes
   // IF *OTHERWISE
   IF *OTHERWISE;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Loss_Reason_Code_5_USR = 99;

   // PAR.Reason Head 5 USR = PAR.Reason Head 5 USR + CON.1
   PAR.Reason_Head_5_USR = PAR.Reason_Head_5_USR + 1;

   ENDIF;

  }

  //?Reason 1 Desc
  CASE;

  // IF PAR.Loss Reason Code 1 USR NE WRK.Zero USR
  IF PAR.Loss_Reason_Code_1_USR <> WRK.Zero_USR;

  EXECUTE FUNCTION(Rtv Loss Reason       RT) TYPE(RTVOBJ) FILE(PKBRREP)           AB1138270;
  PARAMETER(PAR.Loss_Reason_Code_1_USR);
  PARAMETER(PAR.Reason_1_Desc_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?Reason 2 Desc
  CASE;

  // IF PAR.Loss Reason Code 2 USR NE WRK.Zero USR
  IF PAR.Loss_Reason_Code_2_USR <> WRK.Zero_USR;

  EXECUTE FUNCTION(Rtv Loss Reason       RT) TYPE(RTVOBJ) FILE(PKBRREP)           AB1138270;
  PARAMETER(PAR.Loss_Reason_Code_2_USR);
  PARAMETER(PAR.Reason_2_Desc_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?Reason 3 Desc
  CASE;

  // IF PAR.Loss Reason Code 3 USR NE WRK.Zero USR
  IF PAR.Loss_Reason_Code_3_USR <> WRK.Zero_USR;

  EXECUTE FUNCTION(Rtv Loss Reason       RT) TYPE(RTVOBJ) FILE(PKBRREP)           AB1138270;
  PARAMETER(PAR.Loss_Reason_Code_3_USR);
  PARAMETER(PAR.Reason_3_Desc_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?Reason 4 Desc
  CASE;

  // IF PAR.Loss Reason Code 4 USR NE WRK.Zero USR
  IF PAR.Loss_Reason_Code_4_USR <> WRK.Zero_USR;

  EXECUTE FUNCTION(Rtv Loss Reason       RT) TYPE(RTVOBJ) FILE(PKBRREP)           AB1138270;
  PARAMETER(PAR.Loss_Reason_Code_4_USR);
  PARAMETER(PAR.Reason_4_Desc_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?Reason 5 Desc
  CASE;

  // IF PAR.Loss Reason Code 1 USR NE WRK.Zero USR
  IF PAR.Loss_Reason_Code_1_USR <> WRK.Zero_USR;

  CASE;

  // IF PAR.Loss Reason Code 5 USR is = 99
  IF PAR.Loss_Reason_Code_5_USR = 99;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Reason_5_Desc_USR = 'Other';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Loss Reason       RT) TYPE(RTVOBJ) FILE(PKBRREP)           AB1138270;
  PARAMETER(PAR.Loss_Reason_Code_5_USR);
  PARAMETER(PAR.Reason_5_Desc_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

 }

 //? Defect
 DO;

 //?E00144 06/11/08 SLM LFT Head and EUT/KOA head TattooHdr Bol
 //?allow for Market and Non Market
 // PAR.Defect Reason 1 = CON.*BLANK
 PAR.Defect_Reason_1 = *BLANK;

 // PAR.Defect Reason 2 = CON.*BLANK
 PAR.Defect_Reason_2 = *BLANK;

 // PAR.Defect Reason 3 = CON.*BLANK
 PAR.Defect_Reason_3 = *BLANK;

 // PAR.Defect Reason 4 = CON.*BLANK
 PAR.Defect_Reason_4 = *BLANK;

 // PAR.Defect Reason 5 = CON.*BLANK
 PAR.Defect_Reason_5 = *BLANK;

 // PAR.Defect Head 1 = CON.*ZERO
 PAR.Defect_Head_1 = *ZERO;

 // PAR.Defect Head 2 = CON.*ZERO
 PAR.Defect_Head_2 = *ZERO;

 // PAR.Defect Head 3 = CON.*ZERO
 PAR.Defect_Head_3 = *ZERO;

 // PAR.Defect Head 4 = CON.*ZERO
 PAR.Defect_Head_4 = *ZERO;

 // PAR.Defect Head 5 = CON.*ZERO
 PAR.Defect_Head_5 = *ZERO;

 EXECUTE FUNCTION(Rtv Tattoo Def-5      RT) TYPE(RTVOBJ) FILE(PKDZREP)           AB1220997;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(PAR.Defect_Reason_1);
 PARAMETER(PAR.Defect_Head_1);
 PARAMETER(PAR.Defect_Reason_2);
 PARAMETER(PAR.Defect_Head_2);
 PARAMETER(PAR.Defect_Reason_3);
 PARAMETER(PAR.Defect_Head_3);
 PARAMETER(PAR.Defect_Reason_4);
 PARAMETER(PAR.Defect_Head_4);
 PARAMETER(PAR.Defect_Reason_5);
 PARAMETER(PAR.Defect_Head_5);
 {
  //?USER: Initialize routine

  // WRK.Defect Count Usr = CND.One
  WRK.Defect_Count_Usr = 1;

  //?USER: Process Data record

  CASE;

  // IF WRK.Defect Count Usr is One
  IF WRK.Defect_Count_Usr = 1;

  EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
  PARAMETER(DB1.DF_Defect_Code);
  PARAMETER(PAR.Defect_Reason_1);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.DF_Description = WRK.Blank_USR;

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Defect Head 1 = DB1.TDF Head Defect
  PAR.Defect_Head_1 = DB1.TDF_Head_Defect;

  // WRK.Defect Count Usr = CND.Two
  WRK.Defect_Count_Usr = 2;

  // IF WRK.Defect Count Usr is Two
  IF WRK.Defect_Count_Usr = 2;

  EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
  PARAMETER(DB1.DF_Defect_Code);
  PARAMETER(PAR.Defect_Reason_2);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.DF_Description = WRK.Blank_USR;

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Defect Head 2 = DB1.TDF Head Defect
  PAR.Defect_Head_2 = DB1.TDF_Head_Defect;

  // WRK.Defect Count Usr = CND.Three
  WRK.Defect_Count_Usr = 3;

  // IF WRK.Defect Count Usr is Three
  IF WRK.Defect_Count_Usr = 3;

  EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
  PARAMETER(DB1.DF_Defect_Code);
  PARAMETER(PAR.Defect_Reason_3);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.DF_Description = WRK.Blank_USR;

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Defect Head 3 = DB1.TDF Head Defect
  PAR.Defect_Head_3 = DB1.TDF_Head_Defect;

  // WRK.Defect Count Usr = CND.Four
  WRK.Defect_Count_Usr = 4;

  // IF WRK.Defect Count Usr is Four
  IF WRK.Defect_Count_Usr = 4;

  EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
  PARAMETER(DB1.DF_Defect_Code);
  PARAMETER(PAR.Defect_Reason_4);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.DF_Description = WRK.Blank_USR;

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Defect Head 4 = DB1.TDF Head Defect
  PAR.Defect_Head_4 = DB1.TDF_Head_Defect;

  // WRK.Defect Count Usr = CND.Five
  WRK.Defect_Count_Usr = 5;

  // IF WRK.Defect Count Usr is Five
  IF WRK.Defect_Count_Usr = 5;

  EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
  PARAMETER(DB1.DF_Defect_Code);
  PARAMETER(PAR.Defect_Reason_5);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.DF_Description = WRK.Blank_USR;

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Defect Head 5 = DB1.TDF Head Defect
  PAR.Defect_Head_5 = DB1.TDF_Head_Defect;

  // WRK.Defect Count Usr = CND.Six
  WRK.Defect_Count_Usr = 6;

  // IF WRK.Defect Count Usr is Six
  IF WRK.Defect_Count_Usr = 6;

  // PAR.Defect Reason 5 = CON.Other
  PAR.Defect_Reason_5 = 'Other';

  // PAR.Defect Head 5 = PAR.Defect Head 5 + DB1.TDF Head Defect
  PAR.Defect_Head_5 = PAR.Defect_Head_5 + DB1.TDF_Head_Defect;

  ENDIF;

 }

 ENDDO;

 EXECUTE FUNCTION(Rtv EDITrdngPrt#/Comm) TYPE(RTVOBJ) FILE(PKACREP)              AB1266710;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(PAR.EDI_Trading_Partner_#);
 PARAMETER(PAR.Commission_Producer_Payee);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Producer Subsidiary Code = CON.*BLANK
 PAR.Producer_Subsidiary_Code = *BLANK;

 // PAR.PS Site ID = CON.*BLANK
 PAR.PS_Site_ID = *BLANK;

 // PAR.PSM Miles to Company = CON.*ZERO
 PAR.PSM_Miles_to_Company = 0;

 CASE;

 // IF DB1.TH Hog Class Type is Not Market
 IF DB1.TH_Hog_Class_Type = 'R'/'S';

 //?old Producer Subsidiary
 DO;

 //?this routine will get the producer subs based on the
 //?first market hog record in the file for this buy order load
 EXECUTE FUNCTION(Rtv ProdSubsidiaryPrc RT) TYPE(RTVOBJ) FILE(PLA8REP)           AB1291791;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(LCL.Producer_Subsidiary_SUSR);
 {
  //?USER: Initialize routine

  //?RMC R9771  3/24/17 check for active only
  // PAR.Producer Subsidiary SUSR = CND.No Producer Subsidiary
  PAR.Producer_Subsidiary_SUSR = 'N';

  //?USER: Processing if Data record not found

  // PAR.Producer Subsidiary SUSR = CND.No Producer Subsidiary
  PAR.Producer_Subsidiary_SUSR = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  // PAR.Producer Subsidiary SUSR = CND.Allow Producer Subsidiary
  PAR.Producer_Subsidiary_SUSR = 'Y';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.Producer Subsidiary SUSR is Allow Producer Subsidiary
 IF LCL.Producer_Subsidiary_SUSR = 'Y';

 // Call program Zzz PrdSubs Frm1stMK  XP.
 CALL PROGRAM(Zzz PrdSubs Frm1stMK  XP) ('PLNHXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(LCL.Producer_Subsidiary_Code);

 ENDIF;

 ENDDO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Leave as is on Producer Subsidiary get but do not use
 EXECUTE FUNCTION(Rtv Site ID/Prod Subs RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1291789;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(NLL.PD_Producer_Code);
 PARAMETER(PAR.PS_Site_ID);
 PARAMETER(PAR.Producer_Subsidiary_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Prod Loc Dlv CoMilRT) TYPE(RTVOBJ) FILE(PLASREP)           AB1264192;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(PAR.PS_Site_ID);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.PSM_Miles_to_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 // LCL.TH Head Add Reason = Condition name of DB1.TH PHA Add Reason
 LCL.TH_Head_Add_Reason = RTVCND(DB1.TH_PHA_Add_Reason);

 EXECUTE FUNCTION(Rtv Hd Excl Min/max   RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1229311;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(LCL.TH_Min_LT_Backfat_Inch);
 PARAMETER(LCL.TH_Min_LT_LoinEye_Inch);
 PARAMETER(LCL.TH_Min_LT_Hot_Wt_lb);
 PARAMETER(LCL.TH_Min_LT_Lean_Pct);
 PARAMETER(LCL.TH_Max_GT_Backfat_Inch);
 PARAMETER(LCL.TH_Max_GT_LoinEye_Inch);
 PARAMETER(LCL.TH_Max_GT_Hot_Wt_lb);
 PARAMETER(LCL.TH_Max_GT_Lean_Pct);
 PARAMETER(LCL.TH_Head_LT_Backfat_In_Min);
 PARAMETER(LCL.TH_Head_LT_LoinEye_In_Min);
 PARAMETER(LCL.TH_Head_LT_Hot_Wt_lb_Min);
 PARAMETER(LCL.TH_Head_LT_Lean_Pct_Min);
 PARAMETER(LCL.TH_Head_GT_Backfat_In_Max);
 PARAMETER(LCL.TH_Head_GT_LoinEye_In_Max);
 PARAMETER(LCL.TH_Head_GT_Hot_Wt_lb_Max);
 PARAMETER(LCL.TH_Head_GT_Lean_Pct_Max);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.TH Min LT Backfat Inch = DB1.TH Min LT Backfat Inch
  PAR.TH_Min_LT_Backfat_Inch = DB1.TH_Min_LT_Backfat_Inch;

  // PAR.TH Min LT LoinEye Inch = DB1.TH Min LT LoinEye Inch
  PAR.TH_Min_LT_LoinEye_Inch = DB1.TH_Min_LT_LoinEye_Inch;

  // PAR.TH Min LT Lean Pct = DB1.TH Min LT Lean Pct
  PAR.TH_Min_LT_Lean_Pct = DB1.TH_Min_LT_Lean_Pct;

  // PAR.TH Min LT Hot Wt lb = DB1.TH Min LT Hot Wt lb
  PAR.TH_Min_LT_Hot_Wt_lb = DB1.TH_Min_LT_Hot_Wt_lb;

  // PAR.TH Max GT Backfat Inch = DB1.TH Max GT Backfat Inch
  PAR.TH_Max_GT_Backfat_Inch = DB1.TH_Max_GT_Backfat_Inch;

  // PAR.TH Max GT LoinEye Inch = DB1.TH Max GT LoinEye Inch
  PAR.TH_Max_GT_LoinEye_Inch = DB1.TH_Max_GT_LoinEye_Inch;

  // PAR.TH Max GT Lean Pct = DB1.TH Max GT Lean Pct
  PAR.TH_Max_GT_Lean_Pct = DB1.TH_Max_GT_Lean_Pct;

  // PAR.TH Max GT Hot Wt lb = DB1.TH Max GT Hot Wt lb
  PAR.TH_Max_GT_Hot_Wt_lb = DB1.TH_Max_GT_Hot_Wt_lb;

  // PAR.TH Head LT Backfat In Min = PAR.TH Head LT Backfat In Min + DB1.TH Head LT Backfat In Min
  PAR.TH_Head_LT_Backfat_In_Min = PAR.TH_Head_LT_Backfat_In_Min
  + DB1.TH_Head_LT_Backfat_In_Min;

  // PAR.TH Head LT LoinEye In Min = PAR.TH Head LT LoinEye In Min + DB1.TH Head LT LoinEye In Min
  PAR.TH_Head_LT_LoinEye_In_Min = PAR.TH_Head_LT_LoinEye_In_Min
  + DB1.TH_Head_LT_LoinEye_In_Min;

  // PAR.TH Head LT Lean Pct Min = PAR.TH Head LT Lean Pct Min + DB1.TH Head LT Lean Pct Min
  PAR.TH_Head_LT_Lean_Pct_Min = PAR.TH_Head_LT_Lean_Pct_Min + DB1.TH_Head_LT_Lean_Pct_Min;

  // PAR.TH Head LT Hot Wt lb Min = PAR.TH Head LT Hot Wt lb Min + DB1.TH Head LT Hot Wt lb Min
  PAR.TH_Head_LT_Hot_Wt_lb_Min = PAR.TH_Head_LT_Hot_Wt_lb_Min
  + DB1.TH_Head_LT_Hot_Wt_lb_Min;

  // PAR.TH Head GT Backfat In Max = PAR.TH Head GT Backfat In Max + DB1.TH Head GT Backfat In Max
  PAR.TH_Head_GT_Backfat_In_Max = PAR.TH_Head_GT_Backfat_In_Max
  + DB1.TH_Head_GT_Backfat_In_Max;

  // PAR.TH Head GT LoinEye In Max = PAR.TH Head GT LoinEye In Max + DB1.TH Head GT LoinEye In Max
  PAR.TH_Head_GT_LoinEye_In_Max = PAR.TH_Head_GT_LoinEye_In_Max
  + DB1.TH_Head_GT_LoinEye_In_Max;

  // PAR.TH Head GT Lean Pct Max = PAR.TH Head GT Lean Pct Max + DB1.TH Head GT Lean Pct Max
  PAR.TH_Head_GT_Lean_Pct_Max = PAR.TH_Head_GT_Lean_Pct_Max + DB1.TH_Head_GT_Lean_Pct_Max;

  // PAR.TH Head GT Hot Wt lb Max = PAR.TH Head GT Hot Wt lb Max + DB1.TH Head GT Hot Wt lb Max
  PAR.TH_Head_GT_Hot_Wt_lb_Max = PAR.TH_Head_GT_Hot_Wt_lb_Max
  + DB1.TH_Head_GT_Hot_Wt_lb_Max;

 }

 // WRK.EDI Load Type = CON.*BLANK
 WRK.EDI_Load_Type = *BLANK;

 // WRK.DT Load Type = CND.Not Entered
 WRK.DT_Load_Type = *BLANK;

 EXECUTE FUNCTION(Rtv Frm,Bld,Rm,Grp,LD  RT) TYPE(RTVOBJ) FILE(PLAFCPP)          AB1348599;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.DTS_Hog_Group_Code_1);
 PARAMETER(PAR.DTS_Building_1);
 PARAMETER(PAR.DTS_Room_1);
 PARAMETER(PAR.DTS_Delivered_Head_1);
 PARAMETER(PAR.DTS_Hog_Group_Code_2);
 PARAMETER(PAR.DTS_Building_2);
 PARAMETER(PAR.DTS_Room_2);
 PARAMETER(PAR.DTS_Delivered_Head_2);
 PARAMETER(PAR.DTS_Hog_Group_Code_3);
 PARAMETER(PAR.DTS_Building_3);
 PARAMETER(PAR.DTS_Room_3);
 PARAMETER(PAR.DTS_Delivered_Head_3);
 PARAMETER(PAR.DTS_Hog_Group_Code_4);
 PARAMETER(PAR.DTS_Building_4);
 PARAMETER(PAR.DTS_Room_4);
 PARAMETER(PAR.DTS_Delivered_Head_4);
 PARAMETER(WRK.DT_Load_Type);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  // PAR.DTS Hog Group Code 1 = CON.*BLANK
  PAR.DTS_Hog_Group_Code_1 = *BLANK;

  // PAR.DTS Building 1 = CON.*BLANK
  PAR.DTS_Building_1 = *BLANK;

  // PAR.DTS Room 1 = CON.*BLANK
  PAR.DTS_Room_1 = *BLANK;

  // PAR.DTS Delivered Head 1 = CON.*ZERO
  PAR.DTS_Delivered_Head_1 = *ZERO;

  // PAR.DTS Hog Group Code 2 = CON.*BLANK
  PAR.DTS_Hog_Group_Code_2 = *BLANK;

  // PAR.DTS Building 2 = CON.*BLANK
  PAR.DTS_Building_2 = *BLANK;

  // PAR.DTS Room 2 = CON.*BLANK
  PAR.DTS_Room_2 = *BLANK;

  // PAR.DTS Delivered Head 2 = CON.*ZERO
  PAR.DTS_Delivered_Head_2 = *ZERO;

  // PAR.DTS Hog Group Code 3 = CON.*BLANK
  PAR.DTS_Hog_Group_Code_3 = *BLANK;

  // PAR.DTS Building 3 = CON.*BLANK
  PAR.DTS_Building_3 = *BLANK;

  // PAR.DTS Room 3 = CON.*BLANK
  PAR.DTS_Room_3 = *BLANK;

  // PAR.DTS Delivered Head 3 = CON.*ZERO
  PAR.DTS_Delivered_Head_3 = *ZERO;

  // PAR.DTS Hog Group Code 4 = CON.*BLANK
  PAR.DTS_Hog_Group_Code_4 = *BLANK;

  // PAR.DTS Building 4 = CON.*BLANK
  PAR.DTS_Building_4 = *BLANK;

  // PAR.DTS Room 4 = CON.*BLANK
  PAR.DTS_Room_4 = *BLANK;

  // PAR.DTS Delivered Head 4 = CON.*ZERO
  PAR.DTS_Delivered_Head_4 = *ZERO;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  CASE;

  // IF DB1.DT Full/Split Load is Split
  IF DB1.DT_Full_Split_Load = 'S';

  EXECUTE FUNCTION(Rtv Bldg,Room, Ect EDIRT) TYPE(RTVOBJ) FILE(PLAJCPP)           AB1266775;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DT_Delivery_Date);
  PARAMETER(DB1.DT_Delivery_Time);
  PARAMETER(DB1.DT_Delivery_Time_Seq);
  PARAMETER(DB1.DT_Source_Type);
  PARAMETER(PAR.DTS_Hog_Group_Code_1);
  PARAMETER(PAR.DTS_Building_1);
  PARAMETER(PAR.DTS_Room_1);
  PARAMETER(PAR.DTS_Delivered_Head_1);
  PARAMETER(PAR.DTS_Hog_Group_Code_2);
  PARAMETER(PAR.DTS_Building_2);
  PARAMETER(PAR.DTS_Room_2);
  PARAMETER(PAR.DTS_Delivered_Head_2);
  PARAMETER(PAR.DTS_Hog_Group_Code_3);
  PARAMETER(PAR.DTS_Building_3);
  PARAMETER(PAR.DTS_Room_3);
  PARAMETER(PAR.DTS_Delivered_Head_3);
  PARAMETER(PAR.DTS_Hog_Group_Code_4);
  PARAMETER(PAR.DTS_Building_4);
  PARAMETER(PAR.DTS_Room_4);
  PARAMETER(PAR.DTS_Delivered_Head_4);
  {
   //?USER: Initialize routine

   // LCL.Count USR = CON.1
   LCL.Count_USR = 1;

   // PAR.DTS Hog Group Code 1 = CON.*BLANK
   PAR.DTS_Hog_Group_Code_1 = *BLANK;

   // PAR.DTS Building 1 = CON.*BLANK
   PAR.DTS_Building_1 = *BLANK;

   // PAR.DTS Room 1 = CON.*BLANK
   PAR.DTS_Room_1 = *BLANK;

   // PAR.DTS Delivered Head 1 = CON.*ZERO
   PAR.DTS_Delivered_Head_1 = *ZERO;

   // PAR.DTS Hog Group Code 2 = CON.*BLANK
   PAR.DTS_Hog_Group_Code_2 = *BLANK;

   // PAR.DTS Building 2 = CON.*BLANK
   PAR.DTS_Building_2 = *BLANK;

   // PAR.DTS Room 2 = CON.*BLANK
   PAR.DTS_Room_2 = *BLANK;

   // PAR.DTS Delivered Head 2 = CON.*ZERO
   PAR.DTS_Delivered_Head_2 = *ZERO;

   // PAR.DTS Hog Group Code 3 = CON.*BLANK
   PAR.DTS_Hog_Group_Code_3 = *BLANK;

   // PAR.DTS Building 3 = CON.*BLANK
   PAR.DTS_Building_3 = *BLANK;

   // PAR.DTS Room 3 = CON.*BLANK
   PAR.DTS_Room_3 = *BLANK;

   // PAR.DTS Delivered Head 3 = CON.*ZERO
   PAR.DTS_Delivered_Head_3 = *ZERO;

   // PAR.DTS Hog Group Code 4 = CON.*BLANK
   PAR.DTS_Hog_Group_Code_4 = *BLANK;

   // PAR.DTS Building 4 = CON.*BLANK
   PAR.DTS_Building_4 = *BLANK;

   // PAR.DTS Room 4 = CON.*BLANK
   PAR.DTS_Room_4 = *BLANK;

   // PAR.DTS Delivered Head 4 = CON.*ZERO
   PAR.DTS_Delivered_Head_4 = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF LCL.Count USR is One
   IF LCL.Count_USR = 1;

   // PAR.DTS Hog Group Code 1 = DB1.DTS Hog Group Code
   PAR.DTS_Hog_Group_Code_1 = DB1.DTS_Hog_Group_Code;

   // PAR.DTS Building 1 = DB1.DTS Building
   PAR.DTS_Building_1 = DB1.DTS_Building;

   // PAR.DTS Room 1 = DB1.DTS Room
   PAR.DTS_Room_1 = DB1.DTS_Room;

   // PAR.DTS Delivered Head 1 = PAR.DTS Delivered Head 1 + DB1.DTS Delivered Head
   PAR.DTS_Delivered_Head_1 = PAR.DTS_Delivered_Head_1 + DB1.DTS_Delivered_Head;

   // IF LCL.Count USR is Two
   IF LCL.Count_USR = 2;

   // PAR.DTS Hog Group Code 2 = DB1.DTS Hog Group Code
   PAR.DTS_Hog_Group_Code_2 = DB1.DTS_Hog_Group_Code;

   // PAR.DTS Building 2 = DB1.DTS Building
   PAR.DTS_Building_2 = DB1.DTS_Building;

   // PAR.DTS Room 2 = DB1.DTS Room
   PAR.DTS_Room_2 = DB1.DTS_Room;

   // PAR.DTS Delivered Head 2 = PAR.DTS Delivered Head 2 + DB1.DTS Delivered Head
   PAR.DTS_Delivered_Head_2 = PAR.DTS_Delivered_Head_2 + DB1.DTS_Delivered_Head;

   // IF LCL.Count USR is Three
   IF LCL.Count_USR = 3;

   // PAR.DTS Hog Group Code 3 = DB1.DTS Hog Group Code
   PAR.DTS_Hog_Group_Code_3 = DB1.DTS_Hog_Group_Code;

   // PAR.DTS Building 3 = DB1.DTS Building
   PAR.DTS_Building_3 = DB1.DTS_Building;

   // PAR.DTS Room 3 = DB1.DTS Room
   PAR.DTS_Room_3 = DB1.DTS_Room;

   // PAR.DTS Delivered Head 3 = PAR.DTS Delivered Head 3 + DB1.DTS Delivered Head
   PAR.DTS_Delivered_Head_3 = PAR.DTS_Delivered_Head_3 + DB1.DTS_Delivered_Head;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.DTS Hog Group Code 4 = DB1.DTS Hog Group Code
   PAR.DTS_Hog_Group_Code_4 = DB1.DTS_Hog_Group_Code;

   // PAR.DTS Building 4 = DB1.DTS Building
   PAR.DTS_Building_4 = DB1.DTS_Building;

   // PAR.DTS Room 4 = DB1.DTS Room
   PAR.DTS_Room_4 = DB1.DTS_Room;

   // PAR.DTS Delivered Head 4 = PAR.DTS Delivered Head 4 + DB1.DTS Delivered Head
   PAR.DTS_Delivered_Head_4 = PAR.DTS_Delivered_Head_4 + DB1.DTS_Delivered_Head;

   QUIT;

   ENDIF;

   // LCL.Count USR = LCL.Count USR + CON.1
   LCL.Count_USR = LCL.Count_USR + 1;

  }

  // IF DB1.DT Full/Split Load is Full
  IF DB1.DT_Full_Split_Load = 'F';

  // PAR.DTS Hog Group Code 1 = DB1.DT Hog Group Reference
  PAR.DTS_Hog_Group_Code_1 = DB1.DT_Hog_Group_Reference;

  // PAR.DTS Building 1 = DB1.DT Building
  PAR.DTS_Building_1 = DB1.DT_Building;

  // PAR.DTS Room 1 = DB1.DT Room
  PAR.DTS_Room_1 = DB1.DT_Room;

  // PAR.DTS Delivered Head 1 = PAR.DTS Delivered Head 1 + DB1.DT Delivered Head
  PAR.DTS_Delivered_Head_1 = PAR.DTS_Delivered_Head_1 + DB1.DT_Delivered_Head;

  ENDIF;

 }

 // WRK.EDI Load Type = CVTVAR(WRK.DT Load Type)
 WRK.EDI_Load_Type = CVTVAR(WRK.DT_Load_Type);

 //?Meat Special Processing  a-g
 CASE;

 // IF LCL.CMP Grading Type is Meat Value
 IF LCL.CMP_Grading_Type = 'M';

 // AND DB1.TH Payment Type is Carcass Merit
 AND DB1.TH_Payment_Type = 'C';

 //?This is the calculation that are used on the Carcass Summary Sheet
 //?which some of the same calculation are need in this process.
 //?So the A, B, and leter's relate to the Carcass Summary sheet.
 //?A = th cm market price
 //?05/26/2009 slm e00412 * OUT SEE THIS FIELD LATER
 //?B = 100%
 // LCL.USDA Carc CWT Usr = CON.100
 LCL.USDA_Carc_CWT_Usr = 100;

 //?C = TH CM BASE MKT PRICE
 //?C = Should already be placed on report just a note here
 //?D & F = Retrieve from Producer Sub Contract
 //?D = Retrieve the Cmp on the Buy Order Load Wrk Cmp
 //?F = Break-even Carc CWT Usr
 EXECUTE FUNCTION(Rtv PrchPrc Clc Info  RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1116661;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(NLL.BOH_Market_Add_Deduct);
 PARAMETER(NLL.BOH_Quote_Price_Type);
 PARAMETER(NLL.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(NLL.BOH_Commodity_Market_Code);
 PARAMETER(NLL.BOH_Commodity_Price_Group);
 PARAMETER(NLL.BOH_Market_Date_Method);
 PARAMETER(WRK.PC_Contract_Code);
 PARAMETER(WRK.PSC_Sub_Contract_Code);
 PARAMETER(NLL.PO_Option_Code);
 PARAMETER(WRK.CMP_Program_Code);
 {
  //?USER: Processing if Data record not found

  //?1/28/08 SLM LEFT OVER INFORMATION MAY HAVE CAUSED ISSUES
  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?break even price is now in the TH BREAK EVEN PRICE/CWT
 //?% of Market is NLL here
 EXECUTE FUNCTION(Rtv PrSb-Cont Carc/Sm RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1259622;
 PARAMETER(WRK.PC_Contract_Code);
 PARAMETER(WRK.PSC_Sub_Contract_Code);
 PARAMETER(NLL.PSC_Market_Percent_NU);
 PARAMETER(LCL.PSC_Break_Even_Percent);
 PARAMETER(NLL.PSC_Mkt_Percent);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?D = BASE CARC CWT
 //?Base Carc CWT Usr
 CASE;

 // IF PAR.CMP Program Code is *Blank
 IF PAR.CMP_Program_Code = *BLANK;

 // LCL.Base Carc CWT Usr = CON.*ZERO
 LCL.Base_Carc_CWT_Usr = *ZERO;

 //?Base Carc CWT Usr
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv CMP Payment Info  RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1263785;
 PARAMETER(PAR.CMP_Program_Code);
 PARAMETER(NLL.CMP_Description);
 PARAMETER(NLL.CMP_Grading_Type);
 PARAMETER(NLL.CMP_Sort_Basis);
 PARAMETER(NLL.CMP_Carc_Wgt_Type);
 PARAMETER(NLL.CMP_Std_Lean_Percent);
 PARAMETER(NLL.CMP_Lean_Factor);
 PARAMETER(NLL.CMP_Optimal_Row_Nbr_f_srt);
 PARAMETER(NLL.CMP_Type);
 PARAMETER(NLL.CMP_Market_Add_Deduct);
 PARAMETER(LCL.CMP_of_Carcass_Cutout);
 PARAMETER(NLL.CMP_Fixed_Cost_Per_Head);
 PARAMETER(NLL.RS_Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.Base Carc CWT Usr = LCL.CMP % of Carcass Cutout
 LCL.Base_Carc_CWT_Usr = LCL.CMP_of_Carcass_Cutout;

 ENDIF;

 // LCL.Carcass Base Price % = LCL.Base Carc CWT Usr
 LCL.Carcass_Base_Price = LCL.Base_Carc_CWT_Usr;

 // LCL.Carcass Base Price % = LCL.Base Carc CWT Usr
 LCL.Carcass_Base_Price = LCL.Base_Carc_CWT_Usr;

 //?Breakeven price and break even price %
 // LCL.Break Even Price = DB1.TH Break Even Price/CWT
 LCL.Break_Even_Price = DB1.TH_Break_Even_Price_CWT;

 // LCL.Break Even Price % = LCL.PSC Break Even Percent
 LCL.Break_Even_Price = LCL.PSC_Break_Even_Percent;

 //?Meat value
 //?50108 slm Correction to not use DB1
 //?LCL.MeatVal Factr Amt/Crc CWT
 CASE;

 // IF PAR.TH Hot Wgt is Not Zero
 IF PAR.TH_Hot_Wgt > *ZERO;

 // MeatVal Factr Amt/Crc CWT
 LCL.MeatVal_Factr_Amt_Crc_CWT = ( PAR.TH_Meat_Value_Factor_Amt / PAR.TH_Hot_Wgt 'H' )
 * 100 'H';

 //?LCL.MeatVal Factr Amt/Crc CWT
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.MeatVal Factr Amt/Crc CWT = CON.*ZERO
 LCL.MeatVal_Factr_Amt_Crc_CWT = *ZERO;

 ENDIF;

 //?Avg Meat Value Factor %
 //?02/17/06 PKD Changing the calculation.
 //?50108 slm Correction to not use DB1
 //?LCL.Avg Meat Value Factor %
 CASE;

 // IF PAR.TH Payment Gross is Not Zeros
 IF PAR.TH_Payment_Gross <> *ZERO;

 // LCL.Avg Meat Value Fac%
 LCL.Avg_Meat_Value_Factor = ( PAR.TH_Payment_Gross / PAR.TH_CM_Base_Mkt_Price_Amt 'H' )
 * 100 'H';

 //?LCL.Avg Meat Value Factor %
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Avg Meat Value Factor % = CON.*ZERO
 LCL.Avg_Meat_Value_Factor = *ZERO;

 ENDIF;

 //?fixed cost
 //?50108 slm Correction to not use DB1
 //?LCL.Fixed Cost Fctr /Crc CWT
 CASE;

 // IF PAR.TH Hot Wgt is Not Zero
 IF PAR.TH_Hot_Wgt > *ZERO;

 // Fixed Cost Fctr /Crc CWT
 LCL.Fixed_Cost_Fctr_Crc_CWT = ( PAR.TH_Fixed_Cost_Amount / PAR.TH_Hot_Wgt 'H' ) * 100
 'H';

 //?LCL.Fixed Cost Fctr /Crc CWT
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Fixed Cost Fctr /Crc CWT = CON.*ZERO
 LCL.Fixed_Cost_Fctr_Crc_CWT = *ZERO;

 ENDIF;

 //?G = E - C
 // PAR.TH CM Yield Gain/Loss Amt = CON.*ZERO
 PAR.TH_CM_Yield_Gain_Loss_Amt = *ZERO;

 // PAR.TH CM Yld G/L Live /CWT = CON.*ZERO
 PAR.TH_CM_Yld_G_L_Live_CWT = *ZERO;

 // PAR.TH CM Yld G/L Carc /CWT = CON.*ZERO
 PAR.TH_CM_Yld_G_L_Carc_CWT = *ZERO;

 // PAR.TH CM Base Carcass Value = CON.*ZERO
 PAR.TH_CM_Base_Carcass_Value = *ZERO;

 // PAR.TH CM Crc Val Live /CWT = CON.*ZERO
 PAR.TH_CM_Crc_Val_Live_CWT = *ZERO;

 // PAR.TH CM Crc Val Carc /CWT = CON.*ZERO
 PAR.TH_CM_Crc_Val_Carc_CWT = *ZERO;

 //?Meat Special Processing  a-g
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.USDA Carc CWT Usr = CON.*ZERO
 LCL.USDA_Carc_CWT_Usr = *ZERO;

 // LCL.Base Carc CWT Usr = CON.*ZERO
 LCL.Base_Carc_CWT_Usr = *ZERO;

 // LCL.Break-even Carc CWT Usr = CON.*ZERO
 LCL.Break_even_Carc_CWT_Usr = *ZERO;

 // LCL.Break Even Price % = CON.*ZERO
 LCL.Break_Even_Price = *ZERO;

 // LCL.Avg Meat Value Factor % = CON.*ZERO
 LCL.Avg_Meat_Value_Factor = *ZERO;

 // LCL.Fixed Cost Fctr /Crc CWT = CON.*ZERO
 LCL.Fixed_Cost_Fctr_Crc_CWT = *ZERO;

 ENDIF;

 //?USDA MARKET PRICE  -- was Usda Pork Cut out
 DO;

 // LCL.USDA Prk CutOut Price USR = CON.*ZERO
 LCL.USDA_Prk_CutOut_Price_USR = *ZERO;

 CASE;

 // IF WRK.Carcass Summary BOL USR is Standard
 IF WRK.Carcass_Summary_BOL_USR = 'Standard';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.BOH Quote Price Type is Carcass Price
 IF PAR.BOH_Quote_Price_Type = 'CP';

 // OR PAR.BOH Quote Price Type is Live Price
 OR PAR.BOH_Quote_Price_Type = 'LP';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.TH Payment Type is Carcass Merit
 IF DB1.TH_Payment_Type = 'C';

 // LCL.USDA Prk CutOut Price USR = DB1.TH CM Market Price
 LCL.USDA_Prk_CutOut_Price_USR = DB1.TH_CM_Market_Price;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDDO;

 CASE;

 // IF DB1.HC Class Code is Resale
 IF DB1.HC_Class_Code = 'RSL';

 //?zero out the caracss base price on a resale
 //?zero out the meat value factor amt on a resale
 EXECUTE FUNCTION(Upd EDI Carc Summ     RT) TYPE(RTVOBJ) FILE(PKD3CPP)           AB1200938;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.BOH_Buy_Order_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(PAR.Commission_Producer_Payee);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(WRK.EDI_Load_Type);
 PARAMETER(PAR.PS_Site_ID);
 PARAMETER(PAR.PSM_Miles_to_Company);
 PARAMETER(PAR.TH_Head_LFT);
 PARAMETER(PAR.TH_Head_EUT_KOA);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(LCL.USDA_Prk_CutOut_Price_USR);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Break_Even_Price);
 PARAMETER(LCL.Break_Even_Price);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(LCL.Fixed_Cost_Fctr_Crc_CWT);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.Deduction_Code_1);
 PARAMETER(PAR.Deduction_Unit_Amt_1);
 PARAMETER(PAR.Deduction_UOM_1);
 PARAMETER(PAR.Deduction_Desc_1);
 PARAMETER(PAR.Deduction_Amt_1);
 PARAMETER(PAR.Deduction_Code_2);
 PARAMETER(PAR.Deduction_Unit_Amt_2);
 PARAMETER(PAR.Deduction_UOM_2);
 PARAMETER(PAR.Deduction_Desc_2);
 PARAMETER(PAR.Deduction_Amt_2);
 PARAMETER(PAR.Deduction_Code_3);
 PARAMETER(PAR.Deduction_Unit_Amt_3);
 PARAMETER(PAR.Deduction_UOM_3);
 PARAMETER(PAR.Deduction_Desc_3);
 PARAMETER(PAR.Deduction_Amt_3);
 PARAMETER(PAR.Deduction_Code_4);
 PARAMETER(PAR.Deduction_Unit_Amt_4);
 PARAMETER(PAR.Deduction_UOM_4);
 PARAMETER(PAR.Deduction_Desc_4);
 PARAMETER(PAR.Deduction_Amt_4);
 PARAMETER(PAR.Deduction_Code_5);
 PARAMETER(PAR.Deduction_Unit_Amt_5);
 PARAMETER(PAR.Deduction_UOM_5);
 PARAMETER(PAR.Deduction_Desc_5);
 PARAMETER(PAR.Deduction_Amt_5);
 PARAMETER(PAR.Deduction_Code_6);
 PARAMETER(PAR.Deduction_Unit_Amt_6);
 PARAMETER(PAR.Deduction_UOM_6);
 PARAMETER(PAR.Deduction_Desc_6);
 PARAMETER(PAR.Deduction_Amt_6);
 PARAMETER(PAR.Addition_Code_1);
 PARAMETER(PAR.Addition_Unit_Amt_1);
 PARAMETER(PAR.Addition_UOM_1);
 PARAMETER(PAR.Addition_Desc_1);
 PARAMETER(PAR.Addition_Amt_1);
 PARAMETER(PAR.Addition_Code_2);
 PARAMETER(PAR.Addition_Unit_Amt_2);
 PARAMETER(PAR.Addition_UOM_2);
 PARAMETER(PAR.Addition_Desc_2);
 PARAMETER(PAR.Addition_Amt_2);
 PARAMETER(PAR.Condemned_Reason_1);
 PARAMETER(PAR.Condemned_Reason_Head_1);
 PARAMETER(PAR.Condemned_Reason_2);
 PARAMETER(PAR.Condemned_Reason_Head_2);
 PARAMETER(PAR.Condemned_Reason_3);
 PARAMETER(PAR.Condemned_Reason_Head_3);
 PARAMETER(PAR.Condemned_Reason_4);
 PARAMETER(PAR.Condemned_Reason_Head_4);
 PARAMETER(PAR.Condemned_Reason_5);
 PARAMETER(PAR.Condemned_Reason_Head_5);
 PARAMETER(PAR.Defect_Reason_1);
 PARAMETER(PAR.Defect_Head_1);
 PARAMETER(PAR.Defect_Reason_2);
 PARAMETER(PAR.Defect_Head_2);
 PARAMETER(PAR.Defect_Reason_3);
 PARAMETER(PAR.Defect_Head_3);
 PARAMETER(PAR.Defect_Reason_4);
 PARAMETER(PAR.Defect_Head_4);
 PARAMETER(PAR.Defect_Reason_5);
 PARAMETER(PAR.Defect_Head_5);
 PARAMETER(LCL.TH_Min_LT_Backfat_Inch);
 PARAMETER(LCL.TH_Min_LT_LoinEye_Inch);
 PARAMETER(LCL.TH_Min_LT_Hot_Wt_lb);
 PARAMETER(LCL.TH_Min_LT_Lean_Pct);
 PARAMETER(LCL.TH_Max_GT_Backfat_Inch);
 PARAMETER(LCL.TH_Max_GT_LoinEye_Inch);
 PARAMETER(LCL.TH_Max_GT_Hot_Wt_lb);
 PARAMETER(LCL.TH_Max_GT_Lean_Pct);
 PARAMETER(LCL.TH_Head_LT_Backfat_In_Min);
 PARAMETER(LCL.TH_Head_LT_LoinEye_In_Min);
 PARAMETER(LCL.TH_Head_LT_Hot_Wt_lb_Min);
 PARAMETER(LCL.TH_Head_LT_Lean_Pct_Min);
 PARAMETER(LCL.TH_Head_GT_Backfat_In_Max);
 PARAMETER(LCL.TH_Head_GT_LoinEye_In_Max);
 PARAMETER(LCL.TH_Head_GT_Hot_Wt_lb_Max);
 PARAMETER(LCL.TH_Head_GT_Lean_Pct_Max);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_Excluded_Gross_Value);
 PARAMETER(PAR.TH_Head_Adjusted_LN);
 PARAMETER(PAR.TH_PHA_Head_Adds);
 PARAMETER(DB1.TH_PHA_Yield_Percent);
 PARAMETER(DB1.TH_PHA_Lean_Prm_Crc_CWT);
 PARAMETER(LCL.TH_Head_Add_Reason);
 PARAMETER(PAR.DTS_Hog_Group_Code_1);
 PARAMETER(PAR.DTS_Building_1);
 PARAMETER(PAR.DTS_Room_1);
 PARAMETER(PAR.DTS_Delivered_Head_1);
 PARAMETER(PAR.DTS_Hog_Group_Code_2);
 PARAMETER(PAR.DTS_Building_2);
 PARAMETER(PAR.DTS_Room_2);
 PARAMETER(PAR.DTS_Delivered_Head_2);
 PARAMETER(PAR.DTS_Hog_Group_Code_3);
 PARAMETER(PAR.DTS_Building_3);
 PARAMETER(PAR.DTS_Room_3);
 PARAMETER(PAR.DTS_Delivered_Head_3);
 PARAMETER(PAR.DTS_Hog_Group_Code_4);
 PARAMETER(PAR.DTS_Building_4);
 PARAMETER(PAR.DTS_Room_4);
 PARAMETER(PAR.DTS_Delivered_Head_4);
 PARAMETER(PAR.TH_Avg_Loin_Eye_2_dec);
 PARAMETER(PAR.TH_Avg_Backfat_2_Dec);
 PARAMETER(PAR.EDI_Trading_Partner_#);
 PARAMETER('A');
 PARAMETER(PAR.Recreate_EDI_Files_Usr);
 {
  //?USER: Processing if Data record not found

  // PAR.#Txt USR = PAR.TH Tattoo Reference
  PAR.#Txt_USR = PAR.TH_Group_Reference;

  // Execute function Clc Chg Char in Str   US.
  EXECUTE FUNCTION(Clc Chg Char in Str   US) TYPE(EXCUSRSRC) ('PKOSUFR');
  PARAMETER(PAR.#Txt_USR);
  PARAMETER(',');
  PARAMETER(';');
  PARAMETER(WRK.@Status_Yes_No);
  {
   E                    SCN        80  1               SCAN FIELD
   C                     MOVEL'N'       #OABST
   C                     MOVEA#BC6TX    SCN              LOAD ARRAY
   C                     Z-ADD1         UX      20       SET COUNTER
   C           UX        DOWLE80
   C           SCN,UX    IFEQ #IHITX
   C                     MOVEL'Y'       #OABST
   C                     MOVEL#IODTX    SCN,UX
   C                     END
   C                     ADD  1         UX
   C                     END
   C                     MOVEASCN       #BC6TX
  }

  EXECUTE FUNCTION(Crt EDI Carcass Summ  CR) TYPE(CRTOBJ) FILE(PKD3CPP)           AB1200903;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.BOH_Buy_Order_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Shipped_Weight);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(PAR.#Txt_USR);
  PARAMETER(PAR.HB_Buyer_Code);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(PAR.Commission_Producer_Payee);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.EDI_Load_Type);
  PARAMETER(PAR.PS_Site_ID);
  PARAMETER(PAR.PSM_Miles_to_Company);
  PARAMETER(PAR.TH_Head_LFT);
  PARAMETER(PAR.TH_Head_EUT_KOA);
  PARAMETER(PAR.TH_Dead_On_Arrival);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Yard_Deads);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.TH_Hot_Wgt);
  PARAMETER(PAR.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Hot_Wgt);
  PARAMETER(PAR.TH_Avg_Lean_Percent);
  PARAMETER(PAR.TH_Avg_Backfat);
  PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.USDA_Pork_Cutout_Price);
  PARAMETER(PAR.Carcass_Base_Price);
  PARAMETER(PAR.Break_Even_Price);
  PARAMETER(PAR.Break_Even_Price);
  PARAMETER(PAR.Avg_Meat_Value_Factor);
  PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
  PARAMETER(PAR.MeatVal_Factr_Amt_Crc_CWT);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.Fixed_Cost_Fctr_Crc_CWT);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(PAR.TH_CM_Base_Carcass_Value);
  PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.TH_CM_Gross_Live_CWT);
  PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.Deduction_Code_1);
  PARAMETER(PAR.Deduction_Unit_Amt_1);
  PARAMETER(PAR.Deduction_UOM_1);
  PARAMETER(PAR.Deduction_Desc_1);
  PARAMETER(PAR.Deduction_Amt_1);
  PARAMETER(PAR.Deduction_Code_2);
  PARAMETER(PAR.Deduction_Unit_Amt_2);
  PARAMETER(PAR.Deduction_UOM_2);
  PARAMETER(PAR.Deduction_Desc_2);
  PARAMETER(PAR.Deduction_Amt_2);
  PARAMETER(PAR.Deduction_Code_3);
  PARAMETER(PAR.Deduction_Unit_Amt_3);
  PARAMETER(PAR.Deduction_UOM_3);
  PARAMETER(PAR.Deduction_Desc_3);
  PARAMETER(PAR.Deduction_Amt_3);
  PARAMETER(PAR.Deduction_Code_4);
  PARAMETER(PAR.Deduction_Unit_Amt_4);
  PARAMETER(PAR.Deduction_UOM_4);
  PARAMETER(PAR.Deduction_Desc_4);
  PARAMETER(PAR.Deduction_Amt_4);
  PARAMETER(PAR.Deduction_Code_5);
  PARAMETER(PAR.Deduction_Unit_Amt_5);
  PARAMETER(PAR.Deduction_UOM_5);
  PARAMETER(PAR.Deduction_Desc_5);
  PARAMETER(PAR.Deduction_Amt_5);
  PARAMETER(PAR.Deduction_Code_6);
  PARAMETER(PAR.Deduction_Unit_Amt_6);
  PARAMETER(PAR.Deduction_UOM_6);
  PARAMETER(PAR.Deduction_Desc_6);
  PARAMETER(PAR.Deduction_Amt_6);
  PARAMETER(PAR.Addition_Code_1);
  PARAMETER(PAR.Addition_Unit_Amt_1);
  PARAMETER(PAR.Addition_UOM_1);
  PARAMETER(PAR.Addition_Desc_1);
  PARAMETER(PAR.Addition_Amt_1);
  PARAMETER(PAR.Addition_Code_2);
  PARAMETER(PAR.Addition_Unit_Amt_2);
  PARAMETER(PAR.Addition_UOM_2);
  PARAMETER(PAR.Addition_Desc_2);
  PARAMETER(PAR.Addition_Amt_2);
  PARAMETER(PAR.Condemned_Reason_1);
  PARAMETER(PAR.Condemned_Reason_Head_1);
  PARAMETER(PAR.Condemned_Reason_2);
  PARAMETER(PAR.Condemned_Reason_Head_2);
  PARAMETER(PAR.Condemned_Reason_3);
  PARAMETER(PAR.Condemned_Reason_Head_3);
  PARAMETER(PAR.Condemned_Reason_4);
  PARAMETER(PAR.Condemned_Reason_Head_4);
  PARAMETER(PAR.Condemned_Reason_5);
  PARAMETER(PAR.Condemned_Reason_Head_5);
  PARAMETER(PAR.Defect_Reason_1);
  PARAMETER(PAR.Defect_Head_1);
  PARAMETER(PAR.Defect_Reason_2);
  PARAMETER(PAR.Defect_Head_2);
  PARAMETER(PAR.Defect_Reason_3);
  PARAMETER(PAR.Defect_Head_3);
  PARAMETER(PAR.Defect_Reason_4);
  PARAMETER(PAR.Defect_Head_4);
  PARAMETER(PAR.Defect_Reason_5);
  PARAMETER(PAR.Defect_Head_5);
  PARAMETER(PAR.TH_Min_LT_Backfat_Inch);
  PARAMETER(PAR.TH_Min_LT_LoinEye_Inch);
  PARAMETER(PAR.TH_Min_LT_Hot_Wt_lb);
  PARAMETER(PAR.TH_Min_LT_Lean_Pct);
  PARAMETER(PAR.TH_Max_GT_Backfat_Inch);
  PARAMETER(PAR.TH_Max_GT_LoinEye_Inch);
  PARAMETER(PAR.TH_Max_GT_Hot_Wt_lb);
  PARAMETER(PAR.TH_Max_GT_Lean_Pct);
  PARAMETER(PAR.TH_Head_LT_Backfat_In_Min);
  PARAMETER(PAR.TH_Head_LT_LoinEye_In_Min);
  PARAMETER(PAR.TH_Head_LT_Hot_Wt_lb_Min);
  PARAMETER(PAR.TH_Head_LT_Lean_Pct_Min);
  PARAMETER(PAR.TH_Head_GT_Backfat_In_Max);
  PARAMETER(PAR.TH_Head_GT_LoinEye_In_Max);
  PARAMETER(PAR.TH_Head_GT_Hot_Wt_lb_Max);
  PARAMETER(PAR.TH_Head_GT_Lean_Pct_Max);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_Excluded_Gross_Value);
  PARAMETER(PAR.TH_Head_Adjusted_LN);
  PARAMETER(PAR.TH_PHA_Head_Adds);
  PARAMETER(PAR.TH_PHA_Yield_Percent);
  PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(PAR.TH_Head_Add_Reason);
  PARAMETER(PAR.DTS_Hog_Group_Code_1);
  PARAMETER(PAR.DTS_Building_1);
  PARAMETER(PAR.DTS_Room_1);
  PARAMETER(PAR.DTS_Delivered_Head_1);
  PARAMETER(PAR.DTS_Hog_Group_Code_2);
  PARAMETER(PAR.DTS_Building_2);
  PARAMETER(PAR.DTS_Room_2);
  PARAMETER(PAR.DTS_Delivered_Head_2);
  PARAMETER(PAR.DTS_Hog_Group_Code_3);
  PARAMETER(PAR.DTS_Building_3);
  PARAMETER(PAR.DTS_Room_3);
  PARAMETER(PAR.DTS_Delivered_Head_3);
  PARAMETER(PAR.DTS_Hog_Group_Code_4);
  PARAMETER(PAR.DTS_Building_4);
  PARAMETER(PAR.DTS_Room_4);
  PARAMETER(PAR.DTS_Delivered_Head_4);
  PARAMETER(PAR.TH_Avg_Loin_Eye_2_dec);
  PARAMETER(PAR.TH_Avg_Backfat_2_Dec);
  PARAMETER(PAR.EDI_Trading_Partner_#);
  PARAMETER(PAR.EDI_Process_Status);
  PARAMETER(PAR.Recreate_EDI_Files_Usr);
  {
   //?USER: Processing before Data update

   CASE;

   // IF PAR.Recreate EDI Files Usr is ReCreate Only
   IF PAR.Recreate_EDI_Files_Usr = 'R';

   // DB1.EDI Process Status = CND.Processed
   DB1.EDI_Process_Status = 'P';

   ENDIF;

  }

  //?USER: Process Data record

  // PAR.#Txt USR = PAR.TH Tattoo Reference
  PAR.#Txt_USR = PAR.TH_Group_Reference;

  // Execute function Clc Chg Char in Str   US.
  EXECUTE FUNCTION(Clc Chg Char in Str   US) TYPE(EXCUSRSRC) ('PKOSUFR');
  PARAMETER(PAR.#Txt_USR);
  PARAMETER(',');
  PARAMETER(';');
  PARAMETER(WRK.@Status_Yes_No);
  {
   E                    SCN        80  1               SCAN FIELD
   C                     MOVEL'N'       #OABST
   C                     MOVEA#BC6TX    SCN              LOAD ARRAY
   C                     Z-ADD1         UX      20       SET COUNTER
   C           UX        DOWLE80
   C           SCN,UX    IFEQ #IHITX
   C                     MOVEL'Y'       #OABST
   C                     MOVEL#IODTX    SCN,UX
   C                     END
   C                     ADD  1         UX
   C                     END
   C                     MOVEASCN       #BC6TX
  }

  EXECUTE FUNCTION(Upd EDI Proc Status   CH) TYPE(CHGOBJ) FILE(PKD3CPP)           AB1200952;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.BOH_Buy_Order_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Shipped_Weight);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(PAR.#Txt_USR);
  PARAMETER(PAR.HB_Buyer_Code);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(DB1.Commission_Producer_Payee);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(DB1.EDI_Load_Type);
  PARAMETER(DB1.PS_Site_ID);
  PARAMETER(PAR.PSM_Miles_to_Company);
  PARAMETER(PAR.TH_Head_LFT);
  PARAMETER(PAR.TH_Head_EUT_KOA);
  PARAMETER(PAR.TH_Dead_On_Arrival);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Yard_Deads);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.TH_Hot_Wgt);
  PARAMETER(PAR.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Hot_Wgt);
  PARAMETER(PAR.TH_Avg_Lean_Percent);
  PARAMETER(PAR.TH_Avg_Backfat);
  PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.USDA_Pork_Cutout_Price);
  PARAMETER(PAR.Carcass_Base_Price);
  PARAMETER(PAR.Break_Even_Price);
  PARAMETER(PAR.Break_Even_Price);
  PARAMETER(PAR.Avg_Meat_Value_Factor);
  PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
  PARAMETER(PAR.MeatVal_Factr_Amt_Crc_CWT);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.Fixed_Cost_Fctr_Crc_CWT);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(PAR.TH_CM_Base_Carcass_Value);
  PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.TH_CM_Gross_Live_CWT);
  PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.Deduction_Code_1);
  PARAMETER(PAR.Deduction_Unit_Amt_1);
  PARAMETER(PAR.Deduction_UOM_1);
  PARAMETER(PAR.Deduction_Desc_1);
  PARAMETER(PAR.Deduction_Amt_1);
  PARAMETER(PAR.Deduction_Code_2);
  PARAMETER(PAR.Deduction_Unit_Amt_2);
  PARAMETER(PAR.Deduction_UOM_2);
  PARAMETER(PAR.Deduction_Desc_2);
  PARAMETER(PAR.Deduction_Amt_2);
  PARAMETER(PAR.Deduction_Code_3);
  PARAMETER(PAR.Deduction_Unit_Amt_3);
  PARAMETER(PAR.Deduction_UOM_3);
  PARAMETER(PAR.Deduction_Desc_3);
  PARAMETER(PAR.Deduction_Amt_3);
  PARAMETER(PAR.Deduction_Code_4);
  PARAMETER(PAR.Deduction_Unit_Amt_4);
  PARAMETER(PAR.Deduction_UOM_4);
  PARAMETER(PAR.Deduction_Desc_4);
  PARAMETER(PAR.Deduction_Amt_4);
  PARAMETER(PAR.Deduction_Code_5);
  PARAMETER(PAR.Deduction_Unit_Amt_5);
  PARAMETER(PAR.Deduction_UOM_5);
  PARAMETER(PAR.Deduction_Desc_5);
  PARAMETER(PAR.Deduction_Amt_5);
  PARAMETER(PAR.Deduction_Code_6);
  PARAMETER(PAR.Deduction_Unit_Amt_6);
  PARAMETER(PAR.Deduction_UOM_6);
  PARAMETER(PAR.Deduction_Desc_6);
  PARAMETER(PAR.Deduction_Amt_6);
  PARAMETER(PAR.Addition_Code_1);
  PARAMETER(PAR.Addition_Unit_Amt_1);
  PARAMETER(PAR.Addition_UOM_1);
  PARAMETER(PAR.Addition_Desc_1);
  PARAMETER(PAR.Addition_Amt_1);
  PARAMETER(PAR.Addition_Code_2);
  PARAMETER(PAR.Addition_Unit_Amt_2);
  PARAMETER(PAR.Addition_UOM_2);
  PARAMETER(PAR.Addition_Desc_2);
  PARAMETER(PAR.Addition_Amt_2);
  PARAMETER(PAR.Condemned_Reason_1);
  PARAMETER(PAR.Condemned_Reason_Head_1);
  PARAMETER(PAR.Condemned_Reason_2);
  PARAMETER(PAR.Condemned_Reason_Head_2);
  PARAMETER(PAR.Condemned_Reason_3);
  PARAMETER(PAR.Condemned_Reason_Head_3);
  PARAMETER(PAR.Condemned_Reason_4);
  PARAMETER(PAR.Condemned_Reason_Head_4);
  PARAMETER(PAR.Condemned_Reason_5);
  PARAMETER(PAR.Condemned_Reason_Head_5);
  PARAMETER(PAR.Defect_Reason_1);
  PARAMETER(PAR.Defect_Head_1);
  PARAMETER(PAR.Defect_Reason_2);
  PARAMETER(PAR.Defect_Head_2);
  PARAMETER(PAR.Defect_Reason_3);
  PARAMETER(PAR.Defect_Head_3);
  PARAMETER(PAR.Defect_Reason_4);
  PARAMETER(PAR.Defect_Head_4);
  PARAMETER(PAR.Defect_Reason_5);
  PARAMETER(PAR.Defect_Head_5);
  PARAMETER(PAR.TH_Min_LT_Backfat_Inch);
  PARAMETER(PAR.TH_Min_LT_LoinEye_Inch);
  PARAMETER(PAR.TH_Min_LT_Hot_Wt_lb);
  PARAMETER(PAR.TH_Min_LT_Lean_Pct);
  PARAMETER(PAR.TH_Max_GT_Backfat_Inch);
  PARAMETER(PAR.TH_Max_GT_LoinEye_Inch);
  PARAMETER(PAR.TH_Max_GT_Hot_Wt_lb);
  PARAMETER(PAR.TH_Max_GT_Lean_Pct);
  PARAMETER(PAR.TH_Head_LT_Backfat_In_Min);
  PARAMETER(PAR.TH_Head_LT_LoinEye_In_Min);
  PARAMETER(PAR.TH_Head_LT_Hot_Wt_lb_Min);
  PARAMETER(PAR.TH_Head_LT_Lean_Pct_Min);
  PARAMETER(PAR.TH_Head_GT_Backfat_In_Max);
  PARAMETER(PAR.TH_Head_GT_LoinEye_In_Max);
  PARAMETER(PAR.TH_Head_GT_Hot_Wt_lb_Max);
  PARAMETER(PAR.TH_Head_GT_Lean_Pct_Max);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_Excluded_Gross_Value);
  PARAMETER(PAR.TH_Head_Adjusted_LN);
  PARAMETER(PAR.TH_PHA_Head_Adds);
  PARAMETER(PAR.TH_PHA_Yield_Percent);
  PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(PAR.TH_Head_Add_Reason);
  PARAMETER(PAR.DTS_Hog_Group_Code_1);
  PARAMETER(PAR.DTS_Building_1);
  PARAMETER(PAR.DTS_Room_1);
  PARAMETER(PAR.DTS_Delivered_Head_1);
  PARAMETER(PAR.DTS_Hog_Group_Code_2);
  PARAMETER(PAR.DTS_Building_2);
  PARAMETER(PAR.DTS_Room_2);
  PARAMETER(PAR.DTS_Delivered_Head_2);
  PARAMETER(PAR.DTS_Hog_Group_Code_3);
  PARAMETER(PAR.DTS_Building_3);
  PARAMETER(PAR.DTS_Room_3);
  PARAMETER(PAR.DTS_Delivered_Head_3);
  PARAMETER(PAR.DTS_Hog_Group_Code_4);
  PARAMETER(PAR.DTS_Building_4);
  PARAMETER(PAR.DTS_Room_4);
  PARAMETER(PAR.DTS_Delivered_Head_4);
  PARAMETER(DB1.TH_Avg_Loin_Eye_2_dec);
  PARAMETER(DB1.TH_Avg_Backfat_2_Dec);
  PARAMETER(PAR.EDI_Trading_Partner_#);
  PARAMETER(PAR.EDI_Process_Status);
  PARAMETER(PAR.Recreate_EDI_Files_Usr);
  {
   //?USER: Processing before Data update

   CASE;

   // IF PAR.Recreate EDI Files Usr is ReCreate Only
   IF PAR.Recreate_EDI_Files_Usr = 'R';

   // DB1.EDI Process Status = CND.Processed
   DB1.EDI_Process_Status = 'P';

   ENDIF;

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?new out put of the EDI Load Type nolonger Producer Subsidiary
 EXECUTE FUNCTION(Upd EDI Carc Summ     RT) TYPE(RTVOBJ) FILE(PKD3CPP)           AB1200938;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.BOH_Buy_Order_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(PAR.Commission_Producer_Payee);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(WRK.EDI_Load_Type);
 PARAMETER(PAR.PS_Site_ID);
 PARAMETER(PAR.PSM_Miles_to_Company);
 PARAMETER(PAR.TH_Head_LFT);
 PARAMETER(PAR.TH_Head_EUT_KOA);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_Avg_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Lean_Percent);
 PARAMETER(PAR.TH_Avg_Backfat);
 PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
 PARAMETER(PAR.TH_Actual_Yield);
 PARAMETER(PAR.TH_Adj_Actual_Yield);
 PARAMETER(LCL.USDA_Prk_CutOut_Price_USR);
 PARAMETER(LCL.Carcass_Base_Price);
 PARAMETER(LCL.Break_Even_Price);
 PARAMETER(LCL.Break_Even_Price);
 PARAMETER(LCL.Avg_Meat_Value_Factor);
 PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
 PARAMETER(LCL.MeatVal_Factr_Amt_Crc_CWT);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(LCL.Fixed_Cost_Fctr_Crc_CWT);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.TH_CM_Gross_Live_CWT);
 PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.Deduction_Code_1);
 PARAMETER(PAR.Deduction_Unit_Amt_1);
 PARAMETER(PAR.Deduction_UOM_1);
 PARAMETER(PAR.Deduction_Desc_1);
 PARAMETER(PAR.Deduction_Amt_1);
 PARAMETER(PAR.Deduction_Code_2);
 PARAMETER(PAR.Deduction_Unit_Amt_2);
 PARAMETER(PAR.Deduction_UOM_2);
 PARAMETER(PAR.Deduction_Desc_2);
 PARAMETER(PAR.Deduction_Amt_2);
 PARAMETER(PAR.Deduction_Code_3);
 PARAMETER(PAR.Deduction_Unit_Amt_3);
 PARAMETER(PAR.Deduction_UOM_3);
 PARAMETER(PAR.Deduction_Desc_3);
 PARAMETER(PAR.Deduction_Amt_3);
 PARAMETER(PAR.Deduction_Code_4);
 PARAMETER(PAR.Deduction_Unit_Amt_4);
 PARAMETER(PAR.Deduction_UOM_4);
 PARAMETER(PAR.Deduction_Desc_4);
 PARAMETER(PAR.Deduction_Amt_4);
 PARAMETER(PAR.Deduction_Code_5);
 PARAMETER(PAR.Deduction_Unit_Amt_5);
 PARAMETER(PAR.Deduction_UOM_5);
 PARAMETER(PAR.Deduction_Desc_5);
 PARAMETER(PAR.Deduction_Amt_5);
 PARAMETER(PAR.Deduction_Code_6);
 PARAMETER(PAR.Deduction_Unit_Amt_6);
 PARAMETER(PAR.Deduction_UOM_6);
 PARAMETER(PAR.Deduction_Desc_6);
 PARAMETER(PAR.Deduction_Amt_6);
 PARAMETER(PAR.Addition_Code_1);
 PARAMETER(PAR.Addition_Unit_Amt_1);
 PARAMETER(PAR.Addition_UOM_1);
 PARAMETER(PAR.Addition_Desc_1);
 PARAMETER(PAR.Addition_Amt_1);
 PARAMETER(PAR.Addition_Code_2);
 PARAMETER(PAR.Addition_Unit_Amt_2);
 PARAMETER(PAR.Addition_UOM_2);
 PARAMETER(PAR.Addition_Desc_2);
 PARAMETER(PAR.Addition_Amt_2);
 PARAMETER(PAR.Condemned_Reason_1);
 PARAMETER(PAR.Condemned_Reason_Head_1);
 PARAMETER(PAR.Condemned_Reason_2);
 PARAMETER(PAR.Condemned_Reason_Head_2);
 PARAMETER(PAR.Condemned_Reason_3);
 PARAMETER(PAR.Condemned_Reason_Head_3);
 PARAMETER(PAR.Condemned_Reason_4);
 PARAMETER(PAR.Condemned_Reason_Head_4);
 PARAMETER(PAR.Condemned_Reason_5);
 PARAMETER(PAR.Condemned_Reason_Head_5);
 PARAMETER(PAR.Defect_Reason_1);
 PARAMETER(PAR.Defect_Head_1);
 PARAMETER(PAR.Defect_Reason_2);
 PARAMETER(PAR.Defect_Head_2);
 PARAMETER(PAR.Defect_Reason_3);
 PARAMETER(PAR.Defect_Head_3);
 PARAMETER(PAR.Defect_Reason_4);
 PARAMETER(PAR.Defect_Head_4);
 PARAMETER(PAR.Defect_Reason_5);
 PARAMETER(PAR.Defect_Head_5);
 PARAMETER(LCL.TH_Min_LT_Backfat_Inch);
 PARAMETER(LCL.TH_Min_LT_LoinEye_Inch);
 PARAMETER(LCL.TH_Min_LT_Hot_Wt_lb);
 PARAMETER(LCL.TH_Min_LT_Lean_Pct);
 PARAMETER(LCL.TH_Max_GT_Backfat_Inch);
 PARAMETER(LCL.TH_Max_GT_LoinEye_Inch);
 PARAMETER(LCL.TH_Max_GT_Hot_Wt_lb);
 PARAMETER(LCL.TH_Max_GT_Lean_Pct);
 PARAMETER(LCL.TH_Head_LT_Backfat_In_Min);
 PARAMETER(LCL.TH_Head_LT_LoinEye_In_Min);
 PARAMETER(LCL.TH_Head_LT_Hot_Wt_lb_Min);
 PARAMETER(LCL.TH_Head_LT_Lean_Pct_Min);
 PARAMETER(LCL.TH_Head_GT_Backfat_In_Max);
 PARAMETER(LCL.TH_Head_GT_LoinEye_In_Max);
 PARAMETER(LCL.TH_Head_GT_Hot_Wt_lb_Max);
 PARAMETER(LCL.TH_Head_GT_Lean_Pct_Max);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_Excluded_Gross_Value);
 PARAMETER(PAR.TH_Head_Adjusted_LN);
 PARAMETER(PAR.TH_PHA_Head_Adds);
 PARAMETER(DB1.TH_PHA_Yield_Percent);
 PARAMETER(DB1.TH_PHA_Lean_Prm_Crc_CWT);
 PARAMETER(LCL.TH_Head_Add_Reason);
 PARAMETER(PAR.DTS_Hog_Group_Code_1);
 PARAMETER(PAR.DTS_Building_1);
 PARAMETER(PAR.DTS_Room_1);
 PARAMETER(PAR.DTS_Delivered_Head_1);
 PARAMETER(PAR.DTS_Hog_Group_Code_2);
 PARAMETER(PAR.DTS_Building_2);
 PARAMETER(PAR.DTS_Room_2);
 PARAMETER(PAR.DTS_Delivered_Head_2);
 PARAMETER(PAR.DTS_Hog_Group_Code_3);
 PARAMETER(PAR.DTS_Building_3);
 PARAMETER(PAR.DTS_Room_3);
 PARAMETER(PAR.DTS_Delivered_Head_3);
 PARAMETER(PAR.DTS_Hog_Group_Code_4);
 PARAMETER(PAR.DTS_Building_4);
 PARAMETER(PAR.DTS_Room_4);
 PARAMETER(PAR.DTS_Delivered_Head_4);
 PARAMETER(PAR.TH_Avg_Loin_Eye_2_dec);
 PARAMETER(PAR.TH_Avg_Backfat_2_Dec);
 PARAMETER(PAR.EDI_Trading_Partner_#);
 PARAMETER('A');
 PARAMETER(PAR.Recreate_EDI_Files_Usr);
 {
  //?USER: Processing if Data record not found

  // PAR.#Txt USR = PAR.TH Tattoo Reference
  PAR.#Txt_USR = PAR.TH_Group_Reference;

  // Execute function Clc Chg Char in Str   US.
  EXECUTE FUNCTION(Clc Chg Char in Str   US) TYPE(EXCUSRSRC) ('PKOSUFR');
  PARAMETER(PAR.#Txt_USR);
  PARAMETER(',');
  PARAMETER(';');
  PARAMETER(WRK.@Status_Yes_No);
  {
   E                    SCN        80  1               SCAN FIELD
   C                     MOVEL'N'       #OABST
   C                     MOVEA#BC6TX    SCN              LOAD ARRAY
   C                     Z-ADD1         UX      20       SET COUNTER
   C           UX        DOWLE80
   C           SCN,UX    IFEQ #IHITX
   C                     MOVEL'Y'       #OABST
   C                     MOVEL#IODTX    SCN,UX
   C                     END
   C                     ADD  1         UX
   C                     END
   C                     MOVEASCN       #BC6TX
  }

  EXECUTE FUNCTION(Crt EDI Carcass Summ  CR) TYPE(CRTOBJ) FILE(PKD3CPP)           AB1200903;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.BOH_Buy_Order_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Shipped_Weight);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(PAR.#Txt_USR);
  PARAMETER(PAR.HB_Buyer_Code);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(PAR.Commission_Producer_Payee);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.EDI_Load_Type);
  PARAMETER(PAR.PS_Site_ID);
  PARAMETER(PAR.PSM_Miles_to_Company);
  PARAMETER(PAR.TH_Head_LFT);
  PARAMETER(PAR.TH_Head_EUT_KOA);
  PARAMETER(PAR.TH_Dead_On_Arrival);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Yard_Deads);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.TH_Hot_Wgt);
  PARAMETER(PAR.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Hot_Wgt);
  PARAMETER(PAR.TH_Avg_Lean_Percent);
  PARAMETER(PAR.TH_Avg_Backfat);
  PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.USDA_Pork_Cutout_Price);
  PARAMETER(PAR.Carcass_Base_Price);
  PARAMETER(PAR.Break_Even_Price);
  PARAMETER(PAR.Break_Even_Price);
  PARAMETER(PAR.Avg_Meat_Value_Factor);
  PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
  PARAMETER(PAR.MeatVal_Factr_Amt_Crc_CWT);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.Fixed_Cost_Fctr_Crc_CWT);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(PAR.TH_CM_Base_Carcass_Value);
  PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.TH_CM_Gross_Live_CWT);
  PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.Deduction_Code_1);
  PARAMETER(PAR.Deduction_Unit_Amt_1);
  PARAMETER(PAR.Deduction_UOM_1);
  PARAMETER(PAR.Deduction_Desc_1);
  PARAMETER(PAR.Deduction_Amt_1);
  PARAMETER(PAR.Deduction_Code_2);
  PARAMETER(PAR.Deduction_Unit_Amt_2);
  PARAMETER(PAR.Deduction_UOM_2);
  PARAMETER(PAR.Deduction_Desc_2);
  PARAMETER(PAR.Deduction_Amt_2);
  PARAMETER(PAR.Deduction_Code_3);
  PARAMETER(PAR.Deduction_Unit_Amt_3);
  PARAMETER(PAR.Deduction_UOM_3);
  PARAMETER(PAR.Deduction_Desc_3);
  PARAMETER(PAR.Deduction_Amt_3);
  PARAMETER(PAR.Deduction_Code_4);
  PARAMETER(PAR.Deduction_Unit_Amt_4);
  PARAMETER(PAR.Deduction_UOM_4);
  PARAMETER(PAR.Deduction_Desc_4);
  PARAMETER(PAR.Deduction_Amt_4);
  PARAMETER(PAR.Deduction_Code_5);
  PARAMETER(PAR.Deduction_Unit_Amt_5);
  PARAMETER(PAR.Deduction_UOM_5);
  PARAMETER(PAR.Deduction_Desc_5);
  PARAMETER(PAR.Deduction_Amt_5);
  PARAMETER(PAR.Deduction_Code_6);
  PARAMETER(PAR.Deduction_Unit_Amt_6);
  PARAMETER(PAR.Deduction_UOM_6);
  PARAMETER(PAR.Deduction_Desc_6);
  PARAMETER(PAR.Deduction_Amt_6);
  PARAMETER(PAR.Addition_Code_1);
  PARAMETER(PAR.Addition_Unit_Amt_1);
  PARAMETER(PAR.Addition_UOM_1);
  PARAMETER(PAR.Addition_Desc_1);
  PARAMETER(PAR.Addition_Amt_1);
  PARAMETER(PAR.Addition_Code_2);
  PARAMETER(PAR.Addition_Unit_Amt_2);
  PARAMETER(PAR.Addition_UOM_2);
  PARAMETER(PAR.Addition_Desc_2);
  PARAMETER(PAR.Addition_Amt_2);
  PARAMETER(PAR.Condemned_Reason_1);
  PARAMETER(PAR.Condemned_Reason_Head_1);
  PARAMETER(PAR.Condemned_Reason_2);
  PARAMETER(PAR.Condemned_Reason_Head_2);
  PARAMETER(PAR.Condemned_Reason_3);
  PARAMETER(PAR.Condemned_Reason_Head_3);
  PARAMETER(PAR.Condemned_Reason_4);
  PARAMETER(PAR.Condemned_Reason_Head_4);
  PARAMETER(PAR.Condemned_Reason_5);
  PARAMETER(PAR.Condemned_Reason_Head_5);
  PARAMETER(PAR.Defect_Reason_1);
  PARAMETER(PAR.Defect_Head_1);
  PARAMETER(PAR.Defect_Reason_2);
  PARAMETER(PAR.Defect_Head_2);
  PARAMETER(PAR.Defect_Reason_3);
  PARAMETER(PAR.Defect_Head_3);
  PARAMETER(PAR.Defect_Reason_4);
  PARAMETER(PAR.Defect_Head_4);
  PARAMETER(PAR.Defect_Reason_5);
  PARAMETER(PAR.Defect_Head_5);
  PARAMETER(PAR.TH_Min_LT_Backfat_Inch);
  PARAMETER(PAR.TH_Min_LT_LoinEye_Inch);
  PARAMETER(PAR.TH_Min_LT_Hot_Wt_lb);
  PARAMETER(PAR.TH_Min_LT_Lean_Pct);
  PARAMETER(PAR.TH_Max_GT_Backfat_Inch);
  PARAMETER(PAR.TH_Max_GT_LoinEye_Inch);
  PARAMETER(PAR.TH_Max_GT_Hot_Wt_lb);
  PARAMETER(PAR.TH_Max_GT_Lean_Pct);
  PARAMETER(PAR.TH_Head_LT_Backfat_In_Min);
  PARAMETER(PAR.TH_Head_LT_LoinEye_In_Min);
  PARAMETER(PAR.TH_Head_LT_Hot_Wt_lb_Min);
  PARAMETER(PAR.TH_Head_LT_Lean_Pct_Min);
  PARAMETER(PAR.TH_Head_GT_Backfat_In_Max);
  PARAMETER(PAR.TH_Head_GT_LoinEye_In_Max);
  PARAMETER(PAR.TH_Head_GT_Hot_Wt_lb_Max);
  PARAMETER(PAR.TH_Head_GT_Lean_Pct_Max);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_Excluded_Gross_Value);
  PARAMETER(PAR.TH_Head_Adjusted_LN);
  PARAMETER(PAR.TH_PHA_Head_Adds);
  PARAMETER(PAR.TH_PHA_Yield_Percent);
  PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(PAR.TH_Head_Add_Reason);
  PARAMETER(PAR.DTS_Hog_Group_Code_1);
  PARAMETER(PAR.DTS_Building_1);
  PARAMETER(PAR.DTS_Room_1);
  PARAMETER(PAR.DTS_Delivered_Head_1);
  PARAMETER(PAR.DTS_Hog_Group_Code_2);
  PARAMETER(PAR.DTS_Building_2);
  PARAMETER(PAR.DTS_Room_2);
  PARAMETER(PAR.DTS_Delivered_Head_2);
  PARAMETER(PAR.DTS_Hog_Group_Code_3);
  PARAMETER(PAR.DTS_Building_3);
  PARAMETER(PAR.DTS_Room_3);
  PARAMETER(PAR.DTS_Delivered_Head_3);
  PARAMETER(PAR.DTS_Hog_Group_Code_4);
  PARAMETER(PAR.DTS_Building_4);
  PARAMETER(PAR.DTS_Room_4);
  PARAMETER(PAR.DTS_Delivered_Head_4);
  PARAMETER(PAR.TH_Avg_Loin_Eye_2_dec);
  PARAMETER(PAR.TH_Avg_Backfat_2_Dec);
  PARAMETER(PAR.EDI_Trading_Partner_#);
  PARAMETER(PAR.EDI_Process_Status);
  PARAMETER(PAR.Recreate_EDI_Files_Usr);
  {
   //?USER: Processing before Data update

   CASE;

   // IF PAR.Recreate EDI Files Usr is ReCreate Only
   IF PAR.Recreate_EDI_Files_Usr = 'R';

   // DB1.EDI Process Status = CND.Processed
   DB1.EDI_Process_Status = 'P';

   ENDIF;

  }

  //?USER: Process Data record

  // PAR.#Txt USR = PAR.TH Tattoo Reference
  PAR.#Txt_USR = PAR.TH_Group_Reference;

  // Execute function Clc Chg Char in Str   US.
  EXECUTE FUNCTION(Clc Chg Char in Str   US) TYPE(EXCUSRSRC) ('PKOSUFR');
  PARAMETER(PAR.#Txt_USR);
  PARAMETER(',');
  PARAMETER(';');
  PARAMETER(WRK.@Status_Yes_No);
  {
   E                    SCN        80  1               SCAN FIELD
   C                     MOVEL'N'       #OABST
   C                     MOVEA#BC6TX    SCN              LOAD ARRAY
   C                     Z-ADD1         UX      20       SET COUNTER
   C           UX        DOWLE80
   C           SCN,UX    IFEQ #IHITX
   C                     MOVEL'Y'       #OABST
   C                     MOVEL#IODTX    SCN,UX
   C                     END
   C                     ADD  1         UX
   C                     END
   C                     MOVEASCN       #BC6TX
  }

  EXECUTE FUNCTION(Upd EDI Proc Status   CH) TYPE(CHGOBJ) FILE(PKD3CPP)           AB1200952;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(PAR.BOH_Buy_Order_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Shipped_Weight);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(PAR.#Txt_USR);
  PARAMETER(PAR.HB_Buyer_Code);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(DB1.Commission_Producer_Payee);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(DB1.EDI_Load_Type);
  PARAMETER(DB1.PS_Site_ID);
  PARAMETER(PAR.PSM_Miles_to_Company);
  PARAMETER(PAR.TH_Head_LFT);
  PARAMETER(PAR.TH_Head_EUT_KOA);
  PARAMETER(PAR.TH_Dead_On_Arrival);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Yard_Deads);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.TH_Hot_Wgt);
  PARAMETER(PAR.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Hot_Wgt);
  PARAMETER(PAR.TH_Avg_Lean_Percent);
  PARAMETER(PAR.TH_Avg_Backfat);
  PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.USDA_Pork_Cutout_Price);
  PARAMETER(PAR.Carcass_Base_Price);
  PARAMETER(PAR.Break_Even_Price);
  PARAMETER(PAR.Break_Even_Price);
  PARAMETER(PAR.Avg_Meat_Value_Factor);
  PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
  PARAMETER(PAR.MeatVal_Factr_Amt_Crc_CWT);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.Fixed_Cost_Fctr_Crc_CWT);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(PAR.TH_CM_Base_Carcass_Value);
  PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.TH_CM_Gross_Live_CWT);
  PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.Deduction_Code_1);
  PARAMETER(PAR.Deduction_Unit_Amt_1);
  PARAMETER(PAR.Deduction_UOM_1);
  PARAMETER(PAR.Deduction_Desc_1);
  PARAMETER(PAR.Deduction_Amt_1);
  PARAMETER(PAR.Deduction_Code_2);
  PARAMETER(PAR.Deduction_Unit_Amt_2);
  PARAMETER(PAR.Deduction_UOM_2);
  PARAMETER(PAR.Deduction_Desc_2);
  PARAMETER(PAR.Deduction_Amt_2);
  PARAMETER(PAR.Deduction_Code_3);
  PARAMETER(PAR.Deduction_Unit_Amt_3);
  PARAMETER(PAR.Deduction_UOM_3);
  PARAMETER(PAR.Deduction_Desc_3);
  PARAMETER(PAR.Deduction_Amt_3);
  PARAMETER(PAR.Deduction_Code_4);
  PARAMETER(PAR.Deduction_Unit_Amt_4);
  PARAMETER(PAR.Deduction_UOM_4);
  PARAMETER(PAR.Deduction_Desc_4);
  PARAMETER(PAR.Deduction_Amt_4);
  PARAMETER(PAR.Deduction_Code_5);
  PARAMETER(PAR.Deduction_Unit_Amt_5);
  PARAMETER(PAR.Deduction_UOM_5);
  PARAMETER(PAR.Deduction_Desc_5);
  PARAMETER(PAR.Deduction_Amt_5);
  PARAMETER(PAR.Deduction_Code_6);
  PARAMETER(PAR.Deduction_Unit_Amt_6);
  PARAMETER(PAR.Deduction_UOM_6);
  PARAMETER(PAR.Deduction_Desc_6);
  PARAMETER(PAR.Deduction_Amt_6);
  PARAMETER(PAR.Addition_Code_1);
  PARAMETER(PAR.Addition_Unit_Amt_1);
  PARAMETER(PAR.Addition_UOM_1);
  PARAMETER(PAR.Addition_Desc_1);
  PARAMETER(PAR.Addition_Amt_1);
  PARAMETER(PAR.Addition_Code_2);
  PARAMETER(PAR.Addition_Unit_Amt_2);
  PARAMETER(PAR.Addition_UOM_2);
  PARAMETER(PAR.Addition_Desc_2);
  PARAMETER(PAR.Addition_Amt_2);
  PARAMETER(PAR.Condemned_Reason_1);
  PARAMETER(PAR.Condemned_Reason_Head_1);
  PARAMETER(PAR.Condemned_Reason_2);
  PARAMETER(PAR.Condemned_Reason_Head_2);
  PARAMETER(PAR.Condemned_Reason_3);
  PARAMETER(PAR.Condemned_Reason_Head_3);
  PARAMETER(PAR.Condemned_Reason_4);
  PARAMETER(PAR.Condemned_Reason_Head_4);
  PARAMETER(PAR.Condemned_Reason_5);
  PARAMETER(PAR.Condemned_Reason_Head_5);
  PARAMETER(PAR.Defect_Reason_1);
  PARAMETER(PAR.Defect_Head_1);
  PARAMETER(PAR.Defect_Reason_2);
  PARAMETER(PAR.Defect_Head_2);
  PARAMETER(PAR.Defect_Reason_3);
  PARAMETER(PAR.Defect_Head_3);
  PARAMETER(PAR.Defect_Reason_4);
  PARAMETER(PAR.Defect_Head_4);
  PARAMETER(PAR.Defect_Reason_5);
  PARAMETER(PAR.Defect_Head_5);
  PARAMETER(PAR.TH_Min_LT_Backfat_Inch);
  PARAMETER(PAR.TH_Min_LT_LoinEye_Inch);
  PARAMETER(PAR.TH_Min_LT_Hot_Wt_lb);
  PARAMETER(PAR.TH_Min_LT_Lean_Pct);
  PARAMETER(PAR.TH_Max_GT_Backfat_Inch);
  PARAMETER(PAR.TH_Max_GT_LoinEye_Inch);
  PARAMETER(PAR.TH_Max_GT_Hot_Wt_lb);
  PARAMETER(PAR.TH_Max_GT_Lean_Pct);
  PARAMETER(PAR.TH_Head_LT_Backfat_In_Min);
  PARAMETER(PAR.TH_Head_LT_LoinEye_In_Min);
  PARAMETER(PAR.TH_Head_LT_Hot_Wt_lb_Min);
  PARAMETER(PAR.TH_Head_LT_Lean_Pct_Min);
  PARAMETER(PAR.TH_Head_GT_Backfat_In_Max);
  PARAMETER(PAR.TH_Head_GT_LoinEye_In_Max);
  PARAMETER(PAR.TH_Head_GT_Hot_Wt_lb_Max);
  PARAMETER(PAR.TH_Head_GT_Lean_Pct_Max);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_Excluded_Gross_Value);
  PARAMETER(PAR.TH_Head_Adjusted_LN);
  PARAMETER(PAR.TH_PHA_Head_Adds);
  PARAMETER(PAR.TH_PHA_Yield_Percent);
  PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(PAR.TH_Head_Add_Reason);
  PARAMETER(PAR.DTS_Hog_Group_Code_1);
  PARAMETER(PAR.DTS_Building_1);
  PARAMETER(PAR.DTS_Room_1);
  PARAMETER(PAR.DTS_Delivered_Head_1);
  PARAMETER(PAR.DTS_Hog_Group_Code_2);
  PARAMETER(PAR.DTS_Building_2);
  PARAMETER(PAR.DTS_Room_2);
  PARAMETER(PAR.DTS_Delivered_Head_2);
  PARAMETER(PAR.DTS_Hog_Group_Code_3);
  PARAMETER(PAR.DTS_Building_3);
  PARAMETER(PAR.DTS_Room_3);
  PARAMETER(PAR.DTS_Delivered_Head_3);
  PARAMETER(PAR.DTS_Hog_Group_Code_4);
  PARAMETER(PAR.DTS_Building_4);
  PARAMETER(PAR.DTS_Room_4);
  PARAMETER(PAR.DTS_Delivered_Head_4);
  PARAMETER(DB1.TH_Avg_Loin_Eye_2_dec);
  PARAMETER(DB1.TH_Avg_Backfat_2_Dec);
  PARAMETER(PAR.EDI_Trading_Partner_#);
  PARAMETER(PAR.EDI_Process_Status);
  PARAMETER(PAR.Recreate_EDI_Files_Usr);
  {
   //?USER: Processing before Data update

   CASE;

   // IF PAR.Recreate EDI Files Usr is ReCreate Only
   IF PAR.Recreate_EDI_Files_Usr = 'R';

   // DB1.EDI Process Status = CND.Processed
   DB1.EDI_Process_Status = 'P';

   ENDIF;

  }

 }

 ENDIF;

 EXECUTE FUNCTION(Del EDI Carc Detail   RT) TYPE(RTVOBJ) FILE(PKD4CPP)           AB1200937;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del EDI Carc Detail   DO) TYPE(DLTOBJ) FILE(PKD4CPP)           AB1200934;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.CD_Carcass_Number);
 }

 // WRK.CD Carcass Number = CON.1
 WRK.CD_Carcass_Number = 1;

 EXECUTE FUNCTION(Crt EDI Carc Summ/Dtl RT2) TYPE(RTVOBJ) FILE(PKB1CPP)          AB1274309;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.CD_Carcass_Number);
 PARAMETER(PAR.EDI_Trading_Partner_#);
 PARAMETER(PAR.CMP_Sort_Basis);
 PARAMETER(PAR.Recreate_EDI_Files_Usr);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.CD Payment Type is Carcass Merit
  IF DB1.CD_Payment_Type = 'C';

  CASE;

  // IF DB1.CD Record Add/Del Sts is Valid Records for Totals
  IF DB1.CD_Record_Add_Del_Sts = 'A'/*BLANK;

  //?Standard Yield
  CASE;

  // IF PAR.CMP Sort Basis is None
  IF PAR.CMP_Sort_Basis = *BLANK;

  // PAR.CD STD Yield = CON.*ZERO
  PAR.CD_STD_Yield = *ZERO;

  //?Standard Yield
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.CD STD Yield = DB1.CD STD Yield
  PAR.CD_STD_Yield = DB1.CD_STD_Yield;

  ENDIF;

  //?*********************************************************
  //?111405 SLM HPE011 EDI
  //?EDI PROJECT HPE011
  //?Addition calculation for the EDI OUTPUT
  DO;

  //?sort factor
  // LCL.Sort Factor = DB1.CD Sort Loss / CON.100 *
  LCL.Sort_Factor = DB1.CD_Sort_Loss / 100;

  //?Meat value
  // MeatVal Factr Amt/Crc CWT
  LCL.MeatVal_Factr_Amt_Crc_CWT = ( DB1.CD_Meat_Value_Factor_Amt
  / DB1.CD_Carcass_Hot_Weight 'H' ) * 100 'H';

  //?fixed cost
  // Fixed Cost Fctr /Crc CWT
  LCL.Fixed_Cost_Fctr_Crc_CWT = ( DB1.CD_Fixed_Cost_Factor_Amt / DB1.CD_Carcass_Hot_Weight
  'H' ) * 100 'H';

  //?Sort Amount & Sort Amount /CWT
  // PAR.CD Sort Discount $ Head = DB1.CD Crc Value $ Per Hd - DB1.CD Base Carc Value
  PAR.CD_Sort_Discount_$_Head = DB1.CD_Crc_Value_$_Per_Hd - DB1.CD_Base_Carc_Value;

  // PAR.CD Sort Discount /CWT = DB1.CD Crc Value Per CWT - DB1.CD Base Carcass CWT
  PAR.CD_Sort_Discount_CWT = DB1.CD_Crc_Value_Per_CWT - DB1.CD_Base_Carcass_CWT;

  ENDDO;

  //?*********************************************************
  EXECUTE FUNCTION(Crt EDI Carc Detail   CR) TYPE(CRTOBJ) FILE(PKD4CPP)           AB1200932;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.CD_Carcass_Number);
  PARAMETER(DB1.CD_Record_Add_Del_Sts);
  PARAMETER(PAR.CD_STD_Yield);
  PARAMETER(DB1.CD_Carcass_Hot_Weight);
  PARAMETER(DB1.CD_Lean_Percent);
  PARAMETER(LCL.Sort_Factor);
  PARAMETER(DB1.CD_Lean_Prem_Disc_Factor);
  PARAMETER(DB1.CD_Meat_Value_Factor);
  PARAMETER(DB1.CD_Meat_Value_Factor_Amt);
  PARAMETER(LCL.MeatVal_Factr_Amt_Crc_CWT);
  PARAMETER(DB1.CD_Fixed_Cost_Factor);
  PARAMETER(DB1.CD_Fixed_Cost_Factor_Amt);
  PARAMETER(LCL.Fixed_Cost_Fctr_Crc_CWT);
  PARAMETER(PAR.CD_Sort_Discount_CWT);
  PARAMETER(PAR.CD_Sort_Discount_$_Head);
  PARAMETER(DB1.CD_Crc_Value_Per_CWT);
  PARAMETER(DB1.CD_Crc_Value_$_Per_Hd);
  PARAMETER(DB1.CD_Lean_Premium_CWT);
  PARAMETER(DB1.CD_Lean_Premium_$_Per_Hd);
  PARAMETER(DB1.CD_Gross_Value_Per_CWT);
  PARAMETER(DB1.CD_Gross_Value_$_Per_HD);
  PARAMETER(DB1.CD_Trim_Area);
  PARAMETER(DB1.CD_Backfat_Thickness_MM);
  PARAMETER(DB1.CD_Loin_Eye_Depth_MM);
  PARAMETER(DB1.CD_Adjust_Add_Type);
  PARAMETER(PAR.EDI_Trading_Partner_#);
  PARAMETER('A');
  PARAMETER(PAR.Recreate_EDI_Files_Usr);
  {
   //?USER: Processing before Data update

   CASE;

   // IF PAR.Recreate EDI Files Usr is ReCreate Only
   IF PAR.Recreate_EDI_Files_Usr = 'R';

   // DB1.EDI Process Status = CND.Processed
   DB1.EDI_Process_Status = 'P';

   ENDIF;

  }

  // PAR.CD Carcass Number = PAR.CD Carcass Number + CON.1
  PAR.CD_Carcass_Number = PAR.CD_Carcass_Number + 1;

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?USER: Exit processing

 // LCL.Date Alpha USR = CVTVAR(PAR.TH Kill Date)
 LCL.Date_Alpha_USR = CVTVAR(PAR.TH_Kill_Date);

 // Call program Rtv User Class        UP.
 CALL PROGRAM(Rtv User Class        UP) ('PKU3UPR');
 PARAMETER(LCL.User_Class_f_usrprf_USR);

 EXECUTE FUNCTION(Rtv EDI Trading Prt#  RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1200949;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(LCL.PD_EDI_Trading_Partner_#);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.EDI Trading Partner # = LCL.PD EDI Trading Partner #
 LCL.EDI_Trading_Partner_# = LCL.PD_EDI_Trading_Partner_#;

 // LCL.EDI TradingPart Alpha Usr = LCL.EDI Trading Partner #
 LCL.EDI_TradingPart_Alpha_Usr = LCL.EDI_Trading_Partner_#;

}


ENDIF;

