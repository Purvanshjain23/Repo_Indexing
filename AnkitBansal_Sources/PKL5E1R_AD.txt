// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKL5E1R
// ?Date: 14.08.2025 Time: 02:52:09
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//? 5/26/2021 JBB E78269 - Valid Source Code erroring out on screen
//?                        Commented out the user entered Source Code
//?                        validation.  The Source Code relationship
//?                        performs the test automatically, so the
//?                        user test is not needed.
//?H16853 ISE 11/09/2020 - Recompiled due to change in Buy Order Number
//?R7522 JJH 12/22/16 - Scheduling Modificaitons
//?- Recompile program so that it will display the Source Description
//?  from "Val Source RT - DBF Source".
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?USER: Initialize key screen

// KEY.CC Company Number = WRK.CC Company Number
KEY.CC_Company_Number = WRK.CC_Company_Number;

//?USER: Initialize detail screen (new record)

// DTL.PCS Comp Selection Type = CND.Kill Date Range
DTL.PCS_Comp_Selection_Type = 'KC';

// DTL.PCS Live As Carc Sts = CND.No
DTL.PCS_Live_As_Carc_Sts = 'N';

// DTL.PCS Replacement Cost Sts = CND.No
DTL.PCS_Replacement_Cost_Sts = 'N';

// DTL.PCS Market Date Method = CON.DRA
DTL.PCS_Market_Date_Method = 'DRA';

//?USER: Initialize detail screen (existing record)

// DTL.Condition Name 1 USR = Condition name of DTL.PCS Comp Selection Type
DTL.Condition_Name_1_USR = RTVCND(DTL.PCS_Comp_Selection_Type);

//?Val:  Commodity Market
CASE;

// IF DTL.PCS Comm Market NE WRK.Blank USR
IF DTL.PCS_Comm_Market <> WRK.Blank_USR;

// Call program Val Commodity Market  XF.
CALL PROGRAM(Val Commodity Market  XF) ('PDG1XFR');
PARAMETER(DTL.PCS_Comm_Market);
PARAMETER(DTL.Market_Code_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

//?Commodity Market
CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Market &1 is invalid.'
ERROR(PRK0482);
MSGPARM(DTL.PCS_Comm_Market);

ENDIF;

ENDIF;

//?Val:  Commodity Price Group
CASE;

// IF DTL.PCS Comm Price Group NE WRK.Blank USR
IF DTL.PCS_Comm_Price_Group <> WRK.Blank_USR;

// Call program Val Commodity Group   XF.
CALL PROGRAM(Val Commodity Group   XF) ('PDG2XFR');
PARAMETER(DTL.PCS_Comm_Price_Group);
PARAMETER(DTL.Market_Group_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

//?Commodity Group
CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Group &1 is invalid.'
ERROR(PRK0483);
MSGPARM(DTL.PCS_Comm_Price_Group);

ENDIF;

ENDIF;

//?Val:  Market Date Method
CASE;

// IF DTL.PCS Market Date Method NE WRK.Blank USR
IF DTL.PCS_Market_Date_Method <> WRK.Blank_USR;

// Call program Val Market Date Method UP.
CALL PROGRAM(Val Market Date Method UP) ('PDZUXFR');
PARAMETER(PGM.*Return_code);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PCS_Market_Date_Method);
PARAMETER(DTL.Market_Date_Method_Desc);
PARAMETER('H');

ENDIF;

//?Val:  Pricing Option
CASE;

// IF DTL.PCS Pricing Option NE WRK.Blank USR
IF DTL.PCS_Pricing_Option <> WRK.Blank_USR;

EXECUTE FUNCTION(Val Pricing Option) TYPE(RTVOBJ) FILE(PKAKREP)                 AB1202034;
PARAMETER(DTL.PCS_Pricing_Option);
PARAMETER(DTL.PO_Description);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Pricing Option
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Pricing Option not found.'
ERROR(PRK0025);

ENDIF;

ENDIF;

//?Val:  Carcass Merit Program
CASE;

// IF DTL.PCS Carcass Merit Pgm NE WRK.Blank USR
IF DTL.PCS_Carcass_Merit_Pgm <> WRK.Blank_USR;

EXECUTE FUNCTION(Val Carc Merit Pgm    RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1202035;
PARAMETER(DTL.PCS_Carcass_Merit_Pgm);
PARAMETER(DTL.CMP_Description);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Carcass Merit Program
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Carcass Merit Program not found.'
ERROR(PRK0039);

ENDIF;

ENDIF;

//?Val:  Source Code
CASE;

// IF DTL.SR Source Code NE WRK.Blank USR
IF DTL.SR_Source_Code <> WRK.Blank_USR;

EXECUTE FUNCTION(Val Source            RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1202234;
PARAMETER(DB1.SR_Source_Code);
PARAMETER(DTL.SR_Description);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Source not found.'
ERROR(PRK0005);

ENDIF;

ENDIF;

// DTL.Condition Name 2 USR = Condition name of DTL.PCS Payment Type
DTL.Condition_Name_2_USR = RTVCND(DTL.PCS_Payment_Type);

// DTL.Condition Name 3 USR = Condition name of DTL.PCS Live As Carc Sts
DTL.Condition_Name_3_USR = RTVCND(DTL.PCS_Live_As_Carc_Sts);

// DTL.Condition Name 4 USR = Condition name of DTL.PCS Replacement Cost Sts
DTL.Condition_Name_4_USR = RTVCND(DTL.PCS_Replacement_Cost_Sts);

// DTL.Condition Name USR = Condition name of DTL.PCS Comp Process Sts
DTL.Condition_Name_USR = RTVCND(DTL.PCS_Comp_Process_Sts);

// DTL.Condition Name 5 USR = Condition name of DTL.PCS Mkt +/- B4/Aftr Base
DTL.Condition_Name_5_USR = RTVCND(DTL.PCS_Mkt+_B4_Aftr_CUTOUT);

//?USER: Validate detail screen fields

//?F4=Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.PCS Comm Market
IF PGM.*Cursor_field = DTL.PCS_Comm_Market;

// Call program Sel Commodity Market  XF.
CALL PROGRAM(Sel Commodity Market  XF) ('PDEDSRR');
PARAMETER(DTL.PCS_Comm_Market);

// IF PGM.*Cursor field <IS> DTL.PCS Comm Price Group
IF PGM.*Cursor_field = DTL.PCS_Comm_Price_Group;

// Call program Sel Commodity Group   XF.
CALL PROGRAM(Sel Commodity Group   XF) ('PDECSRR');
PARAMETER(DTL.PCS_Comm_Price_Group);

// IF PGM.*Cursor field <IS> DTL.PCS Market Date Method
IF PGM.*Cursor_field = DTL.PCS_Market_Date_Method;

// Call program Sel Market Date Method UP.
CALL PROGRAM(Sel Market Date Method UP) ('PDZWXFR');
PARAMETER(PGM.*Return_code);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PCS_Market_Date_Method);
PARAMETER(WRK.Market_Date_Method_Desc);
PARAMETER('H');

// IF PGM.*Cursor field <IS> DTL.PCS Pricing Option
IF PGM.*Cursor_field = DTL.PCS_Pricing_Option;

// Call program Sel Pricing Option    SR.
CALL PROGRAM(Sel Pricing Option    SR) ('PKELSRR');
PARAMETER(DTL.PCS_Pricing_Option);

// IF PGM.*Cursor field <IS> DTL.PCS Carcass Merit Pgm
IF PGM.*Cursor_field = DTL.PCS_Carcass_Merit_Pgm;

// Call program Sel Carc Merit Pgm    SR.
CALL PROGRAM(Sel Carc Merit Pgm    SR) ('PKBASRR');
PARAMETER(DTL.PCS_Carcass_Merit_Pgm);

// IF PGM.*Cursor field <IS> DTL.PCS Damage Contract
IF PGM.*Cursor_field = DTL.PCS_Damage_Contract;

// Call program Sel Contract          SR.
CALL PROGRAM(Sel Contract          SR) ('PKFBSRR');
PARAMETER(DTL.PCS_Damage_Contract);

ENDIF;

ENDIF;

//?Val: From and To Kill Date
CASE;

// IF DTL.PCS Comp Selection Type is Kill Date Range
IF DTL.PCS_Comp_Selection_Type = 'KC';

//?From Kill Date
CASE;

// IF DTL.PCS From Kill Date is EQ Zero
IF DTL.PCS_From_Kill_Date = *ZERO;

// Send error message - 'Date is required.'
ERROR(PRK0772);
MSGPARM(DTL.PCS_From_Kill_Date);

ENDIF;

//?To Kill Date
CASE;

// IF DTL.PCS To Kill Date is EQ Zero
IF DTL.PCS_To_Kill_Date = *ZERO;

// Send error message - 'Date is required.'
ERROR(PRK0772);
MSGPARM(DTL.PCS_To_Kill_Date);

ENDIF;

//?From Date must be less than To Date
CASE;

// IF DTL.PCS From Kill Date is NE Zero
IF DTL.PCS_From_Kill_Date <> *ZERO;

// AND DTL.PCS To Kill Date is NE Zero
AND DTL.PCS_To_Kill_Date <> *ZERO;

CASE;

// IF DTL.PCS From Kill Date GT DTL.PCS To Kill Date
IF DTL.PCS_From_Kill_Date > DTL.PCS_To_Kill_Date;

// Send error message - '&1 must be less than or equal to &2'
ERROR(PRK0635);
MSGPARM(DTL.PCS_From_Kill_Date);
MSGPARM(DTL.PCS_To_Kill_Date);

ENDIF;

ENDIF;

//?Val: From and To Kill Date
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.PCS From Kill Date = CON.*ZERO
DTL.PCS_From_Kill_Date = *ZERO;

// DTL.PCS To Kill Date = CON.*ZERO
DTL.PCS_To_Kill_Date = *ZERO;

ENDIF;

//?Val:  Damage Contract
CASE;

// IF DTL.PCS Comp Selection Type is Daily Damage
IF DTL.PCS_Comp_Selection_Type = 'DD';

CASE;

// IF DTL.PCS Damage Contract is *BLANKS
IF DTL.PCS_Damage_Contract = *BLANK;

// Send error message - 'Contract Code required for Damage selection type.'
ERROR(PRK0776);
MSGPARM(DTL.PCS_Damage_Contract);

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

//?Val: Damage Contract Code with Producer Contract.
CASE;

// IF DTL.PCS Damage Contract is *BLANKS
IF DTL.PCS_Damage_Contract = *BLANK;

//?Val: Damage Contract Code with Producer Contract.
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Contract f/Val    RT) TYPE(RTVOBJ) FILE(PKAPCPP)           AB1199507;
PARAMETER(DTL.PCS_Damage_Contract);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Producer Contract not found.'
ERROR(PRK0035);

ENDIF;

ENDIF;

//?Default Market Date Method
CASE;

// IF DTL.PCS Comp Selection Type is Daily
IF DTL.PCS_Comp_Selection_Type = 'DC'/'DD';

// AND DTL.PCS Market Date Method EQ WRK.Blank USR
AND DTL.PCS_Market_Date_Method = WRK.Blank_USR;

// DTL.PCS Market Date Method = CON.CUR
DTL.PCS_Market_Date_Method = 'CUR';

ENDIF;

//?Apply Market +/- before or after CUTOUT Group adjustment
CASE;

// IF DTL.PCS Market Add/Deduct is Not Zeros
IF DTL.PCS_Market_Add_Deduct <> *ZERO;

CASE;

// IF DTL.PCS Mkt+/- B4/Aftr CUTOUT is *NONE
IF DTL.PCS_Mkt+_B4_Aftr_CUTOUT = *BLANK;

// Send error message - 'Apply Market +/- Before or After the CUTOUT Group adjustment required.'
ERROR(PRK1160);
MSGPARM(DTL.PCS_Mkt+_B4_Aftr_CUTOUT);

ENDIF;

ENDIF;

//?Val:  Price Option
CASE;

// IF DTL.PCS Pricing Option is Multi Market Price
IF DTL.PCS_Pricing_Option = 'MMP';

//?Flag as a error until enhancement to handle MMP is allowed
// Send error message - 'Price Option Not Allowed'
ERROR(PRK1248);

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(DTL.Producer_Name_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate detail screen relations

// DTL.Condition Name 1 USR = Condition name of DTL.PCS Comp Selection Type
DTL.Condition_Name_1_USR = RTVCND(DTL.PCS_Comp_Selection_Type);

//?Val:  Commodity Market
CASE;

// IF DTL.PCS Comm Market NE WRK.Blank USR
IF DTL.PCS_Comm_Market <> WRK.Blank_USR;

// Call program Val Commodity Market  XF.
CALL PROGRAM(Val Commodity Market  XF) ('PDG1XFR');
PARAMETER(DTL.PCS_Comm_Market);
PARAMETER(DTL.Market_Code_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

//?Commodity Market
CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Market &1 is invalid.'
ERROR(PRK0482);
MSGPARM(DTL.PCS_Comm_Market);

ENDIF;

ENDIF;

//?Val:  Commodity Price Group
CASE;

// IF DTL.PCS Comm Price Group NE WRK.Blank USR
IF DTL.PCS_Comm_Price_Group <> WRK.Blank_USR;

// Call program Val Commodity Group   XF.
CALL PROGRAM(Val Commodity Group   XF) ('PDG2XFR');
PARAMETER(DTL.PCS_Comm_Price_Group);
PARAMETER(DTL.Market_Group_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

//?Commodity Group
CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Group &1 is invalid.'
ERROR(PRK0483);
MSGPARM(DTL.PCS_Comm_Price_Group);

ENDIF;

ENDIF;

//?Val:  Market Date Method
CASE;

// IF DTL.PCS Market Date Method NE WRK.Blank USR
IF DTL.PCS_Market_Date_Method <> WRK.Blank_USR;

// Call program Val Market Date Method UP.
CALL PROGRAM(Val Market Date Method UP) ('PDZUXFR');
PARAMETER(PGM.*Return_code);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.PCS_Market_Date_Method);
PARAMETER(DTL.Market_Date_Method_Desc);
PARAMETER('H');

ENDIF;

//?Val:  Pricing Option
CASE;

// IF DTL.PCS Pricing Option NE WRK.Blank USR
IF DTL.PCS_Pricing_Option <> WRK.Blank_USR;

EXECUTE FUNCTION(Val Pricing Option) TYPE(RTVOBJ) FILE(PKAKREP)                 AB1202034;
PARAMETER(DTL.PCS_Pricing_Option);
PARAMETER(DTL.PO_Description);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Pricing Option
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Pricing Option not found.'
ERROR(PRK0025);

ENDIF;

ENDIF;

//?Val:  Carcass Merit Program
CASE;

// IF DTL.PCS Carcass Merit Pgm NE WRK.Blank USR
IF DTL.PCS_Carcass_Merit_Pgm <> WRK.Blank_USR;

EXECUTE FUNCTION(Val Carc Merit Pgm    RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1202035;
PARAMETER(DTL.PCS_Carcass_Merit_Pgm);
PARAMETER(DTL.CMP_Description);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Carcass Merit Program
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'Carcass Merit Program not found.'
ERROR(PRK0039);

ENDIF;

ENDIF;

// DTL.Condition Name 2 USR = Condition name of DTL.PCS Payment Type
DTL.Condition_Name_2_USR = RTVCND(DTL.PCS_Payment_Type);

// DTL.Condition Name 3 USR = Condition name of DTL.PCS Live As Carc Sts
DTL.Condition_Name_3_USR = RTVCND(DTL.PCS_Live_As_Carc_Sts);

// DTL.Condition Name 4 USR = Condition name of DTL.PCS Replacement Cost Sts
DTL.Condition_Name_4_USR = RTVCND(DTL.PCS_Replacement_Cost_Sts);

// DTL.Condition Name USR = Condition name of DTL.PCS Comp Process Sts
DTL.Condition_Name_USR = RTVCND(DTL.PCS_Comp_Process_Sts);

// DTL.Condition Name 5 USR = Condition name of DTL.PCS Mkt +/- B4/Aftr Base
DTL.Condition_Name_5_USR = RTVCND(DTL.PCS_Mkt+_B4_Aftr_CUTOUT);

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Prd Comp Sel      CR) TYPE(CRTOBJ) FILE(PKD5CPP)           AB1202005;
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Prd Comp Sel      CH) TYPE(CHGOBJ) FILE(PKD5CPP)           AB1202006;

