// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUTAXFR
// ?Date: 14.08.2025 Time: 03:51:18
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Exc Bld WF A/R Header RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2197577;
PARAMETER(PAR.Company_Number_CDE);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Type Code is Inter Company
 IF DB1.Type_Code = 'IC';

 // OR DB1.Type Code is Inter-Comp Sales Agreemnt
 OR DB1.Type_Code = 'IS';

 EXECUTE FUNCTION(Exc Bld WF A/R Header RT) TYPE(RTVOBJ) FILE(ARBDCPP)           AC2197574;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Type_Code);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Initialize routine

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  // LCL.Record Processed Usr = CND.No
  LCL.Record_Processed_Usr = 'N';

  //?USER: Process Data record

  //?First Time Processing.
  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // AND DB1.Remaining Balance Due is not equal to zeros
  AND DB1.Remaining_Balance_Due <> *ZERO;

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  // LCL.Record Processed Usr = CND.Yes
  LCL.Record_Processed_Usr = 'Y';

  // LCL.A/R Customer Number = DB1.A/R Customer Number
  LCL.AR_Customer_Number = DB1.AR_Customer_Number;

  EXECUTE FUNCTION(RTV Default Aging Code RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1801040;
  PARAMETER(LCL.A_R_Aging_Code);
  PARAMETER(NLL.A_R_Aging_Days_1);
  PARAMETER(NLL.A_R_Aging_Days_2);
  PARAMETER(NLL.A_R_Aging_Days_3);
  PARAMETER(NLL.A_R_Aging_Days_4);
  PARAMETER(NLL.Age_by_Trans_or_Due_Date);
  PARAMETER(NLL.Default_Y_N);
  PARAMETER(NLL.Record_Status);
  {
   //?USER: Initialize routine

   // PAR.A/R Aging Code = CND.Not Entered
   PAR.A_R_Aging_Code = *BLANK;

   //?USER: Process Data record

   // PAR.A/R Aging Code = DB1.A/R Aging Code
   PAR.A_R_Aging_Code = DB1.A_R_Aging_Code;

   CASE;

   // IF DB1.Default Y/N is yes
   IF DB1.Default_Y_N = 'Y';

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  ENDIF;

  //?Break By A/R Customer Number
  CASE;

  // IF DB1.Remaining Balance Due is not equal to zeros
  IF DB1.Remaining_Balance_Due <> *ZERO;

  CASE;

  // IF DB1.A/R Customer Number EQ LCL.A/R Customer Number
  IF DB1.AR_Customer_Number = LCL.AR_Customer_Number;

  //?SUM Total Balance Due for All Account Types: OA, IN, CM, DM, RB, etc.
  CASE;

  // IF DB1.Invoice Suffix is CM or OA
  IF DB1.Invoice_Suffix = 'CM'/'OA';

  // PAR.Remaining Balance Due = PAR.Remaining Balance Due - DB1.Remaining Balance Due
  PAR.Remaining_Balance_Due = PAR.Remaining_Balance_Due - DB1.Remaining_Balance_Due;

  //?SUM Total Balance Due for All Account Types: OA, IN, CM, DM, RB, etc.
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(CLC Age Cust Inv.      IF) TYPE(EXCINTFUN)                     AC1640420;
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(PAR.Age_Due_Current_CB);
  PARAMETER(PAR.Age_Due_Aging_1_CB);
  PARAMETER(PAR.Age_Due_Aging_2_CB);
  PARAMETER(PAR.Age_Due_Aging_3_CB);
  PARAMETER(PAR.Age_Due_Aging_4_CB);
  PARAMETER(PAR.Age_Due_Aging_5_CB);
  PARAMETER(NLL.Age_Due_Current_W_O_CB);
  PARAMETER(NLL.Age_Due_Aging_1_W_O_CB);
  PARAMETER(NLL.Age_Due_Aging_2_W_O_CB);
  PARAMETER(NLL.Age_Due_Aging_3_W_O_CB);
  PARAMETER(NLL.Age_Due_Aging_4_W_O_CB);
  PARAMETER(NLL.Age_Due_Aging_5_W_O_CB);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Remaining_Balance_Due);
  PARAMETER(DB1.Due_Date);
  PARAMETER(LCL.A_R_Aging_Code);
  {
   //?Execute internal function

   //?Initialize Neither Parameters.
   DO;

   // PAR.USR Age Current = CND.equal to zero
   PAR.USR_Age_Current = *ZERO;

   // PAR.USR Age Value 1 = CND.equal to zero
   PAR.USR_Age_Value_1 = *ZERO;

   // PAR.USR Age Value 2 = CND.equal to zero
   PAR.USR_Age_Value_2 = *ZERO;

   // PAR.USR Age Value 3 = CND.equal to zero
   PAR.USR_Age_Value_3 = *ZERO;

   // PAR.USR Age Value 4 = CND.equal to zero
   PAR.USR_Age_Value_4 = *ZERO;

   // PAR.USR Age Value 5 = CND.equal to zero
   PAR.USR_Age_Value_5 = *ZERO;

   // PAR.USR Age Current A = CND.equal to zero
   PAR.USR_Age_Current_A = *ZERO;

   // PAR.USR Age Value 1 A = CND.equal to zero
   PAR.USR_Age_Value_1_A = *ZERO;

   // PAR.USR Age Value 2 A = CND.equal to zero
   PAR.USR_Age_Value_2_A = *ZERO;

   // PAR.USR Age Value 3 A = CND.equal to zero
   PAR.USR_Age_Value_3_A = *ZERO;

   // PAR.USR Age Value 4 A = CND.equal to zero
   PAR.USR_Age_Value_4_A = *ZERO;

   // PAR.USR Age Value 5 A = CND.equal to zero
   PAR.USR_Age_Value_5_A = *ZERO;

   // PAR.USR Age Current B = CND.equal to zero
   PAR.USR_Age_Current_B = *ZERO;

   // PAR.USR Age Value 1 B = CND.equal to zero
   PAR.USR_Age_Value_1_B = *ZERO;

   // PAR.USR Age Value 2 B = CND.equal to zero
   PAR.USR_Age_Value_2_B = *ZERO;

   // PAR.USR Age Value 3 B = CND.equal to zero
   PAR.USR_Age_Value_3_B = *ZERO;

   // PAR.USR Age Value 4 B = CND.equal to zero
   PAR.USR_Age_Value_4_B = *ZERO;

   // PAR.USR Age Value 5 B = CND.equal to zero
   PAR.USR_Age_Value_5_B = *ZERO;

   // PAR.USR Total Credit Amount = CND.Zero
   PAR.USR_Total_Credit_Amount = *ZERO;

   ENDDO;

   //?Retrieve Aging Ranges.
   DO;

   //?** A/R aging info is now in a file - retrieve from there  12/01/06 LJB
   EXECUTE FUNCTION(RTV A/R Aging Control  RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1800594;
   PARAMETER(PAR.A_R_Aging_Code);
   PARAMETER(PAR.A_R_Aging_Days_1);
   PARAMETER(PAR.A_R_Aging_Days_2);
   PARAMETER(PAR.A_R_Aging_Days_3);
   PARAMETER(PAR.A_R_Aging_Days_4);
   PARAMETER(WRK.Age_by_Trans_or_Due_Date);
   PARAMETER(WRK.Default_Y_N);
   PARAMETER(WRK.Record_Status);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDDO;

   CASE;

   // IF PAR.Remaining Balance Due is not equal to zeros
   IF PAR.Remaining_Balance_Due <> *ZERO;

   //?Sum A/R Cust Invoices with a Remaining Bal.(IN,DM)(CB)(CM,OA)
   DO;

   // PAR.Days Past Due  USR = JOB.*Job date - PAR.Due Date *DAYS
   PAR.Days_Past_Due_USR = DURATION(JOB.*Job_date PAR.Due_Date 'DY' 1111111 'NONE' 'N' 1);

   CASE;

   // IF PAR.Days Past Due  USR is <= Zero
   IF PAR.Days_Past_Due_USR <= *ZERO;

   //?Current.
   DO;

   EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
   PARAMETER(PAR.Invoice_Suffix);
   PARAMETER(PAR.Remaining_Balance_Due);
   PARAMETER(PAR.USR_Age_Current);
   PARAMETER(PAR.USR_Age_Current_A);
   PARAMETER(PAR.USR_Age_Current_B);
   PARAMETER(PAR.USR_Total_Credit_Amount);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Invoice Suffix is Charge Backs and Rebills
    IF PAR.Invoice_Suffix = 'CB'/'RB';

    //?Age Chargebacks and Rebills.
    DO;

    // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
    PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Invoices
    IF PAR.Invoice_Suffix = 'IN';

    // OR PAR.Invoice Suffix is Debit Memos
    OR PAR.Invoice_Suffix = 'DM';

    //?Age Invoices and Debit Memos.
    DO;

    // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
    PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Credit Memos
    IF PAR.Invoice_Suffix = 'CM';

    // OR PAR.Invoice Suffix is On Account Cash
    OR PAR.Invoice_Suffix = 'OA';

    //?Accumulate Credit to Apply.
    DO;

    // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
    PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    ENDIF;

   }

   ENDDO;

   // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 1
   IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_1;

   //?Past Due Period 1.
   DO;

   EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
   PARAMETER(PAR.Invoice_Suffix);
   PARAMETER(PAR.Remaining_Balance_Due);
   PARAMETER(PAR.USR_Age_Value_1);
   PARAMETER(PAR.USR_Age_Value_1_A);
   PARAMETER(PAR.USR_Age_Value_1_B);
   PARAMETER(PAR.USR_Total_Credit_Amount);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Invoice Suffix is Charge Backs and Rebills
    IF PAR.Invoice_Suffix = 'CB'/'RB';

    //?Age Chargebacks and Rebills.
    DO;

    // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
    PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Invoices
    IF PAR.Invoice_Suffix = 'IN';

    // OR PAR.Invoice Suffix is Debit Memos
    OR PAR.Invoice_Suffix = 'DM';

    //?Age Invoices and Debit Memos.
    DO;

    // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
    PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Credit Memos
    IF PAR.Invoice_Suffix = 'CM';

    // OR PAR.Invoice Suffix is On Account Cash
    OR PAR.Invoice_Suffix = 'OA';

    //?Accumulate Credit to Apply.
    DO;

    // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
    PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    ENDIF;

   }

   ENDDO;

   // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 2
   IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_2;

   //?Past Due Period 2.
   DO;

   EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
   PARAMETER(PAR.Invoice_Suffix);
   PARAMETER(PAR.Remaining_Balance_Due);
   PARAMETER(PAR.USR_Age_Value_2);
   PARAMETER(PAR.USR_Age_Value_2_A);
   PARAMETER(PAR.USR_Age_Value_2_B);
   PARAMETER(PAR.USR_Total_Credit_Amount);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Invoice Suffix is Charge Backs and Rebills
    IF PAR.Invoice_Suffix = 'CB'/'RB';

    //?Age Chargebacks and Rebills.
    DO;

    // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
    PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Invoices
    IF PAR.Invoice_Suffix = 'IN';

    // OR PAR.Invoice Suffix is Debit Memos
    OR PAR.Invoice_Suffix = 'DM';

    //?Age Invoices and Debit Memos.
    DO;

    // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
    PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Credit Memos
    IF PAR.Invoice_Suffix = 'CM';

    // OR PAR.Invoice Suffix is On Account Cash
    OR PAR.Invoice_Suffix = 'OA';

    //?Accumulate Credit to Apply.
    DO;

    // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
    PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    ENDIF;

   }

   ENDDO;

   // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 3
   IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_3;

   //?Past Due Period 3.
   DO;

   EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
   PARAMETER(PAR.Invoice_Suffix);
   PARAMETER(PAR.Remaining_Balance_Due);
   PARAMETER(PAR.USR_Age_Value_3);
   PARAMETER(PAR.USR_Age_Value_3_A);
   PARAMETER(PAR.USR_Age_Value_3_B);
   PARAMETER(PAR.USR_Total_Credit_Amount);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Invoice Suffix is Charge Backs and Rebills
    IF PAR.Invoice_Suffix = 'CB'/'RB';

    //?Age Chargebacks and Rebills.
    DO;

    // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
    PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Invoices
    IF PAR.Invoice_Suffix = 'IN';

    // OR PAR.Invoice Suffix is Debit Memos
    OR PAR.Invoice_Suffix = 'DM';

    //?Age Invoices and Debit Memos.
    DO;

    // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
    PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Credit Memos
    IF PAR.Invoice_Suffix = 'CM';

    // OR PAR.Invoice Suffix is On Account Cash
    OR PAR.Invoice_Suffix = 'OA';

    //?Accumulate Credit to Apply.
    DO;

    // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
    PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    ENDIF;

   }

   ENDDO;

   // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 4
   IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_4;

   //?Past Due Period 4.
   DO;

   EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
   PARAMETER(PAR.Invoice_Suffix);
   PARAMETER(PAR.Remaining_Balance_Due);
   PARAMETER(PAR.USR_Age_Value_4);
   PARAMETER(PAR.USR_Age_Value_4_A);
   PARAMETER(PAR.USR_Age_Value_4_B);
   PARAMETER(PAR.USR_Total_Credit_Amount);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Invoice Suffix is Charge Backs and Rebills
    IF PAR.Invoice_Suffix = 'CB'/'RB';

    //?Age Chargebacks and Rebills.
    DO;

    // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
    PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Invoices
    IF PAR.Invoice_Suffix = 'IN';

    // OR PAR.Invoice Suffix is Debit Memos
    OR PAR.Invoice_Suffix = 'DM';

    //?Age Invoices and Debit Memos.
    DO;

    // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
    PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Credit Memos
    IF PAR.Invoice_Suffix = 'CM';

    // OR PAR.Invoice Suffix is On Account Cash
    OR PAR.Invoice_Suffix = 'OA';

    //?Accumulate Credit to Apply.
    DO;

    // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
    PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    ENDIF;

   }

   ENDDO;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Past Due Period 5.
   DO;

   EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
   PARAMETER(PAR.Invoice_Suffix);
   PARAMETER(PAR.Remaining_Balance_Due);
   PARAMETER(PAR.USR_Age_Value_5);
   PARAMETER(PAR.USR_Age_Value_5_A);
   PARAMETER(PAR.USR_Age_Value_5_B);
   PARAMETER(PAR.USR_Total_Credit_Amount);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Invoice Suffix is Charge Backs and Rebills
    IF PAR.Invoice_Suffix = 'CB'/'RB';

    //?Age Chargebacks and Rebills.
    DO;

    // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
    PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Invoices
    IF PAR.Invoice_Suffix = 'IN';

    // OR PAR.Invoice Suffix is Debit Memos
    OR PAR.Invoice_Suffix = 'DM';

    //?Age Invoices and Debit Memos.
    DO;

    // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
    PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Credit Memos
    IF PAR.Invoice_Suffix = 'CM';

    // OR PAR.Invoice Suffix is On Account Cash
    OR PAR.Invoice_Suffix = 'OA';

    //?Accumulate Credit to Apply.
    DO;

    // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
    PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    ENDIF;

   }

   ENDDO;

   ENDIF;

   ENDDO;

   ENDIF;

   //?Load Output Parameters.
   DO;

   // PAR.Age $ Due - Current - CB = PAR.USR Age Current B
   PAR.Age_Due_Current_CB = PAR.USR_Age_Current_B;

   // PAR.Age $ Due - Aging 1 - CB = PAR.USR Age Value 1 B
   PAR.Age_Due_Aging_1_CB = PAR.USR_Age_Value_1_B;

   // PAR.Age $ Due - Aging 2 - CB = PAR.USR Age Value 2 B
   PAR.Age_Due_Aging_2_CB = PAR.USR_Age_Value_2_B;

   // PAR.Age $ Due - Aging 3 - CB = PAR.USR Age Value 3 B
   PAR.Age_Due_Aging_3_CB = PAR.USR_Age_Value_3_B;

   // PAR.Age $ Due - Aging 4 - CB = PAR.USR Age Value 4 B
   PAR.Age_Due_Aging_4_CB = PAR.USR_Age_Value_4_B;

   // PAR.Age $ Due - Aging 5 - CB = PAR.USR Age Value 5 B
   PAR.Age_Due_Aging_5_CB = PAR.USR_Age_Value_5_B;

   // PAR.Age $ Due-Current-W/O CB = PAR.USR Age Current
   PAR.Age_Due_Current_W_O_CB = PAR.USR_Age_Current;

   // PAR.Age $ Due-Aging 1-W/O CB = PAR.USR Age Value 1
   PAR.Age_Due_Aging_1_W_O_CB = PAR.USR_Age_Value_1;

   // PAR.Age $ Due-Aging 2-W/O CB = PAR.USR Age Value 2
   PAR.Age_Due_Aging_2_W_O_CB = PAR.USR_Age_Value_2;

   // PAR.Age $ Due-Aging 3-W/O CB = PAR.USR Age Value 3
   PAR.Age_Due_Aging_3_W_O_CB = PAR.USR_Age_Value_3;

   // PAR.Age $ Due-Aging 4-W/O CB = PAR.USR Age Value 4
   PAR.Age_Due_Aging_4_W_O_CB = PAR.USR_Age_Value_4;

   // PAR.Age $ Due-Aging 5-W/O CB = PAR.USR Age Value 5
   PAR.Age_Due_Aging_5_W_O_CB = PAR.USR_Age_Value_5;

   ENDDO;

   //?***** Change Log and Comments
   //?** 12/01/2006 LJB PK0039
   //?** A/R aging info is now in a file - retrieve from there
   //?*****
  }

  // SUM Total Balance Due
  PAR.Remaining_Balance_Due = ( ( ( ( ( PAR.Remaining_Balance_Due + PAR.Age_Due_Current_CB )
  + PAR.Age_Due_Aging_1_CB ) + PAR.Age_Due_Aging_2_CB ) + PAR.Age_Due_Aging_3_CB )
  + PAR.Age_Due_Aging_4_CB ) + PAR.Age_Due_Aging_5_CB;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Create WF A/R Header Record.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Crt WF A/R Header     CR) TYPE(CRTOBJ) FILE(PUB5CPP)           AC2197578;
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(PAR.Type_Code);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Remaining_Balance_Due);
  ENDIF;

  //?Reinitialize for next A/R Customer Number.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?NOTE: Any changes in here, must change in 'Exit Processing' also.
  // LCL.A/R Customer Number = DB1.A/R Customer Number
  LCL.AR_Customer_Number = DB1.AR_Customer_Number;

  EXECUTE FUNCTION(RTV Default Aging Code RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1801040;
  PARAMETER(LCL.A_R_Aging_Code);
  PARAMETER(NLL.A_R_Aging_Days_1);
  PARAMETER(NLL.A_R_Aging_Days_2);
  PARAMETER(NLL.A_R_Aging_Days_3);
  PARAMETER(NLL.A_R_Aging_Days_4);
  PARAMETER(NLL.Age_by_Trans_or_Due_Date);
  PARAMETER(NLL.Default_Y_N);
  PARAMETER(NLL.Record_Status);
  {
   //?USER: Initialize routine

   // PAR.A/R Aging Code = CND.Not Entered
   PAR.A_R_Aging_Code = *BLANK;

   //?USER: Process Data record

   // PAR.A/R Aging Code = DB1.A/R Aging Code
   PAR.A_R_Aging_Code = DB1.A_R_Aging_Code;

   CASE;

   // IF DB1.Default Y/N is yes
   IF DB1.Default_Y_N = 'Y';

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  //?Reset All Amount Accumulators.
  // PAR.Remaining Balance Due = CON.*ZERO
  PAR.Remaining_Balance_Due = *ZERO;

  // PAR.Age $ Due - Current - CB = CON.*ZERO
  PAR.Age_Due_Current_CB = *ZERO;

  // PAR.Age $ Due - Aging 1 - CB = CON.*ZERO
  PAR.Age_Due_Aging_1_CB = *ZERO;

  // PAR.Age $ Due - Aging 2 - CB = CON.*ZERO
  PAR.Age_Due_Aging_2_CB = *ZERO;

  // PAR.Age $ Due - Aging 3 - CB = CON.*ZERO
  PAR.Age_Due_Aging_3_CB = *ZERO;

  // PAR.Age $ Due - Aging 4 - CB = CON.*ZERO
  PAR.Age_Due_Aging_4_CB = *ZERO;

  // PAR.Age $ Due - Aging 5 - CB = CON.*ZERO
  PAR.Age_Due_Aging_5_CB = *ZERO;

  ENDIF;

  //?SUM Total Balance Due for All Account Types: OA, IN, CM, DM, RB, etc.
  CASE;

  // IF DB1.Invoice Suffix is CM or OA
  IF DB1.Invoice_Suffix = 'CM'/'OA';

  // PAR.Remaining Balance Due = PAR.Remaining Balance Due - DB1.Remaining Balance Due
  PAR.Remaining_Balance_Due = PAR.Remaining_Balance_Due - DB1.Remaining_Balance_Due;

  //?SUM Total Balance Due for All Account Types: OA, IN, CM, DM, RB, etc.
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(CLC Age Cust Inv.      IF) TYPE(EXCINTFUN)                     AC1640420;
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(PAR.Age_Due_Current_CB);
  PARAMETER(PAR.Age_Due_Aging_1_CB);
  PARAMETER(PAR.Age_Due_Aging_2_CB);
  PARAMETER(PAR.Age_Due_Aging_3_CB);
  PARAMETER(PAR.Age_Due_Aging_4_CB);
  PARAMETER(PAR.Age_Due_Aging_5_CB);
  PARAMETER(NLL.Age_Due_Current_W_O_CB);
  PARAMETER(NLL.Age_Due_Aging_1_W_O_CB);
  PARAMETER(NLL.Age_Due_Aging_2_W_O_CB);
  PARAMETER(NLL.Age_Due_Aging_3_W_O_CB);
  PARAMETER(NLL.Age_Due_Aging_4_W_O_CB);
  PARAMETER(NLL.Age_Due_Aging_5_W_O_CB);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Remaining_Balance_Due);
  PARAMETER(DB1.Due_Date);
  PARAMETER(LCL.A_R_Aging_Code);
  {
   //?Execute internal function

   //?Initialize Neither Parameters.
   DO;

   // PAR.USR Age Current = CND.equal to zero
   PAR.USR_Age_Current = *ZERO;

   // PAR.USR Age Value 1 = CND.equal to zero
   PAR.USR_Age_Value_1 = *ZERO;

   // PAR.USR Age Value 2 = CND.equal to zero
   PAR.USR_Age_Value_2 = *ZERO;

   // PAR.USR Age Value 3 = CND.equal to zero
   PAR.USR_Age_Value_3 = *ZERO;

   // PAR.USR Age Value 4 = CND.equal to zero
   PAR.USR_Age_Value_4 = *ZERO;

   // PAR.USR Age Value 5 = CND.equal to zero
   PAR.USR_Age_Value_5 = *ZERO;

   // PAR.USR Age Current A = CND.equal to zero
   PAR.USR_Age_Current_A = *ZERO;

   // PAR.USR Age Value 1 A = CND.equal to zero
   PAR.USR_Age_Value_1_A = *ZERO;

   // PAR.USR Age Value 2 A = CND.equal to zero
   PAR.USR_Age_Value_2_A = *ZERO;

   // PAR.USR Age Value 3 A = CND.equal to zero
   PAR.USR_Age_Value_3_A = *ZERO;

   // PAR.USR Age Value 4 A = CND.equal to zero
   PAR.USR_Age_Value_4_A = *ZERO;

   // PAR.USR Age Value 5 A = CND.equal to zero
   PAR.USR_Age_Value_5_A = *ZERO;

   // PAR.USR Age Current B = CND.equal to zero
   PAR.USR_Age_Current_B = *ZERO;

   // PAR.USR Age Value 1 B = CND.equal to zero
   PAR.USR_Age_Value_1_B = *ZERO;

   // PAR.USR Age Value 2 B = CND.equal to zero
   PAR.USR_Age_Value_2_B = *ZERO;

   // PAR.USR Age Value 3 B = CND.equal to zero
   PAR.USR_Age_Value_3_B = *ZERO;

   // PAR.USR Age Value 4 B = CND.equal to zero
   PAR.USR_Age_Value_4_B = *ZERO;

   // PAR.USR Age Value 5 B = CND.equal to zero
   PAR.USR_Age_Value_5_B = *ZERO;

   // PAR.USR Total Credit Amount = CND.Zero
   PAR.USR_Total_Credit_Amount = *ZERO;

   ENDDO;

   //?Retrieve Aging Ranges.
   DO;

   //?** A/R aging info is now in a file - retrieve from there  12/01/06 LJB
   EXECUTE FUNCTION(RTV A/R Aging Control  RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1800594;
   PARAMETER(PAR.A_R_Aging_Code);
   PARAMETER(PAR.A_R_Aging_Days_1);
   PARAMETER(PAR.A_R_Aging_Days_2);
   PARAMETER(PAR.A_R_Aging_Days_3);
   PARAMETER(PAR.A_R_Aging_Days_4);
   PARAMETER(WRK.Age_by_Trans_or_Due_Date);
   PARAMETER(WRK.Default_Y_N);
   PARAMETER(WRK.Record_Status);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDDO;

   CASE;

   // IF PAR.Remaining Balance Due is not equal to zeros
   IF PAR.Remaining_Balance_Due <> *ZERO;

   //?Sum A/R Cust Invoices with a Remaining Bal.(IN,DM)(CB)(CM,OA)
   DO;

   // PAR.Days Past Due  USR = JOB.*Job date - PAR.Due Date *DAYS
   PAR.Days_Past_Due_USR = DURATION(JOB.*Job_date PAR.Due_Date 'DY' 1111111 'NONE' 'N' 1);

   CASE;

   // IF PAR.Days Past Due  USR is <= Zero
   IF PAR.Days_Past_Due_USR <= *ZERO;

   //?Current.
   DO;

   EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
   PARAMETER(PAR.Invoice_Suffix);
   PARAMETER(PAR.Remaining_Balance_Due);
   PARAMETER(PAR.USR_Age_Current);
   PARAMETER(PAR.USR_Age_Current_A);
   PARAMETER(PAR.USR_Age_Current_B);
   PARAMETER(PAR.USR_Total_Credit_Amount);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Invoice Suffix is Charge Backs and Rebills
    IF PAR.Invoice_Suffix = 'CB'/'RB';

    //?Age Chargebacks and Rebills.
    DO;

    // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
    PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Invoices
    IF PAR.Invoice_Suffix = 'IN';

    // OR PAR.Invoice Suffix is Debit Memos
    OR PAR.Invoice_Suffix = 'DM';

    //?Age Invoices and Debit Memos.
    DO;

    // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
    PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Credit Memos
    IF PAR.Invoice_Suffix = 'CM';

    // OR PAR.Invoice Suffix is On Account Cash
    OR PAR.Invoice_Suffix = 'OA';

    //?Accumulate Credit to Apply.
    DO;

    // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
    PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    ENDIF;

   }

   ENDDO;

   // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 1
   IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_1;

   //?Past Due Period 1.
   DO;

   EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
   PARAMETER(PAR.Invoice_Suffix);
   PARAMETER(PAR.Remaining_Balance_Due);
   PARAMETER(PAR.USR_Age_Value_1);
   PARAMETER(PAR.USR_Age_Value_1_A);
   PARAMETER(PAR.USR_Age_Value_1_B);
   PARAMETER(PAR.USR_Total_Credit_Amount);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Invoice Suffix is Charge Backs and Rebills
    IF PAR.Invoice_Suffix = 'CB'/'RB';

    //?Age Chargebacks and Rebills.
    DO;

    // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
    PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Invoices
    IF PAR.Invoice_Suffix = 'IN';

    // OR PAR.Invoice Suffix is Debit Memos
    OR PAR.Invoice_Suffix = 'DM';

    //?Age Invoices and Debit Memos.
    DO;

    // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
    PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Credit Memos
    IF PAR.Invoice_Suffix = 'CM';

    // OR PAR.Invoice Suffix is On Account Cash
    OR PAR.Invoice_Suffix = 'OA';

    //?Accumulate Credit to Apply.
    DO;

    // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
    PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    ENDIF;

   }

   ENDDO;

   // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 2
   IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_2;

   //?Past Due Period 2.
   DO;

   EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
   PARAMETER(PAR.Invoice_Suffix);
   PARAMETER(PAR.Remaining_Balance_Due);
   PARAMETER(PAR.USR_Age_Value_2);
   PARAMETER(PAR.USR_Age_Value_2_A);
   PARAMETER(PAR.USR_Age_Value_2_B);
   PARAMETER(PAR.USR_Total_Credit_Amount);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Invoice Suffix is Charge Backs and Rebills
    IF PAR.Invoice_Suffix = 'CB'/'RB';

    //?Age Chargebacks and Rebills.
    DO;

    // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
    PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Invoices
    IF PAR.Invoice_Suffix = 'IN';

    // OR PAR.Invoice Suffix is Debit Memos
    OR PAR.Invoice_Suffix = 'DM';

    //?Age Invoices and Debit Memos.
    DO;

    // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
    PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Credit Memos
    IF PAR.Invoice_Suffix = 'CM';

    // OR PAR.Invoice Suffix is On Account Cash
    OR PAR.Invoice_Suffix = 'OA';

    //?Accumulate Credit to Apply.
    DO;

    // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
    PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    ENDIF;

   }

   ENDDO;

   // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 3
   IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_3;

   //?Past Due Period 3.
   DO;

   EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
   PARAMETER(PAR.Invoice_Suffix);
   PARAMETER(PAR.Remaining_Balance_Due);
   PARAMETER(PAR.USR_Age_Value_3);
   PARAMETER(PAR.USR_Age_Value_3_A);
   PARAMETER(PAR.USR_Age_Value_3_B);
   PARAMETER(PAR.USR_Total_Credit_Amount);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Invoice Suffix is Charge Backs and Rebills
    IF PAR.Invoice_Suffix = 'CB'/'RB';

    //?Age Chargebacks and Rebills.
    DO;

    // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
    PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Invoices
    IF PAR.Invoice_Suffix = 'IN';

    // OR PAR.Invoice Suffix is Debit Memos
    OR PAR.Invoice_Suffix = 'DM';

    //?Age Invoices and Debit Memos.
    DO;

    // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
    PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Credit Memos
    IF PAR.Invoice_Suffix = 'CM';

    // OR PAR.Invoice Suffix is On Account Cash
    OR PAR.Invoice_Suffix = 'OA';

    //?Accumulate Credit to Apply.
    DO;

    // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
    PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    ENDIF;

   }

   ENDDO;

   // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 4
   IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_4;

   //?Past Due Period 4.
   DO;

   EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
   PARAMETER(PAR.Invoice_Suffix);
   PARAMETER(PAR.Remaining_Balance_Due);
   PARAMETER(PAR.USR_Age_Value_4);
   PARAMETER(PAR.USR_Age_Value_4_A);
   PARAMETER(PAR.USR_Age_Value_4_B);
   PARAMETER(PAR.USR_Total_Credit_Amount);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Invoice Suffix is Charge Backs and Rebills
    IF PAR.Invoice_Suffix = 'CB'/'RB';

    //?Age Chargebacks and Rebills.
    DO;

    // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
    PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Invoices
    IF PAR.Invoice_Suffix = 'IN';

    // OR PAR.Invoice Suffix is Debit Memos
    OR PAR.Invoice_Suffix = 'DM';

    //?Age Invoices and Debit Memos.
    DO;

    // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
    PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Credit Memos
    IF PAR.Invoice_Suffix = 'CM';

    // OR PAR.Invoice Suffix is On Account Cash
    OR PAR.Invoice_Suffix = 'OA';

    //?Accumulate Credit to Apply.
    DO;

    // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
    PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    ENDIF;

   }

   ENDDO;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Past Due Period 5.
   DO;

   EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
   PARAMETER(PAR.Invoice_Suffix);
   PARAMETER(PAR.Remaining_Balance_Due);
   PARAMETER(PAR.USR_Age_Value_5);
   PARAMETER(PAR.USR_Age_Value_5_A);
   PARAMETER(PAR.USR_Age_Value_5_B);
   PARAMETER(PAR.USR_Total_Credit_Amount);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Invoice Suffix is Charge Backs and Rebills
    IF PAR.Invoice_Suffix = 'CB'/'RB';

    //?Age Chargebacks and Rebills.
    DO;

    // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
    PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Invoices
    IF PAR.Invoice_Suffix = 'IN';

    // OR PAR.Invoice Suffix is Debit Memos
    OR PAR.Invoice_Suffix = 'DM';

    //?Age Invoices and Debit Memos.
    DO;

    // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
    PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

    // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
    PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    // IF PAR.Invoice Suffix is Credit Memos
    IF PAR.Invoice_Suffix = 'CM';

    // OR PAR.Invoice Suffix is On Account Cash
    OR PAR.Invoice_Suffix = 'OA';

    //?Accumulate Credit to Apply.
    DO;

    // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
    PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

    ENDDO;

    ENDIF;

   }

   ENDDO;

   ENDIF;

   ENDDO;

   ENDIF;

   //?Load Output Parameters.
   DO;

   // PAR.Age $ Due - Current - CB = PAR.USR Age Current B
   PAR.Age_Due_Current_CB = PAR.USR_Age_Current_B;

   // PAR.Age $ Due - Aging 1 - CB = PAR.USR Age Value 1 B
   PAR.Age_Due_Aging_1_CB = PAR.USR_Age_Value_1_B;

   // PAR.Age $ Due - Aging 2 - CB = PAR.USR Age Value 2 B
   PAR.Age_Due_Aging_2_CB = PAR.USR_Age_Value_2_B;

   // PAR.Age $ Due - Aging 3 - CB = PAR.USR Age Value 3 B
   PAR.Age_Due_Aging_3_CB = PAR.USR_Age_Value_3_B;

   // PAR.Age $ Due - Aging 4 - CB = PAR.USR Age Value 4 B
   PAR.Age_Due_Aging_4_CB = PAR.USR_Age_Value_4_B;

   // PAR.Age $ Due - Aging 5 - CB = PAR.USR Age Value 5 B
   PAR.Age_Due_Aging_5_CB = PAR.USR_Age_Value_5_B;

   // PAR.Age $ Due-Current-W/O CB = PAR.USR Age Current
   PAR.Age_Due_Current_W_O_CB = PAR.USR_Age_Current;

   // PAR.Age $ Due-Aging 1-W/O CB = PAR.USR Age Value 1
   PAR.Age_Due_Aging_1_W_O_CB = PAR.USR_Age_Value_1;

   // PAR.Age $ Due-Aging 2-W/O CB = PAR.USR Age Value 2
   PAR.Age_Due_Aging_2_W_O_CB = PAR.USR_Age_Value_2;

   // PAR.Age $ Due-Aging 3-W/O CB = PAR.USR Age Value 3
   PAR.Age_Due_Aging_3_W_O_CB = PAR.USR_Age_Value_3;

   // PAR.Age $ Due-Aging 4-W/O CB = PAR.USR Age Value 4
   PAR.Age_Due_Aging_4_W_O_CB = PAR.USR_Age_Value_4;

   // PAR.Age $ Due-Aging 5-W/O CB = PAR.USR Age Value 5
   PAR.Age_Due_Aging_5_W_O_CB = PAR.USR_Age_Value_5;

   ENDDO;

   //?***** Change Log and Comments
   //?** 12/01/2006 LJB PK0039
   //?** A/R aging info is now in a file - retrieve from there
   //?*****
  }

  // SUM Total Balance Due
  PAR.Remaining_Balance_Due = ( ( ( ( ( PAR.Remaining_Balance_Due + PAR.Age_Due_Current_CB )
  + PAR.Age_Due_Aging_1_CB ) + PAR.Age_Due_Aging_2_CB ) + PAR.Age_Due_Aging_3_CB )
  + PAR.Age_Due_Aging_4_CB ) + PAR.Age_Due_Aging_5_CB;

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?Last Record Processing
  CASE;

  // IF LCL.Record Processed Usr is Yes
  IF LCL.Record_Processed_Usr = 'Y';

  //?Create WF A/R Header Record.
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Crt WF A/R Header     CR) TYPE(CRTOBJ) FILE(PUB5CPP)           AC2197578;
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(PAR.Type_Code);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Remaining_Balance_Due);
  ENDIF;

  ENDIF;

 }

 ENDIF;

}


