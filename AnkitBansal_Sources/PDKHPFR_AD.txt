// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDKHPFR
// ?Date: 14.08.2025 Time: 12:04:00
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('P/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

//?Validate Company match
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

CASE;

// IF PAR.Company Number NE DB1.Company Number
IF PAR.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Validate Item match
CASE;

// IF PAR.Item Code is Entered
IF PAR.Item_Code <> *ZERO;

CASE;

// IF PAR.Item Code NE DB1.Item Code
IF PAR.Item_Code <> DB1.Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Item Code = PAR.Item Code
X1PG_Item_Code = PAR.Item_Code;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Item_Code);
PARAMETER(X1PG_Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Company Number - 3 header format
PRINT Company Number - 3 header format;

ENDIF;

CASE;

IF NEW Primal_Group_Code;
EXECUTE FUNCTION(Rtv Primal Grp Desc   RT) TYPE(RTVOBJ) FILE(PDLLREP)           AC1476186;
PARAMETER(CUR.Primal_Group_Code);
PARAMETER(CUR.Primal_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// Print Primal Group Code header format
PRINT Primal Group Code header format;

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unit  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1480428;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.Unit_Weight);
PARAMETER(CUR.Piece_Count_Item);
PARAMETER(WRK.Pieces_Per_Bag);
PARAMETER(WRK.Bags_Per_Unit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

// NXT.Percent of Carcass USR = NXT.Percent of Carcass USR + CUR.Percent of Carcass
NXT.Percent_of_Carcass_USR = NXT.Percent_of_Carcass_USR + CUR.Percent_of_Carcass;

// NXT.Percent of Pieces  USR = NXT.Percent of Pieces  USR + CUR.Percent of Pieces
NXT.Percent_of_Pieces_USR = NXT.Percent_of_Pieces_USR + CUR.Percent_of_Pieces;

//?USER: Print required level totals

// SUPPRESSED PRINT Item Code totals format

CASE;

IF NEW Primal_Group_Code;
// Print Primal Group Code totals format
PRINT Primal Group Code totals format;

// NXT.Percent of Carcass USR = NXT.Percent of Carcass USR + CUR.Percent of Carcass
NXT.Percent_of_Carcass_USR = NXT.Percent_of_Carcass_USR + CUR.Percent_of_Carcass_USR;

ENDIF;

CASE;

IF NEW Company_Number;
// Print Company Number - 3 totals format
PRINT Company Number - 3 totals format;

ENDIF;

