// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPBEPFR
// ?Date: 14.08.2025 Time: 12:06:27
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.Null Report = CND.Not Null
WRK.Null_Report = *BLANK;

//?RMC EXPCOM 10/21/04 removed co from key & print hdgs in TOP format
// WRK.Print (Yes/No) USR = CND.Yes
WRK.Print_Yes_No_USR = 'Y';

//?***** Change Log and Comments
//?** 05/04/2010 LJB C000733
//?** Chg to use LF by order/seq1,seq2 instead of ord/whs/itm
//?** to retrieve broker perf order info from Sales History
//?*****
//?** 10/19/2006 LJB OMS045D            Per Tim Wood
//?** Removed Commission Amount from the report
//?** Added Rate Type column. Added Print Yes/No Usr as an input
//?** parm (not the same function as the work field) to control
//?** the printing of the amounts on the report.
//?** Added Net Amount column. Calculate Net Amount:
//?**   Extended Amount minus TF Accruals minus Absorbed Freight Amt
//?** Added Net Amount/Loss total for Ship To and for Broker
//?** Removed test for Retro Comm Calculated - no longer needed.
//?** Also removed the text field from the report.
//?** Per Tim Wood on 11/02/2006 Don't display the Net Amount unless
//?**   there is a rate type.
//?*****
//?** RMC 03/01/07  Dont use company when going to Sales Hist.it may be diff
//?  use new lf omhstpbo
//?** RMC 05/23/07  DLY029 - Db Changes
//?*****
//?** 06/28/2007 LJB DLY029
//?** Changed index - Sort by Broker. Eject to new page for each
//?**   broker. Accrual Code made optional, if not entered, include
//?**   all commission applicable to the Broker.
//?*****
//?** 09/27/2007 RMC DLY029
//?** Accrual rate type is on the shipping dtl accrual now
//?E4057 JJH 05/06/15 - Recompiled because the Valid Entries LST of
//?  Accrual Rate Type has been modified.
//?USER: Record selection processing

//?SEL: Records
CASE;

// IF DB1.SDA Actual Ship Date GE PAR.Date From             USR
IF DB1.SDA_Actual_Ship_Date >= PAR.Date_From_USR;

// AND DB1.SDA Actual Ship Date LE PAR.Date To               USR
AND DB1.SDA_Actual_Ship_Date <= PAR.Date_To_USR;

//?SEL: skip if no Broker Code is entered.
CASE;

// IF DB1.Broker Code is Not entered
IF DB1.Broker_Code = *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Company Number
CASE;

// IF PAR.Company Number is greater than zero
IF PAR.Company_Number > *ZERO;

EXECUTE FUNCTION(RTV Whse Acct Co      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1809259;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


CASE;

// IF PAR.Company Number NE LCL.Accounting Company
IF PAR.Company_Number <> LCL.Accounting_Company;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: Broker
CASE;

// IF PAR.Broker Code is Entered
IF PAR.Broker_Code <> *BLANK;

// AND DB1.Broker Code NE PAR.Broker Code
AND DB1.Broker_Code <> PAR.Broker_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Accrual Code
CASE;

// IF PAR.Accrual Code is Entered
IF PAR.Accrual_Code <> *BLANK;

// AND DB1.Accrual Code NE PAR.Accrual Code
AND DB1.Accrual_Code <> PAR.Accrual_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Ship to Customer
CASE;

// IF PAR.Ship To Customer is not equal to zero
IF PAR.Ship_To_Customer <> *ZERO;

// AND DB1.Ship To Customer NE PAR.Ship To Customer
AND DB1.Ship_To_Customer <> PAR.Ship_To_Customer;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Records
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

CASE;

// IF TOP.Company Number is greater than zero
IF TOP_Company_Number > *ZERO;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(TOP_Company_Name_DRV);
PARAMETER(TOP_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Name DRV = CON.*ALL
TOP_Company_Name_DRV = *ALL;

ENDIF;

CASE;

// IF TOP.Accrual Code is Entered
IF TOP_Accrual_Code <> *BLANK;

EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
PARAMETER(TOP_Accrual_Code);
PARAMETER(TOP_Accrual_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Accrual Description = CON.*All
TOP_Accrual_Description = *All;

ENDIF;

CASE;

// IF TOP.Broker Code is Entered
IF TOP_Broker_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
PARAMETER(TOP_Broker_Code);
PARAMETER(TOP_Broker_Name);
PARAMETER(TOP_Broker_Address_Line_1);
PARAMETER(TOP_Broker_Address_Line_2);
PARAMETER(TOP_Broker_City);
PARAMETER(TOP_Broker_State);
PARAMETER(TOP_Broker_Zip);
PARAMETER(LCL.Broker_Office_Manager);
PARAMETER(LCL.Broker_Telephone_Number);
PARAMETER(LCL.Broker_Fax_Number);
PARAMETER(LCL.Broker_Email_Address);
PARAMETER(TOP_Broker_G_L_Vendor_Number);
PARAMETER(LCL.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Broker Name = CON.*ALL
TOP_Broker_Name = *ALL;

ENDIF;

CASE;

// IF TOP.Ship To Customer is not equal to zero
IF TOP_Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(TOP_Ship_To_Name_DRV);
PARAMETER(TOP_Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Ship To Name          DRV = CON.*All
TOP_Ship_To_Name_DRV = *All;

ENDIF;

CASE;

// IF WRK.Print (Yes/No) USR is Yes
IF WRK.Print_Yes_No_USR = 'Y';

// PGM.*new page flag = CND.*Yes
PGM.*new_page_flag = 'Y';

ENDIF;

// TOP.Description = Condition name of PAR.Payee Type
TOP_Description = RTVCND(PAR.Payee_Type);

//?USER: Null report processing

// WRK.Null Report = CND.Null
WRK.Null_Report = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Broker_Code;
CASE;

// IF PAR.Broker Code is Entered
IF PAR.Broker_Code <> *BLANK;

CASE;

// IF PAR.Broker Code EQ DB1.Broker Code
IF PAR.Broker_Code = DB1.Broker_Code;

// CUR.Broker Code = DB1.Broker Code
CUR.Broker_Code = DB1.Broker_Code;

EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
PARAMETER(CUR.Broker_Code);
PARAMETER(CUR.Broker_Name);
PARAMETER(CUR.Broker_Address_Line_1);
PARAMETER(CUR.Broker_Address_Line_2);
PARAMETER(CUR.Broker_City);
PARAMETER(CUR.Broker_State);
PARAMETER(CUR.Broker_Zip);
PARAMETER(LCL.Broker_Office_Manager);
PARAMETER(LCL.Broker_Telephone_Number);
PARAMETER(LCL.Broker_Fax_Number);
PARAMETER(LCL.Broker_Email_Address);
PARAMETER(CUR.Broker_G_L_Vendor_Number);
PARAMETER(LCL.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Broker Code = CON.*BLANK
CUR.Broker_Code = *BLANK;

EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
PARAMETER(CUR.Broker_Code);
PARAMETER(CUR.Broker_Name);
PARAMETER(CUR.Broker_Address_Line_1);
PARAMETER(CUR.Broker_Address_Line_2);
PARAMETER(CUR.Broker_City);
PARAMETER(CUR.Broker_State);
PARAMETER(CUR.Broker_Zip);
PARAMETER(LCL.Broker_Office_Manager);
PARAMETER(LCL.Broker_Telephone_Number);
PARAMETER(LCL.Broker_Fax_Number);
PARAMETER(LCL.Broker_Email_Address);
PARAMETER(CUR.Broker_G_L_Vendor_Number);
PARAMETER(LCL.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Broker Code = DB1.Broker Code
CUR.Broker_Code = DB1.Broker_Code;

EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
PARAMETER(CUR.Broker_Code);
PARAMETER(CUR.Broker_Name);
PARAMETER(CUR.Broker_Address_Line_1);
PARAMETER(CUR.Broker_Address_Line_2);
PARAMETER(CUR.Broker_City);
PARAMETER(CUR.Broker_State);
PARAMETER(CUR.Broker_Zip);
PARAMETER(LCL.Broker_Office_Manager);
PARAMETER(LCL.Broker_Telephone_Number);
PARAMETER(LCL.Broker_Fax_Number);
PARAMETER(LCL.Broker_Email_Address);
PARAMETER(CUR.Broker_G_L_Vendor_Number);
PARAMETER(LCL.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// Print Broker Code header format
PRINT Broker Code header format;

ENDIF;

CASE;

IF NEW Ship_To_Customer;
EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(CUR.Ship_To_Name_DRV);
PARAMETER(CUR.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// Print Ship To Customer header format
PRINT Ship To Customer header format;

ENDIF;

// SUPPRESSED PRINT SDA Actual Ship Date header format

// SUPPRESSED PRINT Order Number header format

//?USER: On print of detail format

// WRK.Print (Yes/No) USR = CND.No
WRK.Print_Yes_No_USR = 'N';

EXECUTE FUNCTION(Item Description DRV) TYPE(DRVFLD)                             AC1633414;
PARAMETER(CUR.Item_Description_DRV);
PARAMETER(CUR.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Chg to use LF by order/seq1,seq2 instead of ord/whs/itm  ljb 05/04/10
EXECUTE FUNCTION(RTV Broker Perf o#/sq RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1988875;
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Order_Sequence_Number);
PARAMETER(CUR.Order_Secondary_Line_Seq);
PARAMETER(CUR.Customer_Purchase_Order_#);
PARAMETER(CUR.Price_5_2_USR);
PARAMETER(CUR.Qty_5_0_USR);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Invoice_Number);
PARAMETER(CUR.Claim_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?RMC 09/27/07 type is on the shipping dtl accrual rcd now
// CUR.Accrual Rate Type = DB1.SDA Accrual Rate Type
CUR.Accrual_Rate_Type = DB1.SDA_Accrual_Rate_Type;

//?** Calculate Net Amount:               OMS045C LJB 10/31/2006
//?** Extended Amount minus TF Accruals minus Absorbed Freight Amt
EXECUTE FUNCTION(Rtv TF accrl total    RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1712164;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(DB1.Sequence_Number);
PARAMETER(WRK.Total_Amount);
{
 //?USER: Initialize routine

 // PAR.Total Amount = CON.*ZERO
 PAR.Total_Amount = *ZERO;

 //?USER: Process Data record

 //?11/13/03 Accum Trade Fund Accruals only ...   PK0519
 //?06/18/07 Chg CASE to select Affect Invoice price=Y    DLY029
 CASE;

 // IF DB1.SDA Affect Invoice Price is Yes
 IF DB1.SDA_Affect_Invoice_Price = 'Y';

 // PAR.Total Amount = PAR.Total Amount + DB1.Extended Amount
 PAR.Total_Amount = PAR.Total_Amount + DB1.Extended_Amount;

 ENDIF;

}


EXECUTE FUNCTION(RTV Absorb Freight Rt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1427204;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(WRK.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Shpd Itm by Ord#   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1799038;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(DB1.Item_Code);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(WRK.Extended_Amount);
PARAMETER(WRK.Quantity_Shipped_Total);
PARAMETER(WRK.Weight_Shipped_Total);
PARAMETER(WRK.Affect_Commission);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** Calculate Absorbed Freight Amount
//?RMC C2876 11/07/13 use a synon field with more than 2 decimals. was truncd
// Calc Absorbed Frt Amount
WRK.Absorbed_Freight_Amount = ( WRK.Absorbed_Freight_Rate_CWT / 100 )                              +
* WRK.Weight_Shipped_Total 'H';

//?** Net Amount:
//?**    Extended amount from Order Detail
//?**    minus TF Accrual Amount (Total Amount) from Shipping Dtl Accrl
//?**    minus Absorbed Freight Amount (Order Hdr Abs Frt Rate times
//?**                   (Order Dtl Weight Shipped Total)
// Calculate : Net Amount
CUR.Net_Dollars = ( WRK.Extended_Amount - WRK.Total_Amount ) - WRK.Absorbed_Freight_Amount;

//?** Per Tim Wood on 11/02/2006 Don't display the Net Amount unless
//?**   there is a rate type and display amounts from the screen
//?**   is not "no"
//?** Control display of Net Amount amount
CASE;

// IF CUR.Accrual Rate Type is Valid Entries
IF CUR.Accrual_Rate_Type = 'W'/'S'/'Q'/'G'/'SA'/'FL'/'FO'/'FA'/'QT';

// WRK.Display Flag 1 USR = CND.yes
WRK.Display_Flag_1_USR = 'Y';

//?** Control display of Net Amount amount
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Display Flag 1 USR = CND.no
WRK.Display_Flag_1_USR = 'N';

ENDIF;

//?** Don't display net amount if "do not print amts" selected on prompt
CASE;

// IF PAR.Print (Yes/No) USR is No
IF PAR.Print_Yes_No_USR = 'N';

// WRK.Display Flag 1 USR = CND.no
WRK.Display_Flag_1_USR = 'N';

ENDIF;

//?USER: Process after print of detail format

NXT.Accrual_Amount_SUM = SUM(CUR.Item_Accrual_Amt);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed);

//?** Only accum net dollars if there is a rate for this vendor
CASE;

// IF WRK.Display Flag 1 USR is yes
IF WRK.Display_Flag_1_USR = 'Y';

NXT.Net_Loss_SUM = SUM(CUR.Net_Dollars);

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Order Number totals format

// SUPPRESSED PRINT SDA Actual Ship Date totals format

CASE;

IF NEW Ship_To_Customer;
// Print Ship To Customer totals format
PRINT Ship To Customer totals format;

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

NXT.Accrual_Amount_SUM = SUM(CUR.Accrual_Amount_SUM);

NXT.Net_Loss_SUM = SUM(CUR.Net_Loss_SUM);

ENDIF;

CASE;

IF NEW Broker_Code;
// Print Broker Code totals format
PRINT Broker Code totals format;

ENDIF;

