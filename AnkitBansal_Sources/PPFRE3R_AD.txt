// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPFRE3R
// ?Date: 14.08.2025 Time: 03:40:16
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//? ***** MAX 50 FILES HAS BEEN REACHED!!!! *****
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Auto Item Number?  RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1192164;
PARAMETER('AUTITM');
PARAMETER(PAR.Auto_Item_Numbering);
{
 //?USER: Process Data record

 // PAR.Auto Item Numbering? = CVTVAR(DB1.System Value Alpha)
 PAR.Auto_Item_Numbering = CVTVAR(DB1.System_Value_Alpha);

}


//?Set to *Add mode if Item Code not entered.
CASE;

// IF PAR.Item Code is Not Entered
IF PAR.Item_Code = *ZERO;

CASE;

// IF PAR.Item Code Detail is Not Entered
IF PAR.Item_Code_Detail = *ZERO;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

ENDIF;

//?RMC S00456 added for item label val
// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);

//?USER: Initialize key screen

// KEY.Item Code = PAR.Item Code
KEY.Item_Code = PAR.Item_Code;

//?USER: Validate key screen

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?Must enter Item if Auto Numbering = N
CASE;

// IF PAR.Auto Item Numbering? is No
IF PAR.Auto_Item_Numbering = 'N';

CASE;

// IF KEY.Item Code is Not Entered
IF KEY.Item_Code = *ZERO;

// Send error message - 'Auto Item Numbering is not in effect, Item number must be entered.'
ERROR(USR1237);
MSGPARM(KEY.Item_Code);

ENDIF;

ENDIF;

//?If Auto Numbering = Y, then Item Code must be Auto assigned.
CASE;

// IF PAR.Auto Item Numbering? is Yes
IF PAR.Auto_Item_Numbering = 'Y';

CASE;

// IF KEY.Item Code is Entered
IF KEY.Item_Code <> *ZERO;

// Send error message - 'Auto Item numbering is in effect, do not enter item number.'
ERROR(USR1238);
MSGPARM(KEY.Item_Code);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Next Item Number   RT) TYPE(CHGOBJ) FILE(CADPREP)          AC1192153;
PARAMETER('NXTITM');
PARAMETER('A');
PARAMETER(KEY.Item_Code);
{
 //?USER: Processing before Data update

 // PGM.*Record Data Changed = CND.*YES
 PGM.*Record_Data_Changed = 'Y';

 // PAR.Item Code = DB1.System Value Numeric
 PAR.Item_Code = DB1.System_Value_Numeric;

 // DB1.System Value Numeric = DB1.System Value Numeric + CON.1
 DB1.System_Value_Numeric = DB1.System_Value_Numeric + 1;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

CASE;

// IF DTL.Partial Item Code is Entered
IF DTL.Partial_Item_Code <> *ZERO;

EXECUTE FUNCTION(VAL Partial Cd Exist  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1663590;
PARAMETER(PAR.Company_Number);
PARAMETER(KEY.Item_Code);
PARAMETER(*ZERO);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Code EQ PAR.Item Code
 IF DB1.Item_Code = PAR.Item_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Item Code already exists as a Partial Code.'
ERROR(USR3232);
MSGPARM(KEY.Item_Code);

ENDIF;

ENDIF;

ENDIF;

//?USER: Initialize detail screen (new record)

//?Defaults for add
// DTL.Allow Weight Input = CND.yes
DTL.Allow_Weight_Input = 'Y';

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

//?Co-Packer Item Default on an Add OR Regular Item Def on Add
CASE;

// IF PAR.Co-Packer Item Req    Usr is yes
IF PAR.Co_Packer_Item_Req_Usr = 'Y';

//?Co-Packer Item Code
// 2ND.Bags Per Unit = CON.*ZERO
2ND.Bags_Per_Unit = *ZERO;

// DTL.Base/Conv/Loss Item = CND.Base
DTL.Base_Conv_Loss_Item = 'B';

// DTL.Case Ready Status = CND.no
DTL.Frozen_Make_to_Order_Sts = 'N';

// DTL.Catch Weight Status = CND.yes
DTL.Catch_Weight_Status = 'Y';

// DTL.Conversion Factor 2 = CON.100
DTL.Conversion_Factor_2 = 100;

// DTL.Credit Item Status = CND.no
DTL.Credit_Item_Status = 'N';

// DTL.Export/Domestic = CND.Domestic
DTL.Export_Domestic = 'D';

// 2ND.Fresh Inv Allocation Seq = CND.First
2ND.Fresh_Inv_Allocation_Seq = 'F';

// 2ND.Fresh Sched As Ordered = CND.yes
2ND.Fresh_Sched_As_Ordered = 'Y';

//?E3313 JJH 08/27/14 - Default Frozen Inv Allocation Seq = First
// 2ND.Frozen Inv Allocation Seq = CND.First
2ND.Frozen_Inv_Allocation_Seq = 'F';

// DTL.Item Level = CND.Not Entered
DTL.Item_Level = *BLANK;

// DTL.Item Pricing Constant = CON.*ZERO
DTL.Item_Pricing_Constant = *ZERO;

// DTL.Item Pricing Operation = CND.Blank
DTL.Item_Pricing_Operation = *BLANK;

// DTL.Item Type Code = CND.Finished Good
DTL.Item_Type_Code = 'FG';

// DTL.Operation Factor 1 = CND.Multiply
DTL.Operation_Factor_1 = 'M';

// DTL.Operation Factor 2 = CND.Divide
DTL.Operation_Factor_2 = 'D';

// 2ND.Package Type Code = WRK.Blank for 4           USR
2ND.Package_Type_Code = WRK.Blank_for_4_USR;

// DTL.Partial Item Code = CND.Not Entered
DTL.Partial_Item_Code = *ZERO;

// 2ND.Piece Count Item = CND.no
2ND.Piece_Count_Item = 'N';

// 2ND.Pieces Per Bag = CON.*ZERO
2ND.Pieces_Per_Bag = *ZERO;

// 2ND.Pieces Per Head = CON.*ZERO
2ND.Pieces_Per_Head = *ZERO;

// DTL.Price Method Default = CND.Blank
DTL.Price_Method_Default = *BLANK;

// DTL.Print on Realization Rpt = CND.No
DTL.Print_on_Realization_Rpt = 'N';

// 2ND.Print On Schedule = CND.no
2ND.Print_On_Schedule = 'N';

// DTL.Production Date Control = CND.yes
DTL.Production_Date_Control = 'Y';

// 2ND.Quality Level = CND.Not entered
2ND.Quality_Level = *BLANK;

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// 2ND.Scheduling Position Grade = CND.No
2ND.Scheduling_Position_Grade = 'N';

// DTL.Seconds Item = CND.No
DTL.Seconds_Item = 'N';

// DTL.Sold 100% Frozen = CND.no
DTL.Sold_100_Percent_Frozen = 'N';

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

// DTL.Std Weight/Head (Var/Ren) = CON.*ZERO
DTL.Std_Weight_Head_Var_Ren = *ZERO;

// DTL.U/M - Pricing Dft = CND.Pounds
DTL.UOM_Pricing_Dft = 'LB';

// DTL.U/M - Primary Dft = CND.EQ Boxes
DTL.UOM_Primary_Dft = 'BX';

// DTL.U/M - Second Dft = CND.Pounds
DTL.UOM_Second_Dft = 'LB';

// DTL.U/M - Third Dft = CND.Hundred Weight
DTL.UOM_Third_Dft = 'CW';

// 2ND.Value Added Sts = CND.yes
2ND.Value_Added_Sts = 'Y';

// 2ND.Variety/Rendered/Cut = CND.Cut
2ND.Variety_Rendered_Cut = 'C';

// 2ND.Vendor item Default Dft = CON.*ZERO
2ND.Vendor_item_Default_Dft = *ZERO;

// DTL.WIP Item Code = CON.*ZERO
DTL.WIP_Item_Code = *ZERO;

// DTL.WIP Reject Code = CON.*ZERO
DTL.WIP_Reject_Code = *ZERO;

// 2ND.Use/Freeze/Sell By Days = CON.*ZERO
2ND.Use_Freeze_Sell_By_Days = *ZERO;

// 2ND.Use/Freeze/Sell By Days = CON.*ZERO
2ND.Use_Freeze_Sell_By_Days = *ZERO;

// DTL.Item TF Exempt Code = CND.Not Exempt
DTL.Item_TF_Exempt_Code = 'NE';

//?Need label type
//?Co-Packer Item Default on an Add OR Regular Item Def on Add
// IF *OTHERWISE
IF *OTHERWISE;

//?Seaboard Item Code
// DTL.Case Ready Status = CND.no
DTL.Frozen_Make_to_Order_Sts = 'N';

// DTL.Catch Weight Status = CND.no
DTL.Catch_Weight_Status = 'N';

// DTL.Credit Item Status = CND.no
DTL.Credit_Item_Status = 'N';

// 2ND.Fresh Sched As Ordered = CND.no
2ND.Fresh_Sched_As_Ordered = 'N';

//?E3313 JJH 08/27/14 - Default Frozen Inv Allocation Seq = First
// 2ND.Frozen Inv Allocation Seq = CND.First
2ND.Frozen_Inv_Allocation_Seq = 'F';

// 2ND.Piece Count Item = CND.no
2ND.Piece_Count_Item = 'N';

//?Init print on realization rpt flag to Y if finished good
CASE;

// IF DTL.Item Type Code is Finished Good
IF DTL.Item_Type_Code = 'FG';

// DTL.Print on Realization Rpt = CND.Yes
DTL.Print_on_Realization_Rpt = 'Y';

//?Init print on realization rpt flag to Y if finished good
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Print on Realization Rpt = CND.No
DTL.Print_on_Realization_Rpt = 'N';

ENDIF;

// 2ND.Print On Schedule = CND.no
2ND.Print_On_Schedule = 'N';

// DTL.Production Date Control = CND.no
DTL.Production_Date_Control = 'N';

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// 2ND.Scheduling Position Grade = CND.No
2ND.Scheduling_Position_Grade = 'N';

// DTL.Seconds Item = CND.No
DTL.Seconds_Item = 'N';

// DTL.Sold 100% Frozen = CND.no
DTL.Sold_100_Percent_Frozen = 'N';

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

// 2ND.Value Added Sts = CND.no
2ND.Value_Added_Sts = 'N';

// DTL.WIP Item Code = CON.*ZERO
DTL.WIP_Item_Code = *ZERO;

// DTL.WIP Reject Code = CON.*ZERO
DTL.WIP_Reject_Code = *ZERO;

// 2ND.Use/Freeze/Sell By Days = CON.*ZERO
2ND.Use_Freeze_Sell_By_Days = *ZERO;

// DTL.Item TF Exempt Code = CND.Not Exempt
DTL.Item_TF_Exempt_Code = 'NE';

//?Need label type
ENDIF;

// DTL.TF Exempt Code Desc Usr = Condition name of DTL.Item TF Exempt Code
DTL.TF_Exempt_Code_Desc_Usr = RTVCND(DTL.Item_TF_Exempt_Code);

// LCL.Item TF Exempt Save Usr = DTL.Item TF Exempt Code
LCL.Item_TF_Exempt_Save_Usr = DTL.Item_TF_Exempt_Code;

// 2ND.PA Base Avail Rpt Include = CND.No
2ND.PA_Base_Avail_Rpt_Include = 'N';

// DTL.Seaboard Equivalent Item = CON.*ZERO
DTL.Seaboard_Equivalent_Item = *ZERO;

//?E3787 JJH 08/04/15 - Initialize Field
// 2ND.Item Prod Sched Send PFS = CND.No
2ND.Item_Prod_Sched_Send_PFS = 'N';

//?Never show Display Pallet/Spacer Type             9/17/21 WI464
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Dsp Pallet/Spacer Typ USR = CND.no
PAR.Dsp_Pallet_Spacer_Typ_USR = 'N';

ENDIF;

//?08/19/2020 ISE 418 Get the Federal tax id from Company Name and Address
//?            file and populate in Manufacturer code for a new FG item
CASE;

// IF DTL.Item Type Code is Finished Good
IF DTL.Item_Type_Code = 'FG';

// Call program RTV Federal ID         XF.
CALL PROGRAM(RTV Federal ID         XF) ('PURSXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.AS_Manufacturers_Code);

// 3RD.IDE Manufacturer Nbr = CVTVAR(LCL.AS Manufacturers Code)
3RD.IDE_Manufacturer_Nbr = CVTVAR(LCL.AS_Manufacturers_Code);

ENDIF;

//?USER: Initialize detail screen (existing record)

//?Copy Item Default
CASE;

// IF PAR.Item Code Detail is Entered
IF PAR.Item_Code_Detail <> *ZERO;

//?If parameter Item Code Detail is not Zero, then this function
//?is being called from the Copy function.
// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

// DTL.Item Code = PAR.Item Code Detail
DTL.Item_Code = PAR.Item_Code_Detail;

// KEY.Item Code = PAR.Item Code Detail
KEY.Item_Code = PAR.Item_Code_Detail;

ENDIF;

EXECUTE FUNCTION(Rtv TF Class Desc     RT) TYPE(RTVOBJ) FILE(PPAMREP)           AC1707658;
PARAMETER(DTL.Item_TF_Classification);
PARAMETER(DTL.TF_Classification_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Item Sls Prod Typ XF.
CALL PROGRAM(Rtv Item Sls Prod Typ XF) ('PMC8XFR');
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Product_Type_Code);
PARAMETER(3RD.Item_Report_Group_Code_1);

// DTL.TF Exempt Code Desc Usr = Condition name of DTL.Item TF Exempt Code
DTL.TF_Exempt_Code_Desc_Usr = RTVCND(DTL.Item_TF_Exempt_Code);

//?DN R13981 10/25/18-Get Spanish Desc.
//?DN R17040 02/23/21-Get IDE Pallet Tiers & Blocks.
//?DN DO2642 06/01/22-Get Spanish Desc 2.
// Call program Rtv Item Dflt Ext Fld XF.
CALL PROGRAM(Rtv Item Dflt Ext Fld XF) ('PBPAXFR');
PARAMETER(DB1.Item_Code);
PARAMETER(2ND.IDE_Forecast_in_DP);
PARAMETER(LCL.IDE_Pallet_Tiers);
PARAMETER(LCL.IDE_Pallet_Blocks);
PARAMETER(DTL.Spanish_Description);
PARAMETER(DTL.Spanish_Description_Line2);

//?DN DO2642 06/01/22-Set Spanish Desc 2 on Screen.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Spanish Desc Line 2 USR = DTL.Spanish Description Line2
DTL.Spanish_Desc_Line_2_USR = DTL.Spanish_Description_Line2;

ENDIF;

//?DN R17040 02/23/21-Convert IDE Pallet Tiers & Blocks.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// 2ND.IDE Pallet Tiers USR = CVTVAR(LCL.IDE Pallet Tiers)
2ND.IDE_Pallet_Tiers_USR = CVTVAR(LCL.IDE_Pallet_Tiers);

// 2ND.IDE Pallet Blocks USR = CVTVAR(LCL.IDE Pallet Blocks)
2ND.IDE_Pallet_Blocks_USR = CVTVAR(LCL.IDE_Pallet_Blocks);

ENDIF;

//?Default Print on Schedule
CASE;

// IF DB1.Print On Schedule is blank
IF DB1.Print_On_Schedule = *BLANK;

// 2ND.Print On Schedule = CND.yes
2ND.Print_On_Schedule = 'Y';

ENDIF;

//?Default Piece count item
CASE;

// IF DB1.Piece Count Item is blank
IF DB1.Piece_Count_Item = *BLANK;

// 2ND.Piece Count Item = CND.no
2ND.Piece_Count_Item = 'N';

ENDIF;

//?Default Scheduling Grade Position
CASE;

// IF DB1.Scheduling Position Grade is *ALL values
IF DB1.Scheduling_Position_Grade = 'Y'/'N';

//?Default Scheduling Grade Position
// IF *OTHERWISE
IF *OTHERWISE;

// 2ND.Scheduling Position Grade = CND.No
2ND.Scheduling_Position_Grade = 'N';

ENDIF;

//?Default Forecast in DP 9/3/14
CASE;

//?Default Forecast in DP 9/3/14
// IF 2ND.IDE Forecast in DP is C/D/N/V/Y Values
IF 2ND.IDE_Forecast_in_DP = 'C'/'D'/'N'/'V'/'Y';

//?Default Forecast in DP 9/3/14
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Item Type Code is Finished Good
IF DB1.Item_Type_Code = 'FG';

// 2ND.IDE Forecast in DP = CND.Yes
2ND.IDE_Forecast_in_DP = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// 2ND.IDE Forecast in DP = CND.No
2ND.IDE_Forecast_in_DP = 'N';

ENDIF;

ENDIF;

CASE;

// IF DB1.Item Structure Type Code is NE 900
IF DB1.Item_Structure_Type_Code <> 900;

//?Seaboard Item
//?Defaults on Fresh Inv Alloc/Fresh as Order/Frozen Order as Order
CASE;

// IF 2ND.Item Type Code is Finished Good/Raw Matrl
IF 2ND.Item_Type_Code = 'FG'/'RM';

//?Default Fresh Inv Allocation to first
CASE;

// IF DB1.Fresh Inv Allocation Seq EQ WRK.BLANK 1               USR
IF DB1.Fresh_Inv_Allocation_Seq = WRK.BLANK_1_USR;

// 2ND.Fresh Inv Allocation Seq = CND.First
2ND.Fresh_Inv_Allocation_Seq = 'F';

ENDIF;

//?Default Fresh Sched as Ordered to No
CASE;

// IF DB1.Fresh Sched As Ordered EQ WRK.BLANK 1               USR
IF DB1.Fresh_Sched_As_Ordered = WRK.BLANK_1_USR;

// 2ND.Fresh Sched As Ordered = CND.no
2ND.Fresh_Sched_As_Ordered = 'N';

ENDIF;

//?E3313 JJH 08/27/14 - Default Frozen Inv Allocation Seq = First
//?Default Frozen Inv Allocation Seq to First
CASE;

// IF DB1.Frozen Sched As Ordered EQ WRK.BLANK 1               USR
IF DB1.Frozen_Inv_Allocation_Seq = WRK.BLANK_1_USR;

//?E3313 JJH 08/27/14 - Default Frozen Inv Allocation Seq = First
// 2ND.Frozen Inv Allocation Seq = CND.First
2ND.Frozen_Inv_Allocation_Seq = 'F';

ENDIF;

ENDIF;

// IF DB1.Item Structure Type Code is EQ 900
IF DB1.Item_Structure_Type_Code = 900;

//?Co-Packer Item
//?Defaults on Fresh Inv Alloc/Fresh as Order/Frozen Order as Order
CASE;

// IF 2ND.Item Type Code is Finished Good/Raw Matrl
IF 2ND.Item_Type_Code = 'FG'/'RM';

//?Default Fresh Inv Allocation to first
CASE;

// IF DB1.Fresh Inv Allocation Seq EQ WRK.BLANK 1               USR
IF DB1.Fresh_Inv_Allocation_Seq = WRK.BLANK_1_USR;

// 2ND.Fresh Inv Allocation Seq = CND.First
2ND.Fresh_Inv_Allocation_Seq = 'F';

ENDIF;

//?Default Fresh Sched as Ordered to yes
CASE;

// IF DB1.Fresh Sched As Ordered EQ WRK.BLANK 1               USR
IF DB1.Fresh_Sched_As_Ordered = WRK.BLANK_1_USR;

// 2ND.Fresh Sched As Ordered = CND.yes
2ND.Fresh_Sched_As_Ordered = 'Y';

ENDIF;

//?E3313 JJH 08/27/14 - Default Frozen Inv Allocation Seq = First
//?Default Frozen Inv Allocation Seq to First
CASE;

// IF DB1.Frozen Sched As Ordered EQ WRK.BLANK 1               USR
IF DB1.Frozen_Inv_Allocation_Seq = WRK.BLANK_1_USR;

//?E3313 JJH 08/27/14 - Default Frozen Inv Allocation Seq = First
// 2ND.Frozen Inv Allocation Seq = CND.First
2ND.Frozen_Inv_Allocation_Seq = 'F';

ENDIF;

ENDIF;

ENDIF;

// LCL.Catch Weight Status = DB1.Catch Weight Status
LCL.Catch_Weight_Status = DB1.Catch_Weight_Status;

EXECUTE FUNCTION(SAV Item Default Flds  IF) TYPE(EXCINTFUN)                     AC1702064;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary_Dft);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second_Dft);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third_Dft);
PARAMETER(DTL.UOM_Pricing_Dft);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Quality_Level);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(2ND.Minimum_Weight_Per_Case);
PARAMETER(2ND.Maximum_Weight_Per_Case);
PARAMETER(2ND.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Vendor_item_Default_Dft);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(DTL.Transportation_Temp);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(2ND.Package_Type_Code);
PARAMETER(2ND.Fresh_Chilling_Time);
PARAMETER(DTL.Base_Conv_Loss_Item);
PARAMETER(2ND.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(2ND.Std_Weight_Head_Var_Ren);
PARAMETER(2ND.Pieces_Per_Head);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(2ND.Pallet_Tare_Weight);
PARAMETER(2ND.Misc_Tare_Weight);
PARAMETER(DTL.Production_Lead_Days);
PARAMETER(DTL.Packaging_Code);
PARAMETER(DTL.Item_Market_Code);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
PARAMETER(DTL.Seconds_Item);
PARAMETER(DTL.Print_on_Realization_Rpt);
PARAMETER(DTL.Unit_Weight_Change_Sts);
PARAMETER(DTL.Maximum_Audit_Value);
PARAMETER(DTL.Minimum_Audit_Value);
PARAMETER(DTL.Market_Overage);
PARAMETER(DTL.Standard_Overage_Underage);
PARAMETER(DTL.Item_Pricing_Operation);
PARAMETER(DTL.Item_Pricing_Constant);
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Price_Method_Default);
PARAMETER(2ND.Department_Code);
PARAMETER(DTL.Group_for_Packaging);
PARAMETER(DTL.Item_Category_Number_1);
PARAMETER(DTL.Made_to_Order_Code);
PARAMETER(DTL.Item_Category_Number_2);
PARAMETER(DTL.Transportation_Equip_Type);
PARAMETER(DTL.Item_Category_Number_3);
PARAMETER(DTL.Item_Category_Code_3);
PARAMETER(DTL.Item_Category_Number_4);
PARAMETER(DTL.GL_Sub_Code);
PARAMETER(DB1.Item_Category_Number_6);
PARAMETER(DB1.Item_Primal_Sched_Report);
PARAMETER(DTL.PM_Line_Number);
PARAMETER(DTL.Primal_Group_Code);
PARAMETER(2ND.Piece_Count_Item);
PARAMETER(2ND.Pieces_Per_Bag);
PARAMETER(2ND.Bags_Per_Unit);
PARAMETER(DTL.Export_Domestic);
PARAMETER(2ND.Print_On_Schedule);
PARAMETER(2ND.Fresh_Inv_Allocation_Seq);
PARAMETER(2ND.Fresh_Sched_As_Ordered);
PARAMETER(2ND.Frozen_Inv_Allocation_Seq);
PARAMETER(DTL.Item_Meat_Cost_Group_Code);
PARAMETER(DTL.UPC_Code_2);
PARAMETER(DTL.Item_Target_Price);
PARAMETER(DTL.Minimum_Piece_Weight);
PARAMETER(DTL.Maximum_Piece_Weight);
PARAMETER(DTL.Seaboard_Equivalent_Item);
PARAMETER(DTL.Production_Qty_Per_Shift);
PARAMETER(2ND.Scheduling_Position_Grade);
PARAMETER(DTL.Sold_100_Percent_Frozen);
PARAMETER(DTL.Maximum_Shifts);
PARAMETER(DTL.Value_Added_Sts);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Condition_Desc_1_USR);
PARAMETER(DTL.Item_Category_Type_Desc);
PARAMETER(DTL.USR_Description_New);
PARAMETER(DTL.Item_Structure_Type_Desc);
PARAMETER(DTL.Item_Structure_Group_Desc);
PARAMETER(DTL.Item_Structure_Class_Desc);
PARAMETER(DTL.UOM_Description_1_USR);
PARAMETER(DTL.UOM_Description_2_USR);
PARAMETER(DTL.UOM_Description_3_USR);
PARAMETER(DTL.UOM_Description_4_USR);
PARAMETER(DTL.Commodity_Market_Desc);
PARAMETER(DTL.Commodity_Price_Desc);
PARAMETER(DTL.Condition_Desc_10_USR);
PARAMETER(DTL.Status_Description);
PARAMETER(DTL.Export_Domestic_Desc_USR);
PARAMETER(2ND.Condition_Desc_2_USR);
PARAMETER(2ND.Condition_Desc_3_USR);
PARAMETER(2ND.Condition_Desc_4_USR);
PARAMETER(2ND.Fresh_Inv_Alloc_Desc_USR);
PARAMETER(2ND.USR_Description);
PARAMETER(2ND.Warehouse_Description);
PARAMETER(2ND.Primal_Group_Desc);
PARAMETER(DTL.Price_Method_Description);
PARAMETER(2ND.Department_Description);
PARAMETER(2ND.Text_USR_7);
{
 //?Execute internal function

 //?Move of various fields to screens and get descriptions.
 DO;

 //?Populate descriptions and conditions
 // PAR.Condition Desc. 1  USR = Condition name of PAR.Item Type Code
 PAR.Condition_Desc_1_USR = RTVCND(PAR.Item_Type_Code);

 EXECUTE FUNCTION(RTV Item Category /Itm RT) TYPE(RTVOBJ) FILE(PDJIREP)          AC1701444;
 PARAMETER(4);
 PARAMETER(PAR.GL_Sub_Code);
 PARAMETER(PAR.Item_Category_Type_Desc);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  // PAR.Description = DB1.Description
  PAR.Description = DB1.Description;

  QUIT;

 }

 EXECUTE FUNCTION(RTV Item Level Descr   RT) TYPE(RTVOBJ) FILE(PDILREP)          AC1287285;
 PARAMETER(PAR.Item_Level);
 PARAMETER(PAR.USR_Description_New);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Type_Desc);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Group_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Class_Desc);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program Rtv UOM Description   XF.
 CALL PROGRAM(Rtv UOM Description   XF) ('PBJGXFR');
 PARAMETER(PAR.UOM_Pricing_Dft);
 PARAMETER(PAR.UOM_Description_4_USR);

 // Call program Rtv UOM Description   XF.
 CALL PROGRAM(Rtv UOM Description   XF) ('PBJGXFR');
 PARAMETER(PAR.UOM_Primary_Dft);
 PARAMETER(PAR.UOM_Description_1_USR);

 // Call program Rtv UOM Description   XF.
 CALL PROGRAM(Rtv UOM Description   XF) ('PBJGXFR');
 PARAMETER(PAR.UOM_Second_Dft);
 PARAMETER(PAR.UOM_Description_2_USR);

 // Call program Rtv UOM Description   XF.
 CALL PROGRAM(Rtv UOM Description   XF) ('PBJGXFR');
 PARAMETER(PAR.UOM_Third_Dft);
 PARAMETER(PAR.UOM_Description_3_USR);

 EXECUTE FUNCTION(RTV Commod. Mkts Desc  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1277934;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Market_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Commod Group Desc  RT) TYPE(RTVOBJ) FILE(OMFZREP)          AC1277945;
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Commodity_Price_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Condition Desc. 10 USR = Condition name of PAR.Item Pricing Operation
 PAR.Condition_Desc_10_USR = RTVCND(PAR.Item_Pricing_Operation);

 // PAR.Status Description = Condition name of PAR.Record Status
 PAR.Status_Description = RTVCND(PAR.Record_Status);

 // PAR.Export/Domestic Desc  USR = Condition name of PAR.Export/Domestic
 PAR.Export_Domestic_Desc_USR = RTVCND(PAR.Export_Domestic);

 //?2nd -- Screen 2
 // PAR.Condition Desc. 2  USR = Condition name of PAR.Package Type Code
 PAR.Condition_Desc_2_USR = RTVCND(PAR.Package_Type_Code);

 // PAR.Condition Desc. 3  USR = Condition name of PAR.Base/Conv/Loss Item
 PAR.Condition_Desc_3_USR = RTVCND(PAR.Base_Conv_Loss_Item);

 // PAR.Condition Desc. 4  USR = Condition name of PAR.Variety/Rendered/Cut
 PAR.Condition_Desc_4_USR = RTVCND(PAR.Variety_Rendered_Cut);

 // PAR.Fresh Inv Alloc Desc  USR = Condition name of PAR.Fresh Inv Allocation Seq
 PAR.Fresh_Inv_Alloc_Desc_USR = RTVCND(PAR.Fresh_Inv_Allocation_Seq);

 // PAR.Text USR 7 = Condition name of PAR.Frozen Inv Allocation Seq
 PAR.Text_USR_7 = RTVCND(PAR.Frozen_Inv_Allocation_Seq);

 EXECUTE FUNCTION(Rtv Quality Level Desc RT) TYPE(RTVOBJ) FILE(CAAIREP)          AC1124632;
 PARAMETER(PAR.Quality_Level);
 PARAMETER(PAR.USR_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Warehouse_Description);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 EXECUTE FUNCTION(Rtv Primal Grp Desc   RT) TYPE(RTVOBJ) FILE(PDLLREP)           AC1476186;
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.Primal_Group_Desc);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Item Default does not have the company, so files that are normally
 //?accessed by Company will be accessed using a new access path/rtvobj
 //?that reads the first record and quits.
 EXECUTE FUNCTION(Rtv Price Mth Dsc Dflt RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1701083;
 PARAMETER(PAR.Price_Method_Default);
 PARAMETER(PAR.Price_Method_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Prod Dept Nme DfltRT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1701086;
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Department_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?3rd -- Screen 3
 ENDDO;

}


// 2ND.Condition Desc. 1  USR = DTL.Condition Desc. 1  USR
2ND.Condition_Desc_1_USR = DTL.Condition_Desc_1_USR;

// 3RD.Condition Desc. 1  USR = DTL.Condition Desc. 1  USR
3RD.Condition_Desc_1_USR = DTL.Condition_Desc_1_USR;

//?* Save the data base description line one to check later   E009708
// WRK.Description 1 usr = DB1.Description Line One
WRK.Description_1_usr = DB1.Description_Line_One;

//?* Save the data base bag values to check for change later   E13472
// LCL.Bags Per Unit USR = DB1.Bags Per Unit
LCL.Bags_Per_Unit_USR = DB1.Bags_Per_Unit;

// LCL.Pieces Per Bag USR = DB1.Pieces Per Bag
LCL.Pieces_Per_Bag_USR = DB1.Pieces_Per_Bag;

//?Unit Weight Rules with Update on Item Default
DO;

//?Set Allow Weight to Yes,
// DTL.Allow Weight Input = CND.yes
DTL.Allow_Weight_Input = 'Y';

//?Test if there are currently any company items.
EXECUTE FUNCTION(RTV Assign Co Flag     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1701172;
PARAMETER(DTL.Item_Code);
PARAMETER(WRK.Company_Assigned_Usr);
{
 //?USER: Initialize routine

 // LCL.Count Records        USR = CON.*ZERO
 LCL.Count_Records_USR = *ZERO;

 //?USER: Process Data record

 //?01/27/06 PKD Remove hard coding of Guymon & St. Joseph
 // LCL.Count Records        USR = LCL.Count Records        USR + CON.1
 LCL.Count_Records_USR = LCL.Count_Records_USR + 1;

 // PAR.Company Assigned Usr = CVTVAR(DB1.Company Number)
 PAR.Company_Assigned_Usr = CVTVAR(DB1.Company_Number);

 CASE;

 // IF LCL.Count Records        USR is GT 1
 IF LCL.Count_Records_USR > 1;

 // PAR.Company Assigned Usr = CON.All
 PAR.Company_Assigned_Usr = 'All';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Company Assigned Usr NE WRK.BLANK
IF WRK.Company_Assigned_Usr <> WRK.BLANK;

CASE;

// IF DTL.Item Type Code is FG/WP
IF DTL.Item_Type_Code = 'FG'/'WP';

//?If Catch Weight Sts = N (Std Weight every time)
//?                        (Unit weight will be maintained at itemlvl
//?If Catch Weight Sts = Y (Unit weight will be maintained at complvl
CASE;

// IF DTL.Catch Weight Status is no
IF DTL.Catch_Weight_Status = 'N';

//?Allow the user to change the Unit Wgt, and on update then
//?also update all the Company Item records for this item with
//?the unit weight from the Item default
// DTL.Allow Weight Input = CND.yes
DTL.Allow_Weight_Input = 'Y';

// IF DTL.Catch Weight Status is yes
IF DTL.Catch_Weight_Status = 'Y';

//?Once a company item has been created then the unit weight will
//?be maintained at the CoItem.  Item default unit's weight
//?will be displayed only.
// DTL.Allow Weight Input = CND.no
DTL.Allow_Weight_Input = 'N';

ENDIF;

// IF DTL.Item Type Code is Packaging and Supplies
IF DTL.Item_Type_Code = 'PS';

//?Once a company item has been created then the unit weight will
//?be maintained at the CoItem.  Item default unit's weight
//?will be displayed only.
// DTL.Allow Weight Input = CND.no
DTL.Allow_Weight_Input = 'N';

// IF DTL.Item Type Code is Raw Material
IF DTL.Item_Type_Code = 'RM';

//?Allow the user to change the Unit Wgt, and on update then
//?also update all the Company Item records for this item with
//?the unit weight from the Item default
// DTL.Allow Weight Input = CND.yes
DTL.Allow_Weight_Input = 'Y';

ENDIF;

ENDIF;

ENDDO;

// LCL.Item TF Exempt Save Usr = DB1.Item TF Exempt Code
LCL.Item_TF_Exempt_Save_Usr = DB1.Item_TF_Exempt_Code;

// 2ND.Label Type Descr Usr = Condition name of 2ND.Label Type
2ND.Label_Type_Descr_Usr = RTVCND(2ND.Label_Type);

// DTL.Condition Name USR = Condition name of DTL.TF Co-Ownership Sts
DTL.Condition_Name_USR = RTVCND(DTL.TF_Co_Ownership_Sts);

EXECUTE FUNCTION(Item Category 5 Desc DRV) TYPE(DRVFLD)                         AC2036037;
PARAMETER(DTL.Item_Category_5_Desc_DRV);
PARAMETER(DTL.Item_Structure_Sub_Class);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 // Call program Rtv IS Sub Class Desc XF.
 CALL PROGRAM(Rtv IS Sub Class Desc XF) ('PBBYXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Structure_Sub_Class);
 PARAMETER(PAR.Item_Category_5_Desc_DRV);

}


EXECUTE FUNCTION(Item Report Grp Desc DRV) TYPE(DRVFLD)                         AC2036718;
PARAMETER(3RD.Item_Report_Grp_Desc_DRV);
PARAMETER(1);
PARAMETER(3RD.Item_Report_Group_Code_1);
{
 //?Calculate derived field

 // Call program Rtv Item Rpt Grp Desc XF.
 CALL PROGRAM(Rtv Item Rpt Grp Desc XF) ('PBB6XFR');
 PARAMETER(PAR.Item_Report_Group_Number);
 PARAMETER(PAR.Item_Report_Group_Code);
 PARAMETER(PAR.Item_Report_Grp_Desc_DRV);

}


EXECUTE FUNCTION(Item Man Price Excep DRV) TYPE(DRVFLD)                         AC2050121;
PARAMETER(3RD.Item_Man_Price_Excep_DRV);
PARAMETER(DTL.Company_Number);
PARAMETER(7);
PARAMETER(3RD.Item_Exc_Man_Prc_Excp);
{
 //?Calculate derived field

 // Call program Rtv Item Man Prc Excp XF.
 CALL PROGRAM(Rtv Item Man Prc Excp XF) ('PBE3XFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Category_Code);
 PARAMETER(PAR.Item_Man_Price_Excep_DRV);

}


//?Item Category 2  : TPM Transp equipment type
CASE;

// IF 3RD.Item Category Code 2 is Not Entered
IF 3RD.Transportation_Equip_Type = *BLANK;

// 3RD.Item Category Number 2 = CON.*ZERO
3RD.Item_Category_Number_2 = *ZERO;

//?Item Category 2  : TPM Transp equipment type
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Categ Desc   RT) TYPE(RTVOBJ) FILE(PDJIREP)           AC1663147;
PARAMETER(3RD.Transportation_Equip_Type);
PARAMETER(3RD.USR_Comment_1);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.Item Category Code EQ DB1.Item Category Code
 IF PAR.Item_Category_Code = DB1.Item_Category_Code;

 // PAR.Description = DB1.Description
 PAR.Description = DB1.Description;

 QUIT;

 ENDIF;

}


ENDIF;

//?Never show Display Pallet/Spacer Type             9/17/21 WI464
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Dsp Pallet/Spacer Typ USR = CND.no
PAR.Dsp_Pallet_Spacer_Typ_USR = 'N';

ENDIF;

//?08/11/2020 ISE 418 Retrieve Manufacturer code from PBBTREP file, and if
//?            it is zero for FG items, default it from Company name and
//?            address file's Federal id
// Call program EXT RTV MANUFACTURER CODE.
CALL PROGRAM(EXT RTV MANUFACTURER CODE) ('PPFRE3RX');
PARAMETER(DB1.Item_Code);
PARAMETER(LCL.@AS_Seal_Number_Numeric);

CASE;

// IF DTL.Item Type Code is Finished Good
IF DTL.Item_Type_Code = 'FG';

// AND LCL.@AS Seal Number Numeric is ZeroValue
AND LCL.@AS_Seal_Number_Numeric = 0;

// Call program RTV Federal ID         XF.
CALL PROGRAM(RTV Federal ID         XF) ('PURSXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(LCL.AS_Manufacturers_Code);

// 3RD.IDE Manufacturer Nbr = CVTVAR(LCL.AS Manufacturers Code)
3RD.IDE_Manufacturer_Nbr = CVTVAR(LCL.AS_Manufacturers_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// 3RD.IDE Manufacturer Nbr = LCL.@AS Seal Number Numeric
3RD.IDE_Manufacturer_Nbr = LCL.@AS_Seal_Number_Numeric;

ENDIF;

// Call program Rtv Itm Def Ext Reg XF.
CALL PROGRAM(Rtv Itm Def Ext Reg XF) ('PUZUXFR');
PARAMETER(DB1.Item_Code);
PARAMETER(3RD.Regulation_ID);
PARAMETER(3RD.Regulation_Desc);

//?USER: Validate detail screen fields

//?********************
//?S00456 RMC 9/12/08    Commented out 4/3/17 per user request E009708
//?   418 ISE 08/11/2020 Update Manufacturer code
//?********************
// DTL.TF Exempt Code Usr = Condition name of DTL.Item TF Exempt Code
DTL.TF_Exempt_Code_Desc_Usr = RTVCND(DTL.Item_TF_Exempt_Code);

//?Select Commodity market, WIP Item, Gl Ledger
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Default Commod Mark basis
IF PGM.*Cursor_field = DTL.Default_Commod_Mark_basis;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(DTL.Default_Commod_Mark_basis);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> 2ND.Department Code
IF PGM.*Cursor_field = 2ND.Department_Code;

// Call program Sel Prod Dept         SR.
CALL PROGRAM(Sel Prod Dept         SR) ('PPIASRR');
PARAMETER(DTL.Department_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.G/L Sub Code
IF PGM.*Cursor_field = DTL.GL_Sub_Code;

// WRK.Item Category Number = CON.4
WRK.Item_Category_Number = 4;

// Call program Sel GL Sub Codes Wo/Co SL.
CALL PROGRAM(Sel GL Sub Codes Wo/Co SL) ('PPFUSRR');
PARAMETER(WRK.Item_Category_Number);
PARAMETER(2ND.GL_Sub_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.WIP Item Code
IF PGM.*Cursor_field = DTL.WIP_Item_Code;

// Call program Zzz Actv WP            SR.
CALL PROGRAM(Zzz Actv WP            SR) ('POX6SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.WIP_Item_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?item catg 3
CASE;

// IF PGM.*Cursor field <IS> 3RD.Item Category Code 3
IF PGM.*Cursor_field = 3RD.Item_Category_Code_3;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

CASE;

// IF 3RD.Item Category Code 3 is Not Entered
IF 3RD.Item_Category_Code_3 = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// 3RD.Item Category Number 2 = CON.3
3RD.Item_Category_Number_2 = 3;

ENDIF;

ENDIF;

//?item market code - no prompt
CASE;

// IF PGM.*Cursor field <IS> 3RD.Item Market Code
IF PGM.*Cursor_field = 3RD.Item_Market_Code;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?SEL: product type code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Product Type Code
AND PGM.*Cursor_field = DTL.Product_Type_Code;

// Call program Sel Sls Product Type  SR.
CALL PROGRAM(Sel Sls Product Type  SR) ('PMTDSRR');
PARAMETER(DTL.Product_Type_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?SEL: SM Report Group 1
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> 3RD.Item Report Group Code 1
AND PGM.*Cursor_field = 3RD.Item_Report_Group_Code_1;

// Call program Sel IRG Number 1      SR.
CALL PROGRAM(Sel IRG Number 1      SR) ('PBB0SRR');
PARAMETER(LCL.Item_Report_Group_Number);
PARAMETER(3RD.Item_Report_Group_Code_1);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?SEL: Meat Cost Group
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> 3RD.Item Meat Cost Group Code
IF PGM.*Cursor_field = 3RD.Item_Meat_Cost_Group_Code;

// Call program Sel Meat Cost Group   SR.
CALL PROGRAM(Sel Meat Cost Group   SR) ('PBAFSRR');
PARAMETER(3RD.Item_Meat_Cost_Group_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?SEL: transp equip type - category 2 - screen 3
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> 3RD.Item Category Code 2
IF PGM.*Cursor_field = 3RD.Transportation_Equip_Type;

// Call program Sel Transp Equip Type SL.
CALL PROGRAM(Sel Transp Equip Type SL) ('PBJHSRR');
PARAMETER(3RD.Transportation_Equip_Type);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?SEL: Item Structure Sub Class
CASE;

// IF PGM.*Cursor field <IS> DTL.Item Category Code 5
IF PGM.*Cursor_field = DTL.Item_Structure_Sub_Class;

// AND DTL.*CMD key is CF04
AND DTL.*CMD_key = '04';

// Call program Sel Item Str Sub Cls  SL.
CALL PROGRAM(Sel Item Str Sub Cls  SL) ('PBBZSRR');
PARAMETER(DTL.Item_Structure_Sub_Class);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?SEL: Item Manual Price Exception Check
CASE;

// IF PGM.*Cursor field <IS> 3RD.Item MAN Price Excep Chk
IF PGM.*Cursor_field = 3RD.Item_Exc_Man_Prc_Excp;

// AND DTL.*CMD key is CF04
AND DTL.*CMD_key = '04';

// Call program Sel Exc Man Prc Exep  SL.
CALL PROGRAM(Sel Exc Man Prc Exep  SL) ('PBE2SRR');
PARAMETER(3RD.Item_Exc_Man_Prc_Excp);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?SEL: Regulation ID
CASE;

// IF PGM.*Cursor field <IS> 3RD.Regulation ID
IF PGM.*Cursor_field = 3RD.Regulation_ID;

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// Call program SEL Regulation ID SR.
CALL PROGRAM(SEL Regulation ID SR) ('PVAFSRR');
PARAMETER(3RD.Regulation_ID);
PARAMETER(3RD.Regulation_Desc);

ENDIF;

ENDIF;

CASE;

// IF 3RD.Regulation ID is Not entered
IF 3RD.Regulation_ID = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program EXT RTV Reg Code ID XF.
CALL PROGRAM(EXT RTV Reg Code ID XF) ('PUZWXFR');
PARAMETER(3RD.Regulation_ID);

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Regulation Code Mst not found.'
ERROR(USR5316);
MSGPARM(3RD.Regulation_ID);

ENDIF;

ENDIF;

CASE;

// IF DTL.Item Structure Type Code is NE 900
IF DTL.Item_Structure_Type_Code <> 900;

// DTL.Conversion Factor 1 = DTL.Unit Weight
DTL.Conversion_Factor_1 = DTL.Unit_Weight;

ENDIF;

EXECUTE FUNCTION(SAV Item Default Flds  IF) TYPE(EXCINTFUN)                     AC1702064;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary_Dft);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second_Dft);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third_Dft);
PARAMETER(DTL.UOM_Pricing_Dft);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Quality_Level);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(2ND.Minimum_Weight_Per_Case);
PARAMETER(2ND.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Vendor_item_Default_Dft);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(2ND.Transportation_Temp);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(2ND.Package_Type_Code);
PARAMETER(2ND.Fresh_Chilling_Time);
PARAMETER(DTL.Base_Conv_Loss_Item);
PARAMETER(2ND.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(2ND.Std_Weight_Head_Var_Ren);
PARAMETER(2ND.Pieces_Per_Head);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(2ND.Pallet_Tare_Weight);
PARAMETER(2ND.Misc_Tare_Weight);
PARAMETER(DTL.Production_Lead_Days);
PARAMETER(DTL.Packaging_Code);
PARAMETER(DTL.Item_Market_Code);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
PARAMETER(DTL.Seconds_Item);
PARAMETER(DTL.Print_on_Realization_Rpt);
PARAMETER(2ND.Unit_Weight_Change_Sts);
PARAMETER(DTL.Maximum_Audit_Value);
PARAMETER(DTL.Minimum_Audit_Value);
PARAMETER(DTL.Market_Overage);
PARAMETER(DTL.Standard_Overage_Underage);
PARAMETER(DTL.Item_Pricing_Operation);
PARAMETER(DTL.Item_Pricing_Constant);
PARAMETER(2ND.Default_Warehouse);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Price_Method_Default);
PARAMETER(2ND.Department_Code);
PARAMETER(DTL.Group_for_Packaging);
PARAMETER(DTL.Item_Category_Number_1);
PARAMETER(DTL.Made_to_Order_Code);
PARAMETER(DTL.Item_Category_Number_2);
PARAMETER(DTL.Transportation_Equip_Type);
PARAMETER(DTL.Item_Category_Number_3);
PARAMETER(DTL.Item_Category_Code_3);
PARAMETER(DTL.Item_Category_Number_4);
PARAMETER(DTL.GL_Sub_Code);
PARAMETER(DTL.Item_Category_Number_6);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(DTL.PM_Line_Number);
PARAMETER(DTL.Primal_Group_Code);
PARAMETER(2ND.Piece_Count_Item);
PARAMETER(2ND.Pieces_Per_Bag);
PARAMETER(DTL.Bags_Per_Unit);
PARAMETER(DTL.Export_Domestic);
PARAMETER(2ND.Print_On_Schedule);
PARAMETER(2ND.Fresh_Inv_Allocation_Seq);
PARAMETER(2ND.Fresh_Sched_As_Ordered);
PARAMETER(2ND.Frozen_Inv_Allocation_Seq);
PARAMETER(DTL.Item_Meat_Cost_Group_Code);
PARAMETER(DTL.UPC_Code_2);
PARAMETER(DTL.Item_Target_Price);
PARAMETER(DTL.Minimum_Piece_Weight);
PARAMETER(DTL.Maximum_Piece_Weight);
PARAMETER(DTL.Seaboard_Equivalent_Item);
PARAMETER(2ND.Production_Qty_Per_Shift);
PARAMETER(2ND.Scheduling_Position_Grade);
PARAMETER(DTL.Sold_100_Percent_Frozen);
PARAMETER(2ND.Maximum_Shifts);
PARAMETER(DTL.Value_Added_Sts);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Condition_Desc_1_USR);
PARAMETER(DTL.Item_Category_Type_Desc);
PARAMETER(DTL.USR_Description_New);
PARAMETER(DTL.Item_Structure_Type_Desc);
PARAMETER(DTL.Item_Structure_Group_Desc);
PARAMETER(DTL.Item_Structure_Class_Desc);
PARAMETER(DTL.UOM_Description_1_USR);
PARAMETER(DTL.UOM_Description_2_USR);
PARAMETER(DTL.UOM_Description_3_USR);
PARAMETER(DTL.UOM_Description_4_USR);
PARAMETER(DTL.Commodity_Market_Desc);
PARAMETER(DTL.Commodity_Price_Desc);
PARAMETER(DTL.Condition_Desc_10_USR);
PARAMETER(DTL.Status_Description);
PARAMETER(DTL.Export_Domestic_Desc_USR);
PARAMETER(2ND.Condition_Desc_2_USR);
PARAMETER(2ND.Condition_Desc_3_USR);
PARAMETER(2ND.Condition_Desc_4_USR);
PARAMETER(2ND.Fresh_Inv_Alloc_Desc_USR);
PARAMETER(2ND.USR_Description);
PARAMETER(2ND.Warehouse_Description);
PARAMETER(2ND.Primal_Group_Desc);
PARAMETER(DTL.Price_Method_Description);
PARAMETER(2ND.Department_Description);
PARAMETER(2ND.Text_USR_7);
{
 //?Execute internal function

 //?Move of various fields to screens and get descriptions.
 DO;

 //?Populate descriptions and conditions
 // PAR.Condition Desc. 1  USR = Condition name of PAR.Item Type Code
 PAR.Condition_Desc_1_USR = RTVCND(PAR.Item_Type_Code);

 EXECUTE FUNCTION(RTV Item Category /Itm RT) TYPE(RTVOBJ) FILE(PDJIREP)          AC1701444;
 PARAMETER(4);
 PARAMETER(PAR.GL_Sub_Code);
 PARAMETER(PAR.Item_Category_Type_Desc);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  // PAR.Description = DB1.Description
  PAR.Description = DB1.Description;

  QUIT;

 }

 EXECUTE FUNCTION(RTV Item Level Descr   RT) TYPE(RTVOBJ) FILE(PDILREP)          AC1287285;
 PARAMETER(PAR.Item_Level);
 PARAMETER(PAR.USR_Description_New);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Type_Desc);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Group_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Class_Desc);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program Rtv UOM Description   XF.
 CALL PROGRAM(Rtv UOM Description   XF) ('PBJGXFR');
 PARAMETER(PAR.UOM_Pricing_Dft);
 PARAMETER(PAR.UOM_Description_4_USR);

 // Call program Rtv UOM Description   XF.
 CALL PROGRAM(Rtv UOM Description   XF) ('PBJGXFR');
 PARAMETER(PAR.UOM_Primary_Dft);
 PARAMETER(PAR.UOM_Description_1_USR);

 // Call program Rtv UOM Description   XF.
 CALL PROGRAM(Rtv UOM Description   XF) ('PBJGXFR');
 PARAMETER(PAR.UOM_Second_Dft);
 PARAMETER(PAR.UOM_Description_2_USR);

 // Call program Rtv UOM Description   XF.
 CALL PROGRAM(Rtv UOM Description   XF) ('PBJGXFR');
 PARAMETER(PAR.UOM_Third_Dft);
 PARAMETER(PAR.UOM_Description_3_USR);

 EXECUTE FUNCTION(RTV Commod. Mkts Desc  RT) TYPE(RTVOBJ) FILE(OMFYREP)          AC1277934;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Market_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Commod Group Desc  RT) TYPE(RTVOBJ) FILE(OMFZREP)          AC1277945;
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Commodity_Price_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Condition Desc. 10 USR = Condition name of PAR.Item Pricing Operation
 PAR.Condition_Desc_10_USR = RTVCND(PAR.Item_Pricing_Operation);

 // PAR.Status Description = Condition name of PAR.Record Status
 PAR.Status_Description = RTVCND(PAR.Record_Status);

 // PAR.Export/Domestic Desc  USR = Condition name of PAR.Export/Domestic
 PAR.Export_Domestic_Desc_USR = RTVCND(PAR.Export_Domestic);

 //?2nd -- Screen 2
 // PAR.Condition Desc. 2  USR = Condition name of PAR.Package Type Code
 PAR.Condition_Desc_2_USR = RTVCND(PAR.Package_Type_Code);

 // PAR.Condition Desc. 3  USR = Condition name of PAR.Base/Conv/Loss Item
 PAR.Condition_Desc_3_USR = RTVCND(PAR.Base_Conv_Loss_Item);

 // PAR.Condition Desc. 4  USR = Condition name of PAR.Variety/Rendered/Cut
 PAR.Condition_Desc_4_USR = RTVCND(PAR.Variety_Rendered_Cut);

 // PAR.Fresh Inv Alloc Desc  USR = Condition name of PAR.Fresh Inv Allocation Seq
 PAR.Fresh_Inv_Alloc_Desc_USR = RTVCND(PAR.Fresh_Inv_Allocation_Seq);

 // PAR.Text USR 7 = Condition name of PAR.Frozen Inv Allocation Seq
 PAR.Text_USR_7 = RTVCND(PAR.Frozen_Inv_Allocation_Seq);

 EXECUTE FUNCTION(Rtv Quality Level Desc RT) TYPE(RTVOBJ) FILE(CAAIREP)          AC1124632;
 PARAMETER(PAR.Quality_Level);
 PARAMETER(PAR.USR_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Warehouse_Description);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

 EXECUTE FUNCTION(Rtv Primal Grp Desc   RT) TYPE(RTVOBJ) FILE(PDLLREP)           AC1476186;
 PARAMETER(PAR.Primal_Group_Code);
 PARAMETER(PAR.Primal_Group_Desc);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Item Default does not have the company, so files that are normally
 //?accessed by Company will be accessed using a new access path/rtvobj
 //?that reads the first record and quits.
 EXECUTE FUNCTION(Rtv Price Mth Dsc Dflt RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1701083;
 PARAMETER(PAR.Price_Method_Default);
 PARAMETER(PAR.Price_Method_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Prod Dept Nme DfltRT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1701086;
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Department_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?3rd -- Screen 3
 ENDDO;

}


//?Unit Weight Rules with Update on Item Default
DO;

//?Set Allow Weight to Yes,
// DTL.Allow Weight Input = CND.yes
DTL.Allow_Weight_Input = 'Y';

//?Test if there are currently any company items.
EXECUTE FUNCTION(RTV Assign Co Flag     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1701172;
PARAMETER(DTL.Item_Code);
PARAMETER(WRK.Company_Assigned_Usr);
{
 //?USER: Initialize routine

 // LCL.Count Records        USR = CON.*ZERO
 LCL.Count_Records_USR = *ZERO;

 //?USER: Process Data record

 //?01/27/06 PKD Remove hard coding of Guymon & St. Joseph
 // LCL.Count Records        USR = LCL.Count Records        USR + CON.1
 LCL.Count_Records_USR = LCL.Count_Records_USR + 1;

 // PAR.Company Assigned Usr = CVTVAR(DB1.Company Number)
 PAR.Company_Assigned_Usr = CVTVAR(DB1.Company_Number);

 CASE;

 // IF LCL.Count Records        USR is GT 1
 IF LCL.Count_Records_USR > 1;

 // PAR.Company Assigned Usr = CON.All
 PAR.Company_Assigned_Usr = 'All';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Company Assigned Usr NE WRK.BLANK
IF WRK.Company_Assigned_Usr <> WRK.BLANK;

CASE;

// IF DTL.Item Type Code is FG/WP
IF DTL.Item_Type_Code = 'FG'/'WP';

//?If Catch Weight Sts = N (Std Weight every time)
//?                        (Unit weight will be maintained at itemlvl
//?If Catch Weight Sts = Y (Unit weight will be maintained at complvl
CASE;

// IF DTL.Catch Weight Status is no
IF DTL.Catch_Weight_Status = 'N';

//?Allow the user to change the Unit Wgt, and on update then
//?also update all the Company Item records for this item with
//?the unit weight from the Item default
// DTL.Allow Weight Input = CND.yes
DTL.Allow_Weight_Input = 'Y';

// IF DTL.Catch Weight Status is yes
IF DTL.Catch_Weight_Status = 'Y';

//?Once a company item has been created then the unit weight will
//?be maintained at the CoItem.  Item default unit's weight
//?will be displayed only.
// DTL.Allow Weight Input = CND.no
DTL.Allow_Weight_Input = 'N';

ENDIF;

// IF DTL.Item Type Code is Packaging and Supplies
IF DTL.Item_Type_Code = 'PS';

//?Once a company item has been created then the unit weight will
//?be maintained at the CoItem.  Item default unit's weight
//?will be displayed only.
// DTL.Allow Weight Input = CND.no
DTL.Allow_Weight_Input = 'N';

// IF DTL.Item Type Code is Raw Material
IF DTL.Item_Type_Code = 'RM';

//?Allow the user to change the Unit Wgt, and on update then
//?also update all the Company Item records for this item with
//?the unit weight from the Item default
// DTL.Allow Weight Input = CND.yes
DTL.Allow_Weight_Input = 'Y';

ENDIF;

ENDIF;

ENDDO;

// DTL.Condition Desc. 1  USR = Condition name of DTL.Item Type Code
DTL.Condition_Desc_1_USR = RTVCND(DTL.Item_Type_Code);

// 2ND.Condition Desc. 1  USR = Condition name of DTL.Item Type Code
2ND.Condition_Desc_1_USR = RTVCND(DTL.Item_Type_Code);

// 3RD.Condition Desc. 1  USR = Condition name of DTL.Item Type Code
3RD.Condition_Desc_1_USR = RTVCND(DTL.Item_Type_Code);

// 2ND.Label Type Descr Usr = Condition name of 2ND.Label Type
2ND.Label_Type_Descr_Usr = RTVCND(2ND.Label_Type);

//?If Item Struc typ = Co-pack & Item Struc Group Sweet Baby Rays value req
CASE;

// IF DTL.Item Structure Type Code is EQ 900
IF DTL.Item_Structure_Type_Code = 900;

// AND DTL.Item Structure Group Code is Sweet Baby Ray's Products
AND DTL.Item_Structure_Group_Code = 909;

CASE;

// IF 2ND.Packages per case is Not entered
IF 2ND.Packages_per_case = 0;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(2ND.Packages_per_case);

ENDIF;

CASE;

// IF 2ND.Package Level size is Not entered
IF 2ND.Package_Level_size = 0;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(2ND.Package_Level_size);

ENDIF;

ENDIF;

//?12/08/2020 JBB E17020 - [ME] Error in AS400 item default settings
//?If Variety/Rendered/Cut flag is V/R, get Std Wgt/Hd from Co Item
CASE;

// IF 2ND.Variety/Rendered/Cut is Variety/Rendered
IF 2ND.Variety_Rendered_Cut = 'R'/'V';

// AND 2ND.Std Weight/Head (Var/Ren) is Equal to zero
AND 2ND.Std_Weight_Head_Var_Ren = *ZERO;

EXECUTE FUNCTION(Rtv 1st Std Wgt/Hd V/R RT) TYPE(RTVOBJ) FILE(CABZREP)          AC2193947;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Std_Weight_Head_Var_Ren);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?If Std Weight/Head (Var/Ren) <> 0, return the value
 CASE;

 // IF DB1.Std Weight/Head (Var/Ren) is Not equal zero
 IF DB1.Std_Weight_Head_Var_Ren <> *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


ENDIF;

EXECUTE FUNCTION(Val Item Fields Rules  IF) TYPE(EXCINTFUN)                     AC1701270;
PARAMETER(PGM.*Program_mode);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary_Dft);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second_Dft);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third_Dft);
PARAMETER(DTL.UOM_Pricing_Dft);
PARAMETER(DTL.Unit_Weight);
PARAMETER(2ND.Quality_Level);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(2ND.Minimum_Weight_Per_Case);
PARAMETER(2ND.Maximum_Weight_Per_Case);
PARAMETER(2ND.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Vendor_item_Default_Dft);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(2ND.Transportation_Temp);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(2ND.Package_Type_Code);
PARAMETER(2ND.Fresh_Chilling_Time);
PARAMETER(2ND.Base_Conv_Loss_Item);
PARAMETER(2ND.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(2ND.Std_Weight_Head_Var_Ren);
PARAMETER(2ND.Pieces_Per_Head);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(2ND.Pallet_Tare_Weight);
PARAMETER(2ND.Misc_Tare_Weight);
PARAMETER(DTL.Production_Lead_Days);
PARAMETER(DTL.Packaging_Code);
PARAMETER(DTL.Item_Market_Code);
PARAMETER(DTL.TF_Co_Ownership_Sts);
PARAMETER(DTL.Agrimetrics_group);
PARAMETER(DTL.Agrimetrics_pack);
PARAMETER(DTL.Agrimetrics_grade);
PARAMETER(DTL.PA_Base_Avail_Rpt_Include);
PARAMETER(DTL.PM_Pounds_per_Hour);
PARAMETER(DTL.Item_Frt_Overage_Prc_UOM);
PARAMETER(2ND.Packages_per_case);
PARAMETER(DTL.Use_Freeze_Sell_By_Days);
PARAMETER(DTL.PM_Batch_Size);
PARAMETER(2ND.Package_Level_size);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
PARAMETER(DTL.Std_Costing_Unit_Weight);
PARAMETER(DTL.FP_Std_Green_Weight);
PARAMETER(DTL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(DTL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(DTL.PM_Formula_LBS_Per_Hour);
PARAMETER(DTL.PM_Finished_LBS_Per_Hour);
PARAMETER(DTL.SH_Unused_was_broker);
PARAMETER(DTL.PM_Raw_Material_Type_Code);
PARAMETER(2ND.Seconds_Item);
PARAMETER(DTL.Print_on_Realization_Rpt);
PARAMETER(DTL.Unit_Weight_Change_Sts);
PARAMETER(DTL.Maximum_Audit_Value);
PARAMETER(DTL.Minimum_Audit_Value);
PARAMETER(DTL.Market_Overage);
PARAMETER(DTL.Standard_Overage_Underage);
PARAMETER(DTL.Item_Pricing_Operation);
PARAMETER(DTL.Item_Pricing_Constant);
PARAMETER(2ND.Default_Warehouse);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Price_Method_Default);
PARAMETER(2ND.Department_Code);
PARAMETER(DTL.Group_for_Packaging);
PARAMETER(DTL.Item_Category_Number_1);
PARAMETER(DTL.Made_to_Order_Code);
PARAMETER(DTL.Item_Category_Number_2);
PARAMETER(DTL.Transportation_Equip_Type);
PARAMETER(DTL.Item_Category_Number_3);
PARAMETER(DTL.Item_Category_Code_3);
PARAMETER(DTL.Item_Category_Number_4);
PARAMETER(DTL.GL_Sub_Code);
PARAMETER(DTL.Item_Category_Number_5);
PARAMETER(DTL.Item_Structure_Sub_Class);
PARAMETER(DTL.Item_Category_Number_6);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(DTL.Item_Category_Number_7);
PARAMETER(DTL.Item_Exc_Man_Prc_Excp);
PARAMETER(DTL.Item_Category_Number_8);
PARAMETER(DTL.Item_Prod_Sched_Send_PFS);
PARAMETER(DTL.Item_Category_Number_9);
PARAMETER(DTL.Item_Category_Code_9);
PARAMETER(DTL.Item_Category_Number_10);
PARAMETER(DTL.Item_Category_Code_10);
PARAMETER(DTL.PM_Line_Number);
PARAMETER(2ND.Primal_Group_Code);
PARAMETER(2ND.Piece_Count_Item);
PARAMETER(2ND.Pieces_Per_Bag);
PARAMETER(2ND.Bags_Per_Unit);
PARAMETER(DTL.Export_Domestic);
PARAMETER(2ND.Print_On_Schedule);
PARAMETER(2ND.Fresh_Inv_Allocation_Seq);
PARAMETER(2ND.Fresh_Sched_As_Ordered);
PARAMETER(2ND.Frozen_Inv_Allocation_Seq);
PARAMETER(DTL.Item_Meat_Cost_Group_Code);
PARAMETER(DTL.UPC_Code_2);
PARAMETER(DTL.Item_Target_Price);
PARAMETER(DTL.Minimum_Piece_Weight);
PARAMETER(DTL.Maximum_Piece_Weight);
PARAMETER(DTL.Seaboard_Equivalent_Item);
PARAMETER(2ND.Production_Qty_Per_Shift);
PARAMETER(2ND.Scheduling_Position_Grade);
PARAMETER(DTL.Sold_100_Percent_Frozen);
PARAMETER(2ND.Maximum_Shifts);
PARAMETER(DTL.Value_Added_Sts);
PARAMETER(DTL.Label_Type);
PARAMETER(DTL.Item_TF_Exempt_Code);
PARAMETER(DTL.Item_TF_Classification);
PARAMETER(DTL.Default_Workcenter);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time_1);
PARAMETER(DTL.User_Id_1);
PARAMETER(DTL.Job_Name_1);
PARAMETER(DTL.Job_Date_1);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER('D');
{
 //?Execute internal function

 //?Special Note will need Catch Weight Sts Before image
 //?when populating the parms.
 //?Field validation without Item Type
 DO;

 //?The following fields are being vaidated for all items with the
 //?exceptions of Co-Packer.  Co-Packer we do not make and the
 //?item structure type = 900.  When you see NCP,
 //?that means only validate on a Non Co-Packer Item
 CASE;

 // IF PR2.Item Type Code is Packaging and Supplies
 IF PR2.Item_Type_Code = 'PS';

 //?dont validate weight and conv factors for BOXES
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Unit weight is required if Active Item
 CASE;

 // IF PR2.Unit Weight is Equal to zero
 IF PR2.Unit_Weight = *ZERO;

 CASE;

 // IF PR2.Record Status is Active
 IF PR2.Record_Status = 'A';

 // Send error message - 'Weight entry required for this item.'
 ERROR(USR0514);
 MSGPARM(PR2.Unit_Weight);

 ENDIF;

 ENDIF;

 //?Unit of measure, conversion, & oper, validation and data changes.
 DO;

 //?If U/M 2 entered then Conv. Factor 1 & operation 1 is required
 CASE;

 // IF PR2.U/M - Second Dft is Entered
 IF PR2.UOM_Second_Dft <> *BLANK;

 CASE;

 // IF PR2.Conversion Factor 1 is Not Entered
 IF PR2.Conversion_Factor_1 = *ZERO;

 // Send error message - 'Conversion Factor 1 is required'
 ERROR(USR0364);
 MSGPARM(PR2.Conversion_Factor_1);

 ENDIF;

 CASE;

 // IF PR2.Operation Factor 1 is Not Entered
 IF PR2.Operation_Factor_1 = *BLANK;

 // Send error message - 'Operation Factor 1 is required'
 ERROR(USR1011);
 MSGPARM(PR2.Operation_Factor_1);

 ENDIF;

 ENDIF;

 //?If U/M 3 entered then U/M 2, Conv. 2 & operation 2 required
 CASE;

 // IF PR2.U/M - Third Dft is Entered
 IF PR2.UOM_Third_Dft <> *BLANK;

 CASE;

 // IF PR2.U/M - Second Dft is Not Entered
 IF PR2.UOM_Second_Dft = *BLANK;

 // Send error message - 'U/M - Second is required if U/M - Third is entered'
 ERROR(USR0886);
 MSGPARM(PR2.UOM_Second_Dft);
 MSGPARM(PR2.Conversion_Factor_1);

 ENDIF;

 CASE;

 // IF PR2.Conversion Factor 2 is Not Entered
 IF PR2.Conversion_Factor_2 = *ZERO;

 // Send error message - 'Conversion Factor 2 is required'
 ERROR(USR0365);
 MSGPARM(PR2.Conversion_Factor_2);

 ENDIF;

 CASE;

 // IF PR2.Operation Factor 2 is Not Entered
 IF PR2.Operation_Factor_2 = *BLANK;

 // Send error message - 'Operation Factor 2 is required'
 ERROR(USR1012);
 MSGPARM(PR2.Operation_Factor_2);

 ENDIF;

 ENDIF;

 //?Clear conversion/operation factor 1 if u/m 2 not entered
 CASE;

 // IF PR2.U/M - Second Dft is Not Entered
 IF PR2.UOM_Second_Dft = *BLANK;

 // PR2.Conversion Factor 1 = CND.Not Entered
 PR2.Conversion_Factor_1 = *ZERO;

 // PR2.Operation Factor 1 = CND.Not Entered
 PR2.Operation_Factor_1 = *BLANK;

 ENDIF;

 //?Clear conversion/operation 2 if u/m 3 not entered
 CASE;

 // IF PR2.U/M - Third Dft is Not Entered
 IF PR2.UOM_Third_Dft = *BLANK;

 // PR2.Conversion Factor 2 = CND.Not Entered
 PR2.Conversion_Factor_2 = *ZERO;

 // PR2.Operation Factor 2 = CND.Not Entered
 PR2.Operation_Factor_2 = *BLANK;

 ENDIF;

 ENDDO;

 //?If Second UM is LB, then Conversion Factor 1 must be = Unit Weight
 CASE;

 // IF PR2.U/M - Second Dft is Pounds
 IF PR2.UOM_Second_Dft = 'LB';

 CASE;

 // IF PR2.Conversion Factor 1 NE PR2.Unit Weight
 IF PR2.Conversion_Factor_1 <> PR2.Unit_Weight;

 // Send error message - 'Conversion Factor 1 must equal to the Unit Weight.'
 ERROR(USR2320);
 MSGPARM(PR2.Conversion_Factor_1);

 ENDIF;

 ENDIF;

 //?If Third UM is LB, then Conversion Factor 1 must be = Unit Weight
 CASE;

 // IF PR2.U/M - Third Dft is Pounds
 IF PR2.UOM_Third_Dft = 'LB';

 CASE;

 // IF PR2.Conversion Factor 2 NE PR2.Unit Weight
 IF PR2.Conversion_Factor_2 <> PR2.Unit_Weight;

 // Send error message - 'Conversion Factor 2 must equal to the Unit Weight.'
 ERROR(USR2321);
 MSGPARM(PR2.Conversion_Factor_2);

 ENDIF;

 ENDIF;

 //?Pricing UOM must be set up as primary, second or third UOM
 CASE;

 // IF PR2.U/M - Pricing Dft NE PR2.U/M - Primary Dft
 IF PR2.UOM_Pricing_Dft <> PR2.UOM_Primary_Dft;

 // AND PR2.U/M - Pricing Dft NE PR2.U/M - Second Dft
 AND PR2.UOM_Pricing_Dft <> PR2.UOM_Second_Dft;

 // AND PR2.U/M - Pricing Dft NE PR2.U/M - Third Dft
 AND PR2.UOM_Pricing_Dft <> PR2.UOM_Third_Dft;

 // Send error message - 'Pricing U/M must be setup as primary, second or third UOM.'
 ERROR(USR0543);
 MSGPARM(PR2.UOM_Pricing_Dft);
 MSGPARM(PR2.UOM_Primary_Dft);
 MSGPARM(PR2.UOM_Second_Dft);
 MSGPARM(PR2.UOM_Third_Dft);

 ENDIF;

 ENDIF;

 //?If Chg mode and Catch wgt sts is chg send info msg - NCP
 CASE;

 // IF PR3.Catch Weight Status NE PR2.Catch Weight Status
 IF PR3.Catch_Weight_Status <> PR2.Catch_Weight_Status;

 // AND PR1.*Program mode is *CHANGE
 AND PR1.*Program_mode = 'CHG';

 // AND PR2.Item Structure Type Code is NE 900
 AND PR2.Item_Structure_Type_Code <> 900;

 EXECUTE FUNCTION(Rtv On Hand Qty Item   RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1319157;
 PARAMETER(PR2.Item_Code);
 PARAMETER(LCL.Quantity_on_Hand_UOM1);
 {
  //?USER: Initialize routine

  // PAR.Quantity on Hand - U/M1 = CON.*ZERO
  PAR.Quantity_on_Hand_UOM1 = *ZERO;

  //?USER: Process Data record

  // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.On Hand U/M1 Sum
  PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.On_Hand_UOM1_Summary;

 }

 CASE;

 // IF LCL.Quantity on Hand - U/M1 is not equal zero
 IF LCL.Quantity_on_Hand_UOM1 <> *ZERO;

 // Send information message - 'WARNING: Catch weight status changed, quantity on hand not 0.'
 MESSAGE(USR1974 *INFO);

 ENDIF;

 ENDIF;

 //?Edit Commodity Group U/M to EQ Pricing U/M
 CASE;

 // IF PR2.Commodity Price Group is Not Blank
 IF PR2.Commodity_Price_Group <> *BLANK;

 EXECUTE FUNCTION(RTV Commod U/M         RT) TYPE(RTVOBJ) FILE(OMFZREP)          AC1366761;
 PARAMETER(PR2.Commodity_Price_Group);
 PARAMETER(LCL.UOM_Pricing);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PR2.U/M - Pricing Dft NE LCL.U/M - Pricing
 IF PR2.UOM_Pricing_Dft <> LCL.UOM_Pricing;

 // Send error message - 'Commodity Group's U/M must equal Pricing U/M.'
 ERROR(USR2165);
 MSGPARM(PR2.Commodity_Price_Group);

 ENDIF;

 ENDIF;

 //?If a Pieces Count Item then Pieces/Bags and Pieces/Unit required
 CASE;

 // IF PR2.Piece Count Item is yes
 IF PR2.Piece_Count_Item = 'Y';

 CASE;

 // IF PR2.Pieces Per Bag is EQ Zero
 IF PR2.Pieces_Per_Bag = *ZERO;

 // Send error message - 'Pieces per Bag required for a Piece Count Item.'
 ERROR(USR2517);
 MSGPARM(PR2.Pieces_Per_Bag);

 ENDIF;

 CASE;

 // IF PR2.Bags Per Unit is EQ Zero
 IF PR2.Bags_Per_Unit = *ZERO;

 // Send error message - 'Bags per Unit required for a Piece Count Item.'
 ERROR(USR2518);
 MSGPARM(PR2.Bags_Per_Unit);

 ENDIF;

 //?If a Pieces Count Item then Pieces/Bags and Pieces/Unit required
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PR2.Pieces Per Bag = CON.*ZERO
 PR2.Pieces_Per_Bag = *ZERO;

 // PR2.Bags Per Unit = CON.*ZERO
 PR2.Bags_Per_Unit = *ZERO;

 ENDIF;

 //?Minimum Audit Value cant be greater than Maximum audit value
 CASE;

 // IF PR2.Minimum Audit Value GT PR2.Maximum Audit Value
 IF PR2.Minimum_Audit_Value > PR2.Maximum_Audit_Value;

 // Send error message - 'Minimum Audit Value cannot be greater than Maximum Audit Value.'
 ERROR(USR3405);
 MSGPARM(PR2.Minimum_Audit_Value);
 MSGPARM(PR2.Maximum_Audit_Value);

 ENDIF;

 //?Variety/Rendered then Std Weight/Head (Var/Ren) is required
 CASE;

 // IF PR2.Variety/Rendered/Cut is Variety/Rendered
 IF PR2.Variety_Rendered_Cut = 'R'/'V';

 CASE;

 // IF PR2.Std Weight/Head (Var/Ren) is Equal to zero
 IF PR2.Std_Weight_Head_Var_Ren = *ZERO;

 // Send error message - 'Standard weight per head can't 0 if Variety/Rend/Cut is Variety or Rendere
 ERROR(USR1866);
 MSGPARM(PR2.Std_Weight_Head_Var_Ren);

 ENDIF;

 ENDIF;

 //?Minimum Wgt Per Case cannot be greater than Maximum Wgt Per Case
 CASE;

 // IF PR2.Minimum Weight Per Case GT PR2.Maximum Weight Per Case
 IF PR2.Minimum_Weight_Per_Case > PR2.Maximum_Weight_Per_Case;

 // Send error message - 'Minimum Case Wgt cannot be greater than Maximum Case Wgt'
 ERROR(USR2274);

 ENDIF;

 //?Wip Item Code is entered, Item Type Code can not be = WIP -NCP
 CASE;

 // IF PR2.WIP Item Code is Entered
 IF PR2.WIP_Item_Code <> *ZERO;

 // AND PR2.Item Structure Type Code is NE 900
 AND PR2.Item_Structure_Type_Code <> 900;

 EXECUTE FUNCTION(Rtv Item Type Code     RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1704065;
 PARAMETER(PR2.WIP_Item_Code);
 PARAMETER(LCL.Item_Type_Code_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 CASE;

 // IF LCL.Item Type Code USR is Work in Process
 IF LCL.Item_Type_Code_USR = 'WP';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Invalid WIP Item Code.'
 ERROR(USR3276);
 MSGPARM(PR2.WIP_Item_Code);

 ENDIF;

 ENDIF;

 ENDDO;

 //?Item Type validation rules and field validation
 DO;

 //?The following fields are being vaidated for all items with the
 //?exceptions of Co-Packer.  Co-Packer we do not make and the
 //?item structure type = 900.
 CASE;

 // IF PR2.Item Type Code is Meat
 IF PR2.Item_Type_Code = 'FG'/'RM'/'WP';

 //?If not a finished good, print on realization rpt = N
 CASE;

 // IF PR2.Item Type Code is Not Finished Good
 IF PR2.Item_Type_Code <> 'FG';

 // PR2.Print on Realization Rpt = CND.No
 PR2.Print_on_Realization_Rpt = 'N';

 // PR2.Value Added Sts = CND.no
 PR2.Value_Added_Sts = 'N';

 ENDIF;

 // PR2.Package Type Code = LCL.BLANK
 PR2.Package_Type_Code = LCL.BLANK;

 //?Finished Goods Only
 CASE;

 // IF PR2.Item Type Code is Finished Good
 IF PR2.Item_Type_Code = 'FG';

 //?Variety/Rendered/Cut = Cut then Base/Conv/Loss Item is required
 CASE;

 // IF PR2.Variety/Rendered/Cut is Cut
 IF PR2.Variety_Rendered_Cut = 'C';

 CASE;

 // IF PR2.Base/Conv/Loss Item is Blank
 IF PR2.Base_Conv_Loss_Item = *BLANK;

 // Send error message - 'Base/Converted/Fabricated must be entered if Variety/Rendered/Cut is cut.'
 ERROR(USR1865);
 MSGPARM(PR2.Base_Conv_Loss_Item);

 ENDIF;

 ENDIF;

 //?Validate Minimum Weight Per Case w/Unit Weight
 CASE;

 // IF PR2.Minimum Weight Per Case GT PR2.Unit Weight
 IF PR2.Minimum_Weight_Per_Case > PR2.Unit_Weight;

 // Send error message - 'Minimum Weight Per Case is greater than the Unit Weight.'
 ERROR(USR2285);
 MSGPARM(PR2.Minimum_Weight_Per_Case);

 ENDIF;

 //?Validate Maximum Weight Per Case w/Unit Weight
 CASE;

 // IF PR2.Maximum Weight Per Case LT PR2.Unit Weight
 IF PR2.Maximum_Weight_Per_Case < PR2.Unit_Weight;

 // Send error message - 'Maximum Weight Per Case is less than the Unit Weight.'
 ERROR(USR2286);
 MSGPARM(PR2.Maximum_Weight_Per_Case);

 ENDIF;

 //?Validate Category code 4 (GL Sub Code) is req & must be valid category
 CASE;

 // IF PR2.G/L Sub Code is Not Entered
 IF PR2.GL_Sub_Code = *BLANK;

 // Send error message - 'GL Sub Code is required.'
 ERROR(USR3251);
 MSGPARM(PR2.GL_Sub_Code);

 //?Validate Category code 4 (GL Sub Code) is req & must be valid category
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Item Category /Itm RT) TYPE(RTVOBJ) FILE(PDJIREP)          AC1701444;
 PARAMETER(04);
 PARAMETER(PR2.GL_Sub_Code);
 PARAMETER(LCL.Description);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  // PAR.Description = DB1.Description
  PAR.Description = DB1.Description;

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'GL Sub Code is invalid.'
 ERROR(USR3252);
 MSGPARM(PR2.GL_Sub_Code);

 ENDIF;

 ENDIF;

 //?Check for Label Line 1 empty allow only on CoPacker
 CASE;

 // IF PR2.Item Label Line 1 is Entered
 IF PR2.Item_Label_Line_1 <> *BLANK;

 //?Check for Label Line 1 empty allow only on CoPacker
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PR2.Item Structure Type Code is EQ 900
 IF PR2.Item_Structure_Type_Code = 900;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Item Label required for Finished Goods Item.'
 ERROR(USR3179);
 MSGPARM(PR2.Item_Label_Line_1);

 ENDIF;

 ENDIF;

 //?Convert Label 1 to Upper Case
 CASE;

 // IF PR2.Item Label Line 1 is Entered
 IF PR2.Item_Label_Line_1 <> *BLANK;

 // Execute function CVT to Upper w/SpclChr US.
 EXECUTE FUNCTION(CVT to Upper w/SpclChr US) TYPE(EXCUSRSRC) ('POODUFR');
 PARAMETER(PR2.Item_Label_Line_1);
 PARAMETER(PR2.Item_Label_Line_1);
 {
  E                    AR1        30  1               ARRAY 2
  C                     MOVEA#IMKTX    AR1              LOAD ARRAY
  C                     Z-ADD1         X1      20       SET COUNTER
  C                     Z-ADD1         Y1      20       SET COUNTER
  * * * * * * * CHECK FOR ALPHABETIC CHARACTERS * * * * * * *
  C                     Z-ADD1         Y1
  C           Y1        DOWLT31
  C           AR1,Y1    IFEQ 'a'
  C                     MOVEL'A'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'b'
  C                     MOVEL'B'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'c'
  C                     MOVEL'C'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'd'
  C                     MOVEL'D'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'e'
  C                     MOVEL'E'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'f'
  C                     MOVEL'F'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'g'
  C                     MOVEL'G'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'h'
  C                     MOVEL'H'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'i'
  C                     MOVEL'I'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'j'
  C                     MOVEL'J'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'k'
  C                     MOVEL'K'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'l'
  C                     MOVEL'L'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'm'
  C                     MOVEL'M'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'n'
  C                     MOVEL'N'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'o'
  C                     MOVEL'O'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'p'
  C                     MOVEL'P'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'q'
  C                     MOVEL'Q'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'r'
  C                     MOVEL'R'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 's'
  C                     MOVEL'S'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 't'
  C                     MOVEL'T'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'u'
  C                     MOVEL'U'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'v'
  C                     MOVEL'V'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'w'
  C                     MOVEL'W'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'x'
  C                     MOVEL'X'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'y'
  C                     MOVEL'Y'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'z'
  C                     MOVEL'Z'       AR1,Y1
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     ADD  1         Y1
  C                     END
  C                     MOVEAAR1       #OMLTX           LOAD OUTPUT
 }

 ENDIF;

 CASE;

 // IF PR4.Item Validation USR is Company Item
 IF PR4.Item_Validation_USR = 'C';

 //?Require Miscellaneous Weight per Damon 2/19/13 if not type 740
 CASE;

 // IF PR2.Misc Tare Weight is equal to zero
 IF PR2.Misc_Tare_Weight = *ZERO;

 // AND PR2.Item Structure Type Code is ne 740
 AND PR2.Item_Structure_Type_Code <> 740;

 // Send error message - 'Miscellaneous Tare Weight Required.'
 ERROR(USR3112);

 ENDIF;

 ENDIF;

 ENDIF;

 //?Finished Goods and Raw Material
 CASE;

 // IF PR2.Item Type Code is Finished Good/Raw Matrl
 IF PR2.Item_Type_Code = 'FG'/'RM';

 //?Export/Domestic is required
 CASE;

 // IF PR2.Export/Domestic EQ LCL.BLANK 1               USR
 IF PR2.Export_Domestic = LCL.BLANK_1_USR;

 // Send error message - 'Export/Domestic required for item type code.'
 ERROR(USR2515);
 MSGPARM(PR2.Export_Domestic);

 ENDIF;

 //?Fresh Inv Allocation Seq is required
 CASE;

 // IF PR2.Fresh Inv Allocation Seq EQ LCL.BLANK 1               USR
 IF PR2.Fresh_Inv_Allocation_Seq = LCL.BLANK_1_USR;

 // Send error message - 'Fresh Inv Allocation Seq required for this Item Type Code.'
 ERROR(USR2521);
 MSGPARM(PR2.Fresh_Inv_Allocation_Seq);

 ENDIF;

 //?Fresh Sched As Ordered is required
 CASE;

 // IF PR2.Fresh Sched As Ordered EQ LCL.BLANK 1               USR
 IF PR2.Fresh_Sched_As_Ordered = LCL.BLANK_1_USR;

 // Send error message - 'Fresh Sched As Ordered required for this Item Type Code.'
 ERROR(USR2519);
 MSGPARM(PR2.Fresh_Sched_As_Ordered);

 ENDIF;

 //?Frozen Sched As Ordered is required
 CASE;

 // IF PR2.Frozen Sched As Ordered EQ LCL.BLANK 1               USR
 IF PR2.Frozen_Inv_Allocation_Seq = LCL.BLANK_1_USR;

 // Send error message - 'Frozen Inventory Allocation Seq required for this Item Type Code.'
 ERROR(USR2520);
 MSGPARM(PR2.Frozen_Inv_Allocation_Seq);

 ENDIF;

 //?Default commodity market basis is required
 CASE;

 // IF PR2.Default Commod Mark basis is Not Entered
 IF PR2.Default_Commod_Mark_basis = *BLANK;

 // Send error message - 'Default commodity market must be enterd for FG/RM item type.'
 ERROR(USR1862);
 MSGPARM(PR2.Default_Commod_Mark_basis);

 ENDIF;

 //?Commodity price group is required
 CASE;

 // IF PR2.Commodity Price Group is Not entered
 IF PR2.Commodity_Price_Group = *BLANK;

 // Send error message - 'Commodity price group must be entered for FG/RM item type.'
 ERROR(USR1863);
 MSGPARM(PR2.Commodity_Price_Group);

 ENDIF;

 //?Validate Market & Price Group combiniation.
 DO;

 CASE;

 // IF PR2.Item Type Code is Finished Good/Raw Matrl
 IF PR2.Item_Type_Code = 'FG'/'RM';

 EXECUTE FUNCTION(RTV Last Market PrcDte RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1557214;
 PARAMETER(PR2.Default_Commod_Mark_basis);
 PARAMETER(PR2.Commodity_Price_Group);
 PARAMETER(LCL.Market_Price_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Prices for this group not available.'
 ERROR(USR2836);
 MSGPARM(PR2.Default_Commod_Mark_basis);
 MSGPARM(PR2.Commodity_Price_Group);

 ENDIF;

 ENDIF;

 ENDDO;

 ENDIF;

 //?Finished Goods and Work in Process
 CASE;

 // IF PR2.Item Type Code is FG/WP
 IF PR2.Item_Type_Code = 'FG'/'WP';

 //?Item Structure Type Code is required
 CASE;

 // IF PR2.Item Structure Type Code is Not Entered
 IF PR2.Item_Structure_Type_Code = *ZERO;

 // Send error message - 'Item Structure Type is required.'
 ERROR(USR3233);
 MSGPARM(PR2.Item_Structure_Type_Code);

 ENDIF;

 //?Item Structure Group Code is required
 CASE;

 // IF PR2.Item Structure Group Code is Not Entered
 IF PR2.Item_Structure_Group_Code = *ZERO;

 // Send error message - 'Item Structure Group is required.'
 ERROR(USR3234);
 MSGPARM(PR2.Item_Structure_Group_Code);

 ENDIF;

 //?Item Structure Class Code is required
 CASE;

 // IF PR2.Item Structure Class Code is Equal Zero
 IF PR2.Item_Structure_Class_Code = *ZERO;

 // Send error message - 'Item Structure Class is required.'
 ERROR(USR3235);
 MSGPARM(PR2.Item_Structure_Class_Code);

 ENDIF;

 //?Partial Item Code & Reject Code Valid - Non CoPacker Item only
 DO;

 CASE;

 // IF PR2.Item Structure Type Code is NE 900
 IF PR2.Item_Structure_Type_Code <> 900;

 //?VAL: Partial Code - Do not validation on Co-Packer
 CASE;

 // IF PR2.Partial Item Code is Entered
 IF PR2.Partial_Item_Code <> *ZERO;

 // Call program Val Itm/Prt or Reject  XF.
 CALL PROGRAM(Val Itm/Prt or Reject  XF) ('PPGBXFR');
 PARAMETER(PR2.Item_Code);
 PARAMETER(PR2.Partial_Item_Code);
 PARAMETER(PR2.Partial_Item_Code);
 PARAMETER(PR2.Partial_Item_Code);
 PARAMETER(LCL.Item_Code_Error_Sts_Usr);

 CASE;

 // IF LCL.Item Code Error Sts Usr is Greater then 5 Positions
 IF LCL.Item_Code_Error_Sts_Usr = 'G';

 // Send error message - 'Partial/WIP Reject Code must be 5 digits or less.'
 ERROR(USR3229);
 MSGPARM(PR2.Partial_Item_Code);

 // IF LCL.Item Code Error Sts Usr is Item Code FG/WIP Error
 IF LCL.Item_Code_Error_Sts_Usr = 'I';

 //?Partial code can not be a finished goods or WIP
 //?Ready by Partial Code -- Item Default By Item code
 // Send error message - 'Partial/WIP Reject Code cannot be an existing Finished or WIP Item Code.'
 ERROR(USR3230);
 MSGPARM(PR2.Partial_Item_Code);

 // IF LCL.Item Code Error Sts Usr is Partial Item Code Fnd Err
 IF LCL.Item_Code_Error_Sts_Usr = 'P';

 //?Partial code can not exist for another Partial code
 //?Ready by Partial Code -- Item Default By Partial Code
 // Send error message - 'Partial/WIP Reject Code already exist on another Finished or WIP Item.'
 ERROR(USR3231);
 MSGPARM(PR2.Partial_Item_Code);

 // IF LCL.Item Code Error Sts Usr is Reject Item Code Fnd Err
 IF LCL.Item_Code_Error_Sts_Usr = 'R';

 //?Partial code can not exist for another Reject
 //?Ready by Partial Code -- Item Default By Reject
 // Send error message - 'Partial/WIP Reject Code already exist on another Finished or WIP Item.'
 ERROR(USR3231);
 MSGPARM(PR2.Partial_Item_Code);

 ENDIF;

 ENDIF;

 //?VAL: Reject Code - Do not validation on Co-Packer
 CASE;

 // IF PR2.WIP Reject Code is Entered
 IF PR2.WIP_Reject_Code <> *ZERO;

 // Call program Val Itm/Prt or Reject  XF.
 CALL PROGRAM(Val Itm/Prt or Reject  XF) ('PPGBXFR');
 PARAMETER(PR2.Item_Code);
 PARAMETER(PR2.WIP_Reject_Code);
 PARAMETER(PR2.WIP_Reject_Code);
 PARAMETER(PR2.WIP_Reject_Code);
 PARAMETER(LCL.Item_Code_Error_Sts_Usr);

 CASE;

 // IF LCL.Item Code Error Sts Usr is Greater then 5 Positions
 IF LCL.Item_Code_Error_Sts_Usr = 'G';

 // Send error message - 'Partial/WIP Reject Code must be 5 digits or less.'
 ERROR(USR3229);
 MSGPARM(PR2.Partial_Item_Code);

 // IF LCL.Item Code Error Sts Usr is Item Code FG/WIP Error
 IF LCL.Item_Code_Error_Sts_Usr = 'I';

 //?Reject code can not be a finished goods or WIP
 //?Ready by Reject Code -- Item Default By Item code
 // Send error message - 'Partial/WIP Reject Code cannot be an existing Finished or WIP Item Code.'
 ERROR(USR3230);
 MSGPARM(PR2.Partial_Item_Code);

 // IF LCL.Item Code Error Sts Usr is Partial Item Code Fnd Err
 IF LCL.Item_Code_Error_Sts_Usr = 'P';

 //?Reject code can not exist for another Partial code
 //?Ready by Reject Code -- Item Default by Partial Code
 // Send error message - 'Partial/WIP Reject Code already exist on another Finished or WIP Item.'
 ERROR(USR3231);
 MSGPARM(PR2.Partial_Item_Code);

 // IF LCL.Item Code Error Sts Usr is Reject Item Code Fnd Err
 IF LCL.Item_Code_Error_Sts_Usr = 'R';

 //?Reject code can not exist for another Reject
 //?Read by Reject Code --_Item Default by Reject Code
 // Send error message - 'Partial/WIP Reject Code already exist on another Finished or WIP Item.'
 ERROR(USR3231);
 MSGPARM(PR2.Partial_Item_Code);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDDO;

 //?Finished Goods and Work in Process
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If credit item status is yes, item type must be FG or WP
 CASE;

 // IF PR2.Credit Item Status is yes
 IF PR2.Credit_Item_Status = 'Y';

 // Send error message - 'Credit Items must have an item type of 'FG'.'
 ERROR(USR1943);
 MSGPARM(PR2.Credit_Item_Status);

 ENDIF;

 ENDIF;

 //?Variety/Rendered/Cut is Cut, then Base/Conv/Loss Item is req
 CASE;

 // IF PR2.Variety/Rendered/Cut is Cut
 IF PR2.Variety_Rendered_Cut = 'C';

 //?Base/Conv/Loss must be entered
 CASE;

 // IF PR2.Base/Conv/Loss Item is Blank
 IF PR2.Base_Conv_Loss_Item = *BLANK;

 // Send error message - 'Base/Converted/Fabricated must be entered if Variety/Rendered/Cut is cut.'
 ERROR(USR1865);
 MSGPARM(PR2.Base_Conv_Loss_Item);

 ENDIF;

 ENDIF;

 //?Variety/Rendered/Cut must be entered
 CASE;

 // IF PR2.Variety/Rendered/Cut is Not Entered
 IF PR2.Variety_Rendered_Cut = *BLANK;

 // Send error message - 'Variety/Rendering/Cut must be entered for FG/RM Item Type.'
 ERROR(USR1861);
 MSGPARM(PR2.Variety_Rendered_Cut);

 ENDIF;

 //?Default Warehouse
 CASE;

 // IF PR4.Item Validation USR is Company Item
 IF PR4.Item_Validation_USR = 'C';

 //?Warehouse must be entered
 CASE;

 // IF PR2.Default Warehouse is Warehouse Code Blank
 IF PR2.Default_Warehouse = *BLANK;

 // Send error message - 'Warehouse must be entered for Finished Good/Raw Material/Work in Process.'
 ERROR(USR1893);
 MSGPARM(PR2.Default_Warehouse);

 ENDIF;

 ENDIF;

 //?Department code
 CASE;

 // IF PR2.Department Code NE WRK.BLANK
 IF PR2.Department_Code <> WRK.BLANK;

 EXECUTE FUNCTION(Rtv Prod Dept valid   RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1715131;
 PARAMETER(PR2.Department_Code);
 PARAMETER(WRK.Department_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF WRK.Department Description is equal to blank
 IF WRK.Department_Description = *BLANK;

 // Send error message - 'Production Department not found.'
 ERROR(USR1757);
 MSGPARM(PR2.Department_Code);

 ENDIF;

 ENDIF;

 //?Raw Material only
 CASE;

 // IF PR2.Item Type Code is Raw Material
 IF PR2.Item_Type_Code = 'RM';

 //?Base/Conv/Loss Item is required to be Base
 CASE;

 // IF PR2.Base/Conv/Loss Item is Base
 IF PR2.Base_Conv_Loss_Item = 'B';

 //?Base/Conv/Loss Item is required to be Base
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Raw material items must be a base.'
 ERROR(USR2160);
 MSGPARM(PR2.Item_Type_Code);
 MSGPARM(PR2.Base_Conv_Loss_Item);

 ENDIF;

 ENDIF;

 // IF PR2.Item Type Code is Packaging and Supplies
 IF PR2.Item_Type_Code = 'PS';

 //?If not a finished good, print on realization rpt = N
 CASE;

 // IF PR2.Item Type Code is Not Finished Good
 IF PR2.Item_Type_Code <> 'FG';

 // PR2.Print on Realization Rpt = CND.No
 PR2.Print_on_Realization_Rpt = 'N';

 // PR2.Value Added Sts = CND.no
 PR2.Value_Added_Sts = 'N';

 ENDIF;

 //?Package type must be entered for item type 'PS'
 CASE;

 // IF PR2.Package Type Code is *ALL values
 IF PR2.Package_Type_Code = 'B'/'O'/'P';

 //?Package type must be entered for item type 'PS'
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Package type code must be entered for item type 'PS'.'
 ERROR(USR1906);
 MSGPARM(PR2.Package_Type_Code);

 ENDIF;

 //?If credit item status is yes, item type must be FG or WP
 CASE;

 // IF PR2.Credit Item Status is yes
 IF PR2.Credit_Item_Status = 'Y';

 // Send error message - 'Credit Items must have an item type of 'FG'.'
 ERROR(USR1943);
 MSGPARM(PR2.Credit_Item_Status);

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 ENDDO;

}


//?Validate Label Type only on FG-WP
CASE;

// IF 2ND.Item Type Code is FG/WP
IF 2ND.Item_Type_Code = 'FG'/'WP';

CASE;

// IF 2ND.Label Type is Entry Validation
IF 2ND.Label_Type = 'EX'/'E2'/'FG'/'WP'/'E3'/'E4'/'E5'/'E9'/'CC'/'CF'/'CV'/'IN'/'PF'               +
/'UP'/'SW'/'WM'/'KR';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Label Type is Not Valid'
ERROR(USR3512);

ENDIF;

//?Validate Label Type only on FG-WP
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF 2ND.Label Type is *Blank
IF 2ND.Label_Type = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Label Type is Not Valid'
ERROR(USR3512);

ENDIF;

ENDIF;

//?Validate use-freeze/sell by days
CASE;

// IF 2ND.Item Type Code is Finished Goods
IF 2ND.Item_Type_Code = 'FG';

//?Validate use-freeze/sell by days
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF 2ND.Use/Freeze/Sell By Days EQ WRK.ZERO
IF 2ND.Use_Freeze_Sell_By_Days = WRK.ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Use/Freeze/Sell by Days is only used on a Finished Goods'
ERROR(USR3515);

ENDIF;

ENDIF;

//?Validate the TF Exempt prior to update
DO;

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

//?RMC chk is NOT ADD only   01/25/07
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Error Ordtl TFExp Usr = CND.*blanks
LCL.Error_Ordtl_TFExp_Usr = *BLANK;

EXECUTE FUNCTION(Dlt WFo Exempt Info RTV) TYPE(RTVOBJ) FILE(PPBXCPP)            AC1748355;
PARAMETER(JOB.*USER);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete WFO Exempt Info) TYPE(DLTOBJ) FILE(PPBXCPP)             AC1748217;
 PARAMETER(DB1.WFO_User);
 PARAMETER(DB1.WFO_Sequence);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Ship_To_Customer);
}


// Call program Vry Exempt Rules-Item XF.
CALL PROGRAM(Vry Exempt Rules-Item XF) ('PPSCXFR');
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Item_TF_Exempt_Code);
PARAMETER(LCL.Error_Ordtl_TFExp_Usr);

CASE;

// IF DTL.Item TF Exempt Code NE LCL.Item TF Exempt Save Usr
IF DTL.Item_TF_Exempt_Code <> LCL.Item_TF_Exempt_Save_Usr;

// Call program Dsp Item TF Exempt    DF.
CALL PROGRAM(Dsp Item TF Exempt    DF) ('PPSBDFR');
PARAMETER(JOB.*JOB);
PARAMETER(DTL.Item_Code);

CASE;

// IF LCL.Error Ordtl TFExp Usr is Error
IF LCL.Error_Ordtl_TFExp_Usr = 'E';

// Send error message - 'Tf Exempt error due to Item(s) used on Orders'
ERROR(USR3585);
MSGPARM(DTL.Item_TF_Exempt_Code);

ENDIF;

// IF LCL.Error Ordtl TFExp Usr is Error
IF LCL.Error_Ordtl_TFExp_Usr = 'E';

// Call program Dsp Item TF Exempt    DF.
CALL PROGRAM(Dsp Item TF Exempt    DF) ('PPSBDFR');
PARAMETER(JOB.*USER);
PARAMETER(DTL.Item_Code);

// Send error message - 'Tf Exempt error due to Item(s) used on Orders'
ERROR(USR3585);
MSGPARM(DTL.Item_TF_Exempt_Code);

ENDIF;

ENDIF;

ENDDO;

//?Item Category 2
CASE;

// IF 3RD.Item Category Code 2 is Not Entered
IF 3RD.Transportation_Equip_Type = *BLANK;

// 3RD.Item Category Number 2 = CON.*ZERO
3RD.Item_Category_Number_2 = *ZERO;

//?Item Category 2
// IF *OTHERWISE
IF *OTHERWISE;

// 3RD.Item Category Number 2 = CON.2
3RD.Item_Category_Number_2 = 2;

EXECUTE FUNCTION(Rtv Item Ctg Desc     RT) TYPE(RTVOBJ) FILE(PDJIREP)           AC1627391;
PARAMETER(PAR.Company_Number);
PARAMETER(2);
PARAMETER(3RD.Transportation_Equip_Type);
PARAMETER(3RD.USR_Comment_1);
PARAMETER(NLL.Item_Category_Type_Number);
PARAMETER(NLL.Item_Category_Type_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF 3RD.USR Comment 1 is Eq Blank
IF 3RD.USR_Comment_1 = *BLANK;

// Send error message - 'Invalid Category'
ERROR(USR4629);
MSGPARM(DTL.Transportation_Equip_Type);

ENDIF;

ENDIF;

//?Item Category 3
CASE;

// IF 3RD.Item Category Code 3 is Not Entered
IF 3RD.Item_Category_Code_3 = *BLANK;

// 3RD.Item Category Number 3 = CON.*ZERO
3RD.Item_Category_Number_3 = *ZERO;

//?Item Category 3
// IF *OTHERWISE
IF *OTHERWISE;

// 3RD.Item Category Number 3 = CON.3
3RD.Item_Category_Number_3 = 3;

ENDIF;

//?Never show Display Pallet/Spacer Type             9/17/21 WI464
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Dsp Pallet/Spacer Typ USR = CND.no
PAR.Dsp_Pallet_Spacer_Typ_USR = 'N';

ENDIF;

//?Item Structure Sub Class
CASE;

// IF DTL.Item Category Code 5 is Not Entered
IF DTL.Item_Structure_Sub_Class = *BLANK;

// DTL.Item Category Number 5 = CON.*ZERO
DTL.Item_Category_Number_5 = *ZERO;

//?Item Structure Sub Class
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Item Category Number 5 = CON.5
DTL.Item_Category_Number_5 = 5;

EXECUTE FUNCTION(Item Category 5 Desc DRV) TYPE(DRVFLD)                         AC2036037;
PARAMETER(DTL.Item_Category_5_Desc_DRV);
PARAMETER(DTL.Item_Structure_Sub_Class);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 // Call program Rtv IS Sub Class Desc XF.
 CALL PROGRAM(Rtv IS Sub Class Desc XF) ('PBBYXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Structure_Sub_Class);
 PARAMETER(PAR.Item_Category_5_Desc_DRV);

}


CASE;

// IF DTL.Item Category 5 Desc DRV is equal to blank
IF DTL.Item_Category_5_Desc_DRV = *BLANK;

// Send error message - 'Item Structure Sub Class Not Found'
ERROR(USR4507);
MSGPARM(DTL.Item_Structure_Sub_Class);

ENDIF;

ENDIF;

//?Item Manual Price Exception Check
CASE;

// IF 3RD.Item MAN Price Excep Chk is Not Entered
IF 3RD.Item_Exc_Man_Prc_Excp = *BLANK;

// 3RD.Item Category Number 7 = CON.*ZERO
3RD.Item_Category_Number_7 = *ZERO;

//?Item Manual Price Exception Check
// IF *OTHERWISE
IF *OTHERWISE;

// 3RD.Item Category Number 7 = CON.7
3RD.Item_Category_Number_7 = 7;

EXECUTE FUNCTION(Item Man Price Excep DRV) TYPE(DRVFLD)                         AC2050121;
PARAMETER(3RD.Item_Man_Price_Excep_DRV);
PARAMETER(DTL.Company_Number);
PARAMETER(3RD.Item_Category_Number_7);
PARAMETER(3RD.Item_Exc_Man_Prc_Excp);
{
 //?Calculate derived field

 // Call program Rtv Item Man Prc Excp XF.
 CALL PROGRAM(Rtv Item Man Prc Excp XF) ('PBE3XFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Category_Code);
 PARAMETER(PAR.Item_Man_Price_Excep_DRV);

}


CASE;

// IF 3RD.Item Man Price Excep DRV is equal to blank
IF 3RD.Item_Man_Price_Excep_DRV = *BLANK;

// Send error message - 'Item Manual Price Exception Check Not Found'
ERROR(USR4535);
MSGPARM(3RD.Item_Exc_Man_Prc_Excp);

ENDIF;

ENDIF;

//?Make to Order is only valid as Y if Sold 100% = Y.
CASE;

// IF DTL.Sold 100% Frozen is no
IF DTL.Sold_100_Percent_Frozen = 'N';

// DTL.Make to Order Status = CND.no
DTL.Frozen_Make_to_Order_Sts = 'N';

ENDIF;

//?Validation of Item with other BOM
CASE;

// IF DTL.Record Status is Deleted & Inactive
IF DTL.Record_Status = 'D'/'I';

// LCL.Record Found - ItmBom Usr = CND.Blanks
LCL.Record_Found_ItmBom_Usr = *BLANK;

// LCL.Company Number CDE = CON.*ZERO
LCL.Company_Number_CDE = *ZERO;

// Call program Val Item Bom Rltnshps XF.
CALL PROGRAM(Val Item Bom Rltnshps XF) ('PNJ9XFR');
PARAMETER(LCL.Company_Number_CDE);
PARAMETER(DTL.Item_Code);
PARAMETER(LCL.Record_Found_ItmBom_Usr);

CASE;

// IF LCL.Record Found - ItmBom Usr is Record Found
IF LCL.Record_Found_ItmBom_Usr = 'Y';

// Send error message - 'InActive/Delete Item Not allow due to other BOM relationships - verify Wher
ERROR(USR4174);
MSGPARM(DTL.Item_Code);

ENDIF;

ENDIF;

//?F7=Edit Meat Cost Group
CASE;

// IF DTL.*CMD key is CF07
IF DTL.*CMD_key = '07';

// Call program Edt Meat Cost Group   EF.
CALL PROGRAM(Edt Meat Cost Group   EF) ('PBAGEFR');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?F8=Edit Transp Equip Type
CASE;

// IF DTL.*CMD key is CF08
IF DTL.*CMD_key = '08';

// Call program Edt Transp Equip Tp C02EF.
CALL PROGRAM(Edt Transp Equip Tp C02EF) ('PMPEEFR');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Commented out 10/12/21 JBB WI464
//?E3787 JJH 08/03/15 - Validation for Incl on Prod Schedule
//?Validate Send to PFS Prod Schedule must be Y or N.
CASE;

// IF 2ND.Item Prod Sched Send PFS is Yes
IF 2ND.Item_Prod_Sched_Send_PFS = 'Y';

// OR 2ND.Item Prod Sched Send PFS is No
OR 2ND.Item_Prod_Sched_Send_PFS = 'N';

//?Validate Send to PFS Prod Schedule must be Y or N.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Incl on Prod Schedule must be Y or N.'
ERROR(USR4812);
MSGPARM(DTL.Item_Prod_Sched_Send_PFS);

ENDIF;

//?Validation for Item Meat Cost Group Code
CASE;

// IF 3RD.Item Meat Cost Group Code is Entered
IF 3RD.Item_Meat_Cost_Group_Code <> *BLANK;

// Call program Val Meat Cost Group   XF.
CALL PROGRAM(Val Meat Cost Group   XF) ('PBAIXFR');
PARAMETER(3RD.Item_Meat_Cost_Group_Code);
PARAMETER(LCL.Record_Found_USR);

CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Item Meat Cost Group not found.'
ERROR(USR4465);
MSGPARM(3RD.Item_Meat_Cost_Group_Code);

ENDIF;

ENDIF;

//?Forecast in DP -- only FG can be yes.
CASE;

// IF DTL.Item Type Code is Finished Good
IF DTL.Item_Type_Code = 'FG';

//?Forecast in DP -- only FG can be yes.
// IF *OTHERWISE
IF *OTHERWISE;

// 2ND.IDE Forecast in DP = CND.No
2ND.IDE_Forecast_in_DP = 'N';

ENDIF;

//?08/10/2020 ISE 418 Default Fed id from Company name and address file
CASE;

// IF DTL.Item Type Code is Finished Good
IF DTL.Item_Type_Code = 'FG';

// AND 3RD.IDE Manufacturer Nbr is Not entered
AND 3RD.IDE_Manufacturer_Nbr = 0;

// Call program RTV Federal ID         XF.
CALL PROGRAM(RTV Federal ID         XF) ('PURSXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.AS_Manufacturers_Code);

// 3RD.IDE Manufacturer Nbr = CVTVAR(LCL.AS Manufacturers Code)
3RD.IDE_Manufacturer_Nbr = CVTVAR(LCL.AS_Manufacturers_Code);

ENDIF;

//?            if Manufacturer code is blank for FG items
//?CALC: Detail screen function fields

// DTL.Condition Name USR = Condition name of DTL.TF Co-Ownership Sts
DTL.Condition_Name_USR = RTVCND(DTL.TF_Co_Ownership_Sts);

EXECUTE FUNCTION(IMC Group Desc DRV) TYPE(DRVFLD)                               AC2028365;
PARAMETER(3RD.IMC_Group_Desc_DRV);
PARAMETER(3RD.Item_Meat_Cost_Group_Code);

EXECUTE FUNCTION(Item Report Grp Desc DRV) TYPE(DRVFLD)                         AC2036718;
PARAMETER(3RD.Item_Report_Grp_Desc_DRV);
PARAMETER(1);
PARAMETER(3RD.Item_Report_Group_Code_1);
{
 //?Calculate derived field

 // Call program Rtv Item Rpt Grp Desc XF.
 CALL PROGRAM(Rtv Item Rpt Grp Desc XF) ('PBB6XFR');
 PARAMETER(PAR.Item_Report_Group_Number);
 PARAMETER(PAR.Item_Report_Group_Code);
 PARAMETER(PAR.Item_Report_Grp_Desc_DRV);

}


//?USER: Validate detail screen relations

//?DN R17040 02/23/21-Convert IDE Pallet Tiers & Blocks to Text.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.IDE Pallet Tiers = CVTVAR(2ND.IDE Pallet Tiers USR)
LCL.IDE_Pallet_Tiers = CVTVAR(2ND.IDE_Pallet_Tiers_USR);

// LCL.IDE Pallet Blocks = CVTVAR(2ND.IDE Pallet Blocks USR)
LCL.IDE_Pallet_Blocks = CVTVAR(2ND.IDE_Pallet_Blocks_USR);

ENDIF;

//?DN DO2642 06/01/22-Set Spanish Description Line2.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Spanish Description Line2 = DTL.Spanish Desc Line 2 USR
DTL.Spanish_Description_Line2 = DTL.Spanish_Desc_Line_2_USR;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Item Default/Extn  CR) TYPE(CRTOBJ) FILE(OMBYREP)          AC2215115;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary_Dft);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second_Dft);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third_Dft);
PARAMETER(DTL.UOM_Pricing_Dft);
PARAMETER(DTL.Unit_Weight);
PARAMETER(2ND.Quality_Level);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(2ND.Minimum_Weight_Per_Case);
PARAMETER(2ND.Maximum_Weight_Per_Case);
PARAMETER(2ND.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Vendor_item_Default_Dft);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(2ND.Transportation_Temp);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(2ND.Package_Type_Code);
PARAMETER(2ND.Fresh_Chilling_Time);
PARAMETER(2ND.Base_Conv_Loss_Item);
PARAMETER(2ND.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(2ND.Std_Weight_Head_Var_Ren);
PARAMETER(2ND.Pieces_Per_Head);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(2ND.Pallet_Tare_Weight);
PARAMETER(2ND.Misc_Tare_Weight);
PARAMETER(DTL.Production_Lead_Days);
PARAMETER(DTL.Packaging_Code);
PARAMETER(3RD.Item_Market_Code);
PARAMETER(DTL.TF_Co_Ownership_Sts);
PARAMETER(DTL.Agrimetrics_group);
PARAMETER(DTL.Agrimetrics_pack);
PARAMETER(DTL.Agrimetrics_grade);
PARAMETER(2ND.PA_Base_Avail_Rpt_Include);
PARAMETER(DTL.PM_Pounds_per_Hour);
PARAMETER(DTL.Item_Frt_Overage_Prc_UOM);
PARAMETER(2ND.Packages_per_case);
PARAMETER(DTL.Use_Freeze_Sell_By_Days);
PARAMETER(DTL.PM_Batch_Size);
PARAMETER(2ND.Package_Level_size);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
PARAMETER(DTL.Std_Costing_Unit_Weight);
PARAMETER(DTL.FP_Std_Green_Weight);
PARAMETER(DTL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(DTL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(DTL.PM_Formula_LBS_Per_Hour);
PARAMETER(DTL.PM_Finished_LBS_Per_Hour);
PARAMETER(DTL.SH_Unused_was_broker);
PARAMETER(DTL.PM_Raw_Material_Type_Code);
PARAMETER(2ND.Seconds_Item);
PARAMETER(DTL.Print_on_Realization_Rpt);
PARAMETER(DTL.Unit_Weight_Change_Sts);
PARAMETER(DTL.Maximum_Audit_Value);
PARAMETER(DTL.Minimum_Audit_Value);
PARAMETER(DTL.Market_Overage);
PARAMETER(DTL.Standard_Overage_Underage);
PARAMETER(DTL.Item_Pricing_Operation);
PARAMETER(DTL.Item_Pricing_Constant);
PARAMETER(2ND.Default_Warehouse);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Price_Method_Default);
PARAMETER(2ND.Department_Code);
PARAMETER(DTL.Group_for_Packaging);
PARAMETER(DTL.Item_Category_Number_1);
PARAMETER(DTL.Made_to_Order_Code);
PARAMETER(3RD.Item_Category_Number_2);
PARAMETER(3RD.Transportation_Equip_Type);
PARAMETER(3RD.Item_Category_Number_3);
PARAMETER(3RD.Item_Category_Code_3);
PARAMETER(DTL.Item_Category_Number_4);
PARAMETER(DTL.GL_Sub_Code);
PARAMETER(DTL.Item_Category_Number_5);
PARAMETER(DTL.Item_Structure_Sub_Class);
PARAMETER(DTL.Item_Category_Number_6);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(3RD.Item_Category_Number_7);
PARAMETER(3RD.Item_Exc_Man_Prc_Excp);
PARAMETER(DTL.Item_Category_Number_8);
PARAMETER(2ND.Item_Prod_Sched_Send_PFS);
PARAMETER(3RD.Item_Category_Number_9);
PARAMETER(3RD.Item_Category_Code_9);
PARAMETER(DTL.Item_Category_Number_10);
PARAMETER(DTL.Item_Category_Code_10);
PARAMETER(DTL.PM_Line_Number);
PARAMETER(2ND.Primal_Group_Code);
PARAMETER(2ND.Piece_Count_Item);
PARAMETER(2ND.Pieces_Per_Bag);
PARAMETER(2ND.Bags_Per_Unit);
PARAMETER(DTL.Export_Domestic);
PARAMETER(2ND.Print_On_Schedule);
PARAMETER(2ND.Fresh_Inv_Allocation_Seq);
PARAMETER(2ND.Fresh_Sched_As_Ordered);
PARAMETER(2ND.Frozen_Inv_Allocation_Seq);
PARAMETER(3RD.Item_Meat_Cost_Group_Code);
PARAMETER(DTL.UPC_Code_2);
PARAMETER(DTL.Item_Target_Price);
PARAMETER(DTL.Minimum_Piece_Weight);
PARAMETER(DTL.Maximum_Piece_Weight);
PARAMETER(DTL.Seaboard_Equivalent_Item);
PARAMETER(2ND.Production_Qty_Per_Shift);
PARAMETER(2ND.Scheduling_Position_Grade);
PARAMETER(DTL.Sold_100_Percent_Frozen);
PARAMETER(2ND.Maximum_Shifts);
PARAMETER(DTL.Value_Added_Sts);
PARAMETER(DTL.Label_Type);
PARAMETER(DTL.Item_TF_Exempt_Code);
PARAMETER(DTL.Item_TF_Classification);
PARAMETER(DTL.Default_Workcenter);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(2ND.IDE_Forecast_in_DP);
PARAMETER(3RD.Regulation_ID);
PARAMETER(LCL.IDE_Pallet_Tiers);
PARAMETER(LCL.IDE_Pallet_Blocks);
PARAMETER(DTL.Spanish_Description);
PARAMETER(DTL.Spanish_Description_Line2);
PARAMETER(3RD.IDE_Manufacturer_Nbr);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time_1);
 PARAMETER(DB1.User_Id_1);
 PARAMETER(DB1.Job_Name_1);
 PARAMETER(DB1.Job_Date_1);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 //?E3313 JJH 08/27/14 - Create Item Default Extension
 //?R13981 DN 10/26/18 - Update Spanish Desc in Item Default Extsn.
 //?418 ISE 08/21/20 - Update Manufacturer code in Item Default Extsn.
 //?R17040 DN 02/23/21 - Update IDE Pallet Tiers & Blocks.
 //?DO2642 DN 06/01/22 - Update Spanish Desc 2 in Item Default Extsn.
 // Call program Rtv/Crt ItmDefExt Reg XF.
 CALL PROGRAM(Rtv/Crt ItmDefExt Reg XF) ('PUZTXFR');
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.IDE_Forecast_in_DP);
 PARAMETER(PAR.IDE_Regulation_Code_ID);
 PARAMETER(PAR.IDE_Pallet_Tiers);
 PARAMETER(PAR.IDE_Pallet_Blocks);
 PARAMETER(PAR.Spanish_Description);
 PARAMETER(PAR.Spanish_Description_Line2);
 PARAMETER(PAR.IDE_Manufacturer_Nbr);
 PARAMETER(JOB.*PROGRAM);

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Item Dft/Co ItemNEWCH) TYPE(CHGOBJ) FILE(OMBYREP)          AC1700887;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary_Dft);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second_Dft);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third_Dft);
PARAMETER(DTL.UOM_Pricing_Dft);
PARAMETER(DTL.Unit_Weight);
PARAMETER(2ND.Quality_Level);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(2ND.Minimum_Weight_Per_Case);
PARAMETER(2ND.Maximum_Weight_Per_Case);
PARAMETER(2ND.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Vendor_item_Default_Dft);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(2ND.Transportation_Temp);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(2ND.Package_Type_Code);
PARAMETER(2ND.Fresh_Chilling_Time);
PARAMETER(2ND.Base_Conv_Loss_Item);
PARAMETER(2ND.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(2ND.Std_Weight_Head_Var_Ren);
PARAMETER(2ND.Pieces_Per_Head);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(2ND.Pallet_Tare_Weight);
PARAMETER(2ND.Misc_Tare_Weight);
PARAMETER(DTL.Production_Lead_Days);
PARAMETER(DTL.Packaging_Code);
PARAMETER(3RD.Item_Market_Code);
PARAMETER(DTL.TF_Co_Ownership_Sts);
PARAMETER(DTL.Agrimetrics_group);
PARAMETER(DTL.Agrimetrics_pack);
PARAMETER(DTL.Agrimetrics_grade);
PARAMETER(2ND.PA_Base_Avail_Rpt_Include);
PARAMETER(DTL.PM_Pounds_per_Hour);
PARAMETER(DTL.Item_Frt_Overage_Prc_UOM);
PARAMETER(2ND.Packages_per_case);
PARAMETER(DTL.Use_Freeze_Sell_By_Days);
PARAMETER(DTL.PM_Batch_Size);
PARAMETER(2ND.Package_Level_size);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
PARAMETER(DTL.Std_Costing_Unit_Weight);
PARAMETER(DTL.FP_Std_Green_Weight);
PARAMETER(DTL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(DTL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(DTL.PM_Formula_LBS_Per_Hour);
PARAMETER(DTL.PM_Finished_LBS_Per_Hour);
PARAMETER(DTL.SH_Unused_was_broker);
PARAMETER(DTL.PM_Raw_Material_Type_Code);
PARAMETER(2ND.Seconds_Item);
PARAMETER(DTL.Print_on_Realization_Rpt);
PARAMETER(DTL.Unit_Weight_Change_Sts);
PARAMETER(DTL.Maximum_Audit_Value);
PARAMETER(DTL.Minimum_Audit_Value);
PARAMETER(DTL.Market_Overage);
PARAMETER(DTL.Standard_Overage_Underage);
PARAMETER(DTL.Item_Pricing_Operation);
PARAMETER(DTL.Item_Pricing_Constant);
PARAMETER(2ND.Default_Warehouse);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Price_Method_Default);
PARAMETER(2ND.Department_Code);
PARAMETER(DTL.Group_for_Packaging);
PARAMETER(DTL.Item_Category_Number_1);
PARAMETER(DTL.Made_to_Order_Code);
PARAMETER(3RD.Item_Category_Number_2);
PARAMETER(3RD.Transportation_Equip_Type);
PARAMETER(3RD.Item_Category_Number_3);
PARAMETER(3RD.Item_Category_Code_3);
PARAMETER(DTL.Item_Category_Number_4);
PARAMETER(DTL.GL_Sub_Code);
PARAMETER(DTL.Item_Category_Number_5);
PARAMETER(DTL.Item_Structure_Sub_Class);
PARAMETER(DTL.Item_Category_Number_6);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(3RD.Item_Category_Number_7);
PARAMETER(3RD.Item_Exc_Man_Prc_Excp);
PARAMETER(DTL.Item_Category_Number_8);
PARAMETER(2ND.Item_Prod_Sched_Send_PFS);
PARAMETER(3RD.Item_Category_Number_9);
PARAMETER(3RD.Item_Category_Code_9);
PARAMETER(DTL.Item_Category_Number_10);
PARAMETER(DTL.Item_Category_Code_10);
PARAMETER(DTL.PM_Line_Number);
PARAMETER(2ND.Primal_Group_Code);
PARAMETER(2ND.Piece_Count_Item);
PARAMETER(2ND.Pieces_Per_Bag);
PARAMETER(2ND.Bags_Per_Unit);
PARAMETER(DTL.Export_Domestic);
PARAMETER(2ND.Print_On_Schedule);
PARAMETER(2ND.Fresh_Inv_Allocation_Seq);
PARAMETER(2ND.Fresh_Sched_As_Ordered);
PARAMETER(2ND.Frozen_Inv_Allocation_Seq);
PARAMETER(3RD.Item_Meat_Cost_Group_Code);
PARAMETER(DTL.UPC_Code_2);
PARAMETER(DTL.Item_Target_Price);
PARAMETER(DTL.Minimum_Piece_Weight);
PARAMETER(DTL.Maximum_Piece_Weight);
PARAMETER(DTL.Seaboard_Equivalent_Item);
PARAMETER(2ND.Production_Qty_Per_Shift);
PARAMETER(2ND.Scheduling_Position_Grade);
PARAMETER(DTL.Sold_100_Percent_Frozen);
PARAMETER(2ND.Maximum_Shifts);
PARAMETER(DTL.Value_Added_Sts);
PARAMETER(DTL.Label_Type);
PARAMETER(DTL.Item_TF_Exempt_Code);
PARAMETER(DTL.Item_TF_Classification);
PARAMETER(DTL.Default_Workcenter);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Allow_Weight_Input);
PARAMETER(DTL.Product_Type_Code);
PARAMETER(3RD.Item_Report_Group_Code_1);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(2ND.IDE_Forecast_in_DP);
PARAMETER(3RD.Regulation_ID);
PARAMETER(LCL.IDE_Pallet_Tiers);
PARAMETER(LCL.IDE_Pallet_Blocks);
PARAMETER(DTL.Spanish_Description);
PARAMETER(DTL.Spanish_Description_Line2);
PARAMETER(WRK.Description_1_usr);
PARAMETER(LCL.Bags_Per_Unit_USR);
PARAMETER(LCL.Pieces_Per_Bag_USR);
PARAMETER(3RD.IDE_Manufacturer_Nbr);
{
 //?USER: Processing after Data read

 EXECUTE FUNCTION(Chg TFExp-OrdDtl-Item RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1748133;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_TF_Exempt_Code);
 {
  //?USER: Process Data record

  // LCL.Ord TF Exempt Code = PAR.Item TF Exempt Code
  LCL.Ord_TF_Exempt_Code = PAR.Item_TF_Exempt_Code;

  EXECUTE FUNCTION(RTV Bill Type, Event   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1366339;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Event_Code);
  PARAMETER(LCL.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Billing Activity Type is Not Credit Memo
  IF LCL.Billing_Activity_Type = '3'/'1'/'5'/'4';

  EXECUTE FUNCTION(Vry TFExmp - Customer) TYPE(RTVOBJ) FILE(PDNEREP)              AC1748135;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.Customer_TF_Exempt_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Customer TF Exempt Code is Exempt Customer
  IF LCL.Customer_TF_Exempt_Code = 'EC';

  // AND LCL.Ord TF Exempt Code is Customer Codes
  AND LCL.Ord_TF_Exempt_Code = 'EC'/'NE';

  // LCL.Ord TF Exempt Code = CND.Exempt Customer
  LCL.Ord_TF_Exempt_Code = 'EC';

  EXECUTE FUNCTION(CHG TF-Exempt-Item    CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1748616;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(LCL.Ord_TF_Exempt_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Ord TF Exempt Code = PAR.Item TF Exempt Code
  LCL.Ord_TF_Exempt_Code = PAR.Item_TF_Exempt_Code;

  EXECUTE FUNCTION(CHG TF-Exempt-Item    CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1748616;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(LCL.Ord_TF_Exempt_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  ENDIF;

 }

 // LCL.Record Status Save = DB1.Record Status
 LCL.Record_Status_Save = DB1.Record_Status;

 // LCL.Pieces Per Bag = DB1.Pieces Per Bag
 LCL.Pieces_Per_Bag = DB1.Pieces_Per_Bag;

 // LCL.Bags Per Unit = DB1.Bags Per Unit
 LCL.Bags_Per_Unit = DB1.Bags_Per_Unit;

 //?E3014 RMC upd this
 // Call program Exc Chg Sold 100% FZ  XF.
 CALL PROGRAM(Exc Chg Sold 100% FZ  XF) ('PBLUXFR');
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Sold_100_Percent_Frozen);

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time_1);
 PARAMETER(DB1.User_Id_1);
 PARAMETER(DB1.Job_Name_1);
 PARAMETER(DB1.Job_Date_1);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 //?ISE 08/07/20-Update Manufacturer code.
 //?EEL 04/25/23-Update IDE Regulation code.
 // Call program UPD MANUFACTURER CODE  XF.
 CALL PROGRAM(UPD MANUFACTURER CODE  XF) ('PPFRE3RXM');
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.IDE_Regulation_Code_ID);
 PARAMETER(PAR.IDE_Manufacturer_Nbr);

 EXECUTE FUNCTION(Chg Item W/Defaults NW RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1701547;
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Description_Line_One);
 PARAMETER(DB1.Description_Line_Two);
 PARAMETER(DB1.Item_Label_Line_1);
 PARAMETER(DB1.Item_Label_Line_2);
 PARAMETER(DB1.Item_Label_Line_3);
 PARAMETER(DB1.Item_Label_Line_4);
 PARAMETER(DB1.UOM_Primary_Dft);
 PARAMETER(DB1.Conversion_Factor_1);
 PARAMETER(DB1.Operation_Factor_1);
 PARAMETER(DB1.UOM_Second_Dft);
 PARAMETER(DB1.Conversion_Factor_2);
 PARAMETER(DB1.Operation_Factor_2);
 PARAMETER(DB1.UOM_Third_Dft);
 PARAMETER(DB1.UOM_Pricing_Dft);
 PARAMETER(DB1.Unit_Weight);
 PARAMETER(DB1.Quality_Level);
 PARAMETER(DB1.Item_Level);
 PARAMETER(DB1.Production_Date_Control);
 PARAMETER(DB1.Catch_Weight_Status);
 PARAMETER(DB1.Minimum_Weight_Per_Case);
 PARAMETER(DB1.Maximum_Weight_Per_Case);
 PARAMETER(DB1.Number_Cases_On_A_Pallet);
 PARAMETER(DB1.Vendor_item_Default_Dft);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Default_Commod_Mark_basis);
 PARAMETER(DB1.Transportation_Temp);
 PARAMETER(DB1.Item_Type_Code);
 PARAMETER(DB1.Package_Type_Code);
 PARAMETER(DB1.Fresh_Chilling_Time);
 PARAMETER(DB1.Base_Conv_Loss_Item);
 PARAMETER(DB1.Variety_Rendered_Cut);
 PARAMETER(DB1.Frozen_Make_to_Order_Sts);
 PARAMETER(DB1.Credit_Item_Status);
 PARAMETER(DB1.Std_Weight_Head_Var_Ren);
 PARAMETER(DB1.Pieces_Per_Head);
 PARAMETER(DB1.Commodity_Price_Group);
 PARAMETER(DB1.Pallet_Tare_Weight);
 PARAMETER(DB1.Misc_Tare_Weight);
 PARAMETER(DB1.Production_Lead_Days);
 PARAMETER(DB1.Packaging_Code);
 PARAMETER(DB1.Item_Market_Code);
 PARAMETER(DB1.TF_Co_Ownership_Sts);
 PARAMETER(DB1.Agrimetrics_group);
 PARAMETER(DB1.Agrimetrics_pack);
 PARAMETER(DB1.Agrimetrics_grade);
 PARAMETER(DB1.PA_Base_Avail_Rpt_Include);
 PARAMETER(DB1.PM_Pounds_per_Hour);
 PARAMETER(DB1.Item_Frt_Overage_Prc_UOM);
 PARAMETER(DB1.Packages_per_case);
 PARAMETER(DB1.Use_Freeze_Sell_By_Days);
 PARAMETER(DB1.PM_Batch_Size);
 PARAMETER(DB1.Package_Level_size);
 PARAMETER(DB1.Partial_Item_Code);
 PARAMETER(DB1.WIP_Item_Code);
 PARAMETER(DB1.WIP_Reject_Code);
 PARAMETER(DB1.Std_Costing_Unit_Weight);
 PARAMETER(DB1.FP_Std_Green_Weight);
 PARAMETER(DB1.PM_Std_LBS_Man_Per_Hour);
 PARAMETER(DB1.PM_Raw_Meat_LBS_Per_Hour);
 PARAMETER(DB1.PM_Formula_LBS_Per_Hour);
 PARAMETER(DB1.PM_Finished_LBS_Per_Hour);
 PARAMETER(DB1.SH_Unused_was_broker);
 PARAMETER(DB1.PM_Raw_Material_Type_Code);
 PARAMETER(DB1.Seconds_Item);
 PARAMETER(DB1.Print_on_Realization_Rpt);
 PARAMETER(DB1.Maximum_Audit_Value);
 PARAMETER(DB1.Minimum_Audit_Value);
 PARAMETER(DB1.Market_Overage);
 PARAMETER(DB1.Standard_Overage_Underage);
 PARAMETER(DB1.Item_Pricing_Operation);
 PARAMETER(DB1.Item_Pricing_Constant);
 PARAMETER(DB1.Default_Warehouse);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Price_Method_Default);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Group_for_Packaging);
 PARAMETER(DB1.Item_Category_Number_1);
 PARAMETER(DB1.Made_to_Order_Code);
 PARAMETER(DB1.Item_Category_Number_2);
 PARAMETER(DB1.Transportation_Equip_Type);
 PARAMETER(DB1.Item_Category_Number_3);
 PARAMETER(DB1.Item_Category_Code_3);
 PARAMETER(DB1.Item_Category_Number_4);
 PARAMETER(DB1.GL_Sub_Code);
 PARAMETER(DB1.Item_Category_Number_5);
 PARAMETER(DB1.Item_Structure_Sub_Class);
 PARAMETER(DB1.Item_Category_Number_6);
 PARAMETER(DB1.Item_Primal_Sched_Report);
 PARAMETER(DB1.Item_Category_Number_7);
 PARAMETER(DB1.Item_Exc_Man_Prc_Excp);
 PARAMETER(DB1.Item_Category_Number_8);
 PARAMETER(DB1.Item_Prod_Sched_Send_PFS);
 PARAMETER(DB1.Item_Category_Number_9);
 PARAMETER(DB1.Item_Category_Code_9);
 PARAMETER(DB1.Item_Category_Number_10);
 PARAMETER(DB1.Item_Category_Code_10);
 PARAMETER(DB1.PM_Line_Number);
 PARAMETER(DB1.Primal_Group_Code);
 PARAMETER(DB1.Piece_Count_Item);
 PARAMETER(DB1.Pieces_Per_Bag);
 PARAMETER(DB1.Bags_Per_Unit);
 PARAMETER(DB1.Export_Domestic);
 PARAMETER(DB1.Print_On_Schedule);
 PARAMETER(DB1.Fresh_Inv_Allocation_Seq);
 PARAMETER(DB1.Fresh_Sched_As_Ordered);
 PARAMETER(DB1.Frozen_Inv_Allocation_Seq);
 PARAMETER(DB1.Item_Meat_Cost_Group_Code);
 PARAMETER(DB1.UPC_Code_2);
 PARAMETER(DB1.Item_Target_Price);
 PARAMETER(DB1.Minimum_Piece_Weight);
 PARAMETER(DB1.Maximum_Piece_Weight);
 PARAMETER(DB1.Seaboard_Equivalent_Item);
 PARAMETER(DB1.Production_Qty_Per_Shift);
 PARAMETER(DB1.Scheduling_Position_Grade);
 PARAMETER(DB1.Sold_100_Percent_Frozen);
 PARAMETER(DB1.Maximum_Shifts);
 PARAMETER(DB1.Value_Added_Sts);
 PARAMETER(DB1.Label_Type);
 PARAMETER(DB1.Item_TF_Exempt_Code);
 PARAMETER(DB1.Item_TF_Classification);
 PARAMETER(DB1.Default_Workcenter);
 PARAMETER(DB1.Record_Status);
 PARAMETER(PAR.Allow_Weight_Input);
 PARAMETER(LCL.Record_Status_Save);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.Record Status Save NE PAR.Record Status
  IF PAR.Record_Status_Save <> PAR.Record_Status;

  //?from the Item Default
  // LCL.Record Status = PAR.Record Status
  LCL.Record_Status = PAR.Record_Status;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?from the company item (or should stay as is)
  // LCL.Record Status = DB1.Record Status
  LCL.Record_Status = DB1.Record_Status;

  ENDIF;

  CASE;

  // IF PAR.Allow Weight Input is yes
  IF PAR.Allow_Weight_Input = 'Y';

  // LCL.Unit Weight = PAR.Unit Weight
  LCL.Unit_Weight = PAR.Unit_Weight;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Unit Weight = DB1.Unit Weight
  LCL.Unit_Weight = DB1.Unit_Weight;

  ENDIF;

  //?uom second is lb move unt wgt/conv-1
  CASE;

  // IF PAR.U/M - Second Dft is Pounds
  IF PAR.UOM_Second_Dft = 'LB';

  // LCL.Conversion Factor 1 = LCL.Unit Weight
  LCL.Conversion_Factor_1 = LCL.Unit_Weight;

  //?uom second is lb move unt wgt/conv-1
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Conversion Factor 1 = PAR.Conversion Factor 1
  LCL.Conversion_Factor_1 = PAR.Conversion_Factor_1;

  ENDIF;

  //?uom third is lb move unt wgt/conv-2
  CASE;

  // IF PAR.U/M - Third Dft is Pounds
  IF PAR.UOM_Third_Dft = 'LB';

  // LCL.Conversion Factor 2 = LCL.Unit Weight
  LCL.Conversion_Factor_2 = LCL.Unit_Weight;

  //?uom third is lb move unt wgt/conv-2
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Conversion Factor 2 = PAR.Conversion Factor 2
  LCL.Conversion_Factor_2 = PAR.Conversion_Factor_2;

  ENDIF;

  CASE;

  // IF DB1.Unit Weight Change Sts is Yes
  IF DB1.Unit_Weight_Change_Sts = 'YES';

  // PAR.Unit Weight Change Sts = CND.Yes
  PAR.Unit_Weight_Change_Sts = 'YES';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.Unit Weight NE DB1.Unit Weight
  IF LCL.Unit_Weight <> DB1.Unit_Weight;

  // PAR.Unit Weight Change Sts = CND.Yes
  PAR.Unit_Weight_Change_Sts = 'YES';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Unit Weight Change Sts = CND.No
  PAR.Unit_Weight_Change_Sts = 'NO';

  ENDIF;

  ENDIF;

  //?******** Chg Item w/Defaults NW CH - Company Item  *
  //?09/20/05  Record Status changes with the company items
  //?Using LCL with the record status (to update to the Company Item)
  //?   earlier function is saving the record status from the
  //?   Item Default and compare here to know when to update
  //?   the record status from the Item Default to the Company Item
  //?   The Edit Item Default is populating this on the Change area
  //?   and the Company Item can also change the record status.
  //?   only in the Company Item.
  //?PAR are the values from the Item Default
  //?DB1 is the company item(before)
  //?DB1 is being used on th fields that are maintained
  //?    at the Edt Co/Item
  //?LCL is from the unit weight
  //?12/14/05 Overage - Market and std overage/unerage use from Item DEF
  //?so change the db1 to PAR on these fields
  //?08/31/06 RMC chg par.print on schedule to db1.print on schedule
  //?03/11/09 RMC FP1054 output blank to Prod day of week flds.
  //?06/25/09 RMC FP1054 cant chg these from the item dft so get what
  //? they are and pass it in
  // Call program Rtv CIE fot item dft upXF.
  CALL PROGRAM(Rtv CIE fot item dft upXF) ('PNKBXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Produce_on_Sunday_Sts);
  PARAMETER(LCL.Produce_on_Monday_Sts);
  PARAMETER(LCL.Produce_on_Tuesday_Sts);
  PARAMETER(LCL.Produce_on_Wednesday_Sts);
  PARAMETER(LCL.Produce_on_Thursday_Sts);
  PARAMETER(LCL.Produce_on_Friday_Sts);
  PARAMETER(LCL.Produce_on_Saturday_Sts);
  PARAMETER(LCL.Plan_Production_Sts);
  PARAMETER(LCL.Allocation_Method);
  PARAMETER(LCL.CIE_Use_Age_Days_over_Max);
  PARAMETER(LCL.CIE_MPR_Report_to_USDA);
  PARAMETER(LCL.CIE_Capacity_Code);

  //?060812 Item Cat 06 Code and Number are at the company level
  //?not at the item default level -
  //?Use db1 on the Item Category Code 6 and Item Category Number 6
  //?11/17/21 DN W84332-Do Not Update Item Category Code 3 and 10. Use DB1.
  EXECUTE FUNCTION(Chg Company Item Spec  IF) TYPE(EXCINTFUN)                     AC1703532;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.Description_Line_Two);
  PARAMETER(PAR.Item_Label_Line_1);
  PARAMETER(PAR.Item_Label_Line_2);
  PARAMETER(PAR.Item_Label_Line_3);
  PARAMETER(PAR.Item_Label_Line_4);
  PARAMETER(PAR.UOM_Primary_Dft);
  PARAMETER(LCL.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second_Dft);
  PARAMETER(LCL.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third_Dft);
  PARAMETER(PAR.UOM_Pricing_Dft);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(PAR.Quality_Level);
  PARAMETER(PAR.Item_Level);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(PAR.Minimum_Weight_Per_Case);
  PARAMETER(PAR.Maximum_Weight_Per_Case);
  PARAMETER(PAR.Number_Cases_On_A_Pallet);
  PARAMETER(DB1.Vendor_Item_Default);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Default_Commod_Mark_basis);
  PARAMETER(PAR.Transportation_Temp);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Package_Type_Code);
  PARAMETER(PAR.Maximum_Audit_Value);
  PARAMETER(PAR.Minimum_Audit_Value);
  PARAMETER(PAR.Market_Overage);
  PARAMETER(PAR.Standard_Overage_Underage);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(PAR.Item_Pricing_Operation);
  PARAMETER(PAR.Item_Pricing_Constant);
  PARAMETER(DB1.Default_Warehouse);
  PARAMETER(PAR.Price_Method_Default);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Frozen_Make_to_Order_Sts);
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(DB1.Std_Weight_Head_Var_Ren);
  PARAMETER(PAR.Pieces_Per_Head);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Item_Category_Number_1);
  PARAMETER(PAR.Made_to_Order_Code);
  PARAMETER(PAR.Item_Category_Number_2);
  PARAMETER(PAR.Transportation_Equip_Type);
  PARAMETER(PAR.Item_Category_Number_3);
  PARAMETER(DB1.Item_Category_Code_3);
  PARAMETER(PAR.Item_Category_Number_4);
  PARAMETER(PAR.GL_Sub_Code);
  PARAMETER(PAR.Item_Category_Number_5);
  PARAMETER(PAR.Item_Structure_Sub_Class);
  PARAMETER(DB1.Item_Category_Number_6);
  PARAMETER(DB1.Item_Primal_Sched_Report);
  PARAMETER(PAR.Item_Category_Number_7);
  PARAMETER(PAR.Item_Exc_Man_Prc_Excp);
  PARAMETER(PAR.Item_Category_Number_8);
  PARAMETER(PAR.Item_Prod_Sched_Send_PFS);
  PARAMETER(PAR.Item_Category_Number_9);
  PARAMETER(PAR.Item_Category_Code_9);
  PARAMETER(PAR.Item_Category_Number_10);
  PARAMETER(DB1.Item_Category_Code_10);
  PARAMETER(PAR.Pallet_Tare_Weight);
  PARAMETER(DB1.Misc_Tare_Weight);
  PARAMETER(PAR.Production_Lead_Days);
  PARAMETER(PAR.Packaging_Code);
  PARAMETER(PAR.Item_Market_Code);
  PARAMETER(PAR.TF_Co_Ownership_Sts);
  PARAMETER(PAR.Agrimetrics_group);
  PARAMETER(PAR.Agrimetrics_pack);
  PARAMETER(PAR.Agrimetrics_grade);
  PARAMETER(PAR.PA_Base_Avail_Rpt_Include);
  PARAMETER(PAR.PM_Pounds_per_Hour);
  PARAMETER(PAR.Item_Frt_Overage_Prc_UOM);
  PARAMETER(PAR.Packages_per_case);
  PARAMETER(PAR.Use_Freeze_Sell_By_Days);
  PARAMETER(PAR.PM_Batch_Size);
  PARAMETER(PAR.Package_Level_size);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.WIP_Item_Code);
  PARAMETER(PAR.WIP_Reject_Code);
  PARAMETER(PAR.Std_Costing_Unit_Weight);
  PARAMETER(PAR.FP_Std_Green_Weight);
  PARAMETER(PAR.PM_Std_LBS_Man_Per_Hour);
  PARAMETER(PAR.PM_Raw_Meat_LBS_Per_Hour);
  PARAMETER(PAR.PM_Formula_LBS_Per_Hour);
  PARAMETER(PAR.PM_Finished_LBS_Per_Hour);
  PARAMETER(PAR.SH_Unused_was_broker);
  PARAMETER(PAR.PM_Raw_Material_Type_Code);
  PARAMETER(PAR.PM_Line_Number);
  PARAMETER(PAR.Seconds_Item);
  PARAMETER(PAR.Print_on_Realization_Rpt);
  PARAMETER(PAR.Unit_Weight_Change_Sts);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Export_Domestic);
  PARAMETER(DB1.Print_On_Schedule);
  PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
  PARAMETER(PAR.Fresh_Sched_As_Ordered);
  PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
  PARAMETER(PAR.Primal_Group_Code);
  PARAMETER(PAR.Item_Meat_Cost_Group_Code);
  PARAMETER(PAR.UPC_Code_2);
  PARAMETER(PAR.Item_Target_Price);
  PARAMETER(PAR.Minimum_Piece_Weight);
  PARAMETER(PAR.Maximum_Piece_Weight);
  PARAMETER(PAR.Seaboard_Equivalent_Item);
  PARAMETER(DB1.Production_Qty_Per_Shift);
  PARAMETER(PAR.Scheduling_Position_Grade);
  PARAMETER(PAR.Sold_100_Percent_Frozen);
  PARAMETER(DB1.Maximum_Shifts);
  PARAMETER(PAR.Value_Added_Sts);
  PARAMETER(PAR.Label_Type);
  PARAMETER(PAR.Item_TF_Exempt_Code);
  PARAMETER(PAR.Item_TF_Classification);
  PARAMETER(DB1.Default_Workcenter);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(LCL.Record_Status);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Description_Line_One);
  PARAMETER(DB1.Description_Line_Two);
  PARAMETER(DB1.Item_Label_Line_1);
  PARAMETER(DB1.Item_Label_Line_2);
  PARAMETER(DB1.Item_Label_Line_3);
  PARAMETER(DB1.Item_Label_Line_4);
  PARAMETER(DB1.UOM_Primary);
  PARAMETER(DB1.Conversion_Factor_1);
  PARAMETER(DB1.Operation_Factor_1);
  PARAMETER(DB1.UOM_Second);
  PARAMETER(DB1.Conversion_Factor_2);
  PARAMETER(DB1.Operation_Factor_2);
  PARAMETER(DB1.UOM_Third);
  PARAMETER(DB1.UOM_Pricing);
  PARAMETER(DB1.Unit_Weight);
  PARAMETER(DB1.Quality_Level);
  PARAMETER(DB1.Item_Level);
  PARAMETER(DB1.Production_Date_Control);
  PARAMETER(DB1.Catch_Weight_Status);
  PARAMETER(DB1.Minimum_Weight_Per_Case);
  PARAMETER(DB1.Maximum_Weight_Per_Case);
  PARAMETER(DB1.Number_Cases_On_A_Pallet);
  PARAMETER(DB1.Vendor_Item_Default);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Default_Commod_Mark_basis);
  PARAMETER(DB1.Transportation_Temp);
  PARAMETER(DB1.Item_Type_Code);
  PARAMETER(DB1.Package_Type_Code);
  PARAMETER(DB1.Maximum_Audit_Value);
  PARAMETER(DB1.Minimum_Audit_Value);
  PARAMETER(PAR.Market_Overage);
  PARAMETER(PAR.Standard_Overage_Underage);
  PARAMETER(DB1.Commodity_Price_Group);
  PARAMETER(DB1.Item_Pricing_Operation);
  PARAMETER(DB1.Item_Pricing_Constant);
  PARAMETER(DB1.Default_Warehouse);
  PARAMETER(DB1.Price_Method_Default);
  PARAMETER(DB1.Fresh_Chilling_Time);
  PARAMETER(DB1.Base_Conv_Loss_Item);
  PARAMETER(DB1.Variety_Rendered_Cut);
  PARAMETER(DB1.Frozen_Make_to_Order_Sts);
  PARAMETER(DB1.Credit_Item_Status);
  PARAMETER(DB1.Std_Weight_Head_Var_Ren);
  PARAMETER(DB1.Pieces_Per_Head);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Group_for_Packaging);
  PARAMETER(DB1.Item_Category_Number_1);
  PARAMETER(DB1.Made_to_Order_Code);
  PARAMETER(DB1.Item_Category_Number_2);
  PARAMETER(DB1.Transportation_Equip_Type);
  PARAMETER(DB1.Item_Category_Number_3);
  PARAMETER(DB1.Item_Category_Code_3);
  PARAMETER(DB1.Item_Category_Number_4);
  PARAMETER(DB1.GL_Sub_Code);
  PARAMETER(DB1.Item_Category_Number_5);
  PARAMETER(DB1.Item_Structure_Sub_Class);
  PARAMETER(DB1.Item_Category_Number_6);
  PARAMETER(DB1.Item_Primal_Sched_Report);
  PARAMETER(DB1.Item_Category_Number_7);
  PARAMETER(DB1.Item_Exc_Man_Prc_Excp);
  PARAMETER(DB1.Item_Category_Number_8);
  PARAMETER(DB1.Item_Prod_Sched_Send_PFS);
  PARAMETER(DB1.Item_Category_Number_9);
  PARAMETER(DB1.Item_Category_Code_9);
  PARAMETER(DB1.Item_Category_Number_10);
  PARAMETER(DB1.Item_Category_Code_10);
  PARAMETER(DB1.Pallet_Tare_Weight);
  PARAMETER(DB1.Misc_Tare_Weight);
  PARAMETER(DB1.Production_Lead_Days);
  PARAMETER(DB1.Packaging_Code);
  PARAMETER(DB1.Item_Market_Code);
  PARAMETER(DB1.TF_Co_Ownership_Sts);
  PARAMETER(DB1.Agrimetrics_group);
  PARAMETER(DB1.Agrimetrics_pack);
  PARAMETER(DB1.Agrimetrics_grade);
  PARAMETER(DB1.PA_Base_Avail_Rpt_Include);
  PARAMETER(DB1.PM_Pounds_per_Hour);
  PARAMETER(DB1.Item_Frt_Overage_Prc_UOM);
  PARAMETER(DB1.Packages_per_case);
  PARAMETER(DB1.Use_Freeze_Sell_By_Days);
  PARAMETER(DB1.PM_Batch_Size);
  PARAMETER(DB1.Package_Level_size);
  PARAMETER(DB1.Partial_Item_Code);
  PARAMETER(DB1.WIP_Item_Code);
  PARAMETER(DB1.WIP_Reject_Code);
  PARAMETER(DB1.Std_Costing_Unit_Weight);
  PARAMETER(DB1.FP_Std_Green_Weight);
  PARAMETER(DB1.PM_Std_LBS_Man_Per_Hour);
  PARAMETER(DB1.PM_Raw_Meat_LBS_Per_Hour);
  PARAMETER(DB1.PM_Formula_LBS_Per_Hour);
  PARAMETER(DB1.PM_Finished_LBS_Per_Hour);
  PARAMETER(DB1.SH_Unused_was_broker);
  PARAMETER(DB1.PM_Raw_Material_Type_Code);
  PARAMETER(DB1.PM_Line_Number);
  PARAMETER(DB1.Seconds_Item);
  PARAMETER(DB1.Print_on_Realization_Rpt);
  PARAMETER(DB1.Unit_Weight_Change_Sts);
  PARAMETER(DB1.Piece_Count_Item);
  PARAMETER(DB1.Pieces_Per_Bag);
  PARAMETER(DB1.Bags_Per_Unit);
  PARAMETER(DB1.Export_Domestic);
  PARAMETER(DB1.Print_On_Schedule);
  PARAMETER(DB1.Fresh_Inv_Allocation_Seq);
  PARAMETER(DB1.Fresh_Sched_As_Ordered);
  PARAMETER(DB1.Frozen_Inv_Allocation_Seq);
  PARAMETER(DB1.Primal_Group_Code);
  PARAMETER(DB1.Item_Meat_Cost_Group_Code);
  PARAMETER(DB1.Item_Target_Price);
  PARAMETER(DB1.Minimum_Piece_Weight);
  PARAMETER(DB1.Maximum_Piece_Weight);
  PARAMETER(DB1.Seaboard_Equivalent_Item);
  PARAMETER(DB1.Production_Qty_Per_Shift);
  PARAMETER(DB1.Scheduling_Position_Grade);
  PARAMETER(DB1.Sold_100_Percent_Frozen);
  PARAMETER(DB1.Maximum_Shifts);
  PARAMETER(DB1.Value_Added_Sts);
  PARAMETER(DB1.Label_Type);
  PARAMETER(DB1.Default_Workcenter);
  PARAMETER(DB1.Record_Status);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Produce_on_Sunday_Sts);
  PARAMETER(LCL.Produce_on_Monday_Sts);
  PARAMETER(LCL.Produce_on_Tuesday_Sts);
  PARAMETER(LCL.Produce_on_Wednesday_Sts);
  PARAMETER(LCL.Produce_on_Thursday_Sts);
  PARAMETER(LCL.Produce_on_Friday_Sts);
  PARAMETER(LCL.Produce_on_Saturday_Sts);
  PARAMETER(LCL.Plan_Production_Sts);
  PARAMETER(LCL.Allocation_Method);
  PARAMETER(LCL.CIE_Use_Age_Days_over_Max);
  PARAMETER(LCL.CIE_MPR_Report_to_USDA);
  PARAMETER(LCL.CIE_Capacity_Code);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Chg Company Item Spec  CH) TYPE(CHGOBJ) FILE(CABZREP)          AC1701967;
   PARAMETER(PR1.Company_Number);
   PARAMETER(PR1.Item_Code);
   PARAMETER(PR1.Description_Line_One);
   PARAMETER(PR1.Description_Line_Two);
   PARAMETER(PR1.Item_Label_Line_1);
   PARAMETER(PR1.Item_Label_Line_2);
   PARAMETER(PR1.Item_Label_Line_3);
   PARAMETER(PR1.Item_Label_Line_4);
   PARAMETER(PR1.UOM_Primary);
   PARAMETER(PR1.Conversion_Factor_1);
   PARAMETER(PR1.Operation_Factor_1);
   PARAMETER(PR1.UOM_Second);
   PARAMETER(PR1.Conversion_Factor_2);
   PARAMETER(PR1.Operation_Factor_2);
   PARAMETER(PR1.UOM_Third);
   PARAMETER(PR1.UOM_Pricing);
   PARAMETER(PR1.Unit_Weight);
   PARAMETER(PR1.Quality_Level);
   PARAMETER(PR1.Item_Level);
   PARAMETER(PR1.Production_Date_Control);
   PARAMETER(PR1.Catch_Weight_Status);
   PARAMETER(PR1.Minimum_Weight_Per_Case);
   PARAMETER(PR1.Maximum_Weight_Per_Case);
   PARAMETER(PR1.Number_Cases_On_A_Pallet);
   PARAMETER(PR1.Vendor_Item_Default);
   PARAMETER(PR1.Item_Structure_Class_Code);
   PARAMETER(PR1.Item_Structure_Group_Code);
   PARAMETER(PR1.Item_Structure_Type_Code);
   PARAMETER(PR1.Default_Commod_Mark_basis);
   PARAMETER(PR1.Transportation_Temp);
   PARAMETER(PR1.Item_Type_Code);
   PARAMETER(PR1.Package_Type_Code);
   PARAMETER(PR1.Maximum_Audit_Value);
   PARAMETER(PR1.Minimum_Audit_Value);
   PARAMETER(PR1.Market_Overage);
   PARAMETER(PR1.Standard_Overage_Underage);
   PARAMETER(PR1.Commodity_Price_Group);
   PARAMETER(PR1.Item_Pricing_Operation);
   PARAMETER(PR1.Item_Pricing_Constant);
   PARAMETER(PR1.Default_Warehouse);
   PARAMETER(PR1.Price_Method_Default);
   PARAMETER(PR1.Fresh_Chilling_Time);
   PARAMETER(PR1.Base_Conv_Loss_Item);
   PARAMETER(PR1.Variety_Rendered_Cut);
   PARAMETER(PR1.Frozen_Make_to_Order_Sts);
   PARAMETER(PR1.Credit_Item_Status);
   PARAMETER(PR1.Std_Weight_Head_Var_Ren);
   PARAMETER(PR1.Pieces_Per_Head);
   PARAMETER(PR1.Department_Code);
   PARAMETER(PR1.Group_for_Packaging);
   PARAMETER(PR1.Item_Category_Number_1);
   PARAMETER(PR1.Made_to_Order_Code);
   PARAMETER(PR1.Item_Category_Number_2);
   PARAMETER(PR1.Transportation_Equip_Type);
   PARAMETER(PR1.Item_Category_Number_3);
   PARAMETER(PR1.Item_Category_Code_3);
   PARAMETER(PR1.Item_Category_Number_4);
   PARAMETER(PR1.GL_Sub_Code);
   PARAMETER(PR1.Item_Category_Number_5);
   PARAMETER(PR1.Item_Structure_Sub_Class);
   PARAMETER(PR1.Item_Category_Number_6);
   PARAMETER(PR1.Item_Primal_Sched_Report);
   PARAMETER(PR1.Item_Category_Number_7);
   PARAMETER(PR1.Item_Exc_Man_Prc_Excp);
   PARAMETER(PR1.Item_Category_Number_8);
   PARAMETER(PR1.Item_Prod_Sched_Send_PFS);
   PARAMETER(PR1.Item_Category_Number_9);
   PARAMETER(PR1.Item_Category_Code_9);
   PARAMETER(PR1.Item_Category_Number_10);
   PARAMETER(PR1.Item_Category_Code_10);
   PARAMETER(PR1.Pallet_Tare_Weight);
   PARAMETER(PR1.Misc_Tare_Weight);
   PARAMETER(PR1.Production_Lead_Days);
   PARAMETER(PR1.Packaging_Code);
   PARAMETER(PR1.Item_Market_Code);
   PARAMETER(PR1.TF_Co_Ownership_Sts);
   PARAMETER(PR1.Agrimetrics_group);
   PARAMETER(PR1.Agrimetrics_pack);
   PARAMETER(PR1.Agrimetrics_grade);
   PARAMETER(PR1.PA_Base_Avail_Rpt_Include);
   PARAMETER(PR1.PM_Pounds_per_Hour);
   PARAMETER(PR1.Item_Frt_Overage_Prc_UOM);
   PARAMETER(PR1.Packages_per_case);
   PARAMETER(PR1.Use_Freeze_Sell_By_Days);
   PARAMETER(PR1.PM_Batch_Size);
   PARAMETER(PR1.Package_Level_size);
   PARAMETER(PR1.Partial_Item_Code);
   PARAMETER(PR1.WIP_Item_Code);
   PARAMETER(PR1.WIP_Reject_Code);
   PARAMETER(PR1.Std_Costing_Unit_Weight);
   PARAMETER(PR1.FP_Std_Green_Weight);
   PARAMETER(PR1.PM_Std_LBS_Man_Per_Hour);
   PARAMETER(PR1.PM_Raw_Meat_LBS_Per_Hour);
   PARAMETER(PR1.PM_Formula_LBS_Per_Hour);
   PARAMETER(PR1.PM_Finished_LBS_Per_Hour);
   PARAMETER(PR1.SH_Unused_was_broker);
   PARAMETER(PR1.PM_Raw_Material_Type_Code);
   PARAMETER(PR1.PM_Line_Number);
   PARAMETER(PR1.Seconds_Item);
   PARAMETER(PR1.Print_on_Realization_Rpt);
   PARAMETER(PR1.Unit_Weight_Change_Sts);
   PARAMETER(PR1.Piece_Count_Item);
   PARAMETER(PR1.Pieces_Per_Bag);
   PARAMETER(PR1.Bags_Per_Unit);
   PARAMETER(PR1.Export_Domestic);
   PARAMETER(PR1.Print_On_Schedule);
   PARAMETER(PR1.Fresh_Inv_Allocation_Seq);
   PARAMETER(PR1.Fresh_Sched_As_Ordered);
   PARAMETER(PR1.Frozen_Inv_Allocation_Seq);
   PARAMETER(PR1.Primal_Group_Code);
   PARAMETER(PR1.Item_Meat_Cost_Group_Code);
   PARAMETER(PR1.Item_Target_Price);
   PARAMETER(PR1.Minimum_Piece_Weight);
   PARAMETER(PR1.Maximum_Piece_Weight);
   PARAMETER(PR1.Seaboard_Equivalent_Item);
   PARAMETER(PR1.Production_Qty_Per_Shift);
   PARAMETER(PR1.Scheduling_Position_Grade);
   PARAMETER(PR1.Sold_100_Percent_Frozen);
   PARAMETER(PR1.Maximum_Shifts);
   PARAMETER(PR1.Value_Added_Sts);
   PARAMETER(PR1.Label_Type);
   PARAMETER(PR1.Item_TF_Exempt_Code);
   PARAMETER(PR1.Item_TF_Classification);
   PARAMETER(PR1.Default_Workcenter);
   PARAMETER(PR1.EDI_Status_1);
   PARAMETER(PR1.EDI_Status_2);
   PARAMETER(PR1.EDI_Status_3);
   PARAMETER(PR1.Record_Status);
   {
    //?USER: Processing after Data read

    //?Notification of change
    DO;

    // LCL.Company Number Alpha = CVTVAR(DB1.Company Number)
    LCL.Company_Number_Alpha = CVTVAR(DB1.Company_Number);

    // LCL.Item Code Txt = CVTVAR(DB1.Item Code)
    LCL.Item_Code_Txt = CVTVAR(DB1.Item_Code);

    // LCL.Text USR 8 = CONCAT(CON.Type:,DB1.Item Type Code,CON.1)
    LCL.Text_USR_8 = 'Type:' + DB1.Item_Type_Code (1);

    // LCL.Text USR 20 = CONCAT(CON.Changed By:,JOB.*USER,CON.1)
    LCL.Text_USR_20 = 'Changed By:' + JOB.*USER (1);

    // LCL.Note: Text Usr - 50 = CONCAT(CON.CO/ITEM:,LCL.Company Number Alpha,CON.1)
    LCL.Note_Text_Usr_50 = 'CO/ITEM:' + LCL.Company_Number_Alpha (1);

    // LCL.Note: Text Usr - 50 = CONCAT(LCL.Note: Text Usr - 50,LCL.Item Code Txt,CON.1)
    LCL.Note_Text_Usr_50 = LCL.Note_Text_Usr_50 + LCL.Item_Code_Txt (1);

    // LCL.Note: Text Usr - 50 = CONCAT(LCL.Note: Text Usr - 50,LCL.Text USR 8,CON.1)
    LCL.Note_Text_Usr_50 = LCL.Note_Text_Usr_50 + LCL.Text_USR_8 (1);

    // LCL.Note: Text Usr - 50 = CONCAT(LCL.Note: Text Usr - 50,LCL.Text USR 20,CON.1)
    LCL.Note_Text_Usr_50 = LCL.Note_Text_Usr_50 + LCL.Text_USR_20 (1);

    //?Packaging & Supply
    CASE;

    // IF DB1.Item Type Code is Packaging and Supplies
    IF DB1.Item_Type_Code = 'PS';

    //?Box Unit Weight
    CASE;

    // IF DB1.Unit Weight NE PAR.Unit Weight
    IF DB1.Unit_Weight <> PAR.Unit_Weight;

    // LCL.Change Flag USR = CND.Yes
    LCL.Change_Flag_USR = 'Y';

    // Retrieve message - '&1 &2 &3'
    LCL.Office_Message_USR_1 = RTVMSG(USR3138);
    PARAMETER('Unit Weight:');
    PARAMETER(PAR.Unit_Weight);
    PARAMETER(*BLANK);

    ENDIF;

    ENDIF;

    //?Finished Goods
    CASE;

    // IF DB1.Item Type Code is Finished Goods
    IF DB1.Item_Type_Code = 'FG';

    //?Misc Tare Weight
    CASE;

    // IF PAR.Misc Tare Weight NE DB1.Misc Tare Weight
    IF PAR.Misc_Tare_Weight <> DB1.Misc_Tare_Weight;

    // LCL.Change Flag USR = CND.Yes
    LCL.Change_Flag_USR = 'Y';

    // Retrieve message - '&1 &2 &3'
    LCL.Office_Message_USR_1 = RTVMSG(USR3138);
    PARAMETER('Misc Tare Weight:');
    PARAMETER(PAR.Misc_Tare_Weight);
    PARAMETER(',');

    ENDIF;

    //?Minimum Weight Per Case
    CASE;

    // IF PAR.Minimum Weight Per Case NE DB1.Minimum Weight Per Case
    IF PAR.Minimum_Weight_Per_Case <> DB1.Minimum_Weight_Per_Case;

    // LCL.Change Flag USR = CND.Yes
    LCL.Change_Flag_USR = 'Y';

    // Retrieve message - '&1 &2 &3'
    LCL.Office_Message_USR_2 = RTVMSG(USR3138);
    PARAMETER('Min Wt per Case:');
    PARAMETER(PAR.Minimum_Weight_Per_Case);
    PARAMETER(',');

    ENDIF;

    //?Maximum Weight Per Case
    CASE;

    // IF PAR.Maximum Weight Per Case NE DB1.Maximum Weight Per Case
    IF PAR.Maximum_Weight_Per_Case <> DB1.Maximum_Weight_Per_Case;

    // LCL.Change Flag USR = CND.Yes
    LCL.Change_Flag_USR = 'Y';

    // Retrieve message - '&1 &2 &3'
    LCL.Office_Message_USR_3 = RTVMSG(USR3138);
    PARAMETER('Max Wt per Case:');
    PARAMETER(PAR.Maximum_Weight_Per_Case);
    PARAMETER(',');

    ENDIF;

    //?Pieces per Bag
    CASE;

    // IF PAR.Pieces Per Bag NE DB1.Pieces Per Bag
    IF PAR.Pieces_Per_Bag <> DB1.Pieces_Per_Bag;

    // LCL.Change Flag USR = CND.Yes
    LCL.Change_Flag_USR = 'Y';

    // Retrieve message - '&1 &2 &3'
    LCL.Office_Message_USR_4 = RTVMSG(USR3138);
    PARAMETER('Pieces per Bag:');
    PARAMETER(PAR.Pieces_Per_Bag);
    PARAMETER(',');

    ENDIF;

    //?Bags per Unit
    CASE;

    // IF PAR.Bags Per Unit NE DB1.Bags Per Unit
    IF PAR.Bags_Per_Unit <> DB1.Bags_Per_Unit;

    // LCL.Change Flag USR = CND.Yes
    LCL.Change_Flag_USR = 'Y';

    // Retrieve message - '&1 &2 &3'
    LCL.Office_Message_USR_5 = RTVMSG(USR3138);
    PARAMETER('Bags per Unit:');
    PARAMETER(PAR.Bags_Per_Unit);
    PARAMETER(',');

    ENDIF;

    ENDIF;

    CASE;

    // IF LCL.Change Flag USR is Yes
    IF LCL.Change_Flag_USR = 'Y';

    EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
    PARAMETER(DB1.Company_Number);
    PARAMETER('PRKSCHED');
    PARAMETER(WRK.DL_List_ID);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // Call program SND Pager Msg-Long-50 UP.
    CALL PROGRAM(SND Pager Msg-Long-50 UP) ('PPFVUPC');
    PARAMETER(WRK.DL_List_ID);
    PARAMETER(LCL.Note_Text_Usr_50);
    PARAMETER(LCL.Office_Message_USR_1);
    PARAMETER(LCL.Office_Message_USR_2);
    PARAMETER(LCL.Office_Message_USR_3);
    PARAMETER(LCL.Office_Message_USR_4);
    PARAMETER(LCL.Office_Message_USR_5);

    ENDIF;

    ENDDO;

    //?RMC added 2.28.22
    CASE;

    // IF DB1.Record Status NE PAR.Record Status
    IF DB1.Record_Status <> PAR.Record_Status;

    // Call program Rtv Chg Pckg BOM RcdStXF.
    CALL PROGRAM(Rtv Chg Pckg BOM RcdStXF) ('PUV2XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(PAR.Record_Status);

    ENDIF;

    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   //?Plt Floor Intrfc, Item Str Chg, Pricing Audit. BOXID - BOM
   DO;

   // Call program Chg Co/Itm EffOthfls   XF.
   CALL PROGRAM(Chg Co/Itm EffOthfls   XF) ('PPGPXFR');
   PARAMETER(PR1.Company_Number);
   PARAMETER(PR1.Item_Code);
   PARAMETER(PR1.Description_Line_One);
   PARAMETER(PR1.Description_Line_Two);
   PARAMETER(PR1.Item_Label_Line_1);
   PARAMETER(PR1.Item_Label_Line_2);
   PARAMETER(PR1.Item_Label_Line_3);
   PARAMETER(PR1.Item_Label_Line_4);
   PARAMETER(PR1.UOM_Primary);
   PARAMETER(PR1.Conversion_Factor_1);
   PARAMETER(PR1.Operation_Factor_1);
   PARAMETER(PR1.UOM_Second);
   PARAMETER(PR1.Conversion_Factor_2);
   PARAMETER(PR1.Operation_Factor_2);
   PARAMETER(PR1.UOM_Third);
   PARAMETER(PR1.UOM_Pricing);
   PARAMETER(PR1.Unit_Weight);
   PARAMETER(PR1.Quality_Level);
   PARAMETER(PR1.Item_Level);
   PARAMETER(PR1.Production_Date_Control);
   PARAMETER(PR1.Catch_Weight_Status);
   PARAMETER(PR1.Minimum_Weight_Per_Case);
   PARAMETER(PR1.Maximum_Weight_Per_Case);
   PARAMETER(PR1.Number_Cases_On_A_Pallet);
   PARAMETER(PR1.Vendor_Item_Default);
   PARAMETER(PR1.Item_Structure_Class_Code);
   PARAMETER(PR1.Item_Structure_Group_Code);
   PARAMETER(PR1.Item_Structure_Type_Code);
   PARAMETER(PR1.Default_Commod_Mark_basis);
   PARAMETER(PR1.Transportation_Temp);
   PARAMETER(PR1.Item_Type_Code);
   PARAMETER(PR1.Package_Type_Code);
   PARAMETER(PR1.Maximum_Audit_Value);
   PARAMETER(PR1.Minimum_Audit_Value);
   PARAMETER(PR1.Market_Overage);
   PARAMETER(PR1.Standard_Overage_Underage);
   PARAMETER(PR1.Commodity_Price_Group);
   PARAMETER(PR1.Item_Pricing_Operation);
   PARAMETER(PR1.Item_Pricing_Constant);
   PARAMETER(PR1.Default_Warehouse);
   PARAMETER(PR1.Price_Method_Default);
   PARAMETER(PR1.Fresh_Chilling_Time);
   PARAMETER(PR1.Base_Conv_Loss_Item);
   PARAMETER(PR1.Variety_Rendered_Cut);
   PARAMETER(PR1.Frozen_Make_to_Order_Sts);
   PARAMETER(PR1.Credit_Item_Status);
   PARAMETER(PR1.Std_Weight_Head_Var_Ren);
   PARAMETER(PR1.Pieces_Per_Head);
   PARAMETER(PR1.Department_Code);
   PARAMETER(PR1.Group_for_Packaging);
   PARAMETER(PR1.Item_Category_Number_1);
   PARAMETER(PR1.Made_to_Order_Code);
   PARAMETER(PR1.Item_Category_Number_2);
   PARAMETER(PR1.Transportation_Equip_Type);
   PARAMETER(PR1.Item_Category_Number_3);
   PARAMETER(PR1.Item_Category_Code_3);
   PARAMETER(PR1.Item_Category_Number_4);
   PARAMETER(PR1.GL_Sub_Code);
   PARAMETER(PR1.Pallet_Tare_Weight);
   PARAMETER(PR1.Misc_Tare_Weight);
   PARAMETER(PR1.Production_Lead_Days);
   PARAMETER(PR1.Packaging_Code);
   PARAMETER(PR1.Item_Market_Code);
   PARAMETER(PR1.TF_Co_Ownership_Sts);
   PARAMETER(PR1.Agrimetrics_group);
   PARAMETER(PR1.Agrimetrics_pack);
   PARAMETER(PR1.Agrimetrics_grade);
   PARAMETER(PR1.PA_Base_Avail_Rpt_Include);
   PARAMETER(PR1.PM_Pounds_per_Hour);
   PARAMETER(PR1.Item_Frt_Overage_Prc_UOM);
   PARAMETER(PR1.Packages_per_case);
   PARAMETER(PR1.Use_Freeze_Sell_By_Days);
   PARAMETER(PR1.PM_Batch_Size);
   PARAMETER(PR1.Package_Level_size);
   PARAMETER(PR1.Partial_Item_Code);
   PARAMETER(PR1.WIP_Item_Code);
   PARAMETER(PR1.WIP_Reject_Code);
   PARAMETER(PR1.Std_Costing_Unit_Weight);
   PARAMETER(PR1.FP_Std_Green_Weight);
   PARAMETER(PR1.PM_Std_LBS_Man_Per_Hour);
   PARAMETER(PR1.PM_Raw_Meat_LBS_Per_Hour);
   PARAMETER(PR1.PM_Formula_LBS_Per_Hour);
   PARAMETER(PR1.PM_Finished_LBS_Per_Hour);
   PARAMETER(PR1.SH_Unused_was_broker);
   PARAMETER(PR1.PM_Raw_Material_Type_Code);
   PARAMETER(PR1.PM_Line_Number);
   PARAMETER(PR1.Seconds_Item);
   PARAMETER(PR1.Print_on_Realization_Rpt);
   PARAMETER(PR1.Unit_Weight_Change_Sts);
   PARAMETER(PR1.Piece_Count_Item);
   PARAMETER(PR1.Pieces_Per_Bag);
   PARAMETER(PR1.Bags_Per_Unit);
   PARAMETER(PR1.Export_Domestic);
   PARAMETER(PR1.Print_On_Schedule);
   PARAMETER(PR1.Fresh_Inv_Allocation_Seq);
   PARAMETER(PR1.Fresh_Sched_As_Ordered);
   PARAMETER(PR1.Frozen_Inv_Allocation_Seq);
   PARAMETER(PR1.Primal_Group_Code);
   PARAMETER(PR1.Item_Meat_Cost_Group_Code);
   PARAMETER(PR1.UPC_Code_2);
   PARAMETER(PR1.Item_Target_Price);
   PARAMETER(PR1.Minimum_Piece_Weight);
   PARAMETER(PR1.Maximum_Piece_Weight);
   PARAMETER(PR1.Seaboard_Equivalent_Item);
   PARAMETER(PR1.Production_Qty_Per_Shift);
   PARAMETER(PR1.Scheduling_Position_Grade);
   PARAMETER(PR1.Sold_100_Percent_Frozen);
   PARAMETER(PR1.Maximum_Shifts);
   PARAMETER(PR1.Value_Added_Sts);
   PARAMETER(PR1.Label_Type);
   PARAMETER(PR1.Default_Workcenter);
   PARAMETER(PR1.Record_Status);
   PARAMETER(PR2.Company_Number);
   PARAMETER(PR2.Item_Code);
   PARAMETER(PR2.Description_Line_One);
   PARAMETER(PR2.Description_Line_Two);
   PARAMETER(PR2.Item_Label_Line_1);
   PARAMETER(PR2.Item_Label_Line_2);
   PARAMETER(PR2.Item_Label_Line_3);
   PARAMETER(PR2.Item_Label_Line_4);
   PARAMETER(PR2.UOM_Primary);
   PARAMETER(PR2.Conversion_Factor_1);
   PARAMETER(PR2.Operation_Factor_1);
   PARAMETER(PR2.UOM_Second);
   PARAMETER(PR2.Conversion_Factor_2);
   PARAMETER(PR2.Operation_Factor_2);
   PARAMETER(PR2.UOM_Third);
   PARAMETER(PR2.UOM_Pricing);
   PARAMETER(PR2.Unit_Weight);
   PARAMETER(PR2.Quality_Level);
   PARAMETER(PR2.Item_Level);
   PARAMETER(PR2.Production_Date_Control);
   PARAMETER(PR2.Catch_Weight_Status);
   PARAMETER(PR2.Minimum_Weight_Per_Case);
   PARAMETER(PR2.Maximum_Weight_Per_Case);
   PARAMETER(PR2.Number_Cases_On_A_Pallet);
   PARAMETER(PR2.Vendor_Item_Default);
   PARAMETER(PR2.Item_Structure_Class_Code);
   PARAMETER(PR2.Item_Structure_Group_Code);
   PARAMETER(PR2.Item_Structure_Type_Code);
   PARAMETER(PR2.Default_Commod_Mark_basis);
   PARAMETER(PR2.Transportation_Temp);
   PARAMETER(PR2.Item_Type_Code);
   PARAMETER(PR2.Package_Type_Code);
   PARAMETER(PR2.Maximum_Audit_Value);
   PARAMETER(PR2.Minimum_Audit_Value);
   PARAMETER(PR2.Market_Overage);
   PARAMETER(PR2.Standard_Overage_Underage);
   PARAMETER(PR2.Commodity_Price_Group);
   PARAMETER(PR2.Item_Pricing_Operation);
   PARAMETER(PR2.Item_Pricing_Constant);
   PARAMETER(PR2.Default_Warehouse);
   PARAMETER(PR2.Price_Method_Default);
   PARAMETER(PR2.Fresh_Chilling_Time);
   PARAMETER(PR2.Base_Conv_Loss_Item);
   PARAMETER(PR2.Variety_Rendered_Cut);
   PARAMETER(PR2.Frozen_Make_to_Order_Sts);
   PARAMETER(PR2.Credit_Item_Status);
   PARAMETER(PR2.Std_Weight_Head_Var_Ren);
   PARAMETER(PR2.Pieces_Per_Head);
   PARAMETER(PR2.Department_Code);
   PARAMETER(PR2.Group_for_Packaging);
   PARAMETER(PR2.Item_Category_Number_1);
   PARAMETER(PR2.Made_to_Order_Code);
   PARAMETER(PR2.Item_Category_Number_2);
   PARAMETER(PR2.Transportation_Equip_Type);
   PARAMETER(PR2.Item_Category_Number_3);
   PARAMETER(PR2.Item_Category_Code_3);
   PARAMETER(PR2.Item_Category_Number_4);
   PARAMETER(PR2.GL_Sub_Code);
   PARAMETER(PR2.Pallet_Tare_Weight);
   PARAMETER(PR2.Misc_Tare_Weight);
   PARAMETER(PR2.Production_Lead_Days);
   PARAMETER(PR2.Packaging_Code);
   PARAMETER(PR2.Item_Market_Code);
   PARAMETER(PR2.TF_Co_Ownership_Sts);
   PARAMETER(PR2.Agrimetrics_group);
   PARAMETER(PR2.Agrimetrics_pack);
   PARAMETER(PR2.Agrimetrics_grade);
   PARAMETER(PR2.PA_Base_Avail_Rpt_Include);
   PARAMETER(PR2.PM_Pounds_per_Hour);
   PARAMETER(PR2.Item_Frt_Overage_Prc_UOM);
   PARAMETER(PR2.Packages_per_case);
   PARAMETER(PR2.Use_Freeze_Sell_By_Days);
   PARAMETER(PR2.PM_Batch_Size);
   PARAMETER(PR2.Package_Level_size);
   PARAMETER(PR2.Partial_Item_Code);
   PARAMETER(PR2.WIP_Item_Code);
   PARAMETER(PR2.WIP_Reject_Code);
   PARAMETER(PR2.Std_Costing_Unit_Weight);
   PARAMETER(PR2.FP_Std_Green_Weight);
   PARAMETER(PR2.PM_Std_LBS_Man_Per_Hour);
   PARAMETER(PR2.PM_Raw_Meat_LBS_Per_Hour);
   PARAMETER(PR2.PM_Formula_LBS_Per_Hour);
   PARAMETER(PR2.PM_Finished_LBS_Per_Hour);
   PARAMETER(PR2.SH_Unused_was_broker);
   PARAMETER(PR2.PM_Raw_Material_Type_Code);
   PARAMETER(PR2.PM_Line_Number);
   PARAMETER(PR2.Seconds_Item);
   PARAMETER(PR2.Print_on_Realization_Rpt);
   PARAMETER(PR2.Unit_Weight_Change_Sts);
   PARAMETER(PR2.Piece_Count_Item);
   PARAMETER(PR2.Pieces_Per_Bag);
   PARAMETER(PR2.Bags_Per_Unit);
   PARAMETER(PR2.Export_Domestic);
   PARAMETER(PR2.Print_On_Schedule);
   PARAMETER(PR2.Fresh_Inv_Allocation_Seq);
   PARAMETER(PR2.Fresh_Sched_As_Ordered);
   PARAMETER(PR2.Frozen_Inv_Allocation_Seq);
   PARAMETER(PR2.Primal_Group_Code);
   PARAMETER(PR2.Item_Meat_Cost_Group_Code);
   PARAMETER(PR2.UPC_Code_2);
   PARAMETER(PR2.Item_Target_Price);
   PARAMETER(PR2.Minimum_Piece_Weight);
   PARAMETER(PR2.Maximum_Piece_Weight);
   PARAMETER(PR2.Seaboard_Equivalent_Item);
   PARAMETER(PR2.Production_Qty_Per_Shift);
   PARAMETER(PR2.Scheduling_Position_Grade);
   PARAMETER(PR2.Sold_100_Percent_Frozen);
   PARAMETER(PR2.Maximum_Shifts);
   PARAMETER(PR2.Value_Added_Sts);
   PARAMETER(PR2.Label_Type);
   PARAMETER(PR2.Default_Workcenter);
   PARAMETER(PR2.Record_Status);
   PARAMETER(PR3.Box_iD);
   PARAMETER(PR4.Box_iD);

   ENDDO;

   ENDIF;

   //? FP1054 RMC- update the days and plan prod sts, alloc mthd
   //? E2073  RMC- update Use age days over max
   //? E2247  RMC- update CIE MPR report to usda
   //? E2885  RMC- update CIE capacity code
   // Call program Rtv Upd CIE frm ItmSpcXF.
   CALL PROGRAM(Rtv Upd CIE frm ItmSpcXF) ('PMF5XFR');
   PARAMETER(PR1.Company_Number);
   PARAMETER(PR1.Item_Code);
   PARAMETER(PR5.Produce_on_Sunday_Sts);
   PARAMETER(PR5.Produce_on_Monday_Sts);
   PARAMETER(PR5.Produce_on_Tuesday_Sts);
   PARAMETER(PR5.Produce_on_Wednesday_Sts);
   PARAMETER(PR5.Produce_on_Thursday_Sts);
   PARAMETER(PR5.Produce_on_Friday_Sts);
   PARAMETER(PR5.Produce_on_Saturday_Sts);
   PARAMETER(PR5.Plan_Production_Sts);
   PARAMETER(PR5.Allocation_Method);
   PARAMETER(PR5.CIE_Use_Age_Days_over_Max);
   PARAMETER(PR5.CIE_MPR_Report_to_USDA);
   PARAMETER(PR5.CIE_Capacity_Code);

  }

  //?PK0318   Item tupe code change from/to FG/WP
  CASE;

  // IF DB1.Item Type Code NE PAR.Item Type Code
  IF DB1.Item_Type_Code <> PAR.Item_Type_Code;

  CASE;

  // IF DB1.Item Type Code is FG/WP
  IF DB1.Item_Type_Code = 'FG'/'WP';

  // OR PAR.Item Type Code is FG/WP
  OR PAR.Item_Type_Code = 'FG'/'WP';

  EXECUTE FUNCTION(Rtv/Chg for FG/WP typ IF) TYPE(EXCINTFUN)                      AC1623040;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Item_Type_Code);
  PARAMETER(PAR.Item_Type_Code);
  {
   //?Execute internal function

   //?PK0318 - Item type code change from/to FG/WP
   // LCL.Availability Group Code = CON.*BLANK
   LCL.Availability_Group_Code = *BLANK;

   // LCL.Avail Group Code 1 USR = CON.*BLANK
   LCL.Avail_Group_Code_1_USR = *BLANK;

   //?change from FG
   CASE;

   // IF PAR.Item Type Code is Finished Goods
   IF PAR.Item_Type_Code = 'FG';

   // LCL.Availability Group Code = CON.ALL
   LCL.Availability_Group_Code = 'ALL';

   ENDIF;

   //?change from WP
   CASE;

   // IF PAR.Item Type Code is Work in Process
   IF PAR.Item_Type_Code = 'WP';

   // LCL.Availability Group Code = CON.WIP
   LCL.Availability_Group_Code = 'WIP';

   ENDIF;

   //?change to   FG
   CASE;

   // IF PAR.Item Type Code USR is Finished Goods
   IF PAR.Item_Type_Code_USR = 'FG';

   // LCL.Avail Group Code 1 USR = CON.ALL
   LCL.Avail_Group_Code_1_USR = 'ALL';

   ENDIF;

   //?change to   WP
   CASE;

   // IF PAR.Item Type Code USR is Work in Process
   IF PAR.Item_Type_Code_USR = 'WP';

   // LCL.Avail Group Code 1 USR = CON.WIP
   LCL.Avail_Group_Code_1_USR = 'WIP';

   ENDIF;

   EXECUTE FUNCTION(Rtv/Chg for FG/WP typ RT) TYPE(RTVOBJ) FILE(PDKLREP)           AC1623039;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.Availability_Group_Code);
   PARAMETER(LCL.Avail_Group_Code_1_USR);
   {
    //?USER: Processing if Data record not found

    CASE;

    // IF PAR.Avail Group Code 1 USR is NE Blank
    IF PAR.Avail_Group_Code_1_USR <> *BLANK;

    EXECUTE FUNCTION(CRT Co Item/Avail Grp  CR) TYPE(CRTOBJ) FILE(PDKLREP)          AC1380738;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Avail_Group_Code_1_USR);
    PARAMETER(*ZERO);
    PARAMETER(LCL.EDI_Status_1);
    PARAMETER(LCL.EDI_Status_2);
    PARAMETER(LCL.EDI_Status_3);
    PARAMETER('A');
    PARAMETER(JOB.*Job_time);
    PARAMETER(JOB.*USER);
    PARAMETER(JOB.*JOB);
    PARAMETER(JOB.*Job_date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

    //?USER: Process Data record

    EXECUTE FUNCTION(DLT Co Item/Avail Grp  DL) TYPE(DLTOBJ) FILE(PDKLREP)          AC1380740;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Availability_Group_Code);
    CASE;

    // IF PAR.Avail Group Code 1 USR is NE Blank
    IF PAR.Avail_Group_Code_1_USR <> *BLANK;

    EXECUTE FUNCTION(CRT Co Item/Avail Grp  CR) TYPE(CRTOBJ) FILE(PDKLREP)          AC1380738;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(PAR.Avail_Group_Code_1_USR);
    PARAMETER(*ZERO);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Record_Status);
    PARAMETER(JOB.*Job_time);
    PARAMETER(JOB.*USER);
    PARAMETER(JOB.*JOB);
    PARAMETER(JOB.*Job_date);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Record Status = CND.Active
      PAR.Record_Status = 'A';

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

  }

  ENDIF;

  ENDIF;

  //?w92038 RMC  2/28/22 - Update packaging bom rcd sts
  CASE;

  // IF PAR.Record Status NE PAR.Record Status Save
  IF PAR.Record_Status <> PAR.Record_Status_Save;

  // Call program Rtv Chg Pckg BOM RcdStXF.
  CALL PROGRAM(Rtv Chg Pckg BOM RcdStXF) ('PUV2XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Record_Status);

  ENDIF;

 }

 // Call program Upd Item Sls Prod Typ XF.
 CALL PROGRAM(Upd Item Sls Prod Typ XF) ('PMC7XFR');
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Product_Type_Code);
 PARAMETER(PAR.Item_Report_Group_Code_1);
 PARAMETER(PAR.Item_Report_Group_Code_2);
 PARAMETER(PAR.Item_Report_Group_Code_3);
 PARAMETER(PAR.Item_Report_Group_Code_4);
 PARAMETER(PAR.Item_Report_Group_Code_5);

 //?E3313 JJH 08/27/14 - Update the Item Default Extension
 // Call program Chg Itm Dft Ext Sts   XF.
 CALL PROGRAM(Chg Itm Dft Ext Sts   XF) ('PBO7XFR');
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.IDE_Forecast_in_DP);
 PARAMETER(PAR.Record_Status);
 PARAMETER(JOB.*PROGRAM);

 //?DN R13981 10/26/18-Update Spanish Desc in Item Default Extsn.
 //?DN R17040 02/23/21-Update IDE Pallet Tiers & Blocks in Item Dft Extsn.
 //?DN DO2642 06/01/22-Update Spanish Description Line2 in Item Dft Extsn.
 // Call program Upd Itm Dft Extsn Info XF.
 CALL PROGRAM(Upd Itm Dft Extsn Info XF) ('PUJ4XFR');
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.IDE_Pallet_Tiers);
 PARAMETER(PAR.IDE_Pallet_Blocks);
 PARAMETER(PAR.Spanish_Description);
 PARAMETER(PAR.Spanish_Description_Line2);

 //?DN S13387 06/28/18-Added if Record Sts Chg then Upd DP Product Rcd Sts.
 //?E13472 JBB  7/23/18 - Update Total Piece Count in DP Product
 //?Update DP Prod with description if there was a change   E009708
 CASE;

 // IF PAR.Description Line One NE PAR.Description 1 usr
 IF PAR.Description_Line_One <> PAR.Description_1_usr;

 // OR PAR.Record Status NE LCL.Record Status Save
 OR PAR.Record_Status <> LCL.Record_Status_Save;

 // OR PAR.Pieces Per Bag NE LCL.Pieces Per Bag
 OR PAR.Pieces_Per_Bag <> LCL.Pieces_Per_Bag;

 // OR PAR.Bags Per Unit NE LCL.Bags Per Unit
 OR PAR.Bags_Per_Unit <> LCL.Bags_Per_Unit;

 // Call program Chg DP Prod fm Itm Dft XF.
 CALL PROGRAM(Chg DP Prod fm Itm Dft XF) ('PUBCXFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.Record_Status);
 PARAMETER(DB1.Pieces_Per_Bag);
 PARAMETER(DB1.Bags_Per_Unit);

 ENDIF;

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

