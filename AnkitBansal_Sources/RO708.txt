      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * ENVIRONMENT: Pork Division
      * SYSTEM:      Resource Optimization
      * PROGRAM:     RO708
      * TITLE:       View Component Items
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     02/13/07
      *
      * FUNCTION: This is a View that displays the records in the
      *           Component Item Meat Cost file.
      *
      *           Restrictors:
      *               Company
      *               Week-ending date
      *               Primal group code
      *               Production line code
      *               Item code
      *
      *           Positioners:
      *               BOM type
      *
      *           Selectors:
      *               Component item code
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/11/07  LeAnne Ramsey
      *           Recompile only. Added "produced" values to Meat Cost files.
      *
      * 07/20/07  LeAnne Ramsey
      *           Added 2 new function keys:
      *             F14=View Ham Group Sales
      *             F15=View Ham Yield Breakdown
      *
      * 11/02/07  LeAnne Ramsey
      *           Removed the following function key:
      *             F14=View Ham Group Sales
      *
      * 12/28/07  LeAnne Ramsey
      *           Changed text "credit item group" to be "meat cost group".
      *
      * 06/06/08  LeAnne Ramsey
      *           Recompile only. New fields (Ingredient and Other Cost) added to
      *           multiple files.
      *
      * 03/02/09  LeAnne Ramsey
      *           Added "std meat cost" retrieved from Item Std Cost file to screen.
      *
      * 05/12/09  LeAnne Ramsey
      *           Added 'out LDA' in the Initialization Subroutine.
      *
      * 06/17/09  LeAnne Ramsey
      *           Recompile only. Three fields were added to ROP103-Item Meat Cost:
      *               TF Classification Code, TF Class Group Code, Item Structure Type Code
      *
      * 11/21/13  LeAnne Ramsey  (C2897)
      *           Removed unused file: PDLLREL1-Primal Group.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATION
      ****************************************************************
      *
     Frod708    cf   e             workstn sfile(ro708s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fombyrel1  if   e           k disk
      *  Item default
      *
      *
     Fpoaxcpl1  if   e           k disk
      *  Item standard cost
      *
      *
     frop102    if   e           k disk
      *  Component item meat cost
      *
      *
     frol102d   if   e           k disk    rename(cmrec:cmrecd)
      *  Component item meat cost
      *
      *
     frop103    if   e           k disk
      *  Item meat cost
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2
     D svrrn1          s                   like(hdrrn1)
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Save fields for restrictors, positioners and selectors
      *
     D svciitcd        s                   like(c1ciitcd)
     D svbomty         s                   like(c1bomty)
      *
      *
      * Workfields for Data Manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
     D wksyndt         s              7  0
      *
      *
      * Parm fields
      *
     D xxwedt          s                   like(cmwedt)
     D xxcono          s                   like(c1cono)
     D xxitcd          s                   like(c1itcd)
     D xxwemdy         s                   like(c1wemdy)
     D xxpgcd          s                   like(c1pgcd)
     D xxplcd          s                   like(c1plcd)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('ROMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldpfcd                 1      1
      *
     D  ldwedt                10     17  0
     D  ldwemdy               25     30  0
      *
     D  ldcono                32     34  0
      *
     D  lddsfl                50     50
     D  lditcd                57     63  0
     D  lditds                64     93
     D  ldpgcd                94     99
     D  ldpgds               100    129
     D  ldplcd               130    135
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     ro708k1
     C                   write     ro708ec
     C                   exfmt     ro708c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
     C                   when      *in07 = *on                                  F7-reports
     C                   call      'RO413'
     C                   parm      c1cono        xxcono
     C                   parm      c1wemdy       xxwemdy
     C                   parm      c1itcd        xxitcd
     C                   parm      c1pgcd        xxpgcd
     C                   parm      c1plcd        xxplcd
     C                   eval      routne = scrn1
      *
     C                   when      *in15 = *on                                  F15-ham yield
     C                   call      'RO711'
     C                   parm      c1cono        xxcono
     C                   parm                    xxwedt
     C                   parm      c1itcd        xxitcd
     C                   parm                    rtncd
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      svciitcd <> c1ciitcd or                      Selections
     C                             svbomty <> c1bomty
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   movel     scrn1         routne
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   z-add     c1ciitcd      svciitcd
     C                   move      c1bomty       svbomty
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   ro708s1
     C                   seton                                        83        sflclr
     C                   write     ro708c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C     key01         setll     rol102d
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   z-add     0             count
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C     key02         reade     rol102d                                82
     C                   if        *in82 = *off                                 If read
      *
      * Do not put the "produced" record in the subfile when the Item and
      * Component Item are the same.
      *
     C                   if        cmbomty = 'P' and                            If itself
     C                             cmciitcd = c1itcd
     C                   else
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1ciitcd <> 0 and                            If item
     C                             c1ciitcd <> cmciitcd
     C                   else
      *
      * Retrieve Component Item Description
      *
     C     cmciitcd      chain     ombyrel1                           92
     C                   if        *in92 = *off
     C                   eval      d1ciitds = byavna
     C                   else
     C                   eval      d1ciitds = 'Unknown'
     C                   endif
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   z-add     cmciitcd      d1ciitcd
     C                   move      cmbomty       d1bomty
     C                   z-add     cmcibspr      d1cibspr
     C                   z-add     cmcicrvl      d1cicrvl
     C                   move      cmcgcd        d1cgcd
      *
     C                   select
     C                   when      cmbomty = 'P'
     C                   z-add     cmsypc        d1sypc
     C                   z-add     0             d1cspc
     C                   when      cmbomty = 'C'
     C                   z-add     cmcspc        d1cspc
     C                   z-add     0             d1sypc
     C                   endsl
      *
     C                   write     ro708s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If item
     C                   endif                                                  If itself
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'RO09002'
     C                   endif
     C                   else
      *
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    c1cono
     C                   parm                    c1wemdy
     C                   parm                    xxwedt
     C                   parm                    c1itcd
     C                   parm                    rtncd
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    c1cono
     C                   kfld                    xxwedt
     C                   kfld                    c1pgcd
     C                   kfld                    c1plcd
     C                   kfld                    c1itcd
     C                   kfld                    c1bomty
      *
     C     key02         klist
     C                   kfld                    c1cono
     C                   kfld                    xxwedt
     C                   kfld                    c1pgcd
     C                   kfld                    c1plcd
     C                   kfld                    c1itcd
      *
     C     key03         klist
     C                   kfld                    c1cono
     C                   kfld                    xxwedt
     C                   kfld                    c1itcd
      *
     C     key04         klist
     C                   kfld                    c1cono
     C                   kfld                    xxwedt
     C                   kfld                    c1itcd
     C                   kfld                    c1itcd
      *
     C     key05         klist
     C                   kfld                    c1cono
     C                   kfld                    c1itcd
     C                   kfld                    wksyndt
      *
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldcono
     C                   z-add     0             ldwedt
     C                   z-add     0             ldwemdy
     C                   z-add     0             lditcd
     C                   out       lda
      *
      * Retrieve Item Description
      *
     C     c1itcd        chain     ombyrel1                           92
     C                   if        *in92 = *off
     C                   eval      c1itds = byavna
     C                   else
     C                   eval      c1itds = 'Unknown'
     C                   endif                                                  If ok
      *
      *
      * Retrieve Std Meat Cost
      * (We are just plopping this on the screen to compare to our calculated
      *  Meat Cost. The only time they are different is when there is some
      *  override in effect (see file ROP016).
      *
     C     *iso          move      xxwedt        wkisodate
     C     *cymd         move      wkisodate     wksyndt
      *
     C     key05         chain     poaxcpl1                           92
     C                   if        *in92 = *off
     C                   eval(h)   c1mco = (axfrpr/100)
     C                   endif
      *
      * Retrieve Item Meat Cost data
      *
     C     key03         chain     rop103                             92
     C                   if        *in92 = *off
     C                   move      imbids        c1bids
     C                   move      impgcd        c1pgcd
     C                   move      impdcd        c1pdcd
     C                   move      implcd        c1plcd
     C                   z-add     impulb        c1pulb
     C                   z-add     impuam        c1puam
     C                   z-add     impupr        c1pupr
     C                   z-add     imbspr        c1bspr
     C                   z-add     imcrvl        c1crvl
     C                   z-add     imymco        c1ymco
     C                   endif
      *
      * Retrieve Item Sales Yield Percent
      *
     C     key04         chain     rop102                             92
     C                   if        *in92 = *off
     C                   z-add     cmsypc        c1sypc
     C                   move      cmcgcd        c1cgcd
     C                   endif
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     6             wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
