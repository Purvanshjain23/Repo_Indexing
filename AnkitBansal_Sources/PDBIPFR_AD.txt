// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDBIPFR
// ?Date: 14.08.2025 Time: 12:03:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?168853 ISE 11/04/20 - Increased the Buy Order Number field length
//?from 5 to 7
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER(PAR.Application_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Process before print of first page format

//?Company
CASE;

// IF PAR.Accounting Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// 1PG.Name = CON.*ALL
X1PG_Name = *ALL;

//?Company
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Accounting Company Number = PAR.Accounting Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Kill Date
CASE;

// IF PAR.Kill Date is EQ 0
IF PAR.Kill_Date = *ZERO;

// 1PG.Text 1 USR = CON.*ALL
X1PG_Text_1_USR = *ALL;

//?Kill Date
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Kill Date = PAR.Kill Date
X1PG_Kill_Date = PAR.Kill_Date;

ENDIF;

//?Tattoo
CASE;

// IF PAR.Tattoo Number is EQ 0
IF PAR.Tattoo_Number = *ZERO;

// 1PG.Text 2 USR = CON.*ALL
X1PG_Text_2_USR = *ALL;

//?Tattoo
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Tattoo Number = PAR.Tattoo Number
X1PG_Tattoo_Number = PAR.Tattoo_Number;

ENDIF;

//?Item
CASE;

// IF PAR.Item Code is Not Entered
IF PAR.Item_Code = *ZERO;

// 1PG.Item Description = CON.*ALL
X1PG_Item_Description = *ALL;

//?Item
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Item Code = PAR.Item Code
X1PG_Item_Code = PAR.Item_Code;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Item_Code);
PARAMETER(X1PG_Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Producer
CASE;

// IF PAR.Hog Producer Code EQ WRK.BLANK
IF PAR.Hog_Producer_Code = WRK.BLANK;

// 1PG.Hog Producer Name USR = CON.*ALL
X1PG_Hog_Producer_Name_USR = *ALL;

//?Producer
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Hog Producer Code = PAR.Hog Producer Code
X1PG_Hog_Producer_Code = PAR.Hog_Producer_Code;

ENDIF;

//?Buyer
CASE;

// IF PAR.Hog Buyer Code EQ WRK.BLANK
IF PAR.Hog_Buyer_Code = WRK.BLANK;

// 1PG.Hog Buyer Name USR = CON.*ALL
X1PG_Hog_Buyer_Name_USR = *ALL;

//?Buyer
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Hog Buyer Code = PAR.Hog Buyer Code
X1PG_Hog_Buyer_Code = PAR.Hog_Buyer_Code;

ENDIF;

//?Buyer Type
CASE;

// IF PAR.Hog Buyer Type EQ WRK.BLANK
IF PAR.Hog_Buyer_Type = WRK.BLANK;

// 1PG.Hog Buyer Type CndNm USR = CON.*ALL
X1PG_Hog_Buyer_Type_CndNm_USR = *ALL;

//?Buyer Type
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Hog Buyer Type = PAR.Hog Buyer Type
X1PG_Hog_Buyer_Type = PAR.Hog_Buyer_Type;

// 1PG.Hog Buyer Type CndNm USR = Condition name of 1PG.Hog Buyer Type
X1PG_Hog_Buyer_Type_CndNm_USR = RTVCND(X1PG_Hog_Buyer_Type);

ENDIF;

//?Payment Type
CASE;

// IF PAR.Hog Payment Type EQ WRK.BLANK
IF PAR.Hog_Payment_Type = WRK.BLANK;

// 1PG.Hog Pay Type CndNm USR = CON.*ALL
X1PG_Hog_Pay_Type_CndNm_USR = *ALL;

//?Payment Type
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Hog Payment Type = PAR.Hog Payment Type
X1PG_Hog_Payment_Type = PAR.Hog_Payment_Type;

// 1PG.Hog Pay Type CndNm USR = Condition name of 1PG.Hog Payment Type
X1PG_Hog_Pay_Type_CndNm_USR = RTVCND(X1PG_Hog_Payment_Type);

ENDIF;

//?Buy order number
CASE;

// IF PAR.Buy Order Number EQ WRK.ZERO
IF PAR.Buy_Order_Number = WRK.ZERO;

// 1PG.Text 9                USR = CON.*ALL
X1PG_Text_9_USR = *ALL;

//?Buy order number
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Buy Order Number = PAR.Buy Order Number
X1PG_Buy_Order_Number = PAR.Buy_Order_Number;

ENDIF;

//?Buy Order Load
CASE;

// IF PAR.Buy Order Load EQ WRK.ZERO
IF PAR.Buy_Order_Load = WRK.ZERO;

// 1PG.Text USR = CON.*ALL
X1PG_Text_USR = *ALL;

//?Buy Order Load
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Buy Order Load = PAR.Buy Order Load
X1PG_Buy_Order_Load = PAR.Buy_Order_Load;

ENDIF;

//?Retrieve Producer and/or Buyer Name
//?Retrieve Producer and/or Buyer Name
CASE;

// IF PAR.Hog Producer Code NE WRK.BLANK
IF PAR.Hog_Producer_Code <> WRK.BLANK;

// OR PAR.Hog Buyer Code NE WRK.BLANK
OR PAR.Hog_Buyer_Code <> WRK.BLANK;

// Call program Rtv Tattoo Info  2 HPE XF.
CALL PROGRAM(Rtv Tattoo Info  2 HPE XF) ('PKO3XFR');
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Kill_Date);
PARAMETER(X1PG_Tattoo_Number);
PARAMETER(PAR.TH_Hot_Weight_USR);
PARAMETER(X1PG_Hog_Producer_Code);
PARAMETER(X1PG_Hog_Buyer_Code);
PARAMETER(X1PG_Hog_Buyer_Type);
PARAMETER(X1PG_Hog_Payment_Type);
PARAMETER(PAR.TH_Head_Killed_USR);
PARAMETER(PAR.TH_Live_Wgt_USR);
PARAMETER(PAR.TH_Avg_Backfat_USR);
PARAMETER(PAR.TH_Avg_Loin_Eye_USR);
PARAMETER(PAR.TH_Avg_Lean_USR);
PARAMETER(PAR.TH_Avg_Light_Ref_USR);
PARAMETER(X1PG_Hog_Producer_Name_USR);
PARAMETER(X1PG_Hog_Buyer_Name_USR);
PARAMETER(PAR.TH_Avg_Live_Wgt_USR);
PARAMETER(PAR.TH_Avg_Hot_Wgt_USR);
PARAMETER(X1PG_Buy_Order_Number);
PARAMETER(X1PG_Buy_Order_Load);

// 1PG.Hog Producer Name USR = PAR.Hog Producer Name USR
X1PG_Hog_Producer_Name_USR = PAR.Hog_Producer_Name_USR;

// 1PG.Hog Buyer Name USR = PAR.Hog Buyer Name USR
X1PG_Hog_Buyer_Name_USR = PAR.Hog_Buyer_Name_USR;

ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT Accounting Company Number header format

// SUPPRESSED PRINT Kill Date header format

// SUPPRESSED PRINT Buy Order Number header format

// SUPPRESSED PRINT Buy Order Load header format

CASE;

IF NEW Tattoo_Number;
//?Company
CASE;

// IF PAR.Accounting Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

//?Company
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CUR.Accounting Company Number NE PAR.Accounting Company Number
IF CUR.Company_Number <> PAR.Company_Number;

QUIT;

ENDIF;

ENDIF;

//?Kill Date
CASE;

// IF PAR.Kill Date is EQ 0
IF PAR.Kill_Date = *ZERO;

//?Kill Date
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CUR.Kill Date NE PAR.Kill Date
IF CUR.Kill_Date <> PAR.Kill_Date;

QUIT;

ENDIF;

ENDIF;

//?Tattoo
CASE;

// IF PAR.Tattoo Number is EQ 0
IF PAR.Tattoo_Number = *ZERO;

//?Tattoo
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CUR.Tattoo Number NE PAR.Tattoo Number
IF CUR.Tattoo_Number <> PAR.Tattoo_Number;

QUIT;

ENDIF;

ENDIF;

//?Buy order number / load
CASE;

// IF PAR.Buy Order Number EQ WRK.ZERO
IF PAR.Buy_Order_Number = WRK.ZERO;

//?Buy order number / load
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CUR.Buy Order Number NE PAR.Buy Order Number
IF CUR.Buy_Order_Number <> PAR.Buy_Order_Number;

// OR CUR.Buy Order Load NE PAR.Buy Order Load
OR CUR.Buy_Order_Load <> PAR.Buy_Order_Load;

QUIT;

ENDIF;

ENDIF;

//?Retrieve Tattoo Information from HPE
// Call program Rtv Tattoo Info  2 HPE XF.
CALL PROGRAM(Rtv Tattoo Info  2 HPE XF) ('PKO3XFR');
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Kill_Date);
PARAMETER(CUR.Tattoo_Number);
PARAMETER(CUR.TH_Hot_Weight_USR);
PARAMETER(CUR.Hog_Producer_Code);
PARAMETER(CUR.Hog_Buyer_Code);
PARAMETER(CUR.Hog_Buyer_Type);
PARAMETER(CUR.Hog_Payment_Type);
PARAMETER(CUR.TH_Head_Killed_USR);
PARAMETER(CUR.TH_Live_Wgt_USR);
PARAMETER(CUR.TH_Avg_Backfat_USR);
PARAMETER(CUR.TH_Avg_Loin_Eye_USR);
PARAMETER(CUR.TH_Avg_Lean_USR);
PARAMETER(CUR.TH_Avg_Light_Ref_USR);
PARAMETER(PAR.Hog_Producer_Name_USR);
PARAMETER(PAR.Hog_Buyer_Name_USR);
PARAMETER(PAR.TH_Avg_Live_Wgt_USR);
PARAMETER(PAR.TH_Avg_Hot_Wgt_USR);
PARAMETER(CUR.Buy_Order_Number);
PARAMETER(CUR.Buy_Order_Load);

//?Retrieve Cooler Shrink %
EXECUTE FUNCTION(RTV Cooler Shrink %    RT) TYPE(RTVOBJ) FILE(CAAQREP)          AC1255852;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Cooler_Shrink_Percent);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Cold Weight = Hot Weight / ((Cooler Shrink % / 100) + 1)
// Cold Weight
CUR.Cold_Weight_USR = CUR.TH_Hot_Weight_USR / ( ( CUR.Cooler_Shrink_Percent / 100 ) + 1 );

// Print Tattoo Number header format
PRINT Tattoo Number header format;

ENDIF;

//?USER: Process before print of detail format

//?Company
CASE;

// IF PAR.Accounting Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

//?Company
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Accounting Company Number NE PAR.Accounting Company Number
IF DB1.Company_Number <> PAR.Company_Number;

QUIT;

ENDIF;

ENDIF;

//?Kill Date
CASE;

// IF PAR.Kill Date is EQ 0
IF PAR.Kill_Date = *ZERO;

//?Kill Date
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Kill Date NE PAR.Kill Date
IF DB1.Kill_Date <> PAR.Kill_Date;

QUIT;

ENDIF;

ENDIF;

//?Tattoo
CASE;

// IF PAR.Tattoo Number is EQ 0
IF PAR.Tattoo_Number = *ZERO;

//?Tattoo
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Tattoo Number NE PAR.Tattoo Number
IF DB1.Tattoo_Number <> PAR.Tattoo_Number;

QUIT;

ENDIF;

ENDIF;

//?Item
CASE;

// IF PAR.Item Code is Not Entered
IF PAR.Item_Code = *ZERO;

//?Item
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Item Code NE PAR.Item Code
IF DB1.Item_Code <> PAR.Item_Code;

QUIT;

ENDIF;

ENDIF;

//?Producer
CASE;

// IF PAR.Hog Producer Code EQ WRK.BLANK
IF PAR.Hog_Producer_Code = WRK.BLANK;

//?Producer
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Hog Producer Code NE PAR.Hog Producer Code
IF DB1.Hog_Producer_Code <> PAR.Hog_Producer_Code;

QUIT;

ENDIF;

ENDIF;

//?Buyer
CASE;

// IF PAR.Hog Buyer Code EQ WRK.BLANK
IF PAR.Hog_Buyer_Code = WRK.BLANK;

//?Buyer
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Hog Buyer Code NE PAR.Hog Buyer Code
IF DB1.Hog_Buyer_Code <> PAR.Hog_Buyer_Code;

QUIT;

ENDIF;

ENDIF;

//?Buyer Type
CASE;

// IF PAR.Hog Buyer Type EQ WRK.BLANK
IF PAR.Hog_Buyer_Type = WRK.BLANK;

//?Buyer Type
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Hog Buyer Type NE PAR.Hog Buyer Type
IF DB1.Hog_Buyer_Type <> PAR.Hog_Buyer_Type;

QUIT;

ENDIF;

ENDIF;

//?Payment Type
CASE;

// IF PAR.Hog Payment Type EQ WRK.BLANK
IF PAR.Hog_Payment_Type = WRK.BLANK;

//?Payment Type
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Hog Payment Type NE PAR.Hog Payment Type
IF DB1.Hog_Payment_Type <> PAR.Hog_Payment_Type;

QUIT;

ENDIF;

ENDIF;

//?Buy order number / load
CASE;

// IF PAR.Buy Order Number EQ WRK.ZERO
IF PAR.Buy_Order_Number = WRK.ZERO;

//?Buy order number / load
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Buy Order Number NE PAR.Buy Order Number
IF DB1.Buy_Order_Number <> PAR.Buy_Order_Number;

// OR DB1.Buy Order Load NE PAR.Buy Order Load
OR DB1.Buy_Order_Load <> PAR.Buy_Order_Load;

QUIT;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(NXT.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

NXT.Carcass_Yield_SUM = SUM(CUR.Carcass_Yield);

NXT.Predicted_Pounds_SUM = SUM(CUR.Predicted_Pounds);

NXT.Product_Value_SUM = SUM(CUR.Product_Value);

//?USER: Print required level totals

CASE;

IF NEW Tattoo_Number;
//?Company
CASE;

// IF PAR.Accounting Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

//?Company
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CUR.Accounting Company Number NE PAR.Accounting Company Number
IF CUR.Company_Number <> PAR.Company_Number;

QUIT;

ENDIF;

ENDIF;

//?Kill Date
CASE;

// IF PAR.Kill Date is EQ 0
IF PAR.Kill_Date = *ZERO;

//?Kill Date
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CUR.Kill Date NE PAR.Kill Date
IF CUR.Kill_Date <> PAR.Kill_Date;

QUIT;

ENDIF;

ENDIF;

//?Tattoo
CASE;

// IF PAR.Tattoo Number is EQ 0
IF PAR.Tattoo_Number = *ZERO;

//?Tattoo
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CUR.Tattoo Number NE PAR.Tattoo Number
IF CUR.Tattoo_Number <> PAR.Tattoo_Number;

QUIT;

ENDIF;

ENDIF;

//?Buy order number / load
CASE;

// IF PAR.Buy Order Number EQ WRK.ZERO
IF PAR.Buy_Order_Number = WRK.ZERO;

//?Buy order number / load
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CUR.Buy Order Number NE PAR.Buy Order Number
IF CUR.Buy_Order_Number <> PAR.Buy_Order_Number;

// OR CUR.Buy Order Load NE PAR.Buy Order Load
OR CUR.Buy_Order_Load <> PAR.Buy_Order_Load;

QUIT;

ENDIF;

ENDIF;

// Print Tattoo Number totals format
PRINT Tattoo Number totals format;

ENDIF;

// SUPPRESSED PRINT Buy Order Load totals format

// SUPPRESSED PRINT Buy Order Number totals format

// SUPPRESSED PRINT Kill Date totals format

// SUPPRESSED PRINT Accounting Company Number totals format

