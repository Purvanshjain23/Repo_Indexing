// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for OML6E1R
// ?Date: 14.08.2025 Time: 03:27:15
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

EXECUTE FUNCTION(Rtv Organization wo/Co RT) TYPE(RTVOBJ) FILE(PDJYREP)          AC2066670;
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Company Organization = DB1.Company Organization
 PAR.Company_Organization = DB1.Company_Organization;

 QUIT;

}


//?  Force to add mode if accrual code is blank
CASE;

// IF PAR.Accrual Code is Not Entered
IF PAR.Accrual_Code = *BLANK;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?***** Change Log and Comments
DO;

//?** 06/21/2022 RMC
//?**  dont let them use REVFRT yet. was going tobe used for Fuel surcharge
//?**  but they are using Cust ABS frt instead. this needs more testing
//?**  if they decide to use this.
//?** 03/17/2022 RMC
//?** added new sales hist exp bucket value: REVFRT
//?*****
//?** 05/11/09   RMC S00797 dont allow Blank for All Product IF
//?  STANDARD SCHEDULE = "Y"
//?*****
//?** 12/03/2007 RMC DLY029 Dont dft Affect Sales Realz.
//?  (CM type s/be "N",  TF s/be "Y")
//?*****
//?** 05/29/2007 RMC DLY029
//?** Added additional validations for new fields
//?*****
//?** 05/23/2007 LJB DLY029
//?** Added new fields to the screen so I could test changes and
//?** additions. Removed fields not currently being used.
//?** Added prompt pgm for g/l code cr field
//?*****
//?RMC 12/9/05 dont allow edit to G/L code fields
//?*****
//?E4057 JJH 05/06/15 - Recompiled because the Valid Entries LST of
//?  Accrual Rate Type has been modified.
ENDDO;

//?*****
//?USER: Initialize detail screen (new record)

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

ENDIF;

//?** Load default values into fields not on maintenance screen.
// DTL.Automatic Accrual (Y/N) = CND.Yes
DTL.Automatic_Accrual_Y_N = 'Y';

// DTL.Add-on/Allowance = CND.Add-on
DTL.Add_on_Allowance = 'A';

// DTL.Reverse Accrual Code = CND.Not Entered
DTL.Reverse_Accrual_Code = *BLANK;

//?** Load default values into fields that are on maintenance screen.
// DTL.Accrual Type = CND.Trade Fund
DTL.Accrual_Type = 'TF';

// DTL.Standard Schedule (Y/N) = CND.no
DTL.Standard_Schedule_Y_N = 'N';

// DTL.Print On Invoice (Y/N) = CND.No
DTL.Print_On_Invoice_Y_N = 'N';

// DTL.Affect Invoice Price = CND.no
DTL.Affect_Invoice_Price = 'N';

// DTL.Ledger Accrual (Y/N) = CND.yes
DTL.Post_to_G_L_Y_N = 'Y';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Rtv Accr Prog EXT     RT) TYPE(RTVOBJ) FILE(PBAMREP)           AC2048357;
PARAMETER(DB1.Accrual_Code);
PARAMETER(DTL.G_L_Account_Category);
PARAMETER(DTL.APE_Excl_Collect_ShpMthd);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.USR Record Status Desc = Condition name of DTL.Record Status
DTL.USR_Record_Status_Desc = RTVCND(DTL.Record_Status);

// DTL.Condition Desc. 1  USR = Condition name of DTL.Accrual Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Accrual_Type);

// DTL.Condition Desc. 2  USR = Condition name of DTL.Sub Ledger Code
DTL.Condition_Desc_2_USR = RTVCND(DTL.Sub_Ledger_Code);

// DTL.Condition Name 10 USR = Condition name of DTL.Max Accrual Amount Type
DTL.Condition_Name_10_USR = RTVCND(DTL.Max_Accrual_Amount_Type);

// DTL.Rate Usage Desc USR = Condition name of DTL.Rate Usage
DTL.Rate_Usage_Desc_USR = RTVCND(DTL.Rate_Usage);

//?G/L Code Dr   - DLY029 RMC 05/29/07 Reinstate this GL Acct
CASE;

// IF DTL.G/L Code Dr is Entered
IF DTL.G_L_Code_Dr <> *BLANK;

// Call program Val G/L Act 2 HPE-noCO XF.
CALL PROGRAM(Val G/L Act 2 HPE-noCO XF) ('PLJJXFR');
PARAMETER(DTL.G_L_Code_Dr);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(*BLANK);
PARAMETER(LCL.G_L_Account_Type_2_USR);
PARAMETER(LCL.Record_Found_USR);

// Call program Rtv Account ID Desc   UP.
CALL PROGRAM(Rtv Account ID Desc   UP) ('ACTRET');
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(DTL.Note_Line_1);

//?G/L Code Dr   - DLY029 RMC 05/29/07 Reinstate this GL Acct
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Val G/L Act 2 HPE-noCO XF.
CALL PROGRAM(Val G/L Act 2 HPE-noCO XF) ('PLJJXFR');
PARAMETER('OMREGSLS');
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(*BLANK);
PARAMETER(LCL.G_L_Account_Type_2_USR);
PARAMETER(LCL.Record_Found_USR);

// Call program Rtv Account ID Desc   UP.
CALL PROGRAM(Rtv Account ID Desc   UP) ('ACTRET');
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(DTL.Note_Line_1);

ENDIF;

//?G/L Code Cr
CASE;

// IF DTL.G/L Code Cr is Entered
IF DTL.G_L_Code_Cr <> *BLANK;

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(360);
PARAMETER(DTL.G_L_Code_Cr);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Record_Found_USR);

// Call program Rtv Account ID Desc   UP.
CALL PROGRAM(Rtv Account ID Desc   UP) ('ACTRET');
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(DTL.Note_Line_2);

//?G/L Code Cr
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Val G/L Act Cde 2 HPE XF.
CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
PARAMETER(360);
PARAMETER('OMREGSLS');
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Record_Found_USR);

// Call program Rtv Account ID Desc   UP.
CALL PROGRAM(Rtv Account ID Desc   UP) ('ACTRET');
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(DTL.Note_Line_2);

ENDIF;

//?Capture orignial value for Accrual Rate
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

//?Save copy for change detection
// LCL.Accrual Rate = DTL.Accrual Rate
LCL.Accrual_Rate = DTL.Accrual_Rate;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?OUTPUT: AType, RUsage, StdSch, AllPrd, RateType, Search
CASE;

// IF DTL.Rate Usage is Customer Accrual
IF DTL.Rate_Usage = 'C';

//?RMC 08/01/07 val usage. dont allow if used on a customer
EXECUTE FUNCTION(Rtv Chk Accl Used     RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1839161;
PARAMETER(DTL.Accrual_Code);
PARAMETER(LCL.Status_Y_or_N);
{
 //?USER: Processing if Data record not found

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 //?USER: Process Data record

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 QUIT;

}


//?OUTPUT: AType, RUsage, StdSch, AllPrd, RateType, Search
// IF DTL.Rate Usage is Product Accrual
IF DTL.Rate_Usage = 'P';

EXECUTE FUNCTION(Val Accrual Code Exst RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1891577;
PARAMETER(DTL.Accrual_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?OUTPUT ONLY
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// LCL.Status - Y or N = CND.yes
LCL.Status_Y_or_N = 'Y';

ENDIF;

//?OUTPUT: AType, RUsage, StdSch, AllPrd, RateType, Search
// IF DTL.Rate Usage is Order
IF DTL.Rate_Usage = 'O';

EXECUTE FUNCTION(VAl ACode Exists      RT) TYPE(RTVOBJ) FILE(OMHQCPP)           AC1964258;
PARAMETER(DTL.Accrual_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?OUTPUT ONLY
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// LCL.Status - Y or N = CND.yes
LCL.Status_Y_or_N = 'Y';

ENDIF;

EXECUTE FUNCTION(Val Rate Exists       RT) TYPE(RTVOBJ) FILE(PNFVREP)           AC1965605;
PARAMETER(DTL.Accrual_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?OUTPUT ONLY
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// LCL.Status - Y or N = CND.yes
LCL.Status_Y_or_N = 'Y';

ENDIF;

//?OUTPUT: AType, RUsage, StdSch, AllPrd, RateType, Search
// IF DTL.Rate Usage is Auto Accrual
IF DTL.Rate_Usage = 'A';

// LCL.Status - Y or N = CND.yes
LCL.Status_Y_or_N = 'Y';

ENDIF;

//?USER: Process key screen request

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

//?USER: Validate detail screen fields

//?07/16/08 PKD E00193 Product Accrual must be created as Standard.
//?DEFAULTS FOR: Accrual Type = Product Accrual
CASE;

// IF DTL.Accrual Type is Product Accrual
IF DTL.Accrual_Type = 'PC'/'PF'/'PD';

// DTL.Standard Schedule (Y/N) = CND.yes
DTL.Standard_Schedule_Y_N = 'Y';

// DTL.All Products (Y/N) = CND.No
DTL.All_Products_Y_N = 'N';

// DTL.Accrual Detail Search = CND.Item
DTL.Accrual_Detail_Search = 'I';

// DTL.Rate Usage = CND.Product Accrual
DTL.Rate_Usage = 'P';

ENDIF;

//?DEFAULTS FOR: Accrual Type = Customer Accrual
CASE;

// IF DTL.Accrual Type is Customer Accrual
IF DTL.Accrual_Type = 'BG'/'CM'/'CR'/'DA'/'IF'/'PR'/'TX'/'TF'/'CC'/'FA'/'SF'/'WF'/'CF'             +
/'LF';

// AND DTL.Rate Usage is *None
AND DTL.Rate_Usage = *BLANK;

// DTL.Rate Usage = CND.Customer Accrual
DTL.Rate_Usage = 'C';

ENDIF;

//?DEFAULTS FOR: Accrual Type = Sales Adjustment
CASE;

// IF DTL.Accrual Type is Sales Adjustment
IF DTL.Accrual_Type = 'SA';

// DTL.Rate Usage = CND.Auto Accrual
DTL.Rate_Usage = 'A';

ENDIF;

//?DEFAULTS FOR: Accrual Type = Allowance-DA,FA (09/26/12 PKD E2199)
CASE;

// IF DTL.Accrual Type is Allowance
IF DTL.Accrual_Type = 'DA'/'FA';

//?09/26/12 PKD E2199 Added defaults for Allowance type accruals.
CASE;

// IF DTL.Sales History Exp Bucket is Revenue Freight
IF DTL.Sales_History_Exp_Bucket = 'REVFRT';

//?RMC added this so it will add to the invoice
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Add-on/Allowance = CND.Allowance
DTL.Add_on_Allowance = 'S';

ENDIF;

//?Affect Invoice Price = Yes
CASE;

// IF DTL.Affect Invoice Price is yes
IF DTL.Affect_Invoice_Price = 'Y';

// DTL.Print On Invoice (Y/N) = CND.No
DTL.Print_On_Invoice_Y_N = 'N';

// DTL.Affect Sales Realz Rpt = CND.no
DTL.Affect_Sales_Realz_Rpt = 'N';

// DTL.Sales History Exp Bucket = CND.None
DTL.Sales_History_Exp_Bucket = *NONE;

// DTL.Post to G/L (Y/N) = CND.no
DTL.Post_to_G_L_Y_N = 'N';

ENDIF;

//?Affect Invoice Price = No
CASE;

// IF DTL.Affect Invoice Price is no
IF DTL.Affect_Invoice_Price = 'N';

// DTL.Print On Invoice (Y/N) = CND.Yes
DTL.Print_On_Invoice_Y_N = 'Y';

// DTL.Affect Sales Realz Rpt = CND.yes
DTL.Affect_Sales_Realz_Rpt = 'Y';

CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

//?11/25/13 PKD C2886 A/R Account in GL was being adjusted; however
//?             Sales Account was not.  The G/L Post flag needs to
//?             be Y.
// DTL.Post to G/L (Y/N) = CND.yes
DTL.Post_to_G_L_Y_N = 'Y';

CASE;

// IF DTL.Sales History Exp Bucket is Revenue Freight
IF DTL.Sales_History_Exp_Bucket = 'REVFRT';

// OR DTL.Sales History Exp Bucket is Revenue Adjust
OR DTL.Sales_History_Exp_Bucket = 'REVADJ';

//?added this case .. was always moving REVADJ in this case
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Sales History Exp Bucket = CND.Revenue Adjust
DTL.Sales_History_Exp_Bucket = 'REVADJ';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?DEFAULTS FOR: Rate Usage = Order
CASE;

// IF DTL.Rate Usage is Order
IF DTL.Rate_Usage = 'O';

// DTL.Standard Schedule (Y/N) = CND.yes
DTL.Standard_Schedule_Y_N = 'Y';

// DTL.All Products (Y/N) = CND.No
DTL.All_Products_Y_N = 'N';

// DTL.Accrual Rate Type = CND.*NONE
DTL.Accrual_Rate_Type = *BLANK;

// DTL.Accrual Detail Search = CND.Program Rate
DTL.Accrual_Detail_Search = 'P';

ENDIF;

//?Select G/L Code DR request   - DLY029 RMC 05/29/07 reinstate this acct
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.G/L Code Dr
AND PGM.*Cursor_field = DTL.G_L_Code_Dr;

//?Sel without company
// Call program Sel G/L Act 2 HPE-noCo XF.
CALL PROGRAM(Sel G/L Act 2 HPE-noCo XF) ('PLJKSRR');
PARAMETER(DTL.G_L_Code_Dr);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER('OMS');
PARAMETER(WRK.G_L_Account_Type_2_USR);

ENDIF;

//?Select G/L Code CR request
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.G/L Code Cr
AND PGM.*Cursor_field = DTL.G_L_Code_Cr;

//?Sel without company
// Call program Sel G/L Act 2 HPE-noCo XF.
CALL PROGRAM(Sel G/L Act 2 HPE-noCo XF) ('PLJKSRR');
PARAMETER(DTL.G_L_Code_Cr);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER('OMS');
PARAMETER(WRK.G_L_Account_Type_2_USR);

ENDIF;

//?SEL: G/L Account Category
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.G/L Account Category
IF PGM.*Cursor_field = DTL.G_L_Account_Category;

// Call program Sel G/L Acct Catgry   SR.
CALL PROGRAM(Sel G/L Acct Catgry   SR) ('PLRSSRR');
PARAMETER(DTL.G_L_Account_Category);

ENDIF;

ENDIF;

//?F7=Display G/L Accounts
CASE;

// IF DTL.*CMD key is CF07
IF DTL.*CMD_key = '07';

// Call program Dsp G/L Accounts  HPE XF.
CALL PROGRAM(Dsp G/L Accounts  HPE XF) ('PLNEDFR');
PARAMETER(*BLANK);
PARAMETER(DTL.G_L_Account_Category);

ENDIF;

//?** Check Standard Schedule requirements            ????
CASE;

// IF DTL.Standard Schedule (Y/N) is blank
IF DTL.Standard_Schedule_Y_N = *BLANK;

// Send error message - 'Standard Schedule is required.'
ERROR(USR3730);
MSGPARM(DTL.Standard_Schedule_Y_N);

ENDIF;

//?VAL: Rate Usage
CASE;

// IF DTL.Accrual Type is Product Accrual
IF DTL.Accrual_Type = 'PC'/'PF'/'PD';

CASE;

// IF DTL.Rate Usage is Not Product Accrual
IF DTL.Rate_Usage = 'A'/'C'/'O';

// Send error message - 'Rate Usage Invalid for Accrual Type &2.'
ERROR(USR4241);
MSGPARM(DTL.Rate_Usage);
MSGPARM(DTL.Accrual_Type);

ENDIF;

//?VAL: Rate Usage
// IF DTL.Accrual Type is Customer Accrual
IF DTL.Accrual_Type = 'BG'/'CM'/'CR'/'DA'/'IF'/'PR'/'TX'/'TF'/'CC'/'FA'/'SF'/'WF'/'CF'             +
/'LF';

CASE;

// IF DTL.Rate Usage is Product Accrual
IF DTL.Rate_Usage = 'P';

// OR DTL.Rate Usage is Auto Accrual
OR DTL.Rate_Usage = 'A';

// Send error message - 'Rate Usage Invalid for Accrual Type &2.'
ERROR(USR4241);
MSGPARM(DTL.Rate_Usage);
MSGPARM(DTL.Accrual_Type);

ENDIF;

ENDIF;

//?S00797  Req All Product Value if ...
CASE;

// IF DTL.All Products (Y/N) EQ WRK.Blank for 3          USR
IF DTL.All_Products_Y_N = WRK.Blank_for_3_USR;

CASE;

// IF DTL.Standard Schedule (Y/N) is yes
IF DTL.Standard_Schedule_Y_N = 'Y';

CASE;

// IF DTL.Accrual Rate Type is Flat Amount
IF DTL.Accrual_Rate_Type = 'FL';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.All_Products_Y_N);

ENDIF;

ENDIF;

//?IF AN ITEM EXISTS, MAKE SURE USER DIDNT ACCIDENTLY BLANK OUT THE ALL PROD
EXECUTE FUNCTION(RTV Accrual Code Dtl   RT) TYPE(RTVOBJ) FILE(PPAHREP)          AC1833540;
PARAMETER(DTL.Accrual_Code);
PARAMETER(LCL.Item_Code);
PARAMETER(LCL.Accrual_Rate_Type);
PARAMETER(LCL.Accrual_Rate);
PARAMETER(LCL.Record_Selected_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Selected       USR = CND.no
 PAR.Record_Selected_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Selected       USR = CND.yes
 PAR.Record_Selected_USR = 'Y';

}


CASE;

// IF LCL.Item Code is Entered
IF LCL.Item_Code <> *ZERO;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.All_Products_Y_N);

ENDIF;

ENDIF;

//?** Check All Products requirements
CASE;

// IF DTL.All Products (Y/N) is Yes or X
IF DTL.All_Products_Y_N = 'Y'/'X';

//?Accrual Rate
CASE;

// IF DTL.Accrual Rate is equal to zero
IF DTL.Accrual_Rate = *ZERO;

//?** Allow zero rate if Sales Adjustment
CASE;

// IF DTL.Accrual Type is Sales Adjustment
IF DTL.Accrual_Type = 'SA';

//?** Allow zero rate if Sales Adjustment
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Accrual Rate must be entered if All Product=Y'
ERROR(USR3723);
MSGPARM(DTL.Accrual_Rate);

ENDIF;

ENDIF;

//?Accrual Rate Type
CASE;

// IF DTL.Accrual Rate Type is *NONE
IF DTL.Accrual_Rate_Type = *BLANK;

// Send error message - 'Accrual Rate Type must be entered if All Product=Y'
ERROR(USR3724);
MSGPARM(DTL.Accrual_Rate_Type);

ENDIF;

ENDIF;

//?** Check Print on Invoice requirements
CASE;

// IF DTL.Print On Invoice (Y/N) is Not Entered
IF DTL.Print_On_Invoice_Y_N = *BLANK;

// Send error message - 'Print on Invoice req'd'
ERROR(USR3726);
MSGPARM(DTL.Print_On_Invoice_Y_N);

//?** Check Print on Invoice requirements
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Print On Invoice (Y/N) is Yes
IF DTL.Print_On_Invoice_Y_N = 'Y';

CASE;

// IF DTL.Invoice Print Type is Not Entered
IF DTL.Invoice_Print_Type = *BLANK;

// Send error message - 'Invoice Print Type is required if Print on Invoice flag is Y.'
ERROR(USR3727);
MSGPARM(DTL.Invoice_Print_Type);

ENDIF;

ENDIF;

ENDIF;

//?** Check Affect Invoice Price requirements
CASE;

// IF DTL.Affect Invoice Price is blank
IF DTL.Affect_Invoice_Price = *BLANK;

// Send error message - 'Affect Invoice Price is required.'
ERROR(USR3728);
MSGPARM(DTL.Affect_Invoice_Price);

ENDIF;

//?** Check Affect Realization requirements
CASE;

// IF DTL.Affect Sales Realz Rpt is blank
IF DTL.Affect_Sales_Realz_Rpt = *BLANK;

// Send error message - 'Affect Realization is required.'
ERROR(USR3729);
MSGPARM(DTL.Affect_Sales_Realz_Rpt);

ENDIF;

//?VAL: Product Accrual
CASE;

// IF DTL.Accrual Type is Product Accrual
IF DTL.Accrual_Type = 'PC'/'PF'/'PD';

//?VAL: Sub Ledger
CASE;

// IF DTL.Sub Ledger Code is Valid Product Sub-Ledger
IF DTL.Sub_Ledger_Code = 'P'/*BLANK;

//?VAL: Sub Ledger
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Sub Ledger Invalid for Accrual Type.'
ERROR(USR3967);
MSGPARM(DTL.Sub_Ledger_Code);

ENDIF;

//?VAL: Accrual Rate Type
CASE;

// IF DTL.All Products (Y/N) is Yes
IF DTL.All_Products_Y_N = 'Y';

CASE;

// IF DTL.Accrual Rate Type is Valid Product Rate Type
IF DTL.Accrual_Rate_Type = 'W'/'Q';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Accrl Rate Type Invalid for Accrual Type.'
ERROR(USR3968);
MSGPARM(DTL.Accrual_Rate_Type);

ENDIF;

ENDIF;

ENDIF;

//?VAL: Accrual Detail Search
CASE;

// IF DTL.All Products (Y/N) is Not Yes
IF DTL.All_Products_Y_N = 'N'/'X';

CASE;

// IF DTL.Accrual Detail Search is Not Entered
IF DTL.Accrual_Detail_Search = *BLANK;

// Send error message - 'Accrual Detail Search must be entered if All Products=X or N.'
ERROR(USR3725);
MSGPARM(DTL.Accrual_Detail_Search);

// IF *OTHERWISE
IF *OTHERWISE;

//?VAL: Customer/Product/Auto Program
CASE;

// IF DTL.Rate Usage is Customer Accrual
IF DTL.Rate_Usage = 'C';

// OR DTL.Rate Usage is Auto Accrual
OR DTL.Rate_Usage = 'A';

// OR DTL.Rate Usage is Product Accrual
OR DTL.Rate_Usage = 'P';

CASE;

// IF DTL.Accrual Detail Search is Program Rate
IF DTL.Accrual_Detail_Search = 'P';

// Send error message - 'Accrual Detail Search is invalid for Rate Usage.'
ERROR(USR4237);
MSGPARM(DTL.Accrual_Detail_Search);

ENDIF;

ENDIF;

//?VAL: Order
CASE;

// IF DTL.Rate Usage is Order
IF DTL.Rate_Usage = 'O';

CASE;

// IF DTL.Accrual Detail Search is Not Program Rate
IF DTL.Accrual_Detail_Search = 'I'/'S';

// Send error message - 'Accrual Detail Search is invalid for Rate Usage.'
ERROR(USR4237);
MSGPARM(DTL.Accrual_Detail_Search);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Val G/L Code Dr  - DLY029 RMC  05/29/07 Reinstate this acct
CASE;

// IF DTL.G/L Code Dr is Entered
IF DTL.G_L_Code_Dr <> *BLANK;

// Call program Val G/L Act 2 HPE-noCO XF.
CALL PROGRAM(Val G/L Act 2 HPE-noCO XF) ('PLJJXFR');
PARAMETER(DTL.G_L_Code_Dr);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Record_Found_USR);

// Call program Rtv Account ID Desc   UP.
CALL PROGRAM(Rtv Account ID Desc   UP) ('ACTRET');
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(DTL.Note_Line_1);

//?Val G/L Code Dr  - DLY029 RMC  05/29/07 Reinstate this acct
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Val G/L Act 2 HPE-noCO XF.
CALL PROGRAM(Val G/L Act 2 HPE-noCO XF) ('PLJJXFR');
PARAMETER('OMREGSLS');
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Record_Found_USR);

// Call program Rtv Account ID Desc   UP.
CALL PROGRAM(Rtv Account ID Desc   UP) ('ACTRET');
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(DTL.Note_Line_1);

ENDIF;

//?Val G/L Code Cr
CASE;

// IF DTL.G/L Code Cr is Entered
IF DTL.G_L_Code_Cr <> *BLANK;

// Call program Val G/L Act 2 HPE-noCO XF.
CALL PROGRAM(Val G/L Act 2 HPE-noCO XF) ('PLJJXFR');
PARAMETER(DTL.G_L_Code_Cr);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Record_Found_USR);

// Call program Rtv Account ID Desc   UP.
CALL PROGRAM(Rtv Account ID Desc   UP) ('ACTRET');
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(DTL.Note_Line_2);

//?Val G/L Code Cr
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Val G/L Act 2 HPE-noCO XF.
CALL PROGRAM(Val G/L Act 2 HPE-noCO XF) ('PLJJXFR');
PARAMETER('OMREGSLS');
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.Record_Found_USR);

// Call program Rtv Account ID Desc   UP.
CALL PROGRAM(Rtv Account ID Desc   UP) ('ACTRET');
PARAMETER(PGM.*Return_code);
PARAMETER(LCL.G_L_Account_Id_USR);
PARAMETER(DTL.Note_Line_2);

ENDIF;

//?VAL: Accrual Rate
CASE;

// IF DTL.Rate Usage is Order
IF DTL.Rate_Usage = 'O';

CASE;

// IF DTL.Accrual Rate is Entered
IF DTL.Accrual_Rate <> *ZERO;

// Send error message - 'Rate must be zero for Rate Usage of &2.'
ERROR(USR4221);
MSGPARM(DTL.Accrual_Rate);
MSGPARM(DTL.Rate_Usage);

ENDIF;

ENDIF;

//?VAL: G/L Sub Account Code
CASE;

// IF DTL.G/L Sub Account Code is Entered
IF DTL.G_L_Sub_Account_Code <> *BLANK;

CASE;

// IF DTL.Accrual Detail Search is Program Rate
IF DTL.Accrual_Detail_Search = 'P';

// Send error message - 'G/L Sub Account must be blank for Accrual Detail Search &2.'
ERROR(USR4248);
MSGPARM(DTL.G_L_Sub_Account_Code);
MSGPARM(DTL.Accrual_Detail_Search);

ENDIF;

ENDIF;

//?VAL: GL Account Category
CASE;

// IF DTL.Post to G/L (Y/N) is yes
IF DTL.Post_to_G_L_Y_N = 'Y';

CASE;

// IF DTL.G/L Account Category is Not Entered
IF DTL.G_L_Account_Category = *BLANK;

// DTL.G/L Account Category = DTL.Accrual Type
DTL.G_L_Account_Category = DTL.Accrual_Type;

ENDIF;

// Call program Val G/L Acct Catgry   XF.
CALL PROGRAM(Val G/L Acct Catgry   XF) ('PLRUXFR');
PARAMETER(DTL.G_L_Account_Category);
PARAMETER(LCL.Record_Found_USR);

CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'G/L Account Category Not Found.'
ERROR(USR4532);
MSGPARM(DTL.G_L_Account_Category);

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

// DTL.USR Record Status Desc = Condition name of DTL.Record Status
DTL.USR_Record_Status_Desc = RTVCND(DTL.Record_Status);

// DTL.Condition Desc. 1  USR = Condition name of DTL.Accrual Type
DTL.Condition_Desc_1_USR = RTVCND(DTL.Accrual_Type);

// DTL.Condition Desc. 2  USR = Condition name of DTL.Sub Ledger Code
DTL.Condition_Desc_2_USR = RTVCND(DTL.Sub_Ledger_Code);

// DTL.Condition Name 10 USR = Condition name of DTL.Max Accrual Amount Type
DTL.Condition_Name_10_USR = RTVCND(DTL.Max_Accrual_Amount_Type);

// DTL.Rate Entry Desc USR = Condition name of DTL.Rate Entry
DTL.Rate_Usage_Desc_USR = RTVCND(DTL.Rate_Usage);

//?USER: Validate detail screen relations

//?Validate G/L Code DR - DLY029 RMC 05/29/07 Reinstate this acct
CASE;

// IF DTL.G/L Code Dr is Entered
IF DTL.G_L_Code_Dr <> *BLANK;

// Call program Val G/L Act 2 HPE-noCO XF.
CALL PROGRAM(Val G/L Act 2 HPE-noCO XF) ('PLJJXFR');
PARAMETER(DTL.G_L_Code_Dr);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER('OMS');
PARAMETER(*BLANK);
PARAMETER(WRK.Record_Found_USR);

CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'G/L Code &2 entry is invalid.'
ERROR(USR2131);
MSGPARM(DTL.G_L_Code_Dr);
MSGPARM('DR');

ENDIF;

ENDIF;

//?Validate G/L Code CR-reinstate for dly029, ljb 7/3/07
CASE;

// IF DTL.G/L Code Cr is Entered
IF DTL.G_L_Code_Cr <> *BLANK;

// Call program Val G/L Act 2 HPE-noCO XF.
CALL PROGRAM(Val G/L Act 2 HPE-noCO XF) ('PLJJXFR');
PARAMETER(DTL.G_L_Code_Cr);
PARAMETER(WRK.G_L_Code_Desc_USR);
PARAMETER(WRK.G_L_Account_Id_USR);
PARAMETER('OMS');
PARAMETER(*BLANK);
PARAMETER(WRK.Record_Found_USR);

CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// Send error message - 'G/L Code &2 entry is invalid.'
ERROR(USR2131);
MSGPARM(DTL.G_L_Code_Cr);
MSGPARM('CR');

ENDIF;

ENDIF;

//?-----
//?If Accrual Rate changed, set Customer Update flag
CASE;

// IF DTL.Accrual Rate NE LCL.Accrual Rate
IF DTL.Accrual_Rate <> LCL.Accrual_Rate;

// AND DTL.Standard Schedule (Y/N) is yes
AND DTL.Standard_Schedule_Y_N = 'Y';

// AND DTL.Accrual Type is Customer Accrual
AND DTL.Accrual_Type = 'BG'/'CM'/'CR'/'DA'/'IF'/'PR'/'TX'/'TF'/'CC'/'FA'/'SF'/'WF'/'CF'            +
/'LF';

// AND DTL.Rate Usage is Customer Accrual
AND DTL.Rate_Usage = 'C';

// LCL.USR Update Flag = CND.Yes
LCL.USR_Update_Flag = 'Y';

// LCL.Accrual Rate = DTL.Accrual Rate
LCL.Accrual_Rate = DTL.Accrual_Rate;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT OM Accrual Code Ma CR) TYPE(CRTOBJ) FILE(OMHLREP)          AC1221695;
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Accrual_Description);
PARAMETER(DTL.Automatic_Accrual_Y_N);
PARAMETER(DTL.Print_On_Invoice_Y_N);
PARAMETER(DTL.Rate_Usage);
PARAMETER(DTL.Add_on_Allowance);
PARAMETER(DTL.Accrual_Type);
PARAMETER(DTL.Sub_Ledger_Code);
PARAMETER(DTL.Reverse_Accrual_Code);
PARAMETER(DTL.UOM_Primary_Dft);
PARAMETER(DTL.G_L_Code_Dr);
PARAMETER(DTL.G_L_Code_Cr);
PARAMETER(DTL.G_L_Sub_Account_Code);
PARAMETER(DTL.Sales_History_Exp_Bucket);
PARAMETER(DTL.Post_to_G_L_Y_N);
PARAMETER(DTL.All_Products_Y_N);
PARAMETER(DTL.Accrual_Rate);
PARAMETER(DTL.Accrual_Rate_Type);
PARAMETER(DTL.Accrual_Detail_Search);
PARAMETER(DTL.Standard_Schedule_Y_N);
PARAMETER(DTL.Affect_Sales_Realz_Rpt);
PARAMETER(DTL.Affect_Invoice_Price);
PARAMETER(DTL.Invoice_Print_Type);
PARAMETER(DTL.Max_Accrual_Amount);
PARAMETER(DTL.Max_Accrual_Amount_Type);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.G_L_Account_Category);
PARAMETER(DTL.APE_Excl_Collect_ShpMthd);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Crt Accr Prog EXT     CR) TYPE(CRTOBJ) FILE(PBAMREP)           AC2048281;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(PAR.G_L_Account_Category);
 PARAMETER(PAR.APE_Excl_Collect_ShpMthd);
 PARAMETER(PAR.Record_Status);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG OM Accrual Code Ma CH) TYPE(CHGOBJ) FILE(OMHLREP)          AC1221696;
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Accrual_Description);
PARAMETER(DTL.Automatic_Accrual_Y_N);
PARAMETER(DTL.Print_On_Invoice_Y_N);
PARAMETER(DTL.Rate_Usage);
PARAMETER(DTL.Add_on_Allowance);
PARAMETER(DTL.Accrual_Type);
PARAMETER(DTL.Sub_Ledger_Code);
PARAMETER(DTL.Reverse_Accrual_Code);
PARAMETER(DTL.UOM_Primary_Dft);
PARAMETER(DTL.G_L_Code_Dr);
PARAMETER(DTL.G_L_Code_Cr);
PARAMETER(DTL.G_L_Sub_Account_Code);
PARAMETER(DTL.Sales_History_Exp_Bucket);
PARAMETER(DTL.Post_to_G_L_Y_N);
PARAMETER(DTL.All_Products_Y_N);
PARAMETER(DTL.Accrual_Rate);
PARAMETER(DTL.Accrual_Rate_Type);
PARAMETER(DTL.Accrual_Detail_Search);
PARAMETER(DTL.Standard_Schedule_Y_N);
PARAMETER(DTL.Affect_Sales_Realz_Rpt);
PARAMETER(DTL.Affect_Invoice_Price);
PARAMETER(DTL.Invoice_Print_Type);
PARAMETER(DTL.Max_Accrual_Amount);
PARAMETER(DTL.Max_Accrual_Amount_Type);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.G_L_Account_Category);
PARAMETER(DTL.APE_Excl_Collect_ShpMthd);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd Accr Prog EXT     RT) TYPE(RTVOBJ) FILE(PBAMREP)           AC2048410;
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(PAR.G_L_Account_Category);
 PARAMETER(PAR.APE_Excl_Collect_ShpMthd);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Accr Prog EXT     CR) TYPE(CRTOBJ) FILE(PBAMREP)           AC2048281;
  PARAMETER(PAR.Accrual_Code);
  PARAMETER(PAR.G_L_Account_Category);
  PARAMETER(PAR.APE_Excl_Collect_ShpMthd);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Create_Date);
  PARAMETER(PAR.Create_Time);
  PARAMETER(PAR.Create_User);
  PARAMETER(PAR.Create_Program);
  PARAMETER(PAR.Change_Date);
  PARAMETER(PAR.Change_Time);
  PARAMETER(PAR.Change_User);
  PARAMETER(PAR.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Accr Prog EXT     CH) TYPE(CHGOBJ) FILE(PBAMREP)           AC2048282;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.G_L_Account_Category);
  PARAMETER(PAR.APE_Excl_Collect_ShpMthd);
  PARAMETER(PAR.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// AND LCL.USR Update Flag is Yes
AND LCL.USR_Update_Flag = 'Y';

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


// Send information message - 'After confirm, press F3 to update customers.'
MESSAGE(USR3400 *INFO);

// Execute function SET W0BYP              US.
EXECUTE FUNCTION(SET W0BYP              US) TYPE(EXCUSRSRC) ('PMMWUFR');
PARAMETER('Y');
{
 C                     MOVEL#IAASX    W0BYP
}


// IF *OTHERWISE
IF *OTHERWISE;

RETURN;

ENDIF;

//?USER: Exit program processing

//?Update Customers with new Accrual Rate?
CASE;

// IF LCL.USR Update Flag is Yes
IF LCL.USR_Update_Flag = 'Y';

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

EXECUTE FUNCTION(RTV Upd Cust Accruals) TYPE(RTVOBJ) FILE(OMHOREP)              AC1846024;
PARAMETER(PAR.Accrual_Code);
PARAMETER(LCL.Accrual_Rate);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG OM Cust Accrual He CH) TYPE(CHGOBJ) FILE(OMHOREP)          AC1221741;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(DB1.CAH_Sequence_No);
 PARAMETER(DB1.Period_Beginning_Date);
 PARAMETER(DB1.Period_Ending_Date);
 PARAMETER(PAR.Accrual_Rate);
 PARAMETER(DB1.All_Products_Y_N);
 PARAMETER(DB1.Accrual_Rate_Type);
 PARAMETER(DB1.Comm_Threshold_Period);
 PARAMETER(DB1.CAH_Unused_Date_1);
 PARAMETER(DB1.CAH_Unused_Date_2);
 PARAMETER(DB1.Comm_Min_Amt_Period);
 PARAMETER(DB1.Comm_Retroactive_Sts);
 PARAMETER(DB1.Accrual_Detail_Search);
 PARAMETER(DB1.Broker_Code);
 PARAMETER(DB1.Max_Accrual_Amount);
 PARAMETER(DB1.Commission_Not_Comm_Sts);
 PARAMETER(DB1.CAH_Unused_Sts_3);
 PARAMETER(DB1.CAH_Unused_Sts_4);
 PARAMETER(DB1.CAH_Unused_Sts_5);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

