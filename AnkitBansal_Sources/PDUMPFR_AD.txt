// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDUMPFR
// ?Date: 14.08.2025 Time: 12:04:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Record selection processing

EXECUTE FUNCTION(Rtv Inv/Ord Impact    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1559604;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.Description_Line_One);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(PAR.Market_Overage);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Variety_Rendered_Cut);
PARAMETER(PAR.Credit_Item_Status);
PARAMETER(WRK.Print_on_Realization_Rpt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Comment 3/06/02
//?New 3/06/02:  Sales Realization Items Only?
CASE;

// IF PAR.USR Flag 1 is Yes
IF PAR.USR_Flag_1 = 'Y';

// AND WRK.Print on Realization Rpt is No
AND WRK.Print_on_Realization_Rpt = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Do not select if SalesHist not found
EXECUTE FUNCTION(Rtv Item FOB Price    RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1559765;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DB1.Warehouse_Code);
PARAMETER(WRK.Unit_Price_DSP_USR);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Weight Billed is Greater than zero
 IF DB1.Weight_Billed > *ZERO;

 // PAR.Unit Price (DSP)  USR = DB1.FOB Gross Amount / DB1.Weight Billed *Rounded
 PAR.Unit_Price_DSP_USR = DB1.FOB_Gross_Amount / DB1.Weight_Billed 'H';

 ENDIF;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(X1PG_Warehouse_Desc_DRV);
PARAMETER(X1PG_Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


// 1PG.Condition Name USR = Condition name of PAR.Report Type USR
X1PG_Condition_Name_USR = RTVCND(PAR.Report_Type_USR);

//?Item Code Description
CASE;

// IF PAR.Item Code is Entered
IF PAR.Item_Code <> *ZERO;

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(X1PG_Item_Desc_DRV);
PARAMETER(X1PG_Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Item Code Description
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Item Desc DRV = CON.*ALL
X1PG_Item_Desc_DRV = *ALL;

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Warehouse Code header format

CASE;

IF NEW Item_Code;
// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// SUPPRESSED PRINT Item Code header format

ENDIF;

// SUPPRESSED PRINT LLT Lot Number header format

// SUPPRESSED PRINT LLT Production Date header format

// SUPPRESSED PRINT Location Code header format

// SUPPRESSED PRINT LLT Location Level header format

//?USER: On print of detail format

//?Item Description
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// OR PGM.*new page flag is *Yes
OR PGM.*new_page_flag = 'Y';

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Item_Identifier);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
PARAMETER(WRK.BLANK);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Item Identifier = PAR.Item Identifier
CUR.Item_Identifier = PAR.Item_Identifier;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

//?Item Description
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Item Identifier = CON.*BLANK
CUR.Item_Identifier = *BLANK;

ENDIF;

//?Receive Quantity
CASE;

// IF CUR.LLT Trans Type is Adjustment
IF CUR.LLT_Transaction_Type = 'A';

// OR CUR.LLT Trans Type is Receipt
OR CUR.LLT_Transaction_Type = 'R';

// CUR.Qty Produced          USR = CUR.LLT Trans Qty
CUR.Qty_Produced_USR = CUR.LLT_Transaction_Qty;

//?Receive Quantity
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Qty Produced          USR = CON.*ZERO
CUR.Qty_Produced_USR = *ZERO;

ENDIF;

//?Sales Quantity/Weight
CASE;

// IF CUR.LLT Trans Type is Shipment
IF CUR.LLT_Transaction_Type = 'S';

// CUR.Quantity Ordered 1 USR = CUR.LLT Trans Qty * CON.-1 *Rounded
CUR.Quantity_Ordered_1_USR = CUR.LLT_Transaction_Qty * -1 'H';

EXECUTE FUNCTION(Rtv Shipped Weight    RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1559608;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.LLT_Production_Date);
PARAMETER(CUR.LLT_Lot_Number);
PARAMETER(CUR.Location_Code);
PARAMETER(CUR.LLT_Location_Level);
PARAMETER(CUR.Order_Number);
PARAMETER(PAR.OIA_Alloc_Shipped_Qty);
PARAMETER(PAR.OIA_Alloc_Shipped_Wgt);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CUR.Quantity Ordered 1 USR is LT Zero
IF CUR.Quantity_Ordered_1_USR < *ZERO;

// CUR.Weight Shipped Total = PAR.OIA Alloc/Shipped Wgt * CON.-1 *Rounded
CUR.Weight_Shipped_Total = PAR.OIA_Alloc_Shipped_Wgt * -1 'H';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Weight Shipped Total = PAR.OIA Alloc/Shipped Wgt
CUR.Weight_Shipped_Total = PAR.OIA_Alloc_Shipped_Wgt;

ENDIF;

//?Sales Quantity/Weight
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Quantity Ordered 1 USR = CON.*ZERO
CUR.Quantity_Ordered_1_USR = *ZERO;

// CUR.Weight Shipped Total = CON.*ZERO
CUR.Weight_Shipped_Total = *ZERO;

ENDIF;

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(CUR.LLT_Production_Date);
PARAMETER(CUR.Market_Price_USR);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


// CUR.Market Price USR = CUR.Market Price USR + PAR.Market Overage
CUR.Market_Price_USR = CUR.Market_Price_USR + PAR.Market_Overage;

// CUR.Unit Price (DSP)  USR = LCL.Unit Price (DSP)  USR
CUR.Unit_Price_DSP_USR = LCL.Unit_Price_DSP_USR;

// CUR.Price * Weight 1 USR = CUR.Weight Shipped Total * CUR.Market Price USR *Roun
CUR.Price_Weight_1_USR = CUR.Weight_Shipped_Total * CUR.Market_Price_USR 'H';

// CUR.Price * Weight USR = CUR.Weight Shipped Total * CUR.Unit Price (DSP)  USR *Rounded
CUR.Price_Weight_USR = CUR.Weight_Shipped_Total * CUR.Unit_Price_DSP_USR 'H';

// CUR.Variance amount 1     USR = CUR.Unit Price (DSP)  USR - CUR.Market Price USR
CUR.Variance_amount_1_USR = CUR.Unit_Price_DSP_USR - CUR.Market_Price_USR;

// CUR.USR amount 1  11.2 = CUR.Weight Shipped Total * CUR.Unit Price (DSP)  USR *Rounded
CUR.USR_amount_1_11_2 = CUR.Weight_Shipped_Total * CUR.Unit_Price_DSP_USR 'H';

CASE;

// IF PAR.Report Type USR is Summary
IF PAR.Report_Type_USR = 'S';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?USER: Process after print of detail format

NXT.Qty_Produced_SUM = SUM(CUR.Qty_Produced_USR);

NXT.Quantity_Ordered_1_SUM = SUM(CUR.Quantity_Ordered_1_USR);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Shipped_Total);

NXT.Price_Weight_SUM = SUM(CUR.Price_Weight_USR);

NXT.Price_Weight_1_SUM = SUM(CUR.Price_Weight_1_USR);

NXT.Total_Order_Values = SUM(CUR.USR_amount_1_11_2);

//?USER: Print required level totals

// SUPPRESSED PRINT LLT Location Level totals format

// SUPPRESSED PRINT Location Code totals format

// SUPPRESSED PRINT LLT Production Date totals format

CASE;

IF NEW LLT_Lot_Number;
// CUR.Item Identifier = PAR.Item Identifier
CUR.Item_Identifier = PAR.Item_Identifier;

CASE;

// IF CUR.Weight Billed SUM is Not equal zero
IF CUR.Weight_Billed_SUM <> *ZERO;

// USD $/LB Prod Date
CUR.Market_Price_USR = CUR.Price_Weight_1_SUM / CUR.Weight_Billed_SUM 'H';

// Sales $/Lb
CUR.Unit_Price_DSP_USR = CUR.Price_Weight_SUM / CUR.Weight_Billed_SUM 'H';

// Impact
CUR.Extended_Amount = ( CUR.Unit_Price_DSP_USR - CUR.Market_Price_USR )                            +
* CUR.Weight_Billed_SUM 'H';

// CUR.Variance amount 1     USR =       *
CUR.Variance_amount_1_USR = CUR.Unit_Price_DSP_USR - CUR.Market_Price_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Market Price USR = CON.*ZERO
CUR.Market_Price_USR = *ZERO;

// CUR.Unit Price (DSP)  USR = CON.*ZERO
CUR.Unit_Price_DSP_USR = *ZERO;

// CUR.Extended Amount = CON.*ZERO
CUR.Extended_Amount = *ZERO;

ENDIF;

//?3/08/02   Dont print this format on Summary
CASE;

// IF PAR.Report Type USR is Summary
IF PAR.Report_Type_USR = 'S';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print LLT Lot Number totals format
PRINT LLT Lot Number totals format;

NXT.Quantity_Ordered_1_SUM = SUM(CUR.Quantity_Ordered_1_SUM);

NXT.Qty_Produced_SUM = SUM(CUR.Qty_Produced_SUM);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

NXT.Price_Weight_1_SUM = SUM(CUR.Price_Weight_1_SUM);

NXT.Price_Weight_SUM = SUM(CUR.Price_Weight_SUM);

NXT.Total_Order_Values = SUM(CUR.Total_Order_Values);

ENDIF;

CASE;

IF NEW Item_Code;
// CUR.Item Identifier = PAR.Item Identifier
CUR.Item_Identifier = PAR.Item_Identifier;

CASE;

// IF CUR.Weight Billed SUM is Greater than zero
IF CUR.Weight_Billed_SUM > *ZERO;

// USD $/LB Prod Date
CUR.Market_Price_USR = CUR.Price_Weight_1_SUM / CUR.Weight_Billed_SUM 'H';

// Sales $/Lb
CUR.Unit_Price_DSP_USR = CUR.Price_Weight_SUM / CUR.Weight_Billed_SUM 'H';

// Impact
CUR.Extended_Amount = ( CUR.Unit_Price_DSP_USR - CUR.Market_Price_USR )                            +
* CUR.Weight_Billed_SUM 'H';

ENDIF;

CASE;

// IF PAR.Report Type USR is Summary
IF PAR.Report_Type_USR = 'S';

// AND CUR.Weight Billed SUM is Equal to zero
AND CUR.Weight_Billed_SUM = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Item Code totals format
PRINT Item Code totals format;

NXT.Qty_Produced_SUM = SUM(CUR.Qty_Produced_SUM);

NXT.Quantity_Ordered_1_SUM = SUM(CUR.Quantity_Ordered_1_SUM);

NXT.Weight_Billed_SUM = SUM(CUR.Weight_Billed_SUM);

NXT.Total_Order_Values = SUM(CUR.Total_Order_Values);

NXT.Extended_amount_SUM = SUM(CUR.Extended_Amount);

ENDIF;

// SUPPRESSED PRINT Warehouse Code totals format

// SUPPRESSED PRINT Company Number totals format

