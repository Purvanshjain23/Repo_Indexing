// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDAEEFR
// ?Date: 14.08.2025 Time: 03:27:40
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// CTL.Accounting Company Number = PAR.Accounting Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Order Number = PAR.Order Number
CTL.Order_Number = PAR.Order_Number;

// WRK.Sequence Number = CON.*ZERO
WRK.Sequence_Number = *ZERO;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record (new record)

//?** SL112898  Old code did not get highest sequence.
// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?USER: Validate subfile control

CASE;

// IF CTL.*CMD key is *Enable/Disable Options
IF CTL.*CMD_key = '08';

CASE;

// IF PAR.USR Display field is no
IF PAR.USR_Display_field = 'N';

// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Shipping Instr    IF) TYPE(EXCINTFUN) FILE(PDIECPP)        AC1684062;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Sequence_Number);
PARAMETER(RCD.Shipping_Instructions);
{
 //?Execute internal function

 // PAR.Sequence Number = CON.*ZERO
 PAR.Sequence_Number = *ZERO;

 EXECUTE FUNCTION(Rtv Next Seq          RT) TYPE(RTVOBJ) FILE(PDIECPP)           AC1684064;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Sequence Number = CON.1
  PAR.Sequence_Number = 1;

  //?USER: Process Data record

  // PAR.Sequence Number = DB1.Sequence Number
  PAR.Sequence_Number = DB1.Sequence_Number;

  //?USER: Exit processing

  // PAR.Sequence Number = PAR.Sequence Number + CON.1
  PAR.Sequence_Number = PAR.Sequence_Number + 1;

 }

 EXECUTE FUNCTION(CRT PD Shipping Instru CR) TYPE(CRTOBJ) FILE(PDIECPP)          AC1249410;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(PAR.Shipping_Instructions);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?***** Change Log and Comments
 DO;

 //?** 12/11/2008 LJB S00592
 //?** Remove constant "Marks="
 //?** 09/05/2008 LJB E00220
 //?** Add the constant "Marks=" to the beginning of the Shipping Instr
 ENDDO;

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Rtv Chg Post Sts      RT) TYPE(DLTOBJ) FILE(PDIECPP)           AB1249412;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Sequence_Number);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.DSD HPS Post Status is Error
 IF DB1.DSD_HPS_Post_Status = 'E';

 // OR DB1.DSD HPS Post Status is Posted
 OR DB1.DSD_HPS_Post_Status = 'P';

 // LCL.DSD Movement Printed = DB1.DSD Movement Printed
 LCL.DSD_Movement_Printed = DB1.DSD_Movement_Printed;

 CASE;

 // IF DB1.DSD Movement Printed is Printed
 IF DB1.DSD_Movement_Printed = 'P';

 // LCL.DSD Movement Printed = CND.Reprint
 LCL.DSD_Movement_Printed = 'R';

 ENDIF;

 EXECUTE FUNCTION(Chg Delv Sched Dtl    CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1244728;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DSD_Delivery_Date);
 PARAMETER(DB1.DSD_Delivery_Time);
 PARAMETER(DB1.DSD_Delivery_Time_Seq);
 PARAMETER(DB1.DSD_Scheduled_Hour);
 PARAMETER(DB1.DSD_Farm_Site_Code);
 PARAMETER(DB1.DSD_Building);
 PARAMETER(DB1.DSD_Room);
 PARAMETER(DB1.DSD_Sire_Line_Code);
 PARAMETER(DB1.DSD_Hog_Group_Code);
 PARAMETER(DB1.DSD_Unused_Head);
 PARAMETER(DB1.DSD_Scheduled_Delv_Head);
 PARAMETER(DB1.DSD_Scheduled_Kill_Head);
 PARAMETER(DB1.DSD_Transportation_Office);
 PARAMETER(DB1.DSD_Trucker_Code_HPS);
 PARAMETER(DB1.DSD_Driver);
 PARAMETER(DB1.DSD_Loading_Crew);
 PARAMETER(DB1.CHR_Code);
 PARAMETER(DB1.DSD_Load_Type);
 PARAMETER(DB1.DSD_Full_Split_Load);
 PARAMETER(DB1.DSD_Movement_Number);
 PARAMETER(DB1.DSD_Truck_ID);
 PARAMETER(DB1.DSD_Trailer_ID);
 PARAMETER(LCL.DSD_Movement_Printed);
 PARAMETER(DB1.DSD_Sched_Route_Start_Pnt);
 PARAMETER(DB1.DSD_Sched_Route_Start_Dte);
 PARAMETER(DB1.DSD_Sched_Route_Start_Tim);
 PARAMETER(DB1.DSD_Sch_Farm_Arrival_Date);
 PARAMETER(DB1.DSD_Sch_Farm_Arrival_Time);
 PARAMETER(DB1.DSD_Sch_Start_Load_Date);
 PARAMETER(DB1.DSD_Sch_Start_Load_Time);
 PARAMETER(DB1.DSD_Receiving_Shift);
 PARAMETER(DB1.DSD_Kill_Shift);
 PARAMETER(DB1.DSD_BOL_Kill_Shift);
 PARAMETER('R');
 PARAMETER(DB1.DSD_HPE_Post_Status);
 PARAMETER(DB1.DSD_Lock_Status);
 PARAMETER(DB1.DSD_Source_Type);
 PARAMETER(DB1.DSD_Transfer_Sts);
 PARAMETER(DB1.DSD_Unused_Date);
 PARAMETER(DB1.DSD_Unused_Time);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.DSD_PRD_Srv_Batch_ID);
 PARAMETER(DB1.DSD_PRD_Srv_Sched_ID);
 PARAMETER(DB1.DSD_Ref_1);
 PARAMETER(DB1.DSD_Ref_2);
 PARAMETER(DB1.DSD_Ref_Status);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG PD Shipping Instru CH) TYPE(CHGOBJ) FILE(PDIECPP)          AC1249411;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

QUIT;

ENDIF;

