// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPCDPFR
// ?Date: 14.08.2025 Time: 12:06:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?RMC - 4/22/17 E9064 added 440 STF warehouse in prtobj
//?E3014
//?RMC - 3/19/14 dont use warehouse when getting OD or pa.  (fr-fz project)
//?RMC - Base Calc in PRTOBJ - use prod yield% when determing wgt
//?  scheduled for the CERTAIN items: class/group type: 853/850/200
//? ie.. boneless sirloins
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


EXECUTE FUNCTION(Rtv PA Shipdate-21+SunRT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1621622;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Generic_Heading_1);
PARAMETER(PAR.Generic_Heading_2);
PARAMETER(PAR.Generic_Heading_3);
PARAMETER(PAR.Generic_Heading_4);
PARAMETER(PAR.Generic_Heading_5);
PARAMETER(PAR.Generic_Heading_6);
PARAMETER(PAR.Generic_Heading_7);
PARAMETER(PAR.Generic_Heading_8);
PARAMETER(PAR.Generic_Heading_9);
PARAMETER(PAR.Generic_Heading_10);
PARAMETER(PAR.Generic_Heading_11);
PARAMETER(PAR.Generic_Heading_12);
PARAMETER(PAR.Generic_Heading_13);
PARAMETER(PAR.Generic_Heading_14);
PARAMETER(PAR.Generic_Heading_15);
PARAMETER(PAR.Generic_Heading_16);
PARAMETER(LCL.Avail_Ship_Date_1_USR);
PARAMETER(LCL.Avail_Ship_Date_2_USR);
PARAMETER(LCL.Avail_Ship_Date_3_USR);
PARAMETER(LCL.Avail_Ship_Date_4_USR);
PARAMETER(LCL.Avail_Ship_Date_5_USR);
PARAMETER(LCL.Avail_Ship_Date_6_USR);
PARAMETER(LCL.Avail_Ship_Date_7_USR);
PARAMETER(LCL.Avail_Ship_Date_8_USR);
PARAMETER(LCL.Avail_Ship_Date_9_USR);
PARAMETER(LCL.Avail_Ship_Date_10_USR);
PARAMETER(LCL.Avail_Ship_Date_11_USR);
PARAMETER(LCL.Avail_Ship_Date_12_USR);
PARAMETER(LCL.Avail_Ship_Date_13_USR);
PARAMETER(LCL.Avail_Ship_Date_14_USR);
PARAMETER(LCL.Avail_Ship_Date_15_USR);
PARAMETER(LCL.Avail_Ship_Date_16_USR);
PARAMETER(LCL.Avail_Ship_Date_17_USR);
PARAMETER(LCL.Avail_Ship_Date_18_USR);
PARAMETER(LCL.Avail_Ship_Date_19_USR);
PARAMETER(LCL.Avail_Ship_Date_20_USR);
PARAMETER(LCL.Avail_Ship_Date_21_USR);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.1
 WRK.Count_USR = 1;

 //?USER: Process Data record

 CASE;

 // IF WRK.Count USR is GT 21
 IF WRK.Count_USR > 21;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Move Date
 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 1 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_1 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 1 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_1_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 2 = CON.Total
 PAR.Generic_Heading_2 = 'Total';

 // PAR.Avail Ship Date 2 USR = CON.*ZERO
 PAR.Avail_Ship_Date_2_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 2 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_2 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 2 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_2_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 3 = CON.Total
 PAR.Generic_Heading_3 = 'Total';

 // PAR.Avail Ship Date 3 USR = CON.*ZERO
 PAR.Avail_Ship_Date_3_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 3 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_3 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 3 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_3_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 4 = CON.Total
 PAR.Generic_Heading_4 = 'Total';

 // PAR.Avail Ship Date 4 USR = CON.*ZERO
 PAR.Avail_Ship_Date_4_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Four
 IF WRK.Count_USR = 4;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 4 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_4 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 4 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_4_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 5 = CON.Total
 PAR.Generic_Heading_5 = 'Total';

 // PAR.Avail Ship Date 5 USR = CON.*ZERO
 PAR.Avail_Ship_Date_5_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Five
 IF WRK.Count_USR = 5;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 5 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_5 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 5 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_5_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 6 = CON.Total
 PAR.Generic_Heading_6 = 'Total';

 // PAR.Avail Ship Date 6 USR = CON.*ZERO
 PAR.Avail_Ship_Date_6_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Six
 IF WRK.Count_USR = 6;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 6 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_6 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 6 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_6_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 7 = CON.Total
 PAR.Generic_Heading_7 = 'Total';

 // PAR.Avail Ship Date 7 USR = CON.*ZERO
 PAR.Avail_Ship_Date_7_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Seven
 IF WRK.Count_USR = 7;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 7 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_7 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 7 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_7_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 8 = CON.Total
 PAR.Generic_Heading_8 = 'Total';

 // PAR.Avail Ship Date 8 USR = CON.*ZERO
 PAR.Avail_Ship_Date_8_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Eight
 IF WRK.Count_USR = 8;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 8 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_8 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 8 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_8_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 9 = CON.Total
 PAR.Generic_Heading_9 = 'Total';

 // PAR.Avail Ship Date 9 USR = CON.*ZERO
 PAR.Avail_Ship_Date_9_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Nine
 IF WRK.Count_USR = 9;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 9 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_9 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 9 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_9_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 10 = CON.Total
 PAR.Generic_Heading_10 = 'Total';

 // PAR.Avail Ship Date 10 USR = CON.*ZERO
 PAR.Avail_Ship_Date_10_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Ten
 IF WRK.Count_USR = 10;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 10 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_10 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 10 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_10_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 11 = CON.Total
 PAR.Generic_Heading_11 = 'Total';

 // PAR.Avail Ship Date 11 USR = CON.*ZERO
 PAR.Avail_Ship_Date_11_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Eleven
 IF WRK.Count_USR = 11;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 11 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_11 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 11 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_11_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 12 = CON.Total
 PAR.Generic_Heading_12 = 'Total';

 // PAR.Avail Ship Date 12 USR = CON.*ZERO
 PAR.Avail_Ship_Date_12_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Twelve
 IF WRK.Count_USR = 12;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 12 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_12 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 12 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_12_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 13 = CON.Total
 PAR.Generic_Heading_13 = 'Total';

 // PAR.Avail Ship Date 13 USR = CON.*ZERO
 PAR.Avail_Ship_Date_13_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Thirteen
 IF WRK.Count_USR = 13;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 13 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_13 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 13 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_13_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 14 = CON.Total
 PAR.Generic_Heading_14 = 'Total';

 // PAR.Avail Ship Date 14 USR = CON.*ZERO
 PAR.Avail_Ship_Date_14_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Fourteen
 IF WRK.Count_USR = 14;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 14 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_14 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 14 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_14_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 15 = CON.Total
 PAR.Generic_Heading_15 = 'Total';

 // PAR.Avail Ship Date 15 USR = CON.*ZERO
 PAR.Avail_Ship_Date_15_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Fifteen
 IF WRK.Count_USR = 15;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 15 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_15 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 15 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_15_USR = DB1.Post_to_G_L_Date;

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Generic Heading 16 = CON.Total
 PAR.Generic_Heading_16 = 'Total';

 // PAR.Avail Ship Date 16 USR = CON.*ZERO
 PAR.Avail_Ship_Date_16_USR = *ZERO;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 //?Move Date
 // IF WRK.Count USR is Sixteen
 IF WRK.Count_USR = 16;

 EXECUTE FUNCTION(CNV cyymmdd to mmddyy) TYPE(EXCINTFUN)                         AC1563472;
 PARAMETER(DB1.Post_to_G_L_Date);
 PARAMETER(WRK.@Calc_60);
 {
  //?Execute internal function

  //?convert numeric date to character date.
  // PAR.Date (Alpha) USR = CVTVAR(PAR.Date In  (7,0) USR)
  PAR.Date_Alpha_USR = CVTVAR(PAR.Date_In_70_USR);

  //?extract month, day, and year.
  // PAR.Year  (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.2,CON.2)
  PAR.Year_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:2:2);

  // PAR.Month (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.4,CON.2)
  PAR.Month_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:4:2);

  // PAR.Day   (Char) USR = SUBSTRING(PAR.Date (Alpha) USR,CON.6,CON.2)
  PAR.Day_Char_USR = SUBSTRING(PAR.Date_Alpha_USR:6:2);

  //?reconstruct date in mmddyy format.
  // PAR.Date (Char-6) USR = CONCAT(PAR.Month (Char) USR,PAR.Day   (Char) USR,CON.*ZE
  PAR.Date_Char_6_USR = PAR.Month_Char_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date (Char-6) USR = CONCAT(PAR.Date (Char-6) USR,PAR.Year  (Char) USR,CON.*Z
  PAR.Date_Char_6_USR = PAR.Date_Char_6_USR + PAR.Year_Char_USR (*ZERO);

  //?convert character date to numeric date.
  // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
  PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

 }

 // PAR.Generic Heading 16 = CVTVAR(WRK.@Calc 6,0)
 PAR.Generic_Heading_16 = CVTVAR(WRK.@Calc_60);

 // PAR.Avail Ship Date 16 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_16_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Seventeen
 IF WRK.Count_USR = 17;

 // PAR.Avail Ship Date 17 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_17_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Eighteen
 IF WRK.Count_USR = 18;

 // PAR.Avail Ship Date 18 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_18_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Nineteen
 IF WRK.Count_USR = 19;

 // PAR.Avail Ship Date 19 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_19_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty
 IF WRK.Count_USR = 20;

 // PAR.Avail Ship Date 20 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_20_USR = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty One
 IF WRK.Count_USR = 21;

 // PAR.Avail Ship Date 21 USR = DB1.Post to G/L Date
 PAR.Avail_Ship_Date_21_USR = DB1.Post_to_G_L_Date;

 ENDIF;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

}


//?USER: Record selection processing

//?RMC 07/18/07 - Use new rtv to get PA Base Avail Rpt Include
EXECUTE FUNCTION(Rtv Base Avail PA Rpt RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1837032;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(LCL.Base_Conv_Loss_Item);
PARAMETER(LCL.PA_Base_Avail_Rpt_Include);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Base/Conv/Loss Item is Not Base
IF LCL.Base_Conv_Loss_Item = *BLANK/'C'/'F'/'L';

// OR LCL.Item Type Code is Not Finished Good
OR LCL.Item_Type_Code <> 'FG';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF LCL.PA Base Avail Rpt Include is Yes
IF LCL.PA_Base_Avail_Rpt_Include = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(X1PG_Availability_Group_Code);
PARAMETER(X1PG_Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(Std Prod Input Desc DRV) TYPE(DRVFLD)                          AC1885606;
PARAMETER(X1PG_Std_Prod_Input_Desc_DRV);
PARAMETER(X1PG_Std_Prod_Input_Sts_USR);
{
 //?Calculate derived field

 // PAR.Std Prod Input Desc DRV = Condition name of PAR.Std Prod Input Sts USR
 PAR.Std_Prod_Input_Desc_DRV = RTVCND(PAR.Std_Prod_Input_Sts_USR);

}


//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// PAR.USR Day 1 = PAR.Date From             USR
PAR.USR_Day_1 = PAR.Date_From_USR;

// PAR.USR Day 2 = PAR.USR Day 1 + CON.1 *DAYS
PAR.USR_Day_2 = DATEINCR(PAR.USR_Day_1 1 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 3 = PAR.USR Day 1 + CON.2 *DAYS
PAR.USR_Day_3 = DATEINCR(PAR.USR_Day_1 2 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 4 = PAR.USR Day 1 + CON.3 *DAYS
PAR.USR_Day_4 = DATEINCR(PAR.USR_Day_1 3 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 5 = PAR.USR Day 1 + CON.4 *DAYS
PAR.USR_Day_5 = DATEINCR(PAR.USR_Day_1 4 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 6 = PAR.USR Day 1 + CON.5 *DAYS
PAR.USR_Day_6 = DATEINCR(PAR.USR_Day_1 5 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 7 = PAR.USR Day 1 + CON.6 *DAYS
PAR.USR_Day_7 = DATEINCR(PAR.USR_Day_1 6 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 8 = PAR.USR Day 1 + CON.7 *DAYS
PAR.USR_Day_8 = DATEINCR(PAR.USR_Day_1 7 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 9 = PAR.USR Day 1 + CON.8 *DAYS
PAR.USR_Day_9 = DATEINCR(PAR.USR_Day_1 8 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 10 = PAR.USR Day 1 + CON.9 *DAYS
PAR.USR_Day_10 = DATEINCR(PAR.USR_Day_1 9 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 11 = PAR.USR Day 1 + CON.10 *DAYS
PAR.USR_Day_11 = DATEINCR(PAR.USR_Day_1 10 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 12 = PAR.USR Day 1 + CON.11 *DAYS
PAR.USR_Day_12 = DATEINCR(PAR.USR_Day_1 11 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 13 = PAR.USR Day 1 + CON.12 *DAYS
PAR.USR_Day_13 = DATEINCR(PAR.USR_Day_1 12 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 14 = PAR.USR Day 1 + CON.13 *DAYS
PAR.USR_Day_14 = DATEINCR(PAR.USR_Day_1 13 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 15 = PAR.USR Day 1 + CON.14 *DAYS
PAR.USR_Day_15 = DATEINCR(PAR.USR_Day_1 14 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 16 = PAR.USR Day 1 + CON.15 *DAYS
PAR.USR_Day_16 = DATEINCR(PAR.USR_Day_1 15 'DY' 1111111 'NONE' 'N' 1);

MOVE *ALL (To: CUR From: PAR);

//?Re-format Heading Date  1
CASE;

// IF CUR.Generic Heading 1 is Equal Total
IF CUR.Generic_Heading_1 = 'Total';

// WRK.Vertical Line 1 = CON.|
WRK.Vertical_Line_1 = '|';

//?Re-format Heading Date  1
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_1);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  2
CASE;

// IF CUR.Generic Heading 2 is Equal Total
IF CUR.Generic_Heading_2 = 'Total';

// WRK.Vertical Line 2 = CON.|
WRK.Vertical_Line_2 = '|';

// Execute function Set On Indicator 01    US.
EXECUTE FUNCTION(Set On Indicator 01    US) TYPE(EXCUSRSRC) ('PPCLUFR');
{
 C                     SETON                     01    SETON INDICATOR
}


//?Re-format Heading Date  2
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_2);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  3
CASE;

// IF CUR.Generic Heading 3 is Equal Total
IF CUR.Generic_Heading_3 = 'Total';

// WRK.Vertical Line 3 = CON.|
WRK.Vertical_Line_3 = '|';

// Execute function Set On Indicator 02    US.
EXECUTE FUNCTION(Set On Indicator 02    US) TYPE(EXCUSRSRC) ('PPC0UFR');
{
 C                     SETON                     02    SETON INDICATOR
}


//?Re-format Heading Date  3
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_3);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  4
CASE;

// IF CUR.Generic Heading 4 is Equal Total
IF CUR.Generic_Heading_4 = 'Total';

// WRK.Vertical Line 4 = CON.|
WRK.Vertical_Line_4 = '|';

// Execute function Set On Indicator 03    US.
EXECUTE FUNCTION(Set On Indicator 03    US) TYPE(EXCUSRSRC) ('PPC1UFR');
{
 C                     SETON                     03    SETON INDICATOR
}


//?Re-format Heading Date  4
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_4);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  5
CASE;

// IF CUR.Generic Heading 5 is Equal Total
IF CUR.Generic_Heading_5 = 'Total';

// WRK.Vertical Line 5 = CON.|
WRK.Vertical_Line_5 = '|';

// Execute function Set On Indicator 04    US.
EXECUTE FUNCTION(Set On Indicator 04    US) TYPE(EXCUSRSRC) ('PPC2UFR');
{
 C                     SETON                     04    SETON INDICATOR
}


//?Re-format Heading Date  5
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_5);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  6
CASE;

// IF CUR.Generic Heading 6 is Equal Total
IF CUR.Generic_Heading_6 = 'Total';

// WRK.Vertical Line 6 = CON.|
WRK.Vertical_Line_6 = '|';

// Execute function Set On Indicator 05    US.
EXECUTE FUNCTION(Set On Indicator 05    US) TYPE(EXCUSRSRC) ('PPC3UFR');
{
 C                     SETON                     05    SETON INDICATOR
}


//?Re-format Heading Date  6
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_6);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  7
CASE;

// IF CUR.Generic Heading 7 is Equal Total
IF CUR.Generic_Heading_7 = 'Total';

// WRK.Vertical Line 7 = CON.|
WRK.Vertical_Line_7 = '|';

// Execute function Set On Indicator 06    US.
EXECUTE FUNCTION(Set On Indicator 06    US) TYPE(EXCUSRSRC) ('PPC4UFR');
{
 C                     SETON                     06    SETON INDICATOR
}


//?Re-format Heading Date  7
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_7);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  8
CASE;

// IF CUR.Generic Heading 8 is Equal Total
IF CUR.Generic_Heading_8 = 'Total';

// WRK.Vertical Line 8 = CON.|
WRK.Vertical_Line_8 = '|';

// Execute function Set On Indicator 07    US.
EXECUTE FUNCTION(Set On Indicator 07    US) TYPE(EXCUSRSRC) ('PPC5UFR');
{
 C                     SETON                     07    SETON INDICATOR
}


//?Re-format Heading Date  8
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_8);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date  9
CASE;

// IF CUR.Generic Heading 9 is Equal Total
IF CUR.Generic_Heading_9 = 'Total';

// WRK.Vertical Line 9 = CON.|
WRK.Vertical_Line_9 = '|';

// Execute function Set On Indicator 08    US.
EXECUTE FUNCTION(Set On Indicator 08    US) TYPE(EXCUSRSRC) ('PPC6UFR');
{
 C                     SETON                     08    SETON INDICATOR
}


//?Re-format Heading Date  9
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_9);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date 10
CASE;

// IF CUR.Generic Heading 10 is Equal Total
IF CUR.Generic_Heading_10 = 'Total';

// WRK.Vertical Line 10 = CON.|
WRK.Vertical_Line_10 = '|';

// Execute function Set On Indicator 09    US.
EXECUTE FUNCTION(Set On Indicator 09    US) TYPE(EXCUSRSRC) ('PPC7UFR');
{
 C                     SETON                     09    SETON INDICATOR
}


//?Re-format Heading Date 10
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_10);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date 11
CASE;

// IF CUR.Generic Heading 11 is Equal Total
IF CUR.Generic_Heading_11 = 'Total';

// WRK.Vertical Line 11 = CON.|
WRK.Vertical_Line_11 = '|';

// Execute function Set On Indicator 10    US.
EXECUTE FUNCTION(Set On Indicator 10    US) TYPE(EXCUSRSRC) ('PPC8UFR');
{
 C                     SETON                     10    SETON INDICATOR
}


//?Re-format Heading Date 11
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_11);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date 12
CASE;

// IF CUR.Generic Heading 12 is Equal Total
IF CUR.Generic_Heading_12 = 'Total';

// WRK.Vertical Line 12 = CON.|
WRK.Vertical_Line_12 = '|';

// Execute function Set On Indicator 11    US.
EXECUTE FUNCTION(Set On Indicator 11    US) TYPE(EXCUSRSRC) ('PPC9UFR');
{
 C                     SETON                     11    SETON INDICATOR
}


//?Re-format Heading Date 12
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_12);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date 13
CASE;

// IF CUR.Generic Heading 13 is Equal Total
IF CUR.Generic_Heading_13 = 'Total';

// WRK.Vertical Line 13 = CON.|
WRK.Vertical_Line_13 = '|';

// Execute function Set On Indicator 12    US.
EXECUTE FUNCTION(Set On Indicator 12    US) TYPE(EXCUSRSRC) ('PPDAUFR');
{
 C                     SETON                     12    SETON INDICATOR
}


//?Re-format Heading Date 13
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_13);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date 14
CASE;

// IF CUR.Generic Heading 14 is Equal Total
IF CUR.Generic_Heading_14 = 'Total';

// WRK.Vertical Line 14 = CON.|
WRK.Vertical_Line_14 = '|';

// Execute function Set On Indicator 13    US.
EXECUTE FUNCTION(Set On Indicator 13    US) TYPE(EXCUSRSRC) ('PPDBUFR');
{
 C                     SETON                     13    SETON INDICATOR
}


//?Re-format Heading Date 14
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_14);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date 15
CASE;

// IF CUR.Generic Heading 15 is Equal Total
IF CUR.Generic_Heading_15 = 'Total';

// WRK.Vertical Line 15 = CON.|
WRK.Vertical_Line_15 = '|';

// Execute function Set On Indicator 14    US.
EXECUTE FUNCTION(Set On Indicator 14    US) TYPE(EXCUSRSRC) ('PPDCUFR');
{
 C                     SETON                     14    SETON INDICATOR
}


//?Re-format Heading Date 15
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_15);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

//?Re-format Heading Date 16
CASE;

// IF CUR.Generic Heading 16 is Equal Total
IF CUR.Generic_Heading_16 = 'Total';

// WRK.Vertical Line 16 = CON.|
WRK.Vertical_Line_16 = '|';

// Execute function Set On Indicator 15    US.
EXECUTE FUNCTION(Set On Indicator 15    US) TYPE(EXCUSRSRC) ('PPDDUFR');
{
 C                     SETON                     15    SETON INDICATOR
}


//?Re-format Heading Date 16
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(SET Format Text Dates  IF) TYPE(EXCINTFUN)                     AC1484478;
PARAMETER(CUR.Generic_Heading_16);
{
 //?Execute internal function

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.1,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:1:2);

 // PAR.Generic Heading WRK = CONCAT(WRK.Generic Heading,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = WRK.Generic_Heading + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.3,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:3:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,CON./,CON.*ZERO)
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + '/' (*ZERO);

 // WRK.Generic Heading = SUBSTRING(PAR.Generic Heading,CON.5,CON.2)
 WRK.Generic_Heading = SUBSTRING(PAR.Generic_Heading:5:2);

 // PAR.Generic Heading WRK = CONCAT(PAR.Generic Heading WRK,WRK.Generic Heading,CON
 PAR.Generic_Heading_WRK = PAR.Generic_Heading_WRK + WRK.Generic_Heading (*ZERO);

 // PAR.Generic Heading = PAR.Generic Heading WRK
 PAR.Generic_Heading = PAR.Generic_Heading_WRK;

}


ENDIF;

// CUR.Generic Heading 2 - 5 = CUR.Generic Heading 2
CUR.Generic_Heading_2_5 = CUR.Generic_Heading_2;

// CUR.Generic Heading 3 - 5 = CUR.Generic Heading 3
CUR.Generic_Heading_3_5 = CUR.Generic_Heading_3;

// CUR.Generic Heading 4 - 5 = CUR.Generic Heading 4
CUR.Generic_Heading_4_5 = CUR.Generic_Heading_4;

// CUR.Generic Heading 5 - 5 = CUR.Generic Heading 5
CUR.Generic_Heading_5_5 = CUR.Generic_Heading_5;

// CUR.Generic Heading 6 - 5 = CUR.Generic Heading 6
CUR.Generic_Heading_6_5 = CUR.Generic_Heading_6;

// CUR.Generic Heading 7 - 5 = CUR.Generic Heading 7
CUR.Generic_Heading_7_5 = CUR.Generic_Heading_7;

// CUR.Generic Heading 8 - 5 = CUR.Generic Heading 8
CUR.Generic_Heading_8_5 = CUR.Generic_Heading_8;

// CUR.Generic Heading 9 - 5 = CUR.Generic Heading 9
CUR.Generic_Heading_9_5 = CUR.Generic_Heading_9;

// CUR.Generic Heading 10 - 5 = CUR.Generic Heading 10
CUR.Generic_Heading_10_5 = CUR.Generic_Heading_10;

// CUR.Generic Heading 11 - 5 = CUR.Generic Heading 11
CUR.Generic_Heading_11_5 = CUR.Generic_Heading_11;

// CUR.Generic Heading 12 - 5 = CUR.Generic Heading 12
CUR.Generic_Heading_12_5 = CUR.Generic_Heading_12;

// CUR.Generic Heading 13 - 5 = CUR.Generic Heading 13
CUR.Generic_Heading_13_5 = CUR.Generic_Heading_13;

// CUR.Generic Heading 14 - 5 = CUR.Generic Heading 14
CUR.Generic_Heading_14_5 = CUR.Generic_Heading_14;

// CUR.Generic Heading 15 - 5 = CUR.Generic Heading 15
CUR.Generic_Heading_15_5 = CUR.Generic_Heading_15;

// CUR.Generic Heading 16 - 5 = CUR.Generic Heading 16
CUR.Generic_Heading_16_5 = CUR.Generic_Heading_16;

// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Availability Group Code header format

// SUPPRESSED PRINT Item Display Sequence header format

//?USER: On print of detail format

EXECUTE FUNCTION(RTV Pces/Bag,Bag/Unt,umRT) TYPE(RTVOBJ) FILE(CABZREP)          AC1606251;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(CUR.UOM_Primary);
PARAMETER(CUR.Unit_Weight);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Sold 100% Frozen  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC2085833;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(LCL.Sold_100_Percent_Frozen);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.USR Weight 1 = CUR.Unit Weight
CUR.USR_Weight_1 = CUR.Unit_Weight;

EXECUTE FUNCTION(Rtv Base PA           IF) TYPE(EXCINTFUN)                      AC1683282;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(LCL.Avail_Ship_Date_1_USR);
PARAMETER(LCL.Avail_Ship_Date_2_USR);
PARAMETER(LCL.Avail_Ship_Date_3_USR);
PARAMETER(CUR.Qty_On_Hand_USR);
PARAMETER(CUR.Qty_Sched_Prod_1_USR);
PARAMETER(WRK.Qty_Produced_USR);
PARAMETER(WRK.Qty_Remaining_Prod_USR);
PARAMETER(CUR.Qty_Sched_Ord_1_USR);
PARAMETER(CUR.Qty_EOD_Inv_1_USR);
PARAMETER(CUR.Qty_Sched_Ord_2_USR);
PARAMETER(WRK.Qty_EOD_Inv_2_USR);
PARAMETER(WRK.Qty_Prod_Needed_2_USR);
PARAMETER(WRK.Qty_Prod_Adjusted_2_USR);
PARAMETER(WRK.Qty_Sched_Prod_2_USR);
PARAMETER(CUR.Qty_Sched_Ord_3_USR);
PARAMETER(WRK.Qty_EOD_Inv_3_USR);
PARAMETER(WRK.Qty_Prod_Needed_3_USR);
PARAMETER(WRK.Qty_Prod_Adjusted_3_USR);
PARAMETER(WRK.Qty_Sched_Prod_3_USR);
PARAMETER(LCL.Avail_Ship_Date_4_USR);
PARAMETER(LCL.Avail_Ship_Date_5_USR);
PARAMETER(LCL.Avail_Ship_Date_6_USR);
PARAMETER(LCL.Avail_Ship_Date_7_USR);
PARAMETER(CUR.Qty_Sched_Ord_4_USR);
PARAMETER(CUR.Qty_Sched_Ord_5_USR);
PARAMETER(CUR.Qty_Sched_Ord_6_USR);
PARAMETER(CUR.Qty_Sched_Ord_7_USR);
PARAMETER(LCL.Avail_Ship_Date_8_USR);
PARAMETER(LCL.Avail_Ship_Date_9_USR);
PARAMETER(LCL.Avail_Ship_Date_10_USR);
PARAMETER(LCL.Avail_Ship_Date_11_USR);
PARAMETER(CUR.Qty_Sched_Ord_8_USR);
PARAMETER(CUR.Qty_Sched_Ord_9_USR);
PARAMETER(CUR.Qty_Sched_Ord_10_USR);
PARAMETER(CUR.Qty_Sched_Ord_11_USR);
PARAMETER(LCL.Avail_Ship_Date_12_USR);
PARAMETER(LCL.Avail_Ship_Date_13_USR);
PARAMETER(LCL.Avail_Ship_Date_14_USR);
PARAMETER(CUR.Qty_Sched_Ord_12_USR);
PARAMETER(CUR.Qty_Sched_Ord_13_USR);
PARAMETER(CUR.Qty_Sched_Ord_14_USR);
PARAMETER(LCL.Avail_Ship_Date_15_USR);
PARAMETER(LCL.Avail_Ship_Date_16_USR);
PARAMETER(CUR.Qty_Sched_Ord_15_USR);
PARAMETER(CUR.Qty_Sched_Ord_16_USR);
PARAMETER(CUR.Unit_Weight);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
PARAMETER(LCL.Sold_100_Percent_Frozen);
{
 //?Execute internal function

 MOVE *ALL (To: PAR From: CON);

 //?NEW - If item sold 100% frozen, defaults plants Internal freezer
 // LCL.Warehouse Code = PAR.Warehouse Code
 LCL.Warehouse_Code = PAR.Warehouse_Code;

 CASE;

 // IF PAR.Sold 100% Frozen is yes
 IF PAR.Sold_100_Percent_Frozen = 'Y';

 CASE;

 // IF PAR.Company Number is Guymon
 IF PAR.Company_Number = 360;

 // LCL.Warehouse Code = CND.Cloverleaf Freezer
 LCL.Warehouse_Code = 'CF1';

 // IF PAR.Company Number is St. Joseph
 IF PAR.Company_Number = 960;

 // LCL.Warehouse Code = CND.St. Joseph Cold Storage
 LCL.Warehouse_Code = 'SF1';

 // IF PAR.Company Number is Sioux City
 IF PAR.Company_Number = 440;

 // LCL.Warehouse Code = CND.Seaboard Triumph - Frozen
 LCL.Warehouse_Code = 'STF';

 ENDIF;

 ENDIF;

 //?**********  Day 1  **********
 EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Lot_Tracking_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Lot Tracking Flag is yes
 IF LCL.Lot_Tracking_Flag = 'Y';

 EXECUTE FUNCTION(Rtv Item Loc Qty Tot  RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1517365;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.Qty_On_Hand_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Quantity Loc On-Hand USR = PAR.Quantity Loc On-Hand USR + DB1.ILL Item Qty O
  PAR.Quantity_Loc_On_Hand_USR = PAR.Quantity_Loc_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv On-Hand Base PA   RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1683280;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.Qty_On_Hand_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Production Date EQ JOB.*Job date
  IF DB1.Production_Date = JOB.*Job_date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.On Hand U/M1 Summary = PAR.On Hand U/M1 Summary + DB1.Quantity on Hand - U/M1
  PAR.On_Hand_UOM1_Summary = PAR.On_Hand_UOM1_Summary + DB1.Quantity_on_Hand_UOM1;

  ENDIF;

 }

 ENDIF;

 //?If inventory qty is less than zero then make zero
 CASE;

 // IF PAR.Qty On-Hand USR is LT Zero
 IF PAR.Qty_On_Hand_USR < *ZERO;

 // PAR.Qty On-Hand USR = CON.*ZERO
 PAR.Qty_On_Hand_USR = *ZERO;

 ENDIF;

 //?Return Sched qty and weight.. which is what is was doing FP1054 4/15/09
 // LCL.Status Flag 10 Y/N = CND.No
 LCL.Status_Flag_10_Y_N = 'N';

 EXECUTE FUNCTION(Rtv Sched Ship ALL    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1515089;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_1_USR);
 PARAMETER(LCL.Status_Flag_10_Y_N);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Status Flag 10 Y/N is Yes
  IF PAR.Status_Flag_10_Y_N = 'Y';

  //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?FP1054 if no, accum Ordered & qty & wgt
  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 // PAR.Total Sched Shipments USR = PAR.Qty Sched Ord 1 USR
 PAR.Total_Sched_Shipments_USR = PAR.Qty_Sched_Ord_1_USR;

 // PAR.Ord/Sch Sts USR = CND.Ordered
 PAR.Ord_Sch_Sts_USR = 'O';

 //?**********  Day 2  **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_2_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 3  **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_3_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 4  **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_4_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 5  **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_5_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 6  **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_6);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_6_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 7  **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_7);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_7_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 8  **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_8);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_8_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 9  **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_9);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_9_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 10 **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_10);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_10_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 11 **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_11);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_11_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 12 **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_12);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_12_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 13 **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_13);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_13_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 14 **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_14);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_14_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 15 **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_15);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_15_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 //?**********  Day 16 **********
 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Day_16);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_16_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

}


EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CUR.Item_Desc_DRV);
PARAMETER(CUR.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// PAR.Total Sched Shipments USR = CUR.Qty Sched Ord 1 USR
PAR.Total_Sched_Shipments_USR = CUR.Qty_Sched_Ord_1_USR;

//?Total-day 2
CASE;

// IF PAR.Generic Heading 2 is Equal Total
IF PAR.Generic_Heading_2 = 'Total';

// CUR.Qty Sched Ord 2 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_2_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 2
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 2 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_2_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 2 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_2_USR;

ENDIF;

//?Total-day 3
CASE;

// IF PAR.Generic Heading 3 is Equal Total
IF PAR.Generic_Heading_3 = 'Total';

// CUR.Qty Sched Ord 3 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_3_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 3
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 3 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_3_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 3 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_3_USR;

ENDIF;

//?Total-day 4
CASE;

// IF PAR.Generic Heading 4 is Equal Total
IF PAR.Generic_Heading_4 = 'Total';

// CUR.Qty Sched Ord 4 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_4_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 4
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 4 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_4_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 4 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_4_USR;

ENDIF;

//?Total-day 5
CASE;

// IF PAR.Generic Heading 5 is Equal Total
IF PAR.Generic_Heading_5 = 'Total';

// CUR.Qty Sched Ord 5 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_5_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 5
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 5 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_5_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 5 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_5_USR;

ENDIF;

//?Total-day 6
CASE;

// IF PAR.Generic Heading 6 is Equal Total
IF PAR.Generic_Heading_6 = 'Total';

// CUR.Qty Sched Ord 6 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_6_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 6
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 6 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_6_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 6 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_6_USR;

ENDIF;

//?Total-day 7
CASE;

// IF PAR.Generic Heading 7 is Equal Total
IF PAR.Generic_Heading_7 = 'Total';

// CUR.Qty Sched Ord 7 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_7_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 7
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 7 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_7_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 7 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_7_USR;

ENDIF;

//?Total-day 8
CASE;

// IF PAR.Generic Heading 8 is Equal Total
IF PAR.Generic_Heading_8 = 'Total';

// CUR.Qty Sched Ord 8 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_8_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 8
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 8 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_8_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 8 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_8_USR;

ENDIF;

//?Total-day 9
CASE;

// IF PAR.Generic Heading 9 is Equal Total
IF PAR.Generic_Heading_9 = 'Total';

// CUR.Qty Sched Ord 9 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_9_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 9
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 9 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_9_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 9 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_9_USR;

ENDIF;

//?Total-day 10
CASE;

// IF PAR.Generic Heading 10 is Equal Total
IF PAR.Generic_Heading_10 = 'Total';

// CUR.Qty Sched Ord 10 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_10_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 10
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 10 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_10_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 10 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_10_USR;

ENDIF;

//?Total-day 11
CASE;

// IF PAR.Generic Heading 11 is Equal Total
IF PAR.Generic_Heading_11 = 'Total';

// CUR.Qty Sched Ord 11 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_11_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 11
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 11 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_11_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 11 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_11_USR;

ENDIF;

//?Total-day 12
CASE;

// IF PAR.Generic Heading 12 is Equal Total
IF PAR.Generic_Heading_12 = 'Total';

// CUR.Qty Sched Ord 12 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_12_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 12
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 12 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_12_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 12 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_12_USR;

ENDIF;

//?Total-day 13
CASE;

// IF PAR.Generic Heading 13 is Equal Total
IF PAR.Generic_Heading_13 = 'Total';

// CUR.Qty Sched Ord 13 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_13_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 13
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 13 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_13_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 13 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_13_USR;

ENDIF;

//?Total-day 14
CASE;

// IF PAR.Generic Heading 14 is Equal Total
IF PAR.Generic_Heading_14 = 'Total';

// CUR.Qty Sched Ord 14 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_14_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 14
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 14 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_14_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 14 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_14_USR;

ENDIF;

//?Total-day 15
CASE;

// IF PAR.Generic Heading 15 is Equal Total
IF PAR.Generic_Heading_15 = 'Total';

// CUR.Qty Sched Ord 15 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_15_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 15
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 15 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_15_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 15 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_15_USR;

ENDIF;

//?Total-day 16
CASE;

// IF PAR.Generic Heading 16 is Equal Total
IF PAR.Generic_Heading_16 = 'Total';

// CUR.Qty Sched Ord 16 USR = PAR.Total Sched Shipments USR
CUR.Qty_Sched_Ord_16_USR = PAR.Total_Sched_Shipments_USR;

// PAR.Total Sched Shipments USR = CON.*ZERO
PAR.Total_Sched_Shipments_USR = *ZERO;

//?Total-day 16
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Total Sched Shipments USR = PAR.Total Sched Shipments USR + CUR.Qty Sched Ord 16 USR
PAR.Total_Sched_Shipments_USR = PAR.Total_Sched_Shipments_USR + CUR.Qty_Sched_Ord_16_USR;

// PAR.Grand Total Schd Ship USR = PAR.Grand Total Schd Ship USR + CUR.Qty Sched Ord 16 USR
PAR.Grand_Total_Schd_Ship_USR = PAR.Grand_Total_Schd_Ship_USR + CUR.Qty_Sched_Ord_16_USR;

ENDIF;

//?Calculate Weight
CASE;

// IF LCL.Piece Count Item is yes
IF LCL.Piece_Count_Item = 'Y';

// LCL.Pieces Need USR = LCL.Pieces Per Bag * LCL.Bags Per Unit *Rounded
LCL.Pieces_Need_USR = LCL.Pieces_Per_Bag * LCL.Bags_Per_Unit 'H';

// CUR.USR 3 Numeric         USR = LCL.Pieces Need USR
CUR.USR_3_Numeric_USR = LCL.Pieces_Need_USR;

// CUR.Wgt On-Hand USR = CUR.Qty On-Hand USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_On_Hand_USR = CUR.Qty_On_Hand_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Prod 1 USR = CUR.Qty Sched Prod 1 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Prod_1_USR = CUR.Qty_Sched_Prod_1_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 1 USR = CUR.Qty Sched Ord 1 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_1_USR = CUR.Qty_Sched_Ord_1_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt EOD Inv 1 USR = CUR.Qty EOD Inv 1 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_EOD_Inv_1_USR = CUR.Qty_EOD_Inv_1_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 2 USR = CUR.Qty Sched Ord 2 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_2_USR = CUR.Qty_Sched_Ord_2_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 3 USR = CUR.Qty Sched Ord 3 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_3_USR = CUR.Qty_Sched_Ord_3_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 4 USR = CUR.Qty Sched Ord 4 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_4_USR = CUR.Qty_Sched_Ord_4_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 5 USR = CUR.Qty Sched Ord 5 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_5_USR = CUR.Qty_Sched_Ord_5_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 6 USR = CUR.Qty Sched Ord 6 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_6_USR = CUR.Qty_Sched_Ord_6_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 7 USR = CUR.Qty Sched Ord 7 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_7_USR = CUR.Qty_Sched_Ord_7_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 8 USR = CUR.Qty Sched Ord 8 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_8_USR = CUR.Qty_Sched_Ord_8_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 9 USR = CUR.Qty Sched Ord 9 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_9_USR = CUR.Qty_Sched_Ord_9_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 10 USR = CUR.Qty Sched Ord 10 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_10_USR = CUR.Qty_Sched_Ord_10_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 11 USR = CUR.Qty Sched Ord 11 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_11_USR = CUR.Qty_Sched_Ord_11_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 12 USR = CUR.Qty Sched Ord 12 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_12_USR = CUR.Qty_Sched_Ord_12_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 13 USR = CUR.Qty Sched Ord 13 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_13_USR = CUR.Qty_Sched_Ord_13_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 14 USR = CUR.Qty Sched Ord 14 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_14_USR = CUR.Qty_Sched_Ord_14_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 15 USR = CUR.Qty Sched Ord 15 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_15_USR = CUR.Qty_Sched_Ord_15_USR * LCL.Pieces_Need_USR 'H';

// CUR.Wgt Sched Ord 16 USR = CUR.Qty Sched Ord 16 USR * LCL.Pieces Need USR *Rounded
CUR.Wgt_Sched_Ord_16_USR = CUR.Qty_Sched_Ord_16_USR * LCL.Pieces_Need_USR 'H';

//?Calculate Weight
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Wgt On-Hand USR = CUR.Qty On-Hand USR * CUR.Unit Weight *Rounded
CUR.Wgt_On_Hand_USR = CUR.Qty_On_Hand_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Prod 1 USR = CUR.Qty Sched Prod 1 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Prod_1_USR = CUR.Qty_Sched_Prod_1_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 1 USR = CUR.Qty Sched Ord 1 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_1_USR = CUR.Qty_Sched_Ord_1_USR * CUR.Unit_Weight 'H';

// CUR.Wgt EOD Inv 1 USR = CUR.Qty EOD Inv 1 USR * CUR.Unit Weight *Rounded
CUR.Wgt_EOD_Inv_1_USR = CUR.Qty_EOD_Inv_1_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 2 USR = CUR.Qty Sched Ord 2 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_2_USR = CUR.Qty_Sched_Ord_2_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 3 USR = CUR.Qty Sched Ord 3 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_3_USR = CUR.Qty_Sched_Ord_3_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 4 USR = CUR.Qty Sched Ord 4 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_4_USR = CUR.Qty_Sched_Ord_4_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 5 USR = CUR.Qty Sched Ord 5 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_5_USR = CUR.Qty_Sched_Ord_5_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 6 USR = CUR.Qty Sched Ord 6 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_6_USR = CUR.Qty_Sched_Ord_6_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 7 USR = CUR.Qty Sched Ord 7 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_7_USR = CUR.Qty_Sched_Ord_7_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 8 USR = CUR.Qty Sched Ord 8 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_8_USR = CUR.Qty_Sched_Ord_8_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 9 USR = CUR.Qty Sched Ord 9 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_9_USR = CUR.Qty_Sched_Ord_9_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 10 USR = CUR.Qty Sched Ord 10 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_10_USR = CUR.Qty_Sched_Ord_10_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 11 USR = CUR.Qty Sched Ord 11 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_11_USR = CUR.Qty_Sched_Ord_11_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 12 USR = CUR.Qty Sched Ord 12 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_12_USR = CUR.Qty_Sched_Ord_12_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 13 USR = CUR.Qty Sched Ord 13 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_13_USR = CUR.Qty_Sched_Ord_13_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 14 USR = CUR.Qty Sched Ord 14 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_14_USR = CUR.Qty_Sched_Ord_14_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 15 USR = CUR.Qty Sched Ord 15 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_15_USR = CUR.Qty_Sched_Ord_15_USR * CUR.Unit_Weight 'H';

// CUR.Wgt Sched Ord 16 USR = CUR.Qty Sched Ord 16 USR * CUR.Unit Weight *Rounded
CUR.Wgt_Sched_Ord_16_USR = CUR.Qty_Sched_Ord_16_USR * CUR.Unit_Weight 'H';

ENDIF;

//?Move 0 decimal to 2 decimal
// CUR.Qty On-Hand 7.2 USR = CUR.Qty On-Hand USR
CUR.Qty_On_Hand_7_2_USR = CUR.Qty_On_Hand_USR;

// CUR.Qty Sched Prod 1 7.2 USR = CUR.Qty Sched Prod 1 USR
CUR.Qty_Sched_Prod_1_7_2_USR = CUR.Qty_Sched_Prod_1_USR;

// CUR.Qty Sched Ord 1 7.2 USR = CUR.Qty Sched Ord 1 USR
CUR.Qty_Sched_Ord_1_7_2_USR = CUR.Qty_Sched_Ord_1_USR;

// CUR.Qty EOD Inv 1 7.2 USR = CUR.Qty EOD Inv 1 USR
CUR.Qty_EOD_Inv_1_7_2_USR = CUR.Qty_EOD_Inv_1_USR;

// CUR.Qty Sched Ord 2 7.2 USR = CUR.Qty Sched Ord 2 USR
CUR.Qty_Sched_Ord_2_7_2_USR = CUR.Qty_Sched_Ord_2_USR;

// CUR.Qty Sched Ord 3 7.2 USR = CUR.Qty Sched Ord 3 USR
CUR.Qty_Sched_Ord_3_7_2_USR = CUR.Qty_Sched_Ord_3_USR;

// CUR.Qty Sched Ord 4 7.2 USR = CUR.Qty Sched Ord 4 USR
CUR.Qty_Sched_Ord_4_7_2_USR = CUR.Qty_Sched_Ord_4_USR;

// CUR.Qty Sched Ord 5 7.2 USR = CUR.Qty Sched Ord 5 USR
CUR.Qty_Sched_Ord_5_7_2_USR = CUR.Qty_Sched_Ord_5_USR;

// CUR.Qty Sched Ord 6 7.2 USR = CUR.Qty Sched Ord 6 USR
CUR.Qty_Sched_Ord_6_7_2_USR = CUR.Qty_Sched_Ord_6_USR;

// CUR.Qty Sched Ord 7 7.2 USR = CUR.Qty Sched Ord 7 USR
CUR.Qty_Sched_Ord_7_7_2_USR = CUR.Qty_Sched_Ord_7_USR;

// CUR.Qty Sched Ord 8 7.2 USR = CUR.Qty Sched Ord 8 USR
CUR.Qty_Sched_Ord_8_7_2_USR = CUR.Qty_Sched_Ord_8_USR;

// CUR.Qty Sched Ord 9 7.2 USR = CUR.Qty Sched Ord 9 USR
CUR.Qty_Sched_Ord_9_7_2_USR = CUR.Qty_Sched_Ord_9_USR;

// CUR.Qty Sched Ord 10 7.2 USR = CUR.Qty Sched Ord 10 USR
CUR.Qty_Sched_Ord_10_7_2_USR = CUR.Qty_Sched_Ord_10_USR;

// CUR.Qty Sched Ord 11 7.2 USR = CUR.Qty Sched Ord 11 USR
CUR.Qty_Sched_Ord_11_7_2_USR = CUR.Qty_Sched_Ord_11_USR;

// CUR.Qty Sched Ord 12 7.2 USR = CUR.Qty Sched Ord 12 USR
CUR.Qty_Sched_Ord_12_7_2_USR = CUR.Qty_Sched_Ord_12_USR;

// CUR.Qty Sched Ord 13 7.2 USR = CUR.Qty Sched Ord 13 USR
CUR.Qty_Sched_Ord_13_7_2_USR = CUR.Qty_Sched_Ord_13_USR;

// CUR.Qty Sched Ord 14 7.2 USR = CUR.Qty Sched Ord 14 USR
CUR.Qty_Sched_Ord_14_7_2_USR = CUR.Qty_Sched_Ord_14_USR;

// CUR.Qty Sched Ord 15 7.2 USR = CUR.Qty Sched Ord 15 USR
CUR.Qty_Sched_Ord_15_7_2_USR = CUR.Qty_Sched_Ord_15_USR;

// CUR.Qty Sched Ord 16 7.2 USR = CUR.Qty Sched Ord 16 USR
CUR.Qty_Sched_Ord_16_7_2_USR = CUR.Qty_Sched_Ord_16_USR;

//?dont print line if all fields are zero
CASE;

// IF CUR.Qty On-Hand USR is EQ Zero
IF CUR.Qty_On_Hand_USR = *ZERO;

// AND CUR.Qty Sched Prod 1 USR is EQ Zero
AND CUR.Qty_Sched_Prod_1_USR = *ZERO;

// AND CUR.Qty Sched Ord 1 USR is EQ Zero
AND CUR.Qty_Sched_Ord_1_USR = *ZERO;

// AND CUR.Qty EOD Inv 1 USR is EQ Zero
AND CUR.Qty_EOD_Inv_1_USR = *ZERO;

// AND CUR.Qty Sched Ord 2 USR is EQ Zero
AND CUR.Qty_Sched_Ord_2_USR = *ZERO;

// AND CUR.Qty Sched Ord 3 USR is EQ Zero
AND CUR.Qty_Sched_Ord_3_USR = *ZERO;

// AND CUR.Qty Sched Ord 4 USR EQ WRK.ZERO
AND CUR.Qty_Sched_Ord_4_USR = WRK.ZERO;

// AND CUR.Qty Sched Ord 5 USR EQ WRK.ZERO
AND CUR.Qty_Sched_Ord_5_USR = WRK.ZERO;

// AND CUR.Qty Sched Ord 6 USR EQ WRK.ZERO
AND CUR.Qty_Sched_Ord_6_USR = WRK.ZERO;

// AND CUR.Qty Sched Ord 7 USR EQ WRK.ZERO
AND CUR.Qty_Sched_Ord_7_USR = WRK.ZERO;

// AND CUR.Qty Sched Ord 8 USR is EQ Zero
AND CUR.Qty_Sched_Ord_8_USR = *ZERO;

// AND CUR.Qty Sched Ord 9 USR is EQ Zero
AND CUR.Qty_Sched_Ord_9_USR = *ZERO;

// AND CUR.Qty Sched Ord 10 USR is EQ Zero
AND CUR.Qty_Sched_Ord_10_USR = *ZERO;

// AND CUR.Qty Sched Ord 11 USR is EQ Zero
AND CUR.Qty_Sched_Ord_11_USR = *ZERO;

// AND CUR.Qty Sched Ord 12 USR is EQ Zero
AND CUR.Qty_Sched_Ord_12_USR = *ZERO;

// AND CUR.Qty Sched Ord 13 USR is EQ Zero
AND CUR.Qty_Sched_Ord_13_USR = *ZERO;

// AND CUR.Qty Sched Ord 14 USR is EQ Zero
AND CUR.Qty_Sched_Ord_14_USR = *ZERO;

// AND CUR.Qty Sched Ord 15 USR is EQ Zero
AND CUR.Qty_Sched_Ord_15_USR = *ZERO;

// AND CUR.Qty Sched Ord 16 USR is EQ Zero
AND CUR.Qty_Sched_Ord_16_USR = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : Prt Base Avail        PO
EXECUTE FUNCTION(Prt Base Avail        PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(CUR.Wgt_On_Hand_USR);
PARAMETER(CUR.Wgt_Sched_Prod_1_USR);
PARAMETER(CUR.Wgt_Sched_Ord_1_USR);
PARAMETER(CUR.Wgt_EOD_Inv_1_USR);
PARAMETER(CUR.Wgt_Sched_Ord_2_USR);
PARAMETER(CUR.Wgt_Sched_Ord_3_USR);
PARAMETER(CUR.Wgt_Sched_Ord_4_USR);
PARAMETER(CUR.Wgt_Sched_Ord_5_USR);
PARAMETER(CUR.Wgt_Sched_Ord_6_USR);
PARAMETER(CUR.Wgt_Sched_Ord_7_USR);
PARAMETER(CUR.Wgt_Sched_Ord_8_USR);
PARAMETER(CUR.Wgt_Sched_Ord_9_USR);
PARAMETER(CUR.Wgt_Sched_Ord_10_USR);
PARAMETER(CUR.Wgt_Sched_Ord_11_USR);
PARAMETER(CUR.Wgt_Sched_Ord_12_USR);
PARAMETER(CUR.Wgt_Sched_Ord_13_USR);
PARAMETER(CUR.Wgt_Sched_Ord_14_USR);
PARAMETER(CUR.Wgt_Sched_Ord_15_USR);
PARAMETER(CUR.Wgt_Sched_Ord_16_USR);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(CUR.Unit_Weight);
PARAMETER(LCL.Pieces_Need_USR);
PARAMETER(PAR.Std_Prod_Input_Sts_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level totals

// SUPPRESSED PRINT Item Display Sequence totals format

// SUPPRESSED PRINT Availability Group Code totals format

// SUPPRESSED PRINT Company Number totals format

