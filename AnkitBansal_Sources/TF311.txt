      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF311
      * TITLE:       Workfile: Weekly Product Revenue Download
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     04/18/06
      *
      * FUNCTION:  Batch program to create a workfile of data that we will turn into
      *            a spreadsheet and email to a user.
      *
      *            This file can be generated as:
      *                    1) detail or summary
      *
      ***************************************************************************************
      * MODIFICATIONS:
      ***************************************************************************************
      * DATE      PROGRAMMER
      *
      * 06/01/06  LeAnne Fedor
      *           The calc of Weighted Yield Percent on the "summary" version was abending with
      *           "arithmetic operation resulted in a value that is too large to fit in
      *           the target". The value, which should fit in a 999.9999 field was over
      *           11,000%!!  We are not sure whether the calc is incorrect or the data is
      *           bad. So, for now, we are simply going to add zero into this field.
      *
      * 10/02/06  LeAnne Ramsey
      *           Changed calc of Yield Percent. To accommodate this change, we added 4
      *           fields to the workfile:
      *                SBF sold start weight
      *                TF  sold start weight
      *                SBF produced start weight
      *                TF  produced start weight
      *
      * 10/09/06  LeAnne Ramsey
      *           We are getting this abend again. The data is causing it.
      *           So, for now, we are go back to simply putting zero into the field.
      *           The calc of Weighted Yield Percent on the "summary" version was abending with
      *           "arithmetic operation resulted in a value that is too large to fit in
      *           the target". The value, which should fit in a 999.9999 field was over
      *           11,000%!!  We are not sure whether the calc is incorrect or the data is
      *           bad. So, for now, we are simply going to add zero into this field.
      *
      * 10/17/06  LeAnne Ramsey
      *           Fixed abend on Yield Percent due to data. We will calc into a 15,4 field
      *           and only move it to Yield Percent if it is 100% or less.
      *
      * 10/24/06  LeAnne Ramsey
      *           Per Alice, we have changed the Yield Percent logic to accept any value
      *           up to 999%---instead of the 100% logic put in place on 10/17/06.
      *
      * 02/14/07  LeAnne Ramsey
      *           Added  "STD Other Cost/LB" to workfile and to Weekly Product Revenue
      *           Detail file.
      *
      * 03/26/07  LeAnne Ramsey
      *           Added  "Capability Flag" to workfile and to Weekly Product Revenue
      *           Detail file.
      *
      * 04/10/07  LeAnne Ramsey
      *           Added  "Exclude from Mix" and "Exclude from Volume" flag logic.
      *
      * 04/16/07  LeAnne Ramsey
      *           We renamed 3 existing "flag" fields:
      *           FROM:   Capability Flag             TO: Inventory Flag
      *                   Exclude from Mix Flag           Mix Flag
      *                   Exclude from Volume Flag        Volume Flag
      *           We add field:
      *                   Meat Cost Group Code
      *
      * 05/23/07  LeAnne Ramsey
      *           Add fields:
      *              TF Percent Owned
      *              Co-owned Flag
      *              Producing Company
      *
      * 08/13/07  LeAnne Ramsey
      *           Recompile only.
      *           Added field: Item Type Code to TFP010
      *           (Note: For the download, we will include both FG and WP Items.)
      *
      * 09/11/07  LeAnne Ramsey
      *           Prior to CoOwned, the 'net product revenue' amounts were not accumulated
      *           for "exempt" records. Now, we will accumulate regardless of
      *           exempt/non-exempt.
      *
      * 10/01/07  LeAnne Ramsey
      *           We changed our mind on the 09/11/07 change above. Now, we will
      *           accumulate using logic like in TF611-Weekly Product Revenue Detail
      *           report for Co-Owned items.
      *
      * 11/07/07  LeAnne Ramsey
      *           The Sales Yield % changes made in October 2006 inadvertantly left
      *           duplicate sections of Sales Yield % code. The first section was
      *           calculating the percent correctly. The second section, which should
      *           not have been there, was setting the % to zero. (Subroutine: $sum311)
      *
      * 11/20/07  LeAnne Ramsey
      *           Damon Ginther reported that Pump% was not correct on the Summarized
      *           Version. Reviewing with Alice, she felt that Yield% was also not correct.
      *           AMB says to use the Yield% and the Pump% from the first TFP010 record
      *           instead of trying to calc values on the "Summary" version.
      *
      * 11/30/07  LeAnne Ramsey
      *           Damon Ginther reported that Std Pkg was not correct on the Summarized
      *           Version. We will now accumulate/save the "pounds" used on the cost calc
      *           on each TFP010 record. Then, we will use these saved pounds for the
      *           calc at the Summary level.
      *
      * 04/24/08  LeAnne Ramsey
      *           The TF Percent Owned, Co-Owned Flag and Producing Company were
      *           not being populated on a "Detail" submission.
      *
      * 09/11/08  LeAnne Ramsey
      *           New field Export/Domestic Flag was added to:
      *             TFP010-Weekly Product Revenue Detail file
      *             TFP311-Workfile: Weekly product revenue download
      *
      * 11/14/17  Danny Nguyen  (R12011A-Weekly Product Revenue)
      *           Added 25 STF fields to TFP010 file.
      *           Added 28 STF fields to TFP311 file.
      *           Populate the 11 STF fields that are utilized in the TF311V Sequel View.
      *           STF (Company 440) data will now be populated into it's own STF fields in
      *           TFP010 file in order to create new STF reports like the ones used in Fees
      *           & Payments system.
      *
      * 02/07/18  Danny Nguyen  (T12489)
      *           Per Damon G., we will no longer check AGG Sold LBS for the Weighted Std.
      *           Always use the Produced LBS.
      *           Change wkmam field to 15.6 to not truncate decimal places for Meat Cost
      *           calcs in the Weighted Standards calcs.
      *
      * 01/21/21  ISE            TSN593
      *           Replaced *loval with *start
      *
      * 05/17/22  Danny Nguyen  (DO2484 - WI 479 STF Variance Reporting)
      *           Added 2 STF fields to TFP010 file:
      *            PRXYPC   - STF STD YIELD %
      *            PRXPMPPC - STF PUMP %
      *           Added 2 STF fields to TFP311 file:
      *            W1XYPC   - STF STD YIELD %
      *            W1XPMPPC - STF PUMP %
      *           Populate the 2 STF fields in TFP311 from TFP010. This is used in the
      *           TF311V Sequel View (Weekly Product Revenue Download).
      *
      * W105621 RMC 10/10/2022 INCREASE FIELD SIZES TO HANDLE PRICES > 999.99
      *         CHANGE @@ANPRPR TO SIZE 10.6
      *           CHANGES PRANPRPR IN TFP010
      *           CHANGES W1ANPRPR IN TFP311
      *           CHANGES W1SPR,W1TPR, W1XPR TO REF @@AVGPRC  IN TFP311
      *
      * 3024514 SG  01/22/2025 Increase field sizes to calculate intermediate
      *         totals for cost fields correctly to 6 decimal places
      *         Changes will be done for STD LABOR COST/POUND,
      *         STD INGREDIENT COST/POUND, STD PACKAGING COST/POUND
      *         Field lengths will be changed to 22,6 to accommodate higher values
      *         and avoid loss of decimal places for accurate average calculaions
      *         Fields to be changed - wkiam, wkkam, wklam, wkoam, wkmam
      *         Change the total weight to be considered as
      *         SBF produced pounds + TF produced pounds + STF produced pounds
      *
      /EJECT
      ***************************************************************************************
      * FILE SPECIFICATIONS
      ***************************************************************************************
      *
     Fombyrel0  if   e           k disk
      *    Item default
      *
      *
     Fome8rel0  if   e           k disk
      *    Product type
      *
      *
     Fome9rel0  if   e           k disk
      *    Product group
      *
      *
     Fomfarel1  if   e           k disk
      *    Product class
      *
      *
     Fppamrel1  if   e           k disk
      *    TF Classification
      *
      *
     Ftfl010b   if   e           k disk
      *    Weekly product revenue detail
      *    (Records selected, file keyed in open query)
      *
      *
     Ftfp311    o    e           k disk
      *    Workfile: Weekly product revenue download
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Control fields
      *
     D first           s              1    inz('Y')
     D count           s              7  0
      *
     D svrcexfl        s                   like(prrcexfl)
     D svprcd          s                   like(prprcd)
      *
      *
      *
      * Parms
      *
     D xxflag          s              1
     D xxtfcgcd        s                   like(prtfcgcd)
     D xxtfcgds        s             15
      *
      *
      * Workfields
      *
     D wkpc            s             15  9
     D wkrate          s              9  6
     D wkpump          s              9  6
     D wklb            s             15  2
      *
     D wkmlb           s             15  2
12489D** wkmam           s             11  2
24514D** wkmam           s             15  6
24514D wkmam           s             22  6
      *
     D wkilb           s             15  2
24514D** wkiam           s             11  2
24514D wkiam           s             22  6
      *
     D wkklb           s             15  2
24514D** wkkam           s             11  2
24514D wkkam           s             22  6
      *
     D wkllb           s             15  2
24514D** wklam           s             11  2
24514D wklam           s             22  6
      *
     D wkolb           s             15  2
24514D** wkoam           s             11  2
24514D wkoam           s             22  6
      *
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldfcymd               52     59  0
     D  ldtcymd               60     67  0
     D  lddsfl                71     71
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      *****************************************************************************************
      * MAINLINE
      *****************************************************************************************
      *
      * Read each record selected by the open query from the Weekly Product
      * Revenue Detail file.
      *
593  C*    *loval        setll     tfl010b
593  C     *start        setll     tfl010b
      *
     C                   dou       *in90 = *on                                  Main do
     C                   read      tfl010b                                90
     C                   if        *in90 = *off                                 If not EOF
      *
      * When the user elected 1) the "detail" version or 2) a single "week", then
      *    we will just do a 1-to-1 read/write.
      * Otherwise, we need to accumulate and write summary records at break time.
      *
     C                   if        lddsfl = 'D' or ldfcymd = ldtcymd
     C                   exsr      $dtl311
     C                   else
     C                   exsr      $summary
     C                   endif
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Main do
      *
      *-----------------
      * EOF processing
      *-----------------
      *
      * If you are doing "Summary", write out the last record.
      *
     C                   if        first = no and lddsfl = 'S'
     C                   exsr      $sum311
     C                   endif
      *
      * We are going to ultimately e-mail this workfile as an Excel Spreadsheet
      * using Sequel View. Rose has warned me that the Excel limit is 66,000 records.
      * When/if you exceed this limit, the "view" goes into "la-la" land.
      * So, we have counted each record that we wrote to the workfile. If it
      * exceeds 66,000, we will send a "too many" message from the CL instead
      * of executing the View/Spreadsheet. Likewise, if the "count" is zero, we will
      * issue a "no data extracted; change your selections message".
      *
     C                   select
     C                   when      count = 0
     C                   move      'Z'           xxflag
      *
     C                   when      count >= 66000
     C                   move      'T'           xxflag
     C                   other
      *
     C                   move      *blank        xxflag
     C                   endsl
      *
     C                   seton                                        lr
      /EJECT
      *---------------------------------------------------------------
      * Processing for the "summarized" version
      *---------------------------------------------------------------
      *
     C     $summary      begsr
      *
      * Control breaks
     C                   select
     C                   when      first = yes
     C                   move      no            first
     C                   exsr      $new
      *
     C                   when      svrcexfl <> prrcexfl or
     C                             svprcd   <> prprcd
     C                   exsr      $sum311
     C                   exsr      $new
     C                   endsl
      *
      * Accumulate values
      *
     C                   exsr      $accum
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------------------------------
      * Accumulate values
      *----------------------------------------------------------------------------------------
      *
     C     $accum        begsr
      *
      * We want the "latest" values in the following fields. So, we will just keep
      * repopulating them from each record that we process.
      *
     C                   z-add     prisclcd      w1isclcd
     C                   z-add     prisgrcd      w1isgrcd
     C                   z-add     pristycd      w1istycd
     C                   move      prtfclcd      w1tfclcd
     C                   move      prtfcgcd      w1tfcgcd
     C                   move      prglsub       w1glsub
     C                   move      prinvfl       w1invfl
     C                   move      prmixfl       w1mixfl
     C                   move      prvolfl       w1volfl
     C                   move      prcgcd        w1cgcd
      *
     C                   move      prcoownfl     w1coownfl
     C                   move      prprdcmp      w1prdcmp
     C                   z-add     prtownpc      w1townpc
      *
     C                   z-add     prwedt        w1wedt
      *
     C                   z-add     prseilb       w1seilb
     C                   z-add     prseiam       w1seiam
      *
     C                   z-add     prteilb       w1teilb
     C                   z-add     prteiam       w1teiam
      *
12011C                   z-add     prxeilb       w1xeilb
12011C                   z-add     prxeiam       w1xeiam
      *
      * Accumulate Seaboard
     C                   add       prspulb       w1spulb
     C                   add       prspuam       w1spuam
     C                   add       prspslb       w1spslb
     C                   add       prsfpulb      w1sfpulb
     C                   add       prsfpuam      w1sfpuam
      *
     C                   add       prspflb       w1spflb
     C                   add       prssllb       w1ssllb
     C                   add       prsgsam       w1sgsam
     C                   add       prsnsam       w1snsam
      *
     C                   add       prsslafam     w1sslafam
     C                   add       prsslbcam     w1sslbcam
     C                   add       prssloxam     w1ssloxam
     C                   add       prsslsxam     w1sslsxam
      *
     C                   add       prscllb       w1scllb
     C                   add       prsnclam      w1snclam
     C                   add       prsclafam     w1sclafam
     C                   add       prsclbcam     w1sclbcam
     C                   add       prscloxam     w1scloxam
     C                   add       prsclsxam     w1sclsxam
      *
      * Accumulate Triumph
     C                   add       prtpulb       w1tpulb
     C                   add       prtpuam       w1tpuam
     C                   add       prtpslb       w1tpslb
     C                   add       prtfpulb      w1tfpulb
     C                   add       prtfpuam      w1tfpuam
      *
     C                   add       prtpflb       w1tpflb
     C                   add       prtsllb       w1tsllb
     C                   add       prtgsam       w1tgsam
     C                   add       prtnsam       w1tnsam
      *
     C                   add       prtslafam     w1tslafam
     C                   add       prtslbcam     w1tslbcam
     C                   add       prtsloxam     w1tsloxam
     C                   add       prtslsxam     w1tslsxam
      *
     C                   add       prtcllb       w1tcllb
     C                   add       prtnclam      w1tnclam
     C                   add       prtclafam     w1tclafam
     C                   add       prtclbcam     w1tclbcam
     C                   add       prtcloxam     w1tcloxam
     C                   add       prtclsxam     w1tclsxam
      *
12011 * Accumulate Seaboard Triumph Foods
  |  C                   add       prxpulb       w1xpulb
  |  C                   add       prxpuam       w1xpuam
  |  C                   add       prxfpulb      w1xfpulb
  |  C                   add       prxfpuam      w1xfpuam
  |   *
  |  C                   add       prxsllb       w1xsllb
12011C                   add       prxnsam       w1xnsam
      *
      * Note: Typically, we do not add into totals the following fields when the
      *       record is EXEMPT. BUT, we will add in for these when it is
      *       CoOwned--regardless of whether the Item is Exempt/Not Exempt.
      *            1) Aggregate sold pounds
      *            2) Net Product Revenue Amount
      *
     C                   if        prrcexfl = no or prcoownfl = yes
     C                   add       prasllb       w1asllb
     C                   add       pranpram      w1anpram
     C                   add       prsnpram      w1snpram
     C                   add       prtnpram      w1tnpram
12011C                   add       prxnpram      w1xnpram
     C                   endif
      *
      *       For the Not-Exempt Records only:
      *
     C                   if        prrcexfl = no                                If NOT Exempt
     C                   add       prapflb       w1apflb
     C                   add       pragpram      w1agpram
     C                   add       praslafam     w1aslafam
     C                   add       praslbcam     w1aslbcam
     C                   add       prasloxam     w1asloxam
     C                   add       praslsxam     w1aslsxam
      *
     C                   add       pracllb       w1acllb
     C                   add       pragclam      w1agclam
     C                   add       pranclam      w1anclam
      *
     C                   add       praclafam     w1aclafam
     C                   add       praclbcam     w1aclbcam
     C                   add       pracloxam     w1acloxam
     C                   add       praclsxam     w1aclsxam
      *
      * Get Yield Percent and Pump Percent into 'Rate' fields for later calcs.
      *
     C                   eval      wkrate = prypc / 100
     C                   eval      wkpump = (prpumppc / 100) + 1
      *
      * Sold start weights:
      *     (sold pounds / yield rate) / pump rate
      *  Where:  Yield rate = STD yield % / 100
      *          Pump rate  = (Pump % / 100) + 1
      *
     C                   if        wkrate <> 0 and wkpump <> 0
     C                   eval      w1sslslb = w1sslslb +
     C                                       ((prssllb / wkrate) / wkpump)
     C                   eval      w1tslslb = w1tslslb +
     C                                       ((prtsllb / wkrate) / wkpump)
12011C                   eval      w1xslslb = w1xslslb +
12011C                                       ((prxsllb / wkrate) / wkpump)
     C                   endif
      *
      * Produced start weights
      *     (produced pounds / yield rate) / pump rate
      *  Where:  Yield rate = STD yield % / 100
      *          Pump rate  = (Pump % / 100) + 1
      *
     C                   if        wkrate <> 0
     C                   eval      w1spuslb = w1spuslb +
     C                                       ((prspulb / wkrate) / wkpump)
     C                   eval      w1tpuslb = w1tpuslb +
     C                                       ((prtpulb / wkrate) / wkpump)
12011C                   eval      w1xpuslb = w1xpuslb +
     C                                       ((prxpulb / wkrate) / wkpump)
     C                   endif
      *
      * For Weighted Standards calcs, calc/accumulate costs based on:
      *  1) Sold Pounds when they are not zero or
      *  2) Produced Pounds when Sold Pounds are zero
12489 ** 3) Per Damon G., we will no longer check AGG Sold LBS for the Weighted Std.
  |   **    Always use the Produced LBS hence notes 1 & 2 above is no longer valid.
  |  C**                 if        prasllb <> 0
  |  C**                 z-add     prasllb       wklb
  |  C**                 else
12489C**   prtpulb       add       prspulb       wklb
12011 ** Do NOT add STF Produced LBS to wklb.
12489C**                 endif
  |   ** T12489 - If no Produced LBS then OK to multiply by zero.
12489C     prtpulb       add       prspulb       wklb
24514 ** 3024514 - Add STF produced pounds to Total lbs
24514C     wklb          add       prxpulb       wklb
      *
      *    Meat cost
     C                   eval      wkmam = wkmam + (prmco * wklb)
     C                   if        prmco <> 0
     C                   add       wklb          wkmlb
     C                   endif
      *    Ingredient
     C                   eval      wkiam = wkiam + (prico * wklb)
     C                   if        prico <> 0
     C                   add       wklb          wkilb
     C                   endif
      *    Packaging
     C                   eval      wkkam = wkkam + (prkco * wklb)
     C                   if        prkco <> 0
     C                   add       wklb          wkklb
     C                   endif
      *    Labor
     C                   eval      wklam = wklam + (prlco * wklb)
     C                   if        prlco <> 0
     C                   add       wklb          wkllb
     C                   endif
      *    Other
     C                   eval      wkoam = wkoam + (proco * wklb)
     C                   if        proco <> 0
     C                   add       wklb          wkolb
     C                   endif
     C                   endif                                                  If NOT Exempt
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write a workfile record when this is the "detail" version
      *---------------------------------------------------------------
      *
     C     $dtl311       begsr
      *
     C                   z-add     prwbdt        w1wbdt
     C                   z-add     prwedt        w1wedt
     C                   z-add     pryr          w1yr
     C                   z-add     prwk          w1wk
      *
     C                   move      prrcexfl      w1rcexfl
     C                   move      prprexfl      w1prexfl
     C                   move      prinvfl       w1invfl
     C                   move      prmixfl       w1mixfl
     C                   move      prvolfl       w1volfl
     C                   move      prpfcd        w1pfcd
      *
     C                   move      prglsub       w1glsub
      *
      * Populate various "code" fields and retrieve their "descriptions"
      *
     C                   z-add     prprcd        w1prcd
     C                   move      pritycd       w1itycd
     C                   z-add     prisclcd      w1isclcd
     C                   z-add     prisgrcd      w1isgrcd
     C                   z-add     pristycd      w1istycd
     C                   move      prtfclcd      w1tfclcd
     C                   move      prtfcgcd      w1tfcgcd
     C                   move      prcoownfl     w1coownfl
     C                   move      prprdcmp      w1prdcmp
     C                   z-add     prtownpc      w1townpc
     C                   move      predfl        w1edfl
      *
     C                   exsr      $desc
      *
      * Production standards
      *
     C                   z-add     prypc         w1ypc
     C                   z-add     prpumppc      w1pumppc
     C                   z-add     prmco         w1mco
     C                   z-add     prlco         w1lco
     C                   z-add     prkco         w1kco
     C                   z-add     prico         w1ico
     C                   z-add     prpco         w1pco
      * Seaboard
     C                   z-add     prsbilb       w1sbilb
     C                   z-add     prsbiam       w1sbiam
     C                   z-add     prseilb       w1seilb
     C                   z-add     prseiam       w1seiam
     C                   z-add     prspulb       w1spulb
     C                   z-add     prspuam       w1spuam
     C                   z-add     prspslb       w1spslb
     C                   z-add     prsfpulb      w1sfpulb
     C                   z-add     prsfpuam      w1sfpuam
      *
     C                   z-add     prspflb       w1spflb
     C                   z-add     prssllb       w1ssllb
     C                   z-add     prsgsam       w1sgsam
     C                   z-add     prsnsam       w1snsam
      *
     C                   z-add     prsslafam     w1sslafam
     C                   z-add     prsslbcam     w1sslbcam
     C                   z-add     prssloxam     w1ssloxam
     C                   z-add     prsslsxam     w1sslsxam
      *
     C                   z-add     prscllb       w1scllb
     C                   z-add     prsnclam      w1snclam
     C                   z-add     prsclafam     w1sclafam
     C                   z-add     prsclbcam     w1sclbcam
     C                   z-add     prscloxam     w1scloxam
     C                   z-add     prsclsxam     w1sclsxam
      * Triumph
     C                   z-add     prtbilb       w1tbilb
     C                   z-add     prtbiam       w1tbiam
     C                   z-add     prteilb       w1teilb
     C                   z-add     prteiam       w1teiam
     C                   z-add     prtpulb       w1tpulb
     C                   z-add     prtpuam       w1tpuam
     C                   z-add     prtpslb       w1tpslb
     C                   z-add     prtfpulb      w1tfpulb
     C                   z-add     prtfpuam      w1tfpuam
      *
     C                   z-add     prtpflb       w1tpflb
     C                   z-add     prtsllb       w1tsllb
     C                   z-add     prtgsam       w1tgsam
     C                   z-add     prtnsam       w1tnsam
      *
     C                   z-add     prtslafam     w1tslafam
     C                   z-add     prtslbcam     w1tslbcam
     C                   z-add     prtsloxam     w1tsloxam
     C                   z-add     prtslsxam     w1tslsxam
      *
     C                   z-add     prtcllb       w1tcllb
     C                   z-add     prtnclam      w1tnclam
     C                   z-add     prtclafam     w1tclafam
     C                   z-add     prtclbcam     w1tclbcam
     C                   z-add     prtcloxam     w1tcloxam
     C                   z-add     prtclsxam     w1tclsxam
12011 * Seaboard Triumph Foods
  |  C                   z-add     prxbilb       w1xbilb
  |  C                   z-add     prxbiam       w1xbiam
  |  C                   z-add     prxeilb       w1xeilb
  |  C                   z-add     prxeiam       w1xeiam
  |  C                   z-add     prxpulb       w1xpulb
  |  C                   z-add     prxpuam       w1xpuam
  |  C                   z-add     prxfpulb      w1xfpulb
  |  C                   z-add     prxfpuam      w1xfpuam
  |   *
  |  C                   z-add     prxsllb       w1xsllb
12011C                   z-add     prxnsam       w1xnsam
      *
2484 C                   z-add     prxypc        w1xypc
2484 C                   z-add     prxpmppc      w1xpmppc
      *
      *
      * Note: Typically, we do not populate the following fields when the
      *       record is EXEMPT. BUT, we will populate these when it is
      *       CoOwned--regardless of whether the Item is Exempt/Not Exempt.
      *            1) Aggregate sold pounds
      *            2) Net Product Revenue Amount
      *
     C                   if        prrcexfl = no or prcoownfl = yes
     C                   add       prasllb       w1asllb
     C                   add       pranpram      w1anpram
     C                   add       prsnpram      w1snpram
     C                   add       prtnpram      w1tnpram
12011C                   add       prxnpram      w1xnpram
     C                   endif
      *
      *     For the Non-Exempt Records only:
      *
     C                   if        prrcexfl = no                                If NOT Exempt
      *
      * Calculate "start" weights:
      * Get Yield Percent and Pump Percent into 'Rate' fields for calcs.
      *
     C                   eval      wkrate = prypc / 100
     C                   eval      wkpump = (prpumppc / 100) + 1
      *
      * Sold start weights:
      *     (sold pounds / yield rate) / pump rate
      *  Where:  Yield rate = STD yield % / 100
      *          Pump rate  = (Pump % / 100) + 1
      *
     C                   if        wkrate <> 0 and wkpump <> 0                  If not zero
     C                   eval      w1sslslb = ((prssllb / wkrate) / wkpump)
     C                   eval      w1tslslb = ((prtsllb / wkrate) / wkpump)
12011C                   eval      w1xslslb = ((prxsllb / wkrate) / wkpump)
      *
      * Produced start weights
      *     (produced pounds / yield rate) / pump rate
      *  Where:  Yield rate = STD yield % / 100
      *          Pump rate  = (Pump % / 100) + 1
      *
     C                   eval      w1spuslb = ((prspulb / wkrate) / wkpump)
     C                   eval      w1tpuslb = ((prtpulb / wkrate) / wkpump)
12011C                   eval      w1xpuslb = ((prxpulb / wkrate) / wkpump)
     C                   endif                                                  If not zero
      *
     C                   z-add     prapflb       w1apflb
     C                   z-add     pragpram      w1agpram
     C                   z-add     pranprpr      w1anprpr
      *
     C                   z-add     praslafam     w1aslafam
     C                   z-add     praslbcam     w1aslbcam
     C                   z-add     prasloxam     w1asloxam
     C                   z-add     praslsxam     w1aslsxam
      *
     C                   z-add     pracllb       w1acllb
     C                   z-add     pragclam      w1agclam
     C                   z-add     pranclam      w1anclam
      *
     C                   z-add     praclafam     w1aclafam
     C                   z-add     praclbcam     w1aclbcam
     C                   z-add     pracloxam     w1acloxam
     C                   z-add     praclsxam     w1aclsxam
      *
      *        Percent fields
      *        We force the sum of SBF + TF to come out to 100%.
      *
     C                   select
     C                   when      prsnprpc = 0 and prtnprpc = 0
      *
     C                   when      prsnprpc <> 0 and prtnprpc = 0
     C                   z-add     prsnprpc      w1snprpc
      *
     C                   when      prsnprpc = 0 and prtnprpc <> 0
     C                   z-add     prtnprpc      w1tnprpc
      *
     C                   when      prsnprpc <> 0 and prtnprpc <> 0
     C                   z-add     prsnprpc      w1snprpc
     C     100           sub       w1snprpc      w1tnprpc
     C                   endsl
     C                   endif                                                  If NOT Exempt
      *
      * Calc Average Net Price Per Pound for both 1) Seaboard and 2) Triumph and 3) STF.
      *
     C                   if        prssllb <> 0
     C     prsnsam       div(h)    prssllb       w1spr
     C                   endif
      *
     C                   if        prtsllb <> 0
     C     prtnsam       div(h)    prtsllb       w1tpr
     C                   endif
      *
12011C                   if        prxsllb <> 0
  |  C     prxnsam       div(h)    prxsllb       w1xpr
12011C                   endif
      *
     C                   exsr      $wrt311
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write a workfile record when this is the "summary" version
      *---------------------------------------------------------------
      *
     C     $sum311       begsr
      *
      * Populate "descriptions" for various fields
      *
     C                   exsr      $desc
      *
      * Calculate Weighted Standard "per pound" costs for:
      *  1) Meat
      *  2) Ingredient
      *  3) Packaging
      *  4) Labor
      *  5) Product
     C                   if        wkmlb <> 0
     C                   eval(h)   w1mco = wkmam / wkmlb
     C                   endif
      *
     C                   if        wkilb <> 0
     C                   eval(h)   w1ico = wkiam / wkilb
     C                   endif
      *
     C                   if        wkklb <> 0
     C                   eval(h)   w1kco = wkkam / wkklb
     C                   endif
      *
     C                   if        wkllb <> 0
     C                   eval(h)   w1lco = wklam / wkllb
     C                   endif
      *
     C                   if        wkolb <> 0
     C                   eval(h)   w1oco = wkoam / wkolb
     C                   endif
      *
     C                   eval      w1pco = w1mco + w1ico + w1kco + w1lco
      *
      * Calculate: Aggregate Net Product Revenue Price per Pound
      *
     C                   if        w1asllb <> 0
     C     w1anpram      div(h)    w1asllb       w1anprpr
     C                   endif
      *
      * Calc 'net product revenue percents' for SBF and TF.
      *
     C                   if        w1anpram <> 0                                If agg rev
     C                   eval      wkpc = (w1snpram / w1anpram) * 100
     C                   z-add(h)  wkpc          w1snprpc
     C     100           sub       w1snprpc      w1tnprpc
     C                   endif                                                  If agg rev
      *
      * Calc 'price per pound values'.
      *
     C                   if        w1ssllb <> 0
     C     w1snsam       div(h)    w1ssllb       w1spr
     C                   endif
      *
     C                   if        w1tsllb <> 0
     C     w1tnsam       div(h)    w1tsllb       w1tpr
     C                   endif
      *
12011C                   if        w1xsllb <> 0
  |  C     w1xnsam       div(h)    w1xsllb       w1xpr
12011C                   endif
      *
     C                   exsr      $wrt311
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write a workfile record
      *---------------------------------------------------------------
      *
     C     $wrt311       begsr
      *
     C                   write     w1rec
     C                   clear                   w1rec
     C                   add       1             count
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Populate fields that don't change per record
      *---------------------------------------------------------------
      *
     C     $new          begsr
      *
      * Clear accumulators
      *
     C                   z-add     0             wkpc
     C                   z-add     0             wklb
     C                   z-add     0             wkmlb
     C                   z-add     0             wkmam
     C                   z-add     0             wkilb
     C                   z-add     0             wkiam
     C                   z-add     0             wkklb
     C                   z-add     0             wkkam
     C                   z-add     0             wkllb
     C                   z-add     0             wklam
     C                   z-add     0             wkolb
     C                   z-add     0             wkoam
     C                   z-add     0             wkrate
     C                   z-add     0             wkpump
      *
      * Save control fields
      *
     C                   move      prrcexfl      svrcexfl
     C                   z-add     prprcd        svprcd
      *
      * Populate fields that we will not change.
      *
     C                   move      prrcexfl      w1rcexfl
     C                   move      *blank        w1prexfl
     C                   z-add     prprcd        w1prcd
     C                   move      pritycd       w1itycd
     C                   move      prpfcd        w1pfcd
     C                   z-add     prypc         w1ypc
2484 C                   z-add     prxypc        w1xypc                         STF STD Yield %
     C                   z-add     prpumppc      w1pumppc
2484 C                   z-add     prxpmppc      w1xpmppc                       STF Pump %
     C                   move      predfl        w1edfl
      *
     C                   z-add     0             w1yr
     C                   z-add     0             w1wk
      *
      * We will populate the following fields with the values from the first
      * record for this Product/Record Exempt flag.
      *
     C                   z-add     prwbdt        w1wbdt
     C                   z-add     prsbilb       w1sbilb
     C                   z-add     prsbiam       w1sbiam
      *
     C                   z-add     prtbilb       w1tbilb
     C                   z-add     prtbiam       w1tbiam
      *
12011C                   z-add     prxbilb       w1xbilb
12011C                   z-add     prxbiam       w1xbiam
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Retrieve "descriptions" for various fields.
      *---------------------------------------------------------------
      *
     C     $desc         begsr
      *
      * Product
      *
     C     w1prcd        chain     ombyrel0                           92
     C                   if        *in92 = *off                                 If ok
     C                   movel(p)  byavna        w1prds
     C                   else
     C                   move      *blank        w1prds
     C                   endif
      *
      * Item Structure Class
      *
     C     w1isclcd      chain     omfarel1                           92
     C                   if        *in92 = *off
     C                   eval      w1isclds = fadetx
     C                   else
     C                   eval      w1isclds = 'Unassigned'
     C                   endif
      *
      * Item Structure Group
      *
     C     w1isgrcd      chain     ome9rel0                           92
     C                   if        *in92 = *off
     C                   eval      w1isgrds  = e9ddtx
     C                   else
     C                   eval      w1isgrds = 'Unassigned'
     C                   endif
      *
      * Item Structure Type
      *
     C     w1istycd      chain     ome8rel0                           92
     C                   if        *in92 = *off
     C                   eval      w1istyds  = e8dctx
     C                   else
     C                   eval      w1istyds  = 'Unassigned'
     C                   endif
      *
      * TF Classification
      *
     C     w1tfclcd      chain     ppamrel1                           92
     C                   if        *in92 = *off                                 If ok
     C                   eval      w1tfclds  = amq0na
     C                   else
     C                   eval      w1tfclds = 'Unassigned'
     C                   endif                                                  If ok
      *
      * TF Class Group
      *
     C                   call      'TF804'
     C                   parm      w1tfcgcd      xxtfcgcd
     C                   parm      *blank        xxtfcgds
      *
     C                   if        xxtfcgds = *blank                            If bad
     C                   eval      w1tfcgds = 'Unassigned'
     C                   else
     C                   eval      w1tfcgds = xxtfcgds
     C                   endif                                                  If bad
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
     C     *entry        plist
     C                   parm                    xxflag
      *
     C                   endsr
      /EJECT
