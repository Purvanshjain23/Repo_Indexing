// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLY6DFR
// ?Date: 14.08.2025 Time: 02:55:46
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E3089 SLM 07/28/16 - PGM WAS CHECKED OUT --- GET THIS BACK IN SYNC
//?Modifications and Comments
DO;

//?E12101 JJH 11/20/17 - Recompile after adding Shawn Smith and
//?  remmoving Joe Hegeman from the Receiving Group TF list for
//?  field *USER.
//?E6784 JBB 07/28/16 - Recompile after adding Joe Hegeman to
//? the Receiving Group TF list for field *USER.
//?E3089 SLM 07/28/16 - PGM WAS CHECKED OUT --- GET THIS BACK IN SYNC
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.Pen_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.BOH Company Number = WRK.Pen Company Number
CTL.BOH_Company_Number = WRK.Pen_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.PP_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.@Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Val Process Code       RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1181829;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(WRK.TH_Hog_Class_Type);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(WRK.THP_Process_Code);
PARAMETER(WRK.Held_Over_Records_Y_N);
{
 //?USER: Initialize routine

 // WRK.First Time Flag Usr = CND.Blank
 WRK.First_Time_Flag_Usr = *BLANK;

 // PAR.Held Over Records Y/N = CND.Blank
 PAR.Held_Over_Records_Y_N = *BLANK;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 //?Check for Held overs
 CASE;

 // IF DB1.TH Held Over Record is Yes
 IF DB1.TH_Held_Over_Record = 'Y';

 // PAR.Held Over Records Y/N = CND.Yes
 PAR.Held_Over_Records_Y_N = 'Y';

 QUIT;

 //?Check for Held overs
 // IF DB1.TH Held Over GT WRK.Zero USR
 IF DB1.TH_Held_Over > WRK.Zero_USR;

 // PAR.Held Over Records Y/N = CND.Yes
 PAR.Held_Over_Records_Y_N = 'Y';

 QUIT;

 ENDIF;

}


// RCD.TH Kill Balancing Sts = WRK.TH Kill Balancing Sts
RCD.TH_Kill_Balancing_Sts = WRK.TH_Kill_Balancing_Sts;

CASE;

// IF DB1.TD Drive Card Number is No Drive Card
IF DB1.TD_Drive_Card_Number = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF WRK.THP Process Code is Payment
IF WRK.THP_Process_Code = 'PAYMNT';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF WRK.HC Class Type is Resale
IF WRK.HC_Class_Type = 'R';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// WRK.TD Pen Head = DB1.TD Pen Head + DB1.TD Held Over
WRK.TD_Pen_Head = DB1.TD_Pen_Head + DB1.TD_Held_Over;

// RCD.Sent to Kill Head Usr = WRK.TD Pen Head - DB1.TD Yard Dead
RCD.Sent_to_Kill_Head_Usr = WRK.TD_Pen_Head - DB1.TD_Yard_Dead;

// RCD.Sent to Kill Head Usr = RCD.Sent to Kill Head Usr - DB1.TD Held Over
RCD.Sent_to_Kill_Head_Usr = RCD.Sent_to_Kill_Head_Usr - DB1.TD_Held_Over;

// WRK.TD Pen Head = CON.*ZERO
WRK.TD_Pen_Head = *ZERO;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is *Revise
IF RCD.*SFLSEL = '2';

//?Perform program with tattoo detail in qtemp
// Call program Edt Yard/Held Crrs    UP.
CALL PROGRAM(Edt Yard/Held Crrs    UP) ('PKFNEFRCLP');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(CTL.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

// IF RCD.*SFLSEL is *Option 3 (Reusable)
IF RCD.*SFLSEL = '3';

// AND JOB.*USER is Receiving Group TF
AND JOB.*USER = 'TFBKNAD'/'TFJLEHE'/'SPSSMIT';

// Call program ZZt HdRecAftSntKill   ET.
CALL PROGRAM(ZZt HdRecAftSntKill   ET) ('PLLXETR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

// IF RCD.*SFLSEL is *Option 3 (Reusable)
IF RCD.*SFLSEL = '3';

// AND JOB.*USER is PorkISTesting
AND JOB.*USER = 'PRKTEST'/'ISPPATE'/'ISSMASO'/'ISRCENT'/'ISPURVAP'/'ISROSEM'/'ISSHARONZ'           +
/'ISSZURN'/'ISJHIGH'/'ISJBADE'/'ISJAMESB'/'ISDNGUY'/'ISDANNYN'/'PRKTESTGU'/'PRKTESTST'             +
/'PRKTESTTF'/'TPMTEST'/'TFTST961'/'ISSUSANM'/'ISJULIUSH'/'ISBGUTI'/'ISBARBG'/'ISBBARK'             +
/'ISNFOY'/'ISNATHANF'/'ISDREDD'/'ISABANS';

// Call program ZZt HdRecAftSntKill   ET.
CALL PROGRAM(ZZt HdRecAftSntKill   ET) ('PLLXETR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6';

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Buy Order-I.S Only HldOvr');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Oms_Application_Code);
PARAMETER(2);

//?Submit Print
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?Submit Print
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Company Number Alpha Usr = CVTVAR(RCD.BOH Company Number)
LCL.Company_Number_Alpha_Usr = CVTVAR(RCD.BOH_Company_Number);

// LCL.Buy Order Number Alpha = CVTVAR(RCD.BOH Buy Order Number)
LCL.Buy_Order_Number_Alpha = CVTVAR(RCD.BOH_Buy_Order_Number);

// LCL.Buy Order Load Alpha = CVTVAR(RCD.BOL Load Number)
LCL.Buy_Order_Load_Alpha = CVTVAR(RCD.BOL_Load_Number);

// LCL.Tattoo Nbr Alpha Usr = CVTVAR(RCD.TH Tattoo Number)
LCL.Tattoo_Nbr_Alpha_Usr = CVTVAR(RCD.TH_Tattoo_Number);

// LCL.PRT Copies Alpha = CVTVAR(PAR.PRT Copies)
LCL.PRT_Copies_Alpha = CVTVAR(PAR.PRT_Copies);

// Call program Prt Buy OrdLodHeldOvr UP.
SBMJOB;
CALL PROGRAM(Prt Buy OrdLodHeldOvr UP) ('PLNLUPC');
PARAMETER(PGM.*Return_code);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.PRT_Copies_Alpha);
PARAMETER(LCL.Company_Number_Alpha_Usr);
PARAMETER(LCL.Buy_Order_Number_Alpha);
PARAMETER(LCL.Buy_Order_Load_Alpha);
PARAMETER(LCL.Tattoo_Nbr_Alpha_Usr);
SBMJOBOVR JOB(HLDOVRREV);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blanks
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// Call program WW Drive Card         DF.
CALL PROGRAM(WW Drive Card         DF) ('PKGCDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

// Call program WW Pen Availability   DF.
CALL PROGRAM(WW Pen Availability   DF) ('PKGGDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

