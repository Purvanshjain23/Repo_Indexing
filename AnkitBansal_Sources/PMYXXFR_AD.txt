// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMYXXFR
// ?Date: 14.08.2025 Time: 03:44:34
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV Load List Downld   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1901541;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Load_Status);
PARAMETER(PAR.Load_Type);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER(PAR.USR_CDE_Parm_1);
PARAMETER(PAR.USR_CDE_Parm_2);
PARAMETER(PAR.USR_CDE_Parm_3);
PARAMETER(PAR.USR_CDE_Parm_4);
PARAMETER(PAR.USR_CDE_Parm_5);
PARAMETER(PAR.USR_CDE_Parm_6);
PARAMETER(PAR.USR_CDE_Parm_7);
PARAMETER(PAR.USR_CDE_Parm_8);
PARAMETER(PAR.USR_CDE_Parm_9);
PARAMETER(PAR.Order_Company_Number_Usr);
{
 //?USER: Initialize routine

 //?** Determine if at least one warehouse was requested
 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // OR PAR.USR CDE Parm 1 is Warehouse Code not Blank
 OR PAR.USR_CDE_Parm_1 <> *BLANK;

 // OR PAR.USR CDE Parm 2 is Warehouse Code not Blank
 OR PAR.USR_CDE_Parm_2 <> *BLANK;

 // OR PAR.USR CDE Parm 3 is Warehouse Code not Blank
 OR PAR.USR_CDE_Parm_3 <> *BLANK;

 // OR PAR.USR CDE Parm 4 is Warehouse Code not Blank
 OR PAR.USR_CDE_Parm_4 <> *BLANK;

 // OR PAR.USR CDE Parm 5 is Warehouse Code not Blank
 OR PAR.USR_CDE_Parm_5 <> *BLANK;

 // OR PAR.USR CDE Parm 6 is Warehouse Code not Blank
 OR PAR.USR_CDE_Parm_6 <> *BLANK;

 // OR PAR.USR CDE Parm 7 is Warehouse Code not Blank
 OR PAR.USR_CDE_Parm_7 <> *BLANK;

 // OR PAR.USR CDE Parm 8 is Warehouse Code not Blank
 OR PAR.USR_CDE_Parm_8 <> *BLANK;

 // OR PAR.USR CDE Parm 9 is Warehouse Code not Blank
 OR PAR.USR_CDE_Parm_9 <> *BLANK;

 // WRK.Warehouse Found = CND.Warehouse Found
 WRK.Warehouse_Found = 'Y';

 ENDIF;

 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?** Select load company if entered
 CASE;

 // IF PAR.Company Number is greater than zero
 IF PAR.Company_Number > *ZERO;

 CASE;

 // IF DB1.Company Number NE PAR.Company Number
 IF DB1.Company_Number <> PAR.Company_Number;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?** Select Load Type
 CASE;

 // IF PAR.Load Type is Bulk or Regular
 IF PAR.Load_Type = 'B'/'R';

 CASE;

 // IF DB1.Load Type NE PAR.Load Type
 IF DB1.Load_Type <> PAR.Load_Type;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?** Select Load Status, if entered
 CASE;

 // IF PAR.Load Status is All but Blank
 IF PAR.Load_Status = 'C'/'E'/'I'/'L'/'S'/'U';

 CASE;

 // IF DB1.Load Status NE PAR.Load Status
 IF DB1.Load_Status <> PAR.Load_Status;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?** This is the program that does all the work and writes the WF record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(RTV Load List Download RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1901556;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Order_Company_Number_Usr);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Warehouse_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  //?** Select Warehouse, if entered
  CASE;

  // IF PAR.USR Warehouse Code is Not Blanks
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  //?Whse 1
  CASE;

  // IF WRK.Warehouse Code EQ PAR.USR Warehouse Code
  IF WRK.Warehouse_Code = PAR.USR_Warehouse_Code;

  // AND PAR.USR Warehouse Code is Warehouse Code not Blank
  AND PAR.USR_Warehouse_Code <> *BLANK;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  ENDIF;

  //?Whse 2
  CASE;

  // IF WRK.Warehouse Code EQ PAR.USR CDE Parm 1
  IF WRK.Warehouse_Code = PAR.USR_CDE_Parm_1;

  // AND PAR.USR CDE Parm 1 is Warehouse Code not Blank
  AND PAR.USR_CDE_Parm_1 <> *BLANK;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  ENDIF;

  //?Whse 3
  CASE;

  // IF WRK.Warehouse Code EQ PAR.USR CDE Parm 2
  IF WRK.Warehouse_Code = PAR.USR_CDE_Parm_2;

  // AND PAR.USR CDE Parm 2 is Warehouse Code not Blank
  AND PAR.USR_CDE_Parm_2 <> *BLANK;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  ENDIF;

  //?Whse 4
  CASE;

  // IF WRK.Warehouse Code EQ PAR.USR CDE Parm 3
  IF WRK.Warehouse_Code = PAR.USR_CDE_Parm_3;

  // AND PAR.USR CDE Parm 3 is Warehouse Code not Blank
  AND PAR.USR_CDE_Parm_3 <> *BLANK;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  ENDIF;

  //?Whse 5
  CASE;

  // IF WRK.Warehouse Code EQ PAR.USR CDE Parm 4
  IF WRK.Warehouse_Code = PAR.USR_CDE_Parm_4;

  // AND PAR.USR CDE Parm 4 is Warehouse Code not Blank
  AND PAR.USR_CDE_Parm_4 <> *BLANK;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  ENDIF;

  //?Whse 6
  CASE;

  // IF WRK.Warehouse Code EQ PAR.USR CDE Parm 5
  IF WRK.Warehouse_Code = PAR.USR_CDE_Parm_5;

  // AND PAR.USR CDE Parm 5 is Warehouse Code not Blank
  AND PAR.USR_CDE_Parm_5 <> *BLANK;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  ENDIF;

  //?Whse 7
  CASE;

  // IF WRK.Warehouse Code EQ PAR.USR CDE Parm 6
  IF WRK.Warehouse_Code = PAR.USR_CDE_Parm_6;

  // AND PAR.USR CDE Parm 6 is Warehouse Code not Blank
  AND PAR.USR_CDE_Parm_6 <> *BLANK;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  ENDIF;

  //?Whse 8
  CASE;

  // IF WRK.Warehouse Code EQ PAR.USR CDE Parm 7
  IF WRK.Warehouse_Code = PAR.USR_CDE_Parm_7;

  // AND PAR.USR CDE Parm 7 is Warehouse Code not Blank
  AND PAR.USR_CDE_Parm_7 <> *BLANK;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  ENDIF;

  //?Whse 9
  CASE;

  // IF WRK.Warehouse Code EQ PAR.USR CDE Parm 8
  IF WRK.Warehouse_Code = PAR.USR_CDE_Parm_8;

  // AND PAR.USR CDE Parm 8 is Warehouse Code not Blank
  AND PAR.USR_CDE_Parm_8 <> *BLANK;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  ENDIF;

  //?Whse 10
  CASE;

  // IF WRK.Warehouse Code EQ PAR.USR CDE Parm 9
  IF WRK.Warehouse_Code = PAR.USR_CDE_Parm_9;

  // AND PAR.USR CDE Parm 9 is Warehouse Code not Blank
  AND PAR.USR_CDE_Parm_9 <> *BLANK;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  ENDIF;

  ENDIF;

  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(RTV Load Header All,Co RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1776342;
  PARAMETER(DB1.Load_ID);
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(LCL.LTL_Flag);
  PARAMETER(PAR.Load_Status);
  PARAMETER(LCL.Reefer_Temperature);
  PARAMETER(LCL.Seal_1);
  PARAMETER(LCL.Seal_2);
  PARAMETER(LCL.Seal_3);
  PARAMETER(LCL.Total_Load_Order_Weight);
  PARAMETER(LCL.Flat_Amount);
  PARAMETER(LCL.Allocate_Pounds_Miles);
  PARAMETER(LCL.Total_Stops);
  PARAMETER(PAR.Trailer_Id);
  PARAMETER(LCL.Transloader_Carrier_Code);
  PARAMETER(LCL.BOL_Time);
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Truck_Size);
  PARAMETER(LCL.Ld_Hdr_Ld_Dtl_Unused);
  PARAMETER(LCL.Rated_Freight);
  PARAMETER(LCL.Ship_Status);
  PARAMETER(PAR.Load_Type);
  PARAMETER(LCL.Number_Pallets_Received);
  PARAMETER(LCL.Number_Pallets_Loaded);
  PARAMETER(LCL.Load_Carrier_Pay_Amt);
  PARAMETER(LCL.Estimated_Arrival_Time);
  PARAMETER(LCL.Actual_Arrival_Date);
  PARAMETER(LCL.Actual_Arrival_Time);
  PARAMETER(LCL.Trailer_IN_Weight);
  PARAMETER(LCL.Trailer_OUT_Weight);
  PARAMETER(LCL.Actual_Departure_Date);
  PARAMETER(LCL.Departure_Time);
  PARAMETER(LCL.Schedule_Sequence_Number);
  PARAMETER(LCL.Product_Temperature);
  PARAMETER(LCL.Number_Spacers_Loaded);
  PARAMETER(LCL.Car_Veh_Initials);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(LCL.Recorder_ID);
  PARAMETER(PAR.Shipping_Method);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(LCL.Gross_Weight);
  PARAMETER(LCL.Carrier_Broker);
  PARAMETER(LCL.Export_Status);
  PARAMETER(LCL.Actual_Ship_Date);
  PARAMETER(LCL.On_Time_Y_N);
  PARAMETER(LCL.Truck_Ready_Date);
  PARAMETER(LCL.Truck_Ready_Time);
  PARAMETER(LCL.Spotted_Date);
  PARAMETER(LCL.Spotted_Time);
  PARAMETER(LCL.Load_Finished_Date);
  PARAMETER(LCL.Load_Finished_Time);
  PARAMETER(LCL.BOL_Complete_Date);
  PARAMETER(LCL.BOL_Complete_Time);
  PARAMETER(LCL.BOL_Received_Date);
  PARAMETER(LCL.BOL_Received_Time);
  PARAMETER(LCL.Truck_Departure_Date);
  PARAMETER(LCL.Truck_Departure_Time);
  PARAMETER(LCL.Adjusted_Departure_Date);
  PARAMETER(LCL.Adjusted_Departure_Time);
  PARAMETER(LCL.Shipping_Line);
  PARAMETER(LCL.Port_Delv_Terminal);
  PARAMETER(LCL.Vessel_Name);
  PARAMETER(LCL.Voyage);
  PARAMETER(LCL.Sail_Date);
  PARAMETER(LCL.Booking_Number);
  PARAMETER(LCL.Discharge_Port);
  PARAMETER(LCL.Arrival_Date);
  PARAMETER(LCL.Container_Number);
  PARAMETER(LCL.Date_In);
  PARAMETER(LCL.Time_In);
  PARAMETER(LCL.Date_Out);
  PARAMETER(LCL.Time_Out);
  PARAMETER(LCL.Load_Total_Freight);
  PARAMETER(LCL.Scheduled_Delivery_Date);
  PARAMETER(LCL.Scheduled_Delivery_Time);
  PARAMETER(LCL.LH_Unused_Sts);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Load_Acceptance_Flag);
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(LCL.On_Yard_Date);
  PARAMETER(LCL.On_Yard_Time);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  PARAMETER(PAR.Override_Total_Load_Miles);
  PARAMETER(LCL.Load_Actual_Freight);
  PARAMETER(LCL.LH_Held_Over_Rsn_Cmt);
  PARAMETER(LCL.Load_U_M);
  PARAMETER(LCL.LH_On_Time_Reason_Code);
  PARAMETER(LCL.LH_Held_Over_Reason);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?** Rtv 4 char SCAC code from Carrier name
  EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(PAR.SCAC_Code);
  PARAMETER(NLL.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  EXECUTE FUNCTION(RTV Ld List Downld FldsRT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1902109;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Ship_To_Address_Line_1);
  PARAMETER(LCL.Ship_To_Address_Line_2);
  PARAMETER(LCL.Ship_To_Address_Line_3);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(LCL.Ship_To_Zip_Postal_Code);
  PARAMETER(PAR.Customer_Purchase_Order_#);
  PARAMETER(LCL.Requested_Ship_Date);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Special_Instructions);
  PARAMETER(PAR.Special_Instructions_2);
  PARAMETER(LCL.Header_Status);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(LCL.Order_Value_Total);
  PARAMETER(PAR.Order_Weight_Total);
  PARAMETER(PAR.Credit_Hold);
  PARAMETER(PAR.Production_Hold);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  PARAMETER(PAR.Shipping_Method);
  PARAMETER(PAR.Export_Status);
  PARAMETER(PAR.Palletize);
  PARAMETER(PAR.Shrink_Wrap);
  PARAMETER(PAR.Slip_Sheet);
  PARAMETER(PAR.Load_Type);
  PARAMETER(LCL.Special_Comment_1);
  PARAMETER(LCL.Special_Comment_2);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(LCL.Order_Certification_Flag);
  PARAMETER(PAR.Transfer_in_Storage_Ind);
  PARAMETER(LCL.Export_Docs_Go_w_Driver);
  {
   //?USER: Processing if Data record not found

   // PGM.*Record selected = CND.*NO
   PGM.*Record_selected = 'N';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If Export replace address information with Sail Port information
  CASE;

  // IF PAR.Export Status is yes
  IF PAR.Export_Status = 'Y';

  EXECUTE FUNCTION(RTV OHE Ship fields    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814635;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Shipping_Line);
  PARAMETER(LCL.Port_Delv_Terminal);
  PARAMETER(LCL.OHE_City);
  PARAMETER(LCL.OHE_Vessel_Airline);
  PARAMETER(LCL.OHE_Voyage_Flight);
  PARAMETER(LCL.OHE_Booking_Number);
  PARAMETER(LCL.OHE_Discharge_Port_Airprt);
  PARAMETER(LCL.OHE_Sail_Flight_Date);
  PARAMETER(LCL.OHE_Port_Cut_Date);
  PARAMETER(LCL.OHE_Arrival_Date);
  PARAMETER(LCL.OHE_Late_Delivery_Code);
  PARAMETER(LCL.OHE_Ship_Status);
  PARAMETER(LCL.OHE_Container_Number);
  PARAMETER(LCL.OHE_Comment_1);
  PARAMETER(LCL.OHE_Comment_2);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Port Delv Terminal is Entered
  IF LCL.Port_Delv_Terminal <> *BLANK;

  EXECUTE FUNCTION(RTV Shipping Line/PortsRT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1447742;
  PARAMETER(LCL.Shipping_Line);
  PARAMETER(LCL.Port_Delv_Terminal);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(LCL.Port_Address_Line_1);
  PARAMETER(LCL.Port_Address_Line_2);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(LCL.Port_Zip_Postal_Code);
  PARAMETER(LCL.Port_Phone_Number);
  PARAMETER(LCL.Port_Fax_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  ENDIF;

  ENDIF;

  //?S17054 DN 04/07/21-Count Cases as Boxes. Replaced function with
  //?  'RTV UM/Whs Code-Add CS RT'.
  EXECUTE FUNCTION(RTV UM/Whs Code-Add CS RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2196569;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(1);
  PARAMETER(1);
  PARAMETER(LCL.Warehouse_Code);
  PARAMETER(PAR.U_M_Base_Price);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   // LCL.Boxes Total Quantity = CON.*ZERO
   LCL.Boxes_Total_Quantity = *ZERO;

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: CON);

   QUIT;

   //?USER: Process Data record

   //?PF3280 -- add "Cases" to the case-stmt
   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   CASE;

   // IF DB1.U/M - Ordered is Combos
   IF DB1.U_M_Ordered = 'CB';

   // OR DB1.U/M - Ordered is EQ Boxes
   OR DB1.U_M_Ordered = 'BX';

   // OR DB1.U/M - Ordered is Mixed
   OR DB1.U_M_Ordered = 'MX';

   // OR DB1.U/M - Ordered is Cases
   OR DB1.U_M_Ordered = 'CS';

   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?S17054 DN 04/06/21-Beyond this point, changed all 'U/M - Ordered'
   //?  to reference LCL Context instead of DB1.
   //?S17054 DN 04/06/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.U/M - Ordered = DB1.U/M - Ordered
   LCL.U_M_Ordered = DB1.U_M_Ordered;

   CASE;

   // IF LCL.U/M - Ordered is Cases
   IF LCL.U_M_Ordered = 'CS';

   // LCL.U/M - Ordered = CND.EQ Boxes
   LCL.U_M_Ordered = 'BX';

   ENDIF;

   ENDIF;

   //?Sum for later check
   CASE;

   // IF LCL.U/M - Ordered is EQ Boxes
   IF LCL.U_M_Ordered = 'BX';

   // LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + DB1.Quantity Ordered
   LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + DB1.Quantity_Ordered;

   ENDIF;

   CASE;

   // IF PAR.USR Unit of Measure is *Blank
   IF PAR.USR_Unit_of_Measure = *BLANK;

   // PAR.USR Unit of Measure = LCL.U/M - Ordered
   PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
   IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.U/M - Ordered = CND.Mixed
   WRK.U_M_Ordered = 'MX';

   // PAR.USR Unit of Measure = WRK.U/M - Ordered
   PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   //?E2709 RMC 9/12/13  Classify as BX/CB - never MX
   CASE;

   // IF PAR.USR Unit of Measure is Mixed
   IF PAR.USR_Unit_of_Measure = 'MX';

   EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
   PARAMETER(DB1.Company_Number);
   PARAMETER('BOXLOAD');
   PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
   IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

   // PAR.USR Unit of Measure = CND.Combos
   PAR.USR_Unit_of_Measure = 'CB';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Unit of Measure = CND.Boxed
   PAR.USR_Unit_of_Measure = 'BX';

   ENDIF;

   ENDIF;

  }

  //?** Rtv pallet tare from load header, send into gross wt calcs E000261
  EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
  PARAMETER(DB1.Load_ID);
  PARAMETER(LCL.Pallets_Loaded);
  PARAMETER(LCL.Avg_Pallet_Tare);
  PARAMETER(LCL.Tot_Pallet_Tare);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Order Weight Total = CON.*ZERO
  PAR.Order_Weight_Total = *ZERO;

  // PAR.Quantity Shipped Total = CON.*ZERO
  PAR.Quantity_Shipped_Total = *ZERO;

  // Call program RTV Gross Wgt/Qty     XF.
  CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(1);
  PARAMETER(1);
  PARAMETER(PAR.Order_Weight_Total);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(LCL.Avg_Pallet_Tare);

  //?wrk.warehouse code instead of par.ship from warehouse
  EXECUTE FUNCTION(CRT WF Load List Data  CR) TYPE(CRTOBJ) FILE(PMEGCPP)          AC1901518;
  PARAMETER(WRK.Company_Number);
  PARAMETER(WRK.Warehouse_Code);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Stop_Drop);
  PARAMETER(PAR.Shipping_Method);
  PARAMETER(PAR.SCAC_Code);
  PARAMETER(PAR.Trailer_Id);
  PARAMETER(PAR.Load_Type);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Override_Total_Load_Miles);
  PARAMETER(PAR.Order_Weight_Total);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  PARAMETER(PAR.U_M_Base_Price);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Slip_Sheet);
  PARAMETER(PAR.Shrink_Wrap);
  PARAMETER(PAR.Palletize);
  PARAMETER(PAR.Transfer_in_Storage_Ind);
  PARAMETER(PAR.Credit_Hold);
  PARAMETER(PAR.Production_Hold);
  PARAMETER(PAR.Export_Status);
  PARAMETER(PAR.Customer_Purchase_Order_#);
  PARAMETER(PAR.Special_Instructions);
  PARAMETER(PAR.Special_Instructions_2);
  PARAMETER(PAR.Load_Status);
  PARAMETER(PAR.Load_Acceptance_Flag);
  PARAMETER(PAR.Invoice_Number);
  ENDIF;

 }

 ENDIF;

}


