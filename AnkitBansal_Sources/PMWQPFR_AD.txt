// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMWQPFR
// ?Date: 14.08.2025 Time: 12:05:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?***** Change Log and Comments
//?This function was copied from the prt customer accrual that
//?was built on the Sales history
//?All selection is being perform in the CRT WF Sales History
//?and this report will only print records that have been selected
//?06032013 Susan Mason - C2606 Accrual List
//?was not showing Negative Ship Weight if CM
//?USER: Record selection processing

//?all record selection is being perform when the work file
//?is created
//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

// 1PG.USR From Date = PAR.USR From Date
X1PG_USR_From_Date = PAR.USR_From_Date;

// 1PG.USR To Date = PAR.USR To Date
X1PG_USR_To_Date = PAR.USR_To_Date;

// 1PG.Accrual Code = PAR.Item Type Code
X1PG_Accrual_Code = PAR.Item_Type_Code;

// 1PG.Accrual Type = PAR.Quality Level
X1PG_Accrual_Type = PAR.Quality_Level;

// 1PG.Report Type = PAR.Report Type USR
X1PG_Report_Type = PAR.Report_Type_USR;

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Report Type
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Report_Type);

// 1PG.Parent Customer = PAR.Parent Customer
X1PG_Parent_Customer = PAR.Parent_Customer;

// 1PG.A/R Customer = PAR.A/R Customer Number
X1PG_A_R_Customer = PAR.AR_Customer_Number;

// 1PG.Ship To Customer = PAR.Ship To Customer
X1PG_Ship_To_Customer = PAR.Ship_To_Customer;

// 1PG.Ledger Accrual (Y/N) = PAR.Status - Y or N
X1PG_Post_to_G_L_Y_N = PAR.Status_Y_or_N;

//?** Default Company Name to *ALL if co# is zero
CASE;

// IF 1PG.Company Number is Equal to zero
IF X1PG_Company_Number = *ZERO;

// 1PG.Company Name = CON.*All
X1PG_Company_Name = *All;

//?** Default Company Name to *ALL if co# is zero
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Default Parent Name  to *ALL if parent  Cust# is zero
CASE;

// IF 1PG.Parent Customer is not equal to zero
IF X1PG_Parent_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(X1PG_Parent_Customer);
PARAMETER(X1PG_Parent_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Default Parent Name  to *ALL if parent  Cust# is zero
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Parent Name = CON.*ALL
X1PG_Parent_Name = *ALL;

ENDIF;

//?** Default A/R Name     to *ALL if A/R Cust# is zero
CASE;

// IF 1PG.A/R Customer is not equal to zero
IF X1PG_A_R_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(X1PG_A_R_Customer);
PARAMETER(X1PG_AR_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Default A/R Name     to *ALL if A/R Cust# is zero
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.A/R Customer Name = CON.*ALL
X1PG_AR_Customer_Name = *ALL;

ENDIF;

//?** Default Ship To Name to *ALL if Ship To Cust# is zero
CASE;

// IF 1PG.Ship To Customer is not equal to zero
IF X1PG_Ship_To_Customer <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(X1PG_Ship_To_Customer);
PARAMETER(X1PG_Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Default Ship To Name to *ALL if Ship To Cust# is zero
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Ship To Name = CON.*ALL
X1PG_Ship_To_Name = *ALL;

ENDIF;

//?** Move blanks to accrual code descript if no accrual code
CASE;

// IF 1PG.Accrual Code is Entered
IF X1PG_Accrual_Code <> *BLANK;

EXECUTE FUNCTION(Accrual Description DRV) TYPE(DRVFLD)                          AC1706268;
PARAMETER(X1PG_Accrual_Description_DRV);
PARAMETER(X1PG_Accrual_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Accrual_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?** Move blanks to accrual code descript if no accrual code
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Accrual Description DRV = CON.*ALL
X1PG_Accrual_Description_DRV = *ALL;

ENDIF;

//?** Move *ALL to Accr Type descript if no accr type entered
CASE;

// IF 1PG.Accrual Type is *ALL values
IF X1PG_Accrual_Type = 'TF'/'CM'/'DA'/'CR'/'TX'/'BG'/'PR'/'IF'/'PF'/'PC'/'FA'/'SA'/'CC'            +
/'SF'/'WF'/'CF'/'LF'/'PD';

// 1PG.Accrual Description = Condition name of 1PG.Accrual Type
X1PG_Accrual_Description = RTVCND(X1PG_Accrual_Type);

//?** Move *ALL to Accr Type descript if no accr type entered
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Accrual Description = CON.*ALL
X1PG_Accrual_Description = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT WFSH Break Level 1 header format

// SUPPRESSED PRINT Actual Ship Date header format

// SUPPRESSED PRINT Load ID header format

// SUPPRESSED PRINT Order Number header format

// SUPPRESSED PRINT Accounting Company Number header format

//?USER: On print of detail format

EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(LCL.Billing_Activity_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Weight Billed = DB1.Weight Billed
LCL.Weight_Billed = DB1.Weight_Billed;

//?reverse sign if credit memo and positive
CASE;

// IF LCL.Billing Activity Type is Credit Memo
IF LCL.Billing_Activity_Type = '2';

// AND LCL.Weight Billed is Greater than zero
AND LCL.Weight_Billed > *ZERO;

// LCL.Weight Billed = CON.*ZERO - LCL.Weight Billed
LCL.Weight_Billed = *ZERO - LCL.Weight_Billed;

//?reverse sign if credit memo and positive
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

// CUR.Weight Billed = LCL.Weight Billed
CUR.Weight_Billed = LCL.Weight_Billed;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// CUR.Accrual Rate = DB1.Accrual Rate
CUR.Accrual_Rate = DB1.Accrual_Rate;

// WRK.Total Weight Ship    USR = WRK.Total Weight Ship    USR + LCL.Weight Billed
WRK.Total_Weight_Ship_USR = WRK.Total_Weight_Ship_USR + LCL.Weight_Billed;

// WRK.Invoice Order Value Tot = WRK.Invoice Order Value Tot + DB1.Extended Amount
WRK.Invoice_Order_Value_Tot = WRK.Invoice_Order_Value_Tot + DB1.Extended_Amount;

// WRK.Accrual Amount SUM = WRK.Accrual Amount SUM + DB1.Ledgrd Trd Fund Accrl Amt
WRK.Accrual_Amount_SUM = WRK.Accrual_Amount_SUM + DB1.Ledgrd_Trd_Fund_Accrl_Amt;

// WRK.Total Weight Ship2   USR = WRK.Total Weight Ship2   USR + LCL.Weight Billed
WRK.Total_Weight_Ship2_USR = WRK.Total_Weight_Ship2_USR + LCL.Weight_Billed;

// WRK.Invoice Order Value Tot2 = WRK.Invoice Order Value Tot2 + DB1.Extended Amount
WRK.Invoice_Order_Value_Tot2 = WRK.Invoice_Order_Value_Tot2 + DB1.Extended_Amount;

// WRK.Accrual Amount2 Usr = WRK.Accrual Amount2 Usr + DB1.Ledgrd Trd Fund Accrl Amt
WRK.Accrual_Amount2_Usr = WRK.Accrual_Amount2_Usr + DB1.Ledgrd_Trd_Fund_Accrl_Amt;

// WRK.Total Weight Ship3   USR = WRK.Total Weight Ship3   USR + LCL.Weight Billed
WRK.Total_Weight_Ship3_USR = WRK.Total_Weight_Ship3_USR + LCL.Weight_Billed;

// WRK.Invoice Order Value Tot3 = WRK.Invoice Order Value Tot3 + DB1.Extended Amount
WRK.Invoice_Order_Value_Tot3 = WRK.Invoice_Order_Value_Tot3 + DB1.Extended_Amount;

// WRK.Accrual Amount3 Usr = WRK.Accrual Amount3 Usr + DB1.Ledgrd Trd Fund Accrl Amt
WRK.Accrual_Amount3_Usr = WRK.Accrual_Amount3_Usr + DB1.Ledgrd_Trd_Fund_Accrl_Amt;

CASE;

// IF PAR.Report Type USR is Summary
IF PAR.Report_Type_USR = 'S';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Accounting Company Number totals format

CASE;

IF NEW Order_Number;
// CUR.Total Weight Ship3   USR = WRK.Total Weight Ship3   USR
CUR.Total_Weight_Ship3_USR = WRK.Total_Weight_Ship3_USR;

// CUR.Invoice Order Value Tot3 = WRK.Invoice Order Value Tot3
CUR.Invoice_Order_Value_Tot3 = WRK.Invoice_Order_Value_Tot3;

// CUR.Accrual Amount3 Usr = WRK.Accrual Amount3 Usr
CUR.Accrual_Amount3_Usr = WRK.Accrual_Amount3_Usr;

CASE;

// IF PAR.Report Type USR is Detail
IF PAR.Report_Type_USR = 'D';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Order Number totals format
PRINT Order Number totals format;

// WRK.Total Weight Ship3   USR = CON.*ZERO
WRK.Total_Weight_Ship3_USR = *ZERO;

// WRK.Invoice Order Value Tot3 = CON.*ZERO
WRK.Invoice_Order_Value_Tot3 = *ZERO;

// WRK.Accrual Amount3 Usr = CON.*ZERO
WRK.Accrual_Amount3_Usr = *ZERO;

ENDIF;

// SUPPRESSED PRINT Load ID totals format

// SUPPRESSED PRINT Actual Ship Date totals format

CASE;

IF NEW WF_SalesHst_Break_Level_1;
// CUR.WF Break Title Usr = Condition name of PAR.WF Sales History - BrkTyp
CUR.WF_Break_Title_Usr = RTVCND(PAR.WF_Sales_History_BrkTyp);

// CUR.Total Weight Ship    USR = WRK.Total Weight Ship    USR
CUR.Total_Weight_Ship_USR = WRK.Total_Weight_Ship_USR;

// CUR.Invoice Order Value Tot = WRK.Invoice Order Value Tot
CUR.Invoice_Order_Value_Tot = WRK.Invoice_Order_Value_Tot;

// CUR.Accrual Amount SUM = WRK.Accrual Amount SUM
CUR.Accrual_Amount_SUM = WRK.Accrual_Amount_SUM;

// WRK.Total Weight Ship    USR = CON.*ZERO
WRK.Total_Weight_Ship_USR = *ZERO;

// WRK.Invoice Order Value Tot = CON.*ZERO
WRK.Invoice_Order_Value_Tot = *ZERO;

// WRK.Accrual Amount SUM = CON.*ZERO
WRK.Accrual_Amount_SUM = *ZERO;

// Print WFSH Break Level 1 totals format
PRINT WFSH Break Level 1 totals format;

ENDIF;

//?USER: On print of final totals format

// CUR.Total Weight Ship2   USR = WRK.Total Weight Ship2   USR
CUR.Total_Weight_Ship2_USR = WRK.Total_Weight_Ship2_USR;

// CUR.Invoice Order Value Tot2 = WRK.Invoice Order Value Tot2
CUR.Invoice_Order_Value_Tot2 = WRK.Invoice_Order_Value_Tot2;

// CUR.Accrual Amount2 Usr = WRK.Accrual Amount2 Usr
CUR.Accrual_Amount2_Usr = WRK.Accrual_Amount2_Usr;

