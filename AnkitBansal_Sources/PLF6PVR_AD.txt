// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLF6PVR
// ?Date: 14.08.2025 Time: 02:54:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications
//?11/05/2020 ISE H16853 - Recompiled due to change in Buy Order Number
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// PAR.Display Field Usr = CND.*No
PAR.Display_Field_Usr = *NO;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.CC Company Number = WRK.CC Company Number
DTL.CC_Company_Number = WRK.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// DTL.Print Carcass Analysis Us = CND.No
DTL.Print_Carcass_Analysis_Us = 'N';

// DTL.Status Desc 2 USR = Condition name of DTL.Print Carcass Analysis Us
DTL.Status_Desc_2_USR = RTVCND(DTL.Print_Carcass_Analysis_Us);

// DTL.Ignore Fax Y/N = CND.Yes
DTL.Ignore_Fax_Y_N = 'Y';

// DTL.Ignore Email Y/N User = CND.Yes
DTL.Ignore_Email_Y_N_User = 'Y';

// DTL.Status 3 = CND.No
DTL.Status_3 = 'N';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?USER: Process command keys

//?Select Producer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.PD Producer Code
AND PGM.*Cursor_field = DTL.PD_Producer_Code;

// Call program Sel Producer          SR.
CALL PROGRAM(Sel Producer          SR) ('PKA1SRR');
PARAMETER(DTL.PD_Producer_Code);

ENDIF;

//?Display Date To
CASE;

// IF DTL.*CMD key is CF08
IF DTL.*CMD_key = '08';

CASE;

// IF PAR.Display Field Usr is *Yes
IF PAR.Display_Field_Usr = *YES;

// PAR.Display Field Usr = CND.*No
PAR.Display_Field_Usr = *NO;

// IF PAR.Display Field Usr is *No
IF PAR.Display_Field_Usr = *NO;

// PAR.Display Field Usr = CND.*Yes
PAR.Display_Field_Usr = *YES;

ENDIF;

ENDIF;

//?USER: Validate fields

CASE;

// IF DTL.TH Voucher Payment Date is Zero
IF DTL.TH_Voucher_Payment_Date = *ZERO;

// Send error message - 'Voucher payment date is required.'
ERROR(PRK0488);

QUIT;

ENDIF;

// DTL.Payment type Desc Usr 16 = Condition name of DTL.TH Payment Type
DTL.Payment_type_Desc_Usr_16 = RTVCND(DTL.TH_Payment_Type);

//?Producer
CASE;

// IF DTL.PD Producer Code is Blank
IF DTL.PD_Producer_Code = *BLANK;

// DTL.PD Name = CON.*BLANK
DTL.PD_Name = *BLANK;

//?Producer
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Producer Nm, Srce RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1162488;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
PARAMETER(WRK.SR_Source_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.PD Name EQ WRK.Blank USR
IF DTL.PD_Name = WRK.Blank_USR;

// Send error message - 'Producer not found.'
ERROR(PRK0009);

ENDIF;

//?If user restricted to Internal producers only
CASE;

// IF PAR.SR Type is Internal
IF PAR.SR_Type = 'I';

EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.SR Type is Internal
IF WRK.SR_Type = 'I';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Not authorized to the producer selected.'
ERROR(PRK0541);

ENDIF;

ENDIF;

ENDIF;

//?Validate Formtype - for Summary report only
CASE;

// IF DTL.@Status Detail/Summary is Summary or both
IF DTL.@Status_Detail_Summary = 'B'/'S';

//?Validate Formtype - for Summary report only
// IF *OTHERWISE
IF *OTHERWISE;

// *MO.VE             1183529*Bu = ilt. in functions
DTL.Form_Type_USR = WRK.Blank_USR;

// *MO.VE             1183529*Bu = ilt. in functions
DTL.Form_Type_Desc_USR = WRK.Blank_USR;

ENDIF;

//?Verify user selections against the tattoo header.
// WRK.@Status Carc NF Y/N   USR = CND.No
WRK.@Status_Carc_NF_Y_N_USR = *BLANK;

// WRK.@Status Srce NF Y/N   USR = CND.No
WRK.@Status_Srce_NF_Y_N_USR = 'N';

// WRK.@Status Prod NF Y/N   USR = CND.No
WRK.@Status_Prod_NF_Y_N_USR = 'N';

// WRK.@Status Ttt  NF Y/N   USR = CND.NO
WRK.@Status_Ttt_NF_Y_N_USR = 'N';

// WRK.@status Tt/S  NF      USR = CND.No
WRK.@status_Tt_S_NF_USR = 'N';

EXECUTE FUNCTION(Rtv Pmt Prt Crc Dt,Sm RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1153385;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Voucher_Payment_Date);
PARAMETER(DTL.SR_Type);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(WRK.@Status_Carc_NF_Y_N_USR);
PARAMETER(WRK.@Status_Ttt_NF_Y_N_USR);
PARAMETER(WRK.@Status_Prod_NF_Y_N_USR);
PARAMETER(WRK.@Status_Srce_NF_Y_N_USR);
PARAMETER(WRK.@status_Tt_S_NF_USR);
PARAMETER(PAR.SR_Type);
{
 //?USER: Initialize routine

 //?Set fields that need a match to Yes.  They'll be set to No if found.
 // PAR.@Status Carc NF Y/N   USR = CND.Yes
 PAR.@Status_Carc_NF_Y_N_USR = 'Y';

 CASE;

 // IF PAR.PD Producer Code NE WRK.Blank USR
 IF PAR.PD_Producer_Code <> WRK.Blank_USR;

 // WRK.@Status Prod NF Y/N   USR = CND.Yes
 WRK.@Status_Prod_NF_Y_N_USR = 'Y';

 ENDIF;

 CASE;

 // IF PAR.TH Source Type NE WRK.Blank USR
 IF PAR.TH_Source_Type <> WRK.Blank_USR;

 // WRK.@Status Srce NF Y/N   USR = CND.Yes
 WRK.@Status_Srce_NF_Y_N_USR = 'Y';

 ENDIF;

 CASE;

 // IF PAR.TH Tattoo Number NE WRK.Zero USR
 IF PAR.TH_Tattoo_Number <> WRK.Zero_USR;

 // WRK.@Status Ttt  NF Y/N   USR = CND.Yes
 WRK.@Status_Ttt_NF_Y_N_USR = 'Y';

 CASE;

 // IF PAR.SR Type NE WRK.Blank USR
 IF PAR.SR_Type <> WRK.Blank_USR;

 // WRK.@status Tt/S  NF      USR = CND.Yes
 WRK.@status_Tt_S_NF_USR = 'Y';

 ENDIF;

 ENDIF;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF PAR.TH Source Type NE WRK.Blank USR
 IF PAR.TH_Source_Type <> WRK.Blank_USR;

 CASE;

 // IF PAR.TH Source Type EQ DB1.TH Source Type
 IF PAR.TH_Source_Type = DB1.TH_Source_Type;

 // PAR.@Status Srce NF Y/N   USR = CND.No
 PAR.@Status_Srce_NF_Y_N_USR = 'N';

 // PAR.@Status Carc NF Y/N   USR = CND.No
 PAR.@Status_Carc_NF_Y_N_USR = *BLANK;

 QUIT;

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.PD Producer Code NE WRK.Blank USR
 IF PAR.PD_Producer_Code <> WRK.Blank_USR;

 CASE;

 // IF PAR.PD Producer Code EQ DB1.PD Producer Code
 IF PAR.PD_Producer_Code = DB1.PD_Producer_Code;

 // PAR.@Status Prod NF Y/N   USR = CND.No
 PAR.@Status_Prod_NF_Y_N_USR = 'N';

 // PAR.@Status Carc NF Y/N   USR = CND.No
 PAR.@Status_Carc_NF_Y_N_USR = *BLANK;

 QUIT;

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.TH Tattoo Number NE WRK.Zero USR
 IF PAR.TH_Tattoo_Number <> WRK.Zero_USR;

 CASE;

 // IF PAR.TH Tattoo Number EQ DB1.TH Tattoo Number
 IF PAR.TH_Tattoo_Number = DB1.TH_Tattoo_Number;

 // PAR.@Status Ttt  NF Y/N   USR = CND.NO
 PAR.@Status_Ttt_NF_Y_N_USR = 'N';

 // PAR.@Status Carc NF Y/N   USR = CND.No
 PAR.@Status_Carc_NF_Y_N_USR = *BLANK;

 CASE;

 // IF PAR.SR Type is Internal
 IF PAR.SR_Type = 'I';

 CASE;

 // IF DB1.TH Source Type is Internal
 IF DB1.TH_Source_Type = 'I';

 // PAR.@status Tt/S  NF      USR = CND.No
 PAR.@status_Tt_S_NF_USR = 'N';

 ENDIF;

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

 // PAR.@Status Carc NF Y/N   USR = CND.No
 PAR.@Status_Carc_NF_Y_N_USR = *BLANK;

}


CASE;

// IF WRK.@Status Srce NF Y/N   USR is Yes
IF WRK.@Status_Srce_NF_Y_N_USR = 'Y';

// Send error message - 'Carcass Detail not found for Source type selected.'
ERROR(PRK0485);

ENDIF;

CASE;

// IF WRK.@Status Prod NF Y/N   USR is Yes
IF WRK.@Status_Prod_NF_Y_N_USR = 'Y';

// Send error message - 'Carcass Detail not found for Producer code selected.'
ERROR(PRK0486);

ENDIF;

CASE;

// IF WRK.@Status Ttt  NF Y/N   USR is Yes
IF WRK.@Status_Ttt_NF_Y_N_USR = 'Y';

// Send error message - 'Carcass Detail not found for Tattoo selected.'
ERROR(PRK0487);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.@status Tt/S  NF      USR is Yes
IF WRK.@status_Tt_S_NF_USR = 'Y';

// Send error message - 'Not authorized to the tattoo selected.'
ERROR(PRK0542);

ENDIF;

ENDIF;

CASE;

// IF WRK.@Status Carc NF Y/N   USR is Yes
IF WRK.@Status_Carc_NF_Y_N_USR = 'Y';

// Send error message - 'Carcass Detail not found for voucher payment date selected.'
ERROR(PRK0484);

ENDIF;

//?CALC: Screen function fields

// DTL.Int/External Desc Usr = Condition name of DTL.SR Type
DTL.Int_External_Desc_Usr = RTVCND(DTL.SR_Type);

// DTL.Status Desc USR = Condition name of DTL.@Status Detail/Summary
DTL.Status_Desc_USR = RTVCND(DTL.@Status_Detail_Summary);

// DTL.Form Type Desc        USR = Condition name of DTL.Form Type             USR
DTL.Form_Type_Desc_USR = RTVCND(DTL.Form_Type_USR);

// DTL.Status Desc 2 USR = Condition name of DTL.Print Carcass Analysis Us
DTL.Status_Desc_2_USR = RTVCND(DTL.Print_Carcass_Analysis_Us);

//?USER: User defined action

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Print Carcass Summ,Detail');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Company Number Alpha Usr = CVTVAR(DTL.CC Company Number)
WRK.Company_Number_Alpha_Usr = CVTVAR(DTL.CC_Company_Number);

// WRK.Tattoo Nbr Alpha Usr = CVTVAR(DTL.TH Tattoo Number)
WRK.Tattoo_Nbr_Alpha_Usr = CVTVAR(DTL.TH_Tattoo_Number);

// WRK.Date Alpha USR = CVTVAR(DTL.TH Voucher Payment Date)
WRK.Date_Alpha_USR = CVTVAR(DTL.TH_Voucher_Payment_Date);

// WRK.Ignore Fax Y/N = CND.Yes
WRK.Ignore_Fax_Y_N = 'Y';

// WRK.Ignore Email Y/N User = CND.Yes
WRK.Ignore_Email_Y_N_User = 'Y';

//?Disregard the fax request on this submit.  Print only.
DO;

// PAR.Date From USR = DTL.TH Voucher Payment Date
PAR.Date_From_USR = DTL.TH_Voucher_Payment_Date;

//?Date To   USR
CASE;

// IF DTL.Date To   USR EQ WRK.Zero USR
IF DTL.Date_To_USR = WRK.Zero_USR;

// PAR.Date To   USR = DTL.TH Voucher Payment Date
PAR.Date_To_USR = DTL.TH_Voucher_Payment_Date;

//?Date To   USR
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Date To   USR = DTL.Date To   USR
PAR.Date_To_USR = DTL.Date_To_USR;

ENDIF;

// DOW PAR.Date From USR LE PAR.Date To   USR
DOW PAR.Date_From_USR <= PAR.Date_To_USR;

// WRK.Date Alpha USR = CVTVAR(PAR.Date From USR)
WRK.Date_Alpha_USR = CVTVAR(PAR.Date_From_USR);

// PAR.Job Name = CONCAT(CON.CRC,WRK.Date Alpha USR,CON.*ZERO)
PAR.Job_Name = 'CRC' + WRK.Date_Alpha_USR (*ZERO);

// Execute command - 'SBM Prt Sel Crc Sum,Dtl'
EXECUTE COMMAND(PRK0563);
PARAMETER(WRK.Company_Number_Alpha_Usr);
PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.SR_Type);
PARAMETER(DTL.@Status_Detail_Summary);
PARAMETER(DTL.TH_Payment_Type);
PARAMETER(DTL.Form_Type_USR);
PARAMETER(DTL.Print_Carcass_Analysis_Us);
PARAMETER(WRK.Ignore_Fax_Y_N);
PARAMETER(DTL.Oms_System_Value_Alpha);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Job_Name);
PARAMETER(DTL.Status_3);
PARAMETER(WRK.Ignore_Email_Y_N_User);

// PAR.Date From USR = PAR.Date From USR + CON.1 *DAYS
PAR.Date_From_USR = DATEINCR(PAR.Date_From_USR 1 'DY' 1111111 'NONE' 'N' 1);

ENDDO;

ENDDO;

//?Submit again to FAX if ignore is NO or Email if ignore is no
CASE;

// IF DTL.Ignore Fax Y/N is No
IF DTL.Ignore_Fax_Y_N = 'N';

// OR DTL.Ignore Email Y/N User is No
OR DTL.Ignore_Email_Y_N_User = 'N';

// Execute command - 'SBM Prt Sel Crc Sum,Dtl'
EXECUTE COMMAND(PRK0563);
PARAMETER(WRK.Company_Number_Alpha_Usr);
PARAMETER(WRK.Tattoo_Nbr_Alpha_Usr);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.SR_Type);
PARAMETER(DTL.@Status_Detail_Summary);
PARAMETER(DTL.TH_Payment_Type);
PARAMETER(DTL.Form_Type_USR);
PARAMETER(DTL.Print_Carcass_Analysis_Us);
PARAMETER(DTL.Ignore_Fax_Y_N);
PARAMETER(DTL.Oms_System_Value_Alpha);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('FAXCRSDTL');
PARAMETER(DTL.Status_3);
PARAMETER(DTL.Ignore_Email_Y_N_User);

ENDIF;

//?Initialize for Repeat Prompt.
CASE;

// IF PAR.SR Type is Internal
IF PAR.SR_Type = 'I';

//?Initialize for Repeat Prompt.
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.SR Type = WRK.Blank USR
DTL.SR_Type = WRK.Blank_USR;

// DTL.Int/External Desc Usr = WRK.Blank USR
DTL.Int_External_Desc_Usr = WRK.Blank_USR;

ENDIF;

// DTL.PD Producer Code = WRK.Blank USR
DTL.PD_Producer_Code = WRK.Blank_USR;

// DTL.PD Name = WRK.Blank USR
DTL.PD_Name = WRK.Blank_USR;

// DTL.TH Tattoo Number = CON.*ZERO
DTL.TH_Tattoo_Number = *ZERO;

// DTL.TH Payment Type = WRK.Blank Usr 1 fld Usr
DTL.TH_Payment_Type = WRK.Blank_Usr_1_fld_Usr;

// DTL.Date To   USR = CON.*ZERO
DTL.Date_To_USR = *ZERO;

ENDIF;

