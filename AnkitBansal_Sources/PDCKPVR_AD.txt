// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDCKPVR
// ?Date: 14.08.2025 Time: 03:31:15
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log and Comments
DO;

//?*****
//?RMC 9/18/19 T15460 HPB - get back overlay from CDD doc dft, pass to
//? PDA3PCL to use on override for pmo7pf$
//?*****
//?DN  08/06/2019 R15161 - Export Load AS400 Updates
//?- DBF Change on Order Header Extsn (PMAMREP) File. Changed:
//?  OHE Voyage/Flight from 5.0 to 15A.
//?  OHE Booking Number from 12A to 15A.
//?  Added: OHE Genset Number 15A.
//?- Recompiled only.
//?*****
//?RMC 7/21/2016 E4119 TMS - write load trigger for chg in seals, trailer
//? write order trigger for all orders in load in LH chgobj  8.09.16
//?*****
//?RMC 6/22/2012 E2079  HPB Print 2nd bol if MK cust only, not for 3rd pty sl
//?*****
//?RMC 5/21/2012 E2117  Added EXport USDA Approved sts for update
//?*****
//?RMC 4/27/2011 E01515 HPB Only - use acctng co when rtv overlay nm
//?*****
//?** 05/11/2010 LJB E000752
//?** Seal Numbers are now 8 bytes and can contain characters.
//?** Change to stop converting them to numeric prior to displaying.
//?** Change the Display length to 8. Comment out text for unused field.
//?*****
//?** S00299 LJB 06/18/2008
//?** This program is replacing the Shipping Method on the Load
//?** Header. Commented the code in the Validation routine, changed
//?** it to only replace the 1st letter in the Update section.
//?*****
//?** FP1110 RMC 04/11/2008
//?** If Company Org is "H"igh Plains,  output prod temp which is temp
//?** loadout. they have to unship and reship if this isnt right
//?*****
//?** FP1110 RMC 02/29/2008
//?** If Company Org is "H"igh Plains,  display "Transloading Station"
//?** entry field. if fuel is taken to a transloading stn then
//?** loaded on a rail car, enter the station location -store in Load Dtl
//?*****
//?** FP1110 RMC 12/19/2007
//?** If Company Org is "H"igh Plains,  determine which BOL type to
//?** use based on the Warehouse.
//?**  If the Warehouse requires meter readings use "BL" else
//?**  use "BY" which is the BOL for By Products
//?*****
//?** DLY029 TCJ 09/26/2007
//?** Make Pallets Loaded, Tot Pallet Tare, and Trailer Number
//?** optional for Dailys
//?*****
//?** DLY029 RMC 09/05/2007
//?** Retrieve Company Value TRFYRDMGT to determine if Trailer Id is req
//?*****
//?** DLY029 LJB 06/05/2007
//?** Retrieve CDD Type, Dept, and overlay name from Company
//?** Document Defaults file and pass to the submit CL program.
//?*****
//?** FP11014 LJB 04/25/2007
//?** Prompt of status fields was required in several places to get
//?** Synon to recognize the field due to a definition change at some
//?** time in the past.
//?*****
//?05/11/04 SLM PKTR01 Multi-Company - Order Header TRG Remove Co
//?                                    from Logical View
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.Record Found USR = CND.Record Not Found
LCL.Record_Found_USR = 'N';

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Load screen

//?Load Screen Fields
DO;

MOVE *ALL (To: DTL From: PAR);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Trailer ID USR = PAR.Trailer Id
DTL.Trailer_ID_USR = PAR.Trailer_Id;

//?** Truncate Seal#s to 8 characters                    E000752
// DTL.Seal 1 USR Alpha = PAR.Seal 1
DTL.Seal_1_USR_Alpha = PAR.Seal_1;

//?** default zeros to blanks
CASE;

// IF DTL.Seal 1 USR Alpha is ALL ZEROS
IF DTL.Seal_1_USR_Alpha = '0000000';

// DTL.Seal 1 USR Alpha = CON.*BLANK
DTL.Seal_1_USR_Alpha = *BLANK;

ENDIF;

// DTL.Seal 2 USR Alpha = PAR.Seal 2
DTL.Seal_2_USR_Alpha = PAR.Seal_2;

//?** default zeros to blanks
CASE;

// IF DTL.Seal 2 USR Alpha is ALL ZEROS
IF DTL.Seal_2_USR_Alpha = '0000000';

// DTL.Seal 2 USR Alpha = CON.*BLANK
DTL.Seal_2_USR_Alpha = *BLANK;

ENDIF;

// DTL.Seal 3 USR Alpha = PAR.Seal 3
DTL.Seal_3_USR_Alpha = PAR.Seal_3;

//?** default zeros to blanks
CASE;

// IF DTL.Seal 3 USR Alpha is ALL ZEROS
IF DTL.Seal_3_USR_Alpha = '0000000';

// DTL.Seal 3 USR Alpha = CON.*BLANK
DTL.Seal_3_USR_Alpha = *BLANK;

ENDIF;

// DTL.Export Status = PAR.Export Status
DTL.Export_Status = PAR.Export_Status;

// DTL.Export Load USDA-OK = PAR.Export Load USDA-OK
DTL.Export_Load_USDA_OK = PAR.Export_Load_USDA_OK;

// DTL.Pallets Loaded USR = DTL.Number Pallets Loaded
DTL.Pallets_Loaded_USR = DTL.Number_Pallets_Loaded;

// DTL.Pallets Received USR = DTL.Number Pallets Received
DTL.Pallets_Received_USR = DTL.Number_Pallets_Received;

// DTL.Pallets Unserviced USR = DTL.Number Pallets Unserviced
DTL.Pallets_Unserviced_USR = DTL.Number_Spacers_Loaded;

// DTL.Collect/Prepaid USR = DTL.Shipping Method
DTL.Collect_Prepaid_USR = DTL.Shipping_Method;

// DTL.Condition Desc. 10 USR = Condition name of DTL.Shipping Method
DTL.Condition_Desc_10_USR = RTVCND(DTL.Shipping_Method);

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

//?** BOL Print Type is no longer used, don't populate the field E752
//?OMS336
//?FP1110 HPB Get transload stn       02/29/08 RMC
EXECUTE FUNCTION(Rtv Whs Pallet Tare   RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1592364;
PARAMETER(DTL.Load_ID);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER(DTL.Tot_Pallet_Tare);
PARAMETER(DTL.Number_Pallets_Loaded);
PARAMETER(DTL.Avg_Pallet_Tare);
PARAMETER(LCL.Record_Found_USR);
PARAMETER(DTL.HPB_Transload_Station);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.Record Found USR is Record Not Found
 IF PAR.Record_Found_USR = 'N';

 EXECUTE FUNCTION(Rtv Whs Pallet Tare   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1592365;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Number_Pallets_Loaded);
 PARAMETER(PAR.Tot_Pallet_Tare);
 PARAMETER(PAR.Avg_Pallet_Tare);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Warehouse Code NE PAR.USR Warehouse Code
  IF DB1.Warehouse_Code <> PAR.USR_Warehouse_Code;

  QUIT;

  ENDIF;

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

  ENDIF;

 }

 // PAR.HPB Transload Station = DB1.HPB Transload Station
 PAR.HPB_Transload_Station = DB1.HPB_Transload_Station;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


// PAR.HPB Transload Station = DTL.HPB Transload Station
PAR.HPB_Transload_Station = DTL.HPB_Transload_Station;

EXECUTE FUNCTION(Rtv Transload Stn Nm  RT) TYPE(RTVOBJ) FILE(PMDLREP)           AC1869609;
PARAMETER(DTL.HPB_Transload_Station);
PARAMETER(DTL.COA_Station_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Shipping Temp Code C/F = PAR.Shipping Temp C/F txt
DTL.Shipping_Temp_Code_C_F = PAR.Shipping_Temp_C_F_txt;

ENDDO;

CASE;

// IF PAR.Load Status is Invoiced
IF PAR.Load_Status = 'I';

// OR LCL.Company Organization is High Plains Biodiesel
OR LCL.Company_Organization = 'H';

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

ENDIF;

//?USER: Process command keys

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

//?USER: Validate fields

// DTL.Condition Desc. 10 USR = Condition name of DTL.Shipping Method
DTL.Condition_Desc_10_USR = RTVCND(DTL.Shipping_Method);

//?C=Celsius and F=Fahrenheit
CASE;

// IF LCL.Display Flag is Yes
IF LCL.Display_Flag = 'Y';

CASE;

// IF DTL.Reefer Temperature is Entered
IF DTL.Reefer_Temperature <> *ZERO;

// AND DTL.Shipping Temp Code C/F EQ WRK.Blank for 4           USR
AND DTL.Shipping_Temp_Code_C_F = WRK.Blank_for_4_USR;

// Send error message - 'Enter F for Fahrenheit or C for Celsius.'
ERROR(USR3139);
MSGPARM(DTL.Shipping_Temp_Code_C_F);

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(DTL.Company_Number);
PARAMETER('TRFYRDMGT');
PARAMETER(WRK.Status_Flag_1_Y_N);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?DLY029 RMC 09/05/07
CASE;

// IF WRK.Status Flag 1  Y/N is Yes
IF WRK.Status_Flag_1_Y_N = 'Y';

CASE;

// IF DTL.Trailer ID USR is Not Entered
IF DTL.Trailer_ID_USR = *BLANK;

// AND LCL.Company Organization is Seaboard
AND LCL.Company_Organization = 'S';

// Send error message - 'Trailer is required.'
ERROR(USR3795);
MSGPARM(DTL.Trailer_ID_USR);

ENDIF;

ENDIF;

//?FP1110 RMC 02/29/08
CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

//?Sel Transload Station
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.HPB Transload Station
IF PGM.*Cursor_field = DTL.HPB_Transload_Station;

// Call program Sel COA Transload Stn SL.
CALL PROGRAM(Sel COA Transload Stn SL) ('PMSHSRR');
PARAMETER(DTL.HPB_Transload_Station);

ENDIF;

ENDIF;

//?Val Transload Station
CASE;

// IF DTL.HPB Transload Station GT WRK.Blank for 4           USR
IF DTL.HPB_Transload_Station > WRK.Blank_for_4_USR;

EXECUTE FUNCTION(Rtv Transload Stn Nm  RT) TYPE(RTVOBJ) FILE(PMDLREP)           AC1869609;
PARAMETER(DTL.HPB_Transload_Station);
PARAMETER(DTL.COA_Station_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.COA Station Name is blanks
IF DTL.COA_Station_Name = *BLANK;

// Send error message - 'HPB Transloading Station not found.'
ERROR(USR3897);
MSGPARM(DTL.HPB_Transload_Station);

ENDIF;

ENDIF;

ENDIF;

//?USER: Validate relations

CASE;

// IF PAR.Load Status is Not Invoiced
IF PAR.Load_Status = 'C'/'E'/'L'/'S'/'U';

//?*OMS336* Verify Pallets Loaded and Total Pallet Tare are entered.
DO;

//?Validate only for Seaboard
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

// LCL.Yes/No Selection      USR = CND.No
LCL.Yes_No_Selection_USR = 'N';

CASE;

// IF DTL.Number Pallets Loaded is Greater than zero
IF DTL.Number_Pallets_Loaded > *ZERO;

CASE;

// IF DTL.Tot Pallet Tare is Not Entered
IF DTL.Tot_Pallet_Tare = *ZERO;

// LCL.Yes/No Selection      USR = CND.Yes
LCL.Yes_No_Selection_USR = 'Y';

ENDIF;

ENDIF;

CASE;

// IF LCL.Yes/No Selection      USR is Yes
IF LCL.Yes_No_Selection_USR = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.Number Pallets Loaded is Equal zero
IF DTL.Number_Pallets_Loaded = *ZERO;

CASE;

// IF DTL.Tot Pallet Tare is GT Zero
IF DTL.Tot_Pallet_Tare > *ZERO;

// LCL.Yes/No Selection      USR = CND.Yes
LCL.Yes_No_Selection_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?error msg
CASE;

// IF LCL.Yes/No Selection      USR is Yes
IF LCL.Yes_No_Selection_USR = 'Y';

// Send error message - 'Both Pallets Loaded and Total Pallet Tare must be entered.'
ERROR(USR2942);
MSGPARM(DTL.Tot_Pallet_Tare);
MSGPARM(DTL.Number_Pallets_Loaded);

ENDIF;

ENDIF;

ENDDO;

//?*OMS336* Verify Pallet/Tare Info entered for Combos
DO;

//?05/11/04 SLM PKTR01 Multi-Company - Function was changed
//?   to remove Company RST or Pos
EXECUTE FUNCTION(RTV Combo for P & T    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1585951;
PARAMETER(1);
PARAMETER(DTL.Load_ID);
PARAMETER(LCL.Palletize);
PARAMETER(LCL.U_M_Ordered);
PARAMETER(LCL.Palletize_USR);
{
 //?USER: Initialize routine

 //?05/11/04 SLM PKTR01 Multi-Company Order Header TFG
 //?                    Remove Co from Parms
 // PAR.U/M - Ordered = CON.*BLANK
 PAR.U_M_Ordered = *BLANK;

 //?RMC added 6-30-21
 // PAR.Palletize             USR = CND.blank
 PAR.Palletize_USR = *BLANK;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 //?RMC change par.palletize to BOTH .. was output - 6/30/21
 CASE;

 // IF PAR.U/M - Ordered is Mixed
 IF PAR.U_M_Ordered = 'MX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Palletize = DB1.Palletize
 PAR.Palletize = DB1.Palletize;

 EXECUTE FUNCTION(RTV Combo for P & T    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1585952;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(PAR.U_M_Ordered);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.U/M - Ordered is Not Entered
  IF PAR.U_M_Ordered = *BLANK;

  // PAR.U/M - Ordered = DB1.U/M - Ordered
  PAR.U_M_Ordered = DB1.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF DB1.U/M - Ordered EQ PAR.U/M - Ordered
  IF DB1.U_M_Ordered = PAR.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.U/M - Ordered = CND.Mixed
  PAR.U_M_Ordered = 'MX';

  QUIT;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?RMC after 6-30-21   check par.palletize
 CASE;

 // IF PAR.Palletize is no
 IF PAR.Palletize = 'N';

 // AND PAR.U/M - Ordered is Combos
 AND PAR.U_M_Ordered = 'CB';

 // PAR.Palletize             USR = CND.no
 PAR.Palletize_USR = 'N';

 //?RMC after 6-30-21   check par.palletize
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Pallet Flag/Combo  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1590207;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(PAR.Palletize_USR);
 {
  //?USER: Initialize routine

  // PAR.Palletize = CND.blank
  PAR.Palletize = *BLANK;

  //?USER: Process Data record

  //?RMC added not Cancelled check 6-30-21
  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  // AND DB1.Palletize is no
  AND DB1.Palletize = 'N';

  // PAR.Palletize = DB1.Palletize
  PAR.Palletize = DB1.Palletize;

  QUIT;

  ENDIF;

  ENDIF;

 }

 ENDIF;

}


//?***  Verifying that Combos are palletized.
CASE;

// IF DTL.Number Pallets Loaded is Zero
IF DTL.Number_Pallets_Loaded = *ZERO;

// AND DTL.Tot Pallet Tare is Not Entered
AND DTL.Tot_Pallet_Tare = *ZERO;

// AND LCL.Company Organization is Seaboard
AND LCL.Company_Organization = 'S';

//?U/M - Ordered is Combos or Mixed
CASE;

// IF LCL.U/M - Ordered is Combos
IF LCL.U_M_Ordered = 'CB';

// OR LCL.U/M - Ordered is Mixed
OR LCL.U_M_Ordered = 'MX';

CASE;

// IF LCL.Palletize             USR is no
IF LCL.Palletize_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pallet/Tare Info Required when Load contains Combos.'
ERROR(USR2943);
MSGPARM(DTL.Tot_Pallet_Tare);
MSGPARM(DTL.Number_Pallets_Loaded);

ENDIF;

ENDIF;

//?***  Verifying that Combos are palletized.
// IF *OTHERWISE
IF *OTHERWISE;

//?U/M - Ordered is Boxes
CASE;

// IF LCL.U/M - Ordered is EQ Boxes
IF LCL.U_M_Ordered = 'BX';

CASE;

// IF LCL.Palletize is no
IF LCL.Palletize = 'N';

// Send information message - 'Pallet/Tare Not Allowed when Load is boxes and Palletize Flag is set
MESSAGE(USR2944 *INFO);
MSGPARM(DTL.Tot_Pallet_Tare);
MSGPARM(DTL.Number_Pallets_Loaded);

ENDIF;

//?U/M - Ordered is Boxes
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.U/M - Ordered is Combos
IF LCL.U_M_Ordered = 'CB';

// AND LCL.Palletize             USR is no
AND LCL.Palletize_USR = 'N';

// Send information message - 'Pallet/Tare Info Not Allowed when Load is Combos and Pallet Flag is '
MESSAGE(USR2947 *INFO);
MSGPARM(DTL.Tot_Pallet_Tare);
MSGPARM(DTL.Number_Pallets_Loaded);

ENDIF;

ENDIF;

ENDIF;

ENDDO;

ENDIF;

//?E2117 5/21/12 RMC need to be able to maintain this for dailys exports
CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

// AND DTL.Export Load USDA-OK is No
AND ( DTL.Export_Load_USDA_OK = 'N';

// OR DTL.Export Load USDA-OK is Not Entered
OR DTL.Export_Load_USDA_OK = *BLANK );

// Send error message - 'BOL Print Invalid.  Load must be USDA approved.'
ERROR(USR3014);
MSGPARM(DTL.Export_Load_USDA_OK);

ENDIF;

//?USER: User defined action

CASE;

// IF PAR.Load Status is Not Invoiced
IF PAR.Load_Status = 'C'/'E'/'L'/'S'/'U';

//?Option 7 was taken to Recalc Scheduled Ship Date
CASE;

// IF PAR.USR Flag 1 is Yes
IF PAR.USR_Flag_1 = 'Y';

//?Calculate Scheduled Delivery Date
CASE;

// IF PAR.Total Load Miles EQ WRK.ZERO
IF PAR.Total_Load_Miles = WRK.ZERO;

//?update scheduled delivery date/time to be NOW
// DTL.Scheduled Delivery Date = JOB.*Job date
DTL.Scheduled_Delivery_Date = JOB.*Job_date;

// DTL.Scheduled Delivery Time = JOB.*Job time
DTL.Scheduled_Delivery_Time = JOB.*Job_time;

//?Calculate Scheduled Delivery Date
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(CLC Sched Delivery D/T IF) TYPE(EXCINTFUN)                     AC1456041;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Scheduled_Delivery_Date);
PARAMETER(DTL.Scheduled_Delivery_Time);
{
 //?Execute internal function

 // PAR.Scheduled Delivery Date = JOB.*Job date
 PAR.Scheduled_Delivery_Date = JOB.*Job_date;

 // PAR.Scheduled Delivery Time = JOB.*Job time
 PAR.Scheduled_Delivery_Time = JOB.*Job_time;

 EXECUTE FUNCTION(RTV 1st Stop Mile,Dlv  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1459457;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Miles_to_next_stop);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 //?requested delivery time is hh:mm, needs to be hh:mm:ss
 // PAR.Unused Time 2 = PAR.Requested Delivery Time * CON.100 *
 PAR.Deadline_Depart_Time_HDR = PAR.Requested_Delivery_Time * 100;

 EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
 PARAMETER(PAR.Miles_to_next_stop);
 PARAMETER(PAR.Hours_Required);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?get number of whole days + remaining hours
 //?Calculate # whole days + hours left
 CASE;

 // IF PAR.Hours Required is Less than 1 day
 IF PAR.Hours_Required < 24;

 // PAR.@Days 5 = CON.*ZERO
 PAR.@Days_5 = *ZERO;

 // PAR.USR Hours Remaining = PAR.Hours Required
 PAR.USR_Hours_Remaining = PAR.Hours_Required;

 //?Calculate # whole days + hours left
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.@Days 5 = PAR.Hours Required / CON.24 USR Hours Remaining
 PAR.@Days_5 = PAR.Hours_Required / 24 ,REMAINDER: PAR.USR_Hours_Remaining;

 ENDIF;

 //?Add # whole days to current date
 CASE;

 // IF PAR.@Days 5 EQ WRK.ZERO
 IF PAR.@Days_5 = WRK.ZERO;

 //?Add # whole days to current date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
 PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
 1111111 'NONE' 'N' 1);

 ENDIF;

 // WRK.Scheduled Delivery Time = CON.*ZERO + PAR.USR Hours Remaining *HOURS
 WRK.Scheduled_Delivery_Time = TIMEINCR(*ZERO PAR.USR_Hours_Remaining 'HR');

 // PAR.USR Hours Remaining = WRK.Scheduled Delivery Time *HOURS
 PAR.USR_Hours_Remaining = TIMEDTLS(WRK.Scheduled_Delivery_Time 'HR');

 //?Calculate scheduled delivery time; recalc date if past midnight
 CASE;

 // IF PAR.USR Hours Remaining is Not Zero
 IF PAR.USR_Hours_Remaining <> *ZERO;

 // PAR.Estimated Arrival Time = CON.240000 - PAR.Scheduled Delivery Time *HHMMSS
 PAR.Estimated_Arrival_Time = TIMELAPSED(240000 PAR.Scheduled_Delivery_Time 'HS');

 // PAR.USR Hours to Midnight = PAR.Estimated Arrival Time *HOURS
 PAR.USR_Hours_to_Midnight = TIMEDTLS(PAR.Estimated_Arrival_Time 'HR');

 // WRK.USR Period = PAR.Estimated Arrival Time *MINUTES
 WRK.USR_Period = TIMEDTLS(PAR.Estimated_Arrival_Time 'MN');

 // Synon (15,2) work field =       * calc minutes % hour
 PGM.*Synon_152_work_field = ( 60 - WRK.USR_Period ) / 60;

 // calc hours to midnight
 PAR.USR_Hours_to_Midnight = PAR.USR_Hours_to_Midnight + PGM.*Synon_152_work_field;

 //?Add to date if going past midnight
 CASE;

 // IF PAR.USR Hours to Midnight LT PAR.USR Hours Remaining
 IF PAR.USR_Hours_to_Midnight < PAR.USR_Hours_Remaining;

 // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + CON.1 *DAYS
 PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date 1 'DY' 1111111 'NONE'
 'N' 1);

 // PAR.USR Hours Remaining = PAR.USR Hours Remaining - PAR.USR Hours to Midnight
 PAR.USR_Hours_Remaining = PAR.USR_Hours_Remaining - PAR.USR_Hours_to_Midnight;

 // PAR.Scheduled Delivery Time = CON.*ZERO + PAR.USR Hours Remaining *HOURS
 PAR.Scheduled_Delivery_Time = TIMEINCR(*ZERO PAR.USR_Hours_Remaining 'HR');

 //?Add to date if going past midnight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time + PAR.USR Hours Remain
 PAR.Scheduled_Delivery_Time = TIMEINCR(PAR.Scheduled_Delivery_Time
 PAR.USR_Hours_Remaining 'HR');

 ENDIF;

 ENDIF;

 //?If sched delivery Date/Time < rqs. delivery date/time, use rqs.
 CASE;

 // IF PAR.Scheduled Delivery Date LT PAR.Requested Delivery Date
 IF PAR.Scheduled_Delivery_Date < PAR.Requested_Delivery_Date;

 // PAR.Scheduled Delivery Date = PAR.Requested Delivery Date
 PAR.Scheduled_Delivery_Date = PAR.Requested_Delivery_Date;

 // PAR.Scheduled Delivery Time = PAR.Unused Time 2
 PAR.Scheduled_Delivery_Time = PAR.Deadline_Depart_Time_HDR;

 //?If sched delivery Date/Time < rqs. delivery date/time, use rqs.
 // IF PAR.Scheduled Delivery Date EQ PAR.Requested Delivery Date
 IF PAR.Scheduled_Delivery_Date = PAR.Requested_Delivery_Date;

 // AND PAR.Scheduled Delivery Time LT PAR.Unused Time 2
 AND PAR.Scheduled_Delivery_Time < PAR.Deadline_Depart_Time_HDR;

 // PAR.Scheduled Delivery Date = PAR.Requested Delivery Date
 PAR.Scheduled_Delivery_Date = PAR.Requested_Delivery_Date;

 // PAR.Scheduled Delivery Time = PAR.Unused Time 2
 PAR.Scheduled_Delivery_Time = PAR.Deadline_Depart_Time_HDR;

 //?If sched delivery Date/Time < rqs. delivery date/time, use rqs.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?   use calculated scheduled delivery date/time
 ENDIF;

}


ENDIF;

ENDIF;

//?Load OM Load Header file fields prior to update
DO;

//?** Screen Seal fields were changed to 8 bytes.        E000752
// DTL.Seal 1 = DTL.Seal 1 USR Alpha
DTL.Seal_1 = DTL.Seal_1_USR_Alpha;

// DTL.Seal 2 = DTL.Seal 2 USR Alpha
DTL.Seal_2 = DTL.Seal_2_USR_Alpha;

// DTL.Seal 3 = DTL.Seal 3 USR Alpha
DTL.Seal_3 = DTL.Seal_3_USR_Alpha;

// DTL.Number Pallets Received = DTL.Pallets Received USR
DTL.Number_Pallets_Received = DTL.Pallets_Received_USR;

// DTL.Number Pallets Unserviced = DTL.Pallets Unserviced USR
DTL.Number_Spacers_Loaded = DTL.Pallets_Unserviced_USR;

//?** If Shipping Method is changed, update the Load Header  S00299
//?** If Shipping Method is changed to Collect
CASE;

// IF DTL.Collect/Prepaid USR is Collect
IF DTL.Collect_Prepaid_USR = 'C';

//?** if shipping method was prepaid truck, change to collect truck
CASE;

// IF DTL.Shipping Method is Prepaid Truck
IF DTL.Shipping_Method = 'PT';

// DTL.Shipping Method = CND.Collect Truck
DTL.Shipping_Method = 'CT';

ENDIF;

//?** if shipping method was prepaid rail, change to collect rail
CASE;

// IF DTL.Shipping Method is Prepaid Rail
IF DTL.Shipping_Method = 'PR';

// DTL.Shipping Method = CND.Collect Rail
DTL.Shipping_Method = 'CR';

ENDIF;

ENDIF;

//?** If Shipping Method is changed to Prepaid
CASE;

// IF DTL.Collect/Prepaid USR is Prepaid
IF DTL.Collect_Prepaid_USR = 'P';

//?** if shipping method was collect truck, change to prepaid truck
CASE;

// IF DTL.Shipping Method is Collect Truck
IF DTL.Shipping_Method = 'CT';

// DTL.Shipping Method = CND.Prepaid Truck
DTL.Shipping_Method = 'PT';

ENDIF;

//?** if shipping method was collect rail, change to prepaid rail
CASE;

// IF DTL.Shipping Method is Collect Rail
IF DTL.Shipping_Method = 'CR';

// DTL.Shipping Method = CND.Prepaid Rail
DTL.Shipping_Method = 'PR';

ENDIF;

ENDIF;

ENDDO;

//?*OMS336* Calculate Average Pallet Weight
CASE;

// IF DTL.Number Pallets Loaded is Greater than zero
IF DTL.Number_Pallets_Loaded > *ZERO;

// AND DTL.Tot Pallet Tare is GT Zero
AND DTL.Tot_Pallet_Tare > *ZERO;

// DTL.Avg Pallet Tare = DTL.Tot Pallet Tare / DTL.Number Pallets Loaded *Rounded
DTL.Avg_Pallet_Tare = DTL.Tot_Pallet_Tare / DTL.Number_Pallets_Loaded 'H';

//?*OMS336* Calculate Average Pallet Weight
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Avg Pallet Tare = CON.*ZERO
DTL.Avg_Pallet_Tare = *ZERO;

ENDIF;

// DTL.Shipping Temp C/F txt = DTL.Shipping Temp Code C/F
DTL.Shipping_Temp_C_F_txt = DTL.Shipping_Temp_Code_C_F;

EXECUTE FUNCTION(CHG Loads for B.O.L.   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1376924;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Reefer_Temperature);
PARAMETER(DTL.Seal_1);
PARAMETER(DTL.Seal_2);
PARAMETER(DTL.Seal_3);
PARAMETER(DTL.Trailer_ID_USR);
PARAMETER(DTL.Number_Pallets_Received);
PARAMETER(DTL.Number_Pallets_Loaded);
PARAMETER(DTL.Product_Temperature);
PARAMETER(DTL.Number_Spacers_Loaded);
PARAMETER(DTL.Car_Veh_Initials);
PARAMETER(DTL.Recorder_ID);
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.BOL_Complete_Date);
PARAMETER(DTL.BOL_Complete_Time);
PARAMETER(DTL.Scheduled_Delivery_Date);
PARAMETER(DTL.Scheduled_Delivery_Time);
PARAMETER(DTL.Avg_Pallet_Tare);
PARAMETER(DTL.Tot_Pallet_Tare);
PARAMETER(DTL.Export_Load_USDA_OK);
PARAMETER(DTL.Shipping_Temp_C_F_txt);
PARAMETER(PAR.EDI_Status_1);
PARAMETER(PAR.USR_Warehouse_Code);
{
 //?USER: Processing after Data read

 CASE;

 // IF DB1.MG Created Load is Yes
 IF DB1.MG_Created_Load = 'Y';

 //?If Seal 1,2,3, changes: Write TMS load trigger
 CASE;

 // IF PAR.Seal 1 NE DB1.Seal 1
 IF PAR.Seal_1 <> DB1.Seal_1;

 // OR PAR.Seal 2 NE DB1.Seal 2
 OR PAR.Seal_2 <> DB1.Seal_2;

 // OR PAR.Seal 3 NE DB1.Seal 3
 OR PAR.Seal_3 <> DB1.Seal_3;

 // OR PAR.Trailer Id NE DB1.Trailer Id
 OR PAR.Trailer_Id <> DB1.Trailer_Id;

 // LCL.Load Change Type = WRK.Blank for 12          USR
 LCL.Load_Change_Type = WRK.Blank_for_12_USR;

 // LCL.Load Change Type 2 = WRK.Blank for 12          USR
 LCL.Load_Change_Type_2 = WRK.Blank_for_12_USR;

 // LCL.Load Change Type 3 = WRK.Blank for 12          USR
 LCL.Load_Change_Type_3 = WRK.Blank_for_12_USR;

 // LCL.Load Change Type 4 = WRK.Blank for 12          USR
 LCL.Load_Change_Type_4 = WRK.Blank_for_12_USR;

 // LCL.Load Change Type 5 = WRK.Blank for 12          USR
 LCL.Load_Change_Type_5 = WRK.Blank_for_12_USR;

 CASE;

 // IF PAR.Trailer Id NE DB1.Trailer Id
 IF PAR.Trailer_Id <> DB1.Trailer_Id;

 // LCL.Load Change Type = CND.Trailer
 LCL.Load_Change_Type = 'TRAILR';

 ENDIF;

 CASE;

 // IF PAR.Seal 1 NE DB1.Seal 1
 IF PAR.Seal_1 <> DB1.Seal_1;

 // OR PAR.Seal 2 NE DB1.Seal 2
 OR PAR.Seal_2 <> DB1.Seal_2;

 // OR PAR.Seal 3 NE DB1.Seal 3
 OR PAR.Seal_3 <> DB1.Seal_3;

 CASE;

 // IF LCL.Load Change Type EQ WRK.Blank 6 USR
 IF LCL.Load_Change_Type = WRK.Blank_6_USR;

 // LCL.Load Change Type = CND.Export Seal 1
 LCL.Load_Change_Type = 'EXSEAL';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Load Change Type 2 = CND.Export Seal 1
 LCL.Load_Change_Type_2 = 'EXSEAL';

 ENDIF;

 ENDIF;

 // Call program Exc Crt TMS Load Trg  XF.
 CALL PROGRAM(Exc Crt TMS Load Trg  XF) ('PBXOXFR');
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.TMS_LH_Field_Chg_Text);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Load_Change_Type);
 PARAMETER(LCL.Load_Change_Type_2);
 PARAMETER(LCL.Load_Change_Type_3);
 PARAMETER(LCL.Load_Change_Type_4);
 PARAMETER(LCL.Load_Change_Type_5);

 ENDIF;

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Upd Whs Pallet Tare   RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1591448;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.Tot_Pallet_Tare);
 PARAMETER(PAR.Number_Pallets_Loaded);
 PARAMETER(PAR.Avg_Pallet_Tare);
 {
  //?USER: Initialize routine

  // LCL.Order Changed Y/N = CND.*NO
  LCL.Order_Changed_Y_N = *NO;

  //?USER: Process Data record

  EXECUTE FUNCTION(Upd Whs Pallet Tare   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1591444;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Number_Pallets_Loaded);
  PARAMETER(PAR.Tot_Pallet_Tare);
  PARAMETER(PAR.Avg_Pallet_Tare);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(LCL.Order_Changed_Y_N);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Warehouse Code NE PAR.USR Warehouse Code
   IF DB1.Warehouse_Code <> PAR.USR_Warehouse_Code;

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.Detail Line Status is Not cancelled
   IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

   EXECUTE FUNCTION(Chg Whs Pallet Tare   CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1591447;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Warehouse_Pallets_Loaded);
   PARAMETER(PAR.Warehouse_Pallet_Tare);
   PARAMETER(PAR.Warehouse_Avg_Pallet_Tare);
   // PAR.Order Changed Y/N = CND.*YES
   PAR.Order_Changed_Y_N = *YES;

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.Order Changed Y/N is *YES
  IF LCL.Order_Changed_Y_N = *YES;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Accum Pallet Info RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1592370;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Tot_Pallet_Tare);
 PARAMETER(DB1.Number_Pallets_Loaded);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Accum Pallet Info RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1592371;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Number_Pallets_Loaded);
  PARAMETER(PAR.Tot_Pallet_Tare);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Warehouse Pallets Loaded = PAR.Warehouse Pallets Loaded + DB1.Warehouse Pallets Loaded
   PAR.Warehouse_Pallets_Loaded = PAR.Warehouse_Pallets_Loaded
   + DB1.Warehouse_Pallets_Loaded;

   // PAR.Warehouse Pallet Tare = PAR.Warehouse Pallet Tare + DB1.Warehouse Pallet Tare
   PAR.Warehouse_Pallet_Tare = PAR.Warehouse_Pallet_Tare + DB1.Warehouse_Pallet_Tare;

  }

 }

 CASE;

 // IF DB1.Number Pallets Loaded is Greater than zero
 IF DB1.Number_Pallets_Loaded > *ZERO;

 // DB1.Avg Pallet Tare = DB1.Tot Pallet Tare / DB1.Number Pallets Loaded *Rounded
 DB1.Avg_Pallet_Tare = DB1.Tot_Pallet_Tare / DB1.Number_Pallets_Loaded 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // DB1.Avg Pallet Tare = CON.*ZERO
 DB1.Avg_Pallet_Tare = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?FP1100 RMC 02/29/08 If Transload Stn changed, update load dtls
CASE;

// IF DTL.HPB Transload Station NE PAR.HPB Transload Station
IF DTL.HPB_Transload_Station <> PAR.HPB_Transload_Station;

EXECUTE FUNCTION(RTV Chg HPB Trans Stn RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1869600;
PARAMETER(DTL.Load_ID);
PARAMETER(0);
PARAMETER(DTL.HPB_Transload_Station);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG HPB Transload Stn CH) TYPE(CHGOBJ) FILE(OMFLCPP)           AC1869601;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(PAR.HPB_Transload_Station);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

ENDIF;

//?** Retrieve CDD Type, Dept, and overlay name from Company
//?** Document Defaults file       06/05/2007 LJB DLY029
// PAR.PRT Description = CON.Bill of Lading
PAR.PRT_Description = 'Bill of Lading';

// LCL.CDD Type = CND.Bill of Lading
LCL.CDD_Type = 'BL';

// LCL.CDD Department Code = CND.Traffic
LCL.CDD_Department_Code = 'TRAFF';

// WRK.Unused Status USR = PAR.Unused Status USR
WRK.Unused_Status_USR = PAR.Unused_Status_USR;

// LCL.CDD Name of Overlay Back = CON.*BLANK
LCL.CDD_Name_of_Overlay_Back = *BLANK;

//?FT1110 - If Company Org is "H"igh Plains, get BOL type from whse
CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
PARAMETER(DTL.Ship_From_Warehouse);
PARAMETER(LCL.Production_Warehouse_Code);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?RMC 4/27/2011 E      HPB Only - use acctng co when rtv overlay nm
EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(DTL.Ship_From_Warehouse);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.WHS Req Meter Reading Shp is Yes
IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

// LCL.CDD Type = CND.Bill of Lading
LCL.CDD_Type = 'BL';

// WRK.Unused Status USR = CND.No
WRK.Unused_Status_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.CDD Type = CND.BOL for By Products
LCL.CDD_Type = 'BY';

ENDIF;

EXECUTE FUNCTION(RTV Co Document Dflts  RT) TYPE(RTVOBJ) FILE(PPAQREP)          AC1823355;
PARAMETER(LCL.Accounting_Company);
PARAMETER(LCL.CDD_Type);
PARAMETER('TRAFF');
PARAMETER(LCL.CDD_Name_of_Overlay);
PARAMETER(LCL.CDD_Program_Name);
PARAMETER(LCL.CDD_Printer_File_Name);
PARAMETER(NLL.CDD_Sender_Phone);
PARAMETER(NLL.CDD_Sender_Fax);
PARAMETER(LCL.Output_Queue);
PARAMETER(LCL.Hold_File);
PARAMETER(LCL.Save_File);
PARAMETER(LCL.Source_Drawer);
PARAMETER(LCL.Printer_Device_Type);
PARAMETER(LCL.Page_Length_2);
PARAMETER(LCL.Page_Width_2);
PARAMETER(LCL.Page_LPI);
PARAMETER(LCL.Page_CPI);
PARAMETER(LCL.Page_Overflow);
PARAMETER(LCL.Page_Rotation);
PARAMETER(NLL.CDD_Comment_1);
PARAMETER(NLL.CDD_Comment_2);
PARAMETER(NLL.CDD_Comment_3);
PARAMETER(NLL.CDD_Comment_4);
PARAMETER(NLL.CDD_Comment_5);
{
 //?USER: Initialize routine

 //?** Used by HPE in STR Hog Prcr & Eval Sys-HPE System
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?T15460 RMC 9.18.19 rtv back overlay for HPB only
EXECUTE FUNCTION(RTV Co Document Dflts  RT) TYPE(RTVOBJ) FILE(PPAQREP)          AC1823355;
PARAMETER(LCL.Accounting_Company);
PARAMETER('BK');
PARAMETER('TRAFF');
PARAMETER(LCL.CDD_Name_of_Overlay_Back);
PARAMETER(NLL.CDD_Program_Name);
PARAMETER(NLL.CDD_Printer_File_Name);
PARAMETER(NLL.CDD_Sender_Phone);
PARAMETER(NLL.CDD_Sender_Fax);
PARAMETER(NLL.Output_Queue);
PARAMETER(NLL.Hold_File);
PARAMETER(NLL.Save_File);
PARAMETER(NLL.Source_Drawer);
PARAMETER(NLL.Printer_Device_Type);
PARAMETER(NLL.Page_Length_2);
PARAMETER(NLL.Page_Width_2);
PARAMETER(NLL.Page_LPI);
PARAMETER(NLL.Page_CPI);
PARAMETER(NLL.Page_Overflow);
PARAMETER(NLL.Page_Rotation);
PARAMETER(NLL.CDD_Comment_1);
PARAMETER(NLL.CDD_Comment_2);
PARAMETER(NLL.CDD_Comment_3);
PARAMETER(NLL.CDD_Comment_4);
PARAMETER(NLL.CDD_Comment_5);
{
 //?USER: Initialize routine

 //?** Used by HPE in STR Hog Prcr & Eval Sys-HPE System
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program PRT Bill of Lading CL  UP.
CALL PROGRAM(PRT Bill of Lading CL  UP) ('PDA3PCL');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('OMS');
PARAMETER(PAR.PRT_Description);
PARAMETER(DTL.Load_ID);
PARAMETER(LCL.Accounting_Company);
PARAMETER(WRK.Unused_Status_USR);
PARAMETER(LCL.CDD_Type);
PARAMETER(LCL.CDD_Department_Code);
PARAMETER(LCL.CDD_Name_of_Overlay);
PARAMETER(LCL.CDD_Name_of_Overlay_Back);

//?FT1110 - If Company Org is "H"igh Plains, get BOL type from whse
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Co Document Dflts  RT) TYPE(RTVOBJ) FILE(PPAQREP)          AC1823355;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.CDD_Type);
PARAMETER('TRAFF');
PARAMETER(LCL.CDD_Name_of_Overlay);
PARAMETER(LCL.CDD_Program_Name);
PARAMETER(LCL.CDD_Printer_File_Name);
PARAMETER(NLL.CDD_Sender_Phone);
PARAMETER(NLL.CDD_Sender_Fax);
PARAMETER(LCL.Output_Queue);
PARAMETER(LCL.Hold_File);
PARAMETER(LCL.Save_File);
PARAMETER(LCL.Source_Drawer);
PARAMETER(LCL.Printer_Device_Type);
PARAMETER(LCL.Page_Length_2);
PARAMETER(LCL.Page_Width_2);
PARAMETER(LCL.Page_LPI);
PARAMETER(LCL.Page_CPI);
PARAMETER(LCL.Page_Overflow);
PARAMETER(LCL.Page_Rotation);
PARAMETER(NLL.CDD_Comment_1);
PARAMETER(NLL.CDD_Comment_2);
PARAMETER(NLL.CDD_Comment_3);
PARAMETER(NLL.CDD_Comment_4);
PARAMETER(NLL.CDD_Comment_5);
{
 //?USER: Initialize routine

 //?** Used by HPE in STR Hog Prcr & Eval Sys-HPE System
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program PRT Bill of Lading CL  UP.
CALL PROGRAM(PRT Bill of Lading CL  UP) ('PDA3PCL');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('OMS');
PARAMETER(PAR.PRT_Description);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
PARAMETER(WRK.Unused_Status_USR);
PARAMETER(LCL.CDD_Type);
PARAMETER(LCL.CDD_Department_Code);
PARAMETER(LCL.CDD_Name_of_Overlay);
PARAMETER(*BLANK);

ENDIF;

CASE;

// IF WRK.Return Code Usr is *User Quit Requested
IF WRK.Return_Code_Usr = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Load Status is Not Invoiced
IF PAR.Load_Status = 'C'/'E'/'L'/'S'/'U';

// PAR.EDI Status 1 = CND.Modified
PAR.EDI_Status_1 = 'M';

//?Only update BOL Complete Date/Time if the Load has been shipped
CASE;

// IF PAR.Load Status is Shipped
IF PAR.Load_Status = 'S';

// Call program RTV System Date/Time   UP.
CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
PARAMETER(DTL.BOL_Complete_Date);
PARAMETER(DTL.BOL_Complete_Time);

ENDIF;

EXECUTE FUNCTION(CHG BOL Printed        CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1463623;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.BOL_Complete_Date);
PARAMETER(DTL.BOL_Complete_Time);
PARAMETER(DTL.Scheduled_Delivery_Date);
PARAMETER(DTL.Scheduled_Delivery_Time);
PARAMETER(PAR.EDI_Status_1);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 CASE;

 // IF DB1.MG Created Load is Yes
 IF DB1.MG_Created_Load = 'Y';

 // Call program MG Crt Trgr per Load  XF.
 CALL PROGRAM(MG Crt Trgr per Load  XF) ('PBXJXFR');
 PARAMETER(DB1.Load_ID);

 ENDIF;

}


ENDIF;

// Send information message - 'Bill of Lading was printed.'
MESSAGE(USR1972 *INFO);

ENDIF;

//? FT1110 - If Company Org is "H"igh Plains, print 2nd bol IF:
CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

CASE;

// IF LCL.CDD Type is Bill of Lading
IF LCL.CDD_Type = 'BL';

// AND DTL.HPB Transload Station GT WRK.Blank for 4           USR
AND DTL.HPB_Transload_Station > WRK.Blank_for_4_USR;

EXECUTE FUNCTION(RTV First Order on LoadRT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1464005;
PARAMETER(DTL.Load_ID);
PARAMETER(LCL.Order_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


EXECUTE FUNCTION(RTV HPB Override typeRT) TYPE(RTVOBJ) FILE(PMAMREP)            AC2046780;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.OHE_Override_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.OHE Override Type Code is No
IF LCL.OHE_Override_Type_Code = *BLANK;

EXECUTE FUNCTION(RTV Ship Cust,Ordr Typ RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1790150;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Order_Number);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(LCL.Ship_To_Customer);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Type Code by Cust  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1625687;
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Type Code = LCL.OHE Override Type Code
LCL.Type_Code = LCL.OHE_Override_Type_Code;

ENDIF;

//?E2079 6/22/12 RMC  Print 2nd bol for MK custs only
CASE;

// IF LCL.Type Code is Marketing
IF LCL.Type_Code = 'MK';

//?Move "Y" to export sts and pass to BOL print to print the
//?HPB Transloading BOL
// PAR.PRT Description = CON.Bill of Lading-Transload
PAR.PRT_Description = 'Bill of Lading-Transload';

// Call program PRT Bill of Lading CL  UP.
CALL PROGRAM(PRT Bill of Lading CL  UP) ('PDA3PCL');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('OMS');
PARAMETER(PAR.PRT_Description);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Company_Number);
PARAMETER('Y');
PARAMETER(LCL.CDD_Type);
PARAMETER(LCL.CDD_Department_Code);
PARAMETER(LCL.CDD_Name_of_Overlay);
PARAMETER(LCL.CDD_Name_of_Overlay_Back);

CASE;

// IF WRK.Return Code Usr is *User Quit Requested
IF WRK.Return_Code_Usr = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Bill of Lading was printed.'
MESSAGE(USR1972 *INFO);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

