// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKFOETR
// ?Date: 14.08.2025 Time: 02:49:16
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize subfile record (new record)

// RCD.RS Record Status = CND.Active
RCD.RS_Record_Status = 'A';

//?USER: Validate header non-key fields

CASE;

// IF CTL.PSS Split Percent SUM is Not 100 %
IF CTL.PSS_Split_Percent_SUM <> 100;

// AND CTL.PSS Split Percent SUM NE WRK.Zero USR
AND CTL.PSS_Split_Percent_SUM <> WRK.Zero_USR;

// Send error message - 'Producer Std Split must total 100.00%.'
ERROR(PRK0190);

ENDIF;

//?USER: Validate subfile record fields

CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.BOS Split Producer Code
IF PGM.*Cursor_field = RCD.BOS_Split_Producer_Code;

// Call program Sel Producer          SR.
CALL PROGRAM(Sel Producer          SR) ('PKA1SRR');
PARAMETER(RCD.BOS_Split_Producer_Code);

ENDIF;

ENDIF;

//?USER: Validate subfile record relations

CASE;

// IF RCD.RS Record Status is Active
IF RCD.RS_Record_Status = 'A';

CTL.PSS_Split_Percent_SUM = SUM(RCD.PSS_Split_Percent);

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Producer Name         DRV) TYPE(DRVFLD)                        AB1100361;
PARAMETER(RCD.Producer_Name_DRV);
PARAMETER(RCD.BOS_Split_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Producer_Name_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate totals

CASE;

// IF CTL.PSS Split Percent SUM is Not 100 %
IF CTL.PSS_Split_Percent_SUM <> 100;

// AND CTL.PSS Split Percent SUM NE WRK.Zero USR
AND CTL.PSS_Split_Percent_SUM <> WRK.Zero_USR;

// Send error message - 'Producer Std Split must total 100.00%.'
ERROR(PRK0190);

ENDIF;

//?USER: Change header DBF record

EXECUTE FUNCTION(Chg Producer          CH) TYPE(CHGOBJ) FILE(PKACREP)           AB1101532;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Name);
PARAMETER(CTL.PD_Production_Capacity);
PARAMETER(CTL.PD_Std_Delv_Time);
PARAMETER(CTL.PD_Std_Truck_Size);
PARAMETER(CTL.PD_Freight_Exp_Paid_By);
PARAMETER(CTL.PD_Fax_Status);
PARAMETER(CTL.PD_VND_Address_Number);
PARAMETER(CTL.PD_EDI_Trading_Partner_#);
PARAMETER(CTL.PD_VND_Category);
PARAMETER(CTL.SR_Source_Code);
PARAMETER(CTL.HB_Buyer_Code);
PARAMETER(CTL.Commission_Producer_Payee);
PARAMETER(CTL.RS_User_Changed);
PARAMETER(CTL.RS_Date_Changed);
PARAMETER(CTL.RS_Time_Changed);
PARAMETER(CTL.RS_Record_Status);
PARAMETER(CTL.RS_Job);
PARAMETER(CTL.RS_Program);
PARAMETER(CTL.RS_User_Added);
PARAMETER(CTL.RS_Date_Added);
PARAMETER(CTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Delete detail DBF record

EXECUTE FUNCTION(Delete Producer Split) TYPE(DLTOBJ) FILE(PKBFREP)              AB1104931;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.BOS_Split_Producer_Code);

//?USER: Change detail DBF record

EXECUTE FUNCTION(Chg Producer Split    CH) TYPE(CHGOBJ) FILE(PKBFREP)           AB1104930;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.BOS_Split_Producer_Code);
PARAMETER(RCD.PSS_Split_Last_Used);
PARAMETER(RCD.PSS_Split_Percent);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Create detail DBF record

EXECUTE FUNCTION(Crt Producer Split    CR) TYPE(CRTOBJ) FILE(PKBFREP)           AB1104929;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.BOS_Split_Producer_Code);
PARAMETER(RCD.PSS_Split_Last_Used);
PARAMETER(RCD.PSS_Split_Percent);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER('A');
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


