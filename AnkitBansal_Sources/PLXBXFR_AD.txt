// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLXBXFR
// ?Date: 14.08.2025 Time: 02:55:41
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification history
DO;

//?C9426 032217 slm
//?C9426 use the BOL Reference to store the Ref1,Ref2 and Ref Status
//? 5/08/18 JBB E31600 - Stop reprocessing UPL records when error
//?                      Update current UPL record Process Status to
//?                      Processed, and Error Reason to ADDDRF.
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

EXECUTE FUNCTION(Rtv PRD Serv RcdsCrtBORT) TYPE(RTVOBJ) FILE(PLBJCPP)           AB1325272;
PARAMETER(PAR.DSU_Company_Number);
PARAMETER(WRK.Buy_Order_Number_Mtech);
{
 //?USER: Initialize routine

 //?C9426 032217 slm
 //?Get the MTech Live Yes or No
 DO;

 //?Mtech Live Yes or no
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.DSU_Company_Number);
 PARAMETER('MTECHLIVE');
 PARAMETER(WRK.System_Value_Alpha_USR);

 // LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
 LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

 // WRK.Buy Order Number Mtech = CON.*ZERO
 WRK.Buy_Order_Number_Mtech = *ZERO;

 // WRK.Kill Date 1 Usr = CON.*ZERO
 WRK.Kill_Date_1_Usr = *ZERO;

 // WRK.Break Logic Usr = CND.*Yes
 WRK.Break_Logic_Usr = *YES;

 ENDDO;

 //?USER: Process Data record

 // WRK.DSU Error Reason = DB1.DSU Error Reason
 WRK.DSU_Error_Reason = DB1.DSU_Error_Reason;

 EXECUTE FUNCTION(Rtv Record By MovementRT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1311406;
 PARAMETER(DB1.DSU_Company_Number);
 PARAMETER(WRK.DSU_Kill_Date);
 PARAMETER(WRK.DSU_Delivery_Date);
 PARAMETER(WRK.DSU_Delivery_Time);
 PARAMETER(WRK.DSD_Delivery_Time_Seq);
 PARAMETER(DB1.DSU_Movement_Number);
 PARAMETER(WRK.SR_Source_Code);
 PARAMETER(WRK.PD_Producer_Code);
 PARAMETER(WRK.BOH_Company_Number);
 PARAMETER(WRK.BOH_Buy_Order_Number);
 PARAMETER(WRK.BOL_Load_Number);
 PARAMETER(WRK.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  QUIT;

 }

 //?Validate on Add, 11/3/2017 will now be add only
 CASE;

 //?Validate on Add, 11/3/2017 will now be add only
 // IF WRK.Record Found USR is Record Found
 IF WRK.Record_Found_USR = 'Y';

 //?ADD record should not be found
 CASE;

 // IF DB1.DSU Record Status is Add
 IF DB1.DSU_Record_Status = 'A';

 // WRK.DSU Process Status = CND.Error
 WRK.DSU_Process_Status = 2;

 // WRK.DSU Error Reason = CND.Add but Record Found
 WRK.DSU_Error_Reason = 'ADDDRF';

 // Call program Zzz DlvSchDtlUpl ErrorXP.
 CALL PROGRAM(Zzz DlvSchDtlUpl ErrorXP) ('PLSHXFR');
 PARAMETER(DB1.DSU_Company_Number);
 PARAMETER(DB1.DSU_Transaction_Date);
 PARAMETER(DB1.DSU_Transaction_Time);
 PARAMETER(DB1.DSU_Transaction_Seq);
 PARAMETER(WRK.DSU_Error_Reason);
 PARAMETER('TEST1');
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*PROGRAM);

 //? 5/08/18 JBB E31600 - Stop reprocessing UPL records when error
 //?                      Update UPL Process Status and Error Reason
 EXECUTE FUNCTION(Chg Process/Error     CH) TYPE(CHGOBJ) FILE(PLBJCPP)           AB1311483;
 PARAMETER(DB1.DSU_Company_Number);
 PARAMETER(DB1.DSU_Transaction_Date);
 PARAMETER(DB1.DSU_Transaction_Time);
 PARAMETER(DB1.DSU_Transaction_Seq);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.DSU_PRD_Srv_Batch_ID);
 PARAMETER(DB1.DSU_PRD_Srv_Sched_ID);
 PARAMETER(DB1.DSU_Ref_1);
 PARAMETER(DB1.DSU_Ref_2);
 PARAMETER(DB1.DSU_Ref_Status);
 PARAMETER(WRK.DSU_Process_Status);
 PARAMETER(WRK.DSU_Error_Reason);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1345186;
  PARAMETER(DB1.DSU_Record_Status);
  PARAMETER(DB1.DSU_Change_Date);
  PARAMETER(DB1.DSU_Change_Time);
  {
   //?Execute internal function

   // PAR.DSU Record Status = CND.Change
   PAR.DSU_Record_Status = 'C';

   // PAR.DSU Change Date = JOB.*Job date
   PAR.DSU_Change_Date = JOB.*Job_date;

   // PAR.DSU Change Time = JOB.*Job time
   PAR.DSU_Change_Time = JOB.*Job_time;

  }

 }

 ENDIF;

 ENDIF;

 CASE;

 // IF WRK.DSU Error Reason is No Error
 IF WRK.DSU_Error_Reason = *BLANK;

 //?Break Logic Check
 DO;

 //?Verify if different kill date
 CASE;

 // IF WRK.Kill Date 1 Usr NE DB1.DSU Kill Date
 IF WRK.Kill_Date_1_Usr <> DB1.DSU_Kill_Date;

 // WRK.Break Logic Usr = CND.*Yes
 WRK.Break_Logic_Usr = *YES;

 ENDIF;

 //?Break
 CASE;

 // IF WRK.Break Logic Usr is *Yes
 IF WRK.Break_Logic_Usr = *YES;

 // WRK.Kill Date 1 Usr = DB1.DSU Kill Date
 WRK.Kill_Date_1_Usr = DB1.DSU_Kill_Date;

 // WRK.DSH Kill Date = DB1.DSU Kill Date
 WRK.DSH_Kill_Date = DB1.DSU_Kill_Date;

 //?Create first buy order for this company and kill date
 //?5/25/2017 - Producer and producer locatin from upl
 //?no longer by seaboard or seaboard location
 //?upl SHOULD have the producer And producer location
 // Call program Zzz BOH f/DSchMTech   XF.
 CALL PROGRAM(Zzz BOH f/DSchMTech   XF) ('PLXIXFR');
 PARAMETER(DB1.DSU_Company_Number);
 PARAMETER(DB1.DSU_Kill_Date);
 PARAMETER(DB1.DSU_Delivery_Date);
 PARAMETER(DB1.DSU_Delivery_Time);
 PARAMETER(DB1.DSU_Scheduled_Delv_Head);
 PARAMETER(DB1.DSU_Movement_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(WRK.BOH_Company_Number);
 PARAMETER(WRK.BOH_Buy_Order_Number);
 PARAMETER(WRK.BOL_Load_Number);
 PARAMETER('Y');

 // PAR.Buy Order Number Mtech = WRK.BOH Buy Order Number
 PAR.Buy_Order_Number_Mtech = WRK.BOH_Buy_Order_Number;

 // WRK.Break Logic Usr = CND.*No
 WRK.Break_Logic_Usr = *NO;

 ENDIF;

 // WRK.BOH Company Number = PAR.DSU Company Number
 WRK.BOH_Company_Number = PAR.DSU_Company_Number;

 // WRK.BOH Buy Order Number = PAR.Buy Order Number Mtech
 WRK.BOH_Buy_Order_Number = PAR.Buy_Order_Number_Mtech;

 ENDDO;

 //?Update process
 //?Detail Records
 DO;

 //?NOW CREATE THE BUY ORDER LOAD
 //?5/25/2017 pass producer and producer location from UPL
 EXECUTE FUNCTION(Rtv Std Time,buyer    RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1122902;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(WRK.PD_Std_Delv_Time);
 PARAMETER(WRK.PD_Std_Truck_Size);
 PARAMETER(WRK.PD_Freight_Exp_Paid_By);
 PARAMETER(WRK.SR_Source_Code);
 PARAMETER(WRK.HB_Buyer_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
 PARAMETER(WRK.SR_Source_Code);
 PARAMETER(WRK.SR_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Crt Buy Order DtlMvnm IF) TYPE(EXCINTFUN)                      AB1313640;
 PARAMETER(PAR.DSU_Company_Number);
 PARAMETER(PAR.Buy_Order_Number_Mtech);
 PARAMETER(WRK.BOL_Load_Number);
 PARAMETER(DB1.DSU_Kill_Date);
 PARAMETER(DB1.DSU_Delivery_Time);
 PARAMETER(DB1.DSU_Delivery_Time);
 PARAMETER(DB1.DSU_Scheduled_Delv_Head);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSU_Delivery_Date);
 PARAMETER(WRK.Blank_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(WRK.PD_Freight_Exp_Paid_By);
 PARAMETER(1);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_Usr_1_fld_Usr);
 PARAMETER(DB1.DSU_Movement_Number);
 PARAMETER(*BLANK);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.PD_Std_Truck_Size);
 {
  //?Execute internal function

  // WRK.BOL Pln Head Delv = PAR.BOL Pln Head Delv
  WRK.BOL_Pln_Head_Delv = PAR.BOL_Pln_Head_Delv;

  //?If Std truck size is zero, default to Planned head delivered qty
  CASE;

  // IF PAR.PD Std Truck Size EQ WRK.Zero USR
  IF PAR.PD_Std_Truck_Size = WRK.Zero_USR;

  // WRK.PD Std Truck Size = WRK.BOL Pln Head Delv
  WRK.PD_Std_Truck_Size = WRK.BOL_Pln_Head_Delv;

  //?If Std truck size is zero, default to Planned head delivered qty
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.PD Std Truck Size = PAR.PD Std Truck Size
  WRK.PD_Std_Truck_Size = PAR.PD_Std_Truck_Size;

  ENDIF;

  //?Write Load records with planned head not exceeding std truck size
  // DOW WRK.BOL Pln Head Delv GT WRK.Zero USR
  DOW WRK.BOL_Pln_Head_Delv > WRK.Zero_USR;

  // WRK.BOL Pln Head Delv = WRK.BOL Pln Head Delv - WRK.PD Std Truck Size
  WRK.BOL_Pln_Head_Delv = WRK.BOL_Pln_Head_Delv - WRK.PD_Std_Truck_Size;

  CASE;

  // IF WRK.BOL Pln Head Delv LT WRK.Zero USR
  IF WRK.BOL_Pln_Head_Delv < WRK.Zero_USR;

  // WRK.PD Std Truck Size = WRK.PD Std Truck Size + WRK.BOL Pln Head Delv
  WRK.PD_Std_Truck_Size = WRK.PD_Std_Truck_Size + WRK.BOL_Pln_Head_Delv;

  ENDIF;

  EXECUTE FUNCTION(Delete A/P Payment Rgster) TYPE(RTVOBJ) FILE(PKAXCPP)          AA1101124;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  EXECUTE FUNCTION(Crt Buy Order Detail  CR) TYPE(CRTOBJ) FILE(PKAXCPP)           AB1100530;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.BOL_Kill_Date);
  PARAMETER(PAR.BOL_Pln_Delv_Start_Time);
  PARAMETER(PAR.BOL_Pln_Delv_End_Time);
  PARAMETER(WRK.PD_Std_Truck_Size);
  PARAMETER(PAR.BOL_Shipped_Wgt);
  PARAMETER(PAR.BOL_Pln_Delv_Date);
  PARAMETER(PAR.BOL_Freight_UOM);
  PARAMETER(PAR.BOL_Freight_Unit_Amt);
  PARAMETER(PAR.BOL_Freight_Amt);
  PARAMETER(PAR.BOL_Freight_Allocation);
  PARAMETER(PAR.BOL_Head_Received);
  PARAMETER(PAR.BOL_Live_Wgt_Received);
  PARAMETER(PAR.BOL_Trucker_Payment_Sts);
  PARAMETER(PAR.BOL_Trucker_Check_Number);
  PARAMETER(PAR.BOL_Trucker_Check_Date);
  PARAMETER(PAR.BOL_AP_Voucher);
  PARAMETER(PAR.BOL_Trailer);
  PARAMETER(PAR.BOL_Freight_Exp_Paid_By);
  PARAMETER(PAR.BOL_Scheduled_Kill_Shift);
  PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(PAR.BOL_Shipped_Head);
  PARAMETER(PAR.Reported_to_USDA);
  PARAMETER(*BLANK);
  PARAMETER(PAR.BOL_Violated_Auth_Tme_Sts);
  PARAMETER(PAR.BOL_Status_5);
  PARAMETER(PAR.BOL_Status_6);
  PARAMETER(PAR.BOL_Status_7);
  PARAMETER(PAR.BOL_HPS_Movement_Number);
  PARAMETER(PAR.BOL_Head_LFT);
  PARAMETER(PAR.BOL_Head_EUT_KOA);
  PARAMETER(PAR.BOL_Auth_Gate_Entry_Time);
  PARAMETER(PAR.BOL_Head_Received_Market);
  PARAMETER(PAR.BOL_Unused_Wgt_1);
  PARAMETER(PAR.BOL_Unused_Wgt_2);
  PARAMETER(PAR.BOL_Unused_Wgt_3);
  PARAMETER(PAR.BOL_Unused_Wgt_4);
  PARAMETER(PAR.BOL_Unused_Wgt_5);
  PARAMETER(PAR.BOL_Auth_Gate_Entry_Date);
  PARAMETER(PAR.BOL_Unused_Date_2);
  PARAMETER(PAR.BOL_Unused_Date_3);
  PARAMETER(PAR.BOL_Unused_Date_4);
  PARAMETER(PAR.BOL_Unused_Date_5);
  PARAMETER(PAR.TRK_Trucker_Code);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDDO;

 }

 EXECUTE FUNCTION(Crt/Upd BO Load Ref   IF) TYPE(EXCINTFUN)                      AB1331981;
 PARAMETER(PAR.DSU_Company_Number);
 PARAMETER(PAR.Buy_Order_Number_Mtech);
 PARAMETER(WRK.BOL_Load_Number);
 PARAMETER(DB1.DSU_Ref_1);
 PARAMETER(DB1.DSU_Ref_2);
 PARAMETER(DB1.DSU_Ref_Status);
 {
  //?Execute internal function

  //?C9426 032217 slm
  //?C9426 use the BOL Referene to store the Ref1,Ref2 and Ref Status
  EXECUTE FUNCTION(Crt/Chg BO Load Ref   RT) TYPE(RTVOBJ) FILE(PWACCPP)           AB1331982;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.BOL_Ref_1);
  PARAMETER(PAR.BOL_Ref_2);
  PARAMETER(PAR.BOL_Ref_Status);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Buy Order Load Ref CR) TYPE(CRTOBJ) FILE(PWACCPP)          AB1331978;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.BOL_Ref_1);
   PARAMETER(PAR.BOL_Ref_2);
   PARAMETER(PAR.BOL_Ref_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Buy Order Load Ref CH) TYPE(CHGOBJ) FILE(PWACCPP)          AB1331979;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(PAR.BOL_Ref_1);
   PARAMETER(PAR.BOL_Ref_2);
   PARAMETER(PAR.BOL_Ref_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 //?Update process
 //?Add to the delivery Schedule detail AND Update UPL
 CASE;

 // IF DB1.DSU Record Status is Add
 IF DB1.DSU_Record_Status = 'A';

 EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1248408;
 PARAMETER(DB1.DSU_Company_Number);
 PARAMETER(DB1.DSU_Kill_Date);
 PARAMETER(DB1.DSU_Delivery_Date);
 PARAMETER(DB1.DSU_Delivery_Time);
 PARAMETER(WRK.DSD_Delivery_Time_Seq);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.DSD Delivery Time Seq = CON.1
  PAR.DSD_Delivery_Time_Seq = 1;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.DSD Delivery Time Seq = DB1.DSD Delivery Time Seq + CON.1
  PAR.DSD_Delivery_Time_Seq = DB1.DSD_Delivery_Time_Seq + 1;

  QUIT;

 }

 //?this delete should not be need but will perform anyway
 //?just in case of a restart
 EXECUTE FUNCTION(Rtv Del DSS           RT) TYPE(RTVOBJ) FILE(PLAGCPP)           AB1247815;
 PARAMETER(DB1.DSU_Company_Number);
 PARAMETER(DB1.DSU_Kill_Date);
 PARAMETER(DB1.DSU_Delivery_Date);
 PARAMETER(DB1.DSU_Delivery_Time);
 PARAMETER(WRK.DSD_Delivery_Time_Seq);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del Delv Sched Split  DL) TYPE(DLTOBJ) FILE(PLAGCPP)           AB1244778;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(DB1.DSS_Split_Sequence);
 }

 // LCL.DT Transportation Office = WRK.Blank USR
 LCL.DT_Transportation_Office = WRK.Blank_USR;

 // LCL.DT Trucker Code HPS = WRK.Blank USR
 LCL.DT_Trucker_Code_HPS = WRK.Blank_USR;

 //?Create the Delivery Schedule Detail for the 1st record
 //?all records will be created as full loads regardless
 CASE;

 // IF WRK.SR Type is Internal
 IF WRK.SR_Type = 'I';

 //?If load crew is found then get the transportation office
 DO;

 CASE;

 // IF DB1.DSU Loading Crew is Entered
 IF DB1.DSU_Loading_Crew <> *BLANK;

 // Call program Val HPS Loading Crew  UP.
 CALL PROGRAM(Val HPS Loading Crew  UP) ('HP273');
 PARAMETER(WRK.Return_Code_USR);
 PARAMETER(DB1.DSU_Loading_Crew);
 PARAMETER(NLL.HPS_Loading_Crew_Desc);
 PARAMETER(LCL.DT_Transportation_Office);
 PARAMETER(NLL.RS_Record_Status);
 PARAMETER(NLL.MTech_Load_Crew_Ref);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.DT Transportation Office = WRK.Blank USR
 LCL.DT_Transportation_Office = WRK.Blank_USR;

 ENDIF;

 ENDDO;

 //?If driver is found then pull the trucker
 DO;

 CASE;

 // IF DB1.DSU Driver is Entered
 IF DB1.DSU_Driver <> *BLANK;

 // Call program Val HPS Driver        UP.
 CALL PROGRAM(Val HPS Driver        UP) ('HP272');
 PARAMETER(WRK.Return_Code_USR);
 PARAMETER(DB1.DSU_Driver);
 PARAMETER(NLL.HPS_Driver_Name);
 PARAMETER(NLL.DT_Transportation_Office);
 PARAMETER(NLL.RS_Record_Status);
 PARAMETER(NLL.DT_Truck_ID);
 PARAMETER(NLL.DT_Trailer_ID);
 PARAMETER(LCL.DT_Trucker_Code_HPS);
 PARAMETER(NLL.DT_Trucker_Name_Usr_25);
 PARAMETER(NLL.MTech_Trucker_Ref);
 PARAMETER(NLL.MTech_Driver_Ref);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.DT Trucker Code HPS = WRK.Blank USR
 LCL.DT_Trucker_Code_HPS = WRK.Blank_USR;

 ENDIF;

 ENDDO;

 ENDIF;

 //?052517 slm * come back to this pull off to work on producer
 //?producer location, and trucker
 //?GET the producer source and the source type
 //?this was currently hard code for internal only
 //?Changes to all internal or externals
 EXECUTE FUNCTION(Crt Delv Sched Dtl    CR) TYPE(CRTOBJ) FILE(PLAECPP)           AB1244727;
 PARAMETER(PAR.DSU_Company_Number);
 PARAMETER(DB1.DSU_Kill_Date);
 PARAMETER(DB1.DSU_Delivery_Date);
 PARAMETER(DB1.DSU_Delivery_Time);
 PARAMETER(WRK.DSD_Delivery_Time_Seq);
 PARAMETER(WRK.DSD_Scheduled_Hour);
 PARAMETER(DB1.DSU_Farm_Site_Code);
 PARAMETER(DB1.DSU_Building);
 PARAMETER(DB1.DSU_Room);
 PARAMETER(DB1.DSU_Sire_Line_Code);
 PARAMETER(DB1.DSU_Hog_Group_Code);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DSU_Scheduled_Delv_Head);
 PARAMETER(*ZERO);
 PARAMETER(LCL.DT_Transportation_Office);
 PARAMETER(LCL.DT_Trucker_Code_HPS);
 PARAMETER(DB1.DSU_Driver);
 PARAMETER(DB1.DSU_Loading_Crew);
 PARAMETER(DB1.DSU_Hauler_Reason);
 PARAMETER(DB1.DSU_Load_Type);
 PARAMETER(DB1.DSU_Full_Split_Load);
 PARAMETER(DB1.DSU_Movement_Number);
 PARAMETER(DB1.DSU_Truck_ID);
 PARAMETER(DB1.DSU_Trailer_ID);
 PARAMETER('N');
 PARAMETER(DB1.DSU_Sched_Route_Start_Pnt);
 PARAMETER(DB1.DSU_Sched_Route_Start_Dte);
 PARAMETER(DB1.DSU_Sched_Route_Start_Tim);
 PARAMETER(DB1.DSU_Sch_Farm_Arrival_Date);
 PARAMETER(DB1.DSU_Sch_Farm_Arrival_Time);
 PARAMETER(DB1.DSU_Sch_Start_Load_Date);
 PARAMETER(DB1.DSU_Sch_Start_Load_Time);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER('O');
 PARAMETER(WRK.SR_Type);
 PARAMETER(WRK.DSD_Transfer_Sts);
 PARAMETER(WRK.DSD_Unused_Date);
 PARAMETER(WRK.DSD_Unused_Time);
 PARAMETER(WRK.SR_Source_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.DSU_Company_Number);
 PARAMETER(PAR.Buy_Order_Number_Mtech);
 PARAMETER(WRK.BOL_Load_Number);
 PARAMETER(DB1.DSU_PRD_Srv_Batch_ID);
 PARAMETER(DB1.DSU_PRD_Srv_Sched_ID);
 PARAMETER(DB1.DSU_Ref_1);
 PARAMETER(DB1.DSU_Ref_2);
 PARAMETER(DB1.DSU_Ref_Status);
 PARAMETER(WRK.RS_User_Changed);
 PARAMETER(WRK.RS_Date_Changed);
 PARAMETER(WRK.RS_Time_Changed);
 PARAMETER('A');
 PARAMETER(WRK.RS_Job);
 PARAMETER(WRK.RS_Program);
 PARAMETER(WRK.RS_User_Added);
 PARAMETER(WRK.RS_Date_Added);
 PARAMETER(WRK.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 EXECUTE FUNCTION(Chg Delv Sched DtlBOL CH) TYPE(CHGOBJ) FILE(PLBJCPP)           AB1342676;
 PARAMETER(PAR.DSU_Company_Number);
 PARAMETER(DB1.DSU_Transaction_Date);
 PARAMETER(DB1.DSU_Transaction_Time);
 PARAMETER(DB1.DSU_Transaction_Seq);
 PARAMETER(DB1.DSU_Company_Number);
 PARAMETER(PAR.Buy_Order_Number_Mtech);
 PARAMETER(WRK.BOL_Load_Number);
 PARAMETER(1);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1345186;
  PARAMETER(DB1.DSU_Record_Status);
  PARAMETER(DB1.DSU_Change_Date);
  PARAMETER(DB1.DSU_Change_Time);
  {
   //?Execute internal function

   // PAR.DSU Record Status = CND.Change
   PAR.DSU_Record_Status = 'C';

   // PAR.DSU Change Date = JOB.*Job date
   PAR.DSU_Change_Date = JOB.*Job_date;

   // PAR.DSU Change Time = JOB.*Job time
   PAR.DSU_Change_Time = JOB.*Job_time;

  }

 }

 ENDIF;

 //?Process is completed move buy order number
 DO;

 // PAR.Buy Order Number Mtech = WRK.Buy Order Number Mtech
 PAR.Buy_Order_Number_Mtech = WRK.Buy_Order_Number_Mtech;

 ENDDO;

 //?Add logic for the new HPS program and what i need tosend
 //?Add this to perform a call to a HPS program on every record
 //?Barb G ---she will get back to us on this
 CASE;

 // IF DB1.DSU Ref Status is HPS Schedule SalesMovemnt
 IF DB1.DSU_Ref_Status = 'SM';

 // Call program Snd HPS DelvSch Inf UP.
 CALL PROGRAM(Snd HPS DelvSch Inf UP) ('HP2084');
 PARAMETER(PGM.*Return_code);
 PARAMETER(DB1.DSU_Company_Number);
 PARAMETER(DB1.DSU_Movement_Number);
 PARAMETER(DB1.DSU_Delivery_Date);
 PARAMETER(DB1.DSU_Delivery_Time);
 PARAMETER(WRK.DSD_Delivery_Time_Seq);
 PARAMETER(WRK.Buy_Order_Number_Mtech);
 PARAMETER(WRK.BOL_Load_Number);

 ENDIF;

 ENDDO;

 ENDIF;

}


