// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLAFE1R
// ?Date: 14.08.2025 Time: 02:53:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('TTOOEMPUNL');
PARAMETER(LCL.Employee_Unloader_Sts);

//?USER: Initialize detail screen (existing record)

// DTL.Condition Name 1 USR = Condition name of DTL.TP Alley Number
DTL.Condition_Name_1_USR = RTVCND(DTL.TP_Alley_Number);

// DTL.Condition Name USR = Condition name of DTL.TP Tattoo Status
DTL.Condition_Name_USR = RTVCND(DTL.TP_Tattoo_Status);

EXECUTE FUNCTION(Employee Name DRV) TYPE(DRVFLD)                                AB1244061;
PARAMETER(DTL.Employee_Name_DRV);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Employee_ID);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Name              RT) TYPE(RTVOBJ) FILE(PKFIREP)           AB1244062;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Employee_ID);
 PARAMETER(PAR.Employee_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

}


EXECUTE FUNCTION(Rtv Name              RT) TYPE(RTVOBJ) FILE(PKFIREP)           AB1244062;
PARAMETER(DB1.CC_Company_Number);
PARAMETER(DB1.Employee_Number_2_Employe);
PARAMETER(DTL.Employee_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?CALC: Detail screen function fields

EXECUTE FUNCTION(Employee Name DRV) TYPE(DRVFLD)                                AB1244061;
PARAMETER(DTL.Employee_Name_DRV);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Employee_ID);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Name              RT) TYPE(RTVOBJ) FILE(PKFIREP)           AB1244062;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Employee_ID);
 PARAMETER(PAR.Employee_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

}


//?USER: Validate detail screen relations

CASE;

// IF DTL.BOH Buy Order Number is NE Zero
IF DTL.BOH_Buy_Order_Number <> *ZERO;

// DTL.TP Tattoo Status = CND.Assigned
DTL.TP_Tattoo_Status = 'A';

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Employee Number 2 Employe
IF PGM.*Cursor_field = DTL.Employee_Number_2_Employe;

CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// Call program Sel Employee          SR.
CALL PROGRAM(Sel Employee          SR) ('PKPKSRR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Employee_Number_2_Employe);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Name              RT) TYPE(RTVOBJ) FILE(PKFIREP)           AB1244062;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Employee_Number_2_Employe);
PARAMETER(DTL.Employee_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF LCL.Employee Unloader Sts is Yes
IF LCL.Employee_Unloader_Sts = 'Y';

CASE;

// IF DTL.Employee Number 2 Employe is Not Entered
IF DTL.Employee_Number_2_Employe = *ZERO;

// Send error message - 'Employee Unloader Req.'
ERROR(PRK1156);
MSGPARM(DTL.Employee_Number_2_Employe);

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Employee not found.'
ERROR(PRK1010);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Tattoo Pending    CR) TYPE(CRTOBJ) FILE(PKFJCPP)           AB1243798;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TP_Tattoo_Date);
PARAMETER(DTL.TP_Tattoo_Number);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.Employee_ID);
PARAMETER(DTL.TP_Tattoo_Create_Time);
PARAMETER(DTL.TP_Alley_Number);
PARAMETER(DTL.TP_Tattoo_Status);
PARAMETER(DTL.Employee_Number_2_Employe);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // Call program Rtv System Date & Tim UP.
  CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

 // DB1.TP Tattoo Create Time = DB1.RS Time Added
 DB1.TP_Tattoo_Create_Time = DB1.RS_Time_Added;

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Tattoo Pending    CH) TYPE(CHGOBJ) FILE(PKFJCPP)           AB1243799;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TP_Tattoo_Date);
PARAMETER(DTL.TP_Tattoo_Number);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.Employee_ID);
PARAMETER(DTL.TP_Tattoo_Create_Time);
PARAMETER(DTL.TP_Alley_Number);
PARAMETER(DTL.TP_Tattoo_Status);
PARAMETER(DTL.Employee_Number_2_Employe);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);

