// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPT1DFR
// ?Date: 14.08.2025 Time: 03:41:54
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?R12773 RMC 5/31/18 show edi 846 uploads - F10
//?RMC 7/7/6 chg access paths on XFs to RST on Co/Whse  - option 1
//?E3191 JJH 07/31/14 Add INVRST Application Code to restrict users
//?      who can use options 1=Process Carlisle Upload File and
//?      5=Work With Physical Count.
//?W020792 MD  05/29/24 - Added logic to check Module Release Status and
//?        accordingly delete records from PFS Inventory restortion table or
//?        WIM PFS Inv Restoration table
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
PARAMETER(CTL.System_Date_USR);
{
 //?Execute internal function

 // LCL.*System timestamp = JOB.*System timestamp
 LCL.*System_timestamp = JOB.*System_timestamp;

 // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
 LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

 // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
 LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

 // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
 LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

 // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
 LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

 // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
 LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.System_Date_USR);
 PARAMETER(LCL.DATE);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

}


CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Shipping Company = PAR.Company Number
CTL.Shipping_Company = PAR.Company_Number;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record from DBF record

//?SEL:  Company Number
CASE;

// IF CTL.Shipping Company is not equal to zero
IF CTL.Shipping_Company <> *ZERO;

CASE;

// IF RCD.Shipping Company NE CTL.Shipping Company
IF RCD.Shipping_Company <> CTL.Shipping_Company;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Total Qty,Wgt     RT) TYPE(RTVOBJ) FILE(PPB0CPP)           AC1769894;
PARAMETER(RCD.Shipping_Company);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Quantity_Adjustment_2_USR);
PARAMETER(RCD.Weight_1_1_U);
PARAMETER(RCD.PFS_Transaction_Date);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Process Data record

 // PAR.Quantity Adjustment 2 USR = PAR.Quantity Adjustment 2 USR + DB1.PFS On Hand Quantity
 PAR.Quantity_Adjustment_2_USR = PAR.Quantity_Adjustment_2_USR + DB1.PFS_On_Hand_Quantity;

 // PAR.Weight 1.1             .U = PAR.Weight 1.1             .U + DB1.PFS On Hand Weight
 PAR.Weight_1_1_U = PAR.Weight_1_1_U + DB1.PFS_On_Hand_Weight;

 CASE;

 // IF WRK.First Time Flag is Yes
 IF WRK.First_Time_Flag = 'Y';

 // PAR.PFS Transaction Date = DB1.PFS Transaction Date
 PAR.PFS_Transaction_Date = DB1.PFS_Transaction_Date;

 // WRK.First Time Flag = CND.NO
 WRK.First_Time_Flag = 'N';

 ENDIF;

}


CASE;

// IF RCD.Lot Tracking Flag is yes
IF RCD.Lot_Tracking_Flag = 'Y';

EXECUTE FUNCTION(Rtv Item Loc Qty,Wgt  RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1769896;
PARAMETER(RCD.Shipping_Company);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Quantity_Inv_On_Hand_USR);
PARAMETER(RCD.Weight_1_2_U);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Quantity Inv On-Hand USR = PAR.Quantity Inv On-Hand USR + DB1.ILL Item Qty On-Hand
 PAR.Quantity_Inv_On_Hand_USR = PAR.Quantity_Inv_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

 // PAR.Weight 1.2             .U = PAR.Weight 1.2             .U + DB1.ILl Item Wgt On-Hand
 PAR.Weight_1_2_U = PAR.Weight_1_2_U + DB1.ILL_Item_Wgt_On_Hand;

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Whse OH Qty/Wgt   RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1769903;
PARAMETER(RCD.Shipping_Company);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Weight_1_2_U);
PARAMETER(RCD.Quantity_Inv_On_Hand_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Quantity on Hand - Weight = PAR.Quantity on Hand - Weight + DB1.Quantity on Hand - Weight
 PAR.Quantity_on_Hand_Weight = PAR.Quantity_on_Hand_Weight + DB1.Quantity_on_Hand_Weight;

 // PAR.Quantity Inv On-Hand USR = PAR.Quantity Inv On-Hand USR + DB1.Quantity on Hand - U/M1
 PAR.Quantity_Inv_On_Hand_USR = PAR.Quantity_Inv_On_Hand_USR + DB1.Quantity_on_Hand_UOM1;

}


ENDIF;

// RCD.Quantity Loc Var USR = RCD.Quantity Adjustment 2 USR - RCD.Quantity Inv On-Hand USR
RCD.Quantity_Loc_Var_USR = RCD.Quantity_Adjustment_2_USR - RCD.Quantity_Inv_On_Hand_USR;

// RCD.Weight 1.3             .U = RCD.Weight 1.1             .U - RCD.Weight 1.2             .U
RCD.Weight_1_3_U = RCD.Weight_1_1_U - RCD.Weight_1_2_U;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?R12773 RMC 5/31/18 show edi 846 uploads
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program WW EDI Restoration    DF.
CALL PROGRAM(WW EDI Restoration    DF) ('PUH1DFR');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?1=Select Process Restoration
CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

//?E3191 JJH 07/31/14 - Access restriction by INVRST Application Code
EXECUTE FUNCTION(Rtv User/Application   IF) TYPE(EXCINTFUN)                     AC1920426;
PARAMETER(JOB.*USER);
PARAMETER('INVRST');
PARAMETER(LCL.Return_Code_Usr);
{
 //?Execute internal function

 // PAR.Return Code Usr = CND.*Blank
 PAR.Return_Code_Usr = *BLANK;

 EXECUTE FUNCTION(RTV Program Setup      RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1250561;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(NLL.Allow_Multi_Company);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(NLL.Salesperson_Code);
 PARAMETER(LCL.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.User Code Model is equal to blank
 IF LCL.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV Appl Allowed       RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1920437;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Return_Code_Usr);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Return Code Usr = CND.*Record does not exist
  PAR.Return_Code_Usr = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Return Code Usr = CND.*Blank
  PAR.Return_Code_Usr = *BLANK;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Appl Allowed       RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1920437;
 PARAMETER(LCL.User_Code_Model);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Return_Code_Usr);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Return Code Usr = CND.*Record does not exist
  PAR.Return_Code_Usr = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Return Code Usr = CND.*Blank
  PAR.Return_Code_Usr = *BLANK;

 }

 ENDIF;

}


CASE;

// IF LCL.Return Code Usr is *Blank
IF LCL.Return_Code_Usr = *BLANK;

//?RMC 5/10/06 dont allow if rest. qty is zero
CASE;

// IF RCD.Quantity Adjustment 2 USR is Equal to Zero
IF RCD.Quantity_Adjustment_2_USR = *ZERO;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

//?RMC 5/10/06 dont allow if rest. qty is zero
// IF *OTHERWISE
IF *OTHERWISE;

//?Fresh  / or Frozen
CASE;

// IF RCD.Warehouse Type is Fresh
IF RCD.Warehouse_Type = 'FR';

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

// Call program PFS Inv Physical FRSH XF.
CALL PROGRAM(PFS Inv Physical FRSH XF) ('PPTSXFR');
PARAMETER(RCD.Shipping_Company);
PARAMETER(RCD.Warehouse_Code);
PARAMETER('PPT1DFR');

//?Fresh  / or Frozen
// IF RCD.Warehouse Type is Frozen
IF RCD.Warehouse_Type = 'FZ';

// AND RCD.Lot Tracking Flag is yes
AND RCD.Lot_Tracking_Flag = 'Y';

// Send status message - 'Processing...'
MESSAGE(USR2303 *STATUS);

// Call program PFS Inventory Rst FRZ XF.
CALL PROGRAM(PFS Inventory Rst FRZ XF) ('PPSEXFR');
PARAMETER(RCD.Shipping_Company);
PARAMETER(RCD.Warehouse_Code);
PARAMETER('PPT1DFR');

// Call program PRC AutoPost LotTrkWhs XF.
CALL PROGRAM(PRC AutoPost LotTrkWhs XF) ('POLJXFR');
PARAMETER(RCD.Shipping_Company);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(*BLANK);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Application access denied for user &1 in application area &2'
ERROR(USR4459);
MSGPARM(JOB.*USER);
MSGPARM('INVRST');

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?4=Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?5=Work With Physical
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

//?E3191 JJH 07/31/14 - Access restriction by INVRST Application Code
EXECUTE FUNCTION(Rtv User/Application   IF) TYPE(EXCINTFUN)                     AC1920426;
PARAMETER(JOB.*USER);
PARAMETER('INVRST');
PARAMETER(LCL.Return_Code_Usr);
{
 //?Execute internal function

 // PAR.Return Code Usr = CND.*Blank
 PAR.Return_Code_Usr = *BLANK;

 EXECUTE FUNCTION(RTV Program Setup      RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1250561;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(NLL.Allow_Multi_Company);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(NLL.Salesperson_Code);
 PARAMETER(LCL.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.User Code Model is equal to blank
 IF LCL.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV Appl Allowed       RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1920437;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Return_Code_Usr);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Return Code Usr = CND.*Record does not exist
  PAR.Return_Code_Usr = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Return Code Usr = CND.*Blank
  PAR.Return_Code_Usr = *BLANK;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Appl Allowed       RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1920437;
 PARAMETER(LCL.User_Code_Model);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Return_Code_Usr);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Return Code Usr = CND.*Record does not exist
  PAR.Return_Code_Usr = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Return Code Usr = CND.*Blank
  PAR.Return_Code_Usr = *BLANK;

 }

 ENDIF;

}


CASE;

// IF LCL.Return Code Usr is *Blank
IF LCL.Return_Code_Usr = *BLANK;

// Call program WW Physical Count      DF.
CALL PROGRAM(WW Physical Count      DF) ('OMJHDFR');
PARAMETER(RCD.Shipping_Company);
PARAMETER(RCD.Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Application access denied for user &1 in application area &2'
ERROR(USR4459);
MSGPARM(JOB.*USER);
MSGPARM('INVRST');

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?8=Display Upload
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

EXECUTE FUNCTION(Rtv Total Records     RT) TYPE(RTVOBJ) FILE(PPB0CPP)           AC1756347;
PARAMETER(RCD.Shipping_Company);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.Count_Records_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Count Records        USR = PAR.Count Records        USR + CON.1
 PAR.Count_Records_USR = PAR.Count_Records_USR + 1;

}


// Call program Dsp Inventory Restore DF.
CALL PROGRAM(Dsp Inventory Restore DF) ('PPT2DFR');
PARAMETER(RCD.Shipping_Company);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(LCL.Count_Records_USR);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?9=Prt Lot Diffs
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

CASE;

// IF RCD.Lot Tracking Flag is yes
IF RCD.Lot_Tracking_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Print Location Difference');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// WRK.Company Number Pass   USR = RCD.Shipping Company
WRK.Company_Number_Pass_USR = RCD.Shipping_Company;

// WRK.Date 1          PASS  USR = RCD.PFS Transaction Date
WRK.Date_1_PASS_USR = RCD.PFS_Transaction_Date;

// Call program Zzz Inv Restore Compr CL.
SBMJOB;
CALL PROGRAM(Zzz Inv Restore Compr CL) ('PPWAUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(WRK.Company_Number_Pass_USR);
PARAMETER(WRK.Date_1_PASS_USR);
PARAMETER(RCD.Warehouse_Code);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?4=Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

//?W020792 MD  05/29/24 - Added condition to check Module Release Status
EXECUTE FUNCTION(Rtv Module Release Sts RT) TYPE(RTVOBJ) FILE(PUC6REP)          AC2212908;
PARAMETER('WIM');
PARAMETER(1);
PARAMETER(LCL.Module_Release_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


//?W020792 MD  05/29/24 - Delete Legacy Carlisle records
CASE;

// IF LCL.Module Release Status is Not Live
IF LCL.Module_Release_Status = 'N';

// OR LCL.Module Release Status is Parallel
OR LCL.Module_Release_Status = 'P';

EXECUTE FUNCTION(DEL Upload Records    RT) TYPE(RTVOBJ) FILE(PPB0CPP)           AC1756381;
PARAMETER(RCD.Shipping_Company);
PARAMETER(RCD.Warehouse_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete PFS Inventory Rest) TYPE(DLTOBJ) FILE(PPB0CPP)          AC1748444;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Transaction_Date);
 PARAMETER(DB1.PFS_Transaction_Time);
 PARAMETER(DB1.PFS_Transaction_Seq);
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?W020792 MD  05/29/24 - Delete WIM Carlisle records
CASE;

// IF LCL.Module Release Status is Is Live
IF LCL.Module_Release_Status = 'Y';

// OR LCL.Module Release Status is Parallel
OR LCL.Module_Release_Status = 'P';

EXECUTE FUNCTION(DEL Upload Records    RT) TYPE(RTVOBJ) FILE(PUCYCPP)           AC2227851;
PARAMETER(RCD.Shipping_Company);
PARAMETER(RCD.Warehouse_Code);
{
 //?USER: Initialize routine

 //?MODIFICICATION HISTORY
 //?W020792 MD  05/28/24 - New function to delete the unprocessed records
 //?for the Company/Warehouse combo selected on PPT1DFR
 //?USER: Process Data record

 //?W020792 MD  05/30/24 - Only Delete the unprocessed records
 CASE;

 // IF DB1.PFS Process Status is Not Processed
 IF DB1.PFS_Process_Status = *ZERO;

 EXECUTE FUNCTION(Del WIM PFS Inv Restor DL) TYPE(DLTOBJ) FILE(PUCYCPP)          AC2215638;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Transaction_Date);
 PARAMETER(DB1.PFS_Transaction_Time);
 PARAMETER(DB1.PFS_Transaction_Seq);
 ENDIF;

}


ENDIF;

ENDIF;

