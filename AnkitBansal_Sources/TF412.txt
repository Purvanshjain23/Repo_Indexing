      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF412
      * TITLE:       Work with Claims Adjustments
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     04/07/05
      *
      * FUNCTION: This is a Work With that displays the records in the Claims Adjustments
      *           file.
      *
      *           This is, more accurately, a 'VIEW' since there is no create/revise/delete
      *           functionality. At the time this function was created, the intent was only
      *           to view/print from this function. BUT, just in case the design changes and
      *           we need to add file maintenance logic, it will be easier to add the logic
      *           to a Work With than a View.
      *
      *           Restrictors:
      *               None
      *
      *           Positioners:
      *               Week-ending date (descending)
      *
      *           Selectors:
      *               Company number
      *               Credit/debit memo number
      *               Memo type
      *               Claim number
      *               Product code
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 04/20/06  LeAnne Fedor
      *           Alice wanted F17-Print Options on the pop-up window TF4120.
      *           So, we added 'print option' parms to the call to TF4120 so
      *           we could capture/return the pop-up print options to this
      *           program--which does the actual submission.
      *
      * 08/16/06  LeAnne Fedor
      *           Alice wanted to stay on the pop-up window TF4120 after submitting. So,
      *           the actual submission is now done in TF4120 instead of in this program.
      *           So, we removed ALL print logic from this program.
      *
      * 08/29/06  LeAnne Ramsey
      *           Recompile only. New fields were added to TFP022-Claim Adjustments.
      *
      * 01/05/11  LeAnne Ramsey (E1245)
      *           A new field was added to TFP022-Claim Adjustments:
      *              1) customer type
      *           I added a Yes/No selection in the Control record for Affiliated Sales Claims.
      *           If the user enters Yes: he will only see claims for Affiliated Sales Customers
      *                               No: we will omit claims for Affiliated Sales Customers
      *                            blank: he will see all claims
      *
      * 11/28/17  Danny Nguyen  (R12011A-Weekly Product Revenue)
      *           Added 2 STF fields to TFP022 file:
      *             CLXRPPC  - STF RESPONSIBILITY %
      *             CLXNCLAM - STF NET CLAIM AMT
      *           Recompile only, no logic change.
      *
      * W105621 RMC 10/10/2022 INCREASE FIELD SIZES TO HANDLE PRICES > 999.99
      *         CHANGE @@ANPRPR TO SIZE 10.6
      *           CHANGES CLANPRPR IN TFP022
      *         CHANGE @@NCLPR  TO SIZE 10.6
      *           CHANGES CLNCLPR IN TFP022
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd412    cf   e             workstn sfile(tf412s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Ftfl022b   if   e           k disk    infds(dbfeed)
      *    Claims adjustments
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D view            c                   'VIEW  '
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Save fields for restrictors, positioners and selectors
      *
     D svwemdy         s                   like(c1wemdy)
     D svcono          s                   like(c1cono)
     D svclno          s                   like(c1clno)
     D svclorno        s                   like(c1clorno)
     D svmmty          s                   like(c1mmty)
     D svynfl          s                   like(c1ynfl)
     D svmmno          s                   like(c1mmno)
     D svprcd          s                   like(c1prcd)
     D svrpfl          s                   like(c1rpfl)
     D svrpdept        s                   like(c1rpdept)
     D svrscd          s                   like(c1rscd)
     D svdscd          s                   like(c1dscd)
      *
      *
      * Parm fields
      *
     D xxrpt           s              1
     D xxynfl          s              1
      *
     D xxfmdy          s                   like(c1wemdy)
     D xxfcymd         s              8  0
     D xxtmdy          s                   like(c1wemdy)
     D xxtcymd         s              8  0
      *
     D xxmmty          s                   like(c1mmty)
     D xxmmtyds        s             11
      *
     D xxprcd          s                   like(c1prcd)
     D xxprds          s             30
      *
     D xxcono          s                   like(c1cono)
     D xxclno          s                   like(c1clno)
     D xxclorno        s                   like(c1clorno)
     D xxmmno          s                   like(c1mmno)
     D xxrpfl          s                   like(c1rpfl)
     D xxrpdept        s                   like(c1rpdept)
     D xxrscd          s                   like(c1rscd)
     D xxdscd          s                   like(c1dscd)
     D xxdsds          s             20
      *
     D xxmode          s              1
     D xxreturn        s              1
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
     D wkwedt          s                   like(clwedt)
      *
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d1opt                          2
     D   wkopt1                       1    overlay(d1opt)
     D   wkopt2                       1    overlay(d1opt:2)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     tf412k1
     C                   write     tf412ec
     C                   exfmt     tf412c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   exsr      $chksv
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
     C                   when      *in07 = *on                                  F7-listing
     C                   call      'TF4120'
     C                   parm      *blank        xxrpt
     C                   parm      c1wemdy       xxfmdy
     C                   parm      0             xxfcymd
     C                   parm      c1wemdy       xxtmdy
     C                   parm      0             xxtcymd
     C                   parm      c1cono        xxcono
     C                   parm      c1clno        xxclno
     C                   parm      c1ynfl        xxynfl
     C                   parm      c1clorno      xxclorno
     C                   parm      c1mmty        xxmmty
     C                   parm      c1mmno        xxmmno
     C                   parm      c1prcd        xxprcd
     C                   parm      c1rpfl        xxrpfl
     C                   parm      c1rpdept      xxrpdept
     C                   parm      c1rscd        xxrscd
     C                   parm      c1dscd        xxdscd
     C                   parm      *blank        rtncd
      *
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in10 = *on                                  F20-W/W claims
     C                   eval      routne = scrn1
     C                   call      'PPK2DFR'
     C                   parm      '  '          xxreturn
     C                   parm      'D'           xxmode
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      svwemdy  <> c1wemdy  or
     C                             svcono   <> c1cono   or
     C                             svclno   <> c1clno   or
     C                             svclorno <> c1clorno or
     C                             svmmty   <> c1mmty   or
     C                             svynfl   <> c1ynfl   or
     C                             svprcd   <> c1prcd   or
     C                             svmmno   <> c1mmno   or
     C                             svrpfl   <> c1rpfl   or
     C                             svrpdept <> c1rpdept or
     C                             svrscd   <> c1rscd or
     C                             svdscd   <> c1dscd
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   eval      routne = edit1
     C                   endif                                                  If empty sfl
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   z-add     c1wemdy       svwemdy
     C                   z-add     c1cono        svcono
     C                   z-add     c1clno        svclno
     C                   z-add     c1clorno      svclorno
     C                   z-add     c1mmno        svmmno
     C                   z-add     c1prcd        svprcd
     C                   move      c1mmty        svmmty
     C                   move      c1ynfl        svynfl
     C                   move      c1rpfl        svrpfl
     C                   move      c1rpdept      svrpdept
     C                   move      c1rscd        svrscd
     C                   move      c1dscd        svdscd
      *
      *
      * Flip date selector from mmddyy to ccyymmdd format
      *
     C     *mdy          test(d)                 c1wemdy                92
     C                   if        *in92 = *on                                  If bad date
     C                   z-add     0             wkwedt
     C                   else
     C     *mdy          move      c1wemdy       wkisodate
     C                   move      wkisodate     wkwedt
     C                   endif                                                  If bad date
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * First, edit all the selections entered by the user in the
      * subfile option field to see that valid selections were input
      *
     C                   exsr      $edop1
      *
      * If there are no errors in the subfile option selectors entered
      * by the user, then execute the subroutine to reread and process
      * the records selected by the user.  After completing the
      * subroutine, set the routine to start over.
      *
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
      *
     C                   if        rtncd = '00'
     C                   eval      routne = set1
     C                   else
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
     C                   endif
      *
      * else there were errors in the subfile options entered,
      * so set to redisplay screen with errors to user
      *
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   tf412s1
     C                   seton                                        83        sflclr
     C                   write     tf412c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C                   if        c1wemdy = 0
     C     *hival        setll     tfl022b
     C                   else
     C     wkwedt        setll     tfl022b
     C                   endif
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   eval      count = 0
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C                   read      tfl022b                                82
     C                   if        *in82 = *off                                 If read
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1cono <> 0 and                               If company
     C                             c1cono <> clcono
     C                   else
      *
     C                   if        c1clno <> 0 and                               If claim nbr
     C                             c1clno <> clclno
     C                   else
      *
     C                   if        c1clorno <> 0 and                             If claim ord #
     C                             c1clorno <> clclorno
     C                   else
      *
     C                   if        c1mmno <> 0 and                               If memo nbr
     C                             c1mmno <> clmmno
     C                   else
      *
     C                   if        c1mmty <> *blank and                          If memo type
     C                             c1mmty <> clmmty
     C                   else
      *
     C                   if        c1prcd <> 0 and                               If product
     C                             c1prcd <> clprcd
     C                   else
      *
     C                   if        c1rpfl <> *blank and                          If resp flag
     C                             c1rpfl <> clrpfl
     C                   else
      *
     C                   if        c1rpdept <> *blank and                        If resp dept
     C                             c1rpdept <> clrpdept
     C                   else
      *
     C                   if        c1rscd <> *blank and                          If reason code
     C                             c1rscd <> clrscd
     C                   else
      *
     C                   if        c1dscd <> *blank and                          If data source
     C                             c1dscd <> cldscd
     C                   else
      *
     C                   if        c1ynfl = yes and clcutycd <> 'IS'             If not affiliated
     C                   else
      *
     C                   if        c1ynfl = no and clcutycd = 'IS'               If not affiliated
     C                   else
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   move      *blank        d1opt
     C                   z-add     clmmlnno      hdmmlnno
     C                   z-add     clcllnno      hdcllnno
     C                   z-add     clwedt        hdwedt
     C                   z-add     clmmno        d1mmno
     C                   move      cldscd        d1dscd
     C                   move      clmmty        d1mmty
     C                   z-add     clcono        d1cono
     C                   z-add     clclno        d1clno
     C                   z-add     clclorno      d1clorno
     C                   z-add     clprcd        d1prcd
     C                   move      clrpfl        d1rpfl
     C                   move      clrpdept      d1rpdept
     C                   move      clrscd        d1rscd
      *
      * Set the Yes/No flag to indicate whether this is a Claim for an Affiliated Sales
      * Customer.  Y=Yes, this is a Claim for an Affiliated Sales Customer
      *            N=No,  this is not a Claim for an Affiliated Sales Customer
      *
     C                   if        clcutycd = 'IS'
     C                   move      yes           d1ynfl
     C                   else
     C                   move      no            d1ynfl
     C                   endif
      *
      * Flip week-ending date to MMDDYY format
      *
     C     *iso          test(d)                 clwedt                 92
     C                   if        *in92 = *off                                 If OK end
     C                   move      clwedt        wkisodate
     C     *mdy          move      wkisodate     d1wemdy
     C                   endif                                                  If OK end
      *
     C                   write     tf412s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If affiliated
     C                   endif                                                  If not affiliated
     C                   endif                                                  If data source
     C                   endif                                                  If reason code
     C                   endif                                                  If resp dept
     C                   endif                                                  If resp flag
     C                   endif                                                  If product
     C                   endif                                                  If memo type
     C                   endif                                                  If memo nbr
     C                   endif                                                  If claim ord #
     C                   endif                                                  If claim nbr
     C                   endif                                                  If company
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------------
      * Read and edit changed subfile records for valid subfile options on Screen 1
      *-------------------------------------------------------------------------------
      *
     C     $edop1        begsr
      *
     C                   z-add     0             error
      *
      * Read all changed subfile records, editing for valid options
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do readc
     C                   readc     tf412s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set off error indicator for subfile option field
      *
     C                   setoff                                       30
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be standardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
      * Test for valid subfile option entry on all changed records
      *
     C                   if        d1opt <> ' 5' and                            If bad opt
     C                             d1opt <> '  '
     C                   seton                                        3085
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09006'
     C                   exsr      $err1
     C                   endif
     C                   else
      *
      * Rewrite the subfile record with the modified data tag on so it
      * will be reread and processed.
      *
     C                   if        d1opt <> *blank                              If good option
     C                   seton                                        85
     C                   else
     C                   setoff                                       85
     C                   endif                                                  If good option
     C                   endif                                                  If bad opt
      *
     C                   update    tf412s1
     C                   setoff                                       8530
     C                   endif                                                  If rec read
     C                   enddo                                                  Do readc
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Read subfile records and process user selections for Screen 1
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
     C                   z-add     0             error
     C                   movel     '00'          rtncd
      *
      *
      * Read all the changed subfile records processing the subfile
      * selection
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     tf412s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
     C                   if        rtncd = '00'                                 If enter
      *
      * If user selected option 5=view,
      * set the flag 'reset' to YES so that when you return to this
      * Work With you will reposition to the same place in the subfile
      *
     C                   select
     C                   when      d1opt = ' 5'
     C                   movel     yes           reset
     C                   call      'TF712'
     C                   parm                    d1mmno
     C                   parm                    hdmmlnno
     C                   parm                    d1clno
     C                   parm                    hdcllnno
     C                   endsl
      *
      * Upon returning from the called program,
      * clear the subfile option selected by the user and rewrite
      * the subfile record.
      *
     C                   move      *blank        d1opt
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif                                                  If enter
      *
     C                   update    tf412s1
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Data source code
     C                   select
     C                   when      fld = 'C1DSCD'
     C                   call      'TF517'
     C                   parm      *blank        xxdscd
     C                   parm      *blank        xxdsds
     C                   seton                                        51
     C                   if        xxdscd <> *blank
     C                   movel     xxdscd        c1dscd
     C                   endif
      *
      * Yes/No on Display Affiliated Sales
      *
     C                   when      fld = 'C1YNFL'
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
     C                   seton                                        53
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1ynfl
     C                   endif
      *
      *
      * Product code
     C                   when      fld = 'C1PRCD'
     C                   call      'TF504'
     C                   parm      0             xxprcd
     C                   parm      *blank        xxprds
     C                   seton                                        52
     C                   if        xxprcd <> 0
     C                   z-add     xxprcd        c1prcd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors on Screen 1
      *-------------------------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *   none
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     11            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
