// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDSAPFR
// ?Date: 14.08.2025 Time: 12:04:25
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?RMC PFS019 8/21/06  show on hand from item bal a lieu from Item Lot Loc
//?RMC PFS019 9/12/06 age code: chg 90 days to 120
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?USER: Record selection processing

//?SEL: Warehouse Code
CASE;

// IF PAR.Warehouse Code is Warehouse Code not Blank
IF PAR.Warehouse_Code <> *BLANK;

// AND PAR.Warehouse Code NE DB1.Warehouse Code
AND PAR.Warehouse_Code <> DB1.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(X1PG_Warehouse_Desc_DRV);
PARAMETER(X1PG_Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Freezer Inventry Rpt Type
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Freezer_Inventry_Rpt_Type);

CASE;

// IF 1PG.Qty On-Hand USR is EQ Zero
IF X1PG_Qty_On_Hand_USR = *ZERO;

// 1PG.Text USR = CON.*ALL
X1PG_Text_USR = *ALL;

ENDIF;

// 1PG.Age Description Usr = Condition name of PAR.Age Code
X1PG_Age_Description_Usr = RTVCND(PAR.Age_Code);

//?RMC PFS019 9/12/06 chg 90 days to 120
CASE;

// IF PAR.Age Code is H: 7 Days to 119 Days
IF PAR.Age_Code = 'H';

// 1PG.Aged Date Usr 2 = JOB.*Job date + CON.-120 *DAYS
X1PG_Aged_Date_Usr_2 = DATEINCR(JOB.*Job_date '-120' 'DY' 1111111 'NONE' 'N' 1);

// IF PAR.Age Code is I: 120 Days +
IF PAR.Age_Code = 'I';

// 1PG.Aged Date Usr 2 = JOB.*Job date + CON.-120 *DAYS
X1PG_Aged_Date_Usr_2 = DATEINCR(JOB.*Job_date '-120' 'DY' 1111111 'NONE' 'N' 1);

// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Aged Date Usr 2 = CON.*ZERO
X1PG_Aged_Date_Usr_2 = *ZERO;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// CUR.USR MMDD Today = JOB.*Job date
CUR.USR_MMDD_Today = JOB.*Job_date;

// WRK.USR Date - ATR = JOB.*Job date + CON.1 *DAYS
WRK.USR_Date_ATR = DATEINCR(JOB.*Job_date 1 'DY' 1111111 'NONE' 'N' 1);

// CUR.USR MMDD 1 = WRK.USR Date - ATR
CUR.USR_MMDD_1 = WRK.USR_Date_ATR;

// WRK.USR Date - ATR = JOB.*Job date + CON.2 *DAYS
WRK.USR_Date_ATR = DATEINCR(JOB.*Job_date 2 'DY' 1111111 'NONE' 'N' 1);

// CUR.USR MMDD 2 = WRK.USR Date - ATR
CUR.USR_MMDD_2 = WRK.USR_Date_ATR;

// WRK.USR Date - ATR = JOB.*Job date + CON.3 *DAYS
WRK.USR_Date_ATR = DATEINCR(JOB.*Job_date 3 'DY' 1111111 'NONE' 'N' 1);

// CUR.USR MMDD 3 = WRK.USR Date - ATR
CUR.USR_MMDD_3 = WRK.USR_Date_ATR;

// WRK.USR Date - ATR = JOB.*Job date + CON.4 *DAYS
WRK.USR_Date_ATR = DATEINCR(JOB.*Job_date 4 'DY' 1111111 'NONE' 'N' 1);

// CUR.USR MMDD 4 = WRK.USR Date - ATR
CUR.USR_MMDD_4 = WRK.USR_Date_ATR;

// WRK.USR Date - ATR = JOB.*Job date + CON.5 *DAYS
WRK.USR_Date_ATR = DATEINCR(JOB.*Job_date 5 'DY' 1111111 'NONE' 'N' 1);

// CUR.USR MMDD 5 = WRK.USR Date - ATR
CUR.USR_MMDD_5 = WRK.USR_Date_ATR;

// WRK.USR Date - ATR = JOB.*Job date + CON.6 *DAYS
WRK.USR_Date_ATR = DATEINCR(JOB.*Job_date 6 'DY' 1111111 'NONE' 'N' 1);

// CUR.USR MMDD 6 = WRK.USR Date - ATR
CUR.USR_MMDD_6 = WRK.USR_Date_ATR;

// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW Warehouse_Code;
// SUPPRESSED PRINT Warehouse Code header format

ENDIF;

CASE;

IF NEW Item_Code;
// SUPPRESSED PRINT Item Code header format

ENDIF;

//?USER: On print of detail format

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CUR.Item_Desc_DRV);
PARAMETER(CUR.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// CUR.Text USR 23 = CUR.Item Desc DRV
CUR.Text_USR_23 = CUR.Item_Desc_DRV;

// CUR.Quantity Inv On-Hand USR = CUR.On Hand U/M1 Summary
CUR.Quantity_Inv_On_Hand_USR = CUR.On_Hand_UOM1_Summary;

EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Quality_Level);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?07/28/05 SLM Allow selection based on aging.
//?record select on aging will be done inside the RTV.
EXECUTE FUNCTION(Rtv Fzn minus Shpmt   RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1601324;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(CUR.Quantity_Loc_On_Hand_USR);
PARAMETER(CUR.Quantity_Loc_Trans_USR);
PARAMETER(WRK.Quantity_Loc_Alloc_USR);
PARAMETER(CUR.Quantity_Loc_Avail_USR);
PARAMETER(CUR.Quantity_Loc_Hold_USR);
PARAMETER(CUR.Weight_Open_7_0_USR);
PARAMETER(CUR.Quantity_Avail_USR);
PARAMETER(CUR.Inv_Hold_Reason_1_USR);
PARAMETER(CUR.Inv_Hold_Reason_2_USR);
PARAMETER(CUR.Inv_Hold_Reason_3_USR);
PARAMETER(CUR.Inv_Hold_Qty_1_USR);
PARAMETER(CUR.Inv_Hold_Qty_2_USR);
PARAMETER(CUR.Inv_Hold_Qty_3_USR);
PARAMETER(PAR.Unit_Weight);
PARAMETER(CUR.Quantity_Avail_USR_1);
PARAMETER(CUR.Quantity_Avail_USR_2);
PARAMETER(CUR.Quantity_Avail_USR_3);
PARAMETER(CUR.Quantity_Avail_USR_4);
PARAMETER(CUR.Quantity_Avail_USR_5);
PARAMETER(CUR.Quantity_Avail_USR_6);
PARAMETER(PAR.Age_Code);
{
 //?USER: Initialize routine

 //?07/28/05 SLM Age Code Selection
 MOVE *ALL (To: PAR From: CON);

 // WRK.USR Day 1 = JOB.*Job date + CON.1 *DAYS
 WRK.USR_Day_1 = DATEINCR(JOB.*Job_date 1 'DY' 1111111 'NONE' 'N' 1);

 // WRK.USR Day 2 = JOB.*Job date + CON.2 *DAYS
 WRK.USR_Day_2 = DATEINCR(JOB.*Job_date 2 'DY' 1111111 'NONE' 'N' 1);

 // WRK.USR Day 3 = JOB.*Job date + CON.3 *DAYS
 WRK.USR_Day_3 = DATEINCR(JOB.*Job_date 3 'DY' 1111111 'NONE' 'N' 1);

 // WRK.USR Day 4 = JOB.*Job date + CON.4 *DAYS
 WRK.USR_Day_4 = DATEINCR(JOB.*Job_date 4 'DY' 1111111 'NONE' 'N' 1);

 // WRK.USR Day 5 = JOB.*Job date + CON.5 *DAYS
 WRK.USR_Day_5 = DATEINCR(JOB.*Job_date 5 'DY' 1111111 'NONE' 'N' 1);

 // WRK.USR Day 6 = JOB.*Job date + CON.6 *DAYS
 WRK.USR_Day_6 = DATEINCR(JOB.*Job_date 6 'DY' 1111111 'NONE' 'N' 1);

 //?RMC PFS019 9/12/06 age code: chg 90 days to 120
 CASE;

 // IF PAR.Age Code is 7 Days to 120 Days
 IF PAR.Age_Code = 'H';

 // LCL.Aged Date Usr = JOB.*Job date + CON.-120 *DAYS
 LCL.Aged_Date_Usr = DATEINCR(JOB.*Job_date '-120' 'DY' 1111111 'NONE' 'N' 1);

 // IF PAR.Age Code is 120 Days +
 IF PAR.Age_Code = 'I';

 // LCL.Aged Date Usr = JOB.*Job date + CON.-120 *DAYS
 LCL.Aged_Date_Usr = DATEINCR(JOB.*Job_date '-120' 'DY' 1111111 'NONE' 'N' 1);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Aged Date Usr = CON.*ZERO
 LCL.Aged_Date_Usr = *ZERO;

 ENDIF;

 //?USER: Process Data record

 // LCL.*Record selected = CND.*YES
 LCL.*Record_selected = 'Y';

 //?Determine if within Aged Code
 CASE;

 // IF PAR.Age Code is Blank
 IF PAR.Age_Code = *BLANK;

 //?Determine if within Aged Code
 // IF PAR.Age Code is 7 Days to 120 Days
 IF PAR.Age_Code = 'H';

 //?The Age Date is from this date to future.
 CASE;

 // IF DB1.Production Date GE LCL.Aged Date Usr
 IF DB1.Production_Date >= LCL.Aged_Date_Usr;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.*Record selected = CND.*NO
 LCL.*Record_selected = 'N';

 ENDIF;

 //?Determine if within Aged Code
 // IF PAR.Age Code is 120 Days +
 IF PAR.Age_Code = 'I';

 CASE;

 // IF DB1.Production Date LT LCL.Aged Date Usr
 IF DB1.Production_Date < LCL.Aged_Date_Usr;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.*Record selected = CND.*NO
 LCL.*Record_selected = 'N';

 ENDIF;

 //?Determine if within Aged Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.*Record selected = CND.*NO
 LCL.*Record_selected = 'N';

 ENDIF;

 CASE;

 // IF LCL.*Record selected is *YES
 IF LCL.*Record_selected = 'Y';

 // PAR.Quantity Loc On-Hand USR = PAR.Quantity Loc On-Hand USR + DB1.ILL Item Qty On-Hand
 PAR.Quantity_Loc_On_Hand_USR = PAR.Quantity_Loc_On_Hand_USR + DB1.ILL_Item_Qty_On_Hand;

 //?Frozen Quantity
 CASE;

 // IF DB1.ILL Avail Ship Date LE JOB.*Job date
 IF DB1.ILL_Avail_Ship_Date <= JOB.*Job_date;

 CASE;

 // IF DB1.ILL Status is Available
 IF DB1.ILL_Status = 'A';

 // PAR.Quantity Loc Trans USR = PAR.Quantity Loc Trans USR + DB1.ILL Item Qty On-Ha
 PAR.Quantity_Loc_Trans_USR = PAR.Quantity_Loc_Trans_USR + DB1.ILL_Item_Qty_On_Hand;

 ENDIF;

 ENDIF;

 //?Hold Quantity
 CASE;

 // IF DB1.ILL Status is Hold
 IF DB1.ILL_Status = 'H';

 // PAR.Quantity Loc Hold USR = PAR.Quantity Loc Hold USR + DB1.ILL Item Qty On-Hand
 PAR.Quantity_Loc_Hold_USR = PAR.Quantity_Loc_Hold_USR + DB1.ILL_Item_Qty_On_Hand;

 CASE;

 // IF DB1.Inv Hold Reason Code is Plant
 IF DB1.Inv_Hold_Reason_Code = 'PL';

 // PAR.Inv Hold Reason 1 USR = CND.Plant
 PAR.Inv_Hold_Reason_1_USR = 'PL';

 // PAR.Inv Hold Qty 1 USR = PAR.Inv Hold Qty 1 USR + DB1.ILL Item Qty On-Hand
 PAR.Inv_Hold_Qty_1_USR = PAR.Inv_Hold_Qty_1_USR + DB1.ILL_Item_Qty_On_Hand;

 // IF DB1.Inv Hold Reason Code is Quality
 IF DB1.Inv_Hold_Reason_Code = 'QA';

 // PAR.Inv Hold Reason 2 USR = CND.Quality
 PAR.Inv_Hold_Reason_2_USR = 'QA';

 // PAR.Inv Hold Qty 2 USR = PAR.Inv Hold Qty 2 USR + DB1.ILL Item Qty On-Hand
 PAR.Inv_Hold_Qty_2_USR = PAR.Inv_Hold_Qty_2_USR + DB1.ILL_Item_Qty_On_Hand;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Inv Hold Reason 3 USR = CND.Special Handling
 PAR.Inv_Hold_Reason_3_USR = 'SH';

 // PAR.Inv Hold Qty 3 USR = PAR.Inv Hold Qty 3 USR + DB1.ILL Item Qty On-Hand
 PAR.Inv_Hold_Qty_3_USR = PAR.Inv_Hold_Qty_3_USR + DB1.ILL_Item_Qty_On_Hand;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv Allocated Qty     RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1514260;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Lot_Number);
 PARAMETER(DB1.Location_Code);
 PARAMETER(DB1.Location_Level);
 PARAMETER(PAR.OIA_Alloc_Shipped_Qty);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.OIA Alloc/Shipped Qty = PAR.OIA Alloc/Shipped Qty + DB1.OIA Alloc/Shipped Qt
  PAR.OIA_Alloc_Shipped_Qty = PAR.OIA_Alloc_Shipped_Qty + DB1.OIA_Alloc_Shipped_Qty;

 }

 // PAR.Quantity Loc Alloc USR = PAR.Quantity Loc Alloc USR + PAR.OIA Alloc/Shipped
 PAR.Quantity_Loc_Alloc_USR = PAR.Quantity_Loc_Alloc_USR + PAR.OIA_Alloc_Shipped_Qty;

 // LCL.Quantity Avail USR = DB1.ILL Item Qty On-Hand - PAR.OIA Alloc/Shipped Qty
 LCL.Quantity_Avail_USR = DB1.ILL_Item_Qty_On_Hand - PAR.OIA_Alloc_Shipped_Qty;

 // LCL.Quantity Loc Avail USR = LCL.Quantity Loc Avail USR + PAR.Quantity Avail USR
 LCL.Quantity_Loc_Avail_USR = LCL.Quantity_Loc_Avail_USR + PAR.Quantity_Avail_USR;

 //?PK0200
 //?Frozen Quantity   Today
 CASE;

 // IF DB1.ILL Avail Ship Date LE JOB.*Job date
 IF DB1.ILL_Avail_Ship_Date <= JOB.*Job_date;

 CASE;

 // IF DB1.ILL Status is Available
 IF DB1.ILL_Status = 'A';

 // PAR.Quantity Avail USR = PAR.Quantity Avail USR + DB1.ILL Item Qty On-Hand
 PAR.Quantity_Avail_USR = PAR.Quantity_Avail_USR + DB1.ILL_Item_Qty_On_Hand;

 ENDIF;

 ENDIF;

 //?Frozen Quantity  +1 day
 CASE;

 // IF DB1.ILL Avail Ship Date LE WRK.USR Day 1
 IF DB1.ILL_Avail_Ship_Date <= WRK.USR_Day_1;

 CASE;

 // IF DB1.ILL Status is Available
 IF DB1.ILL_Status = 'A';

 // PAR.Quantity Avail USR 1 = PAR.Quantity Avail USR 1 + DB1.ILL Item Qty On-Hand
 PAR.Quantity_Avail_USR_1 = PAR.Quantity_Avail_USR_1 + DB1.ILL_Item_Qty_On_Hand;

 ENDIF;

 ENDIF;

 //?Frozen Quantity  +2 days
 CASE;

 // IF DB1.ILL Avail Ship Date LE WRK.USR Day 2
 IF DB1.ILL_Avail_Ship_Date <= WRK.USR_Day_2;

 CASE;

 // IF DB1.ILL Status is Available
 IF DB1.ILL_Status = 'A';

 // PAR.Quantity Avail USR 2 = PAR.Quantity Avail USR 2 + DB1.ILL Item Qty On-Hand
 PAR.Quantity_Avail_USR_2 = PAR.Quantity_Avail_USR_2 + DB1.ILL_Item_Qty_On_Hand;

 ENDIF;

 ENDIF;

 //?Frozen Quantity  +3 days
 CASE;

 // IF DB1.ILL Avail Ship Date LE WRK.USR Day 3
 IF DB1.ILL_Avail_Ship_Date <= WRK.USR_Day_3;

 CASE;

 // IF DB1.ILL Status is Available
 IF DB1.ILL_Status = 'A';

 // PAR.Quantity Avail USR 3 = PAR.Quantity Avail USR 3 + DB1.ILL Item Qty On-Hand
 PAR.Quantity_Avail_USR_3 = PAR.Quantity_Avail_USR_3 + DB1.ILL_Item_Qty_On_Hand;

 ENDIF;

 ENDIF;

 //?Frozen Quantity  +4 days
 CASE;

 // IF DB1.ILL Avail Ship Date LE WRK.USR Day 4
 IF DB1.ILL_Avail_Ship_Date <= WRK.USR_Day_4;

 CASE;

 // IF DB1.ILL Status is Available
 IF DB1.ILL_Status = 'A';

 // PAR.Quantity Avail USR 4 = PAR.Quantity Avail USR 4 + DB1.ILL Item Qty On-Hand
 PAR.Quantity_Avail_USR_4 = PAR.Quantity_Avail_USR_4 + DB1.ILL_Item_Qty_On_Hand;

 ENDIF;

 ENDIF;

 //?Frozen Quantity  +5 days
 CASE;

 // IF DB1.ILL Avail Ship Date LE WRK.USR Day 5
 IF DB1.ILL_Avail_Ship_Date <= WRK.USR_Day_5;

 CASE;

 // IF DB1.ILL Status is Available
 IF DB1.ILL_Status = 'A';

 // PAR.Quantity Avail USR 5 = PAR.Quantity Avail USR 5 + DB1.ILL Item Qty On-Hand
 PAR.Quantity_Avail_USR_5 = PAR.Quantity_Avail_USR_5 + DB1.ILL_Item_Qty_On_Hand;

 ENDIF;

 ENDIF;

 //?Frozen Quantity  +6 days
 CASE;

 // IF DB1.ILL Avail Ship Date LE WRK.USR Day 6
 IF DB1.ILL_Avail_Ship_Date <= WRK.USR_Day_6;

 CASE;

 // IF DB1.ILL Status is Available
 IF DB1.ILL_Status = 'A';

 // PAR.Quantity Avail USR 6 = PAR.Quantity Avail USR 6 + DB1.ILL Item Qty On-Hand
 PAR.Quantity_Avail_USR_6 = PAR.Quantity_Avail_USR_6 + DB1.ILL_Item_Qty_On_Hand;

 ENDIF;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 // PAR.Weight Open  7.0      USR = LCL.Quantity Loc Avail USR * PAR.Unit Weight *Rounded
 PAR.Weight_Open_7_0_USR = LCL.Quantity_Loc_Avail_USR * PAR.Unit_Weight 'H';

 //?Subtract Sched shipments from what is Avail to ship
 EXECUTE FUNCTION(Rtv Sch Shps CurDteAgeRT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1745567;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(JOB.*Job_date);
 PARAMETER(LCL.Weight_Scheduled_SUM);
 PARAMETER(LCL.Quantity_Scheduled_SUM);
 PARAMETER(PAR.Age_Code);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Age Code is Blank
  IF PAR.Age_Code = *BLANK;

  // OR PAR.Age Code EQ DB1.Age Code
  OR PAR.Age_Code = DB1.Age_Code;

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  ENDIF;

  ENDIF;

 }

 // PAR.Quantity Avail USR = PAR.Quantity Avail USR - LCL.Quantity Scheduled SUM
 PAR.Quantity_Avail_USR = PAR.Quantity_Avail_USR - LCL.Quantity_Scheduled_SUM;

 EXECUTE FUNCTION(Rtv Sch Shps CurDteAgeRT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1745567;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.USR_Day_1);
 PARAMETER(LCL.Weight_Scheduled_SUM);
 PARAMETER(LCL.Quantity_Scheduled_SUM);
 PARAMETER(PAR.Age_Code);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Age Code is Blank
  IF PAR.Age_Code = *BLANK;

  // OR PAR.Age Code EQ DB1.Age Code
  OR PAR.Age_Code = DB1.Age_Code;

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  ENDIF;

  ENDIF;

 }

 // PAR.Quantity Avail USR 1 = PAR.Quantity Avail USR 1 - LCL.Quantity Scheduled SUM
 PAR.Quantity_Avail_USR_1 = PAR.Quantity_Avail_USR_1 - LCL.Quantity_Scheduled_SUM;

 EXECUTE FUNCTION(Rtv Sch Shps CurDteAgeRT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1745567;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.USR_Day_2);
 PARAMETER(LCL.Weight_Scheduled_SUM);
 PARAMETER(LCL.Quantity_Scheduled_SUM);
 PARAMETER(PAR.Age_Code);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Age Code is Blank
  IF PAR.Age_Code = *BLANK;

  // OR PAR.Age Code EQ DB1.Age Code
  OR PAR.Age_Code = DB1.Age_Code;

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  ENDIF;

  ENDIF;

 }

 // PAR.Quantity Avail USR 2 = PAR.Quantity Avail USR 2 - LCL.Quantity Scheduled SUM
 PAR.Quantity_Avail_USR_2 = PAR.Quantity_Avail_USR_2 - LCL.Quantity_Scheduled_SUM;

 EXECUTE FUNCTION(Rtv Sch Shps CurDteAgeRT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1745567;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.USR_Day_3);
 PARAMETER(LCL.Weight_Scheduled_SUM);
 PARAMETER(LCL.Quantity_Scheduled_SUM);
 PARAMETER(PAR.Age_Code);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Age Code is Blank
  IF PAR.Age_Code = *BLANK;

  // OR PAR.Age Code EQ DB1.Age Code
  OR PAR.Age_Code = DB1.Age_Code;

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  ENDIF;

  ENDIF;

 }

 // PAR.Quantity Avail USR 3 = PAR.Quantity Avail USR 3 - LCL.Quantity Scheduled SUM
 PAR.Quantity_Avail_USR_3 = PAR.Quantity_Avail_USR_3 - LCL.Quantity_Scheduled_SUM;

 EXECUTE FUNCTION(Rtv Sch Shps CurDteAgeRT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1745567;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.USR_Day_4);
 PARAMETER(LCL.Weight_Scheduled_SUM);
 PARAMETER(LCL.Quantity_Scheduled_SUM);
 PARAMETER(PAR.Age_Code);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Age Code is Blank
  IF PAR.Age_Code = *BLANK;

  // OR PAR.Age Code EQ DB1.Age Code
  OR PAR.Age_Code = DB1.Age_Code;

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  ENDIF;

  ENDIF;

 }

 // PAR.Quantity Avail USR 4 = PAR.Quantity Avail USR 4 - LCL.Quantity Scheduled SUM
 PAR.Quantity_Avail_USR_4 = PAR.Quantity_Avail_USR_4 - LCL.Quantity_Scheduled_SUM;

 EXECUTE FUNCTION(Rtv Sch Shps CurDteAgeRT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1745567;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.USR_Day_5);
 PARAMETER(LCL.Weight_Scheduled_SUM);
 PARAMETER(LCL.Quantity_Scheduled_SUM);
 PARAMETER(PAR.Age_Code);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Age Code is Blank
  IF PAR.Age_Code = *BLANK;

  // OR PAR.Age Code EQ DB1.Age Code
  OR PAR.Age_Code = DB1.Age_Code;

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  ENDIF;

  ENDIF;

 }

 // PAR.Quantity Avail USR 5 = PAR.Quantity Avail USR 5 - LCL.Quantity Scheduled SUM
 PAR.Quantity_Avail_USR_5 = PAR.Quantity_Avail_USR_5 - LCL.Quantity_Scheduled_SUM;

 EXECUTE FUNCTION(Rtv Sch Shps CurDteAgeRT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1745567;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(WRK.USR_Day_6);
 PARAMETER(LCL.Weight_Scheduled_SUM);
 PARAMETER(LCL.Quantity_Scheduled_SUM);
 PARAMETER(PAR.Age_Code);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Age Code is Blank
  IF PAR.Age_Code = *BLANK;

  // OR PAR.Age Code EQ DB1.Age Code
  OR PAR.Age_Code = DB1.Age_Code;

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  ENDIF;

  ENDIF;

 }

 // PAR.Quantity Avail USR 6 = PAR.Quantity Avail USR 6 - LCL.Quantity Scheduled SUM
 PAR.Quantity_Avail_USR_6 = PAR.Quantity_Avail_USR_6 - LCL.Quantity_Scheduled_SUM;

}


// LCL.USR To Date = JOB.*Job date + CON.14 *DAYS
LCL.USR_To_Date = DATEINCR(JOB.*Job_date 14 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(RTV Act Ordrs/f 14days RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1561156;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(LCL.USR_To_Date);
PARAMETER(CUR.Quantity_Loc_Order_USR);
PARAMETER(PAR.Age_Code);
{
 //?USER: Initialize routine

 // PAR.USR Quantity = CON.*ZERO
 PAR.USR_Quantity = *ZERO;

 //?USER: Process Data record

 //?07/07/09 rmc added comp to hdr sts/billing act
 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Age Code is Blank
 IF PAR.Age_Code = *BLANK;

 // OR PAR.Age Code EQ DB1.Age Code
 OR PAR.Age_Code = DB1.Age_Code;

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 // PAR.USR Quantity = PAR.USR Quantity + DB1.Quantity Ordered
 PAR.USR_Quantity = PAR.USR_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


//?10/01/01 Show 1 wk order qty - Hide last day of inventory position
// LCL.USR To Date = JOB.*Job date + CON.07 *DAYS
LCL.USR_To_Date = DATEINCR(JOB.*Job_date 07 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(RTV Act Ordrs/f 14days RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1561156;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(LCL.USR_To_Date);
PARAMETER(CUR.Quantity_Loc_Order_7_USR);
PARAMETER(PAR.Age_Code);
{
 //?USER: Initialize routine

 // PAR.USR Quantity = CON.*ZERO
 PAR.USR_Quantity = *ZERO;

 //?USER: Process Data record

 //?07/07/09 rmc added comp to hdr sts/billing act
 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Age Code is Blank
 IF PAR.Age_Code = *BLANK;

 // OR PAR.Age Code EQ DB1.Age Code
 OR PAR.Age_Code = DB1.Age_Code;

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 // PAR.USR Quantity = PAR.USR Quantity + DB1.Quantity Ordered
 PAR.USR_Quantity = PAR.USR_Quantity + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


//?RMC PFS019  8/21/06  Show on hand from Item Bal a lieu from Lot Loc
// CUR.Weight 1 USR = CUR.Quantity Inv On-Hand USR * PAR.Unit Weight *
CUR.Weight_1_USR = CUR.Quantity_Inv_On_Hand_USR * PAR.Unit_Weight;

//?If Quantities = Zero, do not print format.
CASE;

// IF CUR.Quantity Loc Hold USR is Equal to Zero
IF CUR.Quantity_Loc_Hold_USR = *ZERO;

// AND CUR.Quantity Loc On-Hand USR is Equal to Zero
AND CUR.Quantity_Loc_On_Hand_USR = *ZERO;

// AND CUR.Quantity Loc Trans USR is Equal to Zero
AND CUR.Quantity_Loc_Trans_USR = *ZERO;

// AND CUR.Quantity Loc Order USR is Equal to Zero
AND CUR.Quantity_Loc_Order_USR = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?SEL:  Located Qty <= Quantity entered on the prompt
CASE;

// IF PAR.Qty On-Hand USR is GT Zero
IF PAR.Qty_On_Hand_USR > *ZERO;

CASE;

// IF CUR.Quantity Loc On-Hand USR GT PAR.Qty On-Hand USR
IF CUR.Quantity_Loc_On_Hand_USR > PAR.Qty_On_Hand_USR;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

//?USER: Process after print of detail format

CASE;

// IF PGM.*Print format is Print format
IF PGM.*Print_format = 'Y';

NXT.Weight_1_SUM = SUM(CUR.Weight_1_USR);

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Warehouse Code totals format

// SUPPRESSED PRINT Company Number totals format

