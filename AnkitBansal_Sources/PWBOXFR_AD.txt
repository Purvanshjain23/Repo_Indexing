// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWBOXFR
// ?Date: 14.08.2025 Time: 02:55:54
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification history
DO;

//? 4/28/2017 JBB E9904 - Push second payment to Triumph Foods
//?                       Copy Triumph Owned payments from Company
//?                       440 to Company 961.
//? 8/28/2017 JBB E9904 - Push second payment to Triumph Foods
//?                       No more checking Kill Date.
//? 8/28/2017 JBB E9904 - Push second payment to Triumph Foods
//?                       Moving the company 440 value in the field
//?                       TH Recalc Live Wgt Yld instead of setting
//?                       it to 0.00
//? 7/13/2017 JBB E9904 - Push second payment to Triumph Foods
//?                       Added Tattoo Header Ext. file to Push.
//? 7/13/2017 JBB E9904 - Push second payment to Triumph Foods
//?                       Zero out price and amount values on the
//?                       Tattoo Header and Tattoo Header EXT records
//?                       created on the Push To side.
//? 7/12/2017 JBB E9904 - Push second payment to Triumph Foods
//?                       Added Kill Date as an input parameter.
//?                       The value may be entered for testing, but
//?                       it will always be zero when installed in
//?                       production.
//? 6/12/2017 JBB E9904 - Push second payment to Triumph Foods
//?                       Added logic to change the Tattoo Header
//?                       Payment Status from Paid to Select on the
//?                       961 create or update.
//? 7/03/2018 JBB E13291 - Push second payment to Triumph Foods
//?                        Added logic to delete Loss Trans records
//?                        before creating new records.  Also delete
//?                        all associated Carcass Detail records.
//?                        Use Pricing Date when retrieving the
//?                        Carcass Merit Program from the Producer
//?                        Sub-Contract file.
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

EXECUTE FUNCTION(Upd Push TO Records   RT) TYPE(RTVOBJ) FILE(PKBLCPP)           AB1333452;
PARAMETER(PAR.Push_From_Company);
PARAMETER(PAR.Push_To_Company);
PARAMETER(PAR.Push_Type);
{
 //?USER: Initialize routine

 //?Note: This RTVOBJ is built over an Access Path that only selects
 //?      records where the Push Payment Status is either blank, or is
 //?      "N".  This was done to speed up the push process.
 //?USER: Process Data record

 //?Move Push Payment Status to Push Status
 // PAR.Push Status = DB1.VCD Push Payment Status
 PAR.Push_Status = DB1.VCD_Push_Payment_Status;

 //?Only process Triumph Owned records
 CASE;

 // IF DB1.VCD Source Code is Triumph Member (Owner)
 IF DB1.VCD_Source_Code = 'TO';

 //?Check Push Type and Repayment flag
 CASE;

 // IF PAR.Push Type is Manual
 IF PAR.Push_Type = 'M';

 // AND NOT DB1.VCD Repayment Flag is Repayment
 AND ! DB1.VCD_Repayment_Flag = 'R';

 // LCL.Push Status = DB1.VCD Push Payment Status
 LCL.Push_Status = DB1.VCD_Push_Payment_Status;

 //?Check Push Type and Repayment flag
 // IF PAR.Push Type is Automatic
 IF PAR.Push_Type = 'A';

 // AND DB1.VCD Repayment Flag is Repayment
 AND DB1.VCD_Repayment_Flag = 'R';

 // LCL.Push Status = DB1.VCD Push Payment Status
 LCL.Push_Status = DB1.VCD_Push_Payment_Status;

 //?Check Push Type and Repayment flag
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If Producer or Location changes, check Xref file for overrides
 CASE;

 // IF DB1.PD Producer Code is Blank
 IF DB1.PD_Producer_Code = *BLANK;

 // OR DB1.PL Location Code is Blank
 OR DB1.PL_Location_Code = *BLANK;

 // LCL.Producer Code         USR = CON.*BLANK
 LCL.Producer_Code_USR = *BLANK;

 // LCL.Location Code USR = CON.*BLANK
 LCL.Location_Code_USR = *BLANK;

 // LCL.Process Flag User = CND.No
 LCL.Process_Flag_User = 'N';

 // LCL.Push Status = DB1.VCD Push Payment Status
 LCL.Push_Status = DB1.VCD_Push_Payment_Status;

 //?If Producer or Location changes, check Xref file for overrides
 // IF DB1.PD Producer Code NE LCL.Producer Code         USR
 IF DB1.PD_Producer_Code <> LCL.Producer_Code_USR;

 // OR DB1.PL Location Code NE LCL.Location Code USR
 OR DB1.PL_Location_Code <> LCL.Location_Code_USR;

 // LCL.Producer Code         USR = DB1.PD Producer Code
 LCL.Producer_Code_USR = DB1.PD_Producer_Code;

 // LCL.Location Code USR = DB1.PL Location Code
 LCL.Location_Code_USR = DB1.PL_Location_Code;

 // LCL.Process Flag User = CND.Yes
 LCL.Process_Flag_User = 'Y';

 EXECUTE FUNCTION(Rtv From Vals for To  RT) TYPE(RTVOBJ) FILE(PWADCPP)           AB1334720;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(LCL.Producer_From);
 PARAMETER(LCL.Producer_Location_From);
 PARAMETER(NLL.PLF_Status_1);
 PARAMETER(NLL.PLF_Status_2);
 PARAMETER(NLL.PLF_Status_3);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?If record is active
  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

 }

 //?If Producer Location From/TO record found, check values
 CASE;

 // IF LCL.Producer From is Entered
 IF LCL.Producer_From <> *BLANK;

 //?If From and To values are different, then override from value
 CASE;

 // IF DB1.PD Producer Code NE LCL.Producer From
 IF DB1.PD_Producer_Code <> LCL.Producer_From;

 // OR DB1.PL Location Code NE LCL.Producer Location From
 OR DB1.PL_Location_Code <> LCL.Producer_Location_From;

 // LCL.PD Producer Code = LCL.Producer From
 LCL.PD_Producer_Code = LCL.Producer_From;

 // LCL.PL Location Code = LCL.Producer Location From
 LCL.PL_Location_Code = LCL.Producer_Location_From;

 //?If From and To values are different, then override from value
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PD Producer Code = DB1.PD Producer Code
 LCL.PD_Producer_Code = DB1.PD_Producer_Code;

 // LCL.PL Location Code = DB1.PL Location Code
 LCL.PL_Location_Code = DB1.PL_Location_Code;

 ENDIF;

 //?If Producer Location From/TO record found, check values
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Process Flag User = CND.No
 LCL.Process_Flag_User = 'N';

 // LCL.Push Status = CND.Ignored
 LCL.Push_Status = 'I';

 ENDIF;

 ENDIF;

 //?If Process Flag is Yes, perform updates
 CASE;

 // IF LCL.Process Flag User is Yes
 IF LCL.Process_Flag_User = 'Y';

 //?When Buy Order Number changes value
 CASE;

 // IF DB1.BOH Buy Order Number NE LCL.BOH Buy Order Number
 IF DB1.BOH_Buy_Order_Number <> LCL.BOH_Buy_Order_Number;

 // LCL.BOH Buy Order Number = DB1.BOH Buy Order Number
 LCL.BOH_Buy_Order_Number = DB1.BOH_Buy_Order_Number;

 // LCL.BOL Load Number = CON.*ZERO
 LCL.BOL_Load_Number = *ZERO;

 // LCL.TH Tattoo Number = CON.*ZERO
 LCL.TH_Tattoo_Number = *ZERO;

 // LCL.TH Kill Date = CON.*ZERO
 LCL.TH_Kill_Date = *ZERO;

 EXECUTE FUNCTION(Rtv Pricing Date by BO RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1345803;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(LCL.TH_Pricing_Date);
 {
  //?USER: Initialize routine

  // PAR.TH Pricing Date = CON.*ZERO
  PAR.TH_Pricing_Date = *ZERO;

  //?USER: Process Data record

  //?If Pricing Date <> 0, return value to calling function
  CASE;

  // IF DB1.TH Pricing Date is Entered
  IF DB1.TH_Pricing_Date <> *ZERO;

  // PAR.TH Pricing Date = DB1.TH Pricing Date
  PAR.TH_Pricing_Date = DB1.TH_Pricing_Date;

  QUIT;

  ENDIF;

 }

 //?If Pricing Date = 0, use Kill Date
 CASE;

 // IF LCL.TH Pricing Date is Not Entered
 IF LCL.TH_Pricing_Date = *ZERO;

 // LCL.TH Pricing Date = DB1.TH Kill Date
 LCL.TH_Pricing_Date = DB1.TH_Kill_Date;

 ENDIF;

 //?The PD Producer Code and PL Location Code values come from the
 //?Xref file Producer Location From/TO file using the from values.
 EXECUTE FUNCTION(Upd Push TO Records   RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1333471;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(PAR.Push_To_Company);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 PARAMETER(LCL.TH_Pricing_Date);
 {
  //?USER: Process Data record

  //?Retrieve latest Contract Code from the Push To Producer Contract
  EXECUTE FUNCTION(Rtv Curr CAK f/ Prd   RT) TYPE(RTVOBJ) FILE(PKAPCPP)           AB1337091;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(LCL.PC_Contract_Code);
  {
   //?USER: Initialize routine

   // LCL.PC Contract Date = CON.*ZERO
   LCL.PC_Contract_Date = *ZERO;

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?If Record Status is Active
   CASE;

   // IF DB1.RS Record Status is Active
   IF DB1.RS_Record_Status = 'A';

   //?Return current contract by date
   CASE;

   // IF DB1.PC Contract Date GT LCL.PC Contract Date
   IF DB1.PC_Contract_Date > LCL.PC_Contract_Date;

   // LCL.PC Contract Date = DB1.PC Contract Date
   LCL.PC_Contract_Date = DB1.PC_Contract_Date;

   // PAR.PC Contract Code = DB1.PC Contract Code
   PAR.PC_Contract_Code = DB1.PC_Contract_Code;

   ENDIF;

   ENDIF;

  }

  //?If record not found, use the current Buy Order Header value
  CASE;

  // IF NOT PGM.*Return code is *Normal
  IF ! PGM.*Return_code = *BLANK;

  // LCL.PC Contract Code = DB1.PC Contract Code
  LCL.PC_Contract_Code = DB1.PC_Contract_Code;

  ENDIF;

  //?Retrieve the latest Sub-Contract info for the Contract
  EXECUTE FUNCTION(Rtv SC#, Gen, PO, Pgm RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1336941;
  PARAMETER(LCL.PC_Contract_Code);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.TH_Pricing_Date);
  PARAMETER(LCL.PSC_Sub_Contract_Code);
  PARAMETER(LCL.PSC_Commodity_Market_Code);
  PARAMETER(LCL.PSC_Commodity_Price_Group);
  PARAMETER(LCL.GN_Genetic_Code);
  PARAMETER(LCL.PO_Option_Code);
  PARAMETER(LCL.CMP_Program_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   //?Retrieve first record only to get the latest values
   QUIT;

  }

  //?If record not found, use the current Buy Order Header value
  CASE;

  // IF NOT PGM.*Return code is *Normal
  IF ! PGM.*Return_code = *BLANK;

  // LCL.PSC Sub-Contract Code = DB1.PSC Sub-Contract Code
  LCL.PSC_Sub_Contract_Code = DB1.PSC_Sub_Contract_Code;

  // LCL.CMP Program Code = DB1.CMP Program Code
  LCL.CMP_Program_Code = DB1.CMP_Program_Code;

  // LCL.PO Option Code = DB1.PO Option Code
  LCL.PO_Option_Code = DB1.PO_Option_Code;

  // LCL.GN Genetic Code = DB1.GN Genetic Code
  LCL.GN_Genetic_Code = DB1.GN_Genetic_Code;

  // LCL.HB Buyer Code = DB1.HB Buyer Code
  LCL.HB_Buyer_Code = DB1.HB_Buyer_Code;

  ENDIF;

  //?Retrieve Buyer Code from Producer for the From Producer Code
  EXECUTE FUNCTION(Rtv Producer Record   RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1119700;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(NLL.PD_Name);
  PARAMETER(NLL.PD_Production_Capacity);
  PARAMETER(NLL.PD_Std_Delv_Time);
  PARAMETER(NLL.PD_Std_Truck_Size);
  PARAMETER(NLL.PD_Freight_Exp_Paid_By);
  PARAMETER(NLL.PD_Fax_Status);
  PARAMETER(NLL.PD_VND_Address_Number);
  PARAMETER(NLL.PD_EDI_Trading_Partner_#);
  PARAMETER(NLL.PD_VND_Category);
  PARAMETER(NLL.SR_Source_Code);
  PARAMETER(LCL.HB_Buyer_Code);
  PARAMETER(NLL.Commission_Producer_Payee);
  PARAMETER(NLL.RS_User_Changed);
  PARAMETER(NLL.RS_Date_Changed);
  PARAMETER(NLL.RS_Time_Changed);
  PARAMETER(NLL.RS_Record_Status);
  PARAMETER(NLL.RS_Job);
  PARAMETER(NLL.RS_Program);
  PARAMETER(NLL.RS_User_Added);
  PARAMETER(NLL.RS_Date_Added);
  PARAMETER(NLL.RS_Time_Added);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If record not found, use the current Hog Voucher Detail values.
  CASE;

  // IF NOT PGM.*Return code is *Normal
  IF ! PGM.*Return_code = *BLANK;

  // LCL.HB Buyer Code = DB1.HB Buyer Code
  LCL.HB_Buyer_Code = DB1.HB_Buyer_Code;

  ENDIF;

  EXECUTE FUNCTION(Upd Push TO Records   CR) TYPE(CRTOBJ) FILE(PKAWCPP)           AB1333472;
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOH_Buy_Order_Date);
  PARAMETER(DB1.BOH_Kill_Date);
  PARAMETER(DB1.BOH_Payment_Type);
  PARAMETER(DB1.BOH_Buy_Order_Type);
  PARAMETER(DB1.BOH_Market_Add_Deduct);
  PARAMETER(DB1.BOH_Status);
  PARAMETER(DB1.BOH_Delv_Plan_Printed);
  PARAMETER(DB1.BOH_Quote_Price_Type);
  PARAMETER(DB1.BOH_Quoted_Base_Mkt_Price);
  PARAMETER(LCL.PSC_Commodity_Market_Code);
  PARAMETER(LCL.PSC_Commodity_Price_Group);
  PARAMETER(DB1.BOH_Market_Date_Method);
  PARAMETER(DB1.BOH_MPR_Reporting_Date);
  PARAMETER(DB1.BOH_Hedge_Date);
  PARAMETER(DB1.BOH_Unused_Date_3);
  PARAMETER(DB1.BOH_Unused_Date_4);
  PARAMETER(DB1.BOH_Unused_Date_5);
  PARAMETER(DB1.BOH_Hedge_Head_Total);
  PARAMETER(DB1.BOH_Hedge_Reference_BO);
  PARAMETER(DB1.BOH_Hedge_Time_hhmm);
  PARAMETER(DB1.BOH_Unused_Nbr_4);
  PARAMETER(DB1.BOH_Unused_Nbr_5);
  PARAMETER(DB1.BOH_Unused_Nbr_6);
  PARAMETER(DB1.BOH_Unused_Nbr_7);
  PARAMETER(DB1.BOH_Unused_Nbr_8);
  PARAMETER(DB1.BOH_Unused_Nbr_9);
  PARAMETER(DB1.BOH_Unused_Nbr_10);
  PARAMETER(DB1.BOH_MPR_Reporting_Time);
  PARAMETER(DB1.BOH_MPR_EST_RPT_STS);
  PARAMETER(DB1.BOH_MPR_Purchase_Type);
  PARAMETER(DB1.BOH_Status_4);
  PARAMETER(DB1.BOH_Status_5);
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.CW_Year);
  PARAMETER(DB1.CW_Week_Number);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(LCL.PC_Contract_Code);
  PARAMETER(LCL.PSC_Sub_Contract_Code);
  PARAMETER(LCL.GN_Genetic_Code);
  PARAMETER(LCL.PO_Option_Code);
  PARAMETER(LCL.CMP_Program_Code);
  PARAMETER(LCL.HB_Buyer_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp w/o Sts IF) TYPE(EXCINTFUN)                      AB1340927;
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Upd Push TO Records   CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1340929;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOH_Buy_Order_Date);
   PARAMETER(PAR.BOH_Kill_Date);
   PARAMETER(PAR.BOH_Payment_Type);
   PARAMETER(PAR.BOH_Buy_Order_Type);
   PARAMETER(PAR.BOH_Market_Add_Deduct);
   PARAMETER(PAR.BOH_Status);
   PARAMETER(PAR.BOH_Delv_Plan_Printed);
   PARAMETER(PAR.BOH_Quote_Price_Type);
   PARAMETER(PAR.BOH_Quoted_Base_Mkt_Price);
   PARAMETER(PAR.BOH_Commodity_Market_Code);
   PARAMETER(PAR.BOH_Commodity_Price_Group);
   PARAMETER(PAR.BOH_Market_Date_Method);
   PARAMETER(PAR.BOH_MPR_Reporting_Date);
   PARAMETER(PAR.BOH_Hedge_Date);
   PARAMETER(PAR.BOH_Unused_Date_3);
   PARAMETER(PAR.BOH_Unused_Date_4);
   PARAMETER(PAR.BOH_Unused_Date_5);
   PARAMETER(PAR.BOH_Hedge_Head_Total);
   PARAMETER(PAR.BOH_Hedge_Reference_BO);
   PARAMETER(PAR.BOH_Hedge_Time_hhmm);
   PARAMETER(PAR.BOH_Unused_Nbr_4);
   PARAMETER(PAR.BOH_Unused_Nbr_5);
   PARAMETER(PAR.BOH_Unused_Nbr_6);
   PARAMETER(PAR.BOH_Unused_Nbr_7);
   PARAMETER(PAR.BOH_Unused_Nbr_8);
   PARAMETER(PAR.BOH_Unused_Nbr_9);
   PARAMETER(PAR.BOH_Unused_Nbr_10);
   PARAMETER(PAR.BOH_MPR_Reporting_Time);
   PARAMETER(PAR.BOH_MPR_EST_RPT_STS);
   PARAMETER(PAR.BOH_MPR_Purchase_Type);
   PARAMETER(PAR.BOH_Status_4);
   PARAMETER(PAR.BOH_Status_5);
   PARAMETER(PAR.PPWS_Company_Number);
   PARAMETER(PAR.CW_Year);
   PARAMETER(PAR.CW_Week_Number);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PL_Location_Code);
   PARAMETER(PAR.PC_Contract_Code);
   PARAMETER(PAR.PSC_Sub_Contract_Code);
   PARAMETER(PAR.GN_Genetic_Code);
   PARAMETER(PAR.PO_Option_Code);
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(PAR.HB_Buyer_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 ENDIF;

 //?When Load Number changes value
 CASE;

 // IF DB1.BOL Load Number NE LCL.BOL Load Number
 IF DB1.BOL_Load_Number <> LCL.BOL_Load_Number;

 // LCL.BOL Load Number = DB1.BOL Load Number
 LCL.BOL_Load_Number = DB1.BOL_Load_Number;

 // LCL.TH Tattoo Number = CON.*ZERO
 LCL.TH_Tattoo_Number = *ZERO;

 // LCL.TH Kill Date = CON.*ZERO
 LCL.TH_Kill_Date = *ZERO;

 EXECUTE FUNCTION(Upd Push TO Records   RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1333482;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.Push_To_Company);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 {
  //?USER: Process Data record

  //?The PD Producer Code and PL Location Code values come from the
  //?Xref file Producer Location From/TO file with the from values.
  EXECUTE FUNCTION(Upd Push TO Records   CR) TYPE(CRTOBJ) FILE(PKAXCPP)           AB1333483;
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Kill_Date);
  PARAMETER(DB1.BOL_Pln_Delv_Start_Time);
  PARAMETER(DB1.BOL_Pln_Delv_End_Time);
  PARAMETER(DB1.BOL_Pln_Head_Delv);
  PARAMETER(DB1.BOL_Shipped_Wgt);
  PARAMETER(DB1.BOL_Pln_Delv_Date);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(DB1.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(DB1.BOL_Head_Received);
  PARAMETER(DB1.BOL_Live_Wgt_Received);
  PARAMETER(DB1.BOL_Trucker_Payment_Sts);
  PARAMETER(DB1.BOL_Trucker_Check_Number);
  PARAMETER(DB1.BOL_Trucker_Check_Date);
  PARAMETER(DB1.BOL_AP_Voucher);
  PARAMETER(DB1.BOL_Trailer);
  PARAMETER(DB1.BOL_Freight_Exp_Paid_By);
  PARAMETER(DB1.BOL_Scheduled_Kill_Shift);
  PARAMETER(DB1.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Shipped_Head);
  PARAMETER(DB1.Reported_to_USDA);
  PARAMETER(DB1.BOL_MPR_Prior_Day_Prch);
  PARAMETER(DB1.BOL_Violated_Auth_Tme_Sts);
  PARAMETER(DB1.BOL_Status_5);
  PARAMETER(DB1.BOL_Status_6);
  PARAMETER(DB1.BOL_Status_7);
  PARAMETER(DB1.BOL_HPS_Movement_Number);
  PARAMETER(DB1.BOL_Head_LFT);
  PARAMETER(DB1.BOL_Head_EUT_KOA);
  PARAMETER(DB1.BOL_Auth_Gate_Entry_Time);
  PARAMETER(DB1.BOL_Head_Received_Market);
  PARAMETER(DB1.BOL_Unused_Wgt_1);
  PARAMETER(DB1.BOL_Unused_Wgt_2);
  PARAMETER(DB1.BOL_Unused_Wgt_3);
  PARAMETER(DB1.BOL_Unused_Wgt_4);
  PARAMETER(DB1.BOL_Unused_Wgt_5);
  PARAMETER(DB1.BOL_Auth_Gate_Entry_Date);
  PARAMETER(DB1.BOL_Unused_Date_2);
  PARAMETER(DB1.BOL_Unused_Date_3);
  PARAMETER(DB1.BOL_Unused_Date_4);
  PARAMETER(DB1.BOL_Unused_Date_5);
  PARAMETER(DB1.TRK_Trucker_Code);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp w/o Sts IF) TYPE(EXCINTFUN)                      AB1340927;
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Chg Push TO Records   CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1333484;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(PAR.BOL_Kill_Date);
   PARAMETER(PAR.BOL_Pln_Delv_Start_Time);
   PARAMETER(PAR.BOL_Pln_Delv_End_Time);
   PARAMETER(PAR.BOL_Pln_Head_Delv);
   PARAMETER(PAR.BOL_Shipped_Wgt);
   PARAMETER(PAR.BOL_Pln_Delv_Date);
   PARAMETER(PAR.BOL_Freight_UOM);
   PARAMETER(PAR.BOL_Freight_Unit_Amt);
   PARAMETER(PAR.BOL_Freight_Amt);
   PARAMETER(PAR.BOL_Freight_Allocation);
   PARAMETER(PAR.BOL_Head_Received);
   PARAMETER(PAR.BOL_Live_Wgt_Received);
   PARAMETER(PAR.BOL_Trucker_Payment_Sts);
   PARAMETER(PAR.BOL_Trucker_Check_Number);
   PARAMETER(PAR.BOL_Trucker_Check_Date);
   PARAMETER(PAR.BOL_AP_Voucher);
   PARAMETER(PAR.BOL_Trailer);
   PARAMETER(PAR.BOL_Freight_Exp_Paid_By);
   PARAMETER(PAR.BOL_Scheduled_Kill_Shift);
   PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
   PARAMETER(PAR.BOL_Shipped_Head);
   PARAMETER(PAR.Reported_to_USDA);
   PARAMETER(PAR.BOL_MPR_Prior_Day_Prch);
   PARAMETER(PAR.BOL_Violated_Auth_Tme_Sts);
   PARAMETER(PAR.BOL_Status_5);
   PARAMETER(PAR.BOL_Status_6);
   PARAMETER(PAR.BOL_Status_7);
   PARAMETER(PAR.BOL_HPS_Movement_Number);
   PARAMETER(PAR.BOL_Head_LFT);
   PARAMETER(PAR.BOL_Head_EUT_KOA);
   PARAMETER(PAR.BOL_Auth_Gate_Entry_Time);
   PARAMETER(PAR.BOL_Head_Received_Market);
   PARAMETER(PAR.BOL_Unused_Wgt_1);
   PARAMETER(PAR.BOL_Unused_Wgt_2);
   PARAMETER(PAR.BOL_Unused_Wgt_3);
   PARAMETER(PAR.BOL_Unused_Wgt_4);
   PARAMETER(PAR.BOL_Unused_Wgt_5);
   PARAMETER(PAR.BOL_Auth_Gate_Entry_Date);
   PARAMETER(PAR.BOL_Unused_Date_2);
   PARAMETER(PAR.BOL_Unused_Date_3);
   PARAMETER(PAR.BOL_Unused_Date_4);
   PARAMETER(PAR.BOL_Unused_Date_5);
   PARAMETER(PAR.TRK_Trucker_Code);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PL_Location_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 EXECUTE FUNCTION(Upd Push TO Records   RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1333485;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.Push_To_Company);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 {
  //?USER: Process Data record

  //?The PD Producer Code and PL Location Code values come from the
  //?Xref file Producer Location From/TO file with the from values.
  EXECUTE FUNCTION(Crt Push TO Records   CR) TYPE(CRTOBJ) FILE(PKEJCPP)           AB1333486;
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(DB1.BOLW_Movement_Number);
  PARAMETER(DB1.BOLW_Weight_Type);
  PARAMETER(DB1.BOLW_Scale_Weight);
  PARAMETER(DB1.BOLW_Scale_Weight_Date);
  PARAMETER(DB1.BOLW_Scale_Weight_Time);
  PARAMETER(DB1.BOLW_Spread_Status);
  PARAMETER(DB1.BOLW_Unused_Sts_1);
  PARAMETER(DB1.BOLW_Unused_Sts_2);
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp w/o Sts IF) TYPE(EXCINTFUN)                      AB1340927;
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Chg Buy Order Load Wt CH) TYPE(CHGOBJ) FILE(PKEJCPP)           AB1213883;
   PARAMETER(DB1.CC_Company_Number);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PL_Location_Code);
   PARAMETER(PAR.BOLW_Movement_Number);
   PARAMETER(PAR.BOLW_Weight_Type);
   PARAMETER(PAR.BOLW_Scale_Weight);
   PARAMETER(PAR.BOLW_Scale_Weight_Date);
   PARAMETER(PAR.BOLW_Scale_Weight_Time);
   PARAMETER(PAR.BOLW_Spread_Status);
   PARAMETER(PAR.BOLW_Unused_Sts_1);
   PARAMETER(PAR.BOLW_Unused_Sts_2);
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 ENDIF;

 //?When Tattoo Number OR Kill Date changes value
 CASE;

 // IF DB1.TH Tattoo Number NE LCL.TH Tattoo Number
 IF DB1.TH_Tattoo_Number <> LCL.TH_Tattoo_Number;

 // OR DB1.TH Kill Date NE LCL.TH Kill Date
 OR DB1.TH_Kill_Date <> LCL.TH_Kill_Date;

 // LCL.TH Tattoo Number = DB1.TH Tattoo Number
 LCL.TH_Tattoo_Number = DB1.TH_Tattoo_Number;

 // LCL.TH Kill Date = DB1.TH Kill Date
 LCL.TH_Kill_Date = DB1.TH_Kill_Date;

 EXECUTE FUNCTION(Upd Push TO Records   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1333487;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.Push_To_Company);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 {
  //?USER: Process Data record

  //?Change TH Payment Status from Paid to Select for 961
  CASE;

  // IF DB1.TH Payment Sts is Paid Live
  IF DB1.TH_Payment_Sts = 'PL';

  // LCL.TH Payment Sts = CND.Select Live
  LCL.TH_Payment_Sts = 'SL';

  //?Change TH Payment Status from Paid to Select for 961
  // IF DB1.TH Payment Sts is PD Carcass Merit
  IF DB1.TH_Payment_Sts = 'PC';

  // LCL.TH Payment Sts = CND.Sl Carcass Merit
  LCL.TH_Payment_Sts = 'SC';

  //?Change TH Payment Status from Paid to Select for 961
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.TH Payment Sts = DB1.TH Payment Sts
  LCL.TH_Payment_Sts = DB1.TH_Payment_Sts;

  ENDIF;

  //?Change THP Process Code to either SLG or RECV based on Pymt Sts
  CASE;

  // IF DB1.TH Payment Sts is PD Carcass Merit
  IF DB1.TH_Payment_Sts = 'PC';

  // LCL.THP Process Code = CND.Slaughter
  LCL.THP_Process_Code = 'SLG';

  //?Change THP Process Code to either SLG or RECV based on Pymt Sts
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.THP Process Code = CND.Receiving
  LCL.THP_Process_Code = 'RECV';

  ENDIF;

  //?Retrieve Buyer Code from Producer for the From Producer Code
  EXECUTE FUNCTION(Rtv Producer Record   RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1119700;
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(NLL.PD_Name);
  PARAMETER(NLL.PD_Production_Capacity);
  PARAMETER(NLL.PD_Std_Delv_Time);
  PARAMETER(NLL.PD_Std_Truck_Size);
  PARAMETER(NLL.PD_Freight_Exp_Paid_By);
  PARAMETER(NLL.PD_Fax_Status);
  PARAMETER(NLL.PD_VND_Address_Number);
  PARAMETER(NLL.PD_EDI_Trading_Partner_#);
  PARAMETER(NLL.PD_VND_Category);
  PARAMETER(NLL.SR_Source_Code);
  PARAMETER(LCL.HB_Buyer_Code);
  PARAMETER(NLL.Commission_Producer_Payee);
  PARAMETER(NLL.RS_User_Changed);
  PARAMETER(NLL.RS_Date_Changed);
  PARAMETER(NLL.RS_Time_Changed);
  PARAMETER(NLL.RS_Record_Status);
  PARAMETER(NLL.RS_Job);
  PARAMETER(NLL.RS_Program);
  PARAMETER(NLL.RS_User_Added);
  PARAMETER(NLL.RS_Date_Added);
  PARAMETER(NLL.RS_Time_Added);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If record not found, use the current Hog Voucher Detail values.
  CASE;

  // IF NOT PGM.*Return code is *Normal
  IF ! PGM.*Return_code = *BLANK;

  // LCL.HB Buyer Code = DB1.HB Buyer Code
  LCL.HB_Buyer_Code = DB1.HB_Buyer_Code;

  ENDIF;

  EXECUTE FUNCTION(Crt Push TO Records   CR) TYPE(CRTOBJ) FILE(PKA1CPP)           AB1333488;
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TH_Purchase_Date);
  PARAMETER(DB1.TH_Group_Reference);
  PARAMETER(DB1.TH_Live_Purchase_UOM);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.TH_Resale_UOM);
  PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(DB1.TH_Pricing_Date);
  PARAMETER(DB1.TH_Resale_Spread_Sts);
  PARAMETER(DB1.TH_Dead_On_Arrival);
  PARAMETER(DB1.TH_Head_Received);
  PARAMETER(DB1.TH_Yard_Deads);
  PARAMETER(DB1.TH_Held_Over);
  PARAMETER(DB1.TH_Head_Condemned);
  PARAMETER(DB1.TH_Head_Killed);
  PARAMETER(DB1.TH_Head_Adds);
  PARAMETER(DB1.TH_Head_Accepted);
  PARAMETER(DB1.TH_Live_Wgt);
  PARAMETER(DB1.TH_Adj_Live_Wgt);
  PARAMETER(DB1.TH_Hot_Wgt);
  PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
  PARAMETER(DB1.TH_Tot_Backfat_Inches);
  PARAMETER(DB1.TH_Tot_Light_Reflectance);
  PARAMETER(DB1.TH_Avg_Live_Wgt);
  PARAMETER(DB1.TH_Avg_Hot_Wgt);
  PARAMETER(DB1.TH_Avg_Light_Reflectance);
  PARAMETER(DB1.TH_Avg_Lean_Percent);
  PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
  PARAMETER(DB1.TH_Avg_Backfat);
  PARAMETER(DB1.TH_Std_Yield_Percent);
  PARAMETER(DB1.TH_Actual_Yield);
  PARAMETER(DB1.TH_Adj_Actual_Yield);
  PARAMETER(DB1.TH_Yield_Difference);
  PARAMETER(DB1.TH_Recalc_Live_Wgt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.TH_AP_Voucher_Document#);
  PARAMETER(DB1.TH_Freight_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.TH_Calc_Net_Sts);
  PARAMETER(LCL.TH_Payment_Sts);
  PARAMETER(DB1.TH_Header_Error_Sts);
  PARAMETER(DB1.TH_Detail_Error_Sts);
  PARAMETER(DB1.TH_Kill_Balancing_Sts);
  PARAMETER(DB1.TH_Bal_to_Kill_Gen);
  PARAMETER(DB1.TH_Commission_A_P_Voucher);
  PARAMETER(DB1.TH_Voucher_Payment_Date);
  PARAMETER(DB1.TH_User_Error_Override);
  PARAMETER(DB1.TH_Held_Over_Record);
  PARAMETER(DB1.TH_Sex);
  PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
  PARAMETER(DB1.TH_Commission_Paid_Date);
  PARAMETER(DB1.TH_Actual_Check_Date);
  PARAMETER(DB1.TH_Shipped_Weight);
  PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(DB1.TH_FFLI);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.TH_Head_Excluded);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.TH_Source_Type);
  PARAMETER(DB1.TH_Scale_Ticket_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  PARAMETER(DB1.TH_HPS_Movement_Ref_#);
  PARAMETER(DB1.TH_Source_Code);
  PARAMETER(DB1.TH_Hog_Class_Type);
  PARAMETER(DB1.TH_Posted_to_HPS_Flag);
  PARAMETER(DB1.TH_Schedule_Kill_Shift);
  PARAMETER(DB1.TH_Shift_Held_Over);
  PARAMETER(DB1.TH_State);
  PARAMETER(DB1.TH_Unused_Code);
  PARAMETER(DB1.TH_Unused_Sts_2_Pos);
  PARAMETER(DB1.TH_Commission_Status);
  PARAMETER(DB1.TH_Paid_2_Week_Avg_Y_N);
  PARAMETER(DB1.TH_Unused_Sts_1_Pos_3);
  PARAMETER(DB1.TH_DOA_Weight);
  PARAMETER(DB1.TH_Avg_Lean_EXC_ADD);
  PARAMETER(DB1.TH_HPS_Farm_Site);
  PARAMETER(DB1.TH_Shift_Held_Over_Head);
  PARAMETER(*ZERO);
  PARAMETER(DB1.TH_Head_Identified);
  PARAMETER(DB1.TH_Percent_Identified);
  PARAMETER(DB1.TH_Percent_Accepted);
  PARAMETER(DB1.TH_Head_Adjusted_LN);
  PARAMETER(DB1.TH_PHA_Head_Adds);
  PARAMETER(DB1.TH_PHA_Add_Type);
  PARAMETER(DB1.TH_PHA_Average_Type);
  PARAMETER(DB1.TH_PHA_Add_Reason);
  PARAMETER(DB1.TH_PHA_Yield_Percent);
  PARAMETER(DB1.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.TH_Avg_Lean);
  PARAMETER(DB1.TH_Broken_Back_Hd_Count);
  PARAMETER(DB1.TH_Hot_Scl_Upload_Time);
  PARAMETER(DB1.TH_Unused_Nbr_4);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.TH_Unused_Nbr_7);
  PARAMETER(DB1.TH_Unused_Nbr_8);
  PARAMETER(DB1.TH_Unused_Nbr_9);
  PARAMETER(DB1.TH_Unused_Nbr_10);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.TH_Yld_Parm_Adj_Yield);
  PARAMETER(DB1.TH_PHA_Sort_Disc_Fctr);
  PARAMETER(DB1.TH_Avg_Loin_Eye_2_dec);
  PARAMETER(DB1.TH_Avg_Backfat_2_Dec);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.TH_Unused_Nbr_19);
  PARAMETER(DB1.TH_Unused_Nbr_20);
  PARAMETER(DB1.TH_Cold_Scl_Upload_Date);
  PARAMETER(DB1.TH_Cold_Scl_Upload_Time);
  PARAMETER(DB1.TH_Head_LFT);
  PARAMETER(DB1.TH_Head_EUT_KOA);
  PARAMETER(DB1.TH_Unused_Date_5);
  PARAMETER(DB1.TH_Unused_Sts_1);
  PARAMETER(DB1.TH_Unused_Sts_2);
  PARAMETER(DB1.TH_Unused_Sts_3);
  PARAMETER(DB1.TH_Unused_Sts_4);
  PARAMETER(DB1.TH_Unused_Sts_5);
  PARAMETER(DB1.TH_Unused_Sts_6);
  PARAMETER(DB1.TH_Unused_Sts_7);
  PARAMETER(DB1.TH_Unused_Sts_8);
  PARAMETER(DB1.DF_Defect_Code);
  PARAMETER(LCL.THP_Process_Code);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(LCL.HB_Buyer_Code);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp w/o Sts IF) TYPE(EXCINTFUN)                      AB1340927;
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Upd Push TO Records   CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1333489;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Purchase_Date);
   PARAMETER(PAR.TH_Group_Reference);
   PARAMETER(PAR.TH_Live_Purchase_UOM);
   PARAMETER(PAR.TH_Live_Purchase_Price);
   PARAMETER(PAR.TH_Live_Gross_Amt);
   PARAMETER(PAR.TH_LIve_Net_Amt);
   PARAMETER(PAR.TH_Resale_UOM);
   PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
   PARAMETER(PAR.TH_Pricing_Date);
   PARAMETER(PAR.TH_Resale_Spread_Sts);
   PARAMETER(PAR.TH_Dead_On_Arrival);
   PARAMETER(PAR.TH_Head_Received);
   PARAMETER(PAR.TH_Yard_Deads);
   PARAMETER(PAR.TH_Held_Over);
   PARAMETER(PAR.TH_Head_Condemned);
   PARAMETER(PAR.TH_Head_Killed);
   PARAMETER(PAR.TH_Head_Adds);
   PARAMETER(PAR.TH_Head_Accepted);
   PARAMETER(PAR.TH_Live_Wgt);
   PARAMETER(PAR.TH_Adj_Live_Wgt);
   PARAMETER(PAR.TH_Hot_Wgt);
   PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
   PARAMETER(PAR.TH_Tot_Backfat_Inches);
   PARAMETER(PAR.TH_Tot_Light_Reflectance);
   PARAMETER(PAR.TH_Avg_Live_Wgt);
   PARAMETER(PAR.TH_Avg_Hot_Wgt);
   PARAMETER(PAR.TH_Avg_Light_Reflectance);
   PARAMETER(PAR.TH_Avg_Lean_Percent);
   PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
   PARAMETER(PAR.TH_Avg_Backfat);
   PARAMETER(PAR.TH_Std_Yield_Percent);
   PARAMETER(PAR.TH_Actual_Yield);
   PARAMETER(PAR.TH_Adj_Actual_Yield);
   PARAMETER(PAR.TH_Yield_Difference);
   PARAMETER(PAR.TH_Recalc_Live_Wgt);
   PARAMETER(PAR.TH_CM_Market_Price);
   PARAMETER(PAR.TH_CM_Base_Mkt_Price);
   PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
   PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
   PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
   PARAMETER(PAR.TH_CM_Base_Carcass_Value);
   PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
   PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
   PARAMETER(PAR.TH_Deduction_Amt);
   PARAMETER(PAR.TH_Total_Net_WO_Adds);
   PARAMETER(PAR.TH_Carcass_Net_Amt);
   PARAMETER(PAR.TH_Additions_Amt);
   PARAMETER(PAR.TH_Payment_Gross);
   PARAMETER(PAR.Th_Payment_Net_Amt);
   PARAMETER(PAR.TH_AP_Voucher_Document#);
   PARAMETER(PAR.TH_Freight_Amount);
   PARAMETER(PAR.TH_Accrual_Amount);
   PARAMETER(PAR.TH_Fixed_Cost_Amount);
   PARAMETER(PAR.TH_Calc_Net_Sts);
   PARAMETER(PAR.TH_Payment_Sts);
   PARAMETER(PAR.TH_Header_Error_Sts);
   PARAMETER(PAR.TH_Detail_Error_Sts);
   PARAMETER(PAR.TH_Kill_Balancing_Sts);
   PARAMETER(PAR.TH_Bal_to_Kill_Gen);
   PARAMETER(PAR.TH_Commission_A_P_Voucher);
   PARAMETER(PAR.TH_Voucher_Payment_Date);
   PARAMETER(PAR.TH_User_Error_Override);
   PARAMETER(PAR.TH_Held_Over_Record);
   PARAMETER(PAR.TH_Sex);
   PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
   PARAMETER(PAR.TH_Commission_Paid_Date);
   PARAMETER(PAR.TH_Actual_Check_Date);
   PARAMETER(PAR.TH_Shipped_Weight);
   PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
   PARAMETER(PAR.TH_FFLI);
   PARAMETER(PAR.TH_Kill_Product_Value);
   PARAMETER(PAR.TH_Cut_Product_Value);
   PARAMETER(PAR.TH_Render_Product_Value);
   PARAMETER(PAR.TH_Head_Excluded);
   PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
   PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
   PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
   PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
   PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
   PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
   PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
   PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
   PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
   PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
   PARAMETER(PAR.TH_CM_Gross_Live_CWT);
   PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
   PARAMETER(PAR.TH_Source_Type);
   PARAMETER(PAR.TH_Scale_Ticket_Sts);
   PARAMETER(PAR.TH_Payment_Type);
   PARAMETER(PAR.TH_HPS_Movement_Ref_#);
   PARAMETER(PAR.TH_Source_Code);
   PARAMETER(PAR.TH_Hog_Class_Type);
   PARAMETER(PAR.TH_Posted_to_HPS_Flag);
   PARAMETER(PAR.TH_Schedule_Kill_Shift);
   PARAMETER(PAR.TH_Shift_Held_Over);
   PARAMETER(PAR.TH_State);
   PARAMETER(PAR.TH_Unused_Code);
   PARAMETER(PAR.TH_Unused_Sts_2_Pos);
   PARAMETER(PAR.TH_Commission_Status);
   PARAMETER(PAR.TH_Paid_2_Week_Avg_Y_N);
   PARAMETER(PAR.TH_Unused_Sts_1_Pos_3);
   PARAMETER(PAR.TH_DOA_Weight);
   PARAMETER(PAR.TH_Avg_Lean_EXC_ADD);
   PARAMETER(PAR.TH_HPS_Farm_Site);
   PARAMETER(PAR.TH_Shift_Held_Over_Head);
   PARAMETER(PAR.TH_Sorting_Amount);
   PARAMETER(PAR.TH_Head_Identified);
   PARAMETER(PAR.TH_Percent_Identified);
   PARAMETER(PAR.TH_Percent_Accepted);
   PARAMETER(PAR.TH_Head_Adjusted_LN);
   PARAMETER(PAR.TH_PHA_Head_Adds);
   PARAMETER(PAR.TH_PHA_Add_Type);
   PARAMETER(PAR.TH_PHA_Average_Type);
   PARAMETER(PAR.TH_PHA_Add_Reason);
   PARAMETER(PAR.TH_PHA_Yield_Percent);
   PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
   PARAMETER(PAR.TH_VC_Gross_Value_HD);
   PARAMETER(PAR.TH_Excluded_Gross_Value);
   PARAMETER(PAR.TH_Avg_Lean);
   PARAMETER(PAR.TH_Broken_Back_Hd_Count);
   PARAMETER(PAR.TH_Hot_Scl_Upload_Time);
   PARAMETER(PAR.TH_Unused_Nbr_4);
   PARAMETER(PAR.TH_Excluded_Carc_Val);
   PARAMETER(PAR.TH_Excluded_Premium);
   PARAMETER(PAR.TH_Unused_Nbr_7);
   PARAMETER(PAR.TH_Unused_Nbr_8);
   PARAMETER(PAR.TH_Unused_Nbr_9);
   PARAMETER(PAR.TH_Unused_Nbr_10);
   PARAMETER(PAR.TH_Break_Even_Price_CWT);
   PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
   PARAMETER(PAR.TH_Yld_Parm_Adj_Yield);
   PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
   PARAMETER(PAR.TH_Avg_Loin_Eye_2_dec);
   PARAMETER(PAR.TH_Avg_Backfat_2_Dec);
   PARAMETER(PAR.TH_HITCH_Old_Pay_Net_Amt);
   PARAMETER(PAR.TH_MPR_Sort_Loss);
   PARAMETER(PAR.TH_Unused_Nbr_19);
   PARAMETER(PAR.TH_Unused_Nbr_20);
   PARAMETER(PAR.TH_Cold_Scl_Upload_Date);
   PARAMETER(PAR.TH_Cold_Scl_Upload_Time);
   PARAMETER(PAR.TH_Head_LFT);
   PARAMETER(PAR.TH_Head_EUT_KOA);
   PARAMETER(PAR.TH_Unused_Date_5);
   PARAMETER(PAR.TH_Unused_Sts_1);
   PARAMETER(PAR.TH_Unused_Sts_2);
   PARAMETER(PAR.TH_Unused_Sts_3);
   PARAMETER(PAR.TH_Unused_Sts_4);
   PARAMETER(PAR.TH_Unused_Sts_5);
   PARAMETER(PAR.TH_Unused_Sts_6);
   PARAMETER(PAR.TH_Unused_Sts_7);
   PARAMETER(PAR.TH_Unused_Sts_8);
   PARAMETER(PAR.DF_Defect_Code);
   PARAMETER(PAR.THP_Process_Code);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PL_Location_Code);
   PARAMETER(PAR.HB_Buyer_Code);
   PARAMETER(PAR.GN_Genetic_Code);
   PARAMETER(PAR.HC_Class_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 EXECUTE FUNCTION(Upd Push TO Records   RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1338254;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.Push_To_Company);
 PARAMETER(LCL.PD_Producer_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Push TO Records   CR) TYPE(CRTOBJ) FILE(PKDNCPP)           AB1338255;
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.TH_Min_LT_Backfat_Inch);
  PARAMETER(DB1.TH_Min_LT_LoinEye_Inch);
  PARAMETER(DB1.TH_Min_LT_Hot_Wt_lb);
  PARAMETER(DB1.TH_Min_LT_Lean_Pct);
  PARAMETER(DB1.TH_Max_GT_Backfat_Inch);
  PARAMETER(DB1.TH_Max_GT_LoinEye_Inch);
  PARAMETER(DB1.TH_Max_GT_Hot_Wt_lb);
  PARAMETER(DB1.TH_Max_GT_Lean_Pct);
  PARAMETER(DB1.TH_Head_LT_Backfat_In_Min);
  PARAMETER(DB1.TH_Head_LT_LoinEye_In_Min);
  PARAMETER(DB1.TH_Head_LT_Hot_Wt_lb_Min);
  PARAMETER(DB1.TH_Head_LT_Lean_Pct_Min);
  PARAMETER(DB1.TH_Head_GT_Backfat_In_Max);
  PARAMETER(DB1.TH_Head_GT_LoinEye_In_Max);
  PARAMETER(DB1.TH_Head_GT_Hot_Wt_lb_Max);
  PARAMETER(DB1.TH_Head_GT_Lean_Pct_Max);
  PARAMETER(DB1.TE_Unused_Number_1);
  PARAMETER(DB1.TE_UnUsed_Number_2);
  PARAMETER(DB1.TE_Unused_Number_3);
  PARAMETER(DB1.TE_Unused_Status_1);
  PARAMETER(DB1.TE_Unused_Status_2);
  PARAMETER(DB1.TE_Unused_Status_3);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(DB1.PS_Site_ID);
  PARAMETER(DB1.Producer_Subsidiary_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp w/o Sts IF) TYPE(EXCINTFUN)                      AB1340927;
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Change Tattoo Header EXT) TYPE(CHGOBJ) FILE(PKDNCPP)           AB1176577;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_CA_Market_Price);
   PARAMETER(PAR.TH_CA_Base_Market_Price);
   PARAMETER(PAR.TH_CA_Base_Mkt_Price_Amt);
   PARAMETER(PAR.TH_CA_Sort_Discount_Amt);
   PARAMETER(PAR.TH_CA_Yield_Gain_Loss_Amt);
   PARAMETER(PAR.TH_CA_Base_Carcass_Value);
   PARAMETER(PAR.TH_CA_Lean_Premium_Amt);
   PARAMETER(PAR.TH_CA_Carcass_Gross_Amt);
   PARAMETER(PAR.TH_CA_Bse_Mkt_Live_CWT);
   PARAMETER(PAR.TH_CA_Bse_Mkt_Carc_CWT);
   PARAMETER(PAR.TH_CA_Srt_Dsc_Live_CWT);
   PARAMETER(PAR.TH_CA_Srt_Dsc_Carc_CWT);
   PARAMETER(PAR.TH_CA_Yld_G_L_Live_CWT);
   PARAMETER(PAR.TH_CA_Yld_G_L_Carc_CWT);
   PARAMETER(PAR.TH_CA_Crc_Val_Live_CWT);
   PARAMETER(PAR.TH_CA_Crc_Val_Carc_CWT);
   PARAMETER(PAR.TH_CA_Lean_Prm_Live_CWT);
   PARAMETER(PAR.TH_CA_Lean_Prm_Carc_CWT);
   PARAMETER(PAR.TH_CA_Gross_Live_CWT);
   PARAMETER(PAR.TH_CA_Gross_Carc_CWT);
   PARAMETER(PAR.TH_Min_LT_Backfat_Inch);
   PARAMETER(PAR.TH_Min_LT_LoinEye_Inch);
   PARAMETER(PAR.TH_Min_LT_Hot_Wt_lb);
   PARAMETER(PAR.TH_Min_LT_Lean_Pct);
   PARAMETER(PAR.TH_Max_GT_Backfat_Inch);
   PARAMETER(PAR.TH_Max_GT_LoinEye_Inch);
   PARAMETER(PAR.TH_Max_GT_Hot_Wt_lb);
   PARAMETER(PAR.TH_Max_GT_Lean_Pct);
   PARAMETER(PAR.TH_Head_LT_Backfat_In_Min);
   PARAMETER(PAR.TH_Head_LT_LoinEye_In_Min);
   PARAMETER(PAR.TH_Head_LT_Hot_Wt_lb_Min);
   PARAMETER(PAR.TH_Head_LT_Lean_Pct_Min);
   PARAMETER(PAR.TH_Head_GT_Backfat_In_Max);
   PARAMETER(PAR.TH_Head_GT_LoinEye_In_Max);
   PARAMETER(PAR.TH_Head_GT_Hot_Wt_lb_Max);
   PARAMETER(PAR.TH_Head_GT_Lean_Pct_Max);
   PARAMETER(PAR.TE_Unused_Number_1);
   PARAMETER(PAR.TE_UnUsed_Number_2);
   PARAMETER(PAR.TE_Unused_Number_3);
   PARAMETER(PAR.TE_Unused_Status_1);
   PARAMETER(PAR.TE_Unused_Status_2);
   PARAMETER(PAR.TE_Unused_Status_3);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PS_Site_ID);
   PARAMETER(PAR.Producer_Subsidiary_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 EXECUTE FUNCTION(Upd Push TO Records   RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1333490;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.Push_To_Company);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Upd Push TO Records   CR) TYPE(CRTOBJ) FILE(PKA2CPP)           AB1333491;
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(DB1.TD_Live_Wgt);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  PARAMETER(DB1.TD_Held_Over);
  PARAMETER(DB1.TD_Held_Over_Status);
  PARAMETER(DB1.TD_Drive_Time);
  PARAMETER(DB1.TD_Drive_Hour);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(DB1.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TDP_Process_Code);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp w/o Sts IF) TYPE(EXCINTFUN)                      AB1340927;
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Chg Tattoo Detail     CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1101751;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TD_Sequence_Number);
   PARAMETER(PAR.TD_Live_Wgt);
   PARAMETER(PAR.TD_Pen_Head);
   PARAMETER(PAR.TD_Yard_Dead);
   PARAMETER(PAR.TD_Held_Over);
   PARAMETER(PAR.TD_Held_Over_Status);
   PARAMETER(PAR.TD_Drive_Time);
   PARAMETER(PAR.TD_Drive_Hour);
   PARAMETER(PAR.TD_Drive_Card_Number);
   PARAMETER(PAR.TD_Avg_Live_Wgt);
   PARAMETER(PAR.TD_Gen_Bal_To_Kill);
   PARAMETER(PAR.TD_Recs_Created_for_HO);
   PARAMETER(PAR.TD_User_Status_2);
   PARAMETER(PAR.TD_User_Status_3);
   PARAMETER(PAR.TD_User_Date_1);
   PARAMETER(PAR.TD_User_Date_2);
   PARAMETER(PAR.TD_Drive_Date);
   PARAMETER(PAR.Pen_Company_Number);
   PARAMETER(PAR.Pen_Number);
   PARAMETER(PAR.TDP_Process_Code);
   PARAMETER(PAR.Held_Over_Pen_Company_Num);
   PARAMETER(PAR.Held_Over_Pen_Number);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 EXECUTE FUNCTION(Dlt Push TO Records   RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1333492;
 PARAMETER(PAR.Push_To_Company);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Delete Tattoo Deduction) TYPE(DLTOBJ) FILE(PKCDCPP)            AB1107819;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DED_D_A_Code);
 }

 EXECUTE FUNCTION(Upd Push TO Records   RT) TYPE(RTVOBJ) FILE(PKDZREP)           AB1333494;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.Push_To_Company);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Upd Push TO Records   CR) TYPE(CRTOBJ) FILE(PKDZREP)           AB1333495;
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DF_Defect_Code);
  PARAMETER(DB1.TDF_Head_Defect);
  PARAMETER(DB1.HC_Class_Code);
  PARAMETER(DB1.TDF_Classification_Defs);
  PARAMETER(DB1.TDF_Unused_Sts_1);
  PARAMETER(DB1.TDF_Unused_Sts_2);
  PARAMETER(DB1.TDF_Unused_Sts_3);
  PARAMETER(DB1.TDF_Unused_Nbr_1);
  PARAMETER(DB1.TDF_Unused_Nbr_2);
  PARAMETER(DB1.TDF_Unused_Nbr_3);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp w/o Sts IF) TYPE(EXCINTFUN)                      AB1340927;
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Chg Tattoo Defect     CH) TYPE(CHGOBJ) FILE(PKDZREP)           AB1197899;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.DF_Defect_Code);
   PARAMETER(PAR.TDF_Head_Defect);
   PARAMETER(PAR.HC_Class_Code);
   PARAMETER(PAR.TDF_Classification_Defs);
   PARAMETER(PAR.TDF_Unused_Sts_1);
   PARAMETER(PAR.TDF_Unused_Sts_2);
   PARAMETER(PAR.TDF_Unused_Sts_3);
   PARAMETER(PAR.TDF_Unused_Nbr_1);
   PARAMETER(PAR.TDF_Unused_Nbr_2);
   PARAMETER(PAR.TDF_Unused_Nbr_3);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 EXECUTE FUNCTION(Upd Push TO Records   RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1333496;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.Push_To_Company);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Upd Push TO Records   CR) TYPE(CRTOBJ) FILE(PKB3CPP)           AB1333497;
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TST_Sequence_Number);
  PARAMETER(DB1.TST_Head);
  PARAMETER(DB1.TST_Wgt);
  PARAMETER(DB1.TST_Wgt_Date);
  PARAMETER(DB1.TST_Wgt_Time);
  PARAMETER(DB1.TST_Wgt_Hour);
  PARAMETER(DB1.TST_Last_Zero_Date);
  PARAMETER(DB1.TST_Last_Zero_Time);
  PARAMETER(DB1.TST_Record_Created_Status);
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp w/o Sts IF) TYPE(EXCINTFUN)                      AB1340927;
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Chg Tattoo Scale Tkt  CH) TYPE(CHGOBJ) FILE(PKB3CPP)           AB1113770;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TST_Sequence_Number);
   PARAMETER(PAR.TST_Head);
   PARAMETER(PAR.TST_Wgt);
   PARAMETER(PAR.TST_Wgt_Date);
   PARAMETER(PAR.TST_Wgt_Time);
   PARAMETER(PAR.TST_Wgt_Hour);
   PARAMETER(PAR.TST_Last_Zero_Date);
   PARAMETER(PAR.TST_Last_Zero_Time);
   PARAMETER(PAR.TST_Record_Created_Status);
   PARAMETER(PAR.Pen_Company_Number);
   PARAMETER(PAR.Pen_Number);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 EXECUTE FUNCTION(Dlt Push TO Records   RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1345440;
 PARAMETER(PAR.Push_To_Company);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Dlt Eval Trans        DL) TYPE(DLTOBJ) FILE(PKBVCPP)           AB1102933;
  PARAMETER(DB1.ET_Company_Number);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
 }

 EXECUTE FUNCTION(Upd Push TO Records   RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1333498;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.Push_To_Company);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Push TO Records   CR) TYPE(CRTOBJ) FILE(PKBVCPP)           AB1333499;
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.ET_Kill_Date);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER(DB1.ET_Tattoo_Number);
  PARAMETER(DB1.ET_Lot);
  PARAMETER(DB1.ET_Shift);
  PARAMETER(DB1.ET_Hot_Wgt);
  PARAMETER(DB1.ET_Backfat_Thickness_Inch);
  PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
  PARAMETER(DB1.ET_Lean_Percent_NPPC);
  PARAMETER(DB1.ET_Backfat_Thickness_MM);
  PARAMETER(DB1.ET_Loineye_Depth_MM);
  PARAMETER(DB1.ET_Light_Reflectance_MM);
  PARAMETER(DB1.ET_Lean_Percent_FOM);
  PARAMETER(DB1.ET_Light_Reflectance);
  PARAMETER(DB1.ET_Trim_Area);
  PARAMETER(DB1.ET_Carcass_Sex);
  PARAMETER(DB1.ET_Error_Sts);
  PARAMETER(DB1.ET_Record_Add_Del_Sts);
  PARAMETER(DB1.ET_Record_Created_W_Avg);
  PARAMETER(DB1.ET_Record_Created_Status);
  PARAMETER(DB1.ET_User_Error_Override);
  PARAMETER(DB1.ET_Adjust_Add_Type);
  PARAMETER(DB1.ET_Broken_Back_Sts);
  PARAMETER(DB1.ET_Unused_Sts_2);
  PARAMETER(DB1.ET_Adjust_Add_Source);
  PARAMETER(DB1.ET_Unused_Sts_4);
  PARAMETER(DB1.ET_Unused_Sts_5);
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp w/o Sts IF) TYPE(EXCINTFUN)                      AB1340927;
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Upd Push TO Records   CH) TYPE(CHGOBJ) FILE(PKBVCPP)           AB1333500;
   PARAMETER(DB1.ET_Company_Number);
   PARAMETER(DB1.ET_Kill_Date);
   PARAMETER(DB1.ET_Scale_Sequence_Number);
   PARAMETER(PAR.ET_Carcass_Number);
   PARAMETER(PAR.ET_Carcass_Number_Insert);
   PARAMETER(PAR.ET_Tattoo_Number);
   PARAMETER(PAR.ET_Lot);
   PARAMETER(PAR.ET_Shift);
   PARAMETER(PAR.ET_Hot_Wgt);
   PARAMETER(PAR.ET_Backfat_Thickness_Inch);
   PARAMETER(PAR.ET_Loin_Eye_Depth_Inches);
   PARAMETER(PAR.ET_Lean_Percent_NPPC);
   PARAMETER(PAR.ET_Backfat_Thickness_MM);
   PARAMETER(PAR.ET_Loineye_Depth_MM);
   PARAMETER(PAR.ET_Light_Reflectance_MM);
   PARAMETER(PAR.ET_Lean_Percent_FOM);
   PARAMETER(PAR.ET_Light_Reflectance);
   PARAMETER(PAR.ET_Trim_Area);
   PARAMETER(PAR.ET_Carcass_Sex);
   PARAMETER(PAR.ET_Error_Sts);
   PARAMETER(PAR.ET_Record_Add_Del_Sts);
   PARAMETER(PAR.ET_Record_Created_W_Avg);
   PARAMETER(PAR.ET_Record_Created_Status);
   PARAMETER(PAR.ET_User_Error_Override);
   PARAMETER(PAR.ET_Adjust_Add_Type);
   PARAMETER(PAR.ET_Broken_Back_Sts);
   PARAMETER(PAR.ET_Unused_Sts_2);
   PARAMETER(PAR.ET_Adjust_Add_Source);
   PARAMETER(PAR.ET_Unused_Sts_4);
   PARAMETER(PAR.ET_Unused_Sts_5);
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   PARAMETER(DB1.RU_Date);
   PARAMETER(DB1.RU_Time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 EXECUTE FUNCTION(Dlt Push TO Records   RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1345782;
 PARAMETER(PAR.Push_To_Company);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Dlt Loss Transaction  DO) TYPE(DLTOBJ) FILE(PKBSCPP)           AB1102907;
  PARAMETER(DB1.LTN_Company_Number);
  PARAMETER(DB1.LTN_Kill_Date);
  PARAMETER(DB1.LTN_Record_Number);
 }

 EXECUTE FUNCTION(Upd Push TO Records   RT) TYPE(RTVOBJ) FILE(PKBSCPP)           AB1333501;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.Push_To_Company);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Upd Push TO Records   CR) TYPE(CRTOBJ) FILE(PKBSCPP)           AB1333502;
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.LTN_Kill_Date);
  PARAMETER(DB1.LTN_Record_Number);
  PARAMETER(DB1.LTN_Tattoo_Number);
  PARAMETER(DB1.LTN_Shift);
  PARAMETER(DB1.LTN_Wgt);
  PARAMETER(DB1.LTN_Extent);
  PARAMETER(DB1.LTN_Trim_Location);
  PARAMETER(DB1.LTN_Error_Sts);
  PARAMETER(DB1.LTN_Record_Created_Status);
  PARAMETER(DB1.LTN_User_Error_Override);
  PARAMETER(DB1.LTN_Source_Type);
  PARAMETER(DB1.LT_Type_Code);
  PARAMETER(DB1.LR_Reason_Code);
  PARAMETER(PAR.Push_To_Company);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp w/o Sts IF) TYPE(EXCINTFUN)                      AB1340927;
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Upd Push TO Records   CH) TYPE(CHGOBJ) FILE(PKBSCPP)           AB1333503;
   PARAMETER(DB1.LTN_Company_Number);
   PARAMETER(DB1.LTN_Kill_Date);
   PARAMETER(DB1.LTN_Record_Number);
   PARAMETER(PAR.LTN_Tattoo_Number);
   PARAMETER(PAR.LTN_Shift);
   PARAMETER(PAR.LTN_Wgt);
   PARAMETER(PAR.LTN_Extent);
   PARAMETER(PAR.LTN_Trim_Location);
   PARAMETER(PAR.LTN_Error_Sts);
   PARAMETER(PAR.LTN_Record_Created_Status);
   PARAMETER(PAR.LTN_User_Error_Override);
   PARAMETER(PAR.LTN_Source_Type);
   PARAMETER(PAR.LT_Type_Code);
   PARAMETER(PAR.LR_Reason_Code);
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   PARAMETER(DB1.RU_Date);
   PARAMETER(DB1.RU_Time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 EXECUTE FUNCTION(Dlt Carcass Detail    RT) TYPE(RTVOBJ) FILE(PKB1CPP)           AB1345924;
 PARAMETER(PAR.Push_To_Company);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Dlt Carcass Detail    DL) TYPE(DLTOBJ) FILE(PKB1CPP)           AB1104739;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.CD_Scale_Sequence_Number);
  PARAMETER(DB1.CD_Carcass_Number);
  PARAMETER(DB1.CD_Carcass_Number_Insert);
 }

 ENDIF;

 // LCL.Push Status = CND.Pushed
 LCL.Push_Status = 'P';

 ENDIF;

 ENDIF;

 //?Only process Triumph Owned records
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Push Status = CND.Ignored
 LCL.Push_Status = 'I';

 ENDIF;

 // LCL.VCD Push Payment Status = LCL.Push Status
 LCL.VCD_Push_Payment_Status = LCL.Push_Status;

 EXECUTE FUNCTION(Chg Voucher Detail    CH) TYPE(CHGOBJ) FILE(PKBLCPP)           AB1102232;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
 PARAMETER(DB1.VCD_Line);
 PARAMETER(DB1.VCD_Base_Mkt_Price_Amt);
 PARAMETER(DB1.VCD_Sort_Disc_Amt);
 PARAMETER(DB1.VCD_Yield_Gain_Loss);
 PARAMETER(DB1.VCD_Base_Carcass_Value);
 PARAMETER(DB1.VCD_LN_Add_on_Deduct_Amt);
 PARAMETER(DB1.VCD_Gross_Amt);
 PARAMETER(DB1.VCD_Deduction_Amt);
 PARAMETER(DB1.VCD_Less_Split_Amount);
 PARAMETER(DB1.VCD_Net_Amt);
 PARAMETER(DB1.VCD_Split_Percent);
 PARAMETER(DB1.VCD_Payment_Type);
 PARAMETER(DB1.VCD_Hog_Class_Type);
 PARAMETER(DB1.VCD_BO_Type);
 PARAMETER(DB1.VCD_Source_Contract_Type);
 PARAMETER(DB1.VCD_Source_Code);
 PARAMETER(DB1.VCD_Check_Description);
 PARAMETER(DB1.VCD_Received_Head);
 PARAMETER(DB1.VCD_Head_Killed);
 PARAMETER(LCL.VCD_Push_Payment_Status);
 PARAMETER(DB1.VCD_Repayment_Flag);
 PARAMETER(DB1.VCD_Unused_Status_3);
 PARAMETER(DB1.VCD_Unused_Status_4);
 PARAMETER(DB1.VCD_Unused_Head_1);
 PARAMETER(DB1.VCD_UnUsed_Head_2);
 PARAMETER(DB1.VCD_UnUsed_Head_3);
 PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
 PARAMETER(DB1.MGL_Voucher_Number);
 PARAMETER(DB1.MGL_Invoice_Batch_Number);
 PARAMETER(DB1.MGL_Process_to_ERP_Date);
 PARAMETER(DB1.MGL_Process_to_ERP_Time);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


