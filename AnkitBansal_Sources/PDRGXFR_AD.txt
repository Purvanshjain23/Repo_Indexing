// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDRGXFR
// ?Date: 14.08.2025 Time: 03:29:31
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?This function is written over Ready to Invoice Access Path
//?which is Event Code="06" & Header Status="R"
//?RMC 12/15/2020 chg keys on OMBFCPM0 FROM CO/SUFFX/INV TO CO/INV/SUFFIX
EXECUTE FUNCTION(CPY Orders to History  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1325551;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Invoice_Number);
PARAMETER(*BLANK);
PARAMETER(PAR.Process_Cust_Types_Usr);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?** 07/13/2021 JBB Add call "Rtv EDI Manual PO Sts XF" to retrieve
 //?       SDD657     "Send EDI Document Y/N"
 //?*****
 //?** 11/01/2016 SAZ Add code to stop all Debit Memos from being sent EDI
 //?*****
 //?** 12/14/2015 SAZ Add code to stop Debit Memos from being sent to
 //?**           SYSCO via EDI.
 //?*****
 //?** 09/10/2009 LJB E00157  RTV Intended for Export from OHE file
 //?*****
 //?** 01/15/2009 LJB FP1303  RTV delivery p.o. from OHE file
 //?*****
 //?** 05/11/2007 LJB FP1101   Get export info from the new Order
 //?** Header Extension file, not the load header
 //?*****
 //?TRF015 11/15/06 RMC Allocate Freight to sales history--
 //?  Use the Actual frt if Carrier is Paid, else use the Carr Paym Amt
 //?*****
 //?12/08/06 PK0040 PKD When creating Sales History and History Detail
 //?                    Accrual records, use Accounting Company for the
 //?                    Warehouse. CPY Orders to History  RT - Order Detail
 //?*****
 //?OMS206 12/96 PLL  Change to allow processing 1 order/memo
 //?*****
 ENDDO;

 //?USER: Process Data record

 // PAR.USR Process status = CND.yes
 PAR.USR_Process_status = 'Y';

 //?Do not process if load not found or load status <> "S"
 CASE;

 // IF DB1.Load ID NE WRK.ZERO
 IF DB1.Load_ID <> WRK.ZERO;

 //?RMC 11/15/06 TRF015 get Load Actual Freight and Carrier Pay Amt too
 EXECUTE FUNCTION(RTV Sts/Type/Export   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1656565;
 PARAMETER(DB1.Load_ID);
 PARAMETER(WRK.Load_Status);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Load_Carrier_Pay_Amt);
 PARAMETER(NLL.Shipping_Line);
 PARAMETER(NLL.Port_Delv_Terminal);
 PARAMETER(NLL.Vessel_Name);
 PARAMETER(NLL.Sail_Date);
 PARAMETER(NLL.Booking_Number);
 PARAMETER(NLL.Discharge_Port);
 PARAMETER(NLL.Arrival_Date);
 PARAMETER(NLL.Container_Number);
 PARAMETER(LCL.Load_Total_Freight);
 PARAMETER(LCL.LH_Carrier_Payment_Sts);
 PARAMETER(LCL.Load_Actual_Freight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** 05/11/2007 LJB FP1101   Get export info from the new Order
 //?** Header Extension file, not the load header
 EXECUTE FUNCTION(RTV OHE Ship fields    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814635;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Shipping_Line);
 PARAMETER(LCL.Port_Delv_Terminal);
 PARAMETER(LCL.OHE_City);
 PARAMETER(LCL.Vessel_Name);
 PARAMETER(LCL.OHE_Voyage_Flight);
 PARAMETER(LCL.Booking_Number);
 PARAMETER(LCL.Discharge_Port);
 PARAMETER(LCL.Sail_Date);
 PARAMETER(LCL.OHE_Port_Cut_Date);
 PARAMETER(LCL.Arrival_Date);
 PARAMETER(LCL.OHE_Late_Delivery_Code);
 PARAMETER(LCL.OHE_Ship_Status);
 PARAMETER(LCL.Container_Number);
 PARAMETER(LCL.OHE_Comment_1);
 PARAMETER(LCL.OHE_Comment_2);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.USR Process status = CND.no
 PAR.USR_Process_status = 'N';

 // IF WRK.Load Status is Not Shipped
 IF WRK.Load_Status = 'C'/'E'/'I'/'L'/'U';

 // PAR.USR Process status = CND.no
 PAR.USR_Process_status = 'N';

 ENDIF;

 ENDIF;

 //?Do not process if processing 1 order and this isn't it.
 CASE;

 // IF PAR.Invoice Number NE WRK.ZERO
 IF PAR.Invoice_Number <> WRK.ZERO;

 // AND DB1.Invoice Number NE PAR.Invoice Number
 AND DB1.Invoice_Number <> PAR.Invoice_Number;

 // PAR.USR Process status = CND.no
 PAR.USR_Process_status = 'N';

 ENDIF;

 // LCL.*Record selected = CND.*YES
 LCL.*Record_selected = 'Y';

 // Call program Sel Customer Type     XF.
 CALL PROGRAM(Sel Customer Type     XF) ('PPUOXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Type_Code);
 PARAMETER(PAR.Process_Cust_Types_Usr);
 PARAMETER(LCL.*Record_selected);

 CASE;

 // IF LCL.*Record selected is *NO
 IF LCL.*Record_selected = 'N';

 // PAR.USR Process status = CND.no
 PAR.USR_Process_status = 'N';

 ENDIF;

 //?****
 //?Do not select if the order ship to customer type not = par
 CASE;

 // IF PAR.USR Process status is yes
 IF PAR.USR_Process_status = 'Y';

 //?This function copies Shipping detail, Pricing Detail/Formula
 //?Accruals, Detail financials to History
 //?12/08/06 PKD Retrieve the Accounting Company for the Warehouse
 //?** 05/11/2007 LJB FP1101  Export info is from Order Header Extension
 //?** 01/15/2009 LJB FP1303  RTV delivery p.o. from OHE file
 //?** 09/10/2009 LJB E00157  RTV Intended for Export from OHE file
 EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Warehouse_Code);
 PARAMETER(NLL.Shipping_Company);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Shipping_Company);
  PARAMETER(PAR.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  QUIT;

  ENDIF;

 }

 //?11/07/2013 PKD Update Carrier Code from the original Order if
 //?               Credit/Debit Memo.  Carrier is required for a
 //?               Debit Memo with sending it via EDI for one of the
 //?               customers.  E2872
 //?PAR.Carrier Code
 CASE;

 // IF DB1.Billing Activity Type is Credit or Debit Memo
 IF DB1.Billing_Activity_Type = '2'/'3';

 EXECUTE FUNCTION(RTV Carrier, Load      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1366560;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(NLL.Load_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?PAR.Carrier Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Carrier Code = DB1.Carrier Code
 PAR.Carrier_Code = DB1.Carrier_Code;

 ENDIF;

 EXECUTE FUNCTION(CPY Orders to History  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1325080;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(LCL.Load_Type);
 PARAMETER(LCL.Shipping_Line);
 PARAMETER(LCL.Port_Delv_Terminal);
 PARAMETER(LCL.Vessel_Name);
 PARAMETER(LCL.Sail_Date);
 PARAMETER(LCL.Booking_Number);
 PARAMETER(LCL.Discharge_Port);
 PARAMETER(LCL.Arrival_Date);
 PARAMETER(LCL.Container_Number);
 PARAMETER(LCL.Load_Total_Freight);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Initialize routine

  // WRK.USR Process status = CND.no
  WRK.USR_Process_status = 'N';

  //?***** Change Log and comments
  DO;

  //?RMC 03/17/22 added revenue freight adj amt  - treat like REVADJ
  //?  and accum to add to the absorbed freight amount. for fuel surcharge$
  //?** E2494 RMC 07/16/2013  Output OD Gate/final adjustment (JPN only)
  //?** E2494 RMC 04/03/2013  Output OD Gate price (for JPN orders only)
  //?** P1407 RMC 05/05/2011  3C = output Process sts for 3c = 'N'
  //?05/18/10 PKD C763 Do not deduct CFRTOV Component from the Invoice
  //?             to derive at the FOB.  This value is now used as not
  //?             a Freight +/-.  It is just an +/- to the price.
  //?** E00157 LJB 09/10/2009  Rtv Intended for Export from OHE file
  //?** E00157 LJB 08/26/2009  Prompt for parm chg to Sales Hist EXT
  //?** E00424 LJB 07/15/2009  Update SH EXT with Slip Sheet flag
  //?** FP1303 LJB 01/15/2009  Rtv delivery p.o. from OHE file
  ENDDO;

  //?USER: Process Data record

  //?12/08/06 PKD Send in Accounting Company in the Copies below.
  //?Copy Detail Accruals
  //? RMC 03/17/22 added revenue freight adj amt  - treat like REVADJ
  //?  and accum to add to the absorbed freight amount
  EXECUTE FUNCTION(CPY Ship Accru to Hist RT) TYPE(RTVOBJ) FILE(OMHRCPP)          AC1325598;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Ledgrd_Trd_Fund_Accrl_Amt);
  PARAMETER(PAR.Billing_Activity_Type);
  PARAMETER(PAR.Commission_Amount);
  PARAMETER(PAR.NonLedgrd_TrdFnd_Acrl_Amt);
  PARAMETER(PAR.Accounting_Company);
  PARAMETER(PAR.Invoice_Date);
  PARAMETER(PAR.SH_Revenue_Adjust_Amount);
  PARAMETER(PAR.SH_Revenue_Freight_Adj);
  {
   //?USER: Initialize routine

   //?       RMC 03/17/22 added revenue freight adj amt  - treat like REVADJ
   //?  and accum to add to the absorbed freight amount
   //?DLY029 RMC 06/14/07 Fields Renamed:
   //?   SBD Accrual Amount --> realized non-ledger amt
   //?   Trade fund accural amount   --> realized ledger amt
   //?   Commission amount --> non-realized ledger amt
   // WRK.Ledgrd Trd Fund Accrl Amt = CON.*ZERO
   WRK.Ledgrd_Trd_Fund_Accrl_Amt = *ZERO;

   // WRK.Commission Amount = CON.*ZERO
   WRK.Commission_Amount = *ZERO;

   // WRK.NonLedgrd TrdFnd Acrl Amt = CON.*ZERO
   WRK.NonLedgrd_TrdFnd_Acrl_Amt = *ZERO;

   // WRK.SH Revenue Adjust Amount = CON.*ZERO
   WRK.SH_Revenue_Adjust_Amount = *ZERO;

   // WRK.SH Revenue Freight Adj = CON.*ZERO
   WRK.SH_Revenue_Freight_Adj = *ZERO;

   //?USER: Process Data record

   //?***** OLD CODE *****
   DO;

   //?* 12/09/03 PKD Do not want to reverse sign.
   //?12/08/06 PKD PK0040 Create History Detail Accrual w/Accounting Co.
   //?E4057 JJH 04/27/15 - Populate HDA Atch to Ord ActShpDt
   EXECUTE FUNCTION(CRT PD History Dtl Acc CO) TYPE(CRTOBJ) FILE(PDICCPP)          AC1255124;
   PARAMETER(PAR.Accounting_Company);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(DB1.Accrual_Rate);
   PARAMETER(DB1.Extended_Amount);
   PARAMETER(DB1.Item_Accrual_Amt);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.SDA_Actual_Ship_Date);
   PARAMETER(DB1.Weight_Billed);
   PARAMETER('Y');
   PARAMETER(DB1.Retro_Comm_Calculated);
   PARAMETER(DB1.Accrual_Type);
   PARAMETER(DB1.SDA_Affect_Sales_Realz);
   PARAMETER(DB1.SDA_Affect_Invoice_Price);
   PARAMETER(DB1.SDA_Print_on_Invoice);
   PARAMETER(DB1.SDA_Invoice_Print_Type);
   PARAMETER(*ZERO);
   PARAMETER(DB1.SDA_Atch_to_Ord_ActShpDt);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.SH_Expense_Bucket);
   PARAMETER(DB1.G_L_Sub_Account);
   PARAMETER(DB1.SDA_Post_to_G_L_Y_N);
   PARAMETER(DB1.SDA_Accrual_Rate_Type);
   PARAMETER(PAR.Invoice_Date);
   PARAMETER(DB1.SDA_Sub_Ledger_Code);
   PARAMETER(DB1.SDA_G_L_Sub_Ledger);
   PARAMETER(DB1.SDA_G_L_Code_Dr);
   PARAMETER(DB1.SDA_G_L_Code_Cr);
   PARAMETER(DB1.SDA_JDE_Account_ID_Dr);
   PARAMETER(DB1.SDA_JDE_Account_ID_Cr);
   PARAMETER(DB1.Broker_Code);
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(JOB.*Job_time);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*JOB);
   PARAMETER(JOB.*Job_date);
   {
    //?USER: Processing after Data update

    //?08/09/2007 Todd Johnson
    //?Based on EIS Specifications - FDD Accruals
    EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
    PARAMETER(DB1.Company_Number);
    PARAMETER(NLL.Plant_Company_Sts);
    PARAMETER(LCL.Company_Organization);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.Company Organization is Daily's
    IF LCL.Company_Organization = 'D';

    //?If Accrual Type is TF
    CASE;

    // IF DB1.Accrual Type is Trade Fund/Marketing
    IF DB1.Accrual_Type = 'TF';

    EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(LCL.Description_Line_One);
    PARAMETER(NLL.Description_Line_Two);
    PARAMETER(NLL.UOM_Primary);
    PARAMETER(NLL.UOM_Second);
    PARAMETER(NLL.UOM_Third);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(NLL.Order_Type_Sales);
    PARAMETER(NLL.AR_Customer_Number);
    PARAMETER(NLL.Ship_To_Customer);
    PARAMETER(NLL.Ship_To_Name);
    PARAMETER(NLL.Ship_To_Address_Line_1);
    PARAMETER(NLL.Ship_To_Address_Line_2);
    PARAMETER(NLL.Ship_To_Address_Line_3);
    PARAMETER(NLL.Ship_To_City);
    PARAMETER(NLL.Ship_To_State_Code);
    PARAMETER(NLL.Ship_To_Zip_Postal_Code);
    PARAMETER(NLL.Bill_to_Customer);
    PARAMETER(NLL.Bill_to_Name);
    PARAMETER(NLL.Bill_to_Address_Line_1);
    PARAMETER(NLL.Bill_to_Address_Line_2);
    PARAMETER(NLL.Bill_to_Address_Line_3);
    PARAMETER(NLL.Bill_to_City);
    PARAMETER(NLL.Bill_to_State_Code);
    PARAMETER(NLL.Bill_to_Zip_Postal_Code);
    PARAMETER(NLL.Customer_Purchase_Order_#);
    PARAMETER(NLL.Order_Date);
    PARAMETER(NLL.Requested_Ship_Date);
    PARAMETER(NLL.Actual_Shipped_Date);
    PARAMETER(NLL.Cancel_Date);
    PARAMETER(NLL.Terms_Code);
    PARAMETER(NLL.Special_Instructions);
    PARAMETER(NLL.Special_Instructions_2);
    PARAMETER(NLL.Carrier_Code);
    PARAMETER(NLL.Comment_Print_Acknowledge);
    PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
    PARAMETER(NLL.Comment_Print_Pick_Slip);
    PARAMETER(NLL.Comment_Print_Ship_Doc);
    PARAMETER(NLL.Reason_Code);
    PARAMETER(NLL.Order_in_Use);
    PARAMETER(NLL.Header_Status);
    PARAMETER(NLL.Header_Status_Last);
    PARAMETER(NLL.Order_Type_Print_Status);
    PARAMETER(NLL.Scheduled_Ship_Date);
    PARAMETER(NLL.User_Original_Entry);
    PARAMETER(NLL.Date_of_Original_Entry);
    PARAMETER(NLL.Order_Value_Total);
    PARAMETER(NLL.Order_Weight_Total);
    PARAMETER(NLL.Credit_Hold);
    PARAMETER(NLL.Production_Hold);
    PARAMETER(NLL.New_Customer_Hold);
    PARAMETER(NLL.Requested_Delivery_Date);
    PARAMETER(NLL.Requested_Delivery_Time);
    PARAMETER(NLL.Accounts_Receiv_Ent_1);
    PARAMETER(NLL.Accounts_Receiv_Ent_2);
    PARAMETER(NLL.Load_ID);
    PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
    PARAMETER(NLL.Rated_Freight);
    PARAMETER(NLL.LTL_Flag);
    PARAMETER(NLL.Price_Audit);
    PARAMETER(NLL.Price_Status);
    PARAMETER(NLL.Shipping_Method);
    PARAMETER(NLL.Export_Status);
    PARAMETER(NLL.Palletize);
    PARAMETER(NLL.Shrink_Wrap);
    PARAMETER(NLL.Slip_Sheet);
    PARAMETER(NLL.Age_Code);
    PARAMETER(NLL.Reefer_Temperature);
    PARAMETER(NLL.Load_Type);
    PARAMETER(NLL.Attach_to_Invoice_Number);
    PARAMETER(NLL.Load_Plan_Order);
    PARAMETER(NLL.Print_Pick_Slip);
    PARAMETER(NLL.Resell_Reference_Number);
    PARAMETER(NLL.Special_Comment_1);
    PARAMETER(NLL.Special_Comment_2);
    PARAMETER(NLL.Affect_Auto_Accruals);
    PARAMETER(NLL.Sales_Route_Code);
    PARAMETER(NLL.Manager_Level_Code);
    PARAMETER(NLL.VP_Level_Code);
    PARAMETER(NLL.Attach_to_Order_Number);
    PARAMETER(NLL.Reason_for_Price_Audit);
    PARAMETER(LCL.Invoice_Number);
    PARAMETER(NLL.Invoice_Suffix);
    PARAMETER(LCL.Invoice_Date);
    PARAMETER(NLL.Event_Code);
    PARAMETER(NLL.Trans_Contol_AS400_Plant);
    PARAMETER(NLL.Modified_Flag);
    PARAMETER(NLL.A_R_order_Value_Total);
    PARAMETER(NLL.Billing_Activity_Type);
    PARAMETER(NLL.Block_Order_Flag);
    PARAMETER(NLL.Order_Certification_Flag);
    PARAMETER(NLL.EDI_Status_1);
    PARAMETER(NLL.EDI_Status_2);
    PARAMETER(NLL.EDI_Status_3);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Convert fields first
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?Invoice date to YYYYMMDD
    // LCL.USR Internal D8# YYYYMMDD = LCL.Invoice Date
    LCL.USR_Internal_D8#_YYYYMMDD = LCL.Invoice_Date;

    //?Sub Ledger to Char
    // LCL.USR Work Field 5,0 = DB1.HDA G/L Sub Ledger
    LCL.USR_Work_Field_50 = DB1.HDA_G_L_Sub_Ledger;

    // LCL.Text USR 5 = CVTVAR(LCL.USR Work Field 5,0)
    LCL.Text_USR_5 = CVTVAR(LCL.USR_Work_Field_50);

    //?Invoice Number to Char
    // LCL.USR number = LCL.Invoice Number
    LCL.USR_number = LCL.Invoice_Number;

    // LCL.Invoice Number 6 USR = CVTVAR(LCL.USR number)
    LCL.Invoice_Number_6_USR = CVTVAR(LCL.USR_number);

    ENDIF;

    // Call program Zzz Crt ACCR TRANS RCD.
    CALL PROGRAM(Zzz Crt ACCR TRANS RCD) ('PMLQUPR');
    PARAMETER(DB1.Accrual_Rate);
    PARAMETER(DB1.Extended_Amount);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Weight_Billed);
    PARAMETER(LCL.Description_Line_One);
    PARAMETER(LCL.USR_Internal_D8#_YYYYMMDD);
    PARAMETER(LCL.Text_USR_5);
    PARAMETER(LCL.Invoice_Number_6_USR);

    ENDIF;

    ENDIF;

   }

   //?RMC - change 11/05/07
   //?-----------------------
   //?* 01/25/12 C1915 Replaced below w/Sales History Expense Bucket
   ENDDO;

   //?------------------------------------------------
   //?09/27/2012 PKD E2199 Added Revenue Adjust Bucket
   //?Revenue Adjust
   CASE;

   // IF DB1.SH Expense Bucket is Revenue Adjust
   IF DB1.SH_Expense_Bucket = 'REVADJ';

   // WRK.SH Revenue Adjust Amount = WRK.SH Revenue Adjust Amount + DB1.Extended Amount
   WRK.SH_Revenue_Adjust_Amount = WRK.SH_Revenue_Adjust_Amount + DB1.Extended_Amount;

   ENDIF;

   //?03/17/2022 RMC       Added Revenue freight accumulator. this will be
   //? treated like the REVADJ, but also add to the Absorbed Freight Amount
   //?Revenue Freight
   CASE;

   // IF DB1.SH Expense Bucket is Revenue Freight
   IF DB1.SH_Expense_Bucket = 'REVFRT';

   // WRK.SH Revenue Adjust Amount = WRK.SH Revenue Adjust Amount + DB1.Extended Amount
   WRK.SH_Revenue_Adjust_Amount = WRK.SH_Revenue_Adjust_Amount + DB1.Extended_Amount;

   // WRK.SH Revenue Freight Adj = WRK.SH Revenue Freight Adj + DB1.Extended Amount
   WRK.SH_Revenue_Freight_Adj = WRK.SH_Revenue_Freight_Adj + DB1.Extended_Amount;

   ENDIF;

   //?------------------------------------------------
   //?Non Ledgered
   CASE;

   // IF DB1.SH Expense Bucket is Non Ledgered Accrual
   IF DB1.SH_Expense_Bucket = 'NONLED';

   // WRK.NonLedgrd TrdFnd Acrl Amt = WRK.NonLedgrd TrdFnd Acrl Amt + DB1.Extended Amount
   WRK.NonLedgrd_TrdFnd_Acrl_Amt = WRK.NonLedgrd_TrdFnd_Acrl_Amt + DB1.Extended_Amount;

   ENDIF;

   //?Ledgered Accrual
   CASE;

   // IF DB1.SH Expense Bucket is Ledgered Accrual
   IF DB1.SH_Expense_Bucket = 'LEDGER';

   // WRK.Ledgrd Trd Fund Accrl Amt = WRK.Ledgrd Trd Fund Accrl Amt + DB1.Extended Amount
   WRK.Ledgrd_Trd_Fund_Accrl_Amt = WRK.Ledgrd_Trd_Fund_Accrl_Amt + DB1.Extended_Amount;

   ENDIF;

   //?Commission
   CASE;

   // IF DB1.SH Expense Bucket is Commission
   IF DB1.SH_Expense_Bucket = 'COMMSN';

   // WRK.Commission Amount = WRK.Commission Amount + DB1.Extended Amount
   WRK.Commission_Amount = WRK.Commission_Amount + DB1.Extended_Amount;

   ENDIF;

   //?USER: Exit processing

   // PAR.Ledgrd Trd Fund Accrl Amt = WRK.Ledgrd Trd Fund Accrl Amt
   PAR.Ledgrd_Trd_Fund_Accrl_Amt = WRK.Ledgrd_Trd_Fund_Accrl_Amt;

   // PAR.Commission Amount = WRK.Commission Amount
   PAR.Commission_Amount = WRK.Commission_Amount;

   // PAR.NonLedgrd TrdFnd Acrl Amt = WRK.NonLedgrd TrdFnd Acrl Amt
   PAR.NonLedgrd_TrdFnd_Acrl_Amt = WRK.NonLedgrd_TrdFnd_Acrl_Amt;

   // PAR.SH Revenue Adjust Amount = WRK.SH Revenue Adjust Amount
   PAR.SH_Revenue_Adjust_Amount = WRK.SH_Revenue_Adjust_Amount;

   // PAR.SH Revenue Freight Adj = WRK.SH Revenue Freight Adj
   PAR.SH_Revenue_Freight_Adj = WRK.SH_Revenue_Freight_Adj;

  }

  //?Copy Detail Financials
  EXECUTE FUNCTION(CPY to History         RT) TYPE(RTVOBJ) FILE(OMCRWKP)          AC1325574;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(WRK.Special_Charge_Amount);
  PARAMETER(WRK.Freight_Charge_Amount);
  PARAMETER(WRK.Accrual_Charge_Amount);
  PARAMETER(PAR.Billing_Activity_Type);
  PARAMETER(PAR.Accounting_Company);
  {
   //?USER: Initialize routine

   // PAR.Special Charge Amount = CON.*ZERO
   PAR.Special_Charge_Amount = *ZERO;

   // PAR.Freight Charge Amount = CON.*ZERO
   PAR.Freight_Charge_Amount = *ZERO;

   // PAR.Accrual Charge Amount = CON.*ZERO
   PAR.Accrual_Charge_Amount = *ZERO;

   //?USER: Process Data record

   //?Reverse sign of amounts if credit memo
   CASE;

   // IF PAR.Billing Activity Type is Credit Memo
   IF PAR.Billing_Activity_Type = '2';

   // WRK.Transaction Amount = DB1.Transaction Amount * CON.-1 *
   WRK.Transaction_Amount = DB1.Transaction_Amount * -1;

   //?Reverse sign of amounts if credit memo
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.Transaction Amount = DB1.Transaction Amount
   WRK.Transaction_Amount = DB1.Transaction_Amount;

   ENDIF;

   //?12/08/06 PKD PK0040 Create w/Accounting Company
   EXECUTE FUNCTION(CRT PD History Detail  CO) TYPE(CRTOBJ) FILE(PDIBCPP)          AC1255115;
   PARAMETER(PAR.Accounting_Company);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(DB1.Financial_Type);
   PARAMETER(WRK.Transaction_Amount);
   PARAMETER(DB1.Financial_Text);
   PARAMETER(DB1.Financial_Charge_Status);
   PARAMETER(DB1.Special_Charge_Rate);
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(JOB.*Job_time);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*JOB);
   PARAMETER(JOB.*Job_date);
   //?Accumulate Special Charge, Freight, Accrual Financial amounts
   CASE;

   // IF DB1.Financial Type is Special Charge
   IF DB1.Financial_Type = 'S';

   // WRK.Special Charge Amount = WRK.Special Charge Amount + DB1.Transaction Amount
   WRK.Special_Charge_Amount = WRK.Special_Charge_Amount + DB1.Transaction_Amount;

   //?Accumulate Special Charge, Freight, Accrual Financial amounts
   // IF DB1.Financial Type is Freight Charge
   IF DB1.Financial_Type = 'F';

   // WRK.Freight Charge Amount = WRK.Freight Charge Amount + DB1.Transaction Amount
   WRK.Freight_Charge_Amount = WRK.Freight_Charge_Amount + DB1.Transaction_Amount;

   //?Accumulate Special Charge, Freight, Accrual Financial amounts
   ENDIF;

   //?USER: Exit processing

   // PAR.Special Charge Amount = WRK.Special Charge Amount
   PAR.Special_Charge_Amount = WRK.Special_Charge_Amount;

   // PAR.Freight Charge Amount = WRK.Freight Charge Amount
   PAR.Freight_Charge_Amount = WRK.Freight_Charge_Amount;

   // PAR.Accrual Charge Amount = WRK.Accrual Charge Amount
   PAR.Accrual_Charge_Amount = WRK.Accrual_Charge_Amount;

  }

  //?Copy Pricing Detail
  EXECUTE FUNCTION(CPY Price Dtl to Hist  RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1325581;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Accounting_Company);
  {
   //?USER: Process Data record

   //?12/08/06 PKD PK0040 Create w/Accounting Company
   EXECUTE FUNCTION(CRT PD History Pricing CO) TYPE(CRTOBJ) FILE(PDINCPP)          AC1255173;
   PARAMETER(PAR.Accounting_Company);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Price_Method_Componant);
   PARAMETER(DB1.Componant_Price);
   PARAMETER(DB1.PD_Status);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(JOB.*Job_time);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*JOB);
   PARAMETER(JOB.*Job_date);
  }

  //?Copy Pricing Formula Detail
  EXECUTE FUNCTION(CPY Ship Form To Hist  RT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1325591;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Accounting_Company);
  {
   //?USER: Process Data record

   //?12/08/06 PKD PK0040 Create w/Accounting Company
   EXECUTE FUNCTION(CRT PD History Formula CO) TYPE(CRTOBJ) FILE(PDJLCPP)          AC1325595;
   PARAMETER(PAR.Accounting_Company);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Price_Method_Componant);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Pricing_Sequence_Number);
   PARAMETER(DB1.Sales_Yield);
   PARAMETER(DB1.Market_Value);
   PARAMETER(DB1.Credit_Value);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(JOB.*Job_time);
   PARAMETER(JOB.*USER);
   PARAMETER(JOB.*JOB);
   PARAMETER(JOB.*Job_date);
  }

  //?Load OM History Fields
  DO;

  //?11/06/2006 slm extended amount will be handled here and later for
  //?either neg or positive.
  //?Retrieve for Ship To Customer - FIX - wasnt outputting fields 6/14/13
  EXECUTE FUNCTION(RTV Cpy Shp to Fields  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1341090;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Alpha_Search);
  PARAMETER(PAR.Parent_Customer);
  PARAMETER(PAR.Country_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Retrieve for Ship To Company/Customer
  EXECUTE FUNCTION(RTV Groups/Type        RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1357358;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Type_Code);
  PARAMETER(PAR.Customer_Group_Code);
  PARAMETER(PAR.Customer_Group_Code_2);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Retrieve for A/R Customer
  EXECUTE FUNCTION(RTV Cpy A/R fields     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1325523;
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(PAR.Customer_Name);
  PARAMETER(PAR.County_Code);
  PARAMETER(PAR.Parent_Customer);
  PARAMETER(PAR.Country_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Retrieve Item Number from Original O/E record
  EXECUTE FUNCTION(RTV Original Order     RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1429270;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(1);
  PARAMETER(WRK.Original_Item);
  //?Check for record found, if not then Zero
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Check for record found, if not then Zero
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Original Item = CON.*ZERO
  WRK.Original_Item = *ZERO;

  ENDIF;

  //?---------------------------------------------------------------
  //?05/18/10 PKD C763 Do not deduct CFRTOV Component from the Invoice
  //?             to derive at the FOB.  This value is now used as not
  //?             a Freight +/-.  It is just an +/- to the price.
  //?Retrieve Freight Overage from Ship Pricing Detail
  //?---------------------------------------------------------------
  //?Retrieve Standard Overage (Stored in Pricing U/M)
  EXECUTE FUNCTION(RTV Item Info&Std Ovr  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1388167;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.UOM_Pricing);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(PAR.Standard_Overage_Underage);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Retrieve Accounting Year/Period/Week using Actual Shipped Date
  // Call program RTV Year/Period/Week   XF.
  CALL PROGRAM(RTV Year/Period/Week   XF) ('PDT3XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(PAR.Accounting_Year_Code);
  PARAMETER(PAR.Accounting_Period_Code);
  PARAMETER(PAR.OM_Week);

  //?Calculate Absorbed Freight Amount
  // WRK.*Synon (15,5) work field = PAR.Absorbed Freight Rate / CON.100 *Rounded
  WRK.*Synon_155_work_field = PAR.Absorbed_Freight_Rate_CWT / 100 'H';

  // PAR.Absorbed Freight Amount = DB1.Weight Shipped Total * WRK.*Synon (15,5) work
  PAR.Absorbed_Freight_Amount = DB1.Weight_Shipped_Total * WRK.*Synon_155_work_field 'H';

  //?RMC 3/17/22 added for fuel surcharge
  // PAR.Absorbed Freight Amount = PAR.Absorbed Freight Amount + PAR.SH Revenue Freight Adj
  PAR.Absorbed_Freight_Amount = PAR.Absorbed_Freight_Amount + PAR.SH_Revenue_Freight_Adj;

  //?Calculate Pricing Freight Overage
  // WRK.*Synon (15,5) work field = WRK.Componant Price / CON.100 *Rounded
  WRK.*Synon_155_work_field = WRK.Componant_Price / 100 'H';

  // WRK.Componant Price = DB1.Weight Shipped Total * WRK.*Synon (15,5) work field *R
  WRK.Componant_Price = DB1.Weight_Shipped_Total * WRK.*Synon_155_work_field 'H';

  //?Accumulate Customer Accruals generated for the item       10/12/00
  //?   PK0519 11/13/03 Accum Trade Funds only
  //?   RMC    01/12/06 dont include SBD accrual code
  //?   RMC    06/14/07 dly029 - include Affect Sales Realz only
  //?11/06/2006 slm extended amount will be handle here and later for
  //?either neg or positive.
  //?Reverse sign on Extended amounts only if credit memo
  CASE;

  // IF PAR.Billing Activity Type is Credit Memo
  IF PAR.Billing_Activity_Type = '2';

  // WRK.Extended Amount = DB1.Extended Amount * CON.-1 *
  WRK.Extended_Amount = DB1.Extended_Amount * -1;

  //?Reverse sign on Extended amounts only if credit memo
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Extended Amount = DB1.Extended Amount
  WRK.Extended_Amount = DB1.Extended_Amount;

  ENDIF;

  // PAR.FOB Gross Amount = WRK.Extended Amount - PAR.Absorbed Freight Amount
  PAR.FOB_Gross_Amount = WRK.Extended_Amount - PAR.Absorbed_Freight_Amount;

  //?Calculate FOB Gross Amount - subtract freight overage
  // PAR.FOB Gross Amount = PAR.FOB Gross Amount - WRK.Componant Price
  PAR.FOB_Gross_Amount = PAR.FOB_Gross_Amount - WRK.Componant_Price;

  //?Calculate FOB Gross Amount - subtract freight financials
  // PAR.FOB Gross Amount = PAR.FOB Gross Amount - WRK.Freight Charge Amount
  PAR.FOB_Gross_Amount = PAR.FOB_Gross_Amount - WRK.Freight_Charge_Amount;

  //?Calculate FOB Gross Amount - subtract customer accruals    10/12/00
  // PAR.FOB Gross Amount = PAR.FOB Gross Amount - PAR.Ledgrd Trd Fund Accrl Amt
  PAR.FOB_Gross_Amount = PAR.FOB_Gross_Amount - PAR.Ledgrd_Trd_Fund_Accrl_Amt;

  //?Calculate FOB Gross Amount - Add Revenue Adjust Amount     10/15/12
  // PAR.FOB Gross Amount = PAR.FOB Gross Amount + PAR.SH Revenue Adjust Amount
  PAR.FOB_Gross_Amount = PAR.FOB_Gross_Amount + PAR.SH_Revenue_Adjust_Amount;

  //?*************************************
  //?Calculate Standard Overage Amount
  DO;

  //?   Rtv Primary U/M Price
  // Call program CLC Convert Price Qtys XF.
  CALL PROGRAM(CLC Convert Price Qtys XF) ('PDKGXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.UOM_Pricing);
  PARAMETER(WRK.Price);
  PARAMETER(WRK.Price_based_on_U_M2_S);
  PARAMETER(WRK.Price_based_on_U_M3_S);
  PARAMETER(PAR.Standard_Overage_Underage);

  // PGM.*Synon (17,9) work field = CON.*ZERO
  PGM.*Synon_179_work_field = *ZERO;

  //?   Calculate Price per Pound
  CASE;

  // IF PAR.Unit Weight is Not equal zero
  IF PAR.Unit_Weight <> *ZERO;

  // PGM.*Synon (17,9) work field = WRK.Price / PAR.Unit Weight *
  PGM.*Synon_179_work_field = WRK.Price / PAR.Unit_Weight;

  ENDIF;

  //?   If C/W, use shipped Lbs * Lb Price.
  //?   If not C/W, use Item's (Unit weight * Price * Shipped Qty)
  CASE;

  // IF PAR.Catch Weight Status is yes
  IF PAR.Catch_Weight_Status = 'Y';

  // PAR.Standard Overage Amount = DB1.Weight Shipped Total * PGM.*Synon (17,9) work field *
  PAR.Standard_Overage_Amount = DB1.Weight_Shipped_Total * PGM.*Synon_179_work_field;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PGM.*Synon (17,7) work field = PAR.Unit Weight * PGM.*Synon (17,9) work field *
  PGM.*Synon_177_work_field = PAR.Unit_Weight * PGM.*Synon_179_work_field;

  // PAR.Standard Overage Amount = DB1.Quantity Shipped Total * PGM.*Synon (17,7) wor
  PAR.Standard_Overage_Amount = DB1.Quantity_Shipped_Total * PGM.*Synon_177_work_field;

  ENDIF;

  ENDDO;

  //?*************************************
  //?12/12/07 PKD Retrieve Customer Market Code
  EXECUTE FUNCTION(Rtv Customer Market   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1859495;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.Customer_Market_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Retrieve needed fields from Item & IC Item Balance files
  //?12/12/07 PKD Item Market Code overrides Customer Market Code.
  // Call program RTV Copy to History    XF.
  CALL PROGRAM(RTV Copy to History    XF) ('PDRFXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Packaging_Code);
  PARAMETER(PAR.Item_Market_Code);
  PARAMETER(PAR.Agrimetrics_group);
  PARAMETER(PAR.Agrimetrics_pack);
  PARAMETER(PAR.Agrimetrics_grade);
  PARAMETER(PAR.SH_Unused_was_broker);
  PARAMETER(PAR.PM_Raw_Material_Type_Code);
  PARAMETER(PAR.PM_Line_Number);

  //?Item Market Code
  CASE;

  // IF PAR.Item Market Code is Not Entered
  IF PAR.Item_Market_Code = *BLANK;

  // PAR.Item Market Code = LCL.Customer Market Code
  PAR.Item_Market_Code = LCL.Customer_Market_Code;

  ENDIF;

  //?Get Market Price    PK0199  (calcs copied from sls rlztn reports)
  DO;

  EXECUTE FUNCTION(RTV Print Realization  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1387825;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Commodity_Market_Code);
  PARAMETER(WRK.Print_on_Realization_Rpt);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?subtract 1 from actual shipped date for starting point
  // WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
  WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'
  1);

  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(LCL.Commodity_Market_Code);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(WRK.Actual_Shipped_Date);
  PARAMETER(LCL.Commodity_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  ENDDO;

  //?Get Market Price for Default Cmdty Mkt Code    PK0199
  DO;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('DFTMKT');
  PARAMETER(LCL.Commodity_Market_Code_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?subtract 1 from actual shipped date for starting point
  // WRK.Actual Shipped Date = DB1.Actual Shipped Date + CON.-1 *DAYS
  WRK.Actual_Shipped_Date = DATEINCR(DB1.Actual_Shipped_Date '-1' 'DY' 1111111 'NONE' 'N'
  1);

  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(LCL.Commodity_Market_Code_USR);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(WRK.Actual_Shipped_Date);
  PARAMETER(LCL.Default_Cmdty_Mkt_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  ENDDO;

  //?Retrieve Original Salesperson
  EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(PAR.Original_Salesperson);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Retrieve Shipping Zone           RMC Convert to Upper Case  2/01/2001
  // Execute function CVT Str to Upper Alpha US.
  EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(LCL.Destination_City);
  {
   PDWEUFR:  PGM PARM(&STRIN &STROUT)

   CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
  }

  EXECUTE FUNCTION(RTV Shipping Zone      IF) TYPE(EXCINTFUN)                     AC1485260;
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Destination_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Shipping_Zone_Code);
  {
   //?Execute internal function

   // Execute function CVT Str to Upper Alpha US.
   EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
   PARAMETER(PAR.Ship_To_City);
   PARAMETER(PAR.Destination_City);
   {
    PDWEUFR:  PGM PARM(&STRIN &STROUT)

    CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
   }

   EXECUTE FUNCTION(RTV Zone for City-ST   RT) TYPE(RTVOBJ) FILE(PDLUREP)          AC1484676;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Ship_To_State_Code);
   PARAMETER(PAR.Destination_City);
   PARAMETER(PAR.Shipping_Zone_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  //?02/27/09 PKD/SAZ E00341 Costing Components instead of Total Cost.
  //?Reverse sign on amount fields if credit memo
  CASE;

  // IF PAR.Billing Activity Type is Credit Memo
  IF PAR.Billing_Activity_Type = '2';

  // WRK.Extended Amount = DB1.Extended Amount * CON.-1 *
  WRK.Extended_Amount = DB1.Extended_Amount * -1;

  // WRK.Billing Detail Gross Dol. = DB1.Billing Detail Gross Dol. * CON.-1 *
  WRK.Billing_Detail_Gross_Dol = DB1.Billing_Detail_Gross_Dol * -1;

  //?10/15/2012 PKD E2199 Adjust Billing Detail Gross
  // WRK.Billing Detail Gross Dol. = WRK.Billing Detail Gross Dol. + PAR.SH Revenue Adjust Amount
  WRK.Billing_Detail_Gross_Dol = WRK.Billing_Detail_Gross_Dol
  + PAR.SH_Revenue_Adjust_Amount;

  // WRK.FOB Gross Amount = PAR.FOB Gross Amount
  WRK.FOB_Gross_Amount = PAR.FOB_Gross_Amount;

  // WRK.Absorbed Freight Amount = PAR.Absorbed Freight Amount * CON.-1 *
  WRK.Absorbed_Freight_Amount = PAR.Absorbed_Freight_Amount * -1;

  //?The value is already in the sign necessary -Purva
  // WRK.Accrual Charge Amount = WRK.Accrual Charge Amount * CON.-1 *
  WRK.Accrual_Charge_Amount = WRK.Accrual_Charge_Amount * -1;

  // WRK.Special Charge Amount = WRK.Special Charge Amount * CON.-1 *
  WRK.Special_Charge_Amount = WRK.Special_Charge_Amount * -1;

  // WRK.Freight Charge Amount = WRK.Freight Charge Amount * CON.-1 *
  WRK.Freight_Charge_Amount = WRK.Freight_Charge_Amount * -1;

  // WRK.Standard Overage Amount = PAR.Standard Overage Amount * CON.-1 *
  WRK.Standard_Overage_Amount = PAR.Standard_Overage_Amount * -1;

  //?Reverse sign on amount fields if credit memo
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Extended Amount = DB1.Extended Amount
  WRK.Extended_Amount = DB1.Extended_Amount;

  // WRK.Billing Detail Gross Dol. = DB1.Billing Detail Gross Dol.
  WRK.Billing_Detail_Gross_Dol = DB1.Billing_Detail_Gross_Dol;

  //?10/15/2012 PKD E2199 Adjust Billing Detail Gross
  // WRK.Billing Detail Gross Dol. = WRK.Billing Detail Gross Dol. + PAR.SH Revenue Adjust Amount
  WRK.Billing_Detail_Gross_Dol = WRK.Billing_Detail_Gross_Dol
  + PAR.SH_Revenue_Adjust_Amount;

  // WRK.FOB Gross Amount = PAR.FOB Gross Amount
  WRK.FOB_Gross_Amount = PAR.FOB_Gross_Amount;

  // WRK.Absorbed Freight Amount = PAR.Absorbed Freight Amount
  WRK.Absorbed_Freight_Amount = PAR.Absorbed_Freight_Amount;

  //?The value is already in the sign necessary -Purva
  // WRK.Unused Amount Field = PAR.Unused Amount Field
  WRK.Standard_Overage_Amount = PAR.Standard_Overage_Amount;

  ENDIF;

  //?** Rtv Delivery P.O. Number from Order Header EXT file    FP1303
  //?** Rtv Intended for Export from Order Header EXT file    E00157
  //?E2438 One RTV from OHE for:
  //?05/18/18 DN R12926-Change RTV to Get OHE Booking # & OHE Genset #.
  EXECUTE FUNCTION(RTV for SalesHist     RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2060662;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.OHE_Booking_Number);
  PARAMETER(LCL.OHE_Spot_Buy);
  PARAMETER(PAR.SH_Order_Sales_Channel);
  PARAMETER(PAR.Delivery_P_O_Number);
  PARAMETER(WRK.SH_Intended_for_Export_CC);
  PARAMETER(LCL.OHE_Abs_Rate_Override_Rsn);
  PARAMETER(LCL.OHE_Orig_ABS_Freight_Rate);
  PARAMETER(LCL.OHE_Genset_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?01/13/21 DN R17029-Commented Out 'OHE Spot Buy' Logic. Use OD Instead.
  ENDDO;

  //?Create Main History Record
  //?12/08/06 PKD PK0040 Create w/Accounting Company & Update Shipping Co
  //?05/23/07 RMC DLY029 dont output broker here;its in hist dtl accrual
  //?02/27/09 PKD Changed to send in zero for Unit Cost per lb & Pricing UM
  //?05/05/11 RMC P1407 3c Forecasting - output Process sts for 3C = "N"
  //?07/15/19 DN R15161-Set Booking # to Blank. Will Update Booking # in SHE.
  EXECUTE FUNCTION(CRT OM History         CR) TYPE(CRTOBJ) FILE(OMHSTPP)          AC1325544;
  PARAMETER(PAR.Accounting_Company);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Bill_to_City);
  PARAMETER(PAR.Bill_to_State_Code);
  PARAMETER(PAR.County_Code);
  PARAMETER(PAR.Bill_to_Zip_Postal_Code);
  PARAMETER(PAR.Alpha_Search);
  PARAMETER(PAR.Country_Code);
  PARAMETER(PAR.Type_Code);
  PARAMETER(PAR.Parent_Customer);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(PAR.Customer_Name);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Ship_To_Zip_Postal_Code);
  PARAMETER(PAR.Customer_Purchase_Order_#);
  PARAMETER(PAR.Order_Date);
  PARAMETER(PAR.Cancel_Date);
  PARAMETER(PAR.Sales_Route_Code);
  PARAMETER(PAR.Original_Salesperson);
  PARAMETER(PAR.Manager_Level_Code);
  PARAMETER(PAR.VP_Level_Code);
  PARAMETER(PAR.Terms_Code);
  PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Reason_Code);
  PARAMETER(PAR.Order_Type_Sales);
  PARAMETER(PAR.Shipping_Method);
  PARAMETER(PAR.Export_Status);
  PARAMETER(PAR.Attach_to_Invoice_Number);
  PARAMETER(PAR.Attach_to_Order_Number);
  PARAMETER(PAR.Resell_Reference_Number);
  PARAMETER(WRK.Original_Item);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Quantity_Ordered);
  PARAMETER(DB1.Weight_Ordered);
  PARAMETER(DB1.Quantity_Scheduled);
  PARAMETER(DB1.Weight_Scheduled);
  PARAMETER(DB1.U_M_Ordered);
  PARAMETER(DB1.Unit_Price);
  PARAMETER(DB1.Unit_Price_Ordered_U_M);
  PARAMETER(DB1.U_M_Base_Price);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(PAR.Invoice_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Unit_Weight_Ordered_U_M);
  PARAMETER(WRK.Extended_Amount);
  PARAMETER(DB1.Affect_Inventory_Status);
  PARAMETER(DB1.Affect_Sales_Doll_Status);
  PARAMETER(DB1.Affect_Sales_Pnds_Status);
  PARAMETER(DB1.Contract_Number);
  PARAMETER(DB1.Country_Code);
  PARAMETER(PAR.Arrival_Date);
  PARAMETER(PAR.Accounting_Year_Code);
  PARAMETER(PAR.Accounting_Period_Code);
  PARAMETER(PAR.OM_Week);
  PARAMETER(DB1.Quantity_Shipped_Total);
  PARAMETER(DB1.Weight_Shipped_Total);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Billing_Detail_Cost_Dol);
  PARAMETER(WRK.Billing_Detail_Gross_Dol);
  PARAMETER(WRK.FOB_Gross_Amount);
  PARAMETER(WRK.Standard_Overage_Amount);
  PARAMETER(DB1.Tare_Weight_Total);
  PARAMETER(WRK.GL_Document_Number);
  PARAMETER('N');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Price_Overage_Override);
  PARAMETER(DB1.Date_Method_Code);
  PARAMETER(DB1.Price_Method_Code);
  PARAMETER(DB1.Market_Pricing_Date);
  PARAMETER(DB1.Commodity_Market_Code);
  PARAMETER(DB1.Quality_Level);
  PARAMETER(DB1.Item_Level);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Suffix);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(PAR.Packaging_Code);
  PARAMETER(PAR.Item_Market_Code);
  PARAMETER(PAR.Agrimetrics_group);
  PARAMETER(PAR.Agrimetrics_pack);
  PARAMETER(PAR.Agrimetrics_grade);
  PARAMETER(DB1.Order_Desc_Line_One);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(PAR.PM_Raw_Material_Type_Code);
  PARAMETER(PAR.PM_Line_Number);
  PARAMETER(PAR.SH_Unused_was_broker);
  PARAMETER(DB1.Pricing_Date_Used);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(WRK.Absorbed_Freight_Amount);
  PARAMETER(PAR.Ledgrd_Trd_Fund_Accrl_Amt);
  PARAMETER(PAR.Commission_Amount);
  PARAMETER(WRK.Special_Charge_Amount);
  PARAMETER(WRK.Freight_Charge_Amount);
  PARAMETER(PAR.Group_for_Packaging);
  PARAMETER(PAR.Base_Conv_Loss_Item);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(PAR.Customer_Group_Code);
  PARAMETER(PAR.Customer_Group_Code_2);
  PARAMETER(DB1.Order_Group_Code);
  PARAMETER(PAR.Shipping_Zone_Code);
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.BLANK);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Shipping_Line);
  PARAMETER(PAR.Port_Delv_Terminal);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Vessel_Name);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Load_Total_Freight);
  PARAMETER(PAR.Claim_Number);
  PARAMETER(DB1.Ham_Group_Number);
  PARAMETER(DB1.Palletize);
  PARAMETER(LCL.Commodity_Market_Price);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Default_Cmdty_Mkt_Price);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(PAR.LH_Load_Type);
  PARAMETER(DB1.Ord_TF_Exempt_Code);
  PARAMETER(*ZERO);
  PARAMETER(PAR.NonLedgrd_TrdFnd_Acrl_Amt);
  PARAMETER(DB1.OD_Item_Target_Price);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  //?06/17/08 PKD FP1269 Update Sales History EXT
  // PAR.SH Price Type = DB1.OD Price Type
  PAR.SH_Price_Type = DB1.OD_Price_Type;

  //?09/22/08 SAZ E00178 Update Sales History EXT with Price Type Ref Num
  //?07/15/09 LJB E00424 Update SH EXT with Slip Sheet flag
  //?09/10/2009 LJB E00157 Update SHE with Intended for Export country code
  //?02/14/13 RMC E2438 Update SH EXT with Order Sales Channel
  //?11/07/13 RMC E2872 Update SH EXT with calendar yr/week
  //?06/26/14 RMC E3147 Update SH EXT with Spot Buy = Y or N, blank(=No)
  //?05/18/18 DN R12926-Upd SH EXT w/ Orig Ord Abs Freight Rate.
  CASE;

  // IF LCL.OHE Orig ABS Freight Rate is equal to zero
  IF LCL.OHE_Orig_ABS_Freight_Rate = *ZERO;

  //?If Zero then use Order Header.
  EXECUTE FUNCTION(Rtv Absorbed Frt Rate RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2149231;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Orig_Ord_ABS_Freight_Rate);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?05/18/18 DN R12926-Upd SH EXT w/ Orig Ord Abs Freight Rate.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Orig Ord ABS Freight Rate = LCL.OHE Orig ABS Freight Rate
  LCL.Orig_Ord_ABS_Freight_Rate = LCL.OHE_Orig_ABS_Freight_Rate;

  ENDIF;

  // PAR.SH Price Type Ref Num = DB1.OD Price Type Ref Num
  PAR.SH_Price_Type_Ref_Num = DB1.OD_Price_Type_Ref_Num;

  //?Get GATADJ adj
  CASE;

  // IF DB1.Price Method Code is Deviated Gate Price
  IF DB1.Price_Method_Code = 'DVG';

  EXECUTE FUNCTION(RTV Gate/Final Adj    RT) TYPE(RTVOBJ) FILE(PDIMCPP)           AC2070322;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER('GATADJ');
  PARAMETER(PAR.SH_Gate_Final_Adjustmnt);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  //?Get DVFADJ adj
  CASE;

  // IF DB1.Price Method Code is Deviated Flat Duty Item
  IF DB1.Price_Method_Code = 'DVF';

  EXECUTE FUNCTION(RTV Gate/Final Adj    RT) TYPE(RTVOBJ) FILE(PDIMCPP)           AC2070322;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER('DVFADJ');
  PARAMETER(PAR.SH_Gate_Final_Adjustmnt);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Week Number       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1386894;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(LCL.Accounting_Year_Code);
  PARAMETER(LCL.Week_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?07/15/19 DN R15161-Use OHE Booking # & Genset # to Update SHE File.
  //?08/16/19 DN R15322-Use OD Firm Date & Orig Ordered Qty to Update SHE File.
  //?01/13/21 DN R17029-Populate SHE Spot Buy from OD Instead of OHE File.
  EXECUTE FUNCTION(Crt Sales History EXT CR) TYPE(CRTOBJ) FILE(PMD0CPP)           AC1886772;
  PARAMETER(PAR.Accounting_Company);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.SH_Fuel_Surcharge_Amount);
  PARAMETER(PAR.SH_Price_Type);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.OD_Spot_Buy);
  PARAMETER(PAR.SH_Unused_Sts_2);
  PARAMETER(PAR.SH_Order_Sales_Channel);
  PARAMETER(PAR.SH_Price_Type_Ref_Num);
  PARAMETER(PAR.Delivery_P_O_Number);
  PARAMETER(DB1.OD_Firm_Date);
  PARAMETER(PAR.SH_Revenue_Adjust_Amount);
  PARAMETER(LCL.Orig_Ord_ABS_Freight_Rate);
  PARAMETER(PAR.SH_Unused_Value_3);
  PARAMETER(DB1.Order_Gate_Final_Price);
  PARAMETER(PAR.SH_Gate_Final_Adjustmnt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(LCL.OHE_Abs_Rate_Override_Rsn);
  PARAMETER(WRK.SH_Intended_for_Export_CC);
  PARAMETER(LCL.SH_Unused_Status_6_1);
  PARAMETER(*BLANK);
  PARAMETER(LCL.OHE_Booking_Number);
  PARAMETER(LCL.OHE_Genset_Number);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Week_Number);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Accounting_Year_Code);
  PARAMETER(DB1.OD_Original_Ordered_Qty);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

  // WRK.USR Process status = CND.yes
  WRK.USR_Process_status = 'Y';

 }

 //?This function will create a Order Event Record for History
 EXECUTE FUNCTION(CRT History Event      RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1341856;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('06');
 PARAMETER(DB1.Ship_To_Customer);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(1);
  PARAMETER(PAR.Event_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(JOB.*Job_date);
  PARAMETER('Y');
  PARAMETER('N');
  PARAMETER('Y');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // WRK.Event Number = DB1.Event Number + CON.1
  WRK.Event_Number = DB1.Event_Number + 1;

  EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Event_Number);
  PARAMETER('07');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Invoice_Memo_Number);
  PARAMETER(DB1.Invoice_Memo_Suffix);
  PARAMETER(JOB.*Job_date);
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER('N');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Ship_To_Customer);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  QUIT;

 }

 //?Update Order Header Status and Event
 // LCL.Header Status Last = DB1.Header Status
 LCL.Header_Status_Last = DB1.Header_Status;

 EXECUTE FUNCTION(CHG for Invoice Post   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1341749;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('C');
 PARAMETER(LCL.Header_Status_Last);
 PARAMETER('N');
 PARAMETER('07');
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 {
  //?USER: Processing after Data read

  //?doesnt upd the last from here - discovered 3.10.16
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 //?**** Read all Load Orders, if all orders have been Invoiced then
 //?**** Update Load as Invoiced
 EXECUTE FUNCTION(RTV Ld Orders Invoiced RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377315;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Invoiced_Flag_USR);
 {
  //?USER: Initialize routine

  //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
  //?                                    to remove Company RST or Pos
  // PAR.Invoiced Flag USR = CND.Invoiced
  PAR.Invoiced_Flag_USR = 'Y';

  //?USER: Process Data record

  CASE;

  // IF DB1.Header Status is Complete
  IF ( ( DB1.Header_Status = 'C';

  // AND DB1.Event Code is 07 Written to History
  AND DB1.Event_Code = '07' );

  // OR DB1.Header Status is Cancelled
  OR DB1.Header_Status = 'X' );

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Invoiced Flag USR = CND.Not Invoiced
  PAR.Invoiced_Flag_USR = 'N';

  QUIT;

  ENDIF;

 }

 //?If all Load Orders have been Invoiced, then update load + alc frt 11/15/6
 CASE;

 // IF PAR.Invoiced Flag USR is Invoiced
 IF PAR.Invoiced_Flag_USR = 'Y';

 EXECUTE FUNCTION(CHG Load Status        CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1197977;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER('I');
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

 }

 //?TRF015 RMC 11/15/06 Added following code to Allocate Freight:
 //?  If Carrier IS Paid then allocate Load Actual Freight
 //?  If Carrier Not Paid and Carrier Paym>0, then allocate carrier paym
 // WRK.Load Actual Freight = CON.*ZERO
 WRK.Load_Actual_Freight = *ZERO;

 //?Check Carrier paid or not to determine which freight amt to allocate
 CASE;

 // IF LCL.LH Carrier Payment Sts is Paid
 IF LCL.LH_Carrier_Payment_Sts = 'P';

 // WRK.Load Actual Freight = LCL.Load Actual Freight
 WRK.Load_Actual_Freight = LCL.Load_Actual_Freight;

 //?Check Carrier paid or not to determine which freight amt to allocate
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.Load Carrier Pay Amt is Not Zero
 IF LCL.Load_Carrier_Pay_Amt <> *ZERO;

 // WRK.Load Actual Freight = LCL.Load Carrier Pay Amt
 WRK.Load_Actual_Freight = LCL.Load_Carrier_Pay_Amt;

 ENDIF;

 ENDIF;

 CASE;

 // IF WRK.Load Actual Freight is Not Zero
 IF WRK.Load_Actual_Freight <> *ZERO;

 // Call program UPD Alloc Frt to Hist  XF.
 CALL PROGRAM(UPD Alloc Frt to Hist  XF) ('PLABXFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(WRK.Load_Actual_Freight);
 PARAMETER(LCL.Load_Total_Freight);

 ENDIF;

 ENDIF;

 //?**** Calculate Sales Expenses   PK0199
 //?12/08/06 PKD PK0040 Use Accounting Company
 // Call program Prc Sales History Exp XF.
 CALL PROGRAM(Prc Sales History Exp XF) ('POD8XFR');
 PARAMETER(PAR.Accounting_Company);
 PARAMETER(DB1.Order_Number);

 //?****
 //?*--------------------------------------------------------------
 //?* 01/04/01 PKD Added the following to create EDI records.
 EXECUTE FUNCTION(Rtv EDI/Prt Invoice   RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1611523;
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(LCL.EDI_Invoice_Sts);
 PARAMETER(LCL.Print_Invoice_Sts);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?RMC 3/13/01     Dont EDI  Credit Memos
 CASE;

 // IF DB1.Billing Activity Type is Credit Memo
 IF DB1.Billing_Activity_Type = '2';

 // LCL.EDI Invoice Sts = CND.no
 LCL.EDI_Invoice_Sts = 'N';

 ENDIF;

 //?SAZ 12/14/15 Dont EDI Debit Memos to SYSCO SAZ11/2/16 Block all DM via EDI
 CASE;

 // IF DB1.Billing Activity Type is Debit Memo
 IF DB1.Billing_Activity_Type = '3';

 // LCL.EDI Invoice Sts = CND.no
 LCL.EDI_Invoice_Sts = 'N';

 ENDIF;

 //? 7/13/2021 JBB SDD657 Trading Partner Controls for OMS Docs
 // Call program Rtv EDI Manual PO Sts XF.
 CALL PROGRAM(Rtv EDI Manual PO Sts XF) ('PUTBXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('IN');
 PARAMETER(LCL.Send_EDI_Document_Y_N);

 //?If Send EDI Document Y/N = N, set EDI Invoice Sts = N
 CASE;

 // IF LCL.Send EDI Document Y/N is No
 IF LCL.Send_EDI_Document_Y_N = 'N';

 // LCL.EDI Invoice Sts = CND.no
 LCL.EDI_Invoice_Sts = 'N';

 ENDIF;

 //?EDI
 CASE;

 // IF LCL.EDI Invoice Sts is yes
 IF LCL.EDI_Invoice_Sts = 'Y';

 //?*** EDI = Y --> Create EDI Work Files
 // Call program Crt ECP001/002/003    UP.
 CALL PROGRAM(Crt ECP001/002/003    UP) ('EC200');
 PARAMETER(PAR.Accounting_Company);
 PARAMETER(DB1.Order_Number);

 //?08/18/08 PKD Messaging used for debugging.
 ENDIF;

 //?*--------------------------------------------------------------
 ENDIF;

 //?Quit if processing 1 order/invoice
 CASE;

 // IF PAR.Invoice Number NE WRK.ZERO
 IF PAR.Invoice_Number <> WRK.ZERO;

 QUIT;

 ENDIF;

}


