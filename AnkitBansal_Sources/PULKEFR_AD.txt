// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PULKEFR
// ?Date: 14.08.2025 Time: 03:50:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.PFS Company Number USR = PAR.PFS Company Number
CTL.PFS_Company_Number_USR = PAR.PFS_Company_Number;

// CTL.PFS Production Date USR = PAR.PFS Production Date
CTL.PFS_Production_Date_USR = PAR.PFS_Production_Date;

ENDIF;

//?USER: Initialize subfile record (new record)

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

SET CURSOR;

ENDIF;

// RCD.PFS Company Number = CTL.PFS Company Number USR
RCD.PFS_Company_Number = CTL.PFS_Company_Number_USR;

// RCD.PFS Production Date = CTL.PFS Production Date USR
RCD.PFS_Production_Date = CTL.PFS_Production_Date_USR;

//?USER: Validate subfile control

//?Validations.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Company.
CASE;

// IF CTL.PFS Company Number USR is Entered
IF CTL.PFS_Company_Number_USR <> *ZERO;

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(CTL.PFS_Company_Number_USR);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(NLL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number must be a Plant company.'
ERROR(USR3706);
MSGPARM(CTL.PFS_Company_Number_USR);

QUIT;

ENDIF;

//?Company.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.USR Company Number = CTL.PFS Company Number USR
LCL.USR_Company_Number = CTL.PFS_Company_Number_USR;

// Send error message - 'Company number must be entered.'
ERROR(USR2384);
MSGPARM(LCL.USR_Company_Number);

QUIT;

ENDIF;

//?Production Date.
CASE;

// IF CTL.PFS Production Date USR is Entered
IF CTL.PFS_Production_Date_USR <> *ZERO;

// LCL.Production Date USR D8# = CTL.PFS Production Date USR
LCL.Production_Date_USR_D8# = CTL.PFS_Production_Date_USR;

// LCL.Production Date USR = LCL.Production Date USR D8#
LCL.Production_Date_USR = LCL.Production_Date_USR_D8#;

// LCL.Date From             USR = JOB.*Job date + CON.-30 *DAYS
LCL.Date_From_USR = DATEINCR(JOB.*Job_date '-30' 'DY' 1111111 'NONE' 'N' 1);

// LCL.Date To               USR = JOB.*Job date + CON.30 *DAYS
LCL.Date_To_USR = DATEINCR(JOB.*Job_date 30 'DY' 1111111 'NONE' 'N' 1);

//?Must Be Within 30 +/- Days.
CASE;

// IF LCL.Production Date USR LT LCL.Date From             USR
IF LCL.Production_Date_USR < LCL.Date_From_USR;

// OR LCL.Production Date USR GT LCL.Date To               USR
OR LCL.Production_Date_USR > LCL.Date_To_USR;

// Send error message - 'Production Date Should be between &2 and &3.'
ERROR(USR2461);
MSGPARM(CTL.PFS_Production_Date_USR);
MSGPARM(LCL.Date_From_USR);
MSGPARM(LCL.Date_To_USR);
MSGPARM(*ZERO);

QUIT;

ENDIF;

//?Production Day Status Must Be Yes.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Prd Day Sts       RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1393177;
PARAMETER(CTL.PFS_Company_Number_USR);
PARAMETER(LCL.Production_Date_USR);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Don't Allow Add if Production Day Sts Not Yes.
CASE;

// IF LCL.Production Day Status is yes
IF LCL.Production_Day_Status = 'Y';

//?Don't Allow Add if Production Day Sts Not Yes.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CON.Date not allowed. Not a
LCL.Generic_Message_80_USR = 'Date not allowed. Not a';

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.production day in the,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'production day in the' (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.Calendar file.,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'Calendar file.' (1);

// Send error message - '&1'
ERROR(USR5117);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(CTL.PFS_Production_Date_USR);

QUIT;

ENDIF;

ENDIF;

//?Production Date.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(CTL.PFS_Production_Date_USR);

QUIT;

ENDIF;

ENDIF;

//?USER: Validate subfile record fields

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Select Item #.
CASE;

// IF PGM.*Cursor field <IS> RCD.PFS Item Code
IF PGM.*Cursor_field = RCD.PFS_Item_Code;

// Call program SEL Actv Finished Good SR.
CALL PROGRAM(SEL Actv Finished Good SR) ('PDNHSRR');
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Item_Code);

ENDIF;

ENDIF;

//?Validations.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Item.
CASE;

// IF RCD.PFS Item Code is Entered
IF RCD.PFS_Item_Code <> *ZERO;

EXECUTE FUNCTION(Val FG Item Exists    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1513424;
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Item_Code);
PARAMETER(RCD.Description_Line_One);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Company Item Not Found'
ERROR(USR3359);

QUIT;

ENDIF;

ENDIF;

ENDIF;

// RCD.PFS Company Number = CTL.PFS Company Number USR
RCD.PFS_Company_Number = CTL.PFS_Company_Number_USR;

// RCD.PFS Production Date = CTL.PFS Production Date USR
RCD.PFS_Production_Date = CTL.PFS_Production_Date_USR;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt PFS Bal Fallout CdeCR) TYPE(CRTOBJ) FILE(PUBBCPP)          AC2166127;
PARAMETER(RCD.PFS_Company_Number);
PARAMETER(RCD.PFS_Production_Date);
PARAMETER(RCD.PFS_Item_Code);
PARAMETER(RCD.PFS_Balance_Flag);
PARAMETER(RCD.PFS_Fallout_Flag);
PARAMETER(RCD.PFS_Notes);
PARAMETER('A');
PARAMETER(RCD.PFS_Process_Status);
PARAMETER(RCD.PFS_Error_Reason);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Create Stamp 2    IF) TYPE(EXCINTFUN)                      AC2166252;
 PARAMETER(DB1.PFS_Process_Status);
 PARAMETER(DB1.PFS_Create_Date);
 PARAMETER(DB1.PFS_Create_Time);
 {
  //?Execute internal function

  // PAR.PFS Process Status = CND.Not Processed
  PAR.PFS_Process_Status = *ZERO;

  // LCL.USR Internal D8# YYYYMMDD = JOB.*Job date
  LCL.USR_Internal_D8#_YYYYMMDD = JOB.*Job_date;

  // PAR.PFS Create Date = LCL.USR Internal D8# YYYYMMDD
  PAR.PFS_Create_Date = LCL.USR_Internal_D8#_YYYYMMDD;

  // PAR.PFS Create Time = JOB.*Job time
  PAR.PFS_Create_Time = JOB.*Job_time;

 }

}


