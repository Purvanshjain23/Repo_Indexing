      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production
      * PROGRAM:     HP4030
      * TITLE:       Work with Reported Daily Activity
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     10/21/02
      *
      * FUNCTION: This is a Work With that displays the records in the Reported Daily Activity
      *           file.
      *
      *           Restrictors:
      *               Business office code
      *
      *           Positioners:
      *               Daily date       (descending)
      *
      *           Selectors:
      *               Cell
      *               Farm site
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 08/24/05  LeAnne Fedor
      *           New field "Man Hours" was added to Reported Daily Activity
      *           file. Added new field to screen.
      *
      * 10/19/07  LeAnne Ramsey
      *           Recompile only. The users are switching "manhours" from being
      *           "total" manhours for the day to being the "average" manhours
      *           for the day. So, added the word "average" to the text on the
      *           screen.
      *
      * 09/19/08  LeAnne Ramsey
      *           Recompile only.
      *           The users are switching "average manhours" back to "total manhours".
      *           So, removed the word "average" from the screen text.
      *
      * 05/14/09  LeAnne Ramsey
      *           Per Sami Wilson, we will remove Projected Destroyed Head.
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd4030   cf   e             workstn sfile(hp4030s1:hdrrn1)
     F                                     infds(iofeed)
      *
     Fhsp002    if   e           k disk
      *    Functions
      *
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsl103a   if   e           k disk    infds(dbfeed)
      *    Reported daily activity
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D view            c                   'VIEW  '
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC - F7-list
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Control fields
      *
     D termfl          s              1
      *
      *
      * Save fields for restrictors, positioners and selectors
      *
     D svfsbo          s                   like(c1fsbo)
     D svbods          s                   like(c1bods)
     D svfscd          s                   like(c1fscd)
     D svcell          s                   like(c1cell)
     D svkdmdy         s                   like(c1kdmdy)
     D svwemdy         s                   like(c1wemdy)
     D svdvcd          s                   like(oudvcd)
      *
      *
      * Parm fields
      *
     D infncd          s             10
     D inbobo          s              5
     D indvfl          s              1
     D inbofl          s              1
     D oubobo          s              5
     D oubods          s             30
     D oudvcd          s              5
     D secfl           s              1
     D oubofl          s              1
     D ourmfl          s              1
      *
     D xxfscd          s                   like(fsfscd)
     D xxfsbo          s                   like(c1fsbo)
     D xxfsnm          s                   like(fsfsnm)
     D xxbods          s                   like(c1bods)
     D xxkdmdy         s                   like(d1kdmdy)
     D xxdydt          s                   like(hddydt)
     D xxfcymd         s                   like(hddydt)
     D xxtcymd         s                   like(hddydt)
     D xxcymd          s                   like(hddydt)
     D xxfmdy          s              6  0
     D xxtmdy          s              6  0
     D xxmdy           s              6  0
     D xxptcd          s                   like(fsptcd)
     D xxppcd          s                   like(fsppcd)
     D xxcell          s                   like(fscell)
      *
     D xxjobq          s             10     inz('*JOBD     ')
     D xxnite          s              1     inz('N')
     D xxcopy          s              1  0
     D xxclp           s              8
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Workfields
      *
     D wkdydt          s                   like(hddydt)
     D wkwedt          s                   like(rdwedt)
     D wkfncd          s                   like(sdpgm)
      *
      *
      * Work fields for standard security checks that involve business office.
      *
     D wkbobo          s                   like(c1fsbo)
     D wkbods          s                   like(c1bods)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d1opt                          2
     D   wkopt1                       1    overlay(d1opt)
     D   wkopt2                       1    overlay(d1opt:2)
      *
      *---------------------------------------------------------------
      *  LDA
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldfsbo                 1      5
     D  ldfcymd                6     13  0
     D  ldtcymd               14     21  0
     D  ldfscd                22     26  0
     D  ldfsnm                27     51
      *
     D  ldfmdy                52     57  0
     D  ldtmdy                58     63  0
     D  ldcell                64     65  0
     D  ldcymd                66     73  0
     D  ldmdy                 74     79  0
      *
     D  ldoutu               401    410
     D  ldhold               411    411
     D  ldcopy               412    412  0
     D  ldoutq               413    422
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   if        termfl = no
     C                   exsr      $clr1
     C                   exsr      $frsh1
     C                   endif
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * If the user failed the initial security checks, set on indicator to
      * protect input fields and invalidate function keys.
      *
     C                   if        termfl = yes
     C                   seton                                        99
     C                   endif
      *
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp4030k1
     C                   write     hp4030ec
     C                   exfmt     hp4030c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on or termfl = yes                  F3-EXIT
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-PROMPT
     C                   exsr      $f4s1
      *
     C                   if        fld = 'C1FSBO' and c1fsbo <> svfsbo
     C                   movel(p)  'HP4030'      wkfncd
     C                   exsr      $chkbo
     C                   endif
      *
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   movel     svfsbo        c1fsbo
     C                   movel     svbods        c1bods
     C                   eval      routne = set1
      *
     C                   when      *in06 = *on                                  F6-create
     C                   if        c1fsbo <> svfsbo
     C                   movel(p)  'HP4030'      wkfncd
     C                   exsr      $chkbo
     C                   endif
     C                   if        error = 0
      *
      *  Check user authority to the function
      *
     C                   movel     c1fsbo        svfsbo
     C                   movel     c1bods        svbods
     C                   movel(p)  'HP1030'      wkfncd
     C                   exsr      $sec
     C                   if        error = 0
     C                   exsr      $creat
     C                   endif
     C                   else
     C                   endif
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in07 = *on                                  F7-listing
     C                   exsr      $listopts
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in17 = *on                                  F17-print opt
     C                   eval      routne = scrn1
     C                   call      'HP451'
     C                   parm                    sdpgm
     C     ldcopy        parm      ldcopy        xxcopy
     C                   parm                    ldhold
     C                   parm                    ldoutq
     C                   parm                    xxnite
     C                   parm                    xxjobq
      *
      *
     C                   when      *in19 = *on                                  F19-No data rpt
     C                   exsr      $listopts
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      svfsbo <> c1fsbo or                          If restrict
     C                             svfscd <> c1fscd or
     C                             svkdmdy <> c1kdmdy or
     C                             svwemdy <> c1wemdy or
     C                             svcell <> c1cell
      *
     C                   if        svfsbo <> c1fsbo
     C                   move      *blank        c1bods
     C                   movel(P)  'HP4030'      wkfncd
     C                   exsr      $chkbo
     C                   endif
      *
     C                   if        error = 0                                    If authority error
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If authority error
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   eval      routne = edit1
     C                   endif                                                  If empty sfl
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   movel     c1fsbo        svfsbo
     C                   movel     c1bods        svbods
     C                   movel     c1cell        svcell
      *
     C                   z-add     c1fscd        svfscd
     C                   z-add     c1kdmdy       svkdmdy
     C                   z-add     c1wemdy       svwemdy
      *
      * Flip Daily Date selector from mmddyy to ccyymmdd format
      *
     C     *mdy          test(d)                 c1kdmdy                92
     C                   if        *in92 = *on                                  If bad date
     C                   z-add     0             wkdydt
     C                   else
     C     *mdy          move      c1kdmdy       wkisodate
     C                   move      wkisodate     wkdydt
     C                   endif                                                  If bad date
      *
      * Flip Week-Ending Date selector from mmddyy to ccyymmdd format
      *
     C     *mdy          test(d)                 c1wemdy                92
     C                   if        *in92 = *on                                  If bad weekend
     C                   z-add     0             wkwedt
     C                   else
     C     *mdy          move      c1wemdy       wkisodate
     C                   move      wkisodate     wkwedt
     C                   endif                                                  If bad weekend
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * First, edit all the selections entered by the user in the
      * subfile option field to see that valid selections were input
      *
     C                   exsr      $edop1
      *
      * If there are no errors in the subfile option selectors entered
      * by the user, then execute the subroutine to reread and process
      * the records selected by the user.  After completing the
      * subroutine, set the routine to start over.
      *
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
      *
     C                   if        rtncd = '00'
     C                   eval      routne = set1
     C                   else
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
     C                   endif
      *
      * else there were errors in the subfile options entered,
      * so set to redisplay screen with errors to user
      *
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   hp4030s1
     C                   seton                                        83        sflclr
     C                   write     hp4030c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C                   select
     C                   when      c1kdmdy = 0
     C     c1fsbo        setll     hsl103a
     C                   other
     C     key01         setll     hsl103a
     C                   endsl
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   eval      count = 0
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C     c1fsbo        reade     hsl103a                                82
     C                   if        *in82 = *off                                 If read
      *
      * Retrieve cell associated with farm site.
      *
     C     rdfscd        chain     hsp018                             92
     C                   if        *in92 = *off                                 If found
     C                   z-add     fscell        d1cell
     C                   else
     C                   z-add     0             d1cell
     C                   endif                                                  If found
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1fscd <> 0 and                               If farm
     C                             c1fscd <> rdfscd
     C                   else
      *
     C                   if        c1cell <> 0 and                               If cell
     C                             c1cell <> fscell
     C                   else
      *
     C                   if        c1wemdy <> 0 and                              If date
     C                             wkwedt <> rdwedt
     C                   else
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   move      *blank        d1opt
     C                   z-add     rddydt        hddydt
     C                   z-add     rdfscd        d1fscd
     C                   z-add     rdddhd        d1ddhd
     C                   z-add     rddshd        d1dshd
     C                   z-add     rdmanhr       d1manhr
      *
     C     *iso          test(d)                 rddydt                 92
     C                   if        *in92 = *off                                 If OK daily
     C                   move      rddydt        wkisodate
     C     *mdy          move      wkisodate     d1kdmdy
     C                   endif                                                  If OK daily
      *
     C     *iso          test(d)                 rdwedt                 92
     C                   if        *in92 = *off                                 If OK weekend
     C                   move      rdwedt        wkisodate
     C     *mdy          move      wkisodate     d1wemdy
     C                   endif                                                  If OK weekend
      *
     C                   write     hp4030s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If date
     C                   endif                                                  If cell
     C                   endif                                                  If farm
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call the maintenance program when the user takes F6
      *---------------------------------------------------------------
      *
     C     $creat        begsr
      *
     C                   call      'HP1030'
     C                   parm      create        mode
     C                   parm                    c1fsbo
     C                   parm      0             xxfscd
     C                   parm      0             xxkdmdy
     C                   parm      0             xxdydt
     C                   parm      '00'          rtncd
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Check the business office entered as a restrictor
      *----------------------------------------------------------------
      *
      * The business office entered must:
      * 1) be valid in the business office master
      * 2) be a 'live production' division office
      * 3) have a security location to which the user is authorized
      *
     C     $chkbo        begsr
      *
      * Clear subfile
      *
     C                   exsr      $clr1
      *
      * Chect the user's security to this business office.
      * Set INDVFL to yes to tell the security program to compare the function
      * divisoin code to the B.O. division code.
      *
     C                   movel     yes           indvfl
     C                   exsr      $sec
     C                   if        oubofl = yes
     C                   seton                                        31
     C                   endif
      *
     C                   movel     no            indvfl
     C                   movel     oubods        c1bods
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------------
      * Read and edit changed subfile records for valid subfile options on Screen 1
      *-------------------------------------------------------------------------------
      *
     C     $edop1        begsr
      *
     C                   z-add     0             error
      *
      * Read all changed subfile records, editing for valid options
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do readc
     C                   readc     hp4030s1                               80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set off error indicator for subfile option field
      *
     C                   setoff                                       30
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be standardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
      * Test for valid subfile option entry on all changed records
      *
     C                   if        d1opt <> ' 2' and                            If bad opt
     C                             d1opt <> ' 4' and
     C                             d1opt <> '  '
     C                   seton                                        3085
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09006'
     C                   exsr      $err1
     C                   endif
     C                   else
      *
      *
      * The option is valid.  So, check the user's authority to the function.
      *
     C                   if        d1opt <> *blank                              If good option
      *
     C                   select
     C                   when      d1opt = ' 2'
     C                   movel(p)  'HP1030'      wkfncd
      *
     C                   when      d1opt = ' 4'
     C                   movel(p)  'HP1030'      wkfncd
     C                   endsl
      *
      * Check user authority to the function.
      *
     C                   exsr      $sec
      *
     C                   if        secfl = yes
     C                   seton                                        30
     C                   exsr      $err1
     C                   endif
      *
      * Rewrite the subfile record with the modified data tag on so it
      * will be reread and processed.
      *
     C                   seton                                        85
     C                   else
     C                   setoff                                       85
     C                   endif                                                  If good option
     C                   endif                                                  If bad opt
      *
     C                   update    hp4030s1
     C                   setoff                                       8530
     C                   endif                                                  If rec read
     C                   enddo                                                  Do readc
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Read subfile records and process user selections for Screen 1
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
     C                   z-add     0             error
     C                   movel     '00'          rtncd
      *
      *
      * Read all the changed subfile records processing the subfile
      * selection
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     hp4030s1                               80
     C                   if        *in80 = *off                                 If rec read
      *
     C                   if        rtncd = '00'                                 If enter
      *
      * If user selected option 2=revise,
      * set the flag 'reset' to YES so that when you return to this
      * Work With you will reposition to the same place in the subfile
      *
      *
     C                   select
     C                   when      d1opt = ' 2'
     C                   movel     yes           reset
     C                   call      'HP1030'
     C                   parm      revise        mode
     C                   parm                    c1fsbo
     C                   parm      d1fscd        xxfscd
     C                   parm      d1kdmdy       xxkdmdy
     C                   parm      hddydt        xxdydt
     C                   parm                    rtncd
      *
      * If user selected Option 4=delete,
      * set the flag 'reset' to YES so that when you return to this
      * Work With you will reposition to the same place in the subfile
      *
     C                   when      d1opt = ' 4'
     C                   movel     yes           reset
     C                   call      'HP1030'
     C                   parm      delete        mode
     C                   parm                    c1fsbo
     C                   parm      d1fscd        xxfscd
     C                   parm      d1kdmdy       xxkdmdy
     C                   parm      hddydt        xxdydt
     C                   parm                    rtncd
     C                   endsl
      *
      * Upon returning from the called program,
      * clear the subfile option selected by the user and rewrite
      * the subfile record.
      *
     C                   move      *blank        d1opt
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif                                                  If enter
      *
     C                   update    hp4030s1
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Logic for F7-Listing
      *---------------------------------------------------------------
      *
     C     $listopts     begsr
      *
      * If business office has changed, validate user's authority to office.
      *
     C                   if        c1fsbo <> svfsbo
     C                   movel(p)  'HP4030'      wkfncd
     C                   exsr      $chkbo
     C                   endif
      *
      * If user is authorized to business office
      *    call the pop-up window to allow user to enter listing options.
      *
     C                   if        error = 0                                    If authorized
      *
      * Activity listing
     C                   if        *in07 = *on
     C                   move      'HP4030CL'    xxclp
     C                   call      'HP4430'
     C     ldfsbo        parm      c1fsbo        xxfsbo
     C     ldcell        parm      0             xxcell
     C     ldfscd        parm      0             xxfscd
     C     ldfsnm        parm      *blank        xxfsnm
     C     ldfcymd       parm      0             xxfcymd
     C     ldtcymd       parm      0             xxtcymd
     C     ldfmdy        parm      0             xxfmdy
     C     ldtmdy        parm      0             xxtmdy
     C                   parm      *blank        rtncd
     C                   endif
      *
      * No data reprot
     C                   if        *in19 = *on
     C                   move      'HP4431CL'    xxclp
     C                   call      'HP4431'
     C     ldcell        parm      0             xxcell
     C     ldcymd        parm      0             xxcymd
     C     ldmdy         parm      0             xxmdy
     C                   parm      *blank        rtncd
     C                   endif
      *
      * If the user took the function key in the pop-up window to submit
      * the listing.
      *
     C                   if        rtncd = '08'
     C                   exsr      $list
     C                   endif
      *
     C                   endif                                                  If authorized
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Print listing
      *---------------------------------------------------------------
      *
     C     $list         begsr
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     xxjobq        cmd(51)
     C                   movea     xxclp         cmd(21)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Business office
      *
     C                   select
     C                   when      fld = 'C1FSBO'
     C                   call      'HP503'
     C                   parm      *blank        XXFSBO
     C                   parm      *blank        XXBODS
     C                   parm                    svdvcd
     C                   seton                                        51
     C                   if        xxfsbo <> *blank
     C                   movel     xxfsbo        c1fsbo
     C                   movel     xxbods        c1bods
     C                   endif
      *
      * Farm site
      *
     C                   when      fld = 'C1FSCD'
     C                   call      'HP551'
     C                   parm      c1fsbo        xxfsbo
     C                   parm      0             xxfscd
     C                   parm      *blank        xxfsnm
     C                   parm      *blank        xxppcd
     C                   parm      *blank        xxptcd
     C                   eval      *in52 = *on
     C                   if        xxfscd <> 0
     C                   z-add     xxfscd        c1fscd
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors on
      * Screen 1
      *-----------------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Security Program
      *---------------------------------------------------------------
      *
     C     $sec          begsr
      *
      * Set up the fields to send into the security program
      *
     C                   movel     wkfncd        infncd                         PGM NAME
     C                   movel     c1fsbo        inbobo                         SCREEN BO
      *
     C                   move      *blank        oubobo                         BO CODE
     C                   move      *blank        oubods                         BO DESC
     C                   move      *blank        oudvcd                         FUNCTION DIV
     C                   movel     no            termfl                         TERMINAL FLG
      *
     C                   call      'HPSEC  '
      **** IN
     C                   parm                    mgid                           MSGID ARRAY
     C                   parm                    mgdt                           MSGDTA DATA
     C                   parm                    error                          # OF errorS
     C                   parm                    infncd                         FUNC CODE
     C                   parm                    inbobo                         BO CODE
     C                   parm                    indvfl                         CHECK DIV?
     C                   parm                    inbofl                         CHECK B.O.?
      **** OUT
     C     wkbobo        parm                    oubobo                         BO CODE
     C     wkbods        parm                    oubods                         BO DESC.
     C                   parm                    oudvcd                         DIV CODE
     C                   parm                    secfl                          SEC ERR FLAG
     C                   parm                    oubofl                         B.O. ERR FLG
     C                   parm                    ourmfl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    c1fsbo
     C                   kfld                    wkdydt
      *
      *
      * Initialize LDA fields
      *
     C                   move      *blank        ldhold
     C                   z-add     0             ldcopy
     C                   movel     ldoutu        ldoutq
      *
      * Get this functions' number of copies, etc.
      *
     C     sdpgm         chain     hsp002                             92
     C                   if        *in92 = *off
     C                   z-add     fncopy        ldcopy
     C                   movel     fnhold        ldhold
     C                   endif
      *
     C                   if        ldcopy = 0
     C                   z-add     1             ldcopy
     C                   endif
      *
     C                   if        ldhold = *blank
     C                   movel     no            ldhold
     C                   endif
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     10            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
      * Execute the security routine to determine the user's authorizations.
      *
     C                   movel(p)  sdpgm         wkfncd
      *
      * Set INBOFL flag to NO to tell HPSEC not to validate the IN_B.O.
      * sent, but to send back the default B.O. for this user.
      *
     C                   movel     no            inbofl
     C                   exsr      $sec
     C                   movel     yes           inbofl
      *
      * If errors on the initial call, set the terminal flag to yes.
      *
     C                   if        secfl = yes
     C                   movel     yes           termfl
     C                   endif
      *
      * Move returned fields to control record
      *
     C                   movel     wkbobo        c1fsbo
     C                   movel     wkbobo        svfsbo
     C                   movel     wkbods        c1bods
     C                   movel     wkbods        svbods
      *
      * Save this function's division code
      *
     C                   movel     oudvcd        svdvcd
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F7 selected
SBMJOB CMD(CALL PGM(________)) JOB(LISTDACT) JOBQ(__________)
