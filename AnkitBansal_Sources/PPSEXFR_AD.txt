// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPSEXFR
// ?Date: 14.08.2025 Time: 03:41:43
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Rtv PFS Restoration   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1912410;
PARAMETER(PAR.PFS_From_Warehouse_Code);
PARAMETER(LCL.Lot_Tracking_Flag);
PARAMETER(LCL.WHS_Live_with_Carlisle);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.WHS Live w/Carlisle is Yes
IF LCL.WHS_Live_with_Carlisle = 'Y';

//?I.  Initialize Warehouse on hand to -0-
CASE;

// IF LCL.Lot Tracking Flag is yes
IF LCL.Lot_Tracking_Flag = 'Y';

// Call program PFS Post Phys Init    XF.
CALL PROGRAM(PFS Post Phys Init    XF) ('PPTCXFR');
PARAMETER(PAR.PFS_From_Warehouse_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Prc Post Phys Init    XF.
CALL PROGRAM(Prc Post Phys Init    XF) ('PPTDXFR');
PARAMETER('Y');
PARAMETER(PAR.PFS_From_Warehouse_Code);

ENDIF;

//?II. Process Warehouse Restoration matching input parm
EXECUTE FUNCTION(PFS Inventory Rst FRZ RT) TYPE(RTVOBJ) FILE(PPB0CPP)           AC1748470;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_From_Warehouse_Code);
{
 //?USER: Initialize routine

 //?09/09/09 PKD E00475 Use System Date instead of Job Date
 EXECUTE FUNCTION(Rtv System Date *CYMD IF) TYPE(EXCINTFUN)                      AC1952751;
 PARAMETER(LCL.System_Date_USR);
 {
  //?Execute internal function

  // LCL.*System timestamp = JOB.*System timestamp
  LCL.*System_timestamp = JOB.*System_timestamp;

  // LCL.Year USR = SUBSTRING(LCL.*System timestamp,CON.1,CON.4)
  LCL.Year_USR = SUBSTRING(LCL.*System_timestamp:1:4);

  // LCL.Month USR = SUBSTRING(LCL.*System timestamp,CON.6,CON.2)
  LCL.Month_USR = SUBSTRING(LCL.*System_timestamp:6:2);

  // LCL.Day USR = SUBSTRING(LCL.*System timestamp,CON.9,CON.2)
  LCL.Day_USR = SUBSTRING(LCL.*System_timestamp:9:2);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Year USR,LCL.Month USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Year_USR + LCL.Month_USR (*ZERO);

  // LCL.Date (Char-8) USR = CONCAT(LCL.Date (Char-8) USR,LCL.Day USR,CON.*ZERO)
  LCL.Date_Char_8_USR = LCL.Date_Char_8_USR + LCL.Day_USR (*ZERO);

  // LCL.DATE = CVTVAR(LCL.Date (Char-8) USR)
  LCL.DATE = CVTVAR(LCL.Date_Char_8_USR);

  EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
  PARAMETER(PAR.System_Date_USR);
  PARAMETER(LCL.DATE);
  {
   //?Execute internal function

   //?** YEAR **
   // PAR.Year Code = PAR.DATE / CON.10000 *
   PAR.Year_Code = PAR.DATE / 10000;

   // PAR.Year  NBR USR = PAR.Year Code
   PAR.Year_NBR_USR = PAR.Year_Code;

   // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
   PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

   //?** MONTH **
   // PAR.Month                 USR = PAR.DATE / CON.100 *
   PAR.Month_USR = PAR.DATE / 100;

   // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
   PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

   //?** DAY **
   // PAR.Day of Month USR = PAR.DATE
   PAR.Day_of_Month_USR = PAR.DATE;

   // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
   PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

   //?CENTURY+YEAR
   CASE;

   // IF PAR.Year Code is Twentieth Century
   IF PAR.Year_Code <= 1999;

   // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

   //?CENTURY+YEAR
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

   ENDIF;

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

   // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
   PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

   // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
   PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

  }

 }

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // PAR.PFS Process Status = CON.*ZERO
 PAR.PFS_Process_Status = *ZERO;

 // PAR.PFS Error Reason = CND.No Error
 PAR.PFS_Error_Reason = *BLANK;

 //?***** VALIDATION *****
 DO;

 // PAR.Company Number = DB1.PFS Company Number
 PAR.Company_Number = DB1.PFS_Company_Number;

 // PAR.Item Code = DB1.PFS Item Code
 PAR.Item_Code = DB1.PFS_Item_Code;

 // PAR.Warehouse Code = DB1.PFS Warehouse Code
 PAR.Warehouse_Code = DB1.PFS_From_Warehouse_Code;

 EXECUTE FUNCTION(Val Warehouse PFS     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1735131;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Lot_Tracking_Flag);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 //?Warehouse Not Found
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Warehouse Code
 PAR.PFS_Error_Reason = 'WHSCDE';

 ENDIF;

 //?Lot Tracking is Yes: Location Code & Receive/Located Date
 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 //?12/16/08 PKD A decision was made to use Production Date instead
 //?             of Receive/Locate Date.  This Date is not valid in
 //?             Carlisle sometimes.
 ENDIF;

 //?12/05/08 PKD Don't worry about inactive items.
 EXECUTE FUNCTION(Val Itm/Whs,FG/WP PFS2RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1916618;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Production_Date_Control);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Item Code Not Found
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // OR PAR.Primal Group Code is Scale Check
 OR PAR.Primal_Group_Code = 'SCALE';

 // OR PAR.Item Type Code is Not FG/WP
 OR PAR.Item_Type_Code = *BLANK/'PS'/'RM'/'EX';

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Item Code
 PAR.PFS_Error_Reason = 'ITMCDE';

 //?Item Code Not Found
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 EXECUTE FUNCTION(RTV Unit Cost Active   RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1413977;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(DB1.PFS_From_Warehouse_Code);
 PARAMETER(PAR.Unit_Cost_Per_Pound);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 //?Label Date Not Entered
 CASE;

 // IF PAR.Production Date Control is yes
 IF PAR.Production_Date_Control = 'Y';

 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.PFS Label Date is Not Entered
 IF DB1.PFS_Label_Date = *ZERO;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Label Date
 PAR.PFS_Error_Reason = 'LBLDTE';

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv Live w/CT PFS Int RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1797641;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(LCL.WHS_PFS_Interface);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?VAL:  ACTIVE WAREHOUSE
 CASE;

 // IF LCL.WHS Live w/Carlisle is Yes
 IF LCL.WHS_Live_with_Carlisle = 'Y';

 CASE;

 // IF LCL.WHS PFS Interface is Upload/Both
 IF LCL.WHS_PFS_Interface = 'U'/'B';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 //?VAL:  ACTIVE WAREHOUSE
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Process Status = CND.Error
 PAR.PFS_Process_Status = 2;

 // PAR.PFS Error Reason = CND.Inactive Transaction
 PAR.PFS_Error_Reason = 'INACTV';

 ENDIF;

 //?ERROR:  DO NOT SELECT RECORD
 CASE;

 // IF PAR.PFS Process Status is Error
 IF PAR.PFS_Process_Status = 2;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?ERROR:  DO NOT SELECT RECORD
 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 //?Warehouse Not Matching Par              9.20.05
 CASE;

 // IF DB1.PFS Warehouse Code NE PAR.PFS Warehouse Code
 IF DB1.PFS_From_Warehouse_Code <> PAR.PFS_From_Warehouse_Code;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDDO;

 //?***** PROCESS RECORD *****
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?Initialize
 DO;

 //?--- Transaction Date ---
 // PAR.Transaction Date Code = LCL.System Date USR
 PAR.Transaction_Date_Code = LCL.System_Date_USR;

 //?------------------------
 //?Production & Label Date
 CASE;

 // IF PAR.Production Date Control is yes
 IF PAR.Production_Date_Control = 'Y';

 //?03/12/09 PKD Carlisle is sending the Label Date in the Production
 //?             Date field instead of the Label Date field for the
 //?             Freezer Restoration.
 //?Lot Tracking = Y or N
 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 //?LCL.PFS Production Date
 CASE;

 // IF DB1.PFS Production Date is Not Entered
 IF DB1.PFS_Production_Date = *ZERO;

 CASE;

 // IF DB1.PFS Label Date is Entered
 IF DB1.PFS_Label_Date <> *ZERO;

 // LCL.PFS Production Date = DB1.PFS Label Date
 LCL.PFS_Production_Date = DB1.PFS_Label_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PFS Production Date = DB1.PFS Receive/Located Date
 LCL.PFS_Production_Date = DB1.PFS_Receive_Located_Date;

 ENDIF;

 //?LCL.PFS Production Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PFS Production Date = DB1.PFS Production Date
 LCL.PFS_Production_Date = DB1.PFS_Production_Date;

 ENDIF;

 // PAR.Production Date = CON.*ZERO
 PAR.Production_Date = *ZERO;

 // PAR.Label Date = CON.*ZERO
 PAR.Label_Date = *ZERO;

 //?--- Receive date = Lot Loc Production Date ---
 //?12/16/08 PKD A decision was made to use Production Date instead
 //?             of Receive/Locate Date.  This Date is not valid in
 //?             Carlisle sometimes.
 //?04/02/09 PKD Use IF instead of CL to convert date.
 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.Production_Date);
 PARAMETER(LCL.PFS_Production_Date);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

 // PAR.Label Date = PAR.Production Date
 PAR.Label_Date = PAR.Production_Date;

 //?Lot Tracking = Y or N
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?--- Production Date ---
 //?04/02/09 PKD Use IF instead of CL to convert date.
 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.Production_Date);
 PARAMETER(DB1.PFS_Production_Date);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

 //?--- Label Date ---
 //?04/02/09 PKD Use IF instead of CL to convert date.
 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(PAR.Label_Date);
 PARAMETER(DB1.PFS_Label_Date);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

 CASE;

 // IF PAR.Production Date is not entered
 IF PAR.Production_Date = *ZERO;

 // AND PAR.Production Date Control is yes
 AND PAR.Production_Date_Control = 'Y';

 // PAR.Production Date = PAR.Label Date
 PAR.Production_Date = PAR.Label_Date;

 ENDIF;

 //?Rtv Prod date with label date. carlisle is not to be trusted.
 ENDIF;

 //?Production & Label Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Production Date = CON.*ZERO
 PAR.Production_Date = *ZERO;

 // PAR.Label Date = CON.*ZERO
 PAR.Label_Date = *ZERO;

 ENDIF;

 // PAR.Transaction Quantity = DB1.PFS On Hand Quantity
 PAR.Transaction_Quantity = DB1.PFS_On_Hand_Quantity;

 // PAR.Transaction Weight = DB1.PFS On Hand Weight
 PAR.Transaction_Weight = DB1.PFS_On_Hand_Weight;

 //?LOT TRACKING WAREHOUSE
 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 //?12/16/08 PKD A decision was made to use Production Date instead
 //?             of Receive/Locate Date.  This Date is not valid in
 //?             Carlisle sometimes.
 //?----- Receive/Located Date -----
 //?----- Location Code -----
 //?01/09/09 PKD Default to location 7777
 // PAR.Location Code = CON.7777
 PAR.Location_Code = 7777;

 //?----- Location Level -----
 // PAR.Location Level = CVTVAR(DB1.PFS Inv Hold Reason Code)
 PAR.Location_Level = CVTVAR(DB1.PFS_Inv_Hold_Reason_Code);

 // PAR.Inv Hold Reason Code = CON.*BLANK
 PAR.Inv_Hold_Reason_Code = *BLANK;

 // PAR.ILL Status = CND.Available
 PAR.ILL_Status = 'A';

 EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(PAR.Location_Code);
 PARAMETER(LCL.ILL_Avail_Ship_Date);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.WLT_Type_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
  PARAMETER(PAR.WLT_Type_Code);
  PARAMETER(PAR.WLT_Type_Chill_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
  PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
  1111111 'NONE' 'N' 1);

 }

 //?ILL Status
 CASE;

 // IF LCL.ILL Avail Ship Date GT LCL.System Date USR
 IF LCL.ILL_Avail_Ship_Date > LCL.System_Date_USR;

 // OR PAR.Location Level is Entered
 OR ( PAR.Location_Level <> *ZERO;

 // AND PAR.Location Level is NE 60
 AND PAR.Location_Level <> 60 );

 // PAR.ILL Status = CND.Hold
 PAR.ILL_Status = 'H';

 ENDIF;

 //?Hold Reason
 CASE;

 // IF LCL.ILL Avail Ship Date GT LCL.System Date USR
 IF LCL.ILL_Avail_Ship_Date > LCL.System_Date_USR;

 // PAR.Inv Hold Reason Code = CND.QA Hold (Chill-time)
 PAR.Inv_Hold_Reason_Code = 'Q1';

 //?Hold Reason
 // IF DB1.PFS Inv Hold Reason Code is Q2 QA HOLD (Aged-Frozen)
 IF DB1.PFS_Inv_Hold_Reason_Code = '7';

 // PAR.Inv Hold Reason Code = CND.QA Hold (Aged-frozen)
 PAR.Inv_Hold_Reason_Code = 'Q2';

 //?Hold Reason
 // IF DB1.PFS Inv Hold Reason Code is Q3 QA HOLD
 IF DB1.PFS_Inv_Hold_Reason_Code = '8';

 // PAR.Inv Hold Reason Code = CND.QA Hold
 PAR.Inv_Hold_Reason_Code = 'Q3';

 //?Hold Reason
 // IF DB1.PFS Inv Hold Reason Code is S1 Shipping Hold (WIP)
 IF DB1.PFS_Inv_Hold_Reason_Code = '3';

 // PAR.Inv Hold Reason Code = CND.Shipping Hold (WIP)
 PAR.Inv_Hold_Reason_Code = 'S1';

 //?Hold Reason
 // IF DB1.PFS Inv Hold Reason Code is S2 Shipping Hold (920i)
 IF DB1.PFS_Inv_Hold_Reason_Code = '4';

 // PAR.Inv Hold Reason Code = CND.Shipping Hold (920i)
 PAR.Inv_Hold_Reason_Code = 'S2';

 //?Hold Reason
 // IF DB1.PFS Inv Hold Reason Code is S3 Shipping Hold
 IF DB1.PFS_Inv_Hold_Reason_Code = '5';

 // PAR.Inv Hold Reason Code = CND.Shipping Hold
 PAR.Inv_Hold_Reason_Code = 'S3';

 ENDIF;

 //?LOT TRACKING WAREHOUSE
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Location Code = CVTVAR(CON.*BLANK)
 PAR.Location_Code = CVTVAR(*BLANK);

 // PAR.Location Level = CON.*ZERO
 PAR.Location_Level = *ZERO;

 ENDIF;

 ENDDO;

 //?***** FREEZER RESTORATION     *****
 CASE;

 // IF PAR.Lot Tracking Flag is yes
 IF PAR.Lot_Tracking_Flag = 'Y';

 EXECUTE FUNCTION(Upd Loc On hand PFS   RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1748592;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Location_Code);
 PARAMETER(PAR.Location_Level);
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.ILL_Status);
 PARAMETER(PAR.Inv_Hold_Reason_Code);
 PARAMETER(PAR.Transaction_Date_Code);
 {
  //?USER: Processing if Data record not found

  //?Create Trans records with the difference   & Lot loc
  // WRK.LLT Trans Qty = PAR.ILL Item Qty On-Hand
  WRK.LLT_Transaction_Qty = PAR.ILL_Item_Qty_On_Hand;

  // WRK.LLT Trans Wgt = PAR.ILl Item Wgt On-Hand
  WRK.LLT_Transaction_Wgt = PAR.ILL_Item_Wgt_On_Hand;

  EXECUTE FUNCTION(PFS Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1735168;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('AP');
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.LLT_Transaction_Qty);
  PARAMETER(WRK.LLT_Transaction_Wgt);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  //?Update on hand qty and weight
  CASE;

  // IF PAR.ILL Item Qty On-Hand is NE Zero
  IF PAR.ILL_Item_Qty_On_Hand <> *ZERO;

  // WRK.ILL Unit Weight = PAR.ILl Item Wgt On-Hand / PAR.ILL Item Qty On-Hand *Rounded
  WRK.ILL_Unit_Weight = PAR.ILL_Item_Wgt_On_Hand / PAR.ILL_Item_Qty_On_Hand 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.ILL Unit Weight = CON.*ZERO
  WRK.ILL_Unit_Weight = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Location_Code);
  PARAMETER(WRK.ILL_Avail_Ship_Date);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.WLT_Type_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
   PARAMETER(PAR.WLT_Type_Code);
   PARAMETER(PAR.WLT_Type_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
   PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
   1111111 'NONE' 'N' 1);

  }

  EXECUTE FUNCTION(Crt Item Loc          CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1505603;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(WRK.ILL_Unit_Weight);
  PARAMETER(*ZERO);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.ILL_Avail_Ship_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(PAR.ILL_Status);
  PARAMETER(WRK.ILL_Unused_Sts_1);
  PARAMETER(WRK.ILL_Unused_Sts_2);
  PARAMETER(WRK.ILL_Unused_Sts_3);
  PARAMETER(PAR.Inv_Hold_Reason_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  //?Create Trans records with the difference
  // WRK.LLT Trans Qty = PAR.ILL Item Qty On-Hand - DB1.ILL Item Qty On-Hand
  WRK.LLT_Transaction_Qty = PAR.ILL_Item_Qty_On_Hand - DB1.ILL_Item_Qty_On_Hand;

  // WRK.LLT Trans Wgt = PAR.ILl Item Wgt On-Hand - DB1.ILl Item Wgt On-Hand
  WRK.LLT_Transaction_Wgt = PAR.ILL_Item_Wgt_On_Hand - DB1.ILL_Item_Wgt_On_Hand;

  EXECUTE FUNCTION(PFS Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1735168;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('AP');
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(WRK.LLT_Transaction_Qty);
  PARAMETER(WRK.LLT_Transaction_Wgt);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  //?Update on hand qty and weight
  CASE;

  // IF PAR.ILL Item Qty On-Hand is NE Zero
  IF PAR.ILL_Item_Qty_On_Hand <> *ZERO;

  // WRK.ILL Unit Weight = PAR.ILl Item Wgt On-Hand / PAR.ILL Item Qty On-Hand *Rounded
  WRK.ILL_Unit_Weight = PAR.ILL_Item_Wgt_On_Hand / PAR.ILL_Item_Qty_On_Hand 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.ILL Unit Weight = CON.*ZERO
  WRK.ILL_Unit_Weight = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Location_Code);
  PARAMETER(WRK.ILL_Avail_Ship_Date);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.WLT_Type_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
   PARAMETER(PAR.WLT_Type_Code);
   PARAMETER(PAR.WLT_Type_Chill_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
   PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
   1111111 'NONE' 'N' 1);

  }

  EXECUTE FUNCTION(Chg Loc On hand PFS   CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC1748600;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Lot_Number);
  PARAMETER(DB1.Location_Code);
  PARAMETER(DB1.Location_Level);
  PARAMETER(PAR.ILL_Item_Qty_On_Hand);
  PARAMETER(WRK.ILL_Unit_Weight);
  PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
  PARAMETER(WRK.ILL_Avail_Ship_Date);
  PARAMETER(PAR.ILL_Status);
  PARAMETER(PAR.Inv_Hold_Reason_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 //?***** FRESH RESTORATION     *****
 CASE;

 // IF PAR.Lot Tracking Flag is Not Yes
 IF PAR.Lot_Tracking_Flag = *BLANK/'N';

 // Call program Prc Create Dtl Receipt XF.
 CALL PROGRAM(Prc Create Dtl Receipt XF) ('CAALXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER('A');
 PARAMETER('AP');
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(PAR.Production_Date);
 PARAMETER('Post Physical');
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(*BLANK);
 PARAMETER('1');
 PARAMETER(PAR.Label_Date);

 ENDIF;

 // PAR.PFS Process Status = CON.1
 PAR.PFS_Process_Status = 1;

 ENDIF;

 CASE;

 // IF PAR.PFS Error Reason is Inactive Transaction
 IF PAR.PFS_Error_Reason = 'INACTV';

 // PAR.PFS Process Status = CND.Processed
 PAR.PFS_Process_Status = 1;

 ENDIF;

 EXECUTE FUNCTION(Chg PrcSts/ErrRsn     CH) TYPE(CHGOBJ) FILE(PPB0CPP)           AC1748581;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Transaction_Date);
 PARAMETER(DB1.PFS_Transaction_Time);
 PARAMETER(DB1.PFS_Transaction_Seq);
 PARAMETER(DB1.PFS_Inv_Hold_Reason_Code);
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(DB1.PFS_From_Warehouse_Code);
 PARAMETER(DB1.PFS_Location_Code);
 PARAMETER(DB1.PFS_Production_Date);
 PARAMETER(DB1.PFS_Label_Date);
 PARAMETER(DB1.PFS_Receive_Located_Date);
 PARAMETER(DB1.PFS_On_Hand_Quantity);
 PARAMETER(DB1.PFS_On_Hand_Weight);
 PARAMETER(DB1.PFS_Record_Status);
 PARAMETER(PAR.PFS_Process_Status);
 PARAMETER(PAR.PFS_Error_Reason);
 PARAMETER(DB1.PFS_Create_Date);
 PARAMETER(DB1.PFS_Create_Time);
 PARAMETER(DB1.PFS_Change_Date);
 PARAMETER(DB1.PFS_Change_Time);
}


//?E3191 JJH 08/07/14 Do not send email if Automated Inv Restoration
CASE;

// IF PAR.Program name USR is WW PFS Restoration    DF
IF PAR.Program_name_USR = 'PPT1DFR';

// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(PAR.PFS_Company_Number);
PARAMETER('INVRST');
PARAMETER(LCL.Email_Address);

CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

//?E3191 JJH 08/06/14 Chg msg to indicate this is Carlisle Upload
// LCL.Text USR 43 = CONCAT(CON.Carlisle Upload,CON.Completed for:,CON.1)
LCL.Text_USR_43 = 'Carlisle Upload' + 'Completed for:' (1);

// LCL.Office Message USR = CONCAT(LCL.Text USR 43,PAR.PFS Warehouse Code,CON.1)
LCL.Office_Message_USR = LCL.Text_USR_43 + PAR.PFS_From_Warehouse_Code (1);

// Execute command - 'ESNDMAIL'
EXECUTE COMMAND(USR4703);
PARAMETER(LCL.Email_Address);
PARAMETER(LCL.Office_Message_USR);

ENDIF;

ENDIF;

ENDIF;

