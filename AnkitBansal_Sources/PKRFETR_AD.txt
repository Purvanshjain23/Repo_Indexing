// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKRFETR
// ?Date: 14.08.2025 Time: 02:50:16
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?SDN440 rmc 2/9/22 get m3 live for split routine
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?length from 5 to 7.
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// WRK.Net Amount           USR = CON.*ZERO
WRK.Net_Amount_USR = *ZERO;

//?USER: Load existing header

// Call program Dsp Vndr Addr formttd UP.
CALL PROGRAM(Dsp Vndr Addr formttd UP) ('VENDRETF');
PARAMETER(WRK.Vendor_Return_Code_Usr);
PARAMETER(CTL.VCH_AP_Address_Number);
PARAMETER(CTL.Vendor_Address_1_USR);
PARAMETER(CTL.Vendor_Address_2_USR);
PARAMETER(CTL.Vendor_Address_3_USR);
PARAMETER(CTL.Vendor_Address_4_USR);
PARAMETER(CTL.Vendor_Address_5_USR);
PARAMETER(CTL.Vendor_Country_Code_USR);

CASE;

// IF WRK.Vendor Return Code Usr is Vendor Error
IF WRK.Vendor_Return_Code_Usr = 'ERR';

// CTL.Vendor Address 1      USR = CON.NOT FOUND
CTL.Vendor_Address_1_USR = 'NOT FOUND';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

// CTL.Net Amount           USR = WRK.Net Amount           USR
CTL.Net_Amount_USR = WRK.Net_Amount_USR;

//?USER: Validate header non-key fields

//?Change check type to Manual if data is entered.
CASE;

// IF CTL.CKH Manual Check Number is Entered
IF CTL.VCH_Manual_Check_Number > *ZERO;

// OR CTL.CKH Manual Check Date is Entered
OR CTL.VCH_Manual_Check_Date > *ZERO;

// OR CTL.Net Amount           USR is Entered
OR CTL.Net_Amount_USR > *ZERO;

CASE;

// IF CTL.VCH Less Split Amount is Entered
IF CTL.VCH_Less_Split_Amount > *ZERO;

//?Manual check not allowed for producer with standard splits.
// Send error message - 'Manual check not allowed for producer with standard splits.'
ERROR(PRK0509);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.CKH Manual Check Number is Not Entered
IF CTL.VCH_Manual_Check_Number = *ZERO;

// OR CTL.CKH Manual Check Date is Not Entered
OR CTL.VCH_Manual_Check_Date = *ZERO;

// OR CTL.Net Amount           USR is Not Entered
OR CTL.Net_Amount_USR = *ZERO;

// Send error message - 'Must enter the Manual Check #, Check Date, AND Amount.'
ERROR(PRK0396);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.VCH Check Type = CND.Manual Check
CTL.VCH_Check_Type = 'M';

// WRK.Net Amount           USR = CTL.Net Amount           USR
WRK.Net_Amount_USR = CTL.Net_Amount_USR;

ENDIF;

ENDIF;

//?Change check type to Manual if data is entered.
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.VCH Check Type = CND.Regular Check
CTL.VCH_Check_Type = 'R';

// WRK.Net Amount           USR = CON.*ZERO
WRK.Net_Amount_USR = *ZERO;

ENDIF;

//?USER: Validate subfile record fields

//?F15=Dsp Prdcr STD Split
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Dsp Prdcr Split       DF.
CALL PROGRAM(Dsp Prdcr Split       DF) ('PKRHDFR');
PARAMETER(CTL.PD_Producer_Code);

// PGM.*Continue transaction = CND.*NO
PGM.*Continue_transaction = 'N';

QUIT;

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Ded/Add/Split Amt     DRV) TYPE(DRVFLD)                        AB1145404;
PARAMETER(RCD.Ded_Add_Split_Amt_DRV);
PARAMETER(RCD.VCD_Deduction_Amt);
PARAMETER(RCD.VCD_Less_Split_Amount);
{
 //?Calculate derived field

 // PAR.Ded/Add/Split Amt     DRV = PAR.VCD Deduction Amt - PAR.VCD Less Split Amoun
 PAR.Ded_Add_Split_Amt_DRV = PAR.VCD_Deduction_Amt - PAR.VCD_Less_Split_Amount;

}


//?USER: Change header DBF record

EXECUTE FUNCTION(Chg Voucher Header    CH) TYPE(CHGOBJ) FILE(PKBKCPP)           AB1102569;
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER(CTL.VCH_Header_Number);
PARAMETER(CTL.VCH_AP_Address_Number);
PARAMETER(CTL.VCH_AP_Voucher_Number);
PARAMETER(CTL.VCH_Payee_Type);
PARAMETER(CTL.VCH_Manual_Check_Number);
PARAMETER(CTL.VCH_Manual_Check_Date);
PARAMETER(CTL.VCH_Base_Mkt_Price_Amt);
PARAMETER(CTL.VCH_Sort_Disc_Amt);
PARAMETER(CTL.VCH_Yield_Gain_Loss_Amt);
PARAMETER(CTL.VCH_Base_Carcass_Value);
PARAMETER(CTL.VCH_LN_Add_on_Deduct_Amt);
PARAMETER(CTL.VCH_Gross_Amt);
PARAMETER(CTL.VCH_Deduction_Amt);
PARAMETER(CTL.VCH_Less_Split_Amount);
PARAMETER(CTL.VCH_Net_Amt);
PARAMETER(CTL.VCH_Split);
PARAMETER(CTL.VCH_Split_Check_Sts);
PARAMETER(CTL.VCH_Process_Status);
PARAMETER(CTL.VCH_G_L_Date);
PARAMETER(CTL.VCH_Check_Type);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.TRK_Trucker_Code);
PARAMETER(CTL.VR_Reason_Code);
PARAMETER(CTL.RS_User_Changed);
PARAMETER(CTL.RS_Date_Changed);
PARAMETER(CTL.RS_Time_Changed);
PARAMETER(CTL.RS_Record_Status);
PARAMETER(CTL.RS_Job);
PARAMETER(CTL.RS_Program);
PARAMETER(CTL.RS_User_Added);
PARAMETER(CTL.RS_Date_Added);
PARAMETER(CTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Change detail DBF record

EXECUTE FUNCTION(Chg Voucher Detail    CH) TYPE(CHGOBJ) FILE(PKBLCPP)           AB1102232;
PARAMETER(RCD.VCH_Company_number);
PARAMETER(RCD.VCH_Batch_Number);
PARAMETER(RCD.VCH_Header_Number);
PARAMETER(RCD.VCD_Line);
PARAMETER(RCD.VCD_Base_Mkt_Price_Amt);
PARAMETER(RCD.VCD_Sort_Disc_Amt);
PARAMETER(RCD.VCD_Yield_Gain_Loss);
PARAMETER(RCD.VCD_Base_Carcass_Value);
PARAMETER(RCD.VCD_LN_Add_on_Deduct_Amt);
PARAMETER(RCD.VCD_Gross_Amt);
PARAMETER(RCD.VCD_Deduction_Amt);
PARAMETER(RCD.VCD_Less_Split_Amount);
PARAMETER(RCD.VCD_Net_Amt);
PARAMETER(RCD.VCD_Split_Percent);
PARAMETER(RCD.VCD_Payment_Type);
PARAMETER(RCD.VCD_Hog_Class_Type);
PARAMETER(RCD.VCD_BO_Type);
PARAMETER(RCD.VCD_Source_Contract_Type);
PARAMETER(RCD.VCD_Source_Code);
PARAMETER(RCD.VCD_Check_Description);
PARAMETER(RCD.VCD_Received_Head);
PARAMETER(RCD.VCD_Head_Killed);
PARAMETER(RCD.VCD_Push_Payment_Status);
PARAMETER(RCD.VCD_Repayment_Flag);
PARAMETER(RCD.VCD_Unused_Status_3);
PARAMETER(RCD.VCD_Unused_Status_4);
PARAMETER(RCD.VCD_Unused_Head_1);
PARAMETER(RCD.VCD_UnUsed_Head_2);
PARAMETER(RCD.VCD_UnUsed_Head_3);
PARAMETER(RCD.MGL_Supplier_Invoice_Nbr);
PARAMETER(RCD.MGL_Voucher_Number);
PARAMETER(RCD.MGL_Invoice_Batch_Number);
PARAMETER(RCD.MGL_Process_to_ERP_Date);
PARAMETER(RCD.MGL_Process_to_ERP_Time);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Process command keys

//?F14=Request check to JDE A/P system
CASE;

// IF CTL.*CMD key is Request check
IF CTL.*CMD_key = '14';

//?If manual check & the manual chk amt n= calc Vch_Net_Amt, set sts
CASE;

// IF CTL.VCH Check Type is Manual Check
IF CTL.VCH_Check_Type = 'M';

// AND CTL.Net Amount           USR NE CTL.VCH Net Amt
AND CTL.Net_Amount_USR <> CTL.VCH_Net_Amt;

// WRK.Manual Check Diff  USR = CND.Yes
WRK.Manual_Check_Diff_USR = 'Y';

// WRK.Manual Chk Adj Diff   USR = CTL.Net Amount           USR - CTL.VCH Net Amt
WRK.Manual_Chk_Adj_Diff_USR = CTL.Net_Amount_USR - CTL.VCH_Net_Amt;

//?If manual check & the manual chk amt n= calc Vch_Net_Amt, set sts
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Manual Check Diff  USR = CND.No
WRK.Manual_Check_Diff_USR = 'N';

ENDIF;

//?Update process code and  Create split producer vouchers
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.VCH_Company_number);
PARAMETER('M3LIVE');
PARAMETER(LCL.Live_with_M3_USR);

EXECUTE FUNCTION(Rtv/Chg PrcCd,CrtSplt RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1144594;
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER(CTL.VCH_Header_Number);
PARAMETER(CTL.Net_Amount_USR);
PARAMETER('C');
PARAMETER(WRK.Manual_Chk_Adj_Diff_USR);
PARAMETER(LCL.Live_with_M3_USR);
{
 //?USER: Process Data record

 //?Recalc Net and Deduction amts if a Manual Check was written for a diff amt
 CASE;

 // IF PAR.Manual Chk Adj Diff   USR is Not Zero
 IF PAR.Manual_Chk_Adj_Diff_USR <> *ZERO;

 // WRK.VCH Deduction Amt = DB1.VCH Deduction Amt + PAR.Manual Chk Adj Diff   USR
 WRK.VCH_Deduction_Amt = DB1.VCH_Deduction_Amt + PAR.Manual_Chk_Adj_Diff_USR;

 // WRK.VCH Net Amt = PAR.VCH Net Amt
 WRK.VCH_Net_Amt = PAR.VCH_Net_Amt;

 //?Recalc Net and Deduction amts if a Manual Check was written for a diff amt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.VCH Deduction Amt = DB1.VCH Deduction Amt
 WRK.VCH_Deduction_Amt = DB1.VCH_Deduction_Amt;

 // WRK.VCH Net Amt = DB1.VCH Net Amt
 WRK.VCH_Net_Amt = DB1.VCH_Net_Amt;

 ENDIF;

 EXECUTE FUNCTION(Chg Voucher Header    CH) TYPE(CHGOBJ) FILE(PKBKCPP)           AB1102569;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
 PARAMETER(DB1.VCH_AP_Address_Number);
 PARAMETER(DB1.VCH_AP_Voucher_Number);
 PARAMETER(DB1.VCH_Payee_Type);
 PARAMETER(DB1.VCH_Manual_Check_Number);
 PARAMETER(DB1.VCH_Manual_Check_Date);
 PARAMETER(DB1.VCH_Base_Mkt_Price_Amt);
 PARAMETER(DB1.VCH_Sort_Disc_Amt);
 PARAMETER(DB1.VCH_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.VCH_Base_Carcass_Value);
 PARAMETER(DB1.VCH_LN_Add_on_Deduct_Amt);
 PARAMETER(DB1.VCH_Gross_Amt);
 PARAMETER(WRK.VCH_Deduction_Amt);
 PARAMETER(DB1.VCH_Less_Split_Amount);
 PARAMETER(WRK.VCH_Net_Amt);
 PARAMETER(DB1.VCH_Split);
 PARAMETER(DB1.VCH_Split_Check_Sts);
 PARAMETER(PAR.VCH_Process_Status);
 PARAMETER(DB1.VCH_G_L_Date);
 PARAMETER(DB1.VCH_Check_Type);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.TRK_Trucker_Code);
 PARAMETER(DB1.VR_Reason_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?Create Split Voucher Hdr/Dtl if Split Producer
 CASE;

 // IF DB1.VCH Less Split Amount is Not equal to Zero
 IF DB1.VCH_Less_Split_Amount <> *ZERO;

 EXECUTE FUNCTION(Rtv/Crt Prdcr Vch Splt RT) TYPE(RTVOBJ) FILE(PKBFREP)          AB1144632;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
 PARAMETER(DB1.VCH_AP_Address_Number);
 PARAMETER(DB1.VCH_AP_Voucher_Number);
 PARAMETER(DB1.VCH_Payee_Type);
 PARAMETER(DB1.VCH_Manual_Check_Number);
 PARAMETER(DB1.VCH_Manual_Check_Date);
 PARAMETER(DB1.VCH_Base_Mkt_Price_Amt);
 PARAMETER(DB1.VCH_Sort_Disc_Amt);
 PARAMETER(DB1.VCH_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.VCH_Base_Carcass_Value);
 PARAMETER(DB1.VCH_LN_Add_on_Deduct_Amt);
 PARAMETER(DB1.VCH_Gross_Amt);
 PARAMETER(DB1.VCH_Deduction_Amt);
 PARAMETER(DB1.VCH_Less_Split_Amount);
 PARAMETER(DB1.VCH_Net_Amt);
 PARAMETER(DB1.VCH_Split);
 PARAMETER(DB1.VCH_Split_Check_Sts);
 PARAMETER(DB1.VCH_Process_Status);
 PARAMETER(DB1.VCH_G_L_Date);
 PARAMETER(DB1.VCH_Check_Type);
 PARAMETER(DB1.TRK_Trucker_Code);
 PARAMETER(DB1.VR_Reason_Code);
 PARAMETER(PAR.Live_with_M3_USR);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Hog Voucher Split CR) TYPE(CRTOBJ) FILE(PKCACPP)           AB1107925;
  PARAMETER(PAR.VCH_Company_number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(PAR.VCH_Header_Number);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(100);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Hog Voucher Split CR) TYPE(CRTOBJ) FILE(PKCACPP)           AB1107925;
  PARAMETER(PAR.VCH_Company_number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(PAR.VCH_Header_Number);
  PARAMETER(DB1.BOS_Split_Producer_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PSS_Split_Percent);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?Create Split producer voucher header and detail rcds ...
  CASE;

  // IF DB1.BOS Split Producer Code NE PAR.PD Producer Code
  IF DB1.BOS_Split_Producer_Code <> PAR.PD_Producer_Code;

  //?  ... If not the original producer's split record
  //?Create Header record for split producer
  //?(Split amount is negative in voucher header,detail files.)
  // WRK.Net Amount           USR = PAR.VCH Net Amt - PAR.VCH Less Split Amount
  WRK.Net_Amount_USR = PAR.VCH_Net_Amt - PAR.VCH_Less_Split_Amount;

  // WRK.Percent Decimal       USR = DB1.PSS Split Percent / CON.100 *
  WRK.Percent_Decimal_USR = DB1.PSS_Split_Percent / 100;

  // WRK.VCH Net Amt = WRK.Net Amount           USR * WRK.Percent Decimal       USR *
  WRK.VCH_Net_Amt = WRK.Net_Amount_USR * WRK.Percent_Decimal_USR 'H';

  // WRK.VCH Gross Amt = WRK.VCH Net Amt
  WRK.VCH_Gross_Amt = WRK.VCH_Net_Amt;

  //?RMC SDN440 get m3 supplier too
  EXECUTE FUNCTION(Rtv PrdVendor#,Src,M3 RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1330020;
  PARAMETER(DB1.BOS_Split_Producer_Code);
  PARAMETER(WRK.VCH_AP_Address_Number);
  PARAMETER(WRK.SR_Source_Code);
  PARAMETER(WRK.M3_Supplier_ID);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(PAR.M3_Supplier_ID);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   QUIT;

  }

  //?RMC SDN440 Added 2/9/22
  CASE;

  // IF PAR.Live with M3   USR is Yes
  IF PAR.Live_with_M3_USR = 'Y';

  // WRK.Text 7 USR = SUBSTRING(WRK.M3 Supplier ID,CON.4,CON.7)
  WRK.Text_7_USR = SUBSTRING(WRK.M3_Supplier_ID:4:7);

  // WRK.VCH AP Address Number = CVTVAR(WRK.Text 7 USR)
  WRK.VCH_AP_Address_Number = CVTVAR(WRK.Text_7_USR);

  ENDIF;

  EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
  PARAMETER(WRK.SR_Source_Code);
  PARAMETER(WRK.SR_Type);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Payee type values
  CASE;

  // IF WRK.SR Type is Internal
  IF WRK.SR_Type = 'I';

  // WRK.VCH Payee Type = CND.Internal
  WRK.VCH_Payee_Type = 'I';

  //?Payee type values
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.VCH Payee Type = CND.External
  WRK.VCH_Payee_Type = 'E';

  ENDIF;

  EXECUTE FUNCTION(Rtv Nxt Vch Header#   RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1115269;
  PARAMETER(PAR.VCH_Company_number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(WRK.Header_Number_USR);
  {
   //?USER: Processing if Data record not found

   // PAR.VCH Header Number = CON.00001
   PAR.VCH_Header_Number = 00001;

   //?USER: Process Data record

   // PAR.CKH Header Number = DB1.CKH Header Number + CON.1
   PAR.VCH_Header_Number = DB1.VCH_Header_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Voucher Header    CR) TYPE(CRTOBJ) FILE(PKBKCPP)           AB1102568;
  PARAMETER(PAR.VCH_Company_number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(WRK.Header_Number_USR);
  PARAMETER(WRK.VCH_AP_Address_Number);
  PARAMETER(PAR.VCH_AP_Voucher_Number);
  PARAMETER(WRK.VCH_Payee_Type);
  PARAMETER(PAR.VCH_Manual_Check_Number);
  PARAMETER(PAR.VCH_Manual_Check_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.VCH_Gross_Amt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.VCH_Net_Amt);
  PARAMETER(*ZERO);
  PARAMETER('Y');
  PARAMETER('C');
  PARAMETER(PAR.VCH_G_L_Date);
  PARAMETER(PAR.VCH_Check_Type);
  PARAMETER(DB1.BOS_Split_Producer_Code);
  PARAMETER(PAR.TRK_Trucker_Code);
  PARAMETER(PAR.VR_Reason_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?Create Detail records for split producer
  EXECUTE FUNCTION(Rtv/Crt Vch Dtl Splt  RT) TYPE(RTVOBJ) FILE(PKBLCPP)           AB1144662;
  PARAMETER(PAR.VCH_Company_number);
  PARAMETER(PAR.VCH_Batch_Number);
  PARAMETER(PAR.VCH_Header_Number);
  PARAMETER(DB1.PSS_Split_Percent);
  PARAMETER(WRK.Header_Number_USR);
  {
   //?USER: Process Data record

   //?Add Net to Split amt to get Net amt before the split was calc'd.
   //?(Split amount is negative in the voucher detail,header files)
   // WRK.VCD Net Amt = DB1.VCD Net Amt - DB1.VCD Less Split Amount
   WRK.VCD_Net_Amt = DB1.VCD_Net_Amt - DB1.VCD_Less_Split_Amount;

   //?Calc net and gross for the splitee producer
   // WRK.Percent Decimal       USR = PAR.PSS Split Percent / CON.100 *
   WRK.Percent_Decimal_USR = PAR.PSS_Split_Percent / 100;

   // WRK.VCD Net Amt = WRK.VCD Net Amt * WRK.Percent Decimal       USR *Rounded
   WRK.VCD_Net_Amt = WRK.VCD_Net_Amt * WRK.Percent_Decimal_USR 'H';

   // WRK.VCD Gross Amt = WRK.VCD Net Amt
   WRK.VCD_Gross_Amt = WRK.VCD_Net_Amt;

   EXECUTE FUNCTION(Crt Voucher Detail    CR) TYPE(CRTOBJ) FILE(PKBLCPP)           AB1102231;
   PARAMETER(DB1.VCH_Company_number);
   PARAMETER(DB1.VCH_Batch_Number);
   PARAMETER(PAR.Header_Number_USR);
   PARAMETER(DB1.VCD_Line);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(WRK.VCD_Gross_Amt);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(WRK.VCD_Net_Amt);
   PARAMETER(*ZERO);
   PARAMETER(DB1.VCD_Payment_Type);
   PARAMETER(DB1.VCD_Hog_Class_Type);
   PARAMETER(DB1.VCD_BO_Type);
   PARAMETER(DB1.VCD_Source_Contract_Type);
   PARAMETER(DB1.VCD_Source_Code);
   PARAMETER(DB1.VCD_Check_Description);
   PARAMETER(DB1.VCD_Received_Head);
   PARAMETER(DB1.VCD_Head_Killed);
   PARAMETER(*BLANK);
   PARAMETER(DB1.VCD_Repayment_Flag);
   PARAMETER(DB1.VCD_Unused_Status_3);
   PARAMETER(DB1.VCD_Unused_Status_4);
   PARAMETER(DB1.VCD_Unused_Head_1);
   PARAMETER(DB1.VCD_UnUsed_Head_2);
   PARAMETER(DB1.VCD_UnUsed_Head_3);
   PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
   PARAMETER(DB1.MGL_Voucher_Number);
   PARAMETER(DB1.MGL_Invoice_Batch_Number);
   PARAMETER(DB1.MGL_Process_to_ERP_Date);
   PARAMETER(DB1.MGL_Process_to_ERP_Time);
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(DB1.PL_Location_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

    //?USER: Processing after Data update

    CASE;

    // IF DB1.VCD Split Percent is 100 %
    IF DB1.VCD_Split_Percent = 100;

    // Call program Crt Tattoo Action Comm XF.
    CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(DB1.TH_Kill_Date);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER('CV');
    PARAMETER(*BLANK);

    ENDIF;

   }

  }

  ENDIF;

 }

 ENDIF;

}


//?************
//?Create manual check adjstmnts. in Tattoo D/A file if there is a diff.
CASE;

// IF WRK.Manual Check Diff  USR is Yes
IF WRK.Manual_Check_Diff_USR = 'Y';

//? Accum Live wt
// WRK.Weight Tot USR = CON.*ZERO
WRK.Weight_Tot_USR = *ZERO;

EXECUTE FUNCTION(Rtv Accum TH Live Wt  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1142921;
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(WRK.Weight_Tot_USR);
{
 //?USER: Process Data record

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.TH Live Wgt
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.TH_Live_Wgt;

}


// WRK.Weight Tot USR = WRK.Weight Tot USR / CON.100 *
WRK.Weight_Tot_USR = WRK.Weight_Tot_USR / 100;

// WRK.Manual Chk Adj Total  USR = CON.*ZERO
WRK.Manual_Chk_Adj_Total_USR = *ZERO;

//?Set the +/- sign field
CASE;

// IF WRK.Manual Chk Adj Diff   USR is Greater than 0
IF WRK.Manual_Chk_Adj_Diff_USR > *ZERO;

// WRK.THD Unit Amt Sign = CND.Add
WRK.THD_Unit_Amt_Sign = '+';

//?Set the +/- sign field
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.THD Unit Amt Sign = CND.Subtract
WRK.THD_Unit_Amt_Sign = '-';

// WRK.Manual Chk Adj Diff   USR = WRK.Manual Chk Adj Diff   USR * CON.-1 *
WRK.Manual_Chk_Adj_Diff_USR = WRK.Manual_Chk_Adj_Diff_USR * -1;

ENDIF;

//?Read Voucher dtls to read TttHdr to create manual Adj Tattoo D/A
EXECUTE FUNCTION(Rtv Dtl f/Manual Chk  RT) TYPE(RTVOBJ) FILE(PKBLCPP)           AB1144888;
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER(CTL.VCH_Header_Number);
PARAMETER(WRK.Manual_Chk_Adj_Diff_USR);
PARAMETER(WRK.Weight_Tot_USR);
PARAMETER(WRK.Manual_Chk_Adj_Total_USR);
PARAMETER(WRK.THD_Unit_Amt_Sign);
{
 //?USER: Process Data record

 // WRK.Manual Chk Adj Diff 2 USR = CON.*ZERO
 WRK.Manual_Chk_Adj_Diff_2_USR = *ZERO;

 EXECUTE FUNCTION(Rtv Ttt,Crt ManualTtDA RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1144880;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(PAR.Manual_Chk_Adj_Diff_USR);
 PARAMETER(PAR.Weight_Tot_USR);
 PARAMETER(WRK.Manual_Chk_Adj_Total_USR);
 PARAMETER(PAR.THD_Unit_Amt_Sign);
 PARAMETER(WRK.Manual_Chk_Adj_Diff_2_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.TH Live Wgt EQ WRK.Zero USR
  IF DB1.TH_Live_Wgt = WRK.Zero_USR;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Live Hundred Wt       USR = DB1.TH Live Wgt / CON.100 *
  WRK.Live_Hundred_Wt_USR = DB1.TH_Live_Wgt / 100;

  // WRK.Live Hundred Wt       USR = WRK.Live Hundred Wt       USR / PAR.Weight Tot U
  WRK.Live_Hundred_Wt_USR = WRK.Live_Hundred_Wt_USR / PAR.Weight_Tot_USR;

  // PAR.Manual Chk Adj Diff 2 USR = WRK.Live Hundred Wt       USR * PAR.Manual Chk A
  PAR.Manual_Chk_Adj_Diff_2_USR = WRK.Live_Hundred_Wt_USR * PAR.Manual_Chk_Adj_Diff_USR


  // PAR.Manual Chk Adj Total  USR = PAR.Manual Chk Adj Total  USR + PAR.Manual Chk A
  PAR.Manual_Chk_Adj_Total_USR = PAR.Manual_Chk_Adj_Total_USR
  + PAR.Manual_Chk_Adj_Diff_2_USR;

  CASE;

  // IF PAR.Manual Chk Adj Diff 2 USR is Not Zero
  IF PAR.Manual_Chk_Adj_Diff_2_USR <> *ZERO;

  //?Convert a negative adj. to positive for output-the sign field has the sign
  CASE;

  // IF PAR.Manual Chk Adj Diff 2 USR is Less than 0
  IF PAR.Manual_Chk_Adj_Diff_2_USR < *ZERO;

  // WRK.Manual Chk Adj Diff 2 USR = WRK.Manual Chk Adj Diff 2 USR * CON.-1 *
  WRK.Manual_Chk_Adj_Diff_2_USR = WRK.Manual_Chk_Adj_Diff_2_USR * -1;

  ENDIF;

  EXECUTE FUNCTION(Rtv Ded GL Code       RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1145473;
  PARAMETER('MAN');
  PARAMETER(WRK.DED_Gl_Code);
  PARAMETER(WRK.DED_Contra_Gl_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER('MAN');
  PARAMETER(PAR.Manual_Chk_Adj_Diff_2_USR);
  PARAMETER(PAR.Manual_Chk_Adj_Diff_2_USR);
  PARAMETER(PAR.THD_Unit_Amt_Sign);
  PARAMETER('FL');
  PARAMETER('S');
  PARAMETER(WRK.DED_Gl_Code);
  PARAMETER(WRK.DED_Contra_Gl_Code);
  PARAMETER(WRK.Zero_USR);
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER('P');
  PARAMETER('O');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?Adjust Net & Deduction or Add amounts on Tattoo Header
  CASE;

  // IF PAR.THD Unit Amt Sign is Add
  IF PAR.THD_Unit_Amt_Sign = '+';

  // WRK.TH Additions Amt = DB1.TH Additions Amt + WRK.Manual Chk Adj Diff 2 USR
  WRK.TH_Additions_Amt = DB1.TH_Additions_Amt + WRK.Manual_Chk_Adj_Diff_2_USR;

  // WRK.Th Payment Net Amt = DB1.Th Payment Net Amt + WRK.Manual Chk Adj Diff 2 USR
  WRK.Th_Payment_Net_Amt = DB1.Th_Payment_Net_Amt + WRK.Manual_Chk_Adj_Diff_2_USR;

  // WRK.TH LIve Net Amt = DB1.TH LIve Net Amt + WRK.Manual Chk Adj Diff 2 USR
  WRK.TH_LIve_Net_Amt = DB1.TH_LIve_Net_Amt + WRK.Manual_Chk_Adj_Diff_2_USR;

  // WRK.TH Total Net WO Adds = DB1.TH Total Net WO Adds
  WRK.TH_Total_Net_WO_Adds = DB1.TH_Total_Net_WO_Adds;

  // WRK.TH Deduction Amt = DB1.TH Deduction Amt
  WRK.TH_Deduction_Amt = DB1.TH_Deduction_Amt;

  //?Adjust Net & Deduction or Add amounts on Tattoo Header
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.TH Deduction Amt = DB1.TH Deduction Amt + WRK.Manual Chk Adj Diff 2 USR
  WRK.TH_Deduction_Amt = DB1.TH_Deduction_Amt + WRK.Manual_Chk_Adj_Diff_2_USR;

  // WRK.TH Total Net WO Adds = DB1.TH Total Net WO Adds - WRK.Manual Chk Adj Diff 2
  WRK.TH_Total_Net_WO_Adds = DB1.TH_Total_Net_WO_Adds - WRK.Manual_Chk_Adj_Diff_2_USR;

  // WRK.Th Payment Net Amt = DB1.Th Payment Net Amt - WRK.Manual Chk Adj Diff 2 USR
  WRK.Th_Payment_Net_Amt = DB1.Th_Payment_Net_Amt - WRK.Manual_Chk_Adj_Diff_2_USR;

  // WRK.TH LIve Net Amt = DB1.TH LIve Net Amt - WRK.Manual Chk Adj Diff 2 USR
  WRK.TH_LIve_Net_Amt = DB1.TH_LIve_Net_Amt - WRK.Manual_Chk_Adj_Diff_2_USR;

  // WRK.TH Additions Amt = DB1.TH Additions Amt
  WRK.TH_Additions_Amt = DB1.TH_Additions_Amt;

  ENDIF;

  EXECUTE FUNCTION(Chg Net,D,A Amts      CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190778;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(WRK.TH_LIve_Net_Amt);
  PARAMETER(WRK.TH_Deduction_Amt);
  PARAMETER(WRK.TH_Total_Net_WO_Adds);
  PARAMETER(WRK.TH_Additions_Amt);
  PARAMETER(WRK.Th_Payment_Net_Amt);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF WRK.Manual Chk Adj Diff 2 USR is Not Zero
 IF WRK.Manual_Chk_Adj_Diff_2_USR <> *ZERO;

 //?Set the +/- sign field
 CASE;

 // IF PAR.THD Unit Amt Sign is Add
 IF PAR.THD_Unit_Amt_Sign = '+';

 //?Set the +/- sign field
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Manual Chk Adj Diff 2 USR = WRK.Manual Chk Adj Diff 2 USR * CON.-1 *
 WRK.Manual_Chk_Adj_Diff_2_USR = WRK.Manual_Chk_Adj_Diff_2_USR * -1;

 ENDIF;

 // WRK.VCD Deduction Amt = DB1.VCD Deduction Amt + WRK.Manual Chk Adj Diff 2 USR
 WRK.VCD_Deduction_Amt = DB1.VCD_Deduction_Amt + WRK.Manual_Chk_Adj_Diff_2_USR;

 // WRK.VCD Net Amt = DB1.VCD Net Amt + WRK.Manual Chk Adj Diff 2 USR
 WRK.VCD_Net_Amt = DB1.VCD_Net_Amt + WRK.Manual_Chk_Adj_Diff_2_USR;

 EXECUTE FUNCTION(Chg Voucher Detail    CH) TYPE(CHGOBJ) FILE(PKBLCPP)           AB1102232;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
 PARAMETER(DB1.VCD_Line);
 PARAMETER(DB1.VCD_Base_Mkt_Price_Amt);
 PARAMETER(DB1.VCD_Sort_Disc_Amt);
 PARAMETER(DB1.VCD_Yield_Gain_Loss);
 PARAMETER(DB1.VCD_Base_Carcass_Value);
 PARAMETER(DB1.VCD_LN_Add_on_Deduct_Amt);
 PARAMETER(DB1.VCD_Gross_Amt);
 PARAMETER(WRK.VCD_Deduction_Amt);
 PARAMETER(DB1.VCD_Less_Split_Amount);
 PARAMETER(WRK.VCD_Net_Amt);
 PARAMETER(DB1.VCD_Split_Percent);
 PARAMETER(DB1.VCD_Payment_Type);
 PARAMETER(DB1.VCD_Hog_Class_Type);
 PARAMETER(DB1.VCD_BO_Type);
 PARAMETER(DB1.VCD_Source_Contract_Type);
 PARAMETER(DB1.VCD_Source_Code);
 PARAMETER(DB1.VCD_Check_Description);
 PARAMETER(DB1.VCD_Received_Head);
 PARAMETER(DB1.VCD_Head_Killed);
 PARAMETER(DB1.VCD_Push_Payment_Status);
 PARAMETER(DB1.VCD_Repayment_Flag);
 PARAMETER(DB1.VCD_Unused_Status_3);
 PARAMETER(DB1.VCD_Unused_Status_4);
 PARAMETER(DB1.VCD_Unused_Head_1);
 PARAMETER(DB1.VCD_UnUsed_Head_2);
 PARAMETER(DB1.VCD_UnUsed_Head_3);
 PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
 PARAMETER(DB1.MGL_Voucher_Number);
 PARAMETER(DB1.MGL_Invoice_Batch_Number);
 PARAMETER(DB1.MGL_Process_to_ERP_Date);
 PARAMETER(DB1.MGL_Process_to_ERP_Time);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


//?If calc'd manual adjusted amts don't equal the total difference...
CASE;

// IF WRK.Manual Chk Adj Diff   USR NE WRK.Manual Chk Adj Total  USR
IF WRK.Manual_Chk_Adj_Diff_USR <> WRK.Manual_Chk_Adj_Total_USR;

//?Reset the sign on the fields
CASE;

// IF WRK.THD Unit Amt Sign is Subtract
IF WRK.THD_Unit_Amt_Sign = '-';

// WRK.Manual Chk Adj Diff   USR = WRK.Manual Chk Adj Diff   USR * CON.-1 *
WRK.Manual_Chk_Adj_Diff_USR = WRK.Manual_Chk_Adj_Diff_USR * -1;

// WRK.Manual Chk Adj Total  USR = WRK.Manual Chk Adj Total  USR * CON.-1 *
WRK.Manual_Chk_Adj_Total_USR = WRK.Manual_Chk_Adj_Total_USR * -1;

ENDIF;

// WRK.Manual Chk Adj Diff   USR = WRK.Manual Chk Adj Diff   USR - WRK.Manual Chk A
WRK.Manual_Chk_Adj_Diff_USR = WRK.Manual_Chk_Adj_Diff_USR - WRK.Manual_Chk_Adj_Total_USR;

//?Set the +/- sign field
CASE;

// IF WRK.Manual Chk Adj Diff   USR is Greater than 0
IF WRK.Manual_Chk_Adj_Diff_USR > *ZERO;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.THD_Unit_Amt_Sign = '+';

//?Set the +/- sign field
// IF *OTHERWISE
IF *OTHERWISE;

// *MO.VE             1183529*Bu = ilt. in functions
WRK.THD_Unit_Amt_Sign = '-';

// WRK.Manual Chk Adj Diff   USR = WRK.Manual Chk Adj Diff   USR * CON.-1 *
WRK.Manual_Chk_Adj_Diff_USR = WRK.Manual_Chk_Adj_Diff_USR * -1;

ENDIF;

//?Read the 1st Vchr Dtl to read the 1st Ttt D/A to add in the diff
//? and adjust the tattoo header, & voucher detail
// WRK.DED D/A Code = CON.MAN
WRK.DED_D_A_Code = 'MAN';

EXECUTE FUNCTION(Rtv 1st Dtl f/ManlAdj RT) TYPE(RTVOBJ) FILE(PKBLCPP)           AB1144912;
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER(CTL.VCH_Header_Number);
PARAMETER(WRK.Manual_Chk_Adj_Diff_USR);
PARAMETER(WRK.THD_Unit_Amt_Sign);
PARAMETER(WRK.DED_D_A_Code);
{
 //?USER: Process Data record

 CASE;

 // IF PAR.THD Unit Amt Sign is Add
 IF PAR.THD_Unit_Amt_Sign = '+';

 // WRK.VCD Deduction Amt = DB1.VCD Deduction Amt + PAR.Manual Chk Adj Diff   USR
 WRK.VCD_Deduction_Amt = DB1.VCD_Deduction_Amt + PAR.Manual_Chk_Adj_Diff_USR;

 // WRK.VCD Net Amt = DB1.VCD Net Amt + PAR.Manual Chk Adj Diff   USR
 WRK.VCD_Net_Amt = DB1.VCD_Net_Amt + PAR.Manual_Chk_Adj_Diff_USR;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.VCD Deduction Amt = DB1.VCD Deduction Amt - PAR.Manual Chk Adj Diff   USR
 WRK.VCD_Deduction_Amt = DB1.VCD_Deduction_Amt - PAR.Manual_Chk_Adj_Diff_USR;

 // WRK.VCD Net Amt = DB1.VCD Net Amt - PAR.Manual Chk Adj Diff   USR
 WRK.VCD_Net_Amt = DB1.VCD_Net_Amt - PAR.Manual_Chk_Adj_Diff_USR;

 ENDIF;

 EXECUTE FUNCTION(Chg Voucher Detail    CH) TYPE(CHGOBJ) FILE(PKBLCPP)           AB1102232;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
 PARAMETER(DB1.VCD_Line);
 PARAMETER(DB1.VCD_Base_Mkt_Price_Amt);
 PARAMETER(DB1.VCD_Sort_Disc_Amt);
 PARAMETER(DB1.VCD_Yield_Gain_Loss);
 PARAMETER(DB1.VCD_Base_Carcass_Value);
 PARAMETER(DB1.VCD_LN_Add_on_Deduct_Amt);
 PARAMETER(DB1.VCD_Gross_Amt);
 PARAMETER(WRK.VCD_Deduction_Amt);
 PARAMETER(DB1.VCD_Less_Split_Amount);
 PARAMETER(WRK.VCD_Net_Amt);
 PARAMETER(DB1.VCD_Split_Percent);
 PARAMETER(DB1.VCD_Payment_Type);
 PARAMETER(DB1.VCD_Hog_Class_Type);
 PARAMETER(DB1.VCD_BO_Type);
 PARAMETER(DB1.VCD_Source_Contract_Type);
 PARAMETER(DB1.VCD_Source_Code);
 PARAMETER(DB1.VCD_Check_Description);
 PARAMETER(DB1.VCD_Received_Head);
 PARAMETER(DB1.VCD_Head_Killed);
 PARAMETER(DB1.VCD_Push_Payment_Status);
 PARAMETER(DB1.VCD_Repayment_Flag);
 PARAMETER(DB1.VCD_Unused_Status_3);
 PARAMETER(DB1.VCD_Unused_Status_4);
 PARAMETER(DB1.VCD_Unused_Head_1);
 PARAMETER(DB1.VCD_UnUsed_Head_2);
 PARAMETER(DB1.VCD_UnUsed_Head_3);
 PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
 PARAMETER(DB1.MGL_Voucher_Number);
 PARAMETER(DB1.MGL_Invoice_Batch_Number);
 PARAMETER(DB1.MGL_Process_to_ERP_Date);
 PARAMETER(DB1.MGL_Process_to_ERP_Time);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 EXECUTE FUNCTION(Rtv/Chg Net,D,A Amts  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1146132;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.Manual_Chk_Adj_Diff_USR);
 PARAMETER(PAR.THD_Unit_Amt_Sign);
 {
  //?USER: Process Data record

  //?Adjust Net & Deduction or Add amounts on Tattoo Header
  CASE;

  // IF PAR.THD Unit Amt Sign is Add
  IF PAR.THD_Unit_Amt_Sign = '+';

  // WRK.TH Additions Amt = DB1.TH Additions Amt + PAR.Manual Chk Adj Diff   USR
  WRK.TH_Additions_Amt = DB1.TH_Additions_Amt + PAR.Manual_Chk_Adj_Diff_USR;

  // WRK.Th Payment Net Amt = DB1.Th Payment Net Amt + PAR.Manual Chk Adj Diff   USR
  WRK.Th_Payment_Net_Amt = DB1.Th_Payment_Net_Amt + PAR.Manual_Chk_Adj_Diff_USR;

  // WRK.TH LIve Net Amt = DB1.TH LIve Net Amt + PAR.Manual Chk Adj Diff   USR
  WRK.TH_LIve_Net_Amt = DB1.TH_LIve_Net_Amt + PAR.Manual_Chk_Adj_Diff_USR;

  // WRK.TH Total Net WO Adds = DB1.TH Total Net WO Adds
  WRK.TH_Total_Net_WO_Adds = DB1.TH_Total_Net_WO_Adds;

  // WRK.TH Deduction Amt = DB1.TH Deduction Amt
  WRK.TH_Deduction_Amt = DB1.TH_Deduction_Amt;

  //?Adjust Net & Deduction or Add amounts on Tattoo Header
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.TH Deduction Amt = DB1.TH Deduction Amt + PAR.Manual Chk Adj Diff   USR
  WRK.TH_Deduction_Amt = DB1.TH_Deduction_Amt + PAR.Manual_Chk_Adj_Diff_USR;

  // WRK.TH Total Net WO Adds = DB1.TH Total Net WO Adds - PAR.Manual Chk Adj Diff
  WRK.TH_Total_Net_WO_Adds = DB1.TH_Total_Net_WO_Adds - PAR.Manual_Chk_Adj_Diff_USR;

  // WRK.Th Payment Net Amt = DB1.Th Payment Net Amt - PAR.Manual Chk Adj Diff   USR
  WRK.Th_Payment_Net_Amt = DB1.Th_Payment_Net_Amt - PAR.Manual_Chk_Adj_Diff_USR;

  // WRK.TH LIve Net Amt = DB1.TH LIve Net Amt - PAR.Manual Chk Adj Diff   USR
  WRK.TH_LIve_Net_Amt = DB1.TH_LIve_Net_Amt - PAR.Manual_Chk_Adj_Diff_USR;

  // WRK.TH Additions Amt = DB1.TH Additions Amt
  WRK.TH_Additions_Amt = DB1.TH_Additions_Amt;

  ENDIF;

  //?** OLD:  Chg Tattoo Header   CH * Tattoo Header  ** (PKP)
  EXECUTE FUNCTION(Chg Net,D,A Amts      CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190778;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(WRK.TH_LIve_Net_Amt);
  PARAMETER(WRK.TH_Deduction_Amt);
  PARAMETER(WRK.TH_Total_Net_WO_Adds);
  PARAMETER(WRK.TH_Additions_Amt);
  PARAMETER(WRK.Th_Payment_Net_Amt);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Rtv Ded GL Code       RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1145473;
 PARAMETER(PAR.DED_D_A_Code);
 PARAMETER(WRK.THD_GL_Code);
 PARAMETER(WRK.THD_Contra_Gl_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv/Chg Tattoo D/A    RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1144913;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.DED_D_A_Code);
 PARAMETER(WRK.THD_GL_Code);
 PARAMETER(WRK.THD_Contra_Gl_Code);
 PARAMETER(PAR.Manual_Chk_Adj_Diff_USR);
 PARAMETER(PAR.THD_Unit_Amt_Sign);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.DED_D_A_Code);
  PARAMETER(PAR.Manual_Chk_Adj_Diff_USR);
  PARAMETER(PAR.Manual_Chk_Adj_Diff_USR);
  PARAMETER(PAR.THD_Unit_Amt_Sign);
  PARAMETER('FL');
  PARAMETER('S');
  PARAMETER(PAR.THD_GL_Code);
  PARAMETER(PAR.THD_Contra_Gl_Code);
  PARAMETER(WRK.Zero_USR);
  PARAMETER(WRK.Blank_USR);
  PARAMETER('P');
  PARAMETER('O');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  // WRK.THD Ded/Add Amount = DB1.THD Ded/Add Amount + PAR.Manual Chk Adj Diff   USR
  WRK.THD_Ded_Add_Amount = DB1.THD_Ded_Add_Amount + PAR.Manual_Chk_Adj_Diff_USR;

  EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DED_D_A_Code);
  PARAMETER(WRK.THD_Ded_Add_Amount);
  PARAMETER(WRK.THD_Ded_Add_Amount);
  PARAMETER(DB1.THD_Unit_Amt_Sign);
  PARAMETER(DB1.THD_UOM);
  PARAMETER(DB1.THD_Transaction_Created);
  PARAMETER(DB1.THD_GL_Code);
  PARAMETER(DB1.THD_Contra_Gl_Code);
  PARAMETER(DB1.THD_Re_imbursement_Head);
  PARAMETER(DB1.THD_Payment_Sts);
  PARAMETER(DB1.THD_Expense_Paid_by);
  PARAMETER(DB1.THD_Expense_Type);
  PARAMETER(DB1.THD_Reserve_Account_Upd);
  PARAMETER(DB1.THD_Commission_Deduction);
  PARAMETER(DB1.THD_Deferred_Payment);
  PARAMETER(DB1.THD_Status_4);
  PARAMETER(DB1.THD_Status_5);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 QUIT;

}


ENDIF;

ENDIF;

//?************
// WRK.Status 1 = CND.Blank
WRK.Status_1 = *BLANK;

// Call program Natv Crt Vchrs Batch UP.
CALL PROGRAM(Natv Crt Vchrs Batch UP) ('HPEVCHCL');
PARAMETER(PGM.*Return_code);
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER(WRK.Status_1);

//?F14=Request check to JDE A/P system
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Continue transaction = CND.*NO
PGM.*Continue_transaction = 'N';

QUIT;

ENDIF;

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

EXECUTE FUNCTION(Rtv/Dlt Vch Hdr       RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1142820;
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER(CTL.VCH_Header_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Voucher Header    DL) TYPE(DLTOBJ) FILE(PKBKCPP)           AB1102570;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
}


//?Delete Voucher Detail and Delete Tattoo D/A records
EXECUTE FUNCTION(Rtv/Dlt Vch Detail    RT) TYPE(RTVOBJ) FILE(PKBLCPP)           AB1142821;
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER(CTL.VCH_Header_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Voucher Detail) TYPE(DLTOBJ) FILE(PKBLCPP)              AB1102233;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
 PARAMETER(DB1.VCD_Line);
 {
  //?USER: Processing after Data update

  CASE;

  // IF DB1.VCD Split Percent is 100 %
  IF DB1.VCD_Split_Percent = 100;

  // Call program Crt Tattoo Action Comm XF.
  CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('DV');
  PARAMETER(*BLANK);

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv/Dlt Tattoo D/A    RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1149138;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.THD Transaction Created is System Created
  IF DB1.THD_Transaction_Created = 'S';

  EXECUTE FUNCTION(Delete Tattoo Deduction) TYPE(DLTOBJ) FILE(PKCDCPP)            AB1107819;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.DED_D_A_Code);
  ENDIF;

 }

 EXECUTE FUNCTION(Rtv/Chg Ttt D,A,Net   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1149149;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
  {
   //?Execute internal function

   //?2/26/96  HPE063   Allow the expense for freight to be paid
   //?                  by either Seaboard(us) or the producer
   //?                  Allow the system to process accruals thru
   //?                  the General Ledger.
  }

  //?Set Live Gross/Payment Gross/Accruals to Zeros and all net's to zero
  DO;

  // WRK.TH Live Gross Amt = CON.*ZERO
  WRK.TH_Live_Gross_Amt = *ZERO;

  // WRK.TH Payment Gross = CON.*ZERO
  WRK.TH_Payment_Gross = *ZERO;

  // WRK.Th Payment Net Amt = CON.*ZERO
  WRK.Th_Payment_Net_Amt = *ZERO;

  // WRK.TH LIve Net Amt = CON.*ZERO
  WRK.TH_LIve_Net_Amt = *ZERO;

  // WRK.TH Carcass Net Amt = CON.*ZERO
  WRK.TH_Carcass_Net_Amt = *ZERO;

  // WRK.TH Total Net WO Adds = CON.*ZERO
  WRK.TH_Total_Net_WO_Adds = *ZERO;

  // WRK.TH Accrual Amount = CON.*ZERO
  WRK.TH_Accrual_Amount = *ZERO;

  ENDDO;

  //?HPE053P - Include Dead Head Uom
  EXECUTE FUNCTION(Rtv Tattoo Hdr Totls RT) TYPE(RTVOBJ) FILE(PKCDCPP)            AB1143322;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(WRK.TH_Deduction_Amt);
  PARAMETER(WRK.TH_Additions_Amt);
  PARAMETER(WRK.TH_Accrual_Amount);
  PARAMETER('Y');
  PARAMETER(WRK.Freight_Tot_Ded_Add_Exp);
  {
   //?USER: Initialize routine

   // PAR.TH Deduction Amt = CON.*ZERO
   PAR.TH_Deduction_Amt = *ZERO;

   // PAR.TH Additions Amt = CON.*ZERO
   PAR.TH_Additions_Amt = *ZERO;

   // PAR.TH Accrual Amount = CON.*ZERO
   PAR.TH_Accrual_Amount = *ZERO;

   // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
   PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.@Status Include Dead Hd is No, dont include Dead Hd
   IF PAR.@Status_Include_Dead_Hd = 'N';

   // AND DB1.THD UOM is Dead Head UOM
   AND DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF DB1.THD Expense Paid by is Producer
   IF DB1.THD_Expense_Paid_by = 'P';

   CASE;

   // IF DB1.THD Unit Amt Sign is Add
   IF DB1.THD_Unit_Amt_Sign = '+';

   // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.THD Ded/Add Amount
   PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.THD_Ded_Add_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.THD Ded/Add Amount
   PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.THD_Ded_Add_Amount;

   ENDIF;

   // IF DB1.THD Expense Paid by is Seaboard
   IF DB1.THD_Expense_Paid_by = 'S';

   CASE;

   // IF DB1.THD Expense Type is Freight
   IF DB1.THD_Expense_Type = 'F';

   CASE;

   // IF DB1.THD Unit Amt Sign is Add
   IF DB1.THD_Unit_Amt_Sign = '+';

   // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp + DB1.THD Ded/Add Amou
   PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp + DB1.THD_Ded_Add_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp - DB1.THD Ded/Add Amou
   PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp - DB1.THD_Ded_Add_Amount;

   ENDIF;

   // IF DB1.THD Expense Type is Other
   IF DB1.THD_Expense_Type = 'O';

   CASE;

   // IF DB1.THD Unit Amt Sign is Add
   IF DB1.THD_Unit_Amt_Sign = '+';

   // PAR.TH Accrual Amount = PAR.TH Accrual Amount + DB1.THD Ded/Add Amount
   PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount + DB1.THD_Ded_Add_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.TH Accrual Amount = PAR.TH Accrual Amount - DB1.THD Ded/Add Amount
   PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount - DB1.THD_Ded_Add_Amount;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Chg Tto Ded/Add/Net   CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1143407;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TH_Live_Purchase_UOM);
  PARAMETER(DB1.TH_Live_Purchase_Price);
  PARAMETER(WRK.TH_Live_Gross_Amt);
  PARAMETER(WRK.TH_LIve_Net_Amt);
  PARAMETER(WRK.TH_Deduction_Amt);
  PARAMETER(WRK.TH_Total_Net_WO_Adds);
  PARAMETER(WRK.TH_Carcass_Net_Amt);
  PARAMETER(WRK.TH_Additions_Amt);
  PARAMETER(WRK.TH_Payment_Gross);
  PARAMETER(WRK.Th_Payment_Net_Amt);
  PARAMETER(WRK.TH_Accrual_Amount);
  PARAMETER('C');
  PARAMETER(DB1.TH_Payment_Type);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


EXECUTE FUNCTION(Rtv/Dlt Vchr Split    RT) TYPE(RTVOBJ) FILE(PKCACPP)           AB1145237;
PARAMETER(CTL.VCH_Company_number);
PARAMETER(CTL.VCH_Batch_Number);
PARAMETER(CTL.VCH_Header_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Hog Check Split) TYPE(DLTOBJ) FILE(PKCACPP)             AB1107927;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
 PARAMETER(DB1.BOS_Split_Producer_Code);
 PARAMETER(DB1.PD_Producer_Code);
}


ENDIF;

