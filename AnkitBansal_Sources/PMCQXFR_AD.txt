// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMCQXFR
// ?Date: 14.08.2025 Time: 03:44:44
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// LCL.PFS Company Number = CVTVAR(PAR.Company Number)
LCL.PFS_Company_Number = CVTVAR(PAR.Company_Number);

EXECUTE FUNCTION(Rtv Picked To WF&LdP  RT) TYPE(RTVOBJ) FILE(PPBGCPP)           AC1912877;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.PRP_Warehouse_Code);
PARAMETER(PAR.PRP_From_Date);
PARAMETER(PAR.PRP_To_Date);
PARAMETER(PAR.LSP_Accounting_Co);
PARAMETER(PAR.LSP_Prodution_Warehouse);
{
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?Pass in the selection, if selection but not equal then set to no
 //?selection
 //?Company Item
 DO;

 //?Item Code or Warehouse break: Rtv Scheduling Position Grade Sts
 CASE;

 // IF DB1.PFS Item Code NE WRK.Item Code
 IF DB1.PFS_Item_Code <> WRK.Item_Code;

 // OR DB1.PFS Warehouse Code NE WRK.Warehouse Code
 OR DB1.PFS_From_Warehouse_Code <> WRK.Warehouse_Code;

 // WRK.Item Code = CVTVAR(DB1.PFS Item Code)
 WRK.Item_Code = CVTVAR(DB1.PFS_Item_Code);

 // WRK.Warehouse Code = CVTVAR(DB1.PFS Warehouse Code)
 WRK.Warehouse_Code = CVTVAR(DB1.PFS_From_Warehouse_Code);

 EXECUTE FUNCTION(Rtv Sched Pstn Grd sts RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1517564;
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Item_Code);
 PARAMETER(WRK.Scheduling_Position_Grade);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 //?Scheduling Position Grade From the company item must = Y
 CASE;

 // IF WRK.Scheduling Position Grade is Yes
 IF WRK.Scheduling_Position_Grade = 'Y';

 //?Scheduling Position Grade From the company item must = Y
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDDO;

 //?If record was selected
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?Calculate IPB picked, update the Load Schdlng Pstn & WF Item Post Bal
 DO;

 // LCL.IPB Picked = CON.*ZERO
 LCL.IPB_Picked = *ZERO;

 //?Ipb picked
 CASE;

 // IF DB1.PFS Transaction Type is SM: Ship Regular Order
 IF DB1.PFS_Transaction_Type = 'S01';

 // OR DB1.PFS Transaction Type is SM: Transfer Order
 OR DB1.PFS_Transaction_Type = 'S02';

 // LCL.IPB Picked = LCL.IPB Picked + DB1.PFS Transaction Quantity
 LCL.IPB_Picked = LCL.IPB_Picked + DB1.PFS_Transaction_Quantity;

 //?Ipb picked
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.IPB Picked = LCL.IPB Picked - DB1.PFS Transaction Quantity
 LCL.IPB_Picked = LCL.IPB_Picked - DB1.PFS_Transaction_Quantity;

 ENDIF;

 //?CONVERT DATE FROM 20081012 WHICH IS THE sample goin to 1081012
 //?04/02/09 PKD Use IF instead of CL to convert date.
 EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
 PARAMETER(LCL.Production_Date);
 PARAMETER(DB1.PFS_Production_Date);
 {
  //?Execute internal function

  //?** YEAR **
  // PAR.Year Code = PAR.DATE / CON.10000 *
  PAR.Year_Code = PAR.DATE / 10000;

  // PAR.Year  NBR USR = PAR.Year Code
  PAR.Year_NBR_USR = PAR.Year_Code;

  // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
  PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

  //?** MONTH **
  // PAR.Month                 USR = PAR.DATE / CON.100 *
  PAR.Month_USR = PAR.DATE / 100;

  // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
  PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

  //?** DAY **
  // PAR.Day of Month USR = PAR.DATE
  PAR.Day_of_Month_USR = PAR.DATE;

  // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
  PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

  //?CENTURY+YEAR
  CASE;

  // IF PAR.Year Code is Twentieth Century
  IF PAR.Year_Code <= 1999;

  // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

  //?CENTURY+YEAR
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

  ENDIF;

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

  // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
  PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

  // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
  PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

 }

 //?DUE to the fact that the orders and balance have already
 //?created the LOAD SCHDLNG PSTN KEY, these are the only
 //?records that will be updated.
 //?This next step is to change the Load Sch Psn Key with the
 //?pick information, IF A RECORD WAS NOT FOUND THEN
 //?Do not create the pick record  -- these records will not be used
 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(DB1.PFS_From_Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv/Chg LdSchdPstnPickRT) TYPE(RTVOBJ) FILE(PDMJCPP)           AC1912879;
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(LCL.Production_Warehouse_Code);
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_From_Warehouse_Code);
 PARAMETER(DB1.PFS_Order_Number);
 PARAMETER(LCL.IPB_Picked);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?If a record exists in the Carisle file that does not
  //?exists in the Load Sch Pos Key - From Orders then we
  //?do not want these records
  //?USER: Process Data record

  // LCL.Picked to Order = DB1.Picked to Order + PAR.IPB Picked
  LCL.Picked_to_Order = DB1.Picked_to_Order + PAR.IPB_Picked;

  EXECUTE FUNCTION(Chg LdSchPstn - Pick  CO) TYPE(CHGOBJ) FILE(PDMJCPP)           AC1912880;
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.LSPK_Accounting_Company);
  PARAMETER(DB1.LSPK_Production_Whse);
  PARAMETER(DB1.LSPK_Order_Company);
  PARAMETER(DB1.LSPK_Order_Warehouse);
  PARAMETER(DB1.Sequence);
  PARAMETER(DB1.Process_Sequence);
  PARAMETER(LCL.Picked_to_Order);
  PARAMETER(DB1.Item_Age_Days);
  PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
  PARAMETER(DB1.Production_Ovr_AgeDte_To);
  PARAMETER(DB1.Production_AgeDte_Fr);
  PARAMETER(DB1.Production_AgeDte_To);
  {
   //?USER: Processing after Data read

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

 }

 //?If no records from the orders in the LOAS SCHDLNG PSTN KEY
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(Rtv/Chg WF - Picked   RT) TYPE(RTVOBJ) FILE(PME0CPP)           AC1912883;
 PARAMETER(DB1.PFS_Item_Code);
 PARAMETER(PAR.LSP_Accounting_Co);
 PARAMETER(PAR.LSP_Prodution_Warehouse);
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_From_Warehouse_Code);
 PARAMETER(LCL.Production_Date);
 PARAMETER(LCL.IPB_Picked);
 {
  //?USER: Process Data record

  // LCL.Picked Inventory = DB1.IPB Picked + PAR.IPB Picked
  LCL.Picked_Inventory = DB1.IPB_Picked + PAR.IPB_Picked;

  EXECUTE FUNCTION(Chg WF ItmPos - PickedCO) TYPE(CHGOBJ) FILE(PME0CPP)           AC1912884;
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.IPB_Accounting_Company);
  PARAMETER(DB1.IPB_Production_Warehouse);
  PARAMETER(DB1.IPB_Order_Company);
  PARAMETER(DB1.IPB_Order_Warehouse);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.Picked_Inventory);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   // DB1.IPB Current Position = DB1.IPB Quantity On Hand - DB1.IPB Picked
   DB1.IPB_Start_Position = DB1.IPB_Quantity_On_Hand - DB1.IPB_Picked;

   // DB1.IPB New Current Position = DB1.IPB Current Position
   DB1.IPB_New_Current_Position = DB1.IPB_Start_Position;

  }

  QUIT;

 }

 ENDIF;

 ENDDO;

 ENDIF;

}


