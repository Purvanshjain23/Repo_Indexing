// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for ARJVPFR
// ?Date: 14.08.2025 Time: 12:03:05
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

CASE;

// IF PAR.Accounting Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

CASE;

// IF DB1.Accounting Company Number GT PAR.Accounting Company Number
IF DB1.Company_Number > PAR.Company_Number;

// Execute function Prt End of File 'A'    US.
EXECUTE FUNCTION(Prt End of File 'A'    US) TYPE(EXCUSRSRC) ('USKXUFR');
{
 C                     MOVEL'1'       W0EOFA           END OF FILE
}


ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.A/R Customer Number = PAR.A/R Customer Number
X1PG_AR_Customer_Number = PAR.AR_Customer_Number;

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(X1PG_AR_Customer_Number);
PARAMETER(X1PG_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Company name
CASE;

// IF PAR.Company Number is not equal to zero
IF PAR.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Print required level headings

// SUPPRESSED PRINT A/R Customer Number header format

CASE;

IF NEW Company_Number;
//?Determine whether to print header
CASE;

// IF PAR.Accounting Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Determine whether to print header
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Company Number - 3 header format
PRINT Company Number - 3 header format;

ENDIF;

//?USER: On print of detail format

//?>>> Retrieve Detail information, accumulate for all companies.
EXECUTE FUNCTION(RTV Inquiry totals     RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1113184;
PARAMETER(CUR.Company_Number);
PARAMETER(*MISSING);
PARAMETER(CUR.Age_Due_Current_CB);
PARAMETER(CUR.Age_Due_Aging_1_CB);
PARAMETER(CUR.Age_Due_Aging_2_CB);
PARAMETER(CUR.Age_Due_Aging_3_CB);
PARAMETER(CUR.Age_Due_Aging_4_CB);
PARAMETER(CUR.Age_Due_Aging_5_CB);
PARAMETER(CUR.Age_Due_Current_W_O_CB);
PARAMETER(CUR.Age_Due_Aging_1_W_O_CB);
PARAMETER(CUR.Age_Due_Aging_2_W_O_CB);
PARAMETER(CUR.Age_Due_Aging_3_W_O_CB);
PARAMETER(CUR.Age_Due_Aging_4_W_O_CB);
PARAMETER(CUR.Age_Due_Aging_5_W_O_CB);
PARAMETER(CUR.Value_of_Open_Orders);
PARAMETER(CUR.Time_of_Last_Aging);
PARAMETER(CUR.Date_of_First_Shipment);
PARAMETER(CUR.Date_of_Last_Shipment);
PARAMETER(CUR.Amount_of_Last_Shipment);
PARAMETER(CUR.Date_of_Last_Payment);
PARAMETER(CUR.Amount_of_Last_Payment);
PARAMETER(CUR.Date_of_Highest_A_R_Bal);
PARAMETER(CUR.Amount_of_Highest_A_R_Bal);
PARAMETER(CUR.Number_of_Invoices_YTD);
PARAMETER(CUR.Number_of_Orders_YTD);
PARAMETER(CUR.Number_of_Credits_YTD);
PARAMETER(CUR.Number_of_Payments);
PARAMETER(CUR.Date_of_Last_Aging);
PARAMETER(CUR.Last_YTD_Nbr_of_Orders);
PARAMETER(CUR.Last_YTD_Nbr_of_Credits);
PARAMETER(CUR.Last_YTD_Nbr_of_Payments);
PARAMETER(CUR.Last_YTD_Nbr_of_Invoices);
PARAMETER(CUR.MTD_Invoices_Paid);
PARAMETER(CUR.YTD_Invoices_Paid);
PARAMETER(CUR.MTD_Days_Paid);
PARAMETER(CUR.YTD_Days_Paid);
PARAMETER(CUR.YTD_Sales_Invoiced);
PARAMETER(CUR.Last_Year_Sales_Invoiced);
{
 //?USER: Initialize routine

 // WRK.Company count = CON.*ZERO
 WRK.Company_count = *ZERO;

 //?05/31/24 SP S303457-Start
 // PAR.YTD Invoices Paid     USR = CND.*Zero
 PAR.YTD_Invoices_Paid_USR = *ZERO;

 // PAR.YTD Days Paid         USR = CND.*Zero
 PAR.YTD_Days_Paid_USR = *ZERO;

 //?05/31/24 SP S303457-End
 //?USER: Process Data record

 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 CASE;

 // IF DB1.Company Number NE PAR.Company Number
 IF DB1.Company_Number <> PAR.Company_Number;

 QUIT;

 ENDIF;

 ENDIF;

 //?>>> For 'All' companies,
 //?>>> determine 1st and last dates for display.
 //?>>> Determine Date of Last Aging across companies
 CASE;

 // IF DB1.Date of Last Aging GT PAR.Date of Last Aging
 IF DB1.Date_of_Last_Aging > PAR.Date_of_Last_Aging;

 // PAR.Date of Last Aging = DB1.Date of Last Aging
 PAR.Date_of_Last_Aging = DB1.Date_of_Last_Aging;

 ENDIF;

 //?>>> Determine Time of Last Aging across companies
 CASE;

 // IF DB1.Time of Last Aging GT PAR.Time of Last Aging
 IF DB1.Time_of_Last_Aging > PAR.Time_of_Last_Aging;

 // PAR.Time of Last Aging = DB1.Time of Last Aging
 PAR.Time_of_Last_Aging = DB1.Time_of_Last_Aging;

 ENDIF;

 //?>>> Determine Date and Amount of First Sale across companies
 CASE;

 // IF DB1.Date of First Shipment is entered
 IF DB1.Date_of_First_Shipment <> *ZERO;

 CASE;

 // IF DB1.Date of First Shipment LT PAR.Date of First Shipment
 IF DB1.Date_of_First_Shipment < PAR.Date_of_First_Shipment;

 // PAR.Date of First Shipment = DB1.Date of First Shipment
 PAR.Date_of_First_Shipment = DB1.Date_of_First_Shipment;

 ENDIF;

 //?>>> Determine Date and Amount of First Sale across companies
 //?>>> Determine Date and Amount of Last Sale across companies
 // IF DB1.Date of Last Shipment GT PAR.Date of Last Shipment
 IF DB1.Date_of_Last_Shipment > PAR.Date_of_Last_Shipment;

 // PAR.Date of Last Shipment = DB1.Date of Last Shipment
 PAR.Date_of_Last_Shipment = DB1.Date_of_Last_Shipment;

 // PAR.Amount of Last Shipment = DB1.Amount of Last Shipment
 PAR.Amount_of_Last_Shipment = DB1.Amount_of_Last_Shipment;

 ENDIF;

 //?>>> Determine Date and Amount of Last Payment across companies
 CASE;

 // IF DB1.Date of Last Payment GT PAR.Date of Last Payment
 IF DB1.Date_of_Last_Payment > PAR.Date_of_Last_Payment;

 // PAR.Date of Last Payment = DB1.Date of Last Payment
 PAR.Date_of_Last_Payment = DB1.Date_of_Last_Payment;

 // PAR.Amount of Last Payment = DB1.Amount of Last Payment
 PAR.Amount_of_Last_Payment = DB1.Amount_of_Last_Payment;

 ENDIF;

 //?>>> Determine Amount of Highest A/R Balance across companies
 CASE;

 // IF DB1.Amount of Highest A/R Bal GT PAR.Amount of Highest A/R Bal
 IF DB1.Amount_of_Highest_A_R_Bal > PAR.Amount_of_Highest_A_R_Bal;

 // PAR.Date of Highest A/R Bal. = DB1.Date of Highest A/R Bal.
 PAR.Date_of_Highest_A_R_Bal = DB1.Date_of_Highest_A_R_Bal;

 // PAR.Amount of Highest A/R Bal = DB1.Amount of Highest A/R Bal
 PAR.Amount_of_Highest_A_R_Bal = DB1.Amount_of_Highest_A_R_Bal;

 ENDIF;

 //?>>> Accumulate number of invoices, etc.
 // PAR.Number of Invoices YTD = DB1.Number of Invoices YTD + PAR.Number of Invoices
 PAR.Number_of_Invoices_YTD = DB1.Number_of_Invoices_YTD + PAR.Number_of_Invoices_YTD;

 // PAR.Number of Orders YTD = DB1.Number of Orders YTD + PAR.Number of Orders YTD
 PAR.Number_of_Orders_YTD = DB1.Number_of_Orders_YTD + PAR.Number_of_Orders_YTD;

 // PAR.Number of Credits YTD = DB1.Number of Credits YTD + PAR.Number of Credits YT
 PAR.Number_of_Credits_YTD = DB1.Number_of_Credits_YTD + PAR.Number_of_Credits_YTD;

 // PAR.Number of Payments = DB1.Number of Payments + PAR.Number of Payments
 PAR.Number_of_Payments = DB1.Number_of_Payments + PAR.Number_of_Payments;

 // PAR.Value of Open Orders = DB1.Value of Open Orders + PAR.Value of Open Orders
 PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders + PAR.Value_of_Open_Orders;

 // PAR.Last YTD Nbr of Orders = PAR.Last YTD Nbr of Orders + DB1.Last YTD Nbr of Or
 PAR.Last_YTD_Nbr_of_Orders = PAR.Last_YTD_Nbr_of_Orders + DB1.Last_YTD_Nbr_of_Orders;

 // PAR.Last YTD Nbr of Credits = PAR.Last YTD Nbr of Credits + DB1.Last YTD Nbr of
 PAR.Last_YTD_Nbr_of_Credits = PAR.Last_YTD_Nbr_of_Credits + DB1.Last_YTD_Nbr_of_Credits;

 // PAR.Last YTD Nbr of Payments = PAR.Last YTD Nbr of Payments + DB1.Last YTD Nbr o
 PAR.Last_YTD_Nbr_of_Payments = PAR.Last_YTD_Nbr_of_Payments
 + DB1.Last_YTD_Nbr_of_Payments;

 // PAR.Last YTD Nbr of Invoices = PAR.Last YTD Nbr of Invoices + DB1.Last YTD Nbr o
 PAR.Last_YTD_Nbr_of_Invoices = PAR.Last_YTD_Nbr_of_Invoices
 + DB1.Last_YTD_Nbr_of_Invoices;

 // PAR.MTD Invoices Paid = PAR.MTD Invoices Paid + DB1.MTD Invoices Paid
 PAR.MTD_Invoices_Paid = PAR.MTD_Invoices_Paid + DB1.MTD_Invoices_Paid;

 //?05/31/24 SP S303457-Start
 // PAR.YTD Invoices Paid     USR = PAR.YTD Invoices Paid     USR + DB1.YTD Invoices Paid
 PAR.YTD_Invoices_Paid_USR = PAR.YTD_Invoices_Paid_USR + DB1.YTD_Invoices_Paid;

 //?05/31/24 SP S303457-End
 // PAR.MTD Days Paid = PAR.MTD Days Paid + DB1.MTD Days Paid
 PAR.MTD_Days_Paid = PAR.MTD_Days_Paid + DB1.MTD_Days_Paid;

 //?05/31/24 SP S303457-Start
 // PAR.YTD Days Paid         USR = PAR.YTD Days Paid         USR + DB1.YTD Days Paid
 PAR.YTD_Days_Paid_USR = PAR.YTD_Days_Paid_USR + DB1.YTD_Days_Paid;

 //?05/31/24 SP S303457-End
 // PAR.Last Year Sales Invoiced = PAR.Last Year Sales Invoiced + DB1.Last Year Sale
 PAR.Last_Year_Sales_Invoiced = PAR.Last_Year_Sales_Invoiced
 + DB1.Last_Year_Sales_Invoiced;

 // PAR.YTD Sales Invoiced = PAR.YTD Sales Invoiced + DB1.YTD Sales Invoiced
 PAR.YTD_Sales_Invoiced = PAR.YTD_Sales_Invoiced + DB1.YTD_Sales_Invoiced;

 // PAR.Current Month = DB1.Current Month
 PAR.Current_Month = DB1.Current_Month;

 //?>>> Sum Aging Due $
 DO;

 // PAR.Age $ Due - Current - CB = PAR.Age $ Due - Current - CB + DB1.Age $ Due - Cu
 PAR.Age_Due_Current_CB = PAR.Age_Due_Current_CB + DB1.Age_Due_Current_CB;

 // PAR.Age $ Due - Aging 1 - CB = PAR.Age $ Due - Aging 1 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_1_CB = PAR.Age_Due_Aging_1_CB + DB1.Age_Due_Aging_1_CB;

 // PAR.Age $ Due - Aging 2 - CB = PAR.Age $ Due - Aging 2 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_2_CB = PAR.Age_Due_Aging_2_CB + DB1.Age_Due_Aging_2_CB;

 // PAR.Age $ Due - Aging 3 - CB = PAR.Age $ Due - Aging 3 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_3_CB = PAR.Age_Due_Aging_3_CB + DB1.Age_Due_Aging_3_CB;

 // PAR.Age $ Due - Aging 4 - CB = PAR.Age $ Due - Aging 4 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_4_CB = PAR.Age_Due_Aging_4_CB + DB1.Age_Due_Aging_4_CB;

 // PAR.Age $ Due - Aging 5 - CB = PAR.Age $ Due - Aging 5 - CB + DB1.Age $ Due - Ag
 PAR.Age_Due_Aging_5_CB = PAR.Age_Due_Aging_5_CB + DB1.Age_Due_Aging_5_CB;

 // PAR.Age $ Due-Current-W/O CB = PAR.Age $ Due-Current-W/O CB + DB1.Age $ Due-Curr
 PAR.Age_Due_Current_W_O_CB = PAR.Age_Due_Current_W_O_CB + DB1.Age_Due_Current_W_O_CB;

 // PAR.Age $ Due-Aging 1-W/O CB = PAR.Age $ Due-Aging 1-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_1_W_O_CB = PAR.Age_Due_Aging_1_W_O_CB + DB1.Age_Due_Aging_1_W_O_CB;

 // PAR.Age $ Due-Aging 2-W/O CB = PAR.Age $ Due-Aging 2-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_2_W_O_CB = PAR.Age_Due_Aging_2_W_O_CB + DB1.Age_Due_Aging_2_W_O_CB;

 // PAR.Age $ Due-Aging 3-W/O CB = PAR.Age $ Due-Aging 3-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_3_W_O_CB = PAR.Age_Due_Aging_3_W_O_CB + DB1.Age_Due_Aging_3_W_O_CB;

 // PAR.Age $ Due-Aging 4-W/O CB = PAR.Age $ Due-Aging 4-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_4_W_O_CB = PAR.Age_Due_Aging_4_W_O_CB + DB1.Age_Due_Aging_4_W_O_CB;

 // PAR.Age $ Due-Aging 5-W/O CB = PAR.Age $ Due-Aging 5-W/O CB + DB1.Age $ Due-Agin
 PAR.Age_Due_Aging_5_W_O_CB = PAR.Age_Due_Aging_5_W_O_CB + DB1.Age_Due_Aging_5_W_O_CB;

 ENDDO;

 // WRK.Company count = CON.1 + WRK.Company count
 WRK.Company_count = 1 + WRK.Company_count;

}


//?Set Date of First Sale back to zero, if no sales
CASE;

// IF CUR.Date of First Shipment is High Values
IF CUR.Date_of_First_Shipment = 9999999;

// CUR.Date of First Shipment = CON.*ZERO
CUR.Date_of_First_Shipment = *ZERO;

ENDIF;

// CUR.USR Customer source = WRK.Source of Customer
CUR.USR_Customer_source = WRK.Source_of_Customer;

// CUR.USR SIC Number = WRK.SIC Number
CUR.USR_SIC_Number = WRK.SIC_Number;

// CUR.USR D & B Number = WRK.D & B Number
CUR.USR_D_B_Number = WRK.D_B_Number;

// CUR.USR D & B Rating = WRK.D & B Rating
CUR.USR_D_B_Rating = WRK.D_B_Rating;

// CUR.USR Business Size = WRK.Business Size - Thousands
CUR.USR_Business_Size = WRK.Business_Size_Thousands;

// CUR.USR Date - ATR = WRK.Credit Line Expire Date
CUR.USR_Date_ATR = WRK.Credit_Line_Expire_Date;

// CUR.USR number = WRK.Number of Employees
CUR.USR_number = WRK.Number_of_Employees;

// CUR.USR Status (Y/N) = WRK.Audited Status
CUR.USR_Status_Y_N = WRK.Audited_Status;

//?USER: Print required level totals

// SUPPRESSED PRINT Company Number - 3 totals format

CASE;

IF NEW AR_Customer_Number;
// Print A/R Customer Number totals format
PRINT A/R Customer Number totals format;

ENDIF;

