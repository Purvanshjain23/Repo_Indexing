// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDSLDFR
// ?Date: 14.08.2025 Time: 03:35:59
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// WRK.Change Flag USR = CND.No
WRK.Change_Flag_USR = 'N';

//?USER: Initialize subfile control

EXECUTE FUNCTION(RTV Load All Fields    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1491510;
PARAMETER(PAR.Load_ID);
PARAMETER(CTL.Load_Start_Company_USR);
PARAMETER(CTL.Scheduled_Ship_Date_USR);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Load_Status);
PARAMETER(CTL.Reefer_Temperature);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Seal_4);
PARAMETER(WRK.Seal_2_Unused);
PARAMETER(CTL.USR_Total_Weight);
PARAMETER(CTL.Flat_Amount);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.Truck_Size);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(CTL.Total_Rated_Freight);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.Load_Type);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(CTL.Schedule_Sequence_Number);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CTL.USR_Shipping_Method);
PARAMETER(CTL.Ship_From_Warehouse);
PARAMETER(CTL.Ship_To_State_Code);
PARAMETER(CTL.Gross_Weight);
PARAMETER(CTL.Carrier_Broker);
PARAMETER(WRK.Export_Status);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(LCL.Load_Held_Over_Reason);
PARAMETER(LCL.Load_Held_Over_Rsn_Cmt);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(LCL.Pallets_Loaded);
PARAMETER(LCL.Avg_Pallet_Tare);
PARAMETER(CTL.Tot_Pallet_Tare);
PARAMETER(LCL.Load_Confirmed_Sts);
PARAMETER(LCL.Load_Confirmed_Contact);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Override_Total_Load_Miles);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(LCL.Hide_on_WW_Load_Sts);
PARAMETER(LCL.Late_Billing_Email_Flag);
PARAMETER(CTL.Shipping_Temp_Code_C_F);
PARAMETER(LCL.LH_Held_Over_Rsn_Cmt);
PARAMETER(LCL.Multi_Company_Load);
PARAMETER(LCL.Fax_Sent_to_SSI_Carrier);
PARAMETER(LCL.Schedule_Pos_Load_Grade);
PARAMETER(LCL.LH_Power_Only_Load);
PARAMETER(LCL.MG_Created_Load);
PARAMETER(LCL.LH_Unused_Sts_5);
PARAMETER(LCL.Load_U_M);
PARAMETER(LCL.TPM_Shipment_Status);
PARAMETER(LCL.LH_Unused_Sts_8);
PARAMETER(WRK.LH_On_Time_Reason_Code);
PARAMETER(WRK.LH_Held_Over_Reason);
PARAMETER(LCL.LH_Carrier_Paid_Dte);
PARAMETER(LCL.LH_Carrier_Paid_Time);
PARAMETER(LCL.LH_Last_Combo_Prod_Date);
PARAMETER(LCL.LH_Last_Combo_Prod_Time);
PARAMETER(NLL.LPT_Load_Plan_Start_Dt);
PARAMETER(NLL.LPT_Load_Plan_Start_Tm);
PARAMETER(NLL.TPM_Planned_Ship_Date);
PARAMETER(LCL.LH_Unused_Time_4);
PARAMETER(LCL.LH_Unused_Date_5);
PARAMETER(LCL.LH_Unused_Time_5);
PARAMETER(LCL.LH_Unused_Date_6);
PARAMETER(LCL.LH_Unused_Time_6);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Carr,Pln Shp dt   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2070153;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Carrier_Code);
PARAMETER(NLL.TPM_Planned_Ship_Date);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Put Override miles on screen, if entered         E00207
CASE;

// IF WRK.Override Total Load Miles is Entered
IF WRK.Override_Total_Load_Miles <> *ZERO;

// CTL.Total Load Miles = WRK.Override Total Load Miles
CTL.Total_Load_Miles = WRK.Override_Total_Load_Miles;

// WRK.Change Flag USR = CND.Yes
WRK.Change_Flag_USR = 'Y';

//?** Put Override miles on screen, if entered         E00207
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Total Load Miles = WRK.Total Load Miles
CTL.Total_Load_Miles = WRK.Total_Load_Miles;

ENDIF;

//?Carrier Name
CASE;

// IF CTL.Carrier Code NE WRK.BLANK
IF CTL.Carrier_Code <> WRK.BLANK;

EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(CTL.Carrier_Code);
PARAMETER(CTL.USR_Carrier_Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Carrier Name
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.USR Carrier Name = CON.*BLANK
CTL.USR_Carrier_Name = *BLANK;

ENDIF;

//?Broker Name
CASE;

// IF CTL.Carrier Broker NE WRK.BLANK
IF CTL.Carrier_Broker <> WRK.BLANK;

EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(CTL.Carrier_Broker);
PARAMETER(CTL.Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Broker Name
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Name = CON.*BLANK
CTL.Name = *BLANK;

ENDIF;

// CTL.Status Description = Condition name of CTL.Load Status
CTL.Status_Description = RTVCND(CTL.Load_Status);

//?*-----------------------------------------------------------------*
//?* 05/15/00 PKD OMS336 Replaced with routine that will include
//?*              the Pallet Tare Weight.
EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(PAR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.USR_Weight_Accumulated);
PARAMETER(CTL.Load_Status);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


//?*-----------------------------------------------------------------*
// CTL.Gross Weight = PAR.USR Weight Accumulated
CTL.Gross_Weight = PAR.USR_Weight_Accumulated;

//?RMC 7/25/06 trf011 chg to not update the load header here
EXECUTE FUNCTION(Rtv Sum Ld Abs.Frt/Wgt RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1294689;
PARAMETER(PAR.Load_ID);
PARAMETER(CTL.USR_Total_Freight);
PARAMETER(WRK.Weight_Scheduled);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.Total Freight = CON.*ZERO
 PAR.Total_Freight = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 //?USER: Process Data record

 // PAR.USR Percent Work, 7.4   1 = DB1.Freight Rate / CON.100 *Rounded
 PAR.USR_Percent_Work_7_4_1 = DB1.Absorbed_Freight_Rate_CWT / 100 'H';

 // PAR.Freight Amount = DB1.Order Weight Total * PAR.USR Percent Work, 7.4   1 *Rou
 PAR.Freight_Amount = DB1.Order_Weight_Total * PAR.USR_Percent_Work_7_4_1 'H';

 // PAR.Total Freight = PAR.Total Freight + PAR.Freight Amount
 PAR.Total_Freight = PAR.Total_Freight + PAR.Freight_Amount;

 // PAR.Weight Scheduled = PAR.Weight Scheduled + DB1.Order Weight Total
 PAR.Weight_Scheduled = PAR.Weight_Scheduled + DB1.Order_Weight_Total;

}


EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Load_Start_Company_USR);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record from DBF record

// RCD.USR Stop = DB1.Stop/Drop
RCD.USR_Stop = DB1.Stop_Drop;

EXECUTE FUNCTION(RTV All Header Field 2 RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1645356;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Header_Status);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(RCD.USR_Weight_9_0);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.LTL_Flag);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Export_Status);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Reefer_Temperature);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Shipping_Temp_Code_C_F);
PARAMETER(WRK.Claim_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.USR_State_Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Check Pick Event   RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1198676;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('03');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?"Picked"
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// RCD.USR Picked = CON.Picked
RCD.USR_Picked = 'Picked';

//?"Picked"
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Picked = CON.*BLANK
RCD.USR_Picked = *BLANK;

ENDIF;

EXECUTE FUNCTION(RTV Ttl Frght for Ord  RT) TYPE(RTVOBJ) FILE(OMCQWKP)          AC1568403;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Freight_USR);
{
 //?USER: Initialize routine

 // PAR.Transaction Amount = CON.*ZERO
 PAR.Transaction_Amount = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Financial Type is Freight Charge
 IF DB1.Financial_Type = 'F';

 // PAR.Transaction Amount = PAR.Transaction Amount + DB1.Transaction Amount
 PAR.Transaction_Amount = PAR.Transaction_Amount + DB1.Transaction_Amount;

 ENDIF;

}


EXECUTE FUNCTION(RTV Region for State   RT) TYPE(RTVOBJ) FILE(PDKGREP)          AC1381891;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Region_Code);
PARAMETER(RCD.Ship_To_State_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?USER: Process subfile record (Pre-confirm)

//?Display Order
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program Dsp Order Header       PV.
CALL PROGRAM(Dsp Order Header       PV) ('OMB5PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(WRK.Date_of_Original_Entry);
PARAMETER(WRK.Requested_Delivery_Time);
PARAMETER('OMS');

ENDIF;

//?Display Order Details
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(PAR.Application_Code);

ENDIF;

//?** FP1101 LJB 04/10/2007 display order level export instructions
//?** FP1101 RMC 09/14/07   do the above if export only
//?** Display Customer Order Export Instructions
CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

// WRK.Sequence Number = CON.1
WRK.Sequence_Number = 1;

CASE;

// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

EXECUTE FUNCTION(RTV CHK OHE Exists     RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1815388;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Display OHE or error message if no record is found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?** Select the order and pass to the dsprcd     FP1101 LJB 04/09/2007
// WRK.Exit Selection USR = CND.No
WRK.Exit_Selection_USR = 'N';

// DOW WRK.Exit Selection USR is No
DOW WRK.Exit_Selection_USR = 'N';

// Call program SEL Order/Load/Exp Sts SR.
CALL PROGRAM(SEL Order/Load/Exp Sts SR) ('PMFXSRR');
PARAMETER(WRK.Exit_Selection_USR);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Company_Number);

//?** Edit order until exit is requested
CASE;

// IF WRK.Exit Selection USR is No
IF WRK.Exit_Selection_USR = 'N';

// Call program DSP Cust Ord Export    D1.
CALL PROGRAM(DSP Cust Ord Export    D1) ('PMFWD1R');
PARAMETER(WRK.USR_Company_Number);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Export Instructions not found for order.'
ERROR(USR3697);

ENDIF;

ENDIF;

ENDDO;

//?** Display OHE or error message if no record is found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Export Instructions not found for order.'
ERROR(USR3697);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Export Instructions not found for order.'
ERROR(USR3697);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Dsp Gross Weight Dtl  DF.
CALL PROGRAM(Dsp Gross Weight Dtl  DF) ('PNJNDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Header_Status);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

