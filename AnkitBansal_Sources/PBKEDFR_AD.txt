// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBKEDFR
// ?Date: 14.08.2025 Time: 03:48:18
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

// LCL.Error Status = CND.no
LCL.Error_Status = 'N';

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// LCL.Item Code Break Flag = CND.Yes
LCL.Item_Code_Break_Flag = 'Y';

ENDIF;

CASE;

// IF PAR.Company Number is Equal to zero
IF PAR.Company_Number = *ZERO;

// CTL.Company Number = LCL.Company Number
CTL.Company_Number = LCL.Company_Number;

// CTL.Warehouse Code = LCL.Warehouse Code
CTL.Warehouse_Code = LCL.Warehouse_Code;

// CTL.LPT Product Complete Tm = CND.EQ 0600
CTL.LPT_Product_Complete_Tm = 0600;

ENDIF;

CASE;

// IF CTL.LPT Load Plan Date is not entered
IF CTL.LPT_Load_Plan_Date = *ZERO;

// CTL.LPT Load Plan Date = JOB.*Job date
CTL.LPT_Load_Plan_Date = JOB.*Job_date;

// LCL.LPT Load Plan Date = CTL.LPT Load Plan Date
LCL.LPT_Load_Plan_Date = CTL.LPT_Load_Plan_Date;

ENDIF;

// PAR.LPT Load Plan Date = CTL.LPT Load Plan Date
PAR.LPT_Load_Plan_Date = CTL.LPT_Load_Plan_Date;

// PAR.Company Number = CTL.Company Number
PAR.Company_Number = CTL.Company_Number;

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

EXECUTE FUNCTION(VAL Shipp/Co Whs      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1779386;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


//?Warehouse valid
CASE;

// IF LCL.Warehouse Description is equal to blank
IF LCL.Warehouse_Description = *BLANK;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(CTL.Warehouse_Code);
MSGPARM(CTL.Company_Number);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

ENDIF;

//?item code
CASE;

// IF CTL.Item Code is Entered
IF CTL.Item_Code <> *ZERO;

EXECUTE FUNCTION(Val Comp/Item Exists   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1563428;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Item not found'
ERROR(USR0374);
MSGPARM(CTL.Item_Code);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

ENDIF;

EXECUTE FUNCTION(RTV U/M Primary        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1647610;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.UOM_Primary);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.U/M - Primary is Combos
IF LCL.UOM_Primary = 'CB';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item is not a Combo.'
ERROR(USR4654);
MSGPARM(CTL.Item_Code);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

ENDIF;

//?item code
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item not found'
ERROR(USR0374);
MSGPARM(CTL.Item_Code);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

ENDIF;

CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

// Call program Exc Bld for Ld Cmplt  XF.
CALL PROGRAM(Exc Bld for Ld Cmplt  XF) ('PBKDXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.LPT_Load_Plan_Date);
PARAMETER(CTL.LPT_Product_Complete_Tm);
PARAMETER(CTL.Number_CB_Per_Hour);
PARAMETER(CTL.Number_CB_Per_Load);
PARAMETER(CTL.On_Hand_Inventory);
PARAMETER(LCL.Item_Code_Break_Flag);

// LCL.Number CB Per Load = CTL.Number CB Per Load
LCL.Number_CB_Per_Load = CTL.Number_CB_Per_Load;

// LCL.Number CB Per Hour = CTL.Number CB Per Hour
LCL.Number_CB_Per_Hour = CTL.Number_CB_Per_Hour;

ENDIF;

//?USER: Initialize subfile record from DBF record

CASE;

// IF RCD.LPT Load Plan Date NE CTL.LPT Load Plan Date
IF RCD.LPT_Load_Plan_Date <> CTL.LPT_Load_Plan_Date;

// OR RCD.Company Number NE CTL.Company Number
OR RCD.Company_Number <> CTL.Company_Number;

// OR RCD.Warehouse Code NE CTL.Warehouse Code
OR RCD.Warehouse_Code <> CTL.Warehouse_Code;

// OR RCD.Item Code NE CTL.Item Code
OR RCD.Item_Code <> CTL.Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4=Prompt
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Company_Number);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.LPT Load Plan Date
IF PGM.*Cursor_field = CTL.LPT_Load_Plan_Date;

// Call program Zzz Load Plan Date    SL.
CALL PROGRAM(Zzz Load Plan Date    SL) ('PBBTSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.LPT_Load_Plan_Date);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> CTL.Item Code
IF PGM.*Cursor_field = CTL.Item_Code;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF CTL.Company Number NE PAR.Company Number
IF CTL.Company_Number <> PAR.Company_Number;

// OR CTL.Warehouse Code NE PAR.Warehouse Code
OR CTL.Warehouse_Code <> PAR.Warehouse_Code;

// OR CTL.LPT Load Plan Date NE LCL.LPT Load Plan Date
OR CTL.LPT_Load_Plan_Date <> LCL.LPT_Load_Plan_Date;

// OR CTL.Item Code NE LCL.Item Code
OR CTL.Item_Code <> LCL.Item_Code;

// OR CTL.Number CB Per Hour NE LCL.Number CB Per Hour
OR CTL.Number_CB_Per_Hour <> LCL.Number_CB_Per_Hour;

// OR CTL.Number CB Per Load NE LCL.Number CB Per Load
OR CTL.Number_CB_Per_Load <> LCL.Number_CB_Per_Load;

CASE;

// IF LCL.Item Code NE CTL.Item Code
IF LCL.Item_Code <> CTL.Item_Code;

// LCL.Item Code = CTL.Item Code
LCL.Item_Code = CTL.Item_Code;

// LCL.Item Code Break Flag = CND.Yes
LCL.Item_Code_Break_Flag = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Item Code Break Flag = CND.No
LCL.Item_Code_Break_Flag = *BLANK;

ENDIF;

// LCL.Number CB Per Load = CTL.Number CB Per Load
LCL.Number_CB_Per_Load = CTL.Number_CB_Per_Load;

// LCL.Number CB Per Hour = CTL.Number CB Per Hour
LCL.Number_CB_Per_Hour = CTL.Number_CB_Per_Hour;

// LCL.LPT Load Plan Date = CTL.LPT Load Plan Date
LCL.LPT_Load_Plan_Date = CTL.LPT_Load_Plan_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F10=Inq
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program DSP Ord Inq for Shppng DF.
CALL PROGRAM(DSP Ord Inq for Shppng DF) ('PDRBDFR');

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?F5 refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program zz OrdDtl Sch-Csmd SCH DF.
CALL PROGRAM(zz OrdDtl Sch-Csmd SCH DF) ('PBKMDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.LPT_Load_Plan_Date);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Item_Code);

ENDIF;

