// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POH8DFR
// ?Date: 14.08.2025 Time: 03:37:22
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

//?R12926 DN 05/17/18-Keep Track if Order ABS Freight Rate Changed.
// PAR.Abs Freight Rate Change? = CND.No
PAR.Abs_Freight_Rate_Change = 'N';

SET CURSOR;

//?USER: Initialize subfile control

// CTL.Ship To Customer = PAR.Ship To Customer
CTL.Ship_To_Customer = PAR.Ship_To_Customer;

// CTL.Ship To Name = PAR.Ship To Name
CTL.Ship_To_Name = PAR.Ship_To_Name;

// CTL.Ship To City = PAR.Ship To City
CTL.Ship_To_City = PAR.Ship_To_City;

// CTL.Ship To State Code = PAR.Ship To State Code
CTL.Ship_To_State_Code = PAR.Ship_To_State_Code;

// CTL.Scheduled Ship Date USR = PAR.Scheduled Ship Date
CTL.Scheduled_Ship_Date_USR = PAR.Scheduled_Ship_Date;

// CTL.Actual Ship Date = PAR.Actual Shipped Date
CTL.Actual_Ship_Date = PAR.Actual_Shipped_Date;

// CTL.Customer Purchase Order # = PAR.Customer Purchase Order #
CTL.Customer_Purchase_Order_# = PAR.Customer_Purchase_Order_#;

// CTL.Requested Delivery Date = PAR.Requested Delivery Date
CTL.Requested_Delivery_Date = PAR.Requested_Delivery_Date;

// CTL.Requested Ship Date = PAR.Requested Ship Date
CTL.Requested_Ship_Date = PAR.Requested_Ship_Date;

// Call program Rtv Alpha Value       XF.
CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
PARAMETER(CTL.Company_Number);
PARAMETER('ODPRCTYPRQ');
PARAMETER(PAR.OD_Price_Type_Req_STS_USR);

CASE;

// IF PAR.OD Price Type Req STS USR is yes
IF PAR.OD_Price_Type_Req_STS_USR = 'Y';

EXECUTE FUNCTION(Val Price Type Entry  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1888439;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 CASE;

 // IF DB1.OD Price Type is *NONE
 IF DB1.OD_Price_Type = *BLANK;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Found
IF LCL.Record_Found_OrdDtlUSR = 'Y';

// CTL.Text 1 USR = CON.-Blank Price Type Exists-
CTL.Text_1_USR = '-Blank Price Type Exists-';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Text 1 USR = CON.*BLANK
CTL.Text_1_USR = *BLANK;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Text 1 USR = CON.*BLANK
CTL.Text_1_USR = *BLANK;

ENDIF;

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(CTL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Discounts Exists  XF) TYPE(EXCINTFUN)                      AC2025844;
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Discounts_Exists_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Discounts Exist   RT) TYPE(RTVOBJ) FILE(OMHLREP)           AC2025841;
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Discounts_Exists_USR);
 {
  //?USER: Initialize routine

  // PAR.Discounts Exists USR = CND.No
  PAR.Discounts_Exists_USR = *BLANK;

  //?USER: Process Data record

  CASE;

  // IF DB1.Accrual Type is Discount/Allowance
  IF DB1.Accrual_Type = 'DA';

  EXECUTE FUNCTION(Rtv Discount Exists   RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC2025846;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   CASE;

   // IF PAR.Scheduled Ship Date GE DB1.Period Beginning Date
   IF PAR.Scheduled_Ship_Date >= DB1.Period_Beginning_Date;

   // AND PAR.Scheduled Ship Date LE DB1.Period Ending Date
   AND PAR.Scheduled_Ship_Date <= DB1.Period_Ending_Date;

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.Record Found USR is Record Found
  IF LCL.Record_Found_USR = 'Y';

  // PAR.Discounts Exists USR = CND.Yes
  PAR.Discounts_Exists_USR = 'Y';

  QUIT;

  ENDIF;

  // IF DB1.Accrual Type is Product Discount
  IF DB1.Accrual_Type = 'PD';

  EXECUTE FUNCTION(Rtv Discounts Exist   RT) TYPE(RTVOBJ) FILE(PMD2REP)           AC2025847;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   CASE;

   // IF PAR.Scheduled Ship Date GE DB1.AD Period Beginning Date
   IF PAR.Scheduled_Ship_Date >= DB1.AD_Period_Beginning_Date;

   // AND PAR.Scheduled Ship Date LE DB1.AD Period Ending Date
   AND PAR.Scheduled_Ship_Date <= DB1.AD_Period_Ending_Date;

   //?CHECK: All Customers
   CASE;

   // IF DB1.AD All Customers is yes
   IF DB1.AD_All_Customers = 'Y';

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

   //?CHECK: All Customers
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Discount Exists   RT) TYPE(RTVOBJ) FILE(PNFJREP)           AC2025848;
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(DB1.AD_Program_Number);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(LCL.Record_Found_USR);
   {
    //?USER: Processing if Data record not found

    // PAR.Record Found USR = CND.Record Not Found
    PAR.Record_Found_USR = 'N';

    //?USER: Process Data record

    // PAR.Record Found USR = CND.Record Found
    PAR.Record_Found_USR = 'Y';

   }

   CASE;

   // IF LCL.Record Found USR is Record Found
   IF LCL.Record_Found_USR = 'Y';

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF LCL.Record Found USR is Record Found
  IF LCL.Record_Found_USR = 'Y';

  // PAR.Discounts Exists USR = CND.Yes
  PAR.Discounts_Exists_USR = 'Y';

  QUIT;

  ENDIF;

  ENDIF;

 }

}


CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

EXECUTE FUNCTION(RTV HPB Equiv only   RT) TYPE(RTVOBJ) FILE(PMAMREP)            AC2031845;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.HPB_Equivalence_Value_USR);
PARAMETER(CTL.Price_5_2_USR);
PARAMETER(CTL.OHE_Override_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.HPB Equivalence Value USR is Not Entered
IF CTL.HPB_Equivalence_Value_USR = *ZERO;

// CTL.HPB Equivalence Value USR = CON.1.5
CTL.HPB_Equivalence_Value_USR = 1.5;

ENDIF;

ENDIF;

//?JJH 07/24/2014 E3212  Display Order Date
EXECUTE FUNCTION(Rtv Order Date         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2093523;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R12926 DN 05/16/18-Set ABS Freight Rate & Abs Frt Override Reason.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Org ABS & Reason   RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2149963;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Abs_Frt_Override_Reason);
PARAMETER(CTL.OHE_Orig_ABS_Freight_Rate);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Absorbed Freight Rate 1 = CTL.OHE Orig ABS Freight Rate
CTL.Absorbed_Freight_Rate_1 = CTL.OHE_Orig_ABS_Freight_Rate;

//?Save Before Abs Frt Override Reason.
// LCL.Abs Frt Override Reason = CTL.Abs Frt Override Reason
LCL.Abs_Frt_Override_Reason = CTL.Abs_Frt_Override_Reason;

EXECUTE FUNCTION(Rtv Abs Frt Rate Info RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2150420;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(LCL.Carrier_Code);
PARAMETER(CTL.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Air_Freight_Order);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Save Before Rate.
// LCL.Absorbed Freight Rate 2 = CTL.Absorbed Freight Rate CWT
LCL.Absorbed_Freight_Rate_2 = CTL.Absorbed_Freight_Rate_CWT;

//?If Buyers Truck or Rail, Don't Allow Input for Both Abs Frt Rate & AFO Rsn
CASE;

// IF LCL.Shipping Method is Buyers Truck
IF LCL.Shipping_Method = 'CR'/'CT';

// LCL.Edit/Display Usr = CND.Displayed Only
LCL.Edit_Display_Usr = 'D';

//?If Buyers Truck or Rail, Don't Allow Input for Both Abs Frt Rate & AFO Rsn
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Edit/Display Usr = CND.Edit Allowed
LCL.Edit_Display_Usr = 'E';

ENDIF;

ENDIF;

//?USER: Initialize subfile record from DBF record

// Call program RTV Item Descript.     XF.
CALL PROGRAM(RTV Item Descript.     XF) ('PDNGXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(WRK.Description_Line_Two);

// RCD.Price Overage Overrid USR = DB1.Price Overage Override
RCD.Price_Overage_Overrid_USR = DB1.Price_Overage_Override;

// RCD.Price Method Code USR = DB1.Price Method Code
RCD.Price_Method_Code_USR = DB1.Price_Method_Code;

// RCD.Commodity Market Code USR = DB1.Commodity Market Code
RCD.Commodity_Market_Code_USR = DB1.Commodity_Market_Code;

// RCD.Market Pricing Date USR = DB1.Market Pricing Date
RCD.Market_Pricing_Date_USR = DB1.Market_Pricing_Date;

// RCD.Price Code USR = DB1.Price Code
RCD.Price_Code_USR = DB1.Price_Code;

// RCD.Date Method Code USR = RCD.Date Method Code
RCD.Date_Method_Code_USR = RCD.Date_Method_Code;

// RCD.Date Entered = RCD.Date of Original Entry
RCD.Date_Entered = RCD.Date_of_Original_Entry;

//?PK0519  10/20/03 RMC
// RCD.USR Display 3 = CND.Yes
RCD.USR_Display_3 = 'Y';

//?Control:  Price Override
CASE;

// IF RCD.Price Method Code USR is Deviated
IF RCD.Price_Method_Code_USR = 'DEV';

// RCD.USR Display 3 = CND.No
RCD.USR_Display_3 = 'N';

ENDIF;

// RCD.OD Price Type USR = DB1.OD Price Type
RCD.OD_Price_Type_USR = DB1.OD_Price_Type;

EXECUTE FUNCTION(Rtv Deduct/Add Exist  RT) TYPE(RTVOBJ) FILE(OMHQCPP)           AC1958156;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Deduct_Add_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Deduct/Add Sts USR = CND.blank
 PAR.Deduct_Add_Sts_USR = *BLANK;

 //?USER: Process Data record

 // PAR.Deduct/Add Sts USR = CND.yes
 PAR.Deduct_Add_Sts_USR = 'Y';

 QUIT;

}


//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?7=Display Customer Pricing Details
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program DSP Pricing Details    DF.
CALL PROGRAM(DSP Pricing Details    DF) ('PMMXDFR');
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);

ENDIF;

//?S311930 F8=Freight Rate
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

CASE;

// IF LCL.Shipping Method is Buyers Truck
IF LCL.Shipping_Method = 'CR'/'CT';

// Send error message - 'F8 is not allowed for payment method &1.'
ERROR(USR5529);
MSGPARM(LCL.Shipping_Method);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Absorbed Freight Rate Usr = CTL.Absorbed Freight Rate CWT
LCL.Absorbed_Freight_Rate_Usr = CTL.Absorbed_Freight_Rate_CWT;

// LCL.Abs Frt Override Rsn Usr = CTL.Abs Frt Override Reason
LCL.Abs_Frt_Override_Rsn_Usr = CTL.Abs_Frt_Override_Reason;

// Call program WW Order Maint Freight Rt.
CALL PROGRAM(WW Order Maint Freight Rt) ('PVI6PVR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Absorbed_Freight_Rate_CWT);
PARAMETER(CTL.Abs_Frt_Override_Reason);
PARAMETER(CTL.Absorbed_Freight_Rate_1);
PARAMETER(LCL.Shipping_Method);

CASE;

// IF LCL.Absorbed Freight Rate Usr NE CTL.Absorbed Freight Rate CWT
IF LCL.Absorbed_Freight_Rate_Usr <> CTL.Absorbed_Freight_Rate_CWT;

// Send information message - 'ABS Freight Rate is changed.'
MESSAGE(USR5531 *INFO);

// IF LCL.Abs Frt Override Rsn Usr NE CTL.Abs Frt Override Reason
IF LCL.Abs_Frt_Override_Rsn_Usr <> CTL.Abs_Frt_Override_Reason;

// Send information message - 'ABS Freight Override Reason code is changed.'
MESSAGE(USR5532 *INFO);

ENDIF;

ENDIF;

ENDIF;

//?R12926 DN 05/17/18-Validation for Order ABS Freight Rate & AFO Reason.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Order ABS Freight Rate Cannot Be Zero if Originally Entered.
CASE;

// IF LCL.Absorbed Freight Rate 2 is Entered
IF LCL.Absorbed_Freight_Rate_2 <> *ZERO;

// AND CTL.Absorbed Freight Rate CWT is EQ Zeros
AND CTL.Absorbed_Freight_Rate_CWT = *ZERO;

// Send error message - 'Absorbed Freight Rate cannot be zero.'
ERROR(USR5072);
MSGPARM(CTL.Absorbed_Freight_Rate_CWT);

QUIT;

ENDIF;

//?ABS Frt Override Reason Cannot be Blank if ABS Frt Rate Changed.
CASE;

// IF CTL.Absorbed Freight Rate CWT NE CTL.Absorbed Freight Rate 1
IF CTL.Absorbed_Freight_Rate_CWT <> CTL.Absorbed_Freight_Rate_1;

// AND CTL.Absorbed Freight Rate 1 is Entered
AND CTL.Absorbed_Freight_Rate_1 <> *ZERO;

// AND LCL.Shipping Method is Prepaid
AND LCL.Shipping_Method = 'PR'/'PT';

// AND CTL.Abs Frt Override Reason is Not Entered
AND CTL.Abs_Frt_Override_Reason = *BLANK;

//?S13591 DN 08/16/18-Bypass Error Msg If Orig AFR=0 in OHE & AFR has
//?  NOT been changed.
// Send error message - 'ABS Freight Rate was changed, must select ABS Frt Override Reason.'
ERROR(USR5084);
MSGPARM(CTL.Abs_Frt_Override_Reason);

QUIT;

ENDIF;

//?ABS Frt Override Reason Cannot be Blank if ABS Frt Rate Changed-Scenario 2
CASE;

// IF CTL.Absorbed Freight Rate CWT NE LCL.Absorbed Freight Rate 2
IF CTL.Absorbed_Freight_Rate_CWT <> LCL.Absorbed_Freight_Rate_2;

// AND CTL.Absorbed Freight Rate 1 is EQ Zeros
AND CTL.Absorbed_Freight_Rate_1 = *ZERO;

// AND LCL.Shipping Method is Prepaid
AND LCL.Shipping_Method = 'PR'/'PT';

// AND CTL.Abs Frt Override Reason is Not Entered
AND CTL.Abs_Frt_Override_Reason = *BLANK;

//?This scenario is where the Orig AFR=0 in OHE file but the AFR have
//?changed on the screen.
// Send error message - 'ABS Freight Rate was changed, must select ABS Frt Override Reason.'
ERROR(USR5084);
MSGPARM(CTL.Abs_Frt_Override_Reason);

QUIT;

ENDIF;

ENDIF;

//?If No Errors, Proceed to Update ABS Freight Rate & Abs Frt Override Rsn.
//?R12926 DN 05/17/18-Update OH ABS Frt Rate & OHE Abs Frt Ovr Reason.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Order ABS Freight Rate Changed.
CASE;

// IF CTL.Absorbed Freight Rate CWT is Entered
IF CTL.Absorbed_Freight_Rate_CWT <> *ZERO;

// AND CTL.Absorbed Freight Rate CWT NE LCL.Absorbed Freight Rate 2
AND CTL.Absorbed_Freight_Rate_CWT <> LCL.Absorbed_Freight_Rate_2;

EXECUTE FUNCTION(CHG Abs. Freight Rate  CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1461689;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?Create Load Order Change Log for ABS Freight Rate.
CASE;

// IF CTL.Absorbed Freight Rate CWT NE LCL.Absorbed Freight Rate 2
IF CTL.Absorbed_Freight_Rate_CWT <> LCL.Absorbed_Freight_Rate_2;

// LCL.Load Change Type = CND.Absorbed Freight Rate
LCL.Load_Change_Type = 'ABSRTE';

// LCL.Department Control Code = CND.Traffic Dept
LCL.Department_Control_Code = 'TRF';

//?Format Prior Absorbed Freight Rate with Decimal.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Text USR 5 = CVTVAR(LCL.Absorbed Freight Rate 2)
LCL.Text_USR_5 = CVTVAR(LCL.Absorbed_Freight_Rate_2);

// LCL.USR Text 3  3a = SUBSTRING(LCL.Text USR 5,CON.1,CON.3)
LCL.USR_Text_3_3a = SUBSTRING(LCL.Text_USR_5:1:3);

// LCL.Text 2 = SUBSTRING(LCL.Text USR 5,CON.4,CON.2)
LCL.Text_2 = SUBSTRING(LCL.Text_USR_5:4:2);

// LCL.Absorbed Freight 6A USR = CONCAT(LCL.USR Text 3  3a,CON..,CON.*ZERO)
LCL.Absorbed_Freight_6A_USR = LCL.USR_Text_3_3a + '.' (*ZERO);

// LCL.Absorbed Freight 6A USR = CONCAT(LCL.Absorbed Freight 6A USR,LCL.Text 2,CON.*ZERO)
LCL.Absorbed_Freight_6A_USR = LCL.Absorbed_Freight_6A_USR + LCL.Text_2 (*ZERO);

// LCL.Change Log Prior Value = LCL.Absorbed Freight 6A USR
LCL.Change_Log_Prior_Value = LCL.Absorbed_Freight_6A_USR;

ENDIF;

//?Format New Absorbed Freight Rate with Decimal.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Text USR 5 = CVTVAR(CTL.Absorbed Freight Rate CWT)
LCL.Text_USR_5 = CVTVAR(CTL.Absorbed_Freight_Rate_CWT);

// LCL.USR Text 3  3a = SUBSTRING(LCL.Text USR 5,CON.1,CON.3)
LCL.USR_Text_3_3a = SUBSTRING(LCL.Text_USR_5:1:3);

// LCL.Text 2 = SUBSTRING(LCL.Text USR 5,CON.4,CON.2)
LCL.Text_2 = SUBSTRING(LCL.Text_USR_5:4:2);

// LCL.Absorbed Freight 6A USR = CONCAT(LCL.USR Text 3  3a,CON..,CON.*ZERO)
LCL.Absorbed_Freight_6A_USR = LCL.USR_Text_3_3a + '.' (*ZERO);

// LCL.Absorbed Freight 6A USR = CONCAT(LCL.Absorbed Freight 6A USR,LCL.Text 2,CON.*ZERO)
LCL.Absorbed_Freight_6A_USR = LCL.Absorbed_Freight_6A_USR + LCL.Text_2 (*ZERO);

// LCL.Change Log New Value = LCL.Absorbed Freight 6A USR
LCL.Change_Log_New_Value = LCL.Absorbed_Freight_6A_USR;

ENDIF;

//?Append Abs Frt Override Reason to Last 2 Pos. for Change Log New Value.
CASE;

// IF NOT CTL.Abs Frt Override Reason is Not Entered
IF ! CTL.Abs_Frt_Override_Reason = *BLANK;

// Execute function SET Abs Frt Ovr Rsn    US.
EXECUTE FUNCTION(SET Abs Frt Ovr Rsn    US) TYPE(EXCUSRSRC) ('PUIBUFR');
PARAMETER(CTL.Abs_Frt_Override_Reason);
PARAMETER(LCL.Change_Log_New_Value);
{
 ** APPEND ABS FRT OVERRIDE REASON TO LAST 2 POS.
 C                     MOVE #IHSSC    #OMOTX
}


ENDIF;

CASE;

// IF CTL.Load ID is NE Blank
IF CTL.Load_ID <> *ZERO;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Load_Change_Type);
PARAMETER(LCL.Department_Control_Code);
PARAMETER(LCL.Change_Log_Prior_Value);
PARAMETER(LCL.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(LCL.Carrier_Code);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CRT Load/OrderChg n/ld2XF.
CALL PROGRAM(CRT Load/OrderChg n/ld2XF) ('PUIAXFR');
PARAMETER(CTL.Load_ID);
PARAMETER(LCL.Load_Change_Type);
PARAMETER(LCL.Department_Control_Code);
PARAMETER(LCL.Change_Log_Prior_Value);
PARAMETER(LCL.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);

ENDIF;

ENDIF;

//?Keep Track of Last Changed ABS Freight Rate.
// LCL.Absorbed Freight Rate 2 = CTL.Absorbed Freight Rate CWT
LCL.Absorbed_Freight_Rate_2 = CTL.Absorbed_Freight_Rate_CWT;

// PAR.Abs Freight Rate Change? = CND.Yes
PAR.Abs_Freight_Rate_Change = 'Y';

ENDIF;

//?ABS Freight Override Reason Changed.
CASE;

// IF CTL.Abs Frt Override Reason NE LCL.Abs Frt Override Reason
IF CTL.Abs_Frt_Override_Reason <> LCL.Abs_Frt_Override_Reason;

EXECUTE FUNCTION(CHG Abs Rte Ovrrd Rsn  CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2150582;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Abs_Frt_Override_Reason);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

 // DB1.Job Name = JOB.*PROGRAM
 DB1.Job_Name = JOB.*PROGRAM;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

}


//?Keep Track of Last Changed Abs Frt Override Reason.
// LCL.Abs Frt Override Reason = CTL.Abs Frt Override Reason
LCL.Abs_Frt_Override_Reason = CTL.Abs_Frt_Override_Reason;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?F4                 PK0519A  10/30/03
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Price Code
CASE;

// IF PGM.*Cursor field <IS> RCD.Price Code USR
IF PGM.*Cursor_field = RCD.Price_Code_USR;

// LCL.Price Code = CON.*ZERO
LCL.Price_Code = *ZERO;

// Call program Sel Customer Prc Hdr  SL.
CALL PROGRAM(Sel Customer Prc Hdr  SL) ('POPOSRR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Price_Code);

CASE;

// IF LCL.Price Code is Entered
IF LCL.Price_Code > *ZERO;

// RCD.Price Code USR = LCL.Price Code
RCD.Price_Code_USR = LCL.Price_Code;

ENDIF;

ENDIF;

//?Date Method Code
CASE;

// IF PGM.*Cursor field <IS> RCD.Date Method Code USR
IF PGM.*Cursor_field = RCD.Date_Method_Code_USR;

// Call program SEL OMS Mkt Date Only  SR.
CALL PROGRAM(SEL OMS Mkt Date Only  SR) ('PDZZSRR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Date_Method_Code_USR);
PARAMETER(NLL.Date_Method_Description);

ENDIF;

//?Commodity Market Code
CASE;

// IF PGM.*Cursor field <IS> RCD.Commodity Market Code USR
IF PGM.*Cursor_field = RCD.Commodity_Market_Code_USR;

// Call program SEL Commod. Mkts Actve SR.
CALL PROGRAM(SEL Commod. Mkts Actve SR) ('PDEDSRR');
PARAMETER(RCD.Commodity_Market_Code_USR);

ENDIF;

//?Price Method USR
CASE;

// IF PGM.*Cursor field <IS> RCD.Price Method Code USR
IF PGM.*Cursor_field = RCD.Price_Method_Code_USR;

// Call program SEL OMS System Only    SR.
CALL PROGRAM(SEL OMS System Only    SR) ('PDZSSRR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Price_Method_Code_USR);

ENDIF;

ENDIF;

//?Display Pricing Details
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program DSP Ship Price Details DF.
CALL PROGRAM(DSP Ship Price Details DF) ('PDM4DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Contract_Number);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Pricing_Date_Used);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.Order_Desc_Line_One);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Audit_Reason_Code);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Quantity_Shipped_Total);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?7=Edit Pricing Details
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Edt OrdDtl Pricing    ER.
CALL PROGRAM(Edt OrdDtl Pricing    ER) ('PNQBE1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

CASE;

// IF CTL.Header Status is Avail/Alloc/Enter/Hold
IF CTL.Header_Status = 'L'/'A'/'E'/'H';

// Call program EDT Post Open Orders   XF.
CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(CTL.Order_Value_Total);
PARAMETER(CTL.Order_Weight_Total);
PARAMETER('PM');

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CLC Price/Price Audit  XF.
CALL PROGRAM(CLC Price/Price Audit  XF) ('PDPRXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('PM');
PARAMETER(WRK.Order_Value_Total);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(WRK.Production_Hold);
PARAMETER(*NO);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?9=Edit Deduction/Addition
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Edt Ord Dtl Accr      EF.
CALL PROGRAM(Edt Ord Dtl Accr      EF) ('PNL9EFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(CTL.Ship_To_City);
PARAMETER(CTL.Ship_To_State_Code);
PARAMETER(PAR.Shipping_Method);
PARAMETER(PAR.Billing_Activity_Type);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?R12926 DN 05/17/18-Added c9 to Check Order ABS Freight Rate was Changed.
//?INPUT CHANGE: Price Override; Price Method; Price Code; etc
CASE;

// IF RCD.Price Overage Overrid USR NE RCD.Price Overage Override
IF RCD.Price_Overage_Overrid_USR <> RCD.Price_Overage_Override;

// OR RCD.Price Method Code USR NE RCD.Price Method Code
OR RCD.Price_Method_Code_USR <> RCD.Price_Method_Code;

// OR RCD.Commodity Market Code USR NE RCD.Commodity Market Code
OR RCD.Commodity_Market_Code_USR <> RCD.Commodity_Market_Code;

// OR RCD.Price Code NE RCD.Price Code USR
OR RCD.Price_Code <> RCD.Price_Code_USR;

// OR RCD.OD Price Type NE RCD.OD SD Price Method USR
OR RCD.OD_Price_Type <> RCD.OD_Price_Type_USR;

// OR RCD.Market Pricing Date NE RCD.Market Pricing Date USR
OR RCD.Market_Pricing_Date <> RCD.Market_Pricing_Date_USR;

// OR RCD.Date Method Code USR NE RCD.Date Method Code
OR RCD.Date_Method_Code_USR <> RCD.Date_Method_Code;

// OR RCD.Date Entered NE RCD.Date of Original Entry
OR RCD.Date_Entered <> RCD.Date_of_Original_Entry;

// OR PAR.Abs Freight Rate Change? is Yes
OR PAR.Abs_Freight_Rate_Change = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?*-------------------------- Validation ------------------------ *
//?R12926 DN 05/17/18-At Order level, use Absorbed Freight Rate from OH.
EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Val Manual Price      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1581694;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?*** VAL: Price Method Code
EXECUTE FUNCTION(RTV Prc Mth Typ/Prc TyRT) TYPE(RTVOBJ) FILE(PDIHREP)           AC1989095;
PARAMETER(RCD.Price_Method_Code_USR);
PARAMETER(LCL.Price_Method_Type);
PARAMETER(LCL.PMH_Price_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// WRK.Error Status = CND.no
WRK.Error_Status = 'N';

//?R12926 DN 05/17/18-At Order level, use Absorbed Freight Rate from OH.
EXECUTE FUNCTION(Edt OD Pricing Validt IF) TYPE(EXCINTFUN)                      AC1994988;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Market_Pricing_Date_USR);
PARAMETER(RCD.Commodity_Market_Code_USR);
PARAMETER(RCD.Date_Method_Code_USR);
PARAMETER(RCD.Price_Method_Code_USR);
PARAMETER(RCD.Price_Overage_Overrid_USR);
PARAMETER(RCD.U_M_Base_Price);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Weight_Ordered);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Weight_Ordered_U_M);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Price_Code_USR);
PARAMETER(RCD.OD_Ceiling_Price);
PARAMETER(RCD.OD_Market_Begin_Date);
PARAMETER(RCD.OD_Market_Ending_Date);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Primal_Group_Code);
PARAMETER(CTL.Absorbed_Freight_Rate_CWT);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(LCL.USR_Display_4);
PARAMETER(WRK.Error_Status);
{
 //?Execute internal function

 // PAR.Unit Price - Credit = CON.*ZERO
 PAR.Unit_Price_Credit = *ZERO;

 // Call program RTV PrcMthTyp/PrcTyp  XF.
 CALL PROGRAM(RTV PrcMthTyp/PrcTyp  XF) ('PNS7XFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(LCL.Price_Method_Type);
 PARAMETER(LCL.PMH_Price_Type);

 // Call program Rtv Market Dtls OrEnt XF.
 CALL PROGRAM(Rtv Market Dtls OrEnt XF) ('PNS1XFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Market_Prem_Ded);
 PARAMETER(LCL.Record_Found_USR);

 // PAR.USR Display 4 = CND.No
 PAR.USR_Display_4 = 'N';

 //?LCL.Commodity Price Group & LCL.Market Overage
 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 // LCL.Market Overage = LCL.Market Prem/Ded
 LCL.Market_Overage = LCL.Market_Prem_Ded;

 //?LCL.Commodity Price Group & LCL.Market Overage
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Commodity Price Group = PAR.Commodity Price Group
 LCL.Commodity_Price_Group = PAR.Commodity_Price_Group;

 // LCL.Market Overage = PAR.Market Overage
 LCL.Market_Overage = PAR.Market_Overage;

 ENDIF;

 //?VAL: Price Method Code
 CASE;

 // IF PAR.Price Method Code is Blank
 IF PAR.Price_Method_Code = *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Value Required.'
 ERROR(USR2808);
 MSGPARM(PAR.Price_Method_Code);

 ENDIF;

 //?VAL: Price Code
 CASE;

 // IF PAR.Price Code is Entered
 IF PAR.Price_Code > *ZERO;

 //?VAL: Price Code
 CASE;

 // IF LCL.Price Method Type is Not Contract
 IF LCL.Price_Method_Type = 'X'/'F'/'M'/'K';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price code invalid for Pricing Method &2. Price Code must be zero,'
 ERROR(USR4338);
 MSGPARM(PAR.Price_Code);
 MSGPARM(PAR.Price_Method_Code);

 CASE;

 // IF PAR.USR Display 4 is No
 IF PAR.USR_Display_4 = 'N';

 // PAR.USR Display 4 = CND.Yes
 PAR.USR_Display_4 = 'Y';

 ENDIF;

 //?VAL: Price Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Rtv Cust Prc Str/End  XF.
 CALL PROGRAM(Rtv Cust Prc Str/End  XF) ('PNTAXFR');
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Price_Code);
 PARAMETER(LCL.Price_Start_Date);
 PARAMETER(LCL.Price_End_Date);

 CASE;

 // IF LCL.Price Start Date is Not Entered
 IF LCL.Price_Start_Date = *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price Code &1 not found for customer or invalid date range.'
 ERROR(USR3318);
 MSGPARM(PAR.Price_Code);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?VAL: Contract Start & End Date
 CASE;

 // IF PAR.Scheduled Ship Date LT LCL.Price Start Date
 IF PAR.Scheduled_Ship_Date < LCL.Price_Start_Date;

 // OR PAR.Scheduled Ship Date GT LCL.Price End Date
 OR PAR.Scheduled_Ship_Date > LCL.Price_End_Date;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price Code &1 not valid because of start/end dates.'
 ERROR(USR3317);
 MSGPARM(PAR.Price_Code);

 ENDIF;

 // Call program Rtv Max Wt and price  XF.
 CALL PROGRAM(Rtv Max Wt and price  XF) ('PNTBXFR');
 PARAMETER(PGM.*Return_code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Price_Code);
 PARAMETER(PAR.Item_Code);
 PARAMETER(LCL.Maximum_Contract_Units);
 PARAMETER(LCL.Customer_Price_UM_Prc);
 PARAMETER(LCL.Commodity_Market_Code_USR);
 PARAMETER(LCL.Price_Method_Code_USR);
 PARAMETER(LCL.Date_Method_Code_USR);
 PARAMETER(LCL.Contract_Unit_Type);

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price Code &1 not found for Item &2'
 ERROR(USR3319);
 MSGPARM(PAR.Price_Code);
 MSGPARM(PAR.Item_Code);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Sum weights shipped/ordered for ship to /price code
 EXECUTE FUNCTION(Clc Sum Ship/Ord Unit IF) TYPE(EXCINTFUN)                      AC1829994;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(PAR.Price_Method_Code);
 PARAMETER(PAR.Price_Overage_Override);
 PARAMETER(PAR.U_M_Base_Price);
 PARAMETER(PAR.Quantity_Ordered);
 PARAMETER(PAR.Unit_Weight_Ordered_U_M);
 PARAMETER(PAR.Price_Code);
 PARAMETER(PAR.OD_Ceiling_Price);
 PARAMETER(PAR.Error_Status);
 PARAMETER(LCL.Price_Method_Type);
 PARAMETER(LCL.PMH_Price_Type);
 {
  //?Execute internal function

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  // LCL.Weight Ordered = PAR.Quantity Ordered * PAR.Unit Weight Ordered U/M *
  LCL.Weight_Ordered = PAR.Quantity_Ordered * PAR.Unit_Weight_Ordered_U_M;

  // Call program CLC Sum Ship/Ord Unit XF.
  CALL PROGRAM(CLC Sum Ship/Ord Unit XF) ('PPA6XFR');
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Price_Code);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Total_Weight_Ordered_USR);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Total_Quantity_Ordered);

  // PAR.Total Weight Ordered USR = PAR.Total Weight Ordered USR + LCL.Weight Ordered
  PAR.Total_Weight_Ordered_USR = PAR.Total_Weight_Ordered_USR + LCL.Weight_Ordered;

  // PAR.Total Quantity Ordered = PAR.Total Quantity Ordered + PAR.Quantity Ordered
  PAR.Total_Quantity_Ordered = PAR.Total_Quantity_Ordered + PAR.Quantity_Ordered;

  //?5/13/10 SAZ P205-Add parm for Max Unit Type;rtv Contract Unit Type
  // Call program Rtv Cust Prc hdr/dtl  XF.
  CALL PROGRAM(Rtv Cust Prc hdr/dtl  XF) ('PPA7XFR');
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Price_Code);
  PARAMETER(WRK.Price_Start_Date);
  PARAMETER(WRK.Price_End_Date);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Maximum_Contract_Units);
  PARAMETER(PAR.Customer_Price_UM_Prc);
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(LCL.Price_Method_Code);
  PARAMETER(PAR.Date_Method_Code);
  PARAMETER(PAR.Contract_Unit_Type);

  // PAR.Price Method Code = LCL.Price Method Code
  PAR.Price_Method_Code = LCL.Price_Method_Code;

  EXECUTE FUNCTION(RTV PrcMthTyp/PrcTyp  RT) TYPE(RTVOBJ) FILE(PDIHREP)           AC1997170;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Price_Method_Code);
  PARAMETER(PAR.Price_Method_Type);
  PARAMETER(PAR.PMH_Price_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?5/13/10 SAZ P205-Use Contract Unit Type to check Qty or Weight-Lbs
  //?Use Contract Unit Type to check Qty or Weight-Lbs
  //?VAL: Total Weight and Quantity w/Maximum
  CASE;

  // IF PAR.Contract Unit Type is Weight-LB
  IF PAR.Contract_Unit_Type = 'W';

  CASE;

  // IF PAR.Total Weight Ordered USR GT PAR.Maximum Contract Units
  IF PAR.Total_Weight_Ordered_USR > PAR.Maximum_Contract_Units;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  // LCL.Weight Allocated USR = PAR.Total Weight Ordered USR - PAR.Maximum Contract Units
  LCL.Weight_Allocated_USR = PAR.Total_Weight_Ordered_USR - PAR.Maximum_Contract_Units;

  // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
  ERROR(USR3320);
  MSGPARM(PAR.Price_Code);
  MSGPARM(LCL.Weight_Allocated_USR);
  MSGPARM(PAR.Maximum_Contract_Units);
  MSGPARM(PAR.Item_Code);

  ENDIF;

  //?VAL: Total Weight and Quantity w/Maximum
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If Contract Unit type = Quantity
  CASE;

  // IF PAR.Total Quantity Ordered GT PAR.Maximum Contract Units
  IF PAR.Total_Quantity_Ordered > PAR.Maximum_Contract_Units;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  // LCL.Weight Allocated USR = PAR.Total Quantity Ordered - PAR.Maximum Contract Units
  LCL.Weight_Allocated_USR = PAR.Total_Quantity_Ordered - PAR.Maximum_Contract_Units;

  // Send error message - 'Max Units &3 for Item &4/Price Code &1 exceeded by &2.'
  ERROR(USR3320);
  MSGPARM(PAR.Price_Code);
  MSGPARM(LCL.Weight_Allocated_USR);
  MSGPARM(PAR.Maximum_Contract_Units);
  MSGPARM(PAR.Item_Code);

  ENDIF;

  ENDIF;

  //?Original code
  //?OUT: No Errors
  CASE;

  // IF PAR.Error Status is no
  IF PAR.Error_Status = 'N';

  // PAR.Price Overage Override = PAR.Customer Price /UM Prc
  PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

  CASE;

  // IF PAR.PMH Price Type is Invoice Price
  IF PAR.PMH_Price_Type = 'I';

  // PAR.Price Overage Override = PAR.Customer Price /UM Prc
  PAR.Price_Overage_Override = PAR.Customer_Price_UM_Prc;

  // PAR.OD Ceiling Price = CON.*ZERO
  PAR.OD_Ceiling_Price = *ZERO;

  // IF PAR.PMH Price Type is Ceiling Price
  IF PAR.PMH_Price_Type = 'C';

  // PAR.Price Overage Override = CON.*ZERO
  PAR.Price_Overage_Override = *ZERO;

  // PAR.OD Ceiling Price = PAR.Customer Price /UM Prc
  PAR.OD_Ceiling_Price = PAR.Customer_Price_UM_Prc;

  ENDIF;

  ENDIF;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?VAL: Price Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?VAL: Price Code Required
 CASE;

 // IF LCL.Price Method Type is Contract Pricing
 IF LCL.Price_Method_Type = 'Q';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price code required for Pricing Method &2'
 ERROR(USR3316);
 MSGPARM(PAR.Price_Code);
 MSGPARM(PAR.Price_Method_Code);

 CASE;

 // IF PAR.USR Display 4 is No
 IF PAR.USR_Display_4 = 'N';

 // PAR.USR Display 4 = CND.Yes
 PAR.USR_Display_4 = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?VAL: Market Price Date/Range
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // AND PAR.OD Market Begin Date is Entered
 AND ( PAR.OD_Market_Begin_Date <> *ZERO;

 // OR PAR.OD Market Ending Date is Entered
 OR PAR.OD_Market_Ending_Date <> *ZERO );

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'A Market Pricing Date or Market Price Date Range may be entered; not both.
 ERROR(USR4331);
 MSGPARM(PAR.Market_Pricing_Date);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);

 //?VAL: Market Price Date/Range
 // IF PAR.OD Market Begin Date GT PAR.OD Market Ending Date
 IF PAR.OD_Market_Begin_Date > PAR.OD_Market_Ending_Date;

 CASE;

 // IF PAR.OD Market Ending Date is not entered
 IF PAR.OD_Market_Ending_Date = *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Price Date Range Invalid'
 ERROR(USR4332);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);

 ENDIF;

 ENDIF;

 //?VAL: Price Method Type = Published
 CASE;

 // IF LCL.Price Method Type is Published Pricing
 IF LCL.Price_Method_Type = 'P';

 //?VAL: Price Overage Override
 CASE;

 // IF PAR.Price Overage Override is Not Zeros
 IF PAR.Price_Overage_Override <> *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price Override not allowed with Price Method chosen'
 ERROR(USR1807);
 MSGPARM(PAR.Price_Overage_Override);

 ENDIF;

 // PAR.Commodity Market Code = CND.Seaboard
 PAR.Commodity_Market_Code = 'SBD';

 //?VAL: Date Method Code
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Date Meth Code not allowed for Price Method chosen'
 ERROR(USR1808);
 MSGPARM(PAR.Date_Method_Code);

 ENDIF;

 //?VAL: Ceiling Price
 CASE;

 // IF PAR.OD Ceiling Price is Not Zeros
 IF PAR.OD_Ceiling_Price <> *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send information message - 'Ceiling Price invalid for Pricing Method. Changed Ceiling Price to Z
 MESSAGE(USR4333 *INFO);
 MSGPARM(PAR.OD_Ceiling_Price);

 ENDIF;

 //?VAL: Market Date or Date Range
 CASE;

 // IF PAR.OD Market Begin Date is Entered
 IF PAR.OD_Market_Begin_Date <> *ZERO;

 // OR PAR.OD Market Ending Date is Entered
 OR PAR.OD_Market_Ending_Date <> *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Pricing Date Range must be zero for Pricing Method &3.'
 ERROR(USR4344);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);
 MSGPARM(PAR.Price_Method_Code);

 ENDIF;

 ENDIF;

 //?VAL: Price Method Type = Manual/Extended
 CASE;

 // IF LCL.Price Method Type is Manual Pricing
 IF LCL.Price_Method_Type = 'M';

 // OR LCL.Price Method Type is Extended Pricing
 OR LCL.Price_Method_Type = 'X';

 //?VAL: Price Overage Override for Price Method Type=Extended
 CASE;

 // IF PAR.Price Overage Override is Equal zero
 IF PAR.Price_Overage_Override = *ZERO;

 // AND LCL.Price Method Type is Extended Pricing
 AND LCL.Price_Method_Type = 'X';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price Override required for price method'
 ERROR(USR1805);
 MSGPARM(PAR.Price_Overage_Override);

 ENDIF;

 //?VAL: Commodity Market Code
 CASE;

 // IF PAR.Commodity Market Code is Entered
 IF PAR.Commodity_Market_Code <> *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Code not allowed for Price Method chosen'
 ERROR(USR1809);
 MSGPARM(PAR.Commodity_Market_Code);

 ENDIF;

 //?VAL: Date Method Code
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Date Meth Code not allowed for Price Method chosen'
 ERROR(USR1808);
 MSGPARM(PAR.Date_Method_Code);

 ENDIF;

 //?VAL: Ceiling Price
 CASE;

 // IF PAR.OD Ceiling Price is Not Zeros
 IF PAR.OD_Ceiling_Price <> *ZERO;

 // Send information message - 'Ceiling Price invalid for Pricing Method. Changed Ceiling Price to Z
 MESSAGE(USR4333 *INFO);
 MSGPARM(PAR.OD_Ceiling_Price);

 // PAR.OD Ceiling Price = CON.*ZERO
 PAR.OD_Ceiling_Price = *ZERO;

 ENDIF;

 //?VAL: Market Date or Date Range
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // OR PAR.OD Market Begin Date is Entered
 OR PAR.OD_Market_Begin_Date <> *ZERO;

 // OR PAR.OD Market Ending Date is Entered
 OR PAR.OD_Market_Ending_Date <> *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Price Date or Market Pricing Date Range must be zero for Pricing Me
 ERROR(USR4339);
 MSGPARM(PAR.Market_Pricing_Date);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);
 MSGPARM(PAR.Price_Method_Code);

 ENDIF;

 //?VAL: Manual Pricing
 CASE;

 // IF LCL.Price Method Type is Manual Pricing
 IF LCL.Price_Method_Type = 'M';

 //?VAL: Manual Price Range
 CASE;

 // IF PAR.Billing Activity Type is Not Warehouse Transfer
 IF PAR.Billing_Activity_Type = '2'/'3'/'1';

 CASE;

 // IF PAR.Primal Group Code is NE Samples or Cut Loss
 IF PAR.Primal_Group_Code <> 'UNID';

 //?RMC S14013 remove chk for type n= Promo/Samples- we want them validated
 EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Price_Overage_Override);
 PARAMETER(LCL.Commodity_Price_Group);
 PARAMETER(LCL.Projected_Market_Price);
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(LCL.Market_Overage);
 PARAMETER(LCL.Error_Status_3);
 PARAMETER(LCL.Minimum_Price_USR);
 PARAMETER(LCL.Maximum_Price_USR);
 PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
 {
  //?Execute internal function

  //?*---------------------------------------------------------------*
  //?Documentation:
  //?This internal function will determine if a manual price entered
  //?on an order detail line is within the Manual Pricing Acceptance
  //?Percentage from the Company Control file. If it does not fall
  //?within the percentage range then the market price will be used.
  //?If no market price is found then it is a manual price error
  //?*---------------------------------------------------------------*
  // PAR.Projected Market Price = CON.*ZERO
  PAR.Projected_Market_Price = *ZERO;

  // PAR.Minimum Price   USR = CON.*ZERO
  PAR.Minimum_Price_USR = *ZERO;

  // PAR.Maximum Price  USR = CON.*ZERO
  PAR.Maximum_Price_USR = *ZERO;

  // PAR.Error Status  3 = CND.Yes
  PAR.Error_Status_3 = 'Y';

  EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Manual_Price_Accept_Prcnt);
  PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Food Service and Co-Pack Items
  CASE;

  // IF PAR.Default Commod Mark basis is Food Service
  IF PAR.Default_Commod_Mark_basis = 'FSV';

  // OR PAR.Default Commod Mark basis is Co-Pack
  OR PAR.Default_Commod_Mark_basis = 'CPK';

  // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
  PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

  ENDIF;

  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Commodity_Market_Code);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(9999999);
  PARAMETER(PAR.Projected_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  // Projected Market Price
  PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
  + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

  //?If a market price is found for co/cust market code default
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // Minimum price allowed
  PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
  * PAR.Projected_Market_Price 'H';

  // Maximum price allowed
  PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
  * PAR.Projected_Market_Price 'H';

  //?If the Price Override is within the range then error status is no
  CASE;

  // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
  IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

  // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
  AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

  // PAR.Error Status  3 = CND.No
  PAR.Error_Status_3 = 'N';

  ENDIF;

  //?If a market price is found for co/cust market code default
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If no price for co/cust market code then use co/item market code
  EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
  PARAMETER(PAR.Default_Commod_Mark_basis);
  PARAMETER(PAR.Commodity_Price_Group);
  PARAMETER(9999999);
  PARAMETER(PAR.Projected_Market_Price);
  PARAMETER(WRK.USR_Date_Priced);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Commodity Market Price = DB1.Commodity Market Price
   PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

   // PAR.USR Date Priced = DB1.Market Price Date
   PAR.USR_Date_Priced = DB1.Market_Price_Date;

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // Minimum price allowed
  PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
  * PAR.Projected_Market_Price 'H';

  // Maximum price allowed
  PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
  * PAR.Projected_Market_Price 'H';

  //?If the Price Override is within the range then error status is no
  CASE;

  // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
  IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

  // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
  AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

  // PAR.Error Status  3 = CND.No
  PAR.Error_Status_3 = 'N';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Projected Market Price = CON.*ZERO
  PAR.Projected_Market_Price = *ZERO;

  ENDIF;

  ENDIF;

 }

 // PAR.Unit Price - Credit = LCL.Projected Market Price
 PAR.Unit_Price_Credit = LCL.Projected_Market_Price;

 ENDIF;

 CASE;

 // IF LCL.Error Status  3 is Yes
 IF LCL.Error_Status_3 = 'Y';

 CASE;

 // IF LCL.Projected Market Price is Not Zeros
 IF LCL.Projected_Market_Price <> *ZERO;

 // Send information message - 'Price Override not within valid range, Market Price will be defaulte
 MESSAGE(USR2351 *INFO);
 MSGPARM(PAR.Price_Overage_Override);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'No price found for market &2 and group &3. Price out of range.'
 ERROR(USR2353);
 MSGPARM(PAR.Price_Overage_Override);
 MSGPARM(PAR.Commodity_Market_Code);
 MSGPARM(PAR.Commodity_Price_Group);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?VAL: Price Method Type = Contract
 CASE;

 // IF LCL.Price Method Type is Contract Pricing
 IF LCL.Price_Method_Type = 'Q';

 //?VAL: Commodity Market Code
 CASE;

 // IF PAR.Commodity Market Code is Entered
 IF PAR.Commodity_Market_Code <> *BLANK;

 // AND LCL.PMH Price Type is Invoice Price
 AND LCL.PMH_Price_Type = 'I';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Code not allowed for Price Method chosen'
 ERROR(USR1809);
 MSGPARM(PAR.Commodity_Market_Code);

 ENDIF;

 //?VAL: Date Method Code
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 // AND LCL.PMH Price Type is Invoice Price
 AND LCL.PMH_Price_Type = 'I';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Date Meth Code not allowed for Price Method chosen'
 ERROR(USR1808);
 MSGPARM(PAR.Date_Method_Code);

 ENDIF;

 //?VAL: Ceiling Price
 CASE;

 // IF LCL.PMH Price Type is Invoice Price
 IF LCL.PMH_Price_Type = 'I';

 //?ERR: Ceiling Price not allowed
 CASE;

 // IF PAR.OD Ceiling Price is Not Zeros
 IF PAR.OD_Ceiling_Price <> *ZERO;

 // Send information message - 'Ceiling Price invalid for Pricing Method. Changed Ceiling Price to Z
 MESSAGE(USR4333 *INFO);
 MSGPARM(PAR.OD_Ceiling_Price);

 // PAR.OD Ceiling Price = CON.*ZERO
 PAR.OD_Ceiling_Price = *ZERO;

 ENDIF;

 //?VAL: Ceiling Price
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?ERR: Ceiling Price Required
 CASE;

 // IF PAR.OD Ceiling Price is Equal zero
 IF PAR.OD_Ceiling_Price = *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Ceiling Price is required for Pricing Method.'
 ERROR(USR4340);
 MSGPARM(PAR.OD_Ceiling_Price);

 ENDIF;

 // PAR.Unit Price - Credit = PAR.OD Ceiling Price
 PAR.Unit_Price_Credit = PAR.OD_Ceiling_Price;

 ENDIF;

 //?VAL: Market Date or Date Range
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // OR PAR.OD Market Begin Date is Entered
 OR PAR.OD_Market_Begin_Date <> *ZERO;

 // OR PAR.OD Market Ending Date is Entered
 OR PAR.OD_Market_Ending_Date <> *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Price Date or Market Pricing Date Range must be zero for Pricing Me
 ERROR(USR4339);
 MSGPARM(PAR.Market_Pricing_Date);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);
 MSGPARM(PAR.Price_Method_Code);

 ENDIF;

 ENDIF;

 //?VAL: Price Method Type = Market/Formula
 CASE;

 // IF LCL.Price Method Type is Market or Formula
 IF LCL.Price_Method_Type = 'F'/'K';

 //?VAL: Price Overage Override
 CASE;

 // IF PAR.Price Overage Override is Not Zeros
 IF PAR.Price_Overage_Override <> *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Price Override not allowed with Price Method chosen'
 ERROR(USR1807);
 MSGPARM(PAR.Price_Overage_Override);

 ENDIF;

 //?VAL: Commodity Market Code
 CASE;

 // IF PAR.Commodity Market Code is Not Entered
 IF PAR.Commodity_Market_Code = *BLANK;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Code must be entered for Price method chosen.'
 ERROR(USR1750);
 MSGPARM(PAR.Commodity_Market_Code);

 ENDIF;

 //?VAL: Date Method Code
 CASE;

 // IF PAR.Date Method Code is Entered
 IF PAR.Date_Method_Code <> *BLANK;

 EXECUTE FUNCTION(VAL Date Method Exists RT) TYPE(RTVOBJ) FILE(PDIPREP)          AC1365305;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Date_Method_Code);
 PARAMETER(NLL.Date_Method_Description);
 PARAMETER('O');
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?ERR: Date Method Code Invalid
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Date Method is invalid.'
 ERROR(USR2161);
 MSGPARM(PAR.Date_Method_Code);

 ENDIF;

 ENDIF;

 //?ERR: Date Method Entered & Market Price Date/Range Entered
 CASE;

 // IF PAR.Date Method Code is Entered
 IF ( PAR.Date_Method_Code <> *BLANK;

 // AND PAR.Market Pricing Date is NE Zero
 AND PAR.Market_Pricing_Date <> *ZERO );

 // OR PAR.Date Method Code is Entered
 OR ( PAR.Date_Method_Code <> *BLANK;

 // AND PAR.OD Market Begin Date is Entered
 AND PAR.OD_Market_Begin_Date <> *ZERO;

 // AND PAR.OD Market Ending Date is Entered
 AND PAR.OD_Market_Ending_Date <> *ZERO );

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Date Method and Market Price Date or Range are not allowed.'
 ERROR(USR2097);
 MSGPARM(PAR.Market_Pricing_Date);
 MSGPARM(PAR.Date_Method_Code);

 ENDIF;

 //?ERR: Date Method = Blank and Market Price Date/Rage = Zero
 CASE;

 // IF PAR.Date Method Code is Not Entered
 IF PAR.Date_Method_Code = *BLANK;

 // AND PAR.Market Pricing Date is EQ Zero
 AND PAR.Market_Pricing_Date = *ZERO;

 // AND PAR.OD Market Begin Date is not entered
 AND PAR.OD_Market_Begin_Date = *ZERO;

 // AND PAR.OD Market Ending Date is not entered
 AND PAR.OD_Market_Ending_Date = *ZERO;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Date Method is invalid.'
 ERROR(USR2161);
 MSGPARM(PAR.Date_Method_Code);

 ENDIF;

 //?ERR: Market Price Date & Market Price Date Range Entered
 CASE;

 // IF PAR.Market Pricing Date is NE Zero
 IF PAR.Market_Pricing_Date <> *ZERO;

 // AND PAR.OD Market Begin Date is Entered
 AND ( PAR.OD_Market_Begin_Date <> *ZERO;

 // OR PAR.OD Market Ending Date is Entered
 OR PAR.OD_Market_Ending_Date <> *ZERO );

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'A Market Pricing Date or Market Price Date Range may be entered; not both.
 ERROR(USR4331);
 MSGPARM(PAR.Market_Pricing_Date);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);

 ENDIF;

 //?ERR: Market Price Begin Date > Market Price Ending Date
 CASE;

 // IF PAR.OD Market Begin Date GT PAR.OD Market Ending Date
 IF PAR.OD_Market_Begin_Date > PAR.OD_Market_Ending_Date;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'Market Price Date Range Invalid'
 ERROR(USR4332);
 MSGPARM(PAR.OD_Market_Begin_Date);
 MSGPARM(PAR.OD_Market_Ending_Date);

 ENDIF;

 EXECUTE FUNCTION(VAL Market Cd & Group  RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1414484;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(LCL.Commodity_Price_Group);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

 }

 //?VAL: Commodity Market Price Exists
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 CASE;

 // IF PAR.Commodity Market Code NE PAR.Default Commod Mark basis
 IF PAR.Commodity_Market_Code <> PAR.Default_Commod_Mark_basis;

 EXECUTE FUNCTION(VAL Market Cd & Group  RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1414484;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(LCL.Commodity_Price_Group);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

 }

 //?Use Company Item
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'No price can be found for market code &1 and group code &2.'
 ERROR(USR2349);
 MSGPARM(PAR.Commodity_Market_Code);
 MSGPARM(LCL.Commodity_Price_Group);

 //?Use Company Item
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'No price found for market &1 and group &2, so market &3 will be used
 MESSAGE(USR2350 *INFO);
 MSGPARM(PAR.Commodity_Market_Code);
 MSGPARM(LCL.Commodity_Price_Group);
 MSGPARM(PAR.Default_Commod_Mark_basis);

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 // Send error message - 'No price can be found for market code &1 and group code &2.'
 ERROR(USR2349);
 MSGPARM(PAR.Commodity_Market_Code);
 MSGPARM(LCL.Commodity_Price_Group);

 ENDIF;

 ENDIF;

 ENDIF;

}


//?*---------------------------------------------------------------*
//?VAL: Signal Demand Price Method Required
CASE;

// IF PAR.SD Price Type Req STS USR is yes
IF PAR.OD_Price_Type_Req_STS_USR = 'Y';

// AND PAR.Order Type - Sales is Regular Order
AND PAR.Order_Type_Sales = 'OR';

// AND RCD.OD Price Type USR is *NONE
AND RCD.OD_Price_Type_USR = *BLANK;

// Send error message - 'Price Type Required.'
ERROR(USR3952);
MSGPARM(RCD.OD_Price_Type_USR);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

CASE;

// IF WRK.Error Status is no
IF WRK.Error_Status = 'N';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Price Override Or Price Method Changed
CASE;

// IF RCD.Price Overage Overrid USR NE RCD.Price Overage Override
IF RCD.Price_Overage_Overrid_USR <> RCD.Price_Overage_Override;

// OR RCD.Price Method Code USR NE RCD.Price Method Code
OR RCD.Price_Method_Code_USR <> RCD.Price_Method_Code;

// OR RCD.Commodity Market Code USR NE RCD.Commodity Market Code
OR RCD.Commodity_Market_Code_USR <> RCD.Commodity_Market_Code;

// OR RCD.Price Code USR NE RCD.Price Code
OR RCD.Price_Code_USR <> RCD.Price_Code;

// OR RCD.OD Price Type USR NE RCD.OD Price Type
OR RCD.OD_Price_Type_USR <> RCD.OD_Price_Type;

// OR RCD.Market Pricing Date USR NE RCD.Market Pricing Date
OR RCD.Market_Pricing_Date_USR <> RCD.Market_Pricing_Date;

// OR RCD.Date Entered NE RCD.Date of Original Entry
OR RCD.Date_Entered <> RCD.Date_of_Original_Entry;

// RCD.Unit Price Last = RCD.Unit Price
RCD.Unit_Price_Last = RCD.Unit_Price;

// RCD.Price Status Last = RCD.Price Status
RCD.Price_Status_Last = RCD.Price_Status;

// RCD.Extended Amount Last = RCD.Extended Amount
RCD.Extended_Amount_Last = RCD.Extended_Amount;

// Call program CLC Pricing using File XF.
CALL PROGRAM(CLC Pricing using File XF) ('PDOJXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(LCL.Price_Detail_Sequence);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.U_M_Ordered);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(02);

//?*---*
// RCD.Price Overage Override = RCD.Price Overage Overrid USR
RCD.Price_Overage_Override = RCD.Price_Overage_Overrid_USR;

// RCD.Price Method Code = RCD.Price Method Code USR
RCD.Price_Method_Code = RCD.Price_Method_Code_USR;

// RCD.Commodity Market Code = RCD.Commodity Market Code USR
RCD.Commodity_Market_Code = RCD.Commodity_Market_Code_USR;

// RCD.Price Code = RCD.Price Code USR
RCD.Price_Code = RCD.Price_Code_USR;

// RCD.OD Price Type = RCD.OD Price Type USR
RCD.OD_Price_Type = RCD.OD_Price_Type_USR;

// RCD.Market Pricing Date = RCD.Market Pricing Date USR
RCD.Market_Pricing_Date = RCD.Market_Pricing_Date_USR;

// RCD.Date Method Code = RCD.Date Method Code USR
RCD.Date_Method_Code = RCD.Date_Method_Code_USR;

//?Control:  Price Override
CASE;

// IF RCD.Price Method Code USR is Deviated
IF RCD.Price_Method_Code_USR = 'DEV';

// RCD.USR Display 3 = CND.No
RCD.USR_Display_3 = 'N';

ENDIF;

//?*---*
EXECUTE FUNCTION(CLC Price,Ext,U/M1Prc  IF) TYPE(EXCINTFUN)                     AC1356112;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Quantity_Ordered);
PARAMETER(RCD.Weight_Ordered);
PARAMETER(RCD.Quantity_Scheduled);
PARAMETER(RCD.Weight_Scheduled);
PARAMETER(RCD.Quantity_Shipped_Total);
PARAMETER(RCD.Weight_Shipped_Total);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(RCD.Event_Code);
PARAMETER('PM');
PARAMETER(LCL.Type_Code);
PARAMETER(LCL.Company_Organization);
{
 //?Execute internal function

 //?*********************************************************************
 //?Calculate "Price Per Pound", "Extended Amount", "Primary U/M Price"
 //?*********************************************************************
 // PAR.Unit Weight = CON.*ZERO
 PAR.Unit_Weight = *ZERO;

 // PAR.U/M - Pricing = CND.Not Entered
 PAR.UOM_Pricing = *BLANK;

 // PAR.Catch Weight Status = CND.blank
 PAR.Catch_Weight_Status = *BLANK;

 //?Load Quantity Shipped Total field. c2742- do -0- shipped from ord
 CASE;

 // IF PAR.Quantity Shipped Total is Equal to zero
 IF PAR.Quantity_Shipped_Total = *ZERO;

 // WRK.Quantity Shipped Total = CON.1
 WRK.Quantity_Shipped_Total = 1;

 //?Load Quantity Shipped Total field. c2742- do -0- shipped from ord
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Quantity Shipped Total = PAR.Quantity Shipped Total
 WRK.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total;

 ENDIF;

 //?Set quantity and weight according to order status  c2742 -0- shped
 CASE;

 // IF PAR.Detail Line Status is Avail/Alloc/Enter/Hold
 IF PAR.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND PAR.Event Code is Entered Thru 03 Picked
 AND PAR.Event_Code >= '01';
 AND PAR.Event_Code <= '03';

 //?RMC 6/17/09 FP1054 use qty/wgt ordered instead of sched
 // PAR.USR Quantity = PAR.Quantity Ordered
 PAR.USR_Quantity = PAR.Quantity_Ordered;

 // PAR.USR Weight = PAR.Weight Ordered
 PAR.USR_Weight = PAR.Weight_Ordered;

 //?Set quantity and weight according to order status  c2742 -0- shped
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Quantity = WRK.Quantity Shipped Total
 PAR.USR_Quantity = WRK.Quantity_Shipped_Total;

 // PAR.USR Weight = PAR.Weight Shipped Total
 PAR.USR_Weight = PAR.Weight_Shipped_Total;

 ENDIF;

 // Call program RTV For Price Extent   XF.
 CALL PROGRAM(RTV For Price Extent   XF) ('PDXRXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(PAR.Primal_Group_Code);

 //?Check retrieve Unit Weight & C/W error
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // AND PAR.Catch Weight Status is Y/N Values
 AND PAR.Catch_Weight_Status = 'N'/'Y';

 // AND PAR.Unit Weight is Not equal zero
 AND PAR.Unit_Weight <> *ZERO;

 //?Check retrieve Unit Weight & C/W error
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute command - 'Send Price MSG to SEABOARD'
 EXECUTE COMMAND(USR2306);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Catch_Weight_Status);
 PARAMETER(*ZERO);

 ENDIF;

 CASE;

 // IF PAR.Price Method Code is Extended
 IF PAR.Price_Method_Code = 'EXT';

 // PAR.Extended Amount = PAR.Price Overage Override
 PAR.Extended_Amount = PAR.Price_Overage_Override;

 //?Calculate Unit Price for Extended
 CASE;

 // IF PAR.USR Weight is Not equal zero
 IF PAR.USR_Weight <> *ZERO;

 // PAR.Unit Price = PAR.Extended Amount / PAR.USR Weight *Rounded
 PAR.Unit_Price = PAR.Extended_Amount / PAR.USR_Weight 'H';

 ENDIF;

 //?Calculate Pricing U/M Price for Extended
 CASE;

 // IF PAR.USR Quantity is not equal zero
 IF PAR.USR_Quantity <> *ZERO;

 // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
 PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Extend price with unit price credit if not zeros
 CASE;

 // IF PAR.Detail Line Status is Avail/Alloc/Enter/Hold
 IF ( PAR.Detail_Line_Status = 'L'/'A'/'E'/'H';

 // AND PAR.Event Code is Entered Thru 03 Picked
 AND PAR.Event_Code >= '01';
 AND PAR.Event_Code <= '03';

 // AND PAR.Unit Price - Credit is Not Zeros
 AND PAR.Unit_Price_Credit <> *ZERO;

 // AND PAR.Price Audit is Not Manually Price Audit
 AND PAR.Price_Audit = 'A'/'N'/*BLANK;

 // AND PAR.Pricing Event Called From is No Price With Credit Pric
 AND PAR.Pricing_Event_Called_From = 'OE'/'PS'/'UWC'/'UWT' );

 //?07/07/08 PKD Replaced w/consideration for .01 manual price
 //?Extend Price using Price Overage Override or Unit Price-Credit
 CASE;

 // IF PAR.Price Method Code is Deviated
 IF PAR.Price_Method_Code = 'DEV';

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF PAR.Price Method Code is Manual
 IF PAR.Price_Method_Code = 'MAN';

 // AND PAR.Company Organization is High Plains Biodiesel
 AND PAR.Company_Organization = 'H';

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF PAR.Price Method Code is Manual
 IF PAR.Price_Method_Code = 'MAN';

 // AND PAR.Company Organization is Not HPB
 AND PAR.Company_Organization = 'D'/'S';

 //?----- USE: Price Overage Override OR Unit Price-Credit
 CASE;

 // IF PAR.Type Code is Inter Company
 IF PAR.Type_Code = 'IC';

 // OR PAR.Type Code is Is Promotional/Samples
 OR PAR.Type_Code = 'PS';

 // OR PAR.Primal Group Code is Samples or Cut Loss
 OR PAR.Primal_Group_Code = 'UNID';

 // OR PAR.Primal Group Code is Other
 OR PAR.Primal_Group_Code = 'OTHER';

 // OR PAR.Price Overage Override is GT .01
 OR PAR.Price_Overage_Override > .01;

 //?----- USE: Price Overage Override
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Price_Overage_Override);

 //?----- USE: Price Overage Override OR Unit Price-Credit
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?----- USE: Unit Price-Credit
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 //?Extend Price using Price Overage Override or Unit Price-Credit
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?---- USE: Unit Price-Credit
 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 //?Extend price with unit price credit if not zeros
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?08/28/07 PKD Replaced with Clc OrdDtl Ext Amt    XF
 //?04/28/10 PKD If Unit Price is zero, then use Unit Price-Credit.
 //?** Added Not .01 to force these orders to use Credit Chk Price.
 CASE;

 // IF PAR.Unit Price is Not Zeros
 IF PAR.Unit_Price <> *ZERO;

 // AND PAR.Unit Price is Not .01
 AND PAR.Unit_Price <> .01;

 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price);

 //?Unit Price Ordered U/M
 CASE;

 // IF PAR.USR Quantity is not equal zero
 IF PAR.USR_Quantity <> *ZERO;

 // PAR.Unit Price Ordered U/M = PAR.Extended Amount / PAR.USR Quantity *Rounded
 PAR.Unit_Price_Ordered_U_M = PAR.Extended_Amount / PAR.USR_Quantity 'H';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Clc OrdDtl Ext Amt    XF.
 CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.UOM_Pricing);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Unit_Price_Credit);

 ENDIF;

 ENDIF;

 ENDIF;

 //?*********************************************************************
}


EXECUTE FUNCTION(CHG OM Price Maint     CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1202345;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Market_Pricing_Date);
PARAMETER(RCD.Commodity_Market_Code);
PARAMETER(RCD.Date_Method_Code);
PARAMETER(RCD.Price_Method_Code);
PARAMETER(RCD.Price_Overage_Override);
PARAMETER(RCD.Price_Status);
PARAMETER(WRK.Pricing_Date_Used);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Ordered_U_M);
PARAMETER(RCD.Date_Entered);
PARAMETER(RCD.Released_by_User_Sts_Y_N);
PARAMETER(RCD.OD_Price_Type);
PARAMETER(RCD.Price_Code);
PARAMETER(RCD.Order_Gate_Final_Price);
{
 //?USER: Processing after Data read

 //?E2247 RMC 10/03/12 Crt chg log if dtl has been sent to MPR USDA
 CASE;

 // IF DB1.OD MPR Sent to USDA Sts is yes
 IF DB1.OD_MPR_Sent_to_USDA_Sts = 'Y';

 //?If price type changes, then create type: ORDPRT
 CASE;

 // IF DB1.OD Price Type NE PAR.OD Price Type
 IF DB1.OD_Price_Type <> PAR.OD_Price_Type;

 //?change log prior has seq in pos 1-3, price type 5-7: '001 NEG     '
 // LCL.Text 3 Length USR = DB1.Order Sequence Number
 LCL.Text_3_Length_USR = DB1.Order_Sequence_Number;

 // LCL.Change Log Prior Value = CONCAT(LCL.Text 3 Length USR,DB1.OD Price Type,CON.1)
 LCL.Change_Log_Prior_Value = LCL.Text_3_Length_USR + DB1.OD_Price_Type (1);

 // LCL.Change Log New Value = PAR.OD Price Type
 LCL.Change_Log_New_Value = PAR.OD_Price_Type;

 // Call program CRT Load/OrderChg n/ld XF.
 CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
 PARAMETER(*ZERO);
 PARAMETER('ORDPRT');
 PARAMETER('SLS');
 PARAMETER(LCL.Change_Log_Prior_Value);
 PARAMETER(LCL.Change_Log_New_Value);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);

 ENDIF;

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Ord  Prt,Prc Sts   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1341906;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER('N');
PARAMETER('U');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?If price status or unit price changes write to log
CASE;

// IF RCD.Price Status NE RCD.Price Status Last
IF RCD.Price_Status <> RCD.Price_Status_Last;

// OR RCD.Unit Price NE RCD.Unit Price Last
OR RCD.Unit_Price <> RCD.Unit_Price_Last;

EXECUTE FUNCTION(RTV Next Audit Seq #   RT) TYPE(RTVOBJ) FILE(PDK3CPP)          AC1429793;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(999);
PARAMETER(WRK.USR_Sequence_Num_New_ATR);
{
 //?USER: Processing if Data record not found

 // PAR.USR Sequence Num. New ATR = CON.1
 PAR.USR_Sequence_Num_New_ATR = 1;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.USR Sequence Num. New ATR = DB1.Audit Sequence Number + CON.1
 PAR.USR_Sequence_Num_New_ATR = DB1.Audit_Sequence_Number + 1;

 QUIT;

}


EXECUTE FUNCTION(CRT Price Change Audit CR) TYPE(CRTOBJ) FILE(PDK3CPP)          AC1429780;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(WRK.USR_Sequence_Num_New_ATR);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Detail_Line_Status);
PARAMETER(RCD.Extended_Amount);
PARAMETER(RCD.Extended_Amount_Last);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Price_Status_Last);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Audit_Reason_Code);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Audit_Reason_Code);
PARAMETER(RCD.Unit_Price);
PARAMETER(RCD.Unit_Price_Last);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Unit_Price_Credit);
PARAMETER(RCD.Event_Code);
PARAMETER(RCD.Event_Code);
PARAMETER('PM');
PARAMETER(JOB.*PROGRAM);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

// Call program CLC Price/Price Audit  XF.
CALL PROGRAM(CLC Price/Price Audit  XF) ('PDPRXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER('PM');
PARAMETER(WRK.Unused_Parm_Value_USR);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(WRK.Production_Hold);
PARAMETER(*NO);

//?*----------------------------------------------------------------*
// Call program CLC Tot Ord Val Ship   XF.
CALL PROGRAM(CLC Tot Ord Val Ship   XF) ('PDP1XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(WRK.USR_Production);
PARAMETER(WRK.USR_Update_Flag);

//?Update conrol values if total or weight changed
CASE;

// IF PAR.Order Value Total NE CTL.Order Value Total
IF PAR.Order_Value_Total <> CTL.Order_Value_Total;

// OR PAR.Order Weight Total NE CTL.Order Weight Total
OR PAR.Order_Weight_Total <> CTL.Order_Weight_Total;

// CTL.Order Value Total = PAR.Order Value Total
CTL.Order_Value_Total = PAR.Order_Value_Total;

// CTL.Order Weight Total = PAR.Order Weight Total
CTL.Order_Weight_Total = PAR.Order_Weight_Total;

ENDIF;

ENDIF;

//?RMC 4/25/23 comment the below
//?RMC 3/30/22 added here too..also in subfile build
//?USER: Final processing (Post-confirm)

CASE;

// IF CTL.Header Status is Avail/Alloc/Enter/Hold
IF CTL.Header_Status = 'L'/'A'/'E'/'H';

// Call program EDT Post Open Orders   XF.
CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(CTL.Order_Value_Total);
PARAMETER(CTL.Order_Weight_Total);
PARAMETER('PM');

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CLC Price/Price Audit  XF.
CALL PROGRAM(CLC Price/Price Audit  XF) ('PDPRXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('PM');
PARAMETER(WRK.Order_Value_Total);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(WRK.Production_Hold);
PARAMETER(*NO);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// AND PAR.OD Price Type Req STS USR is yes
AND PAR.OD_Price_Type_Req_STS_USR = 'Y';

EXECUTE FUNCTION(Val Price Type Entry  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1888439;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 CASE;

 // IF DB1.OD Price Type is *NONE
 IF DB1.OD_Price_Type = *BLANK;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Found
IF LCL.Record_Found_OrdDtlUSR = 'Y';

// Send error message - 'Price Type Required.'
ERROR(USR3952);
MSGPARM(CTL.OD_Price_Type);

QUIT;

ENDIF;

ENDIF;

CASE;

// IF CTL.Header Status is Avail/Alloc/Enter/Hold
IF CTL.Header_Status = 'L'/'A'/'E'/'H';

// Call program EDT Post Open Orders   XF.
CALL PROGRAM(EDT Post Open Orders   XF) ('PDHRXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(CTL.Order_Value_Total);
PARAMETER(CTL.Order_Weight_Total);
PARAMETER('PM');

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CLC Price/Price Audit  XF.
CALL PROGRAM(CLC Price/Price Audit  XF) ('PDPRXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('PM');
PARAMETER(WRK.Order_Value_Total);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(WRK.Production_Hold);
PARAMETER(*NO);

ENDIF;

