// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POUZDFR
// ?Date: 14.08.2025 Time: 03:39:06
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// LCL.Display Flag 1 USR = CND.yes
LCL.Display_Flag_1_USR = 'Y';

// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('POBHUFU');
PARAMETER(15);
{
 ) find text=#SFLCTL
 ) insert
 A                                      SFLDROP(CF07)
 A* 07                                  SFLFOLD(CF07)
}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Initialize subfile control

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

// LCL.Item Structure Type Code = CON.*ZERO
LCL.Item_Structure_Type_Code = *ZERO;

// LCL.Item Structure Group Code = CON.*ZERO
LCL.Item_Structure_Group_Code = *ZERO;

// LCL.Item Structure Class Code = CON.*ZERO
LCL.Item_Structure_Class_Code = *ZERO;

// LCL.Department Code USR = CTL.Department Code USR
LCL.Department_Code_USR = CTL.Department_Code_USR;

// LCL.Production Line Code = CTL.Production Line Code
LCL.Production_Line_Code = CTL.Production_Line_Code;

// LCL.Consumed Department Code = CTL.Consumed Department Code
LCL.Consumed_Department_Code = CTL.Consumed_Department_Code;

// LCL.Consumed Prod Line Code = CTL.Consumed Prod Line Code
LCL.Consumed_Prod_Line_Code = CTL.Consumed_Prod_Line_Code;

// LCL.Item Code = CTL.Item Code
LCL.Item_Code = CTL.Item_Code;

//?USER: Initialize subfile record from DBF record

//?SEL:  Company Number
CASE;

// IF RCD.Company Number NE CTL.Company Number
IF RCD.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Item Type Code
CASE;

// IF RCD.Item Type Code is Not FG/WP
IF RCD.Item_Type_Code = *BLANK/'PS'/'RM'/'EX';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Display Flag = CND.No
RCD.Display_Flag = 'N';

//?NEW:  Item Structure Type Code
CASE;

// IF LCL.Item Structure Group Code NE RCD.Item Structure Group Code
IF LCL.Item_Structure_Group_Code <> RCD.Item_Structure_Group_Code;

// LCL.Item Structure Group Code = RCD.Item Structure Group Code
LCL.Item_Structure_Group_Code = RCD.Item_Structure_Group_Code;

// RCD.Display Flag = CND.Yes
RCD.Display_Flag = 'Y';

ENDIF;

//?NEW:  Item Structure Group Code
CASE;

// IF LCL.Item Structure Type Code NE RCD.Item Structure Type Code
IF LCL.Item_Structure_Type_Code <> RCD.Item_Structure_Type_Code;

// LCL.Item Structure Type Code = RCD.Item Structure Type Code
LCL.Item_Structure_Type_Code = RCD.Item_Structure_Type_Code;

// RCD.Display Flag = CND.Yes
RCD.Display_Flag = 'Y';

ENDIF;

//?NEW:  Item Structure Class Code
CASE;

// IF LCL.Item Structure Class Code NE RCD.Item Structure Class Code
IF LCL.Item_Structure_Class_Code <> RCD.Item_Structure_Class_Code;

// LCL.Item Structure Class Code = RCD.Item Structure Class Code
LCL.Item_Structure_Class_Code = RCD.Item_Structure_Class_Code;

// RCD.Display Flag = CND.Yes
RCD.Display_Flag = 'Y';

ENDIF;

EXECUTE FUNCTION(Rtv Seq for Company   RT) TYPE(RTVOBJ) FILE(POCNREP)           AC1753557;
PARAMETER(LCL.Item_Structure_Type_Code);
PARAMETER(LCL.Item_Structure_Group_Code);
PARAMETER(LCL.Item_Structure_Class_Code);
PARAMETER(RCD.Sequence_Number);
PARAMETER(RCD.Company_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Sequence Number = CON.1
 PAR.Sequence_Number = 1;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?SEL:  Record
CASE;

// IF RCD.Display Flag is No
IF RCD.Display_Flag = 'N';

// AND LCL.Display Flag 1 USR is no
AND LCL.Display_Flag_1_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?SEL:  Record
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Class Desc) TYPE(RTVOBJ) FILE(OMFAREP)                     AC1663397;
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Dept/Line         RT) TYPE(RTVOBJ) FILE(POCNREP)           AC1664090;
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Department_Code_USR);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Consumed_Department_Code);
PARAMETER(RCD.Consumed_Prod_Line_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?SEL:  Department Code
CASE;

// IF CTL.Department Code USR is Entered
IF CTL.Department_Code_USR <> *BLANK;

// AND CTL.Department Code USR NE RCD.Department Code USR
AND CTL.Department_Code_USR <> RCD.Department_Code_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Production Line Code
CASE;

// IF CTL.Production Line Code is Entered
IF CTL.Production_Line_Code <> *BLANK;

// AND CTL.Production Line Code NE RCD.Production Line Code
AND CTL.Production_Line_Code <> RCD.Production_Line_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Consumed Department
CASE;

// IF CTL.Consumed Department Code is Entered
IF CTL.Consumed_Department_Code <> *BLANK;

// AND CTL.Consumed Department Code NE RCD.Consumed Department Code
AND CTL.Consumed_Department_Code <> RCD.Consumed_Department_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Consumed Production Line
CASE;

// IF CTL.Consumed Prod Line Code is Entered
IF CTL.Consumed_Prod_Line_Code <> *BLANK;

// AND CTL.Consumed Prod Line Code NE RCD.Consumed Prod Line Code
AND CTL.Consumed_Prod_Line_Code <> RCD.Consumed_Prod_Line_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL:  Item Code
CASE;

// IF CTL.Item Code is Entered
IF CTL.Item_Code <> *ZERO;

// AND CTL.Item Code NE RCD.Item Code
AND CTL.Item_Code <> RCD.Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


//?USER: Process subfile control (Pre-confirm)

//?REFRESH
CASE;

// IF CTL.Department Code USR NE LCL.Department Code USR
IF CTL.Department_Code_USR <> LCL.Department_Code_USR;

// OR CTL.Production Line Code NE LCL.Production Line Code
OR CTL.Production_Line_Code <> LCL.Production_Line_Code;

// OR CTL.Consumed Department Code NE LCL.Consumed Department Code
OR CTL.Consumed_Department_Code <> LCL.Consumed_Department_Code;

// OR CTL.Consumed Prod Line Code NE LCL.Consumed Prod Line Code
OR CTL.Consumed_Prod_Line_Code <> LCL.Consumed_Prod_Line_Code;

// OR CTL.Item Code NE LCL.Item Code
OR CTL.Item_Code <> LCL.Item_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Department Code USR
IF PGM.*Cursor_field = CTL.Department_Code_USR;

// OR PGM.*Cursor field <IS> CTL.Production Line Code
OR PGM.*Cursor_field = CTL.Production_Line_Code;

// Call program Sel Production Line   SR.
CALL PROGRAM(Sel Production Line   SR) ('POUXSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code_USR);
PARAMETER(CTL.Production_Line_Code);

// IF PGM.*Cursor field <IS> CTL.Consumed Department Code
IF PGM.*Cursor_field = CTL.Consumed_Department_Code;

// OR PGM.*Cursor field <IS> CTL.Consumed Prod Line Code
OR PGM.*Cursor_field = CTL.Consumed_Prod_Line_Code;

// Call program Sel Production Line   SR.
CALL PROGRAM(Sel Production Line   SR) ('POUXSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Consumed_Department_Code);
PARAMETER(CTL.Consumed_Prod_Line_Code);

ENDIF;

ENDIF;

//?F7=Display Items
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

CASE;

// IF LCL.Display Flag 1 USR is no
IF LCL.Display_Flag_1_USR = 'N';

// LCL.Display Flag 1 USR = CND.yes
LCL.Display_Flag_1_USR = 'Y';

// IF LCL.Display Flag 1 USR is yes
IF LCL.Display_Flag_1_USR = 'Y';

// LCL.Display Flag 1 USR = CND.no
LCL.Display_Flag_1_USR = 'N';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F21=Print List
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Item Structure Items');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('C/S');
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Copies NBR USR = PAR.PRT Number of Copies
LCL.Copies_NBR_USR = PAR.PRT_Number_of_Copies;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(USR2684);
PARAMETER('ITMSTRITMS');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*JOBD);

// Call program Prt Item Str/Items    UP.
SBMJOB;
CALL PROGRAM(Prt Item Str/Items    UP) ('PPGEUPC');
PARAMETER(LCL.Return_Code_Usr);
PARAMETER('C/S');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Structure_Class_Code);
PARAMETER(CTL.Item_Structure_Group_Code);
PARAMETER(CTL.Item_Structure_Type_Code);
PARAMETER(CTL.Item_Type_Code);
PARAMETER(CTL.Base_Conv_Loss_Item);
PARAMETER(CTL.Credit_Item_Status);
PARAMETER(CTL.GL_Sub_Code);
PARAMETER(CTL.Print_on_Realization_Rpt);
PARAMETER(CTL.Piece_Count_Item);
PARAMETER(CTL.Value_Added_Sts);
PARAMETER(CTL.Item_TF_Classification);
PARAMETER(CTL.Record_Status);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(LCL.Copies_NBR_USR);
SBMJOBEND;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Department Code USR
IF PGM.*Cursor_field = RCD.Department_Code_USR;

// OR PGM.*Cursor field <IS> RCD.Production Line Code
OR PGM.*Cursor_field = RCD.Production_Line_Code;

// Call program Sel Production Line   SR.
CALL PROGRAM(Sel Production Line   SR) ('POUXSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Department_Code_USR);
PARAMETER(RCD.Production_Line_Code);

// IF PGM.*Cursor field <IS> RCD.Consumed Department Code
IF PGM.*Cursor_field = RCD.Consumed_Department_Code;

// OR PGM.*Cursor field <IS> RCD.Consumed Prod Line Code
OR PGM.*Cursor_field = RCD.Consumed_Prod_Line_Code;

// Call program Sel Production Line   SR.
CALL PROGRAM(Sel Production Line   SR) ('POUXSRR');
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Consumed_Department_Code);
PARAMETER(RCD.Consumed_Prod_Line_Code);

ENDIF;

ENDIF;

//?2=Edit
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt Str Prod/Usage Ln ER.
CALL PROGRAM(Edt Str Prod/Usage Ln ER) ('POYCE1R');
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Sequence_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?VAL: Production Department/Line
CASE;

// IF RCD.Department Code USR is Entered
IF RCD.Department_Code_USR <> *BLANK;

// OR RCD.Production Line Code is Entered
OR RCD.Production_Line_Code <> *BLANK;

EXECUTE FUNCTION(Val Production Line   RT) TYPE(RTVOBJ) FILE(POCMREP)           AC1664677;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code_USR);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Production Department/Line Not Found'
ERROR(USR3211);
MSGPARM(RCD.Department_Code_USR);
MSGPARM(RCD.Production_Line_Code);

QUIT;

ENDIF;

ENDIF;

//?VAL: Usage Department/Line
CASE;

// IF RCD.Consumed Department Code is Entered
IF RCD.Consumed_Department_Code <> *BLANK;

// OR RCD.Consumed Prod Line Code is Entered
OR RCD.Consumed_Prod_Line_Code <> *BLANK;

EXECUTE FUNCTION(Val Production Line   RT) TYPE(RTVOBJ) FILE(POCMREP)           AC1664677;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Consumed_Department_Code);
PARAMETER(RCD.Consumed_Prod_Line_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Production Department/Line Not Found'
ERROR(USR3211);
MSGPARM(RCD.Consumed_Department_Code);
MSGPARM(RCD.Consumed_Prod_Line_Code);

QUIT;

ENDIF;

ENDIF;

