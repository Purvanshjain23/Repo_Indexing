// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKJCXFR
// ?Date: 14.08.2025 Time: 02:51:53
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(Rtv BoL Hdrc/Lvw      RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1191142;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Accum Tattoo Hr/LWxxx) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1191143;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.BOL_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);
 PARAMETER(WRK.TH_Avg_Live_Wgt);
 {
  //?USER: Initialize routine

  // PAR.BOL Head Received = CON.*ZERO
  PAR.BOL_Head_Received = *ZERO;

  // PAR.TH Avg Live Wgt = CON.*ZERO
  PAR.TH_Avg_Live_Wgt = *ZERO;

  // PAR.BOL Live Wgt Received = CON.*ZERO
  PAR.BOL_Live_Wgt_Received = *ZERO;

  //?USER: Processing if Data record not found

  // PAR.BOL Head Received = CON.*ZERO
  PAR.BOL_Head_Received = *ZERO;

  // PAR.BOL Head Received = CON.*ZERO
  PAR.BOL_Head_Received = *ZERO;

  // PAR.TH Avg Live Wgt = CON.*ZERO
  PAR.TH_Avg_Live_Wgt = *ZERO;

  //?USER: Process Data record

  //?Count the Tattoo header file total head received and total weight
  // PAR.BOL Head Received = PAR.BOL Head Received + DB1.TH Head Received
  PAR.BOL_Head_Received = PAR.BOL_Head_Received + DB1.TH_Head_Received;

  // PAR.BOL Live Wgt Received = PAR.BOL Live Wgt Received + DB1.TH Live Wgt
  PAR.BOL_Live_Wgt_Received = PAR.BOL_Live_Wgt_Received + DB1.TH_Live_Wgt;

  CASE;

  // IF DB1.TH Hog Class Type is Market
  IF DB1.TH_Hog_Class_Type = 'M';

  // AND PAR.TH Avg Live Wgt is EQ Zero
  AND PAR.TH_Avg_Live_Wgt = *ZERO;

  // PAR.TH Avg Live Wgt = DB1.TH Avg Live Wgt
  PAR.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

  ENDIF;

 }

 EXECUTE FUNCTION(Chg Buy Ord Ld Hd/Wg  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1183543;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.BOL_Head_Received);
 PARAMETER(WRK.BOL_Live_Wgt_Received);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  //?Calculate freight based on the unit of measure
  //?Freight    recalculate freight amount
  DO;

  EXECUTE FUNCTION(Chk tatto Paid for Bol RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1183687;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.Tattoo_is_paid_Usr);
  PARAMETER(WRK.Held_Over_Records_Y_N);
  PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
  {
   //?USER: Initialize routine

   // PAR.Tot Frt Spdb aft pay Usr = CON.*ZERO
   PAR.Tot_Frt_Spdb_aft_pay_Usr = *ZERO;

   // PAR.Held Over Records Y/N = CND.No
   PAR.Held_Over_Records_Y_N = 'N';

   // PAR.Tattoo is paid Usr = CND.No
   PAR.Tattoo_is_paid_Usr = 'N';

   //?USER: Process Data record

   //?If one tattoo is paid but freight was spread then accumulate
   //?what is paid, for held over respread problem
   //?when this probelm goes away, then just flag that there is one paid
   CASE;

   // IF DB1.TH Payment Sts is Paid Anything
   IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

   //?CHECK IF FREIGHT AMOUNT IS IN RECORD
   CASE;

   // IF DB1.TH Freight Amount is Not Zeros
   IF DB1.TH_Freight_Amount <> *ZERO;

   // PAR.Tattoo is paid Usr = CND.Yes
   PAR.Tattoo_is_paid_Usr = 'Y';

   ENDIF;

   // PAR.Tot Frt Spdb aft pay Usr = PAR.Tot Frt Spdb aft pay Usr + DB1.TH Freight Amo
   PAR.Tot_Frt_Spdb_aft_pay_Usr = PAR.Tot_Frt_Spdb_aft_pay_Usr + DB1.TH_Freight_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?CHECK FOR HELD OVER RECORD
   CASE;

   // IF DB1.TH Held Over Record is Yes
   IF DB1.TH_Held_Over_Record = 'Y';

   // OR DB1.TH Held Over is greater than 0
   OR DB1.TH_Held_Over > *ZERO;

   // PAR.Held Over Records Y/N = CND.Yes
   PAR.Held_Over_Records_Y_N = 'Y';

   ENDIF;

   ENDIF;

  }

  //?Get bol frt fields, and find out if any tattoo for this
  //?load has been paid.
  //?If allocated but no paid or pay but no frt was spread
  //?If trucker has not been paid then recalculate
  CASE;

  // IF WRK.Tattoo is paid Usr is Yes
  IF WRK.Tattoo_is_paid_Usr = 'Y';

  // AND DB1.BOL Freight Allocation is Freight is Allocated
  AND DB1.BOL_Freight_Allocation = 'Y';

  // IF DB1.BOL Trucker Payment Sts is Paid Trucker
  IF DB1.BOL_Trucker_Payment_Sts = 'PT';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program Clc Freight Amt       XF.
  CALL PROGRAM(Clc Freight Amt       XF) ('PKQ5XFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(DB1.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(DB1.BOL_Head_Received);
  PARAMETER(DB1.BOL_Live_Wgt_Received);

  ENDIF;

  ENDDO;

  CASE;

  // IF DB1.BOL Freight Amt is Not Zeros
  IF DB1.BOL_Freight_Amt <> *ZERO;

  // AND DB1.BOL Trucker Payment Sts is Blank
  AND DB1.BOL_Trucker_Payment_Sts = *BLANK;

  // DB1.BOL Trucker Payment Sts = CND.Select Trucker
  DB1.BOL_Trucker_Payment_Sts = 'ST';

  // IF *OTHERWISE
  IF *OTHERWISE;

  ENDIF;

 }

 //?RMC - 3/18/05  do this when BOL Hd Rcvd is updated
 CASE;

 // IF WRK.BOL Head Received is Greater then Zero
 IF WRK.BOL_Head_Received > *ZERO;

 EXECUTE FUNCTION(Rtv Chg Lock Sts      RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1246999;
 PARAMETER(DB1.BOL_Kill_Date);
 PARAMETER('L');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Delv Sched Dtl    CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1244728;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(DB1.DSD_Scheduled_Hour);
  PARAMETER(DB1.DSD_Farm_Site_Code);
  PARAMETER(DB1.DSD_Building);
  PARAMETER(DB1.DSD_Room);
  PARAMETER(DB1.DSD_Sire_Line_Code);
  PARAMETER(DB1.DSD_Hog_Group_Code);
  PARAMETER(DB1.DSD_Unused_Head);
  PARAMETER(DB1.DSD_Scheduled_Delv_Head);
  PARAMETER(DB1.DSD_Scheduled_Kill_Head);
  PARAMETER(DB1.DSD_Transportation_Office);
  PARAMETER(DB1.DSD_Trucker_Code_HPS);
  PARAMETER(DB1.DSD_Driver);
  PARAMETER(DB1.DSD_Loading_Crew);
  PARAMETER(DB1.CHR_Code);
  PARAMETER(DB1.DSD_Load_Type);
  PARAMETER(DB1.DSD_Full_Split_Load);
  PARAMETER(DB1.DSD_Movement_Number);
  PARAMETER(DB1.DSD_Truck_ID);
  PARAMETER(DB1.DSD_Trailer_ID);
  PARAMETER(DB1.DSD_Movement_Printed);
  PARAMETER(DB1.DSD_Sched_Route_Start_Pnt);
  PARAMETER(DB1.DSD_Sched_Route_Start_Dte);
  PARAMETER(DB1.DSD_Sched_Route_Start_Tim);
  PARAMETER(DB1.DSD_Sch_Farm_Arrival_Date);
  PARAMETER(DB1.DSD_Sch_Farm_Arrival_Time);
  PARAMETER(DB1.DSD_Sch_Start_Load_Date);
  PARAMETER(DB1.DSD_Sch_Start_Load_Time);
  PARAMETER(DB1.DSD_Receiving_Shift);
  PARAMETER(DB1.DSD_Kill_Shift);
  PARAMETER(DB1.DSD_BOL_Kill_Shift);
  PARAMETER(DB1.DSD_HPS_Post_Status);
  PARAMETER(DB1.DSD_HPE_Post_Status);
  PARAMETER('L');
  PARAMETER(DB1.DSD_Source_Type);
  PARAMETER(DB1.DSD_Transfer_Sts);
  PARAMETER(DB1.DSD_Unused_Date);
  PARAMETER(DB1.DSD_Unused_Time);
  PARAMETER(DB1.SR_Source_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.DSD_PRD_Srv_Batch_ID);
  PARAMETER(DB1.DSD_PRD_Srv_Sched_ID);
  PARAMETER(DB1.DSD_Ref_1);
  PARAMETER(DB1.DSD_Ref_2);
  PARAMETER(DB1.DSD_Ref_Status);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 ENDIF;

}


