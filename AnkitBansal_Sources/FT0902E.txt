     H*OPTION(*SRCSTMT : *NODEBUGIO)
     H DFTACTGRP(*NO)
     H BNDDIR('RDB2000')
       //----------------------------------------------------------------------
       // Program To Get F0902 Records from E1 and Insert into E10902 E1 table
       // Programmer  :RST Solution   -- Rose Centonze copied  from ft0902 in  E1INT1TST
       // Date : 5/8/20  --  9/24/2020
       // Modified  9/10/2021 -- Rose Centonze write to PF instead, change RDB40 to RDB50
       //----------------------------------------------------------------------
      //*******************************************************************************
     F*E10902LA  UF A E           K DISK
     FF55PICK   IF A E             DISK
     FF55CONFIG1IF   E           K DISK
     FE10902    O  A E             DISK
      // RDB Example program
      //
      // This program provides and example of the use of the RDB APIs
      //*******************************************************************************
      /COPY RDB50/RDBSRC,RDBPROTO
     D Id              S             10I 0
     D rc              S             10I 0
     D @ErrId          S              7A
     D @ErrText        S            100A
     D vBatch          S              8  0 inz
     D $$DOC           S             10  0 inz
     D vBatch1         S             15A
     D X_A7            S             30A   inz
     D X_A8            S             30A   inz
     d sFileSchema     s             30a   inz
     C     GBKY01        KLIST
     C                   KFLD                    GBAID
     C                   KFLD                    GBCTRY
     C                   KFLD                    GBFY
     C                   KFLD                    GBFQ
     C                   KFLD                    GBLT
     C                   KFLD                    GBSBL
     C                   KFLD                    GBSBLT
     C                   KFLD                    GBCRCD
      //
      //     Connect to the remote system using created in the RDB
      //     configuration screen (RDBCFG)
      /FREE
           setll *start F55CONFIG1;
           READ F55CONFIG1;
           Dow Not %EOF(F55CONFIG1);
           X_A7=%TRIML(%TRIMR(S2DL01));
           X_A8=%TRIML(%TRIMR(S2DL02));
           READ F55CONFIG1;
           EndDo;
       Id = RdbConnect(X_A7);
       If Id >= 0;
         sFileSchema = '[' + %trimr(X_A8) + '].[F580911F]';
         //     After the connection is established, prepare the statement.
         rc = RdbPrepStmt(Id:
             'Select * from' + %trimr(sFileSchema) +
             ' where FFEV01 = ?' +
             ' and FFPID = ?');
         rc = RdbSetStr(Id: 1: '1');
         rc = RdbSetStr(Id: 2: 'R580902');
         rc = RdbPrepExec(Id);
         //     Fetch the first record of the result set that was generated with the
         //     previously executed statement.
         rc = RdbFetchNxt(Id);
          //  Load the local variables from the remote server.  The get ty  pe must match
          // the remote type and the local variable.
         dow  rc >= 0;
           SSUKID= RdbGetNum(Id:1);                                             //|Get a number
           WRITE I55PICK;                                                       //|Get a number
           rc = RdbFetchNxt(Id);
         enddo;
       EndIf;
         //
         //-------------------------------
         // Free the Statement
         //-------------------------------
           RdbFreeStmt(id);
           sFileSchema = '[' + %trimr(X_A8) + '].[F580902]';
           setll *start F55PICK;
           READ F55PICK;
           Dow Not %EOF(F55PICK);
           vBatch=SSUKID;
           vBatch1=%CHAR(SSUKID);
         //
         //     After the connection is established, prepare the statement.
         rc = RdbPrepStmt(Id:
             'Select * from' + %trimr(sFileSchema) +
             ' where GBUKID = ?');
         //     Set the value of the first parameter as a Date
         rc = RdbSetNum(Id: 1: SSUKID);
         rc = RdbPrepExec(Id);
         //
         rc = RdbFetchNxt(Id);
          //  Load the local variables from the remote server.  The get ty  pe must match
          // the remote type and the local variable.
         dow  rc >= 0;
           GBAID= RdbGetStr(Id:2);                                              //|Get a number
           GBCTRY= RdbGetNum(Id:3);                                             //|Get a String
           GBFY  = RdbGetNum(Id:4);                                             //|Get a String
           GBFQ  = RdbGetStr(Id:5);
           GBLT  = RdbGetStr(Id:6);                                             //|Get a Timestamp
           GBSBL  = RdbGetStr(Id:7);
           GBCO   = RdbGetStr(Id:8);
           GBAPYC = RdbGetNum(Id:9);
           GBAN01 = RdbGetNum(Id:10);
           GBAN02 = RdbGetNum(Id:11);
           GBAN04 = RdbGetNum(Id:12);
           GBAN05 = RdbGetNum(Id:13);
           GBAN06 = RdbGetNum(Id:14);
           GBAN07 = RdbGetNum(Id:15);
           GBAN08 = RdbGetNum(Id:16);
           GBAN09 = RdbGetNum(Id:17);
           GBAN10 = RdbGetNum(Id:18);
           GBAN11 = RdbGetNum(Id:19);
           GBAN12 = RdbGetNum(Id:20);
           GBAN13 = RdbGetNum(Id:21);
           GBAN14 = RdbGetNum(Id:22);
           GBAPYN = RdbGetNum(Id:23);
           GBAWTD = RdbGetNum(Id:24);
           GBBORG = RdbGetNum(Id:25);
           GBPOU  = RdbGetNum(Id:26);
           GBPCZ = RdbGetNum(Id:27);
           GBTKER= RdbGetNum(Id:28);
           GBBREQ= RdbGetNum(Id:29);
           GBAN03 = RdbGetNum(Id:30);
           GBBAPR=  RdbGetNum(Id:31);
           GBMCU = RdbGetStr(Id:32);
           GBOBJ = RdbGetStr(Id:33);
           GBSUB = RdbGetStr(Id:34);
           GBUSER= RdbGetStr(Id:35);
           GBPID = RdbGetStr(Id:36);
           GBUPMJ = RdbGetNum(Id:37);
           GBJOBN = RdbGetStr(Id:38);
           GBSBLT = RdbGetStr(Id:39);
           GBUPMT= RdbGetNum(Id:40);
           GBCRCD=RdbGetStr(Id:41);
           GBCRCX=RdbGetStr(Id:42);
           GBPRGF=RdbGetStr(Id:43);
           GBAD01=RdbGetNum(Id:44);
           GBAD02=RdbGetNum(Id:45);
           GBAD03=RdbGetNum(Id:46);
           GBAD04=RdbGetNum(Id:47);
           GBAD05=RdbGetNum(Id:48);
           GBAD06=RdbGetNum(Id:49);
           GBAD07=RdbGetNum(Id:50);
           GBAD08=RdbGetNum(Id:51);
           GBAD09=RdbGetNum(Id:52);
           GBAD10=RdbGetNum(Id:53);
           GBAD11=RdbGetNum(Id:54);
           GBAS12=RdbGetNum(Id:55);
           GBAS13=RdbGetNum(Id:56);
           GBAD14=RdbGetNum(Id:57);
       //  chain GBKY01 E10902LA;
       //  if not %found(E10902LA);
           WRITE I0902;
      //   else;
      //   UPDATE I0902LA;
      //   endIf;
           rc = RdbFetchNxt(Id);
         enddo;
         if rc < 0;
           RdbError(@ErrId: @ErrText);
         endif;
            Read F55PICK;
           EndDo;
         //
         //
         //-------------------------------
         // Free the Statement
         //-------------------------------
           RdbFreeStmt(id);
         sFileSchema = '[' + %trimr(X_A8) + '].[F580911F]';
           setll *start F55PICK;
           READ F55PICK;
           Dow Not %EOF(F55PICK);
         //
         //     After the connection is established, prepare the statement.
         rc = RdbPrepStmt(Id:
             'Update '+ %trimr(sFileSchema) +
             ' set FFEV01 = ? where FFUKID = ?');
         //
         //     Set the value of the first parameter as a Date
         rc = RdbSetNum(Id: 2: SSUKID);
         rc = RdbSetStr(Id: 1: '2');
         rc = RdbPrepExec(Id);
         if rc < 0;
           RdbError(@ErrId: @ErrText);
         endif;
            Read F55PICK;
           EndDo;
         //
         //     Close the connection to the remote system.
         RdbClose(Id);
       //
       *Inlr = *On;
      /END-FREE
