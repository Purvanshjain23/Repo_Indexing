// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDPJXFR
// ?Date: 14.08.2025 Time: 03:32:44
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?FP1054 6/17/09  dont de/re-allocate not prod planned lines, leave as is
//?Deallocates from the Deallocate date, then Allocates to the Allocate date
//?Production Hold passed back with Y if all ordered qty not allocated
//?If Deallocate Date = 0, does not Deallocate;
//?   If Allocate Date = 0, does not Allocate
//?Exit program if the dates/whse are the same
CASE;

// IF PAR.Deallocate Date USR EQ PAR.Allocate Date USR
IF PAR.Deallocate_Date_USR = PAR.Allocate_Date_USR;

// AND PAR.Warehouse Code is Warehouse Code Blank
AND PAR.Warehouse_Code = *BLANK;

PGM.*Return_code = 'NOUPD';

RETURN;

ENDIF;

EXECUTE FUNCTION(UPD Dealloc/Allocate   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426348;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Deallocate_Date_USR);
PARAMETER(PAR.Allocate_Date_USR);
{
 //?USER: Process Data record

 //?If processing 1 line, process it, else skip cancelled lines & not prod pln
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 CASE;

 // IF PAR.Order Sequence Number EQ WRK.ZERO
 IF PAR.Order_Sequence_Number = WRK.ZERO;

 // PAR.USR Update Flag = CND.No
 PAR.USR_Update_Flag = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?If processing 1 line, process it, else skip cancelled lines & not prod pln
 // IF DB1.OD Production Plan Sts is No
 IF DB1.OD_Production_Plan_Sts = 'N';

 //?FP1054 6/17/09 dont de/realloc not planned lines
 // PAR.USR Update Flag = CND.No
 PAR.USR_Update_Flag = *BLANK;

 //?If processing 1 line, process it, else skip cancelled lines & not prod pln
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Update Flag = CND.Yes
 PAR.USR_Update_Flag = 'Y';

 ENDIF;

 //?Set up warehouse code
 CASE;

 // IF PAR.Warehouse Code is Warehouse Code Blank
 IF PAR.Warehouse_Code = *BLANK;

 // PAR.USR Warehouse Code = DB1.Warehouse Code
 PAR.USR_Warehouse_Code = DB1.Warehouse_Code;

 //?Set up warehouse code
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Warehouse Code = PAR.Warehouse Code
 PAR.USR_Warehouse_Code = PAR.Warehouse_Code;

 ENDIF;

 CASE;

 // IF PAR.USR Update Flag is Yes
 IF PAR.USR_Update_Flag = 'Y';

 // PAR.Quantity Scheduled = DB1.Quantity Scheduled
 PAR.Quantity_Scheduled = DB1.Quantity_Scheduled;

 // PAR.Weight Scheduled = DB1.Weight Scheduled
 PAR.Weight_Scheduled = DB1.Weight_Scheduled;

 //?Deallocate if deallocate date passed in
 CASE;

 // IF PAR.Deallocate Date USR NE WRK.ZERO
 IF PAR.Deallocate_Date_USR <> WRK.ZERO;

 // Call program UPD Avail-To-Sell  ORD XF.
 CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Deallocate_Date_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER('OD');
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);

 // PAR.Quantity Scheduled = CON.*ZERO
 PAR.Quantity_Scheduled = *ZERO;

 // PAR.Weight Scheduled = CON.*ZERO
 PAR.Weight_Scheduled = *ZERO;

 ENDIF;

 //?Allocate items if allocate date passed in
 CASE;

 // IF PAR.Allocate Date USR NE WRK.ZERO
 IF PAR.Allocate_Date_USR <> WRK.ZERO;

 //?Allocate (use allocate date)
 //?Determine whether to use qty/wgt ordered or substituted
 CASE;

 // IF DB1.Order Secondary Line Seq is GT 1
 IF DB1.Order_Secondary_Line_Seq > 1;

 // PAR.USR Quantity = DB1.Quantity to Substitute
 PAR.USR_Quantity = DB1.Quantity_to_Substitute;

 // PAR.USR Weight = PAR.USR Quantity * DB1.Unit Weight Ordered U/M *
 PAR.USR_Weight = PAR.USR_Quantity * DB1.Unit_Weight_Ordered_U_M;

 //?Determine whether to use qty/wgt ordered or substituted
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Quantity = DB1.Quantity Ordered
 PAR.USR_Quantity = DB1.Quantity_Ordered;

 // PAR.USR Weight = PAR.USR Quantity * DB1.Unit Weight Ordered U/M *
 PAR.USR_Weight = PAR.USR_Quantity * DB1.Unit_Weight_Ordered_U_M;

 ENDIF;

 // Call program UPD Avail-To-Sell  ORD XF.
 CALL PROGRAM(UPD Avail-To-Sell  ORD XF) ('PDQNXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.Allocate_Date_USR);
 PARAMETER(PAR.USR_Quantity);
 PARAMETER(PAR.USR_Weight);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER('OA');
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(DB1.Item_Age_Days);
 PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
 PARAMETER(DB1.Production_Ovr_AgeDte_To);

 ENDIF;

 // PAR.Extended Amount = DB1.Unit Price Ordered U/M * PAR.Quantity Scheduled *
 PAR.Extended_Amount = DB1.Unit_Price_Ordered_U_M * PAR.Quantity_Scheduled;

 //?Upd allocations; also whse, sched ship date if processing all records
 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 //?FP1054 upd prod warehouse
 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse);
 PARAMETER(NLL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(CHG Inv. Allocation    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1426350;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(LCL.Production_Warehouse);
 //?Upd allocations; also whse, sched ship date if processing all records
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?*cancelled line will be processed
 EXECUTE FUNCTION(CHG Inv. Allocation    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1426350;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Extended_Amount);
 PARAMETER(PAR.Quantity_Scheduled);
 PARAMETER(PAR.Weight_Scheduled);
 PARAMETER(DB1.Production_Warehouse);
 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Upd warehouse change
 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 //?FP1054 upd prod warehouse
 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(LCL.Production_Warehouse);
 PARAMETER(NLL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(CHG Inv. Allocation    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1426350;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Quantity_Scheduled);
 PARAMETER(DB1.Weight_Scheduled);
 PARAMETER(LCL.Production_Warehouse);
 //?Upd warehouse change
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?*cancelled line will be processed
 EXECUTE FUNCTION(CHG Inv. Allocation    CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1426350;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.Quantity_Scheduled);
 PARAMETER(DB1.Weight_Scheduled);
 PARAMETER(DB1.Production_Warehouse);
 ENDIF;

 ENDIF;

 //?If 1 line # passed in, only process that line
 CASE;

 // IF PAR.Order Sequence Number is not equal to zero
 IF PAR.Order_Sequence_Number <> *ZERO;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(RTV Prod. Hold All     RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426349;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Production_Hold);
{
 //?USER: Initialize routine

 // PAR.Production Hold = CND.No
 PAR.Production_Hold = 'N';

 //?USER: Process Data record

 //?Assume no hold; if find a line with some qty not allocated, is on hold.
 CASE;

 // IF DB1.Quantity Scheduled LT DB1.Quantity Ordered
 IF DB1.Quantity_Scheduled < DB1.Quantity_Ordered;

 // PAR.Production Hold = CND.Yes
 PAR.Production_Hold = 'Y';

 QUIT;

 ENDIF;

}


