// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLW4XFR
// ?Date: 14.08.2025 Time: 02:55:41
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?From Date
// LCL.Date CDE USR = CVTVAR(JOB.*Job date)
LCL.Date_CDE_USR = CVTVAR(JOB.*Job_date);

// LCL.Date From Convert USR = LCL.Date CDE USR
LCL.Date_From_Convert_USR = LCL.Date_CDE_USR;

// Call program Cvt Date              UP.
CALL PROGRAM(Cvt Date              UP) ('PKPOUPR');
PARAMETER(LCL.Date_From_Convert_USR);
PARAMETER(LCL.Date_To_Convert_USR);
PARAMETER(*CYMD);
PARAMETER(*YYMD);
PARAMETER(*NONE);

// LCL.Date To Format USR = LCL.Date To Convert USR
LCL.Date_To_Format_USR = LCL.Date_To_Convert_USR;

// LCL.MGL Entry Date = CVTVAR(LCL.Date To Format USR)
LCL.MGL_Entry_Date = CVTVAR(LCL.Date_To_Format_USR);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.VCH_Company_number);
PARAMETER('M3HPEVCH');
PARAMETER(LCL.Live_with_M3_USR);

// Call program Rtv Company Value Nbr XF.
CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
PARAMETER(PAR.VCH_Company_number);
PARAMETER('M3COMPANY');
PARAMETER(LCL.MGL_Company);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.VCH_Company_number);
PARAMETER('M3DIVISION');
PARAMETER(LCL.MGL_Division);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.VCH_Company_number);
PARAMETER('M3FACILITY');
PARAMETER(LCL.M3_Facility_Usr);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.VCH_Company_number);
PARAMETER('M3HPEAUTH');
PARAMETER(LCL.MGL_Authorized_user);

EXECUTE FUNCTION(Rtv Crt M3 Vchr Head  RT) TYPE(RTVOBJ) FILE(PKBKCPP)           AB1324744;
PARAMETER(PAR.VCH_Company_number);
PARAMETER(PAR.VCH_Batch_Number);
PARAMETER(LCL.Live_with_M3_USR);
PARAMETER(LCL.MGL_Company);
PARAMETER(LCL.MGL_Division);
PARAMETER(LCL.MGL_Entry_Date);
PARAMETER(LCL.MGL_Authorized_user);
PARAMETER(LCL.M3_Facility_Usr);
{
 //?USER: Initialize routine

 // LCL.MGL Voucher Number Series = CON.HPE
 LCL.MGL_Voucher_Number_Series = 'HPE';

 // PAR.MGL Get Payee Defaults = CND.Get Payee Defaults
 PAR.MGL_Get_Payee_Defaults = 1;

 // PAR.MGL Currency = CON.*BLANK
 PAR.MGL_Currency = *BLANK;

 // PAR.MGL Payment Terms = CON.*BLANK
 PAR.MGL_Payment_Terms = *BLANK;

 // PAR.MGL Payment Method = CON.*BLANK
 PAR.MGL_Payment_Method = *BLANK;

 //?USER: Process Data record

 //?Each detail will have a diff invoice batch number
 //?Invoice Date
 // LCL.Date CDE USR = CVTVAR(DB1.VCH G/L Date)
 LCL.Date_CDE_USR = CVTVAR(DB1.VCH_G_L_Date);

 // LCL.Date From Convert USR = LCL.Date CDE USR
 LCL.Date_From_Convert_USR = LCL.Date_CDE_USR;

 // Call program Cvt Date              UP.
 CALL PROGRAM(Cvt Date              UP) ('PKPOUPR');
 PARAMETER(LCL.Date_From_Convert_USR);
 PARAMETER(LCL.Date_To_Convert_USR);
 PARAMETER(*CYMD);
 PARAMETER(*YYMD);
 PARAMETER(*NONE);

 // LCL.Date To Format USR = LCL.Date To Convert USR
 LCL.Date_To_Format_USR = LCL.Date_To_Convert_USR;

 // LCL.MGL Invoice Date = CVTVAR(LCL.Date To Format USR)
 LCL.MGL_Invoice_Date = CVTVAR(LCL.Date_To_Format_USR);

 //?Supplier invoice
 // LCL.MGL Job Number = CVTVAR(JOB.*Job number)
 LCL.MGL_Job_Number = CVTVAR(JOB.*Job_number);

 CASE;

 // IF DB1.VCH Payee Type is Internal
 IF DB1.VCH_Payee_Type = 'I';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Crt M3 Vchr Line  RT) TYPE(RTVOBJ) FILE(PKBLCPP)           AB1324745;
 PARAMETER(DB1.VCH_Company_number);
 PARAMETER(DB1.VCH_Batch_Number);
 PARAMETER(DB1.VCH_Header_Number);
 PARAMETER(1);
 PARAMETER(PAR.MGL_Company);
 PARAMETER(PAR.MGL_Division);
 PARAMETER('20');
 PARAMETER(10);
 PARAMETER(LCL.MGL_Invoice_Date);
 PARAMETER(PAR.MGL_Currency);
 PARAMETER(PAR.MGL_Payment_Terms);
 PARAMETER(0);
 PARAMETER(*ZERO);
 PARAMETER(PAR.MGL_Payment_Method);
 PARAMETER(LCL.MGL_Voucher_Number_Series);
 PARAMETER(LCL.MGL_Description);
 PARAMETER(PAR.MGL_Get_Payee_Defaults);
 PARAMETER(LCL.MGL_Job_Number);
 PARAMETER(PAR.MGL_Entry_Date);
 PARAMETER(PAR.MGL_Authorized_user);
 PARAMETER(LCL.MGL_Reference_Number);
 PARAMETER(DB1.VCH_Payee_Type);
 PARAMETER(PAR.Live_with_M3_USR);
 PARAMETER(DB1.TRK_Trucker_Code);
 PARAMETER(DB1.VCH_Split_Check_Sts);
 PARAMETER(PAR.M3_Facility_Usr);
 PARAMETER(DB1.VCH_AP_Address_Number);
 {
  //?USER: Initialize routine

  // LCL.Held Over Record Ld = CND.No
  LCL.Held_Over_Record_Ld = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
  PARAMETER('S2D');
  PARAMETER(LCL.MGL_Invoice_Batch_Number);
  {
   //?USER: Process Data record

   // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
   PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

   //?Increment
   // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
   LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

   CASE;

   // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
   IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

   // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
   LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

   ENDIF;

   EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
   PARAMETER(DB1.M3_Voucher_Number_Series);
   PARAMETER(DB1.M3_Voucher_Description);
   PARAMETER(DB1.M3_Voucher_Low_Number);
   PARAMETER(DB1.M3_Voucher_High_Number);
   PARAMETER(LCL.M3_Voucher_Next_Number);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
  PARAMETER('HPE');
  PARAMETER(LCL.MGL_Voucher_Number);
  {
   //?USER: Process Data record

   // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
   PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

   //?Increment
   // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
   LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

   CASE;

   // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
   IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

   // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
   LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

   ENDIF;

   EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
   PARAMETER(DB1.M3_Voucher_Number_Series);
   PARAMETER(DB1.M3_Voucher_Description);
   PARAMETER(DB1.M3_Voucher_Low_Number);
   PARAMETER(DB1.M3_Voucher_High_Number);
   PARAMETER(LCL.M3_Voucher_Next_Number);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?Supplier invoice
  CASE;

  // IF PAR.VCH Payee Type is Trucker
  IF PAR.VCH_Payee_Type = 'T';

  EXECUTE FUNCTION(Rtv Trucker Name) TYPE(RTVOBJ) FILE(PKBAREP)                   AB1113396;
  PARAMETER(PAR.TRK_Trucker_Code);
  PARAMETER(LCL.TRK_Name);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.MGL Description = LCL.TRK Name
  LCL.MGL_Description = LCL.TRK_Name;

  // LCL.MGL AP Additional Info = PAR.TRK Trucker Code
  LCL.MGL_AP_Additional_Info = PAR.TRK_Trucker_Code;

  //?Guymon Trucker
  CASE;

  // IF DB1.VCH Company number is SBD Farms of Guymon, Ok
  IF DB1.VCH_Company_number = 360;

  // LCL.Buy Order Number Alpha = DB1.BOH Buy Order Number
  LCL.Buy_Order_Number_Alpha = DB1.BOH_Buy_Order_Number;

  // LCL.Buy Order Load 4 USR = DB1.BOL Load Number
  LCL.Buy_Order_Load_4_USR = DB1.BOL_Load_Number;

  // LCL.Buy Order Load Alpha 4 = LCL.Buy Order Load 4 USR
  LCL.Buy_Order_Load_Alpha_4 = LCL.Buy_Order_Load_4_USR;

  //?RMC WI 475 BO increase to 7.0 from 5.0
  // LCL.Text 8 USR = CONCAT(LCL.Buy Order Number Alpha,CON.-,CON.*ZERO)
  LCL.Text_8_USR = LCL.Buy_Order_Number_Alpha + '-' (*ZERO);

  // LCL.Text 12 USR = CONCAT(LCL.Text 8 USR,LCL.Buy Order Load Alpha 4,CON.*ZERO)
  LCL.Text_12_USR = LCL.Text_8_USR + LCL.Buy_Order_Load_Alpha_4 (*ZERO);

  // LCL.MGL Supplier Invoice Nbr = CONCAT(LCL.Text 12 USR,PAR.PD Name,CON.1)
  LCL.MGL_Supplier_Invoice_Nbr = LCL.Text_12_USR + PAR.PD_Name (1);

  ENDIF;

  //?Triumph Trucker - supplier inv same format as GUYMON's check's suppl inv
  CASE;

  // IF DB1.VCH Company number is Triumph Foods Market
  IF DB1.VCH_Company_number = 960;

  // OR DB1.VCH Company number is Triumph Foods-2
  OR DB1.VCH_Company_number = 961;

  // LCL.Buy Order Number Alpha = DB1.BOH Buy Order Number
  LCL.Buy_Order_Number_Alpha = DB1.BOH_Buy_Order_Number;

  // LCL.Buy Order Load 4 USR = DB1.BOL Load Number
  LCL.Buy_Order_Load_4_USR = DB1.BOL_Load_Number;

  // LCL.Buy Order Load Alpha 4 = LCL.Buy Order Load 4 USR
  LCL.Buy_Order_Load_Alpha_4 = LCL.Buy_Order_Load_4_USR;

  // LCL.Tattoo Nbr 4          USR = DB1.TH Tattoo Number
  LCL.Tattoo_Nbr_4_USR = DB1.TH_Tattoo_Number;

  // LCL.Tattoo Nbr Alpha 4    USR = LCL.Tattoo Nbr 4          USR
  LCL.Tattoo_Nbr_Alpha_4_USR = LCL.Tattoo_Nbr_4_USR;

  // LCL.Buy Order Load Alpha = CONCAT(LCL.Buy Order Load Alpha 4,CON.-,CON.*ZERO)
  LCL.Buy_Order_Load_Alpha = LCL.Buy_Order_Load_Alpha_4 + '-' (*ZERO);

  //?RMC WI 475 BO increase to 7.0 from 5.0
  // LCL.Text 8 USR = CONCAT(LCL.Buy Order Number Alpha,CON.-,CON.*ZERO)
  LCL.Text_8_USR = LCL.Buy_Order_Number_Alpha + '-' (*ZERO);

  // LCL.Text 13 USR = CONCAT(LCL.Text 8 USR,LCL.Buy Order Load Alpha,CON.*ZERO)
  LCL.Text_13_USR = LCL.Text_8_USR + LCL.Buy_Order_Load_Alpha (*ZERO);

  // LCL.Text 17 USR = CONCAT(LCL.Text 13 USR,LCL.Tattoo Nbr Alpha 4    USR,CON.*ZERO)
  LCL.Text_17_USR = LCL.Text_13_USR + LCL.Tattoo_Nbr_Alpha_4_USR (*ZERO);

  // LCL.MGL Supplier Invoice Nbr = LCL.Text 17 USR
  LCL.MGL_Supplier_Invoice_Nbr = LCL.Text_17_USR;

  ENDIF;

  //?Sioux Trucker - supplier inv same format as GUYMON's check's suppl inv
  CASE;

  // IF DB1.VCH Company number is Sioux City
  IF DB1.VCH_Company_number = 440;

  // LCL.Buy Order Number Alpha = DB1.BOH Buy Order Number
  LCL.Buy_Order_Number_Alpha = DB1.BOH_Buy_Order_Number;

  // LCL.Buy Order Load 4 USR = DB1.BOL Load Number
  LCL.Buy_Order_Load_4_USR = DB1.BOL_Load_Number;

  // LCL.Buy Order Load Alpha 4 = LCL.Buy Order Load 4 USR
  LCL.Buy_Order_Load_Alpha_4 = LCL.Buy_Order_Load_4_USR;

  // LCL.Tattoo Nbr 4          USR = DB1.TH Tattoo Number
  LCL.Tattoo_Nbr_4_USR = DB1.TH_Tattoo_Number;

  // LCL.Tattoo Nbr Alpha 4    USR = LCL.Tattoo Nbr 4          USR
  LCL.Tattoo_Nbr_Alpha_4_USR = LCL.Tattoo_Nbr_4_USR;

  // LCL.Buy Order Load Alpha = CONCAT(LCL.Buy Order Load Alpha 4,CON.-,CON.*ZERO)
  LCL.Buy_Order_Load_Alpha = LCL.Buy_Order_Load_Alpha_4 + '-' (*ZERO);

  //?RMC WI 475 BO increase to 7.0 from 5.0
  // LCL.Text 8 USR = CONCAT(LCL.Buy Order Number Alpha,CON.-,CON.*ZERO)
  LCL.Text_8_USR = LCL.Buy_Order_Number_Alpha + '-' (*ZERO);

  // LCL.Text 13 USR = CONCAT(LCL.Text 8 USR,LCL.Buy Order Load Alpha,CON.*ZERO)
  LCL.Text_13_USR = LCL.Text_8_USR + LCL.Buy_Order_Load_Alpha (*ZERO);

  // LCL.Text 17 USR = CONCAT(LCL.Text 13 USR,LCL.Tattoo Nbr Alpha 4    USR,CON.*ZERO)
  LCL.Text_17_USR = LCL.Text_13_USR + LCL.Tattoo_Nbr_Alpha_4_USR (*ZERO);

  // LCL.MGL Supplier Invoice Nbr = LCL.Text 17 USR
  LCL.MGL_Supplier_Invoice_Nbr = LCL.Text_17_USR;

  ENDIF;

  EXECUTE FUNCTION(Rtv Trucker M3 Payer# RT) TYPE(RTVOBJ) FILE(PKBAREP)           AB1326293;
  PARAMETER(PAR.TRK_Trucker_Code);
  PARAMETER(LCL.M3_Supplier_ID);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.MGL Payee = LCL.M3 Supplier ID
  LCL.MGL_Payee = LCL.M3_Supplier_ID;

  // LCL.MGL Supplier = LCL.M3 Supplier ID
  LCL.MGL_Supplier = LCL.M3_Supplier_ID;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?360 Format Supplier invoice number  - prints on check stub
  CASE;

  // IF DB1.VCH Company number is SBD Farms of Guymon, Ok
  IF DB1.VCH_Company_number = 360;

  // LCL.Buy Order Number Alpha = DB1.BOH Buy Order Number
  LCL.Buy_Order_Number_Alpha = DB1.BOH_Buy_Order_Number;

  // LCL.Buy Order Load 4 USR = DB1.BOL Load Number
  LCL.Buy_Order_Load_4_USR = DB1.BOL_Load_Number;

  // LCL.Buy Order Load Alpha 4 = LCL.Buy Order Load 4 USR
  LCL.Buy_Order_Load_Alpha_4 = LCL.Buy_Order_Load_4_USR;

  // LCL.Tattoo Nbr 4          USR = DB1.TH Tattoo Number
  LCL.Tattoo_Nbr_4_USR = DB1.TH_Tattoo_Number;

  // LCL.Tattoo Nbr Alpha 4    USR = LCL.Tattoo Nbr 4          USR
  LCL.Tattoo_Nbr_Alpha_4_USR = LCL.Tattoo_Nbr_4_USR;

  // LCL.Buy Order Load Alpha = CONCAT(LCL.Buy Order Load Alpha 4,CON.-,CON.*ZERO)
  LCL.Buy_Order_Load_Alpha = LCL.Buy_Order_Load_Alpha_4 + '-' (*ZERO);

  //?RMC WI 475 BO increase to 7.0 from 5.0
  // LCL.Text 8 USR = CONCAT(LCL.Buy Order Number Alpha,CON.-,CON.*ZERO)
  LCL.Text_8_USR = LCL.Buy_Order_Number_Alpha + '-' (*ZERO);

  // LCL.Text 13 USR = CONCAT(LCL.Text 8 USR,LCL.Buy Order Load Alpha,CON.*ZERO)
  LCL.Text_13_USR = LCL.Text_8_USR + LCL.Buy_Order_Load_Alpha (*ZERO);

  // LCL.Text 17 USR = CONCAT(LCL.Text 13 USR,LCL.Tattoo Nbr Alpha 4    USR,CON.*ZERO)
  LCL.Text_17_USR = LCL.Text_13_USR + LCL.Tattoo_Nbr_Alpha_4_USR (*ZERO);

  // LCL.MGL Supplier Invoice Nbr = LCL.Text 17 USR
  LCL.MGL_Supplier_Invoice_Nbr = LCL.Text_17_USR;

  ENDIF;

  //?960 Format Supplier invoice number -  prints on check stub
  CASE;

  // IF DB1.VCH Company number is Triumph Foods Market
  IF DB1.VCH_Company_number = 960;

  // OR DB1.VCH Company number is Triumph Foods-2
  OR DB1.VCH_Company_number = 961;

  // LCL.Buy Order Number Alpha = DB1.BOH Buy Order Number
  LCL.Buy_Order_Number_Alpha = DB1.BOH_Buy_Order_Number;

  // LCL.Buy Order Load 4 USR = DB1.BOL Load Number
  LCL.Buy_Order_Load_4_USR = DB1.BOL_Load_Number;

  // LCL.Buy Order Load Alpha 4 = LCL.Buy Order Load 4 USR
  LCL.Buy_Order_Load_Alpha_4 = LCL.Buy_Order_Load_4_USR;

  // LCL.Tattoo Nbr 4          USR = DB1.TH Tattoo Number
  LCL.Tattoo_Nbr_4_USR = DB1.TH_Tattoo_Number;

  // LCL.Tattoo Nbr Alpha 4    USR = LCL.Tattoo Nbr 4          USR
  LCL.Tattoo_Nbr_Alpha_4_USR = LCL.Tattoo_Nbr_4_USR;

  // LCL.Buy Order Load Alpha = CONCAT(LCL.Buy Order Load Alpha 4,CON.-,CON.*ZERO)
  LCL.Buy_Order_Load_Alpha = LCL.Buy_Order_Load_Alpha_4 + '-' (*ZERO);

  //?RMC WI 475 BO increase to 7.0 from 5.0
  // LCL.Text 8 USR = CONCAT(LCL.Buy Order Number Alpha,CON.-,CON.*ZERO)
  LCL.Text_8_USR = LCL.Buy_Order_Number_Alpha + '-' (*ZERO);

  // LCL.Text 13 USR = CONCAT(LCL.Text 8 USR,LCL.Buy Order Load Alpha,CON.*ZERO)
  LCL.Text_13_USR = LCL.Text_8_USR + LCL.Buy_Order_Load_Alpha (*ZERO);

  // LCL.Text 17 USR = CONCAT(LCL.Text 13 USR,LCL.Tattoo Nbr Alpha 4    USR,CON.*ZERO)
  LCL.Text_17_USR = LCL.Text_13_USR + LCL.Tattoo_Nbr_Alpha_4_USR (*ZERO);

  // LCL.MGL Supplier Invoice Nbr = LCL.Text 17 USR
  LCL.MGL_Supplier_Invoice_Nbr = LCL.Text_17_USR;

  ENDIF;

  //?440 Format Supplier invoice number -  prints on check stub
  CASE;

  // IF DB1.VCH Company number is Sioux City
  IF DB1.VCH_Company_number = 440;

  // LCL.Buy Order Number Alpha = DB1.BOH Buy Order Number
  LCL.Buy_Order_Number_Alpha = DB1.BOH_Buy_Order_Number;

  // LCL.Buy Order Load 4 USR = DB1.BOL Load Number
  LCL.Buy_Order_Load_4_USR = DB1.BOL_Load_Number;

  // LCL.Buy Order Load Alpha 4 = LCL.Buy Order Load 4 USR
  LCL.Buy_Order_Load_Alpha_4 = LCL.Buy_Order_Load_4_USR;

  // LCL.Tattoo Nbr 4          USR = DB1.TH Tattoo Number
  LCL.Tattoo_Nbr_4_USR = DB1.TH_Tattoo_Number;

  // LCL.Tattoo Nbr Alpha 4    USR = LCL.Tattoo Nbr 4          USR
  LCL.Tattoo_Nbr_Alpha_4_USR = LCL.Tattoo_Nbr_4_USR;

  // LCL.Buy Order Load Alpha = CONCAT(LCL.Buy Order Load Alpha 4,CON.-,CON.*ZERO)
  LCL.Buy_Order_Load_Alpha = LCL.Buy_Order_Load_Alpha_4 + '-' (*ZERO);

  //?RMC WI 475 BO increase to 7.0 from 5.0
  // LCL.Text 8 USR = CONCAT(LCL.Buy Order Number Alpha,CON.-,CON.*ZERO)
  LCL.Text_8_USR = LCL.Buy_Order_Number_Alpha + '-' (*ZERO);

  // LCL.Text 13 USR = CONCAT(LCL.Text 8 USR,LCL.Buy Order Load Alpha,CON.*ZERO)
  LCL.Text_13_USR = LCL.Text_8_USR + LCL.Buy_Order_Load_Alpha (*ZERO);

  // LCL.Text 17 USR = CONCAT(LCL.Text 13 USR,LCL.Tattoo Nbr Alpha 4    USR,CON.*ZERO)
  LCL.Text_17_USR = LCL.Text_13_USR + LCL.Tattoo_Nbr_Alpha_4_USR (*ZERO);

  // LCL.MGL Supplier Invoice Nbr = LCL.Text 17 USR
  LCL.MGL_Supplier_Invoice_Nbr = LCL.Text_17_USR;

  ENDIF;

  //?USE ap addresOFF OF VCH HEADER. DETAIL WONT HAVE SPLIT PRDCR, IF SPLIT
  //?RMC SDN 440 8/13/21
  //?if M3 is live, then format the div||Vnd to get the supplier.
  //?  else the E1 Vnd is in the Voucher Header, so use it to get M3 Supplier
  CASE;

  // IF PAR.Live with M3   USR is Yes
  IF PAR.Live_with_M3_USR = 'Y';

  // WRK.VCH Address  # 7,0    usr = PAR.VCH AP Address Number
  WRK.VCH_Address_#_70_usr = PAR.VCH_AP_Address_Number;

  // WRK.Text 7 USR = WRK.VCH Address  # 7,0    usr
  WRK.Text_7_USR = WRK.VCH_Address_#_70_usr;

  // LCL.M3 Supplier ID = CONCAT(PAR.MGL Division,WRK.Text 7 USR,CON.*ZERO)
  LCL.M3_Supplier_ID = PAR.MGL_Division + WRK.Text_7_USR (*ZERO);

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?get the m3 supplier from the e1 vendor # thats in the vch hdr
  EXECUTE FUNCTION(Rtv M3 Supp w/E1 Vnd  RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1370501;
  PARAMETER(PAR.VCH_AP_Address_Number);
  PARAMETER(LCL.M3_Supplier_ID);
  {
   //?USER: Process Data record

   //?Get M3 supplier using E1 Vnd# -- sdn440
   EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(PAR.M3_Supplier_ID);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

  ENDIF;

  // LCL.MGL Payee = LCL.M3 Supplier ID
  LCL.MGL_Payee = LCL.M3_Supplier_ID;

  // LCL.MGL Supplier = LCL.M3 Supplier ID
  LCL.MGL_Supplier = LCL.M3_Supplier_ID;

  //?E13055 JJH 05/15/18 - Get MGL Description from M3 Supplier,
  //? force producer code to TRMPH if source is TO
  EXECUTE FUNCTION(Rtv Producer EXT2-NM  RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1333770;
  PARAMETER(LCL.M3_Supplier_ID);
  PARAMETER(LCL.PD_Producer_Code);
  PARAMETER(NLL.PD_Name);
  PARAMETER(LCL.SR_Source_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: PAR);

   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Producer Nm, Srce RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1162488;
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(PAR.PD_Name);
   PARAMETER(PAR.SR_Source_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.PD Producer Code = DB1.PD Producer Code
   PAR.PD_Producer_Code = DB1.PD_Producer_Code;

  }

  EXECUTE FUNCTION(Rtv M3 Supplier Name  RT) TYPE(RTVOBJ) FILE(PLB2REP)           AB1345282;
  PARAMETER(LCL.M3_Supplier_ID);
  PARAMETER(LCL.PD_Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.SR Source Code is Triumph Member (Owner)
  IF LCL.SR_Source_Code = 'TO';

  // LCL.PD Producer Code = CND.Triumph
  LCL.PD_Producer_Code = 'TRMPH';

  ENDIF;

  EXECUTE FUNCTION(Rtv Src Cntrt Type    RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1289967;
  PARAMETER(LCL.SR_Source_Code);
  PARAMETER(LCL.SR_Source_Contract_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.MGL Description = LCL.PD Name
  LCL.MGL_Description = LCL.PD_Name;

  // LCL.MGL AP Additional Info = LCL.PD Producer Code
  LCL.MGL_AP_Additional_Info = LCL.PD_Producer_Code;

  EXECUTE FUNCTION(Rtv Held Over Y/N     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1325233;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(LCL.TH_Hog_Class_Type);
  PARAMETER(LCL.Held_Over_Record_Ld);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.TH Held Over Record is Yes
   IF DB1.TH_Held_Over_Record = 'Y';

   // PAR.Held Over Record Ld = CND.Yes
   PAR.Held_Over_Record_Ld = 'Y';

   ENDIF;

   // PAR.TH Hog Class Type = DB1.TH Hog Class Type
   PAR.TH_Hog_Class_Type = DB1.TH_Hog_Class_Type;

  }

  ENDIF;

  EXECUTE FUNCTION(Crt M3 Supp Paym Head CR) TYPE(CRTOBJ) FILE(PLCCCPP)           AB1324724;
  PARAMETER(PAR.MGL_Company);
  PARAMETER(PAR.MGL_Division);
  PARAMETER(LCL.MGL_Invoice_Batch_Number);
  PARAMETER(LCL.MGL_Payee);
  PARAMETER(LCL.MGL_Supplier);
  PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
  PARAMETER('20');
  PARAMETER(10);
  PARAMETER(PAR.MGL_Invoice_Date);
  PARAMETER(PAR.MGL_Currency);
  PARAMETER(PAR.MGL_Payment_Terms);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.VCD_Gross_Amt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(0);
  PARAMETER(*ZERO);
  PARAMETER(PAR.MGL_Payment_Method);
  PARAMETER(PAR.MGL_Voucher_Number_Series);
  PARAMETER(LCL.MGL_Voucher_Number);
  PARAMETER(LCL.MGL_Description);
  PARAMETER(01);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.MGL_Get_Payee_Defaults);
  PARAMETER(PAR.MGL_Job_Number);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(PAR.MGL_Entry_Date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.MGL_Authorized_user);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(0);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Chg M3 Supp Paym Head CH) TYPE(CHGOBJ) FILE(PLCCCPP)           AB1324725;
   PARAMETER(DB1.MGL_Company);
   PARAMETER(DB1.MGL_Division);
   PARAMETER(DB1.MGL_Invoice_Batch_Number);
   PARAMETER(DB1.MGL_Payee);
   PARAMETER(DB1.MGL_Supplier);
   PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
   PARAMETER(DB1.MGL_Invoice_Batch_Type);
   PARAMETER(DB1.MGL_Invoice_Status);
   PARAMETER(DB1.MGL_Invoice_Date);
   PARAMETER(DB1.MGL_Currency);
   PARAMETER(DB1.MGL_Payment_Terms);
   PARAMETER(DB1.MGL_Total_Line_Amt_Net);
   PARAMETER(DB1.MGL_Cash_Discount_Base);
   PARAMETER(DB1.MGL_Foreign_Currency_Amt);
   PARAMETER(DB1.MGL_Total_Charges);
   PARAMETER(DB1.MGL_Total_Due);
   PARAMETER(DB1.MGL_Invoice_Matching);
   PARAMETER(DB1.MGL_Service_Code);
   PARAMETER(DB1.MGL_Payment_Method);
   PARAMETER(DB1.MGL_Voucher_Number_Series);
   PARAMETER(DB1.MGL_Voucher_Number);
   PARAMETER(DB1.MGL_Description);
   PARAMETER(DB1.MGL_Exchange_Rate_Type);
   PARAMETER(DB1.MGL_Purchase_Order_Nbr);
   PARAMETER(DB1.MGL_Cash_discount_Term);
   PARAMETER(DB1.MGL_Get_Payee_Defaults);
   PARAMETER(DB1.MGL_Job_Number);
   PARAMETER(DB1.MGL_Job_Name);
   PARAMETER(DB1.MGL_Entry_Date);
   PARAMETER(DB1.MGL_Entry_Time);
   PARAMETER(DB1.MGL_Reference_Number);
   PARAMETER(DB1.MGL_Exchange_rate);
   PARAMETER(DB1.MGL_Trade_code);
   PARAMETER(DB1.MGL_VAT);
   PARAMETER(DB1.MGL_Accounting_date);
   PARAMETER(DB1.MGL_Authorized_user);
   PARAMETER(DB1.MGL_Due_date);
   PARAMETER(DB1.MGL_Future_rate_agreement);
   PARAMETER(DB1.MGL_From_to_country);
   PARAMETER(DB1.MGL_Base_country);
   PARAMETER(DB1.MGL_Order_date);
   PARAMETER(DB1.MGL_Cash_discount_date_1);
   PARAMETER(DB1.MGL_Cash_discount_pct_1);
   PARAMETER(DB1.MGL_Cash_discount_Amt_1);
   PARAMETER(DB1.MGL_Cash_discount_date_2);
   PARAMETER(DB1.MGL_Cash_discount_amt_2);
   PARAMETER(DB1.MGL_Cash_discount_pct_2);
   PARAMETER(DB1.MGL_Cash_discount_date_3);
   PARAMETER(DB1.MGL_Cash_discount_pct_3);
   PARAMETER(DB1.MGL_Cash_discount_amt_3);
   PARAMETER(DB1.MGL_Total_taxable_amount);
   PARAMETER(DB1.MGL_Prepaid_amount);
   PARAMETER(DB1.MGL_VAT_reg_number);
   PARAMETER(DB1.MGL_Tax_applicable);
   PARAMETER(DB1.MGL_Document_code);
   PARAMETER(DB1.MGL_AP_standard_document);
   PARAMETER(DB1.MGL_Debit_note_reason);
   PARAMETER(DB1.MGL_Our_invoicing_address);
   PARAMETER(DB1.MGL_Text_line_1);
   PARAMETER(DB1.MGL_Text_line_2);
   PARAMETER(DB1.MGL_Text_line_3);
   PARAMETER(DB1.MGL_EAN_loc_code_payee);
   PARAMETER(DB1.MGL_EAN_loc_cde_Consignee);
   PARAMETER(DB1.MGL_EAN_loc_code_supplier);
   PARAMETER(DB1.MGL_Delivery_date);
   PARAMETER(DB1.MGL_Bank_account_identity);
   PARAMETER(DB1.MGL_Geographical_code);
   PARAMETER(DB1.MGL_Tax_included);
   PARAMETER(DB1.MGL_Original_invoice_nbr);
   PARAMETER(DB1.MGL_Original_year);
   PARAMETER(DB1.MGL_Payment_request_nbr);
   PARAMETER(DB1.MGL_Year);
   PARAMETER(DB1.MGL_Partial_validation);
   PARAMETER(DB1.MGL_ERP_Process_Sts);
   PARAMETER(DB1.MGL_ERP_Process_Date);
   PARAMETER(DB1.MGL_ERP_Process_Time);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
  PARAMETER(PAR.MGL_Company);
  PARAMETER(PAR.MGL_Division);
  PARAMETER(LCL.MGL_Invoice_Batch_Number);
  PARAMETER(412);
  PARAMETER(LCL.MGL_AP_Additional_Info);
  PARAMETER(1);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.MGL_Entry_Date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(JOB.*USER);
  EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
  PARAMETER(PAR.MGL_Company);
  PARAMETER(PAR.MGL_Division);
  PARAMETER(LCL.MGL_Invoice_Batch_Number);
  PARAMETER(413);
  PARAMETER(PAR.M3_Facility_Usr);
  PARAMETER(1);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.MGL_Entry_Date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(JOB.*USER);
  //? DO -- when live/parallel - update hog voucher detail with M3 voucher
  CASE;

  // IF PAR.Live with M3   USR is Live or Parallel
  IF PAR.Live_with_M3_USR = 'P'/'Y';

  //?************   add parallel to the above when ready to
  EXECUTE FUNCTION(Chg Voucher ERP Flds  CH) TYPE(CHGOBJ) FILE(PKBLCPP)           AB1324971;
  PARAMETER(DB1.VCH_Company_number);
  PARAMETER(DB1.VCH_Batch_Number);
  PARAMETER(DB1.VCH_Header_Number);
  PARAMETER(DB1.VCD_Line);
  PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
  PARAMETER(LCL.MGL_Voucher_Number);
  PARAMETER(LCL.MGL_Invoice_Batch_Number);
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?if M3 Live, update TH, BOL
  CASE;

  // IF PAR.Live with M3   USR is Yes
  IF PAR.Live_with_M3_USR = 'Y';

  CASE;

  // IF PAR.VCH Payee Type is Truck Checks
  IF PAR.VCH_Payee_Type = 'T';

  // Call program Rtv/Chg BOL Vchr Info XF.
  CALL PROGRAM(Rtv/Chg BOL Vchr Info XF) ('PKTJXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(LCL.MGL_Voucher_Number);

  ENDIF;

  CASE;

  // IF PAR.VCH Payee Type is Producer Checks
  IF PAR.VCH_Payee_Type = 'I'/'E';

  // Call program Rtv/Chg TH Vchr Info  XF.
  CALL PROGRAM(Rtv/Chg TH Vchr Info  XF) ('PKTKXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(LCL.MGL_Voucher_Number);

  ENDIF;

  ENDIF;

  ENDIF;

  //?Split -- write it out too
  CASE;

  // IF DB1.VCD Less Split Amount is Not Zeros
  IF DB1.VCD_Less_Split_Amount <> *ZERO;

  EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
  PARAMETER('S2D');
  PARAMETER(LCL.MGL_Invoice_Batch_Number);
  {
   //?USER: Process Data record

   // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
   PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

   //?Increment
   // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
   LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

   CASE;

   // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
   IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

   // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
   LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

   ENDIF;

   EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
   PARAMETER(DB1.M3_Voucher_Number_Series);
   PARAMETER(DB1.M3_Voucher_Description);
   PARAMETER(DB1.M3_Voucher_Low_Number);
   PARAMETER(DB1.M3_Voucher_High_Number);
   PARAMETER(LCL.M3_Voucher_Next_Number);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
  PARAMETER('HPE');
  PARAMETER(LCL.MGL_Voucher_Number);
  {
   //?USER: Process Data record

   // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
   PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

   //?Increment
   // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
   LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

   CASE;

   // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
   IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

   // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
   LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

   ENDIF;

   EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
   PARAMETER(DB1.M3_Voucher_Number_Series);
   PARAMETER(DB1.M3_Voucher_Description);
   PARAMETER(DB1.M3_Voucher_Low_Number);
   PARAMETER(DB1.M3_Voucher_High_Number);
   PARAMETER(LCL.M3_Voucher_Next_Number);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  // LCL.Name USR = LCL.MGL Description
  LCL.Name_USR = LCL.MGL_Description;

  // LCL.MGL Description = CONCAT(LCL.Name USR,CON.SPLIT,CON.1)
  LCL.MGL_Description = LCL.Name_USR + 'SPLIT' (1);

  //?RMC  Use SPLIT Debit note reason per member/non/resale.   4.14.17
  CASE;

  // IF LCL.TH Hog Class Type is Market
  IF LCL.TH_Hog_Class_Type = 'M';

  CASE;

  // IF LCL.SR Source Contract Type is Member (Owner)
  IF LCL.SR_Source_Contract_Type = 'M';

  // LCL.Ded D/A Code 1 USR = CND.Split Member Purch
  LCL.Ded_D_A_Code_1_USR = 'SMEMP';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Ded D/A Code 1 USR = CND.Split Non Member Purch
  LCL.Ded_D_A_Code_1_USR = 'SNMMP';

  ENDIF;

  // IF LCL.TH Hog Class Type is Resale
  IF LCL.TH_Hog_Class_Type = 'R';

  // LCL.Ded D/A Code 1 USR = CND.Split Resale
  LCL.Ded_D_A_Code_1_USR = 'SRSL';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Catchall
  // LCL.Ded D/A Code 1 USR = CND.Split Non Member Purch
  LCL.Ded_D_A_Code_1_USR = 'SNMMP';

  ENDIF;

  EXECUTE FUNCTION(Rtv M3 Debit Note Rsn RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1325097;
  PARAMETER(LCL.Ded_D_A_Code_1_USR);
  PARAMETER(LCL.DED_M3_Debit_Note_Reason);
  PARAMETER(LCL.DED_M3_Debt_Nt_Rsn_Contra);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.MGL Debit note reason = LCL.DED M3 Debit Note Reason
  LCL.MGL_Debit_note_reason = LCL.DED_M3_Debit_Note_Reason;

  EXECUTE FUNCTION(Crt M3 Supp Paym Head CR) TYPE(CRTOBJ) FILE(PLCCCPP)           AB1324724;
  PARAMETER(PAR.MGL_Company);
  PARAMETER(PAR.MGL_Division);
  PARAMETER(LCL.MGL_Invoice_Batch_Number);
  PARAMETER(LCL.MGL_Payee);
  PARAMETER(LCL.MGL_Supplier);
  PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
  PARAMETER('30');
  PARAMETER(10);
  PARAMETER(PAR.MGL_Invoice_Date);
  PARAMETER(PAR.MGL_Currency);
  PARAMETER(PAR.MGL_Payment_Terms);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.VCD_Less_Split_Amount);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(0);
  PARAMETER(*ZERO);
  PARAMETER(PAR.MGL_Payment_Method);
  PARAMETER(PAR.MGL_Voucher_Number_Series);
  PARAMETER(LCL.MGL_Voucher_Number);
  PARAMETER(LCL.MGL_Description);
  PARAMETER(01);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.MGL_Get_Payee_Defaults);
  PARAMETER(PAR.MGL_Job_Number);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(PAR.MGL_Entry_Date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.MGL_Authorized_user);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.MGL_Debit_note_reason);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(0);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Chg M3 Supp Paym Head CH) TYPE(CHGOBJ) FILE(PLCCCPP)           AB1324725;
   PARAMETER(DB1.MGL_Company);
   PARAMETER(DB1.MGL_Division);
   PARAMETER(DB1.MGL_Invoice_Batch_Number);
   PARAMETER(DB1.MGL_Payee);
   PARAMETER(DB1.MGL_Supplier);
   PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
   PARAMETER(DB1.MGL_Invoice_Batch_Type);
   PARAMETER(DB1.MGL_Invoice_Status);
   PARAMETER(DB1.MGL_Invoice_Date);
   PARAMETER(DB1.MGL_Currency);
   PARAMETER(DB1.MGL_Payment_Terms);
   PARAMETER(DB1.MGL_Total_Line_Amt_Net);
   PARAMETER(DB1.MGL_Cash_Discount_Base);
   PARAMETER(DB1.MGL_Foreign_Currency_Amt);
   PARAMETER(DB1.MGL_Total_Charges);
   PARAMETER(DB1.MGL_Total_Due);
   PARAMETER(DB1.MGL_Invoice_Matching);
   PARAMETER(DB1.MGL_Service_Code);
   PARAMETER(DB1.MGL_Payment_Method);
   PARAMETER(DB1.MGL_Voucher_Number_Series);
   PARAMETER(DB1.MGL_Voucher_Number);
   PARAMETER(DB1.MGL_Description);
   PARAMETER(DB1.MGL_Exchange_Rate_Type);
   PARAMETER(DB1.MGL_Purchase_Order_Nbr);
   PARAMETER(DB1.MGL_Cash_discount_Term);
   PARAMETER(DB1.MGL_Get_Payee_Defaults);
   PARAMETER(DB1.MGL_Job_Number);
   PARAMETER(DB1.MGL_Job_Name);
   PARAMETER(DB1.MGL_Entry_Date);
   PARAMETER(DB1.MGL_Entry_Time);
   PARAMETER(DB1.MGL_Reference_Number);
   PARAMETER(DB1.MGL_Exchange_rate);
   PARAMETER(DB1.MGL_Trade_code);
   PARAMETER(DB1.MGL_VAT);
   PARAMETER(DB1.MGL_Accounting_date);
   PARAMETER(DB1.MGL_Authorized_user);
   PARAMETER(DB1.MGL_Due_date);
   PARAMETER(DB1.MGL_Future_rate_agreement);
   PARAMETER(DB1.MGL_From_to_country);
   PARAMETER(DB1.MGL_Base_country);
   PARAMETER(DB1.MGL_Order_date);
   PARAMETER(DB1.MGL_Cash_discount_date_1);
   PARAMETER(DB1.MGL_Cash_discount_pct_1);
   PARAMETER(DB1.MGL_Cash_discount_Amt_1);
   PARAMETER(DB1.MGL_Cash_discount_date_2);
   PARAMETER(DB1.MGL_Cash_discount_amt_2);
   PARAMETER(DB1.MGL_Cash_discount_pct_2);
   PARAMETER(DB1.MGL_Cash_discount_date_3);
   PARAMETER(DB1.MGL_Cash_discount_pct_3);
   PARAMETER(DB1.MGL_Cash_discount_amt_3);
   PARAMETER(DB1.MGL_Total_taxable_amount);
   PARAMETER(DB1.MGL_Prepaid_amount);
   PARAMETER(DB1.MGL_VAT_reg_number);
   PARAMETER(DB1.MGL_Tax_applicable);
   PARAMETER(DB1.MGL_Document_code);
   PARAMETER(DB1.MGL_AP_standard_document);
   PARAMETER(DB1.MGL_Debit_note_reason);
   PARAMETER(DB1.MGL_Our_invoicing_address);
   PARAMETER(DB1.MGL_Text_line_1);
   PARAMETER(DB1.MGL_Text_line_2);
   PARAMETER(DB1.MGL_Text_line_3);
   PARAMETER(DB1.MGL_EAN_loc_code_payee);
   PARAMETER(DB1.MGL_EAN_loc_cde_Consignee);
   PARAMETER(DB1.MGL_EAN_loc_code_supplier);
   PARAMETER(DB1.MGL_Delivery_date);
   PARAMETER(DB1.MGL_Bank_account_identity);
   PARAMETER(DB1.MGL_Geographical_code);
   PARAMETER(DB1.MGL_Tax_included);
   PARAMETER(DB1.MGL_Original_invoice_nbr);
   PARAMETER(DB1.MGL_Original_year);
   PARAMETER(DB1.MGL_Payment_request_nbr);
   PARAMETER(DB1.MGL_Year);
   PARAMETER(DB1.MGL_Partial_validation);
   PARAMETER(DB1.MGL_ERP_Process_Sts);
   PARAMETER(DB1.MGL_ERP_Process_Date);
   PARAMETER(DB1.MGL_ERP_Process_Time);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
  PARAMETER(PAR.MGL_Company);
  PARAMETER(PAR.MGL_Division);
  PARAMETER(LCL.MGL_Invoice_Batch_Number);
  PARAMETER(412);
  PARAMETER(LCL.MGL_AP_Additional_Info);
  PARAMETER(1);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.MGL_Entry_Date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(JOB.*USER);
  EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
  PARAMETER(PAR.MGL_Company);
  PARAMETER(PAR.MGL_Division);
  PARAMETER(LCL.MGL_Invoice_Batch_Number);
  PARAMETER(413);
  PARAMETER(PAR.M3_Facility_Usr);
  PARAMETER(1);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.MGL_Entry_Date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(JOB.*USER);
  // LCL.MGL Description = LCL.Name USR
  LCL.MGL_Description = LCL.Name_USR;

  ENDIF;

  //?RMC 4/10/17 DONT CREATE D/A FOR SPLIT
  CASE;

  // IF PAR.VCH Split Check Sts is No
  IF PAR.VCH_Split_Check_Sts = 'N';

  //?Create batch header rcd for each deduction/addition
  CASE;

  // IF PAR.VCH Payee Type is Producer Checks
  IF PAR.VCH_Payee_Type = 'I'/'E';

  EXECUTE FUNCTION(Rtv/Crt M3 InvBtchHdr RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1324932;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(PAR.MGL_Company);
  PARAMETER(PAR.MGL_Division);
  PARAMETER(LCL.MGL_Payee);
  PARAMETER(LCL.MGL_Supplier);
  PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
  PARAMETER(PAR.MGL_Invoice_Date);
  PARAMETER(PAR.MGL_Currency);
  PARAMETER(PAR.MGL_Payment_Terms);
  PARAMETER(PAR.MGL_Payment_Method);
  PARAMETER(PAR.MGL_Voucher_Number_Series);
  PARAMETER(LCL.MGL_Description);
  PARAMETER(PAR.MGL_Get_Payee_Defaults);
  PARAMETER(PAR.MGL_Job_Number);
  PARAMETER(PAR.MGL_Entry_Date);
  PARAMETER(PAR.MGL_Authorized_user);
  PARAMETER(LCL.CHR_Description);
  PARAMETER(LCL.MGL_AP_Additional_Info);
  PARAMETER(DB1.VCD_Head_Killed);
  PARAMETER(PAR.Live_with_M3_USR);
  PARAMETER(LCL.Held_Over_Record_Ld);
  PARAMETER(PAR.M3_Facility_Usr);
  {
   //?USER: Initialize routine

   //?RMC 2/24/2022 SDN440 FOR TPALW CALCS
   //?              use head killed for the kill date -> not the total in par
   //?9/7/17 RMC 440 wont contra reason for TPALW -- chk for >blank
   //?** Create M3 Inv Batch header for each deduction/addition
   //?  with type = 30 = debit note, and reason code = d/a code
   //? For held over tattoo, the h/o d/a will already exist for the
   //? supplier invoice number (must be unique in M3), so add to it
   //?AP standard document must be 01 for these debit note records.
   //?USER: Process Data record

   //?EXPENSE PAID BY PRODUCER
   CASE;

   // IF DB1.THD Expense Paid by is Producer
   IF DB1.THD_Expense_Paid_by = 'P';

   //?Triumph Transp allowance accrual --> TPALW -- and frt allow accrl
   CASE;

   // IF DB1.DED D/A Code is Triumph Transport Allow
   IF DB1.DED_D_A_Code = 'TPALW';

   // Call program Rtv Company Value Nbr XF.
   CALL PROGRAM(Rtv Company Value Nbr XF) ('PDHGXFR');
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER('TPALW');
   PARAMETER(LCL.System_Value_Numeric_USR);

   // LCL.Percent Decimal       USR = LCL.System Value Numeric  USR
   LCL.Percent_Decimal_USR = LCL.System_Value_Numeric_USR;

   CASE;

   // IF LCL.System Value Numeric  USR is Not 0
   IF LCL.System_Value_Numeric_USR <> 0;

   //?RMC 2/24/2022 use head killed for the kill date -> not the total in par
   CASE;

   // IF PAR.Held Over Record Ld is Yes
   IF PAR.Held_Over_Record_Ld = 'Y';

   EXECUTE FUNCTION(Rtv Hd Killed         RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1371399;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(LCL.TH_Head_Killed);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // LCL.MGL Foreign Currency Amt = LCL.TH Head Killed * LCL.Percent Decimal       USR *
   LCL.MGL_Foreign_Currency_Amt = LCL.TH_Head_Killed * LCL.Percent_Decimal_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.MGL Foreign Currency Amt = PAR.VCD Head Killed * LCL.Percent Decimal       USR *
   LCL.MGL_Foreign_Currency_Amt = PAR.VCD_Head_Killed * LCL.Percent_Decimal_USR;

   ENDIF;

   EXECUTE FUNCTION(Rtv M3 Debit Note Rsn RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1325097;
   PARAMETER(DB1.DED_D_A_Code);
   PARAMETER(LCL.DED_M3_Debit_Note_Reason);
   PARAMETER(LCL.DED_M3_Debt_Nt_Rsn_Contra);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?HPPURFRT rcd     --- freight written as a debit
   // LCL.Text 6 USR = CONCAT(DB1.DED D/A Code,CON.+,CON.*ZERO)
   LCL.Text_6_USR = DB1.DED_D_A_Code + '+' (*ZERO);

   // LCL.MGL Supplier Invoice Nbr = CONCAT(PAR.MGL Supplier Invoice Nbr,LCL.Text 6 USR,CON.1)
   LCL.MGL_Supplier_Invoice_Nbr = PAR.MGL_Supplier_Invoice_Nbr + LCL.Text_6_USR (1);

   //?If not hold over , write TPALW+ rcd
   CASE;

   // IF PAR.Held Over Record Ld is Not Yes
   IF PAR.Held_Over_Record_Ld = *BLANK/'N';

   EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
   PARAMETER('S2D');
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   {
    //?USER: Process Data record

    // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
    PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

    //?Increment
    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

    CASE;

    // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
    IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

    ENDIF;

    EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
    PARAMETER(DB1.M3_Voucher_Number_Series);
    PARAMETER(DB1.M3_Voucher_Description);
    PARAMETER(DB1.M3_Voucher_Low_Number);
    PARAMETER(DB1.M3_Voucher_High_Number);
    PARAMETER(LCL.M3_Voucher_Next_Number);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
   PARAMETER('HPE');
   PARAMETER(LCL.MGL_Voucher_Number);
   {
    //?USER: Process Data record

    // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
    PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

    //?Increment
    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

    CASE;

    // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
    IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

    ENDIF;

    EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
    PARAMETER(DB1.M3_Voucher_Number_Series);
    PARAMETER(DB1.M3_Voucher_Description);
    PARAMETER(DB1.M3_Voucher_Low_Number);
    PARAMETER(DB1.M3_Voucher_High_Number);
    PARAMETER(LCL.M3_Voucher_Next_Number);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Crt M3 Supp Paym Head CR) TYPE(CRTOBJ) FILE(PLCCCPP)           AB1324724;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(PAR.MGL_Payee);
   PARAMETER(PAR.MGL_Supplier);
   PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
   PARAMETER('30');
   PARAMETER(10);
   PARAMETER(PAR.MGL_Invoice_Date);
   PARAMETER(PAR.MGL_Currency);
   PARAMETER(PAR.MGL_Payment_Terms);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.MGL_Foreign_Currency_Amt);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(0);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Payment_Method);
   PARAMETER(PAR.MGL_Voucher_Number_Series);
   PARAMETER(LCL.MGL_Voucher_Number);
   PARAMETER(PAR.MGL_Description);
   PARAMETER(01);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.MGL_Get_Payee_Defaults);
   PARAMETER(PAR.MGL_Job_Number);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Invoice_Date);
   PARAMETER(PAR.MGL_Authorized_user);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(01);
   PARAMETER(LCL.DED_M3_Debit_Note_Reason);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(0);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

    //?USER: Processing if Data record already exists

    EXECUTE FUNCTION(Chg M3 Supp Paym Head CH) TYPE(CHGOBJ) FILE(PLCCCPP)           AB1324725;
    PARAMETER(DB1.MGL_Company);
    PARAMETER(DB1.MGL_Division);
    PARAMETER(DB1.MGL_Invoice_Batch_Number);
    PARAMETER(DB1.MGL_Payee);
    PARAMETER(DB1.MGL_Supplier);
    PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
    PARAMETER(DB1.MGL_Invoice_Batch_Type);
    PARAMETER(DB1.MGL_Invoice_Status);
    PARAMETER(DB1.MGL_Invoice_Date);
    PARAMETER(DB1.MGL_Currency);
    PARAMETER(DB1.MGL_Payment_Terms);
    PARAMETER(DB1.MGL_Total_Line_Amt_Net);
    PARAMETER(DB1.MGL_Cash_Discount_Base);
    PARAMETER(DB1.MGL_Foreign_Currency_Amt);
    PARAMETER(DB1.MGL_Total_Charges);
    PARAMETER(DB1.MGL_Total_Due);
    PARAMETER(DB1.MGL_Invoice_Matching);
    PARAMETER(DB1.MGL_Service_Code);
    PARAMETER(DB1.MGL_Payment_Method);
    PARAMETER(DB1.MGL_Voucher_Number_Series);
    PARAMETER(DB1.MGL_Voucher_Number);
    PARAMETER(DB1.MGL_Description);
    PARAMETER(DB1.MGL_Exchange_Rate_Type);
    PARAMETER(DB1.MGL_Purchase_Order_Nbr);
    PARAMETER(DB1.MGL_Cash_discount_Term);
    PARAMETER(DB1.MGL_Get_Payee_Defaults);
    PARAMETER(DB1.MGL_Job_Number);
    PARAMETER(DB1.MGL_Job_Name);
    PARAMETER(DB1.MGL_Entry_Date);
    PARAMETER(DB1.MGL_Entry_Time);
    PARAMETER(DB1.MGL_Reference_Number);
    PARAMETER(DB1.MGL_Exchange_rate);
    PARAMETER(DB1.MGL_Trade_code);
    PARAMETER(DB1.MGL_VAT);
    PARAMETER(DB1.MGL_Accounting_date);
    PARAMETER(DB1.MGL_Authorized_user);
    PARAMETER(DB1.MGL_Due_date);
    PARAMETER(DB1.MGL_Future_rate_agreement);
    PARAMETER(DB1.MGL_From_to_country);
    PARAMETER(DB1.MGL_Base_country);
    PARAMETER(DB1.MGL_Order_date);
    PARAMETER(DB1.MGL_Cash_discount_date_1);
    PARAMETER(DB1.MGL_Cash_discount_pct_1);
    PARAMETER(DB1.MGL_Cash_discount_Amt_1);
    PARAMETER(DB1.MGL_Cash_discount_date_2);
    PARAMETER(DB1.MGL_Cash_discount_amt_2);
    PARAMETER(DB1.MGL_Cash_discount_pct_2);
    PARAMETER(DB1.MGL_Cash_discount_date_3);
    PARAMETER(DB1.MGL_Cash_discount_pct_3);
    PARAMETER(DB1.MGL_Cash_discount_amt_3);
    PARAMETER(DB1.MGL_Total_taxable_amount);
    PARAMETER(DB1.MGL_Prepaid_amount);
    PARAMETER(DB1.MGL_VAT_reg_number);
    PARAMETER(DB1.MGL_Tax_applicable);
    PARAMETER(DB1.MGL_Document_code);
    PARAMETER(DB1.MGL_AP_standard_document);
    PARAMETER(DB1.MGL_Debit_note_reason);
    PARAMETER(DB1.MGL_Our_invoicing_address);
    PARAMETER(DB1.MGL_Text_line_1);
    PARAMETER(DB1.MGL_Text_line_2);
    PARAMETER(DB1.MGL_Text_line_3);
    PARAMETER(DB1.MGL_EAN_loc_code_payee);
    PARAMETER(DB1.MGL_EAN_loc_cde_Consignee);
    PARAMETER(DB1.MGL_EAN_loc_code_supplier);
    PARAMETER(DB1.MGL_Delivery_date);
    PARAMETER(DB1.MGL_Bank_account_identity);
    PARAMETER(DB1.MGL_Geographical_code);
    PARAMETER(DB1.MGL_Tax_included);
    PARAMETER(DB1.MGL_Original_invoice_nbr);
    PARAMETER(DB1.MGL_Original_year);
    PARAMETER(DB1.MGL_Payment_request_nbr);
    PARAMETER(DB1.MGL_Year);
    PARAMETER(DB1.MGL_Partial_validation);
    PARAMETER(DB1.MGL_ERP_Process_Sts);
    PARAMETER(DB1.MGL_ERP_Process_Date);
    PARAMETER(DB1.MGL_ERP_Process_Time);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(412);
   PARAMETER(PAR.MGL_AP_Additional_Info);
   PARAMETER(1);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(JOB.*USER);
   EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(413);
   PARAMETER(PAR.M3_Facility_Usr);
   PARAMETER(1);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(JOB.*USER);
   ENDIF;

   //?If held over and rcd exists add to TPALW+, else create it
   CASE;

   // IF PAR.Held Over Record Ld is Yes
   IF PAR.Held_Over_Record_Ld = 'Y';

   EXECUTE FUNCTION(Rtv Add H/O SpplInv#  RT) TYPE(RTVOBJ) FILE(PLCCCPP)           AB1325234;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(PAR.MGL_Supplier);
   PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
   PARAMETER(LCL.MGL_Foreign_Currency_Amt);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    CASE;

    // IF DB1.MGL ERP Process Sts is Not Processed
    IF DB1.MGL_ERP_Process_Sts = '0';

    // LCL.PAD Transaction Amount = DB1.MGL Foreign Currency Amt + PAR.MGL Foreign Currency Amt
    LCL.PAD_Transaction_Amount = DB1.MGL_Foreign_Currency_Amt + PAR.MGL_Foreign_Currency_Amt;

    EXECUTE FUNCTION(Chg M3 Supp Paym Head CH) TYPE(CHGOBJ) FILE(PLCCCPP)           AB1324725;
    PARAMETER(DB1.MGL_Company);
    PARAMETER(DB1.MGL_Division);
    PARAMETER(DB1.MGL_Invoice_Batch_Number);
    PARAMETER(DB1.MGL_Payee);
    PARAMETER(DB1.MGL_Supplier);
    PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
    PARAMETER(DB1.MGL_Invoice_Batch_Type);
    PARAMETER(DB1.MGL_Invoice_Status);
    PARAMETER(DB1.MGL_Invoice_Date);
    PARAMETER(DB1.MGL_Currency);
    PARAMETER(DB1.MGL_Payment_Terms);
    PARAMETER(DB1.MGL_Total_Line_Amt_Net);
    PARAMETER(DB1.MGL_Cash_Discount_Base);
    PARAMETER(LCL.PAD_Transaction_Amount);
    PARAMETER(DB1.MGL_Total_Charges);
    PARAMETER(DB1.MGL_Total_Due);
    PARAMETER(DB1.MGL_Invoice_Matching);
    PARAMETER(DB1.MGL_Service_Code);
    PARAMETER(DB1.MGL_Payment_Method);
    PARAMETER(DB1.MGL_Voucher_Number_Series);
    PARAMETER(DB1.MGL_Voucher_Number);
    PARAMETER(DB1.MGL_Description);
    PARAMETER(DB1.MGL_Exchange_Rate_Type);
    PARAMETER(DB1.MGL_Purchase_Order_Nbr);
    PARAMETER(DB1.MGL_Cash_discount_Term);
    PARAMETER(DB1.MGL_Get_Payee_Defaults);
    PARAMETER(DB1.MGL_Job_Number);
    PARAMETER(DB1.MGL_Job_Name);
    PARAMETER(DB1.MGL_Entry_Date);
    PARAMETER(DB1.MGL_Entry_Time);
    PARAMETER(DB1.MGL_Reference_Number);
    PARAMETER(DB1.MGL_Exchange_rate);
    PARAMETER(DB1.MGL_Trade_code);
    PARAMETER(DB1.MGL_VAT);
    PARAMETER(DB1.MGL_Accounting_date);
    PARAMETER(DB1.MGL_Authorized_user);
    PARAMETER(DB1.MGL_Due_date);
    PARAMETER(DB1.MGL_Future_rate_agreement);
    PARAMETER(DB1.MGL_From_to_country);
    PARAMETER(DB1.MGL_Base_country);
    PARAMETER(DB1.MGL_Order_date);
    PARAMETER(DB1.MGL_Cash_discount_date_1);
    PARAMETER(DB1.MGL_Cash_discount_pct_1);
    PARAMETER(DB1.MGL_Cash_discount_Amt_1);
    PARAMETER(DB1.MGL_Cash_discount_date_2);
    PARAMETER(DB1.MGL_Cash_discount_amt_2);
    PARAMETER(DB1.MGL_Cash_discount_pct_2);
    PARAMETER(DB1.MGL_Cash_discount_date_3);
    PARAMETER(DB1.MGL_Cash_discount_pct_3);
    PARAMETER(DB1.MGL_Cash_discount_amt_3);
    PARAMETER(DB1.MGL_Total_taxable_amount);
    PARAMETER(DB1.MGL_Prepaid_amount);
    PARAMETER(DB1.MGL_VAT_reg_number);
    PARAMETER(DB1.MGL_Tax_applicable);
    PARAMETER(DB1.MGL_Document_code);
    PARAMETER(DB1.MGL_AP_standard_document);
    PARAMETER(DB1.MGL_Debit_note_reason);
    PARAMETER(DB1.MGL_Our_invoicing_address);
    PARAMETER(DB1.MGL_Text_line_1);
    PARAMETER(DB1.MGL_Text_line_2);
    PARAMETER(DB1.MGL_Text_line_3);
    PARAMETER(DB1.MGL_EAN_loc_code_payee);
    PARAMETER(DB1.MGL_EAN_loc_cde_Consignee);
    PARAMETER(DB1.MGL_EAN_loc_code_supplier);
    PARAMETER(DB1.MGL_Delivery_date);
    PARAMETER(DB1.MGL_Bank_account_identity);
    PARAMETER(DB1.MGL_Geographical_code);
    PARAMETER(DB1.MGL_Tax_included);
    PARAMETER(DB1.MGL_Original_invoice_nbr);
    PARAMETER(DB1.MGL_Original_year);
    PARAMETER(DB1.MGL_Payment_request_nbr);
    PARAMETER(DB1.MGL_Year);
    PARAMETER(DB1.MGL_Partial_validation);
    PARAMETER(DB1.MGL_ERP_Process_Sts);
    PARAMETER(DB1.MGL_ERP_Process_Date);
    PARAMETER(DB1.MGL_ERP_Process_Time);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

    ENDIF;

   }

   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
   PARAMETER('S2D');
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   {
    //?USER: Process Data record

    // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
    PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

    //?Increment
    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

    CASE;

    // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
    IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

    ENDIF;

    EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
    PARAMETER(DB1.M3_Voucher_Number_Series);
    PARAMETER(DB1.M3_Voucher_Description);
    PARAMETER(DB1.M3_Voucher_Low_Number);
    PARAMETER(DB1.M3_Voucher_High_Number);
    PARAMETER(LCL.M3_Voucher_Next_Number);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
   PARAMETER('HPE');
   PARAMETER(LCL.MGL_Voucher_Number);
   {
    //?USER: Process Data record

    // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
    PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

    //?Increment
    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

    CASE;

    // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
    IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

    ENDIF;

    EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
    PARAMETER(DB1.M3_Voucher_Number_Series);
    PARAMETER(DB1.M3_Voucher_Description);
    PARAMETER(DB1.M3_Voucher_Low_Number);
    PARAMETER(DB1.M3_Voucher_High_Number);
    PARAMETER(LCL.M3_Voucher_Next_Number);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Crt M3 Supp Paym Head CR) TYPE(CRTOBJ) FILE(PLCCCPP)           AB1324724;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(PAR.MGL_Payee);
   PARAMETER(PAR.MGL_Supplier);
   PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
   PARAMETER('30');
   PARAMETER(10);
   PARAMETER(PAR.MGL_Invoice_Date);
   PARAMETER(PAR.MGL_Currency);
   PARAMETER(PAR.MGL_Payment_Terms);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.MGL_Foreign_Currency_Amt);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(0);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Payment_Method);
   PARAMETER(PAR.MGL_Voucher_Number_Series);
   PARAMETER(LCL.MGL_Voucher_Number);
   PARAMETER(PAR.MGL_Description);
   PARAMETER(01);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.MGL_Get_Payee_Defaults);
   PARAMETER(PAR.MGL_Job_Number);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Invoice_Date);
   PARAMETER(PAR.MGL_Authorized_user);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(01);
   PARAMETER(LCL.DED_M3_Debit_Note_Reason);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(0);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

    //?USER: Processing if Data record already exists

    EXECUTE FUNCTION(Chg M3 Supp Paym Head CH) TYPE(CHGOBJ) FILE(PLCCCPP)           AB1324725;
    PARAMETER(DB1.MGL_Company);
    PARAMETER(DB1.MGL_Division);
    PARAMETER(DB1.MGL_Invoice_Batch_Number);
    PARAMETER(DB1.MGL_Payee);
    PARAMETER(DB1.MGL_Supplier);
    PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
    PARAMETER(DB1.MGL_Invoice_Batch_Type);
    PARAMETER(DB1.MGL_Invoice_Status);
    PARAMETER(DB1.MGL_Invoice_Date);
    PARAMETER(DB1.MGL_Currency);
    PARAMETER(DB1.MGL_Payment_Terms);
    PARAMETER(DB1.MGL_Total_Line_Amt_Net);
    PARAMETER(DB1.MGL_Cash_Discount_Base);
    PARAMETER(DB1.MGL_Foreign_Currency_Amt);
    PARAMETER(DB1.MGL_Total_Charges);
    PARAMETER(DB1.MGL_Total_Due);
    PARAMETER(DB1.MGL_Invoice_Matching);
    PARAMETER(DB1.MGL_Service_Code);
    PARAMETER(DB1.MGL_Payment_Method);
    PARAMETER(DB1.MGL_Voucher_Number_Series);
    PARAMETER(DB1.MGL_Voucher_Number);
    PARAMETER(DB1.MGL_Description);
    PARAMETER(DB1.MGL_Exchange_Rate_Type);
    PARAMETER(DB1.MGL_Purchase_Order_Nbr);
    PARAMETER(DB1.MGL_Cash_discount_Term);
    PARAMETER(DB1.MGL_Get_Payee_Defaults);
    PARAMETER(DB1.MGL_Job_Number);
    PARAMETER(DB1.MGL_Job_Name);
    PARAMETER(DB1.MGL_Entry_Date);
    PARAMETER(DB1.MGL_Entry_Time);
    PARAMETER(DB1.MGL_Reference_Number);
    PARAMETER(DB1.MGL_Exchange_rate);
    PARAMETER(DB1.MGL_Trade_code);
    PARAMETER(DB1.MGL_VAT);
    PARAMETER(DB1.MGL_Accounting_date);
    PARAMETER(DB1.MGL_Authorized_user);
    PARAMETER(DB1.MGL_Due_date);
    PARAMETER(DB1.MGL_Future_rate_agreement);
    PARAMETER(DB1.MGL_From_to_country);
    PARAMETER(DB1.MGL_Base_country);
    PARAMETER(DB1.MGL_Order_date);
    PARAMETER(DB1.MGL_Cash_discount_date_1);
    PARAMETER(DB1.MGL_Cash_discount_pct_1);
    PARAMETER(DB1.MGL_Cash_discount_Amt_1);
    PARAMETER(DB1.MGL_Cash_discount_date_2);
    PARAMETER(DB1.MGL_Cash_discount_amt_2);
    PARAMETER(DB1.MGL_Cash_discount_pct_2);
    PARAMETER(DB1.MGL_Cash_discount_date_3);
    PARAMETER(DB1.MGL_Cash_discount_pct_3);
    PARAMETER(DB1.MGL_Cash_discount_amt_3);
    PARAMETER(DB1.MGL_Total_taxable_amount);
    PARAMETER(DB1.MGL_Prepaid_amount);
    PARAMETER(DB1.MGL_VAT_reg_number);
    PARAMETER(DB1.MGL_Tax_applicable);
    PARAMETER(DB1.MGL_Document_code);
    PARAMETER(DB1.MGL_AP_standard_document);
    PARAMETER(DB1.MGL_Debit_note_reason);
    PARAMETER(DB1.MGL_Our_invoicing_address);
    PARAMETER(DB1.MGL_Text_line_1);
    PARAMETER(DB1.MGL_Text_line_2);
    PARAMETER(DB1.MGL_Text_line_3);
    PARAMETER(DB1.MGL_EAN_loc_code_payee);
    PARAMETER(DB1.MGL_EAN_loc_cde_Consignee);
    PARAMETER(DB1.MGL_EAN_loc_code_supplier);
    PARAMETER(DB1.MGL_Delivery_date);
    PARAMETER(DB1.MGL_Bank_account_identity);
    PARAMETER(DB1.MGL_Geographical_code);
    PARAMETER(DB1.MGL_Tax_included);
    PARAMETER(DB1.MGL_Original_invoice_nbr);
    PARAMETER(DB1.MGL_Original_year);
    PARAMETER(DB1.MGL_Payment_request_nbr);
    PARAMETER(DB1.MGL_Year);
    PARAMETER(DB1.MGL_Partial_validation);
    PARAMETER(DB1.MGL_ERP_Process_Sts);
    PARAMETER(DB1.MGL_ERP_Process_Date);
    PARAMETER(DB1.MGL_ERP_Process_Time);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(412);
   PARAMETER(PAR.MGL_AP_Additional_Info);
   PARAMETER(1);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(JOB.*USER);
   EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(413);
   PARAMETER(PAR.M3_Facility_Usr);
   PARAMETER(1);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(JOB.*USER);
   ENDIF;

   ENDIF;

   CASE;

   // IF LCL.DED M3 Debt Nt Rsn-Contra is Entered
   IF LCL.DED_M3_Debt_Nt_Rsn_Contra > *BLANK;

   //?HPTALACT rcd     --- allowance written as a credit - contra Dbt Note Rsn
   //?Accrual Amt = (head killed*4) - ( vcd d/a amt) * -1
   // Compute: CR freight accrl
   LCL.MGL_Foreign_Currency_Amt = ( LCL.MGL_Foreign_Currency_Amt - DB1.THD_Ded_Add_Amount )
   * -1;

   // LCL.Text 6 USR = CONCAT(DB1.DED D/A Code,CON.-,CON.*ZERO)
   LCL.Text_6_USR = DB1.DED_D_A_Code + '-' (*ZERO);

   // LCL.MGL Supplier Invoice Nbr = CONCAT(PAR.MGL Supplier Invoice Nbr,LCL.Text 6 USR,CON.1)
   LCL.MGL_Supplier_Invoice_Nbr = PAR.MGL_Supplier_Invoice_Nbr + LCL.Text_6_USR (1);

   //?If not hold over , write TPALW- rcd
   CASE;

   // IF PAR.Held Over Record Ld is Not Yes
   IF PAR.Held_Over_Record_Ld = *BLANK/'N';

   EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
   PARAMETER('S2D');
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   {
    //?USER: Process Data record

    // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
    PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

    //?Increment
    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

    CASE;

    // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
    IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

    ENDIF;

    EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
    PARAMETER(DB1.M3_Voucher_Number_Series);
    PARAMETER(DB1.M3_Voucher_Description);
    PARAMETER(DB1.M3_Voucher_Low_Number);
    PARAMETER(DB1.M3_Voucher_High_Number);
    PARAMETER(LCL.M3_Voucher_Next_Number);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
   PARAMETER('HPE');
   PARAMETER(LCL.MGL_Voucher_Number);
   {
    //?USER: Process Data record

    // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
    PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

    //?Increment
    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

    CASE;

    // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
    IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

    ENDIF;

    EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
    PARAMETER(DB1.M3_Voucher_Number_Series);
    PARAMETER(DB1.M3_Voucher_Description);
    PARAMETER(DB1.M3_Voucher_Low_Number);
    PARAMETER(DB1.M3_Voucher_High_Number);
    PARAMETER(LCL.M3_Voucher_Next_Number);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   // LCL.MGL Debit note reason = CON.*BLANK
   LCL.MGL_Debit_note_reason = *BLANK;

   // LCL.MGL Debit note reason = LCL.DED M3 Debt Nt Rsn-Contra
   LCL.MGL_Debit_note_reason = LCL.DED_M3_Debt_Nt_Rsn_Contra;

   EXECUTE FUNCTION(Crt M3 Supp Paym Head CR) TYPE(CRTOBJ) FILE(PLCCCPP)           AB1324724;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(PAR.MGL_Payee);
   PARAMETER(PAR.MGL_Supplier);
   PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
   PARAMETER('30');
   PARAMETER(10);
   PARAMETER(PAR.MGL_Invoice_Date);
   PARAMETER(PAR.MGL_Currency);
   PARAMETER(PAR.MGL_Payment_Terms);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.MGL_Foreign_Currency_Amt);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(0);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Payment_Method);
   PARAMETER(PAR.MGL_Voucher_Number_Series);
   PARAMETER(LCL.MGL_Voucher_Number);
   PARAMETER(PAR.MGL_Description);
   PARAMETER(01);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.MGL_Get_Payee_Defaults);
   PARAMETER(PAR.MGL_Job_Number);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Invoice_Date);
   PARAMETER(PAR.MGL_Authorized_user);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(01);
   PARAMETER(LCL.MGL_Debit_note_reason);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(0);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

    //?USER: Processing if Data record already exists

    EXECUTE FUNCTION(Chg M3 Supp Paym Head CH) TYPE(CHGOBJ) FILE(PLCCCPP)           AB1324725;
    PARAMETER(DB1.MGL_Company);
    PARAMETER(DB1.MGL_Division);
    PARAMETER(DB1.MGL_Invoice_Batch_Number);
    PARAMETER(DB1.MGL_Payee);
    PARAMETER(DB1.MGL_Supplier);
    PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
    PARAMETER(DB1.MGL_Invoice_Batch_Type);
    PARAMETER(DB1.MGL_Invoice_Status);
    PARAMETER(DB1.MGL_Invoice_Date);
    PARAMETER(DB1.MGL_Currency);
    PARAMETER(DB1.MGL_Payment_Terms);
    PARAMETER(DB1.MGL_Total_Line_Amt_Net);
    PARAMETER(DB1.MGL_Cash_Discount_Base);
    PARAMETER(DB1.MGL_Foreign_Currency_Amt);
    PARAMETER(DB1.MGL_Total_Charges);
    PARAMETER(DB1.MGL_Total_Due);
    PARAMETER(DB1.MGL_Invoice_Matching);
    PARAMETER(DB1.MGL_Service_Code);
    PARAMETER(DB1.MGL_Payment_Method);
    PARAMETER(DB1.MGL_Voucher_Number_Series);
    PARAMETER(DB1.MGL_Voucher_Number);
    PARAMETER(DB1.MGL_Description);
    PARAMETER(DB1.MGL_Exchange_Rate_Type);
    PARAMETER(DB1.MGL_Purchase_Order_Nbr);
    PARAMETER(DB1.MGL_Cash_discount_Term);
    PARAMETER(DB1.MGL_Get_Payee_Defaults);
    PARAMETER(DB1.MGL_Job_Number);
    PARAMETER(DB1.MGL_Job_Name);
    PARAMETER(DB1.MGL_Entry_Date);
    PARAMETER(DB1.MGL_Entry_Time);
    PARAMETER(DB1.MGL_Reference_Number);
    PARAMETER(DB1.MGL_Exchange_rate);
    PARAMETER(DB1.MGL_Trade_code);
    PARAMETER(DB1.MGL_VAT);
    PARAMETER(DB1.MGL_Accounting_date);
    PARAMETER(DB1.MGL_Authorized_user);
    PARAMETER(DB1.MGL_Due_date);
    PARAMETER(DB1.MGL_Future_rate_agreement);
    PARAMETER(DB1.MGL_From_to_country);
    PARAMETER(DB1.MGL_Base_country);
    PARAMETER(DB1.MGL_Order_date);
    PARAMETER(DB1.MGL_Cash_discount_date_1);
    PARAMETER(DB1.MGL_Cash_discount_pct_1);
    PARAMETER(DB1.MGL_Cash_discount_Amt_1);
    PARAMETER(DB1.MGL_Cash_discount_date_2);
    PARAMETER(DB1.MGL_Cash_discount_amt_2);
    PARAMETER(DB1.MGL_Cash_discount_pct_2);
    PARAMETER(DB1.MGL_Cash_discount_date_3);
    PARAMETER(DB1.MGL_Cash_discount_pct_3);
    PARAMETER(DB1.MGL_Cash_discount_amt_3);
    PARAMETER(DB1.MGL_Total_taxable_amount);
    PARAMETER(DB1.MGL_Prepaid_amount);
    PARAMETER(DB1.MGL_VAT_reg_number);
    PARAMETER(DB1.MGL_Tax_applicable);
    PARAMETER(DB1.MGL_Document_code);
    PARAMETER(DB1.MGL_AP_standard_document);
    PARAMETER(DB1.MGL_Debit_note_reason);
    PARAMETER(DB1.MGL_Our_invoicing_address);
    PARAMETER(DB1.MGL_Text_line_1);
    PARAMETER(DB1.MGL_Text_line_2);
    PARAMETER(DB1.MGL_Text_line_3);
    PARAMETER(DB1.MGL_EAN_loc_code_payee);
    PARAMETER(DB1.MGL_EAN_loc_cde_Consignee);
    PARAMETER(DB1.MGL_EAN_loc_code_supplier);
    PARAMETER(DB1.MGL_Delivery_date);
    PARAMETER(DB1.MGL_Bank_account_identity);
    PARAMETER(DB1.MGL_Geographical_code);
    PARAMETER(DB1.MGL_Tax_included);
    PARAMETER(DB1.MGL_Original_invoice_nbr);
    PARAMETER(DB1.MGL_Original_year);
    PARAMETER(DB1.MGL_Payment_request_nbr);
    PARAMETER(DB1.MGL_Year);
    PARAMETER(DB1.MGL_Partial_validation);
    PARAMETER(DB1.MGL_ERP_Process_Sts);
    PARAMETER(DB1.MGL_ERP_Process_Date);
    PARAMETER(DB1.MGL_ERP_Process_Time);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(412);
   PARAMETER(PAR.MGL_AP_Additional_Info);
   PARAMETER(1);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(JOB.*USER);
   EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(413);
   PARAMETER(PAR.M3_Facility_Usr);
   PARAMETER(1);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(JOB.*USER);
   ENDIF;

   //?If held over and rcd exists add to TPALW-, else create it
   CASE;

   // IF PAR.Held Over Record Ld is Yes
   IF PAR.Held_Over_Record_Ld = 'Y';

   EXECUTE FUNCTION(Rtv Add H/O SpplInv#  RT) TYPE(RTVOBJ) FILE(PLCCCPP)           AB1325234;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(PAR.MGL_Supplier);
   PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
   PARAMETER(LCL.MGL_Foreign_Currency_Amt);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    CASE;

    // IF DB1.MGL ERP Process Sts is Not Processed
    IF DB1.MGL_ERP_Process_Sts = '0';

    // LCL.PAD Transaction Amount = DB1.MGL Foreign Currency Amt + PAR.MGL Foreign Currency Amt
    LCL.PAD_Transaction_Amount = DB1.MGL_Foreign_Currency_Amt + PAR.MGL_Foreign_Currency_Amt;

    EXECUTE FUNCTION(Chg M3 Supp Paym Head CH) TYPE(CHGOBJ) FILE(PLCCCPP)           AB1324725;
    PARAMETER(DB1.MGL_Company);
    PARAMETER(DB1.MGL_Division);
    PARAMETER(DB1.MGL_Invoice_Batch_Number);
    PARAMETER(DB1.MGL_Payee);
    PARAMETER(DB1.MGL_Supplier);
    PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
    PARAMETER(DB1.MGL_Invoice_Batch_Type);
    PARAMETER(DB1.MGL_Invoice_Status);
    PARAMETER(DB1.MGL_Invoice_Date);
    PARAMETER(DB1.MGL_Currency);
    PARAMETER(DB1.MGL_Payment_Terms);
    PARAMETER(DB1.MGL_Total_Line_Amt_Net);
    PARAMETER(DB1.MGL_Cash_Discount_Base);
    PARAMETER(LCL.PAD_Transaction_Amount);
    PARAMETER(DB1.MGL_Total_Charges);
    PARAMETER(DB1.MGL_Total_Due);
    PARAMETER(DB1.MGL_Invoice_Matching);
    PARAMETER(DB1.MGL_Service_Code);
    PARAMETER(DB1.MGL_Payment_Method);
    PARAMETER(DB1.MGL_Voucher_Number_Series);
    PARAMETER(DB1.MGL_Voucher_Number);
    PARAMETER(DB1.MGL_Description);
    PARAMETER(DB1.MGL_Exchange_Rate_Type);
    PARAMETER(DB1.MGL_Purchase_Order_Nbr);
    PARAMETER(DB1.MGL_Cash_discount_Term);
    PARAMETER(DB1.MGL_Get_Payee_Defaults);
    PARAMETER(DB1.MGL_Job_Number);
    PARAMETER(DB1.MGL_Job_Name);
    PARAMETER(DB1.MGL_Entry_Date);
    PARAMETER(DB1.MGL_Entry_Time);
    PARAMETER(DB1.MGL_Reference_Number);
    PARAMETER(DB1.MGL_Exchange_rate);
    PARAMETER(DB1.MGL_Trade_code);
    PARAMETER(DB1.MGL_VAT);
    PARAMETER(DB1.MGL_Accounting_date);
    PARAMETER(DB1.MGL_Authorized_user);
    PARAMETER(DB1.MGL_Due_date);
    PARAMETER(DB1.MGL_Future_rate_agreement);
    PARAMETER(DB1.MGL_From_to_country);
    PARAMETER(DB1.MGL_Base_country);
    PARAMETER(DB1.MGL_Order_date);
    PARAMETER(DB1.MGL_Cash_discount_date_1);
    PARAMETER(DB1.MGL_Cash_discount_pct_1);
    PARAMETER(DB1.MGL_Cash_discount_Amt_1);
    PARAMETER(DB1.MGL_Cash_discount_date_2);
    PARAMETER(DB1.MGL_Cash_discount_amt_2);
    PARAMETER(DB1.MGL_Cash_discount_pct_2);
    PARAMETER(DB1.MGL_Cash_discount_date_3);
    PARAMETER(DB1.MGL_Cash_discount_pct_3);
    PARAMETER(DB1.MGL_Cash_discount_amt_3);
    PARAMETER(DB1.MGL_Total_taxable_amount);
    PARAMETER(DB1.MGL_Prepaid_amount);
    PARAMETER(DB1.MGL_VAT_reg_number);
    PARAMETER(DB1.MGL_Tax_applicable);
    PARAMETER(DB1.MGL_Document_code);
    PARAMETER(DB1.MGL_AP_standard_document);
    PARAMETER(DB1.MGL_Debit_note_reason);
    PARAMETER(DB1.MGL_Our_invoicing_address);
    PARAMETER(DB1.MGL_Text_line_1);
    PARAMETER(DB1.MGL_Text_line_2);
    PARAMETER(DB1.MGL_Text_line_3);
    PARAMETER(DB1.MGL_EAN_loc_code_payee);
    PARAMETER(DB1.MGL_EAN_loc_cde_Consignee);
    PARAMETER(DB1.MGL_EAN_loc_code_supplier);
    PARAMETER(DB1.MGL_Delivery_date);
    PARAMETER(DB1.MGL_Bank_account_identity);
    PARAMETER(DB1.MGL_Geographical_code);
    PARAMETER(DB1.MGL_Tax_included);
    PARAMETER(DB1.MGL_Original_invoice_nbr);
    PARAMETER(DB1.MGL_Original_year);
    PARAMETER(DB1.MGL_Payment_request_nbr);
    PARAMETER(DB1.MGL_Year);
    PARAMETER(DB1.MGL_Partial_validation);
    PARAMETER(DB1.MGL_ERP_Process_Sts);
    PARAMETER(DB1.MGL_ERP_Process_Date);
    PARAMETER(DB1.MGL_ERP_Process_Time);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

    ENDIF;

   }

   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
   PARAMETER('S2D');
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   {
    //?USER: Process Data record

    // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
    PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

    //?Increment
    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

    CASE;

    // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
    IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

    ENDIF;

    EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
    PARAMETER(DB1.M3_Voucher_Number_Series);
    PARAMETER(DB1.M3_Voucher_Description);
    PARAMETER(DB1.M3_Voucher_Low_Number);
    PARAMETER(DB1.M3_Voucher_High_Number);
    PARAMETER(LCL.M3_Voucher_Next_Number);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
   PARAMETER('HPE');
   PARAMETER(LCL.MGL_Voucher_Number);
   {
    //?USER: Process Data record

    // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
    PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

    //?Increment
    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

    CASE;

    // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
    IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

    ENDIF;

    EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
    PARAMETER(DB1.M3_Voucher_Number_Series);
    PARAMETER(DB1.M3_Voucher_Description);
    PARAMETER(DB1.M3_Voucher_Low_Number);
    PARAMETER(DB1.M3_Voucher_High_Number);
    PARAMETER(LCL.M3_Voucher_Next_Number);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   // LCL.MGL Debit note reason = CON.*BLANK
   LCL.MGL_Debit_note_reason = *BLANK;

   // LCL.MGL Debit note reason = LCL.DED M3 Debt Nt Rsn-Contra
   LCL.MGL_Debit_note_reason = LCL.DED_M3_Debt_Nt_Rsn_Contra;

   EXECUTE FUNCTION(Crt M3 Supp Paym Head CR) TYPE(CRTOBJ) FILE(PLCCCPP)           AB1324724;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(PAR.MGL_Payee);
   PARAMETER(PAR.MGL_Supplier);
   PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
   PARAMETER('30');
   PARAMETER(10);
   PARAMETER(PAR.MGL_Invoice_Date);
   PARAMETER(PAR.MGL_Currency);
   PARAMETER(PAR.MGL_Payment_Terms);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.MGL_Foreign_Currency_Amt);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(0);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Payment_Method);
   PARAMETER(PAR.MGL_Voucher_Number_Series);
   PARAMETER(LCL.MGL_Voucher_Number);
   PARAMETER(PAR.MGL_Description);
   PARAMETER(01);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.MGL_Get_Payee_Defaults);
   PARAMETER(PAR.MGL_Job_Number);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Invoice_Date);
   PARAMETER(PAR.MGL_Authorized_user);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(01);
   PARAMETER(LCL.MGL_Debit_note_reason);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(0);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

    //?USER: Processing if Data record already exists

    EXECUTE FUNCTION(Chg M3 Supp Paym Head CH) TYPE(CHGOBJ) FILE(PLCCCPP)           AB1324725;
    PARAMETER(DB1.MGL_Company);
    PARAMETER(DB1.MGL_Division);
    PARAMETER(DB1.MGL_Invoice_Batch_Number);
    PARAMETER(DB1.MGL_Payee);
    PARAMETER(DB1.MGL_Supplier);
    PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
    PARAMETER(DB1.MGL_Invoice_Batch_Type);
    PARAMETER(DB1.MGL_Invoice_Status);
    PARAMETER(DB1.MGL_Invoice_Date);
    PARAMETER(DB1.MGL_Currency);
    PARAMETER(DB1.MGL_Payment_Terms);
    PARAMETER(DB1.MGL_Total_Line_Amt_Net);
    PARAMETER(DB1.MGL_Cash_Discount_Base);
    PARAMETER(DB1.MGL_Foreign_Currency_Amt);
    PARAMETER(DB1.MGL_Total_Charges);
    PARAMETER(DB1.MGL_Total_Due);
    PARAMETER(DB1.MGL_Invoice_Matching);
    PARAMETER(DB1.MGL_Service_Code);
    PARAMETER(DB1.MGL_Payment_Method);
    PARAMETER(DB1.MGL_Voucher_Number_Series);
    PARAMETER(DB1.MGL_Voucher_Number);
    PARAMETER(DB1.MGL_Description);
    PARAMETER(DB1.MGL_Exchange_Rate_Type);
    PARAMETER(DB1.MGL_Purchase_Order_Nbr);
    PARAMETER(DB1.MGL_Cash_discount_Term);
    PARAMETER(DB1.MGL_Get_Payee_Defaults);
    PARAMETER(DB1.MGL_Job_Number);
    PARAMETER(DB1.MGL_Job_Name);
    PARAMETER(DB1.MGL_Entry_Date);
    PARAMETER(DB1.MGL_Entry_Time);
    PARAMETER(DB1.MGL_Reference_Number);
    PARAMETER(DB1.MGL_Exchange_rate);
    PARAMETER(DB1.MGL_Trade_code);
    PARAMETER(DB1.MGL_VAT);
    PARAMETER(DB1.MGL_Accounting_date);
    PARAMETER(DB1.MGL_Authorized_user);
    PARAMETER(DB1.MGL_Due_date);
    PARAMETER(DB1.MGL_Future_rate_agreement);
    PARAMETER(DB1.MGL_From_to_country);
    PARAMETER(DB1.MGL_Base_country);
    PARAMETER(DB1.MGL_Order_date);
    PARAMETER(DB1.MGL_Cash_discount_date_1);
    PARAMETER(DB1.MGL_Cash_discount_pct_1);
    PARAMETER(DB1.MGL_Cash_discount_Amt_1);
    PARAMETER(DB1.MGL_Cash_discount_date_2);
    PARAMETER(DB1.MGL_Cash_discount_amt_2);
    PARAMETER(DB1.MGL_Cash_discount_pct_2);
    PARAMETER(DB1.MGL_Cash_discount_date_3);
    PARAMETER(DB1.MGL_Cash_discount_pct_3);
    PARAMETER(DB1.MGL_Cash_discount_amt_3);
    PARAMETER(DB1.MGL_Total_taxable_amount);
    PARAMETER(DB1.MGL_Prepaid_amount);
    PARAMETER(DB1.MGL_VAT_reg_number);
    PARAMETER(DB1.MGL_Tax_applicable);
    PARAMETER(DB1.MGL_Document_code);
    PARAMETER(DB1.MGL_AP_standard_document);
    PARAMETER(DB1.MGL_Debit_note_reason);
    PARAMETER(DB1.MGL_Our_invoicing_address);
    PARAMETER(DB1.MGL_Text_line_1);
    PARAMETER(DB1.MGL_Text_line_2);
    PARAMETER(DB1.MGL_Text_line_3);
    PARAMETER(DB1.MGL_EAN_loc_code_payee);
    PARAMETER(DB1.MGL_EAN_loc_cde_Consignee);
    PARAMETER(DB1.MGL_EAN_loc_code_supplier);
    PARAMETER(DB1.MGL_Delivery_date);
    PARAMETER(DB1.MGL_Bank_account_identity);
    PARAMETER(DB1.MGL_Geographical_code);
    PARAMETER(DB1.MGL_Tax_included);
    PARAMETER(DB1.MGL_Original_invoice_nbr);
    PARAMETER(DB1.MGL_Original_year);
    PARAMETER(DB1.MGL_Payment_request_nbr);
    PARAMETER(DB1.MGL_Year);
    PARAMETER(DB1.MGL_Partial_validation);
    PARAMETER(DB1.MGL_ERP_Process_Sts);
    PARAMETER(DB1.MGL_ERP_Process_Date);
    PARAMETER(DB1.MGL_ERP_Process_Time);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(412);
   PARAMETER(PAR.MGL_AP_Additional_Info);
   PARAMETER(1);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(JOB.*USER);
   EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(413);
   PARAMETER(PAR.M3_Facility_Usr);
   PARAMETER(1);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(JOB.*USER);
   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   //?**********************
   //?Write Regular D/A that arent TPALW and dont have the frt allow accrl
   CASE;

   // IF DB1.DED D/A Code is Triumph Transport Allow
   IF DB1.DED_D_A_Code = 'TPALW';

   // AND LCL.System Value Numeric  USR is Not 0
   AND LCL.System_Value_Numeric_USR <> 0;

   //?Write Regular D/A that arent TPALW and dont have the frt allow accrl
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv M3 Debit Note Rsn RT) TYPE(RTVOBJ) FILE(PKBBREP)           AB1325097;
   PARAMETER(DB1.DED_D_A_Code);
   PARAMETER(LCL.DED_M3_Debit_Note_Reason);
   PARAMETER(LCL.DED_M3_Debt_Nt_Rsn_Contra);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF DB1.THD Unit Amt Sign is Subtract
   IF DB1.THD_Unit_Amt_Sign = '-';

   // LCL.MGL Foreign Currency Amt = CON.-1 * DB1.THD Ded/Add Amount *
   LCL.MGL_Foreign_Currency_Amt = -1 * DB1.THD_Ded_Add_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.MGL Foreign Currency Amt = DB1.THD Ded/Add Amount
   LCL.MGL_Foreign_Currency_Amt = DB1.THD_Ded_Add_Amount;

   ENDIF;

   // LCL.MGL Supplier Invoice Nbr = CONCAT(PAR.MGL Supplier Invoice Nbr,DB1.DED D/A Code,CON.1)
   LCL.MGL_Supplier_Invoice_Nbr = PAR.MGL_Supplier_Invoice_Nbr + DB1.DED_D_A_Code (1);

   //?If not hold over, then write the d/a record
   CASE;

   // IF PAR.Held Over Record Ld is Not Yes
   IF PAR.Held_Over_Record_Ld = *BLANK/'N';

   //?Write bal sheet rcd to g/l file     f911
   EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
   PARAMETER('S2D');
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   {
    //?USER: Process Data record

    // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
    PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

    //?Increment
    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

    CASE;

    // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
    IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

    ENDIF;

    EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
    PARAMETER(DB1.M3_Voucher_Number_Series);
    PARAMETER(DB1.M3_Voucher_Description);
    PARAMETER(DB1.M3_Voucher_Low_Number);
    PARAMETER(DB1.M3_Voucher_High_Number);
    PARAMETER(LCL.M3_Voucher_Next_Number);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
   PARAMETER('HPE');
   PARAMETER(LCL.MGL_Voucher_Number);
   {
    //?USER: Process Data record

    // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
    PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

    //?Increment
    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

    CASE;

    // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
    IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

    ENDIF;

    EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
    PARAMETER(DB1.M3_Voucher_Number_Series);
    PARAMETER(DB1.M3_Voucher_Description);
    PARAMETER(DB1.M3_Voucher_Low_Number);
    PARAMETER(DB1.M3_Voucher_High_Number);
    PARAMETER(LCL.M3_Voucher_Next_Number);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   // LCL.MGL Debit note reason = CON.*BLANK
   LCL.MGL_Debit_note_reason = *BLANK;

   // LCL.MGL Debit note reason = LCL.DED M3 Debit Note Reason
   LCL.MGL_Debit_note_reason = LCL.DED_M3_Debit_Note_Reason;

   EXECUTE FUNCTION(Crt M3 Supp Paym Head CR) TYPE(CRTOBJ) FILE(PLCCCPP)           AB1324724;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(PAR.MGL_Payee);
   PARAMETER(PAR.MGL_Supplier);
   PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
   PARAMETER('30');
   PARAMETER(10);
   PARAMETER(PAR.MGL_Invoice_Date);
   PARAMETER(PAR.MGL_Currency);
   PARAMETER(PAR.MGL_Payment_Terms);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.MGL_Foreign_Currency_Amt);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(0);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Payment_Method);
   PARAMETER(PAR.MGL_Voucher_Number_Series);
   PARAMETER(LCL.MGL_Voucher_Number);
   PARAMETER(PAR.MGL_Description);
   PARAMETER(01);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(1);
   PARAMETER(PAR.MGL_Job_Number);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Invoice_Date);
   PARAMETER(PAR.MGL_Authorized_user);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(01);
   PARAMETER(LCL.MGL_Debit_note_reason);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(0);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

    //?USER: Processing if Data record already exists

    EXECUTE FUNCTION(Chg M3 Supp Paym Head CH) TYPE(CHGOBJ) FILE(PLCCCPP)           AB1324725;
    PARAMETER(DB1.MGL_Company);
    PARAMETER(DB1.MGL_Division);
    PARAMETER(DB1.MGL_Invoice_Batch_Number);
    PARAMETER(DB1.MGL_Payee);
    PARAMETER(DB1.MGL_Supplier);
    PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
    PARAMETER(DB1.MGL_Invoice_Batch_Type);
    PARAMETER(DB1.MGL_Invoice_Status);
    PARAMETER(DB1.MGL_Invoice_Date);
    PARAMETER(DB1.MGL_Currency);
    PARAMETER(DB1.MGL_Payment_Terms);
    PARAMETER(DB1.MGL_Total_Line_Amt_Net);
    PARAMETER(DB1.MGL_Cash_Discount_Base);
    PARAMETER(DB1.MGL_Foreign_Currency_Amt);
    PARAMETER(DB1.MGL_Total_Charges);
    PARAMETER(DB1.MGL_Total_Due);
    PARAMETER(DB1.MGL_Invoice_Matching);
    PARAMETER(DB1.MGL_Service_Code);
    PARAMETER(DB1.MGL_Payment_Method);
    PARAMETER(DB1.MGL_Voucher_Number_Series);
    PARAMETER(DB1.MGL_Voucher_Number);
    PARAMETER(DB1.MGL_Description);
    PARAMETER(DB1.MGL_Exchange_Rate_Type);
    PARAMETER(DB1.MGL_Purchase_Order_Nbr);
    PARAMETER(DB1.MGL_Cash_discount_Term);
    PARAMETER(DB1.MGL_Get_Payee_Defaults);
    PARAMETER(DB1.MGL_Job_Number);
    PARAMETER(DB1.MGL_Job_Name);
    PARAMETER(DB1.MGL_Entry_Date);
    PARAMETER(DB1.MGL_Entry_Time);
    PARAMETER(DB1.MGL_Reference_Number);
    PARAMETER(DB1.MGL_Exchange_rate);
    PARAMETER(DB1.MGL_Trade_code);
    PARAMETER(DB1.MGL_VAT);
    PARAMETER(DB1.MGL_Accounting_date);
    PARAMETER(DB1.MGL_Authorized_user);
    PARAMETER(DB1.MGL_Due_date);
    PARAMETER(DB1.MGL_Future_rate_agreement);
    PARAMETER(DB1.MGL_From_to_country);
    PARAMETER(DB1.MGL_Base_country);
    PARAMETER(DB1.MGL_Order_date);
    PARAMETER(DB1.MGL_Cash_discount_date_1);
    PARAMETER(DB1.MGL_Cash_discount_pct_1);
    PARAMETER(DB1.MGL_Cash_discount_Amt_1);
    PARAMETER(DB1.MGL_Cash_discount_date_2);
    PARAMETER(DB1.MGL_Cash_discount_amt_2);
    PARAMETER(DB1.MGL_Cash_discount_pct_2);
    PARAMETER(DB1.MGL_Cash_discount_date_3);
    PARAMETER(DB1.MGL_Cash_discount_pct_3);
    PARAMETER(DB1.MGL_Cash_discount_amt_3);
    PARAMETER(DB1.MGL_Total_taxable_amount);
    PARAMETER(DB1.MGL_Prepaid_amount);
    PARAMETER(DB1.MGL_VAT_reg_number);
    PARAMETER(DB1.MGL_Tax_applicable);
    PARAMETER(DB1.MGL_Document_code);
    PARAMETER(DB1.MGL_AP_standard_document);
    PARAMETER(DB1.MGL_Debit_note_reason);
    PARAMETER(DB1.MGL_Our_invoicing_address);
    PARAMETER(DB1.MGL_Text_line_1);
    PARAMETER(DB1.MGL_Text_line_2);
    PARAMETER(DB1.MGL_Text_line_3);
    PARAMETER(DB1.MGL_EAN_loc_code_payee);
    PARAMETER(DB1.MGL_EAN_loc_cde_Consignee);
    PARAMETER(DB1.MGL_EAN_loc_code_supplier);
    PARAMETER(DB1.MGL_Delivery_date);
    PARAMETER(DB1.MGL_Bank_account_identity);
    PARAMETER(DB1.MGL_Geographical_code);
    PARAMETER(DB1.MGL_Tax_included);
    PARAMETER(DB1.MGL_Original_invoice_nbr);
    PARAMETER(DB1.MGL_Original_year);
    PARAMETER(DB1.MGL_Payment_request_nbr);
    PARAMETER(DB1.MGL_Year);
    PARAMETER(DB1.MGL_Partial_validation);
    PARAMETER(DB1.MGL_ERP_Process_Sts);
    PARAMETER(DB1.MGL_ERP_Process_Date);
    PARAMETER(DB1.MGL_ERP_Process_Time);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(412);
   PARAMETER(PAR.MGL_AP_Additional_Info);
   PARAMETER(1);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(JOB.*USER);
   EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(413);
   PARAMETER(PAR.M3_Facility_Usr);
   PARAMETER(1);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(JOB.*USER);
   ENDIF;

   //?If held over and rcd exists add to Suppl Inv Rcd, else create it
   CASE;

   // IF PAR.Held Over Record Ld is Yes
   IF PAR.Held_Over_Record_Ld = 'Y';

   EXECUTE FUNCTION(Rtv Add H/O SpplInv#  RT) TYPE(RTVOBJ) FILE(PLCCCPP)           AB1325234;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(PAR.MGL_Supplier);
   PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
   PARAMETER(LCL.MGL_Foreign_Currency_Amt);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    CASE;

    // IF DB1.MGL ERP Process Sts is Not Processed
    IF DB1.MGL_ERP_Process_Sts = '0';

    // LCL.PAD Transaction Amount = DB1.MGL Foreign Currency Amt + PAR.MGL Foreign Currency Amt
    LCL.PAD_Transaction_Amount = DB1.MGL_Foreign_Currency_Amt + PAR.MGL_Foreign_Currency_Amt;

    EXECUTE FUNCTION(Chg M3 Supp Paym Head CH) TYPE(CHGOBJ) FILE(PLCCCPP)           AB1324725;
    PARAMETER(DB1.MGL_Company);
    PARAMETER(DB1.MGL_Division);
    PARAMETER(DB1.MGL_Invoice_Batch_Number);
    PARAMETER(DB1.MGL_Payee);
    PARAMETER(DB1.MGL_Supplier);
    PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
    PARAMETER(DB1.MGL_Invoice_Batch_Type);
    PARAMETER(DB1.MGL_Invoice_Status);
    PARAMETER(DB1.MGL_Invoice_Date);
    PARAMETER(DB1.MGL_Currency);
    PARAMETER(DB1.MGL_Payment_Terms);
    PARAMETER(DB1.MGL_Total_Line_Amt_Net);
    PARAMETER(DB1.MGL_Cash_Discount_Base);
    PARAMETER(LCL.PAD_Transaction_Amount);
    PARAMETER(DB1.MGL_Total_Charges);
    PARAMETER(DB1.MGL_Total_Due);
    PARAMETER(DB1.MGL_Invoice_Matching);
    PARAMETER(DB1.MGL_Service_Code);
    PARAMETER(DB1.MGL_Payment_Method);
    PARAMETER(DB1.MGL_Voucher_Number_Series);
    PARAMETER(DB1.MGL_Voucher_Number);
    PARAMETER(DB1.MGL_Description);
    PARAMETER(DB1.MGL_Exchange_Rate_Type);
    PARAMETER(DB1.MGL_Purchase_Order_Nbr);
    PARAMETER(DB1.MGL_Cash_discount_Term);
    PARAMETER(DB1.MGL_Get_Payee_Defaults);
    PARAMETER(DB1.MGL_Job_Number);
    PARAMETER(DB1.MGL_Job_Name);
    PARAMETER(DB1.MGL_Entry_Date);
    PARAMETER(DB1.MGL_Entry_Time);
    PARAMETER(DB1.MGL_Reference_Number);
    PARAMETER(DB1.MGL_Exchange_rate);
    PARAMETER(DB1.MGL_Trade_code);
    PARAMETER(DB1.MGL_VAT);
    PARAMETER(DB1.MGL_Accounting_date);
    PARAMETER(DB1.MGL_Authorized_user);
    PARAMETER(DB1.MGL_Due_date);
    PARAMETER(DB1.MGL_Future_rate_agreement);
    PARAMETER(DB1.MGL_From_to_country);
    PARAMETER(DB1.MGL_Base_country);
    PARAMETER(DB1.MGL_Order_date);
    PARAMETER(DB1.MGL_Cash_discount_date_1);
    PARAMETER(DB1.MGL_Cash_discount_pct_1);
    PARAMETER(DB1.MGL_Cash_discount_Amt_1);
    PARAMETER(DB1.MGL_Cash_discount_date_2);
    PARAMETER(DB1.MGL_Cash_discount_amt_2);
    PARAMETER(DB1.MGL_Cash_discount_pct_2);
    PARAMETER(DB1.MGL_Cash_discount_date_3);
    PARAMETER(DB1.MGL_Cash_discount_pct_3);
    PARAMETER(DB1.MGL_Cash_discount_amt_3);
    PARAMETER(DB1.MGL_Total_taxable_amount);
    PARAMETER(DB1.MGL_Prepaid_amount);
    PARAMETER(DB1.MGL_VAT_reg_number);
    PARAMETER(DB1.MGL_Tax_applicable);
    PARAMETER(DB1.MGL_Document_code);
    PARAMETER(DB1.MGL_AP_standard_document);
    PARAMETER(DB1.MGL_Debit_note_reason);
    PARAMETER(DB1.MGL_Our_invoicing_address);
    PARAMETER(DB1.MGL_Text_line_1);
    PARAMETER(DB1.MGL_Text_line_2);
    PARAMETER(DB1.MGL_Text_line_3);
    PARAMETER(DB1.MGL_EAN_loc_code_payee);
    PARAMETER(DB1.MGL_EAN_loc_cde_Consignee);
    PARAMETER(DB1.MGL_EAN_loc_code_supplier);
    PARAMETER(DB1.MGL_Delivery_date);
    PARAMETER(DB1.MGL_Bank_account_identity);
    PARAMETER(DB1.MGL_Geographical_code);
    PARAMETER(DB1.MGL_Tax_included);
    PARAMETER(DB1.MGL_Original_invoice_nbr);
    PARAMETER(DB1.MGL_Original_year);
    PARAMETER(DB1.MGL_Payment_request_nbr);
    PARAMETER(DB1.MGL_Year);
    PARAMETER(DB1.MGL_Partial_validation);
    PARAMETER(DB1.MGL_ERP_Process_Sts);
    PARAMETER(DB1.MGL_ERP_Process_Date);
    PARAMETER(DB1.MGL_ERP_Process_Time);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

    ENDIF;

   }

   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
   PARAMETER('S2D');
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   {
    //?USER: Process Data record

    // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
    PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

    //?Increment
    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

    CASE;

    // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
    IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

    ENDIF;

    EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
    PARAMETER(DB1.M3_Voucher_Number_Series);
    PARAMETER(DB1.M3_Voucher_Description);
    PARAMETER(DB1.M3_Voucher_Low_Number);
    PARAMETER(DB1.M3_Voucher_High_Number);
    PARAMETER(LCL.M3_Voucher_Next_Number);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Rtv Next Voucher Nbr   RT) TYPE(RTVOBJ) FILE(PLCEREP)          AB1324740;
   PARAMETER('HPE');
   PARAMETER(LCL.MGL_Voucher_Number);
   {
    //?USER: Process Data record

    // PAR.M3 Voucher Next Number = DB1.M3 Voucher Next Number
    PAR.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number;

    //?Increment
    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Next Number + CON.1
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Next_Number + 1;

    CASE;

    // IF LCL.M3 Voucher Next Number GT DB1.M3 Voucher High Number
    IF LCL.M3_Voucher_Next_Number > DB1.M3_Voucher_High_Number;

    // LCL.M3 Voucher Next Number = DB1.M3 Voucher Low Number
    LCL.M3_Voucher_Next_Number = DB1.M3_Voucher_Low_Number;

    ENDIF;

    EXECUTE FUNCTION(Chg M3 Voucher Number  CH) TYPE(CHGOBJ) FILE(PLCEREP)          AB1324701;
    PARAMETER(DB1.M3_Voucher_Number_Series);
    PARAMETER(DB1.M3_Voucher_Description);
    PARAMETER(DB1.M3_Voucher_Low_Number);
    PARAMETER(DB1.M3_Voucher_High_Number);
    PARAMETER(LCL.M3_Voucher_Next_Number);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   // LCL.MGL Debit note reason = CON.*BLANK
   LCL.MGL_Debit_note_reason = *BLANK;

   // LCL.MGL Debit note reason = LCL.DED M3 Debit Note Reason
   LCL.MGL_Debit_note_reason = LCL.DED_M3_Debit_Note_Reason;

   EXECUTE FUNCTION(Crt M3 Supp Paym Head CR) TYPE(CRTOBJ) FILE(PLCCCPP)           AB1324724;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(PAR.MGL_Payee);
   PARAMETER(PAR.MGL_Supplier);
   PARAMETER(LCL.MGL_Supplier_Invoice_Nbr);
   PARAMETER('30');
   PARAMETER(10);
   PARAMETER(PAR.MGL_Invoice_Date);
   PARAMETER(PAR.MGL_Currency);
   PARAMETER(PAR.MGL_Payment_Terms);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(LCL.MGL_Foreign_Currency_Amt);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(0);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Payment_Method);
   PARAMETER(PAR.MGL_Voucher_Number_Series);
   PARAMETER(LCL.MGL_Voucher_Number);
   PARAMETER(PAR.MGL_Description);
   PARAMETER(01);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(PAR.MGL_Get_Payee_Defaults);
   PARAMETER(PAR.MGL_Job_Number);
   PARAMETER(JOB.*PROGRAM);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Invoice_Date);
   PARAMETER(PAR.MGL_Authorized_user);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(01);
   PARAMETER(LCL.MGL_Debit_note_reason);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(0);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

    //?USER: Processing if Data record already exists

    EXECUTE FUNCTION(Chg M3 Supp Paym Head CH) TYPE(CHGOBJ) FILE(PLCCCPP)           AB1324725;
    PARAMETER(DB1.MGL_Company);
    PARAMETER(DB1.MGL_Division);
    PARAMETER(DB1.MGL_Invoice_Batch_Number);
    PARAMETER(DB1.MGL_Payee);
    PARAMETER(DB1.MGL_Supplier);
    PARAMETER(DB1.MGL_Supplier_Invoice_Nbr);
    PARAMETER(DB1.MGL_Invoice_Batch_Type);
    PARAMETER(DB1.MGL_Invoice_Status);
    PARAMETER(DB1.MGL_Invoice_Date);
    PARAMETER(DB1.MGL_Currency);
    PARAMETER(DB1.MGL_Payment_Terms);
    PARAMETER(DB1.MGL_Total_Line_Amt_Net);
    PARAMETER(DB1.MGL_Cash_Discount_Base);
    PARAMETER(DB1.MGL_Foreign_Currency_Amt);
    PARAMETER(DB1.MGL_Total_Charges);
    PARAMETER(DB1.MGL_Total_Due);
    PARAMETER(DB1.MGL_Invoice_Matching);
    PARAMETER(DB1.MGL_Service_Code);
    PARAMETER(DB1.MGL_Payment_Method);
    PARAMETER(DB1.MGL_Voucher_Number_Series);
    PARAMETER(DB1.MGL_Voucher_Number);
    PARAMETER(DB1.MGL_Description);
    PARAMETER(DB1.MGL_Exchange_Rate_Type);
    PARAMETER(DB1.MGL_Purchase_Order_Nbr);
    PARAMETER(DB1.MGL_Cash_discount_Term);
    PARAMETER(DB1.MGL_Get_Payee_Defaults);
    PARAMETER(DB1.MGL_Job_Number);
    PARAMETER(DB1.MGL_Job_Name);
    PARAMETER(DB1.MGL_Entry_Date);
    PARAMETER(DB1.MGL_Entry_Time);
    PARAMETER(DB1.MGL_Reference_Number);
    PARAMETER(DB1.MGL_Exchange_rate);
    PARAMETER(DB1.MGL_Trade_code);
    PARAMETER(DB1.MGL_VAT);
    PARAMETER(DB1.MGL_Accounting_date);
    PARAMETER(DB1.MGL_Authorized_user);
    PARAMETER(DB1.MGL_Due_date);
    PARAMETER(DB1.MGL_Future_rate_agreement);
    PARAMETER(DB1.MGL_From_to_country);
    PARAMETER(DB1.MGL_Base_country);
    PARAMETER(DB1.MGL_Order_date);
    PARAMETER(DB1.MGL_Cash_discount_date_1);
    PARAMETER(DB1.MGL_Cash_discount_pct_1);
    PARAMETER(DB1.MGL_Cash_discount_Amt_1);
    PARAMETER(DB1.MGL_Cash_discount_date_2);
    PARAMETER(DB1.MGL_Cash_discount_amt_2);
    PARAMETER(DB1.MGL_Cash_discount_pct_2);
    PARAMETER(DB1.MGL_Cash_discount_date_3);
    PARAMETER(DB1.MGL_Cash_discount_pct_3);
    PARAMETER(DB1.MGL_Cash_discount_amt_3);
    PARAMETER(DB1.MGL_Total_taxable_amount);
    PARAMETER(DB1.MGL_Prepaid_amount);
    PARAMETER(DB1.MGL_VAT_reg_number);
    PARAMETER(DB1.MGL_Tax_applicable);
    PARAMETER(DB1.MGL_Document_code);
    PARAMETER(DB1.MGL_AP_standard_document);
    PARAMETER(DB1.MGL_Debit_note_reason);
    PARAMETER(DB1.MGL_Our_invoicing_address);
    PARAMETER(DB1.MGL_Text_line_1);
    PARAMETER(DB1.MGL_Text_line_2);
    PARAMETER(DB1.MGL_Text_line_3);
    PARAMETER(DB1.MGL_EAN_loc_code_payee);
    PARAMETER(DB1.MGL_EAN_loc_cde_Consignee);
    PARAMETER(DB1.MGL_EAN_loc_code_supplier);
    PARAMETER(DB1.MGL_Delivery_date);
    PARAMETER(DB1.MGL_Bank_account_identity);
    PARAMETER(DB1.MGL_Geographical_code);
    PARAMETER(DB1.MGL_Tax_included);
    PARAMETER(DB1.MGL_Original_invoice_nbr);
    PARAMETER(DB1.MGL_Original_year);
    PARAMETER(DB1.MGL_Payment_request_nbr);
    PARAMETER(DB1.MGL_Year);
    PARAMETER(DB1.MGL_Partial_validation);
    PARAMETER(DB1.MGL_ERP_Process_Sts);
    PARAMETER(DB1.MGL_ERP_Process_Date);
    PARAMETER(DB1.MGL_ERP_Process_Time);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(412);
   PARAMETER(PAR.MGL_AP_Additional_Info);
   PARAMETER(1);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(JOB.*USER);
   EXECUTE FUNCTION(Crt M3 Supplier Addtl CR) TYPE(CRTOBJ) FILE(PLCFCPP)           AB1324909;
   PARAMETER(PAR.MGL_Company);
   PARAMETER(PAR.MGL_Division);
   PARAMETER(LCL.MGL_Invoice_Batch_Number);
   PARAMETER(413);
   PARAMETER(PAR.M3_Facility_Usr);
   PARAMETER(1);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.MGL_Entry_Date);
   PARAMETER(JOB.*Job_time);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(JOB.*USER);
   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

}


