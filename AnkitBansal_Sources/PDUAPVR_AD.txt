// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDUAPVR
// ?Date: 14.08.2025 Time: 03:30:00
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?** Change Allow Multi-Co from wrk to par context   03/22/06 LJB
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Company Number Pass   USR = PAR.Accounting Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

//?***** Change Log
//?10/03/03 RMC Added Item Code Selection
//?11/30/04 SLM Replace Sel by Warehouse with Sel by Company/Warehouse
//?12/07/05 RMC added input Dtl Summ parm, dont display selection and force
//?  summary report
//?02/08/06 RMC added input Usr Flag 2:
//?                    N=dont print Cust #/Name on report
//?02/10/06 RMC Dont condition Company for multi-company determination
//?*****
//?** 03/03/06 LJB Change multi-co security parm to input. In the
//?**  security routine, receive the multi-company field into a work
//?**  context. If the input multi-company parm is No or blanks then
//?**  protect the company number field. If it is Yes, then
//?**  allow the company number to be changed.
//?*****
//?** 03/22/06 LJB Switch the multi-company change back - it is not
//?**  working for the users the way they thought it would.
//?*****
//?** 01/02/08 RMC Added Email address and email proc in Clps
//?**       change the Status - Y or N field to be Yes for FTP and EMail
//?*****
//?USER: Load screen

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF PAR.Dtl/Sum/Ttl/Typ Sts   USR is Summary
IF PAR.Dtl_Sum_Ttl_Typ_Sts_USR = 'S';

// DTL.USR Detail or Summary = CND.Summary
DTL.USR_Detail_or_Summary = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Detail or Summary = CND.Detail
DTL.USR_Detail_or_Summary = 'D';

ENDIF;

// DTL.USR Program Description = Condition name of DTL.USR Detail or Summary
DTL.USR_Program_Description = RTVCND(DTL.USR_Detail_or_Summary);

// DTL.Export Sales = CND.All Sales
DTL.Export_Sales = 'A';

// DTL.Condition Desc. 1  USR = Condition name of DTL.Export Sales
DTL.Condition_Desc_1_USR = RTVCND(DTL.Export_Sales);

CASE;

// IF DTL.USR Flag 1 is Blank
IF DTL.USR_Flag_1 = *BLANK;

// DTL.USR Flag 1 = CND.No
DTL.USR_Flag_1 = 'N';

ENDIF;

//?USER: Validate fields

// LCL.Status - Y or N = CND.no
LCL.Status_Y_or_N = 'N';

CASE;

// IF DTL.Document Name USR is Not Entered
IF DTL.Document_Name_USR = *BLANK;

// AND DTL.Email Address is Blank
AND DTL.Email_Address = *BLANK;

// LCL.Status - Y or N = CND.no
LCL.Status_Y_or_N = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Status - Y or N = CND.yes
LCL.Status_Y_or_N = 'Y';

ENDIF;

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number_CDE);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Validate Sales Route
CASE;

// IF DTL.Sales Route Code is entered
IF DTL.Sales_Route_Code <> *BLANK;

EXECUTE FUNCTION(RTV Check Existence    RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1502618;
PARAMETER(DTL.Sales_Route_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(DTL.Sales_Route_Code);

ENDIF;

ENDIF;

//?Process F4 on Sales Route Code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Sales Route Code
AND PGM.*Cursor_field = DTL.Sales_Route_Code;

// Call program SEL Route by Sls Persn SR.
CALL PROGRAM(SEL Route by Sls Persn SR) ('PDS1SRR');
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(WRK.TXT_field_not_needed);

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Sales Type
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Product Str Type
AND PGM.*Cursor_field = DTL.USR_Product_Str_Type;

// Call program SEL Item Type Active   SR.
CALL PROGRAM(SEL Item Type Active   SR) ('PDENSRR');
PARAMETER(DTL.USR_Product_Str_Type);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Sales Group
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Product Str Group
AND PGM.*Cursor_field = DTL.USR_Product_Str_Group;

// Call program SEL Item Group Active  SR.
CALL PROGRAM(SEL Item Group Active  SR) ('PDEMSRR');
PARAMETER(DTL.USR_Product_Str_Group);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Sales Class
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR Product Struct Class
AND PGM.*Cursor_field = DTL.USR_Product_Struct_Class;

// Call program SEL Item Class Active  SR.
CALL PROGRAM(SEL Item Class Active  SR) ('PDELSRR');
PARAMETER(DTL.USR_Product_Struct_Class);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on Item Code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Item Code
AND PGM.*Cursor_field = DTL.Item_Code;

// Call program SEL Actv Item by Co    SR.
CALL PROGRAM(SEL Actv Item by Co    SR) ('PDL9SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on warehouse code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Warehouse Code
AND PGM.*Cursor_field = DTL.Warehouse_Code;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Company_Number_CDE);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?CALC: Screen function fields

// DTL.USR Program Description = CVTVAR(DTL.USR Summary/Detail or Tot)
DTL.USR_Program_Description = CVTVAR(DTL.USR_Summary_Detail_or_Tot);

//?USER: Validate relations

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

// DTL.Item Structure Type Desc = CON.*BLANK
DTL.Item_Structure_Type_Desc = *BLANK;

// DTL.Item Structure Group Desc = CON.*BLANK
DTL.Item_Structure_Group_Desc = *BLANK;

// DTL.Item Structure Class Desc = CON.*BLANK
DTL.Item_Structure_Class_Desc = *BLANK;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?05/11/07 JRB Removed hard coded companies
//?Validate company if entered
CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?Validate company if entered
// IF DTL.Company Number CDE is Equal to zero
IF DTL.Company_Number_CDE = *ZERO;

// DTL.Name = CON.*ALL
DTL.Name = *ALL;

//?Validate company if entered
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

//?Validate From Date
CASE;

// IF DTL.USR From Date is not equal zero
IF DTL.USR_From_Date <> *ZERO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_From_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Validate From Date
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date entered is not found in the Calendar file'
ERROR(USR0567);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//?Validate Through Date
CASE;

// IF DTL.USR Through Date is not equal zero
IF DTL.USR_Through_Date <> *ZERO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Through_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Validate Through Date
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date entered is not found in the Calendar file'
ERROR(USR0567);
MSGPARM(DTL.USR_Through_Date);

ENDIF;

//?If from date gt through date, error message
CASE;

// IF DTL.USR From Date GT DTL.USR Through Date
IF DTL.USR_From_Date > DTL.USR_Through_Date;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//?Validate Sales Type if entered
CASE;

// IF DTL.USR Product Str Type is greater than zero
IF DTL.USR_Product_Str_Type > *ZERO;

EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
PARAMETER(DTL.USR_Product_Str_Type);
PARAMETER(DTL.Item_Structure_Type_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Sales Type not found'
ERROR(USR1592);
MSGPARM(DTL.USR_Product_Str_Type);

ENDIF;

ENDIF;

//?Validate Sales Group if entered
CASE;

// IF DTL.USR Product Str Group is Entered
IF DTL.USR_Product_Str_Group > *ZERO;

EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(DTL.USR_Product_Str_Group);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(DTL.Item_Structure_Group_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Sales Group not found'
ERROR(USR1593);
MSGPARM(DTL.USR_Product_Str_Group);

ENDIF;

ENDIF;

//?Validate Sales Class if entered
CASE;

// IF DTL.USR Product Struct Class is Entered
IF DTL.USR_Product_Struct_Class <> *ZERO;

EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(DTL.USR_Product_Struct_Class);
PARAMETER(DTL.Item_Structure_Class_Desc);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Sales Class not found'
ERROR(USR1594);
MSGPARM(DTL.USR_Product_Struct_Class);

ENDIF;

ENDIF;

//?Validate Item code  if entered
CASE;

// IF DTL.Item Code is Entered
IF DTL.Item_Code <> *ZERO;

EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Item_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Item Description is equal to blank
IF DTL.Item_Description = *BLANK;

// Send error message - 'Company Item not found.'
ERROR(USR0326);
MSGPARM(DTL.Company_Number_CDE);
MSGPARM(DTL.Item_Code);

ENDIF;

ENDIF;

//?Validate warehouse if entered
CASE;

// IF DTL.Warehouse Code is Warehouse Code not Blank
IF DTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF WRK.Warehouse Description is equal to blank
IF WRK.Warehouse_Description = *BLANK;

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(DTL.Warehouse_Code);

ENDIF;

ENDIF;

// DTL.Condition Desc. 1  USR = Condition name of DTL.Export Sales
DTL.Condition_Desc_1_USR = RTVCND(DTL.Export_Sales);

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

//?Submit job for Print
// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.Date 1          PASS  USR = DTL.USR From Date
PAR.Date_1_PASS_USR = DTL.USR_From_Date;

// PAR.Date 2          PASS  USR = DTL.USR Through Date
PAR.Date_2_PASS_USR = DTL.USR_Through_Date;

//?Use available work fields to pass product structure parms
//?If Sales type is left blank move in zeroes
CASE;

// IF DTL.USR Product Str Type is *Blank
IF DTL.USR_Product_Str_Type < *ZERO;

// DTL.USR Product Str Type = CON.*ZERO
DTL.USR_Product_Str_Type = *ZERO;

ENDIF;

//?If Sales group is left blank move in zeroes
CASE;

// IF DTL.USR Product Str Group is *Blank
IF DTL.USR_Product_Str_Group < *ZERO;

// DTL.USR Product Str Group = CON.*ZERO
DTL.USR_Product_Str_Group = *ZERO;

ENDIF;

//?If Sales class is left blank move in zeroes
CASE;

// IF DTL.USR Product Struct Class is *Blanks
IF DTL.USR_Product_Struct_Class < *ZERO;

// DTL.USR Product Struct Class = CON.*ZERO
DTL.USR_Product_Struct_Class = *ZERO;

ENDIF;

// PAR.From Date Pass        USR = DTL.USR Product Str Type
PAR.From_Date_Pass_USR = DTL.USR_Product_Str_Type;

// PAR.Thru Date Pass        USR = DTL.USR Product Str Group
PAR.Thru_Date_Pass_USR = DTL.USR_Product_Str_Group;

// PAR.Order Number 1  PASS  USR = DTL.USR Product Struct Class
PAR.Order_Number_1_PASS_USR = DTL.USR_Product_Struct_Class;

// PAR.Item Code PASS        USR = DTL.Item Code
PAR.Item_Code_PASS_USR = DTL.Item_Code;

// PAR.USR Program Description = CVTVAR(CON.Sls By Item Structure)
PAR.USR_Program_Description = CVTVAR('Sls By Item Structure');

// PAR.USR Program name = CON.OMNPPCLP
PAR.USR_Program_name = 'OMNPPCLP';

// PAR.USR Program Name 2 = CON.OMNPPFR
PAR.USR_Program_Name_2 = 'OMNPPFR';

// LCL.Email addr 1 = DTL.Email Address
LCL.Email_addr_1 = DTL.Email_Address;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(LCL.Email_Addr_2);
PARAMETER(DTL.Email_Address);
{
 C                     MOVE #IPANA    #OO9NA
}


// Call program PRT Sls by Itm Struc  UP.
CALL PROGRAM(PRT Sls by Itm Struc  UP) ('PDT9UPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('O/M');
PARAMETER(PAR.USR_Program_name);
PARAMETER(PAR.USR_Program_Name_2);
PARAMETER(PAR.USR_Program_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Item_Code_PASS_USR);
PARAMETER(DTL.USR_Detail_or_Summary);
PARAMETER(DTL.Export_Sales);
PARAMETER(LCL.Status_Y_or_N);
PARAMETER(DTL.USR_Sales_Realiz_Flag);
PARAMETER(DTL.USR_Flag_1);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Document_Name_USR);
PARAMETER(PAR.USR_Flag_2);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Email_addr_1);
PARAMETER(LCL.Email_Addr_2);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

