// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDH3DFR
// ?Date: 14.08.2025 Time: 03:34:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log and Comments
DO;

//?S13015 RMC 5/03/2018 Set order type print sts if not N
//?*****
//?E4119 RMC 5/23/2016 Remove Live with tpm checks
//?*****
//?** 06/25/2015 LJB E004119  If Live w/TPM, disable options
//?  6, 7, 8, 16, F21
//?*****
//?** 08/05/2013 RMC E2625 TPM - dsp sched 'Load'dt text if live with TPM,
//?hide Schedule Seq and show Planned Ship Dt
//?*****
//?** 05/21/2012 RMC E2117 moved usda approval sts maint to bol print pmp
//?** Dailys needs tobe able to maintain it for export orders
//?*****
//?** 08/14/2008 LJB E00207
//?** Save Override miles, if entered, in total load miles field and
//?** pass to the print BOL program in select 6 and 7.
//?*****
//?5/17/04 RMC PKTR01 - Co is now Load Start Co
//?03/14/06 RMC Dont output only Company if multi is NO. whse access is req.
//?** 10/17/2006 LJB L61002C - Add print Y/N flag and default
//?** it to NO to prevent pricing information from printing
//?03/20/08 RMC Chg CFH to SJG in ****  Check Scheduled Vs. Shipped ****
ENDDO;

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv Allow Multi-Whs   RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1512192;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Allow_Multi_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.USR Print Detail = CND.yes
PAR.USR_Print_Detail = 'Y';

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(CTL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.USR Warehouse Code = PAR.Warehouse Code
CTL.USR_Warehouse_Code = PAR.Warehouse_Code;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// CTL.Load Status = CND.Shipped
CTL.Load_Status = 'S';

ENDIF;

//?Val: Warehouse Code
CASE;

// IF CTL.USR Warehouse Code is Warehouse Code Blank
IF CTL.USR_Warehouse_Code = *BLANK;

// Send error message - 'Warehouse Code is required.'
ERROR(USR2015);
MSGPARM(CTL.USR_Warehouse_Code);

QUIT;

//?Val: Warehouse Code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val User Whs Access   IF) TYPE(EXCINTFUN)                      AC1531984;
PARAMETER(JOB.*USER);
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER('S');
PARAMETER('U');
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Retrieve User Warehouse Access Type
 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Retrieve User Warehouse Access Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 ENDIF;

 //?Validate Access
 CASE;

 // IF PAR.Record Found USR is Record Not Found
 IF PAR.Record_Found_USR = 'N';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(PAR.User_Profile_Name);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 //?Validate Access
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Inventory Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Inventory Transactions
 IF PAR.Access_Area_Needed_USR = 'I';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Inventory Trans is *Not Update
 IF PAR.UWA_Inventory_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Inventory Trans is None
 IF PAR.UWA_Inventory_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Lot Loc Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Lot Loc Transactions
 IF PAR.Access_Area_Needed_USR = 'L';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Lot Loc Trans is *Not Update
 IF PAR.UWA_Lot_Loc_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Lot Loc Trans is None
 IF PAR.UWA_Lot_Loc_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Shipping Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Shipping Transactions
 IF PAR.Access_Area_Needed_USR = 'S';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Shipping Trans is *Not Update
 IF PAR.UWA_Shipping_Trans = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Shipping Trans is None
 IF PAR.UWA_Shipping_Trans = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 //?Cross Applications
 CASE;

 // IF PAR.Access Area Needed USR is Cross Applications
 IF PAR.Access_Area_Needed_USR = 'C';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Unused Sts is *Not Update
 IF PAR.UWA_Cross_Applications = 'N'/'R';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Unused Sts is None
 IF PAR.UWA_Cross_Applications = 'N';

 EXECUTE FUNCTION(Send error message    IF) TYPE(EXCINTFUN)                      AC1539638;
 PARAMETER(PAR.Access_Area_Needed_USR);
 PARAMETER(PAR.Access_Needed_USR);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?Execute internal function

  // PAR.Condition Name 10 USR = Condition name of PAR.Access Needed USR
  PAR.Condition_Name_10_USR = RTVCND(PAR.Access_Needed_USR);

  // PAR.Condition Name USR = Condition name of PAR.Access Area Needed USR
  PAR.Condition_Name_USR = RTVCND(PAR.Access_Area_Needed_USR);

  // Send error message - '&1 Access Denied to &2 Application Area for &3 Warehouse.'
  ERROR(USR2792);
  MSGPARM(PAR.Condition_Name_10_USR);
  MSGPARM(PAR.Condition_Name_USR);
  MSGPARM(PAR.Warehouse_Code);

  QUIT;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

SET CURSOR;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?USER: Initialize subfile record from DBF record

//?If company selection is made, then select only that company. * 3/14/06
CASE;

// IF CTL.Accounting Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// AND DB1.Accounting Company Number NE CTL.Accounting Company Number
AND DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Include only Locked and Shipped Loads.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Load Status is Shipped
IF DB1.Load_Status = 'S';

// IF *OTHERWISE
IF *OTHERWISE;

//?Partial BOL printed
CASE;

// IF DB1.Load Status is Lock
IF DB1.Load_Status = 'L';

//?Partial BOL printed
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Select if Printed = Y and EDI Code = M
CASE;

// IF CTL.Printed is Yes
IF CTL.Printed = 'Y';

// AND PGM.*Record selected is *YES
AND PGM.*Record_selected = 'Y';

CASE;

// IF DB1.EDI Status 1 is Modified
IF DB1.EDI_Status_1 = 'M';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select if Printed = N and EDI Code = Blank
CASE;

// IF CTL.Printed is No
IF CTL.Printed = 'N';

// AND PGM.*Record selected is *YES
AND PGM.*Record_selected = 'Y';

CASE;

// IF DB1.EDI Status 1 is Blank
IF DB1.EDI_Status_1 = *BLANK;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Load Print flag
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF DB1.EDI Status 1 is Modified
IF DB1.EDI_Status_1 = 'M';

// RCD.Printed = CND.Yes
RCD.Printed = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Printed = CND.Blank
RCD.Printed = *BLANK;

ENDIF;

ENDIF;

//?Sel Loads by Warehouse
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.USR Warehouse Code is Warehouse Code not Blank
IF CTL.USR_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Sel Load by Whs       IF) TYPE(EXCINTFUN)                      AC1512394;
PARAMETER(PGM.*Record_selected);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER(RCD.Whs_Ord_Ship_Sts_USR);
PARAMETER(RCD.Plant_Controlled_Sts);
{
 //?Execute internal function

 // PAR.*Record selected = CND.*NO
 PAR.*Record_selected = 'N';

 EXECUTE FUNCTION(Sel Order by Whs      RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1512395;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.*Record_selected);
 PARAMETER(PAR.Whs_Ord_Ship_Sts_USR);
 PARAMETER(PAR.Plant_Controlled_Sts);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  // PAR.Whs Ord Ship Sts USR = CND.Not Shipped
  PAR.Whs_Ord_Ship_Sts_USR = *BLANK;

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  // PAR.Count 2 USR = CON.*ZERO
  PAR.Count_2_USR = *ZERO;

  // PAR.Plant Controlled Sts = CND.no
  PAR.Plant_Controlled_Sts = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(Sel Order by Whs      RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1512396;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.*Record_selected);
  PARAMETER(PAR.Whs_Ord_Found_STS);
  {
   //?USER: Initialize routine

   // PAR.Whs Ord Found STS = CND.no
   PAR.Whs_Ord_Found_STS = 'N';

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Not cancelled
   IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

   CASE;

   // IF PAR.Warehouse Code EQ DB1.Warehouse Code
   IF PAR.Warehouse_Code = DB1.Warehouse_Code;

   // PAR.*Record selected = CND.*YES
   PAR.*Record_selected = 'Y';

   // PAR.Whs Ord Found STS = CND.yes
   PAR.Whs_Ord_Found_STS = 'Y';

   QUIT;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF DB1.Trans Contol AS400/Plant is Plant
  IF DB1.Trans_Contol_AS400_Plant = 'P';

  // PAR.Plant Controlled Sts = CND.yes
  PAR.Plant_Controlled_Sts = 'Y';

  ENDIF;

  CASE;

  // IF PAR.Whs Ord Found STS is yes
  IF PAR.Whs_Ord_Found_STS = 'Y';

  CASE;

  // IF DB1.Header Status is Confirmed & Complete
  IF DB1.Header_Status = 'C'/'R';

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Count 2 USR = PAR.Count 2 USR + CON.1
  PAR.Count_2_USR = PAR.Count_2_USR + 1;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF PAR.Count USR is GT 0
  IF PAR.Count_USR > *ZERO;

  CASE;

  // IF PAR.Count 2 USR is Greater than zero
  IF PAR.Count_2_USR > *ZERO;

  // PAR.Whs Ord Ship Sts USR = CND.Partial
  PAR.Whs_Ord_Ship_Sts_USR = 'P';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Whs Ord Ship Sts USR = CND.All
  PAR.Whs_Ord_Ship_Sts_USR = 'A';

  ENDIF;

  ENDIF;

 }

}


ENDIF;

ENDIF;

// RCD.Trailer ID USR = DB1.Trailer Id
RCD.Trailer_ID_USR = DB1.Trailer_Id;

EXECUTE FUNCTION(RTV Load for Confirm   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1545029;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Order_Confirmed_Sts_USR);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.Order Confirmed Sts USR = CND.no
 PAR.Order_Confirmed_Sts_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Header Status is Cancelled
 IF DB1.Header_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Check Event        RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1320238;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('04');
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // PAR.Order Confirmed Sts USR = CND.yes
 PAR.Order_Confirmed_Sts_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


//?****  Check Scheduled Vs. Shipped ****
CASE;

// IF CTL.Warehouse Code is Not Guymon Fresh
IF CTL.Warehouse_Code <> 'GP1';

// RCD.Reverse Image Flag USR = CND.No
RCD.Reverse_Image_Flag_USR = 'N';

EXECUTE FUNCTION(Rtv SchWgt w/Whs      RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1714393;
PARAMETER(RCD.Load_ID);
PARAMETER('GP1');
PARAMETER('CF1');
PARAMETER('SJG');
PARAMETER('CF2');
PARAMETER(LCL.Weight_Schd_1_USR);
PARAMETER(LCL.Weight_Schd_2_USR);
PARAMETER(LCL.Weight_Schd_3_USR);
PARAMETER(LCL.Weight_Schd_4_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?* Warehouse 1 *
 EXECUTE FUNCTION(Rtv Sched Wgt Total   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1714394;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_1_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Scheduled
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Scheduled;

 }

 // PAR.Weight 1 USR = PAR.Weight 1 USR + LCL.Weight Shipped Total
 PAR.Weight_1_USR = PAR.Weight_1_USR + LCL.Weight_Shipped_Total;

 //?* Warehouse 2 *
 EXECUTE FUNCTION(Rtv Sched Wgt Total   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1714394;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_2_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Scheduled
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Scheduled;

 }

 // PAR.Weight 2 USR = PAR.Weight 2 USR + LCL.Weight Shipped Total
 PAR.Weight_2_USR = PAR.Weight_2_USR + LCL.Weight_Shipped_Total;

 //?* Warehouse 3 *
 EXECUTE FUNCTION(Rtv Sched Wgt Total   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1714394;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_3_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Scheduled
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Scheduled;

 }

 // PAR.Weight 3 USR = PAR.Weight 3 USR + LCL.Weight Shipped Total
 PAR.Weight_3_USR = PAR.Weight_3_USR + LCL.Weight_Shipped_Total;

 //?* Warehouse 4 *
 EXECUTE FUNCTION(Rtv Sched Wgt Total   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1714394;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_4_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Scheduled
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Scheduled;

 }

 // PAR.Weight 4 USR = PAR.Weight 4 USR + LCL.Weight Shipped Total
 PAR.Weight_4_USR = PAR.Weight_4_USR + LCL.Weight_Shipped_Total;

}


EXECUTE FUNCTION(Rtv ShpWgt w/Whs      RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1683389;
PARAMETER(RCD.Load_ID);
PARAMETER('GP1');
PARAMETER('CF1');
PARAMETER('SJG');
PARAMETER('CF2');
PARAMETER(LCL.Weight_1_USR);
PARAMETER(LCL.Weight_2_USR);
PARAMETER(LCL.Weight_3_USR);
PARAMETER(LCL.Weight_4_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?* Warehouse 1 *
 EXECUTE FUNCTION(Rtv Shipped Wgt Total RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1683390;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_1_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 }

 // PAR.Weight 1 USR = PAR.Weight 1 USR + LCL.Weight Shipped Total
 PAR.Weight_1_USR = PAR.Weight_1_USR + LCL.Weight_Shipped_Total;

 //?* Warehouse 2 *
 EXECUTE FUNCTION(Rtv Shipped Wgt Total RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1683390;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_2_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 }

 // PAR.Weight 2 USR = PAR.Weight 2 USR + LCL.Weight Shipped Total
 PAR.Weight_2_USR = PAR.Weight_2_USR + LCL.Weight_Shipped_Total;

 //?* Warehouse 3 *
 EXECUTE FUNCTION(Rtv Shipped Wgt Total RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1683390;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_3_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 }

 // PAR.Weight 3 USR = PAR.Weight 3 USR + LCL.Weight Shipped Total
 PAR.Weight_3_USR = PAR.Weight_3_USR + LCL.Weight_Shipped_Total;

 //?* Warehouse 4 *
 EXECUTE FUNCTION(Rtv Shipped Wgt Total RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1683390;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Warehouse_4_USR);
 PARAMETER(LCL.Weight_Shipped_Total);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 }

 // PAR.Weight 4 USR = PAR.Weight 4 USR + LCL.Weight Shipped Total
 PAR.Weight_4_USR = PAR.Weight_4_USR + LCL.Weight_Shipped_Total;

}


//?CF1
CASE;

// IF LCL.Weight Schd 2 USR is Greater than zero
IF LCL.Weight_Schd_2_USR > *ZERO;

CASE;

// IF LCL.Weight 2 USR is Equal to zero
IF LCL.Weight_2_USR = *ZERO;

// RCD.Reverse Image Flag USR = CND.Yes
RCD.Reverse_Image_Flag_USR = 'Y';

ENDIF;

ENDIF;

//?SJG
CASE;

// IF LCL.Weight Schd 3 USR is Greater than zero
IF LCL.Weight_Schd_3_USR > *ZERO;

CASE;

// IF LCL.Weight 3 USR is Equal to zero
IF LCL.Weight_3_USR = *ZERO;

// RCD.Reverse Image Flag USR = CND.Yes
RCD.Reverse_Image_Flag_USR = 'Y';

ENDIF;

ENDIF;

//?CF2
CASE;

// IF LCL.Weight Schd 4 USR is Greater than zero
IF LCL.Weight_Schd_4_USR > *ZERO;

CASE;

// IF LCL.Weight 4 USR is Equal to zero
IF LCL.Weight_4_USR = *ZERO;

// RCD.Reverse Image Flag USR = CND.Yes
RCD.Reverse_Image_Flag_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?** Use Override miles, if entered. Pass to BOL print.  E00207
CASE;

// IF DB1.Override Total Load Miles is Entered
IF DB1.Override_Total_Load_Miles <> *ZERO;

// RCD.Total Load Miles = DB1.Override Total Load Miles
RCD.Total_Load_Miles = DB1.Override_Total_Load_Miles;

//?** Use Override miles, if entered. Pass to BOL print.  E00207
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Load Miles = DB1.Total Load Miles
RCD.Total_Load_Miles = DB1.Total_Load_Miles;

ENDIF;

//?CALC: Subfile control function fields

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile control (Pre-confirm)

//?Select
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.USR Warehouse Code
IF PGM.*Cursor_field = CTL.USR_Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.USR_Warehouse_Code);

ENDIF;

ENDIF;

//?Reload subfile if Warehouse changed.
CASE;

// IF PAR.Warehouse Code NE CTL.USR Warehouse Code
IF PAR.Warehouse_Code <> CTL.USR_Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Warehouse Code = CTL.USR Warehouse Code
PAR.Warehouse_Code = CTL.USR_Warehouse_Code;

QUIT;

ENDIF;

//?SEL: Carrier
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Carrier Code
IF PGM.*Cursor_field = CTL.Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(CTL.Carrier_Code);

ENDIF;

ENDIF;

//?PRT: Load List
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// Call program Prt Load List Rpt      PV.
CALL PROGRAM(Prt Load List Rpt      PV) ('OMD2PVR');

ENDIF;

//?PRT: Order Status
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

//?** Add print Y/N flag and default it to NO   10/17/2006 LJB
//?** this will prevent pricing information from printing
// PAR.Print (Yes/No) USR = CND.No
PAR.Print_Yes_No_USR = 'N';

// Call program PMT Order Status Rpt.  PV.
CALL PROGRAM(PMT Order Status Rpt.  PV) ('PDFEPVR');
PARAMETER(PAR.Print_Yes_No_USR);

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Option 5:  Work With Orders
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// Call program WW Orders on Load      DF.
CALL PROGRAM(WW Orders on Load      DF) ('PDODDFR');
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Weight_Accumulated);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?Option 6:  Print BOL  ***OMS336*** (Until Live W/TPM  E004119)
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

CASE;

// IF RCD.Whs Ord Ship Sts USR is All
IF RCD.Whs_Ord_Ship_Sts_USR = 'A';

//?allow edit to USDA approved flag on BOL Print Prompt
// PAR.PRT Description = CON.Generate Bill of Lading
PAR.PRT_Description = 'Generate Bill of Lading';

// PAR.USR Flag 1 = CND.No
PAR.USR_Flag_1 = 'N';

//?** Override miles will be in the total load miles, if they exist E00207
// Call program PMT B.O.L. Prompt      PV.
CALL PROGRAM(PMT B.O.L. Prompt      PV) ('PDCKPVR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Reefer_Temperature);
PARAMETER(RCD.Seal_1);
PARAMETER(RCD.Seal_2);
PARAMETER(RCD.Seal_3);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Trailer_ID_USR);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Number_Pallets_Received);
PARAMETER(RCD.Number_Pallets_Loaded);
PARAMETER(RCD.Product_Temperature);
PARAMETER(RCD.Number_Spacers_Loaded);
PARAMETER(RCD.Car_Veh_Initials);
PARAMETER(RCD.Total_Load_Miles);
PARAMETER(RCD.Recorder_ID);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Export_Status);
PARAMETER(RCD.BOL_Complete_Date);
PARAMETER(RCD.BOL_Complete_Time);
PARAMETER(RCD.Scheduled_Delivery_Date);
PARAMETER(RCD.Scheduled_Delivery_Time);
PARAMETER(RCD.Avg_Pallet_Tare);
PARAMETER(RCD.Tot_Pallet_Tare);
PARAMETER(RCD.Export_Load_USDA_OK);
PARAMETER(RCD.Shipping_Temp_C_F_txt);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.USR_Flag_1);
PARAMETER(*BLANK);
PARAMETER(CTL.USR_Warehouse_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'BOL Print Invalid.  All Orders on the Load for the Warehouse must be shippe
ERROR(USR2674);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?Option 7:  Prt BOL and Recalc Sched Dlv Dt  (till live w/tpm e004119)
CASE;

// IF RCD.*SFLSEL is Opt 7
IF RCD.*SFLSEL = '7'/'7';

//?Validation
CASE;

// IF RCD.Load Status is Prior to Shipped
IF RCD.Load_Status = 'C'/'E'/'L'/'U';

// Send error message - 'Load has not been shipped.  Use Option 9 for Preliminary Bill of Lading.'
ERROR(USR2673);
MSGPARM(RCD.*SFLSEL);

QUIT;

//?Validation
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Unused Status USR = CND.UNUSED
PAR.Unused_Status_USR = *BLANK;

ENDIF;

EXECUTE FUNCTION(EDT BOL ReCalcDts&Fax  IF) TYPE(EXCINTFUN)                     AC1480801;
PARAMETER(PAR.Error_Status);
{
 //?Execute internal function

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
 PARAMETER('REDODT');
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Access_Denied_Y_N);
 {
  //?Execute internal function

  // PAR.User Profile Name = JOB.*USER
  PAR.User_Profile_Name = JOB.*USER;

  EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(WRK.Access_Denied_Y_N);
  {
   //?Execute internal function

   //?RMC 5/11/09 Rtv default company from user profile --
   //?  Override user code model company if it exists
   EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.User_Code_Model);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?User Profile Record Not found
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   //?User Profile Record Not found
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   ENDIF;

   CASE;

   // IF PAR.User Code Model is equal to blank
   IF PAR.User_Code_Model = *BLANK;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Code_Model);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   // PAR.Warehouse Code = LCL.Warehouse Code
   PAR.Warehouse_Code = LCL.Warehouse_Code;

   //?Return code when not normal for Application Profile
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   //?Return code when not normal for Application Profile
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   ENDIF;

   CASE;

   // IF LCL.Company Number is greater than zero
   IF LCL.Company_Number > *ZERO;

   // PAR.Company Number = LCL.Company Number
   PAR.Company_Number = LCL.Company_Number;

   CASE;

   // IF LCL.Warehouse Code is Not Blanks
   IF LCL.Warehouse_Code <> *BLANK;

   EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Shipping_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    CASE;

    // IF DB1.Production Warehouse Code is Warehouse Code not Blank
    IF DB1.Production_Warehouse_Code <> *BLANK;

    // PAR.Warehouse Code = DB1.Production Warehouse Code
    PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

    QUIT;

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

  // PAR.Company Number = WRK.Company Number
  PAR.Company_Number = WRK.Company_Number;

  // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
  PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

  //?If access denied is no, rtv co. name
  CASE;

  // IF WRK.Access Denied (Y/N) is no
  IF WRK.Access_Denied_Y_N = 'N';

  EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 CASE;

 // IF PAR.Access Denied (Y/N) is yes
 IF PAR.Access_Denied_Y_N = 'Y';

 // Send error message - 'User not allowed to recalculate Sched Dlvry Dates'
 ERROR(USR2538);

 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 ENDIF;

}


CASE;

// IF PAR.Error Status is no
IF PAR.Error_Status = 'N';

// PAR.PRT Description = CON.Generate Bill of Lading
PAR.PRT_Description = 'Generate Bill of Lading';

// PAR.USR Flag 1 = CND.Yes
PAR.USR_Flag_1 = 'Y';

//?** Override miles will be in the total load miles, if they exist E00207
// Call program PMT B.O.L. Prompt      PV.
CALL PROGRAM(PMT B.O.L. Prompt      PV) ('PDCKPVR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Reefer_Temperature);
PARAMETER(RCD.Seal_1);
PARAMETER(RCD.Seal_2);
PARAMETER(RCD.Seal_3);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Trailer_ID_USR);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Number_Pallets_Received);
PARAMETER(RCD.Number_Pallets_Loaded);
PARAMETER(RCD.Product_Temperature);
PARAMETER(RCD.Number_Spacers_Loaded);
PARAMETER(RCD.Car_Veh_Initials);
PARAMETER(RCD.Total_Load_Miles);
PARAMETER(RCD.Recorder_ID);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(*MISSING);
PARAMETER(RCD.BOL_Complete_Date);
PARAMETER(RCD.BOL_Complete_Time);
PARAMETER(RCD.Scheduled_Delivery_Date);
PARAMETER(RCD.Scheduled_Delivery_Time);
PARAMETER(RCD.Avg_Pallet_Tare);
PARAMETER(RCD.Tot_Pallet_Tare);
PARAMETER(*MISSING);
PARAMETER(RCD.Shipping_Temp_C_F_txt);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.USR_Flag_1);
PARAMETER(PAR.Unused_Status_USR);
PARAMETER(CTL.USR_Warehouse_Code);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 8:  Work With Orders-Shipping
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program WW Orders For Shipmnt  DF.
CALL PROGRAM(WW Orders For Shipmnt  DF) ('PDL6DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(CTL.USR_Warehouse_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Option 10:  Work With Picking Orders
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

//?5/3/18 RMC make sure sts is NO for all orders
EXECUTE FUNCTION(Rtv Chg Print Sts     RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2149541;
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Order Type Print Status is not no
 IF DB1.Order_Type_Print_Status = *BLANK/'Y';

 EXECUTE FUNCTION(CHG Ord Typ Prt Status CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1308691;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('N');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(PAR.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 ENDIF;

}


// Call program WW Picking Orders     DF.
CALL PROGRAM(WW Picking Orders     DF) ('PDH5DFR');
PARAMETER(RCD.Load_ID);
PARAMETER(CTL.USR_Warehouse_Code);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Trailer_Id);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Truck_Size);
PARAMETER(RCD.Load_Type);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?Option 16:  Display Dispatch/Tracer   (Until Live W/TPM  E004119)
CASE;

// IF RCD.*SFLSEL is Option 16
IF RCD.*SFLSEL = '16';

// Call program DSP Dispatch/Tracer    DF.
CALL PROGRAM(DSP Dispatch/Tracer    DF) ('PDT3DFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Final processing (Pre-confirm)

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

SET CURSOR;

