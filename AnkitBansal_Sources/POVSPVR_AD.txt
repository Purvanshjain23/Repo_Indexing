// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POVSPVR
// ?Date: 14.08.2025 Time: 03:39:12
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('YR');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

MOVE *ALL (To: DTL From: PAR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Department Desc DRV) TYPE(DRVFLD)                              AC1666904;
PARAMETER(DTL.Department_Desc_DRV);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Department_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Department_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Production Line Desc DRV) TYPE(DRVFLD)                         AC1666905;
PARAMETER(DTL.Production_Line_Desc_DRV);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Production_Line_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Line Desc    RT) TYPE(RTVOBJ) FILE(POCMREP)           AC1666906;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Line_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate fields

//?End of Shift not ready
CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// Send completion message - '&1 Department and &2 Line is not available for processing.'
MESSAGE(USR3242 *COMPLETION);
MSGPARM(PAR.Department_Code);
MSGPARM(PAR.Production_Line_Code);
MSGPARM(DTL.Production_Date);
MSGPARM(DTL.Production_Shift);

QUIT;

ENDIF;

EXECUTE FUNCTION(Rtv Dept Info         RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1671635;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Production_Shift);
PARAMETER(LCL.Head_Cut);
PARAMETER(LCL.Cold_Weight);
PARAMETER(WRK.Avg_Cold_Weight);
PARAMETER(WRK.Production_Standard_Yld);
PARAMETER(WRK.Actual_Yield);
PARAMETER(WRK.Yield_Variance);
PARAMETER(WRK.Weight_Variance);
PARAMETER(WRK.Total_Line_Weight);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(Rtv Dept Total Wgt    RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1671636;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.Total_Line_Weight);
 {
  //?USER: Process Data record

  // PAR.Total Line Weight = PAR.Total Line Weight + DB1.Total Line Weight
  PAR.Total_Line_Weight = PAR.Total_Line_Weight + DB1.Total_Line_Weight;

 }

}


//?Req for CUT dept only 3/9/04
CASE;

// IF DTL.Department Code is CUT
IF DTL.Department_Code = 'CUT';

// AND LCL.Head Cut is LE Zero
AND ( LCL.Head_Cut <= *ZERO;

// OR LCL.Cold Weight is Less than or equal zero
OR LCL.Cold_Weight <= *ZERO );

// Send error message - 'Head Cut and Cold Weight are not available for &1 Department and &2 Line.'
ERROR(USR3255);
MSGPARM(DTL.Department_Code);
MSGPARM(DTL.Production_Line_Code);
MSGPARM(*ZERO);
MSGPARM(*ZERO);

QUIT;

ENDIF;

//?USER: User defined action

CASE;

// IF DTL.*CMD key is SUBMIT/NEXT
IF DTL.*CMD_key = '08';

CASE;

// IF PAR.YDL Process Status is 00-Reporting Not Started
IF PAR.YDL_Process_Status = *BLANK;

// Call program Zzz Process Shift End XF.
CALL PROGRAM(Zzz Process Shift End XF) ('POVOXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Production_Line_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Production_Shift);

// IF *OTHERWISE
IF *OTHERWISE;

//?Recapture Production & Delete Pending
EXECUTE FUNCTION(Rtv Init Production   RT) TYPE(RTVOBJ) FILE(POCPCPP)           AC1673663;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Production_Line_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Production_Shift);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Dlt Yld Detail Trans  DL) TYPE(DLTOBJ) FILE(POCPCPP)           AC1664094;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Partial_Item_Code);
 PARAMETER(DB1.Yld_Transaction_Code);
 PARAMETER(DB1.Yld_Transaction_Seq);
}


EXECUTE FUNCTION(Rtv Init Prod/Pending RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1673665;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Production_Line_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Production_Shift);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Prod/Pending      CH) TYPE(CHGOBJ) FILE(POCOCPP)           AC1673666;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Partial_Item_Code);
 PARAMETER(DB1.Yld_Inv_Balance_Type);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 CASE;

 // IF DB1.Yld Inv Balance Type is WIP Reject
 IF DB1.Yld_Inv_Balance_Type = 'RJ';

 EXECUTE FUNCTION(Chg BeginInv/Not Used CH) TYPE(CHGOBJ) FILE(POCOCPP)           AC1671134;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Partial_Item_Code);
 PARAMETER(DB1.Yld_Inv_Balance_Type);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Not_Used_Wgt);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

}


// Call program Zzz Process Shift End XF.
CALL PROGRAM(Zzz Process Shift End XF) ('POVOXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Production_Line_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Production_Shift);

ENDIF;

CASE;

// IF DTL.Department Code is Loin Boning
IF DTL.Department_Code = 'LOINS';

// PAR.Yld Program USR = CND.Loin Boning Input Worksht
PAR.Yld_Program_USR = 'LB';

// IF DTL.Production Line Code is Bone-In Loin
IF DTL.Production_Line_Code = 'BILOIN';

// PAR.Yld Program USR = CND.Loin Boning Dsply Worksht
PAR.Yld_Program_USR = 'LD';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Yld Program USR = CND.Production Review
PAR.Yld_Program_USR = 'PR';

ENDIF;

RETURN;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

RETURN;

ENDIF;

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

RETURN;

ENDIF;

