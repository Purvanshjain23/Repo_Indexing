// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POOIPVR
// ?Date: 14.08.2025 Time: 03:38:19
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

//?***** Change Log
//?** 01/31/2006 LJB
//?** Put back all processing for Company Number. This has been added
//?** back in per Tim in A/R (For Triumph)
//?*****
//?** 11/28/2006 LJB PK0039
//?** Add A/R Aging Code to the screen. If no selection is made,
//?** retrieve the Default Aging Code
//?*****
//?** 12/11/2006 LJB PK0039
//?** Put the default aging code on the screen. Add email address
//?** and email format.
//?** 12/22/2008 SAZ E00048 Add opt 4 to print By salesperson summarized.
//?*****
//?USER: Load screen

//?** Put company number processing back in per Tim in A/R-1/31/06 LJB
//?** Initialize Company Number on the screen from security parms    LJB
//?*****
//?** Retrieve Default Aging Code from the new
//?** A/R Control file                   11/28/2006 LJB PK0039
// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.USR Detail or Summary = CND.Report Selection 1
DTL.USR_Detail_or_Summary = 1;

EXECUTE FUNCTION(RTV Default Aging Code RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1801040;
PARAMETER(DTL.A_R_Aging_Code);
PARAMETER(WRK.A_R_Aging_Days_1);
PARAMETER(WRK.A_R_Aging_Days_2);
PARAMETER(WRK.A_R_Aging_Days_3);
PARAMETER(WRK.A_R_Aging_Days_4);
PARAMETER(WRK.Age_by_Trans_or_Due_Date);
PARAMETER(WRK.Default_Y_N);
PARAMETER(WRK.Record_Status);
{
 //?USER: Initialize routine

 // PAR.A/R Aging Code = CND.Not Entered
 PAR.A_R_Aging_Code = *BLANK;

 //?USER: Process Data record

 // PAR.A/R Aging Code = DB1.A/R Aging Code
 PAR.A_R_Aging_Code = DB1.A_R_Aging_Code;

 CASE;

 // IF DB1.Default Y/N is yes
 IF DB1.Default_Y_N = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// DTL.Status - Y or N = CND.no
DTL.Status_Y_or_N = 'N';

// DTL.Include Charge Backs = CND.No
DTL.Include_Charge_Backs = 'N';

// DTL.Include Rebills = CND.No
DTL.Include_Rebills = 'N';

//?USER: Validate fields

//?** Prompt Company Number, added back 1/31/2006                LJB
//?Prompt F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(DTL.Company_Number_CDE);

//?** Put retrieved co# into pass field, else, replace orig co#    LJB
CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

//?** Put retrieved co# into pass field, else, replace orig co#    LJB
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

// DTL.Company Number CDE = PAR.Company Number
DTL.Company_Number_CDE = PAR.Company_Number;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

// IF PGM.*Cursor field <IS> DTL.A/R Aging Code
IF PGM.*Cursor_field = DTL.A_R_Aging_Code;

// Call program SEL A/R Aging Control  SR.
CALL PROGRAM(SEL A/R Aging Control  SR) ('PMCESRR');
PARAMETER(DTL.A_R_Aging_Code);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Validate Salesperson
CASE;

// IF DTL.Salesperson Code is entered
IF DTL.Salesperson_Code <> *BLANK;

EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(DTL.Salesperson_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?USER: Validate relations

//?** Process Company Number and Name                  1/31/2006 LJB
EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.USR Company Name = CON.*BLANK
DTL.USR_Company_Name = *BLANK;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.USR_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Company not found
CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Validate Aging Code, default if none is entered.
CASE;

// IF DTL.A/R Aging Code is Not Entered
IF DTL.A_R_Aging_Code = *BLANK;

EXECUTE FUNCTION(RTV Default Aging Code RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1801040;
PARAMETER(DTL.A_R_Aging_Code);
PARAMETER(WRK.A_R_Aging_Days_1);
PARAMETER(WRK.A_R_Aging_Days_2);
PARAMETER(WRK.A_R_Aging_Days_3);
PARAMETER(WRK.A_R_Aging_Days_4);
PARAMETER(WRK.Age_by_Trans_or_Due_Date);
PARAMETER(WRK.Default_Y_N);
PARAMETER(WRK.Record_Status);
{
 //?USER: Initialize routine

 // PAR.A/R Aging Code = CND.Not Entered
 PAR.A_R_Aging_Code = *BLANK;

 //?USER: Process Data record

 // PAR.A/R Aging Code = DB1.A/R Aging Code
 PAR.A_R_Aging_Code = DB1.A_R_Aging_Code;

 CASE;

 // IF DB1.Default Y/N is yes
 IF DB1.Default_Y_N = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?** Validate Aging Code, default if none is entered.
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL A/R Aging Control  RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1801043;
PARAMETER(DTL.A_R_Aging_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** Fill in with Default if invalid aging code entered.
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

EXECUTE FUNCTION(RTV Default Aging Code RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1801040;
PARAMETER(DTL.A_R_Aging_Code);
PARAMETER(WRK.A_R_Aging_Days_1);
PARAMETER(WRK.A_R_Aging_Days_2);
PARAMETER(WRK.A_R_Aging_Days_3);
PARAMETER(WRK.A_R_Aging_Days_4);
PARAMETER(WRK.Age_by_Trans_or_Due_Date);
PARAMETER(WRK.Default_Y_N);
PARAMETER(WRK.Record_Status);
{
 //?USER: Initialize routine

 // PAR.A/R Aging Code = CND.Not Entered
 PAR.A_R_Aging_Code = *BLANK;

 //?USER: Process Data record

 // PAR.A/R Aging Code = DB1.A/R Aging Code
 PAR.A_R_Aging_Code = DB1.A_R_Aging_Code;

 CASE;

 // IF DB1.Default Y/N is yes
 IF DB1.Default_Y_N = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// Send error message - 'A/R Aging Control not found, Default returned.'
ERROR(USR3666);
MSGPARM(DTL.A_R_Aging_Code);

ENDIF;

ENDIF;

//?** Email format is required when email address is entered
CASE;

// IF DTL.Email Address is Entered
IF DTL.Email_Address <> *BLANK;

CASE;

// IF DTL.Email Format is Not Entered
IF DTL.Email_Format = *BLANK;

// Send error message - 'Email format is required when email address is entered.'
ERROR(USR3676);
MSGPARM(DTL.Email_Format);

ENDIF;

ENDIF;

//?** Email is required when email summary table is entered
CASE;

// IF DTL.Status - Y or N is yes
IF DTL.Status_Y_or_N = 'Y';

// AND DTL.Email Address is Blank
AND DTL.Email_Address = *BLANK;

// Send error message - 'Email address cannot be left blank. Enter a valid email address.'
ERROR(USR3670);
MSGPARM(DTL.Email_Address);

ENDIF;

//?** One or both of the Include flags must be a 'Y'
CASE;

// IF DTL.Include Charge Backs is No
IF DTL.Include_Charge_Backs = 'N';

// AND DTL.Include Rebills is No
AND DTL.Include_Rebills = 'N';

// Send error message - 'Either Include Charge Backs or Include Rebills or both must be a "Y".'
ERROR(USR4958);
MSGPARM(DTL.Include_Charge_Backs);
MSGPARM(DTL.Include_Rebills);

ENDIF;

//?USER: User defined action

MOVE *ALL (To: PAR From: DTL);

//?Submit job for Print
//?** Pass Company# as 15.5 to Upd A/R Sum CB Aging    1/31/2006 LJB
// PAR.Date 1          PASS  USR = CON.*ZERO
PAR.Date_1_PASS_USR = *ZERO;

// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

//?** format company
CASE;

// IF PAR.Company Number Pass   USR is Equal to zero
IF PAR.Company_Number_Pass_USR = *ZERO;

// DTL.USR Company Name = CON.*ALL Companies
DTL.USR_Company_Name = *ALL Companies;

ENDIF;

// Call program UPD A/R Sum CB AgingSBMCL.
CALL PROGRAM(UPD A/R Sum CB AgingSBMCL) ('POA0UPC');
PARAMETER(DTL.USR_Detail_or_Summary);
PARAMETER(DTL.Salesperson_Code);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(DTL.A_R_Aging_Code);
PARAMETER(DTL.Email_Format);
PARAMETER(DTL.Email_Address);
PARAMETER(DTL.Status_Y_or_N);
PARAMETER(DTL.Include_Charge_Backs);
PARAMETER(DTL.Include_Rebills);

//?** submit message
CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

