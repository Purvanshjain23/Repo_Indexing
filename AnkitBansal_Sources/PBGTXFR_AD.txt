// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBGTXFR
// ?Date: 31.08.2025 Time: 22:18:11
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?FOB Omaha Price is calculated to zip zode --> 68108
//?Whenever the FOB Rate * Mileage is < 550, use 550 as the total frt
//?value, so use this as what to subtract from FOB Plant Price or Unit prc:
//?($550 / 40000) * 100 = $1.375/cwt
//?Whenever the FOB Rate * Mileage is >=550, use the (fob rate*mileage)
//?value, so do this as what to subtract from FOB Plant Price or Unit prc:
//?(fob rate*mileage) / 40000) * 100 = fob Omaha to subtract from FOB Plt Prc
//?Get minimum freight $ and load size from control file:
EXECUTE FUNCTION(RTV MPR Ctl Fields    RT) TYPE(RTVOBJ) FILE(PBASREP)           AC2057095;
PARAMETER('LS89');
PARAMETER(PAR.MPR_Minimum_Freight);
PARAMETER(PAR.MPR_Dft_Load_Size);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.MPR FOB Omaha Price = CON.*ZERO
PAR.MPR_FOB_Omaha_Price = *ZERO;

//?If Collect - use mileage & rate from the plant/whse to Omaha
//?   and subtract calculated price from FOB Plant Price
//?IF Collect - use mileage & rate from the plant/whse to Omaha
CASE;

// IF PAR.Shipping Method is Collect
IF PAR.Shipping_Method = 'CR'/'CT';

// PAR.MPR Country = CND.USA
PAR.MPR_Country = 'USA';

EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(PAR.MPR_State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Text USR 5 = LCL.Zip/Postal Code
LCL.Text_USR_5 = LCL.Zip_Postal_Code;

// PAR.MPR Zip Code = CVTVAR(LCL.Text USR 5)
PAR.MPR_Zip_Code = CVTVAR(LCL.Text_USR_5);

EXECUTE FUNCTION(Rtv Rate per Zip      RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2056566;
PARAMETER(PAR.MPR_Country);
PARAMETER(PAR.MPR_State_Code);
PARAMETER(PAR.MPR_Zip_Code);
PARAMETER(PAR.MPR_FOB_Rate_per_Mile);
PARAMETER(PAR.MPR_FOB_Miles_to_Omaha);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.AMOUNT = PAR.MPR FOB Miles to Omaha * PAR.MPR FOB Rate per Mile *
LCL.AMOUNT = PAR.MPR_FOB_Miles_to_Omaha * PAR.MPR_FOB_Rate_per_Mile;

//?If amount > 0 or dest zip is 68108 omaha
CASE;

// IF LCL.AMOUNT is not 0
IF LCL.AMOUNT <> 0;

// OR PAR.MPR Zip Code is eq 68108
OR PAR.MPR_Zip_Code = 68108;

CASE;

// IF LCL.AMOUNT LT PAR.MPR Minimum Freight $
IF LCL.AMOUNT < PAR.MPR_Minimum_Freight;

// Compute: fob omaha price
PAR.MPR_FOB_Omaha_Price = ( PAR.MPR_Minimum_Freight / PAR.MPR_Dft_Load_Size ) * 100;

// IF *OTHERWISE
IF *OTHERWISE;

// Compute: fob omaha price
PAR.MPR_FOB_Omaha_Price = ( LCL.AMOUNT / PAR.MPR_Dft_Load_Size ) * 100;

ENDIF;

// PAR.MPR FOB Omaha Price = PAR.MPR Unit Price - PAR.MPR FOB Omaha Price
PAR.MPR_FOB_Omaha_Price = PAR.MPR_Unit_Price - PAR.MPR_FOB_Omaha_Price;

ENDIF;

ENDIF;

//?If Prepaid - Domestic or NAFTA (Mex or CAN) or Overseas
//?   and subtract calculated price from Unit price (ie. delivered price)
//?IF Prepaid - use mileage & rate from the destination to Omaha
CASE;

// IF PAR.Shipping Method is Prepaid
IF PAR.Shipping_Method = 'PR'/'PT';

EXECUTE FUNCTION(RTV OHE Intend for Exp RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1952288;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.OHE_Intended_for_ExportCC);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?If Intended to Export is CAN and state code is a Canadian province
CASE;

// IF LCL.OHE Intended for ExportCC is Canada
IF LCL.OHE_Intended_for_ExportCC = 'CAN';

// LCL.ED MPR Canadian Province = PAR.MPR State Code
LCL.ED_MPR_Canadian_Province = PAR.MPR_State_Code;

CASE;

// IF LCL.ED MPR Canadian Province is *ALL values
IF LCL.ED_MPR_Canadian_Province = 'ON'/'AB'/'BC'/'YU'/'MB'/'NT'/'NU'/'NS'/'SA'/'QB'/'QC';

// PAR.MPR Country = LCL.OHE Intended for ExportCC
PAR.MPR_Country = LCL.OHE_Intended_for_ExportCC;

ENDIF;

ENDIF;

//?MEX or USA
CASE;

// IF PAR.MPR Country is Mexico
IF PAR.MPR_Country = 'MEX';

// OR PAR.MPR Country is USA
OR PAR.MPR_Country = 'USA';

// PAR.MPR Country = CND.USA
PAR.MPR_Country = 'USA';

// LCL.Text USR 5 = PAR.Ship To Zip/Postal Code
LCL.Text_USR_5 = PAR.Ship_To_Zip_Postal_Code;

// PAR.MPR Zip Code = CVTVAR(LCL.Text USR 5)
PAR.MPR_Zip_Code = CVTVAR(LCL.Text_USR_5);

//?Default Texas zip for MEX
CASE;

// IF PAR.MPR State Code is International Accounts
IF PAR.MPR_State_Code = '.';

// PAR.MPR State Code = CND.Texas
PAR.MPR_State_Code = 'TX';

// PAR.MPR Zip Code = CND.Texas 73301
PAR.MPR_Zip_Code = 73301;

ENDIF;

EXECUTE FUNCTION(Rtv Rate per Zip      RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2056566;
PARAMETER(PAR.MPR_Country);
PARAMETER(PAR.MPR_State_Code);
PARAMETER(PAR.MPR_Zip_Code);
PARAMETER(PAR.MPR_FOB_Rate_per_Mile);
PARAMETER(PAR.MPR_FOB_Miles_to_Omaha);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.AMOUNT = PAR.MPR FOB Miles to Omaha * PAR.MPR FOB Rate per Mile *
LCL.AMOUNT = PAR.MPR_FOB_Miles_to_Omaha * PAR.MPR_FOB_Rate_per_Mile;

//?If amount > 0 or  dest zip = 68108 omaha (let $0 go for omaha shipm)
CASE;

// IF LCL.AMOUNT is not 0
IF LCL.AMOUNT <> 0;

// OR PAR.MPR Zip Code is eq 68108
OR PAR.MPR_Zip_Code = 68108;

CASE;

// IF LCL.AMOUNT LT PAR.MPR Minimum Freight $
IF LCL.AMOUNT < PAR.MPR_Minimum_Freight;

// Compute: fob omaha price
PAR.MPR_FOB_Omaha_Price = ( PAR.MPR_Minimum_Freight / PAR.MPR_Dft_Load_Size ) * 100;

// IF *OTHERWISE
IF *OTHERWISE;

// Compute: fob omaha price
PAR.MPR_FOB_Omaha_Price = ( LCL.AMOUNT / PAR.MPR_Dft_Load_Size ) * 100;

ENDIF;

// PAR.MPR FOB Omaha Price = PAR.MPR Unit Price - PAR.MPR FOB Omaha Price
PAR.MPR_FOB_Omaha_Price = PAR.MPR_Unit_Price - PAR.MPR_FOB_Omaha_Price;

ENDIF;

ENDIF;

//?CAN
CASE;

// IF PAR.MPR Country is Canada
IF PAR.MPR_Country = 'CAN';

// PAR.MPR Zip Code = CND.Canada default
PAR.MPR_Zip_Code = 99999;

EXECUTE FUNCTION(Rtv Consignee         RT) TYPE(RTVOBJ) FILE(PDMRREP)           AC2058046;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('H');
PARAMETER(LCL.ED_Consignee_Addr_1);
PARAMETER(LCL.ED_Consignee_Addr_2);
PARAMETER(LCL.ED_Consignee_Addr_3);
PARAMETER(LCL.ED_Consignee_Addr_4);
PARAMETER(LCL.ED_MPR_Canadian_Province);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.ED MPR Canadian Province is *ALL values
IF LCL.ED_MPR_Canadian_Province = 'ON'/'AB'/'BC'/'YU'/'MB'/'NT'/'NU'/'NS'/'SA'/'QB'/'QC';

// PAR.MPR State Code = LCL.ED MPR Canadian Province
PAR.MPR_State_Code = LCL.ED_MPR_Canadian_Province;

ENDIF;

EXECUTE FUNCTION(Rtv Rate per Zip      RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2056566;
PARAMETER(PAR.MPR_Country);
PARAMETER(PAR.MPR_State_Code);
PARAMETER(PAR.MPR_Zip_Code);
PARAMETER(PAR.MPR_FOB_Rate_per_Mile);
PARAMETER(PAR.MPR_FOB_Miles_to_Omaha);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.AMOUNT = PAR.MPR FOB Miles to Omaha * PAR.MPR FOB Rate per Mile *
LCL.AMOUNT = PAR.MPR_FOB_Miles_to_Omaha * PAR.MPR_FOB_Rate_per_Mile;

//?If amount > 0 or  dest zip = 68108 omaha (let $0 go for omaha shipm)
CASE;

// IF LCL.AMOUNT is not 0
IF LCL.AMOUNT <> 0;

// OR PAR.MPR Zip Code is eq 68108
OR PAR.MPR_Zip_Code = 68108;

CASE;

// IF LCL.AMOUNT LT PAR.MPR Minimum Freight $
IF LCL.AMOUNT < PAR.MPR_Minimum_Freight;

// Compute: fob omaha price
PAR.MPR_FOB_Omaha_Price = ( PAR.MPR_Minimum_Freight / PAR.MPR_Dft_Load_Size ) * 100;

// IF *OTHERWISE
IF *OTHERWISE;

// Compute: fob omaha price
PAR.MPR_FOB_Omaha_Price = ( LCL.AMOUNT / PAR.MPR_Dft_Load_Size ) * 100;

ENDIF;

// PAR.MPR FOB Omaha Price = PAR.MPR Unit Price - PAR.MPR FOB Omaha Price
PAR.MPR_FOB_Omaha_Price = PAR.MPR_Unit_Price - PAR.MPR_FOB_Omaha_Price;

ENDIF;

ENDIF;

//?Overseas
CASE;

// IF PAR.MPR Country is Not Canada
IF PAR.MPR_Country <> 'CAN';

// AND PAR.MPR Country is Not Mexico
AND PAR.MPR_Country <> 'MEX';

// AND PAR.MPR Country is Not USA
AND PAR.MPR_Country <> 'USA';

//?If Dest is Domestic State
CASE;

// IF PAR.MPR State Code is Not International
IF PAR.MPR_State_Code <> '.';

// PAR.MPR Country = CND.USA
PAR.MPR_Country = 'USA';

// LCL.Text USR 5 = PAR.Ship To Zip/Postal Code
LCL.Text_USR_5 = PAR.Ship_To_Zip_Postal_Code;

// PAR.MPR Zip Code = CVTVAR(LCL.Text USR 5)
PAR.MPR_Zip_Code = CVTVAR(LCL.Text_USR_5);

EXECUTE FUNCTION(Rtv Rate per Zip      RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2056566;
PARAMETER(PAR.MPR_Country);
PARAMETER(PAR.MPR_State_Code);
PARAMETER(PAR.MPR_Zip_Code);
PARAMETER(PAR.MPR_FOB_Rate_per_Mile);
PARAMETER(PAR.MPR_FOB_Miles_to_Omaha);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.AMOUNT = PAR.MPR FOB Miles to Omaha * PAR.MPR FOB Rate per Mile *
LCL.AMOUNT = PAR.MPR_FOB_Miles_to_Omaha * PAR.MPR_FOB_Rate_per_Mile;

//?If amount > 0 or  dest zip = 68108 omaha (let $0 go for omaha shipm)
CASE;

// IF LCL.AMOUNT is not 0
IF LCL.AMOUNT <> 0;

// OR PAR.MPR Zip Code is eq 68108
OR PAR.MPR_Zip_Code = 68108;

CASE;

// IF LCL.AMOUNT LT PAR.MPR Minimum Freight $
IF LCL.AMOUNT < PAR.MPR_Minimum_Freight;

// Compute: fob omaha price
PAR.MPR_FOB_Omaha_Price = ( PAR.MPR_Minimum_Freight / PAR.MPR_Dft_Load_Size ) * 100;

// IF *OTHERWISE
IF *OTHERWISE;

// Compute: fob omaha price
PAR.MPR_FOB_Omaha_Price = ( LCL.AMOUNT / PAR.MPR_Dft_Load_Size ) * 100;

ENDIF;

// PAR.MPR FOB Omaha Price = PAR.MPR Unit Price - PAR.MPR FOB Omaha Price
PAR.MPR_FOB_Omaha_Price = PAR.MPR_Unit_Price - PAR.MPR_FOB_Omaha_Price;

ENDIF;

ENDIF;

//?If Dest is Overseas - FOB Plant price instead of delivered price
CASE;

// IF PAR.MPR State Code is International Accounts
IF PAR.MPR_State_Code = '.';

//?Get mileage from plant/warehouse to Omaha
// PAR.MPR Country = CND.USA
PAR.MPR_Country = 'USA';

EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
PARAMETER(PAR.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
PARAMETER(LCL.Address_Line_1);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(PAR.MPR_State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Text USR 5 = LCL.Zip/Postal Code
LCL.Text_USR_5 = LCL.Zip_Postal_Code;

// PAR.MPR Zip Code = CVTVAR(LCL.Text USR 5)
PAR.MPR_Zip_Code = CVTVAR(LCL.Text_USR_5);

EXECUTE FUNCTION(Rtv Rate per Zip      RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2056566;
PARAMETER(PAR.MPR_Country);
PARAMETER(PAR.MPR_State_Code);
PARAMETER(PAR.MPR_Zip_Code);
PARAMETER(PAR.MPR_FOB_Rate_per_Mile);
PARAMETER(PAR.MPR_FOB_Miles_to_Omaha);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.AMOUNT = PAR.MPR FOB Miles to Omaha * PAR.MPR FOB Rate per Mile *
LCL.AMOUNT = PAR.MPR_FOB_Miles_to_Omaha * PAR.MPR_FOB_Rate_per_Mile;

CASE;

// IF LCL.AMOUNT is not 0
IF LCL.AMOUNT <> 0;

// OR PAR.MPR Zip Code is eq 68108
OR PAR.MPR_Zip_Code = 68108;

//?DO FOR OVERSEAS     as of 4/25/2013 per April 16 2013 audit
CASE;

// IF LCL.AMOUNT LT PAR.MPR Minimum Freight $
IF LCL.AMOUNT < PAR.MPR_Minimum_Freight;

// Compute: fob omaha price
PAR.MPR_FOB_Omaha_Price = ( PAR.MPR_Minimum_Freight / PAR.MPR_Dft_Load_Size ) * 100;

//?DO FOR OVERSEAS     as of 4/25/2013 per April 16 2013 audit
// IF *OTHERWISE
IF *OTHERWISE;

// Compute: fob omaha price
PAR.MPR_FOB_Omaha_Price = ( LCL.AMOUNT / PAR.MPR_Dft_Load_Size ) * 100;

ENDIF;

// PAR.MPR FOB Omaha Price = PAR.MPR FOB Plant Price/CWT - PAR.MPR FOB Omaha Price
PAR.MPR_FOB_Omaha_Price = PAR.MPR_FOB_Plant_Price_CWT - PAR.MPR_FOB_Omaha_Price;

ENDIF;

ENDIF;

//?If Dest is foreign, but address is CANada, treat as Canada
EXECUTE FUNCTION(RTV Val Canada state  RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2065080;
PARAMETER('CAN');
PARAMETER(PAR.MPR_State_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?CAN
CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// PAR.MPR Country = CND.Canada
PAR.MPR_Country = 'CAN';

// PAR.MPR Zip Code = CND.Canada default
PAR.MPR_Zip_Code = 99999;

EXECUTE FUNCTION(Rtv Consignee         RT) TYPE(RTVOBJ) FILE(PDMRREP)           AC2058046;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('H');
PARAMETER(LCL.ED_Consignee_Addr_1);
PARAMETER(LCL.ED_Consignee_Addr_2);
PARAMETER(LCL.ED_Consignee_Addr_3);
PARAMETER(LCL.ED_Consignee_Addr_4);
PARAMETER(LCL.ED_MPR_Canadian_Province);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.ED MPR Canadian Province is *ALL values
IF LCL.ED_MPR_Canadian_Province = 'ON'/'AB'/'BC'/'YU'/'MB'/'NT'/'NU'/'NS'/'SA'/'QB'/'QC';

// PAR.MPR State Code = LCL.ED MPR Canadian Province
PAR.MPR_State_Code = LCL.ED_MPR_Canadian_Province;

ENDIF;

EXECUTE FUNCTION(Rtv Rate per Zip      RT) TYPE(RTVOBJ) FILE(PBARCPP)           AC2056566;
PARAMETER(PAR.MPR_Country);
PARAMETER(PAR.MPR_State_Code);
PARAMETER(PAR.MPR_Zip_Code);
PARAMETER(PAR.MPR_FOB_Rate_per_Mile);
PARAMETER(PAR.MPR_FOB_Miles_to_Omaha);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.AMOUNT = PAR.MPR FOB Miles to Omaha * PAR.MPR FOB Rate per Mile *
LCL.AMOUNT = PAR.MPR_FOB_Miles_to_Omaha * PAR.MPR_FOB_Rate_per_Mile;

//?If amount > 0 or  dest zip = 68108 omaha (let $0 go for omaha shipm)
CASE;

// IF LCL.AMOUNT is not 0
IF LCL.AMOUNT <> 0;

// OR PAR.MPR Zip Code is eq 68108
OR PAR.MPR_Zip_Code = 68108;

CASE;

// IF LCL.AMOUNT LT PAR.MPR Minimum Freight $
IF LCL.AMOUNT < PAR.MPR_Minimum_Freight;

// Compute: fob omaha price
PAR.MPR_FOB_Omaha_Price = ( PAR.MPR_Minimum_Freight / PAR.MPR_Dft_Load_Size ) * 100;

// IF *OTHERWISE
IF *OTHERWISE;

// Compute: fob omaha price
PAR.MPR_FOB_Omaha_Price = ( LCL.AMOUNT / PAR.MPR_Dft_Load_Size ) * 100;

ENDIF;

// PAR.MPR FOB Omaha Price = PAR.MPR Unit Price - PAR.MPR FOB Omaha Price
PAR.MPR_FOB_Omaha_Price = PAR.MPR_Unit_Price - PAR.MPR_FOB_Omaha_Price;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

