// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKFAXFR
// ?Date: 14.08.2025 Time: 02:51:32
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification History Created STR 061208
DO;

//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
{
 //?Execute internal function

 //?2/26/96  HPE063   Allow the expense for freight to be paid
 //?                  by either Seaboard(us) or the producer
 //?                  Allow the system to process accruals thru
 //?                  the General Ledger.
}


EXECUTE FUNCTION(HPE034) TYPE(EXCINTFUN)                                        AB1195750;
{
 //?Execute internal function

 //?Create a Trucker edit. - Dwight Shepard
 //?Purpose:
 //?Clone the Trucker report that post and remove
 //?all update of vouchers.  Producer the report
 //?for the user to sight review before continue on.
 //?Modification History
 //?Date        Person   Description
}


//?022806 slm Add the processing of the Tattoo Header Ext
//?E00144 061208 slm LFT Head EUT/KOA Head
ENDDO;

EXECUTE FUNCTION(Rtv/Chg Hd HeldO Rvd  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1182734;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TD_Held_Over);
PARAMETER(PAR.Next_Kill_Date);
{
 //?USER: Process Data record

 //?Modification History Create str 061208 SLM
 DO;

 EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
 {
  //?Execute internal function

  //?2/26/96  HPE063   Allow the expense for freight to be paid
  //?                  by either Seaboard(us) or the producer
  //?                  Allow the system to process accruals thru
  //?                  the General Ledger.
 }

 //?E00144 0061208 LFT Head and EUT/KOA head
 ENDDO;

 //?Sep Rec to create new held over and update prv record
 DO;

 //?*****************
 //?Save org record
 DO;

 //?Save Org Record
 // WRK.TH Head Received Org Usr = DB1.TH Head Received
 WRK.TH_Head_Received_Org_Usr = DB1.TH_Head_Received;

 // WRK.TH Live Wgt Org Usr = DB1.TH Live Wgt
 WRK.TH_Live_Wgt_Org_Usr = DB1.TH_Live_Wgt;

 // WRK.Th Deduction Amt Org Usr = DB1.TH Deduction Amt
 WRK.Th_Deduction_Amt_Org_Usr = DB1.TH_Deduction_Amt;

 // WRK.Th Tot Net Wo Adds Org Us = DB1.TH Total Net WO Adds
 WRK.Th_Tot_Net_Wo_Adds_Org_Us = DB1.TH_Total_Net_WO_Adds;

 // WRK.Th Add Amt Org Usr = DB1.TH Additions Amt
 WRK.Th_Add_Amt_Org_Usr = DB1.TH_Additions_Amt;

 // WRK.Th Payment Gross Org Usr = DB1.TH Payment Gross
 WRK.Th_Payment_Gross_Org_Usr = DB1.TH_Payment_Gross;

 // WRK.Th Payment Net Org Usr = DB1.Th Payment Net Amt
 WRK.Th_Payment_Net_Org_Usr = DB1.Th_Payment_Net_Amt;

 // WRK.Th Freight Amount Org Usr = DB1.TH Freight Amount
 WRK.Th_Freight_Amount_Org_Usr = DB1.TH_Freight_Amount;

 // WRK.Th Live Gross Amt Org Usr = DB1.TH Live Gross Amt
 WRK.Th_Live_Gross_Amt_Org_Usr = DB1.TH_Live_Gross_Amt;

 // WRK.Th Live Net Amt Org Usr = DB1.TH LIve Net Amt
 WRK.Th_Live_Net_Amt_Org_Usr = DB1.TH_LIve_Net_Amt;

 // WRK.Th Shipped Weight Org Usr = DB1.TH Shipped Weight
 WRK.Th_Shipped_Weight_Org_Usr = DB1.TH_Shipped_Weight;

 // WRK.Th Accruals Amt Org Usr = DB1.TH Accrual Amount
 WRK.Th_Accruals_Amt_Org_Usr = DB1.TH_Accrual_Amount;

 ENDDO;

 //?Reduce Org Ded/Add amts by D/A based on Dead head uom Prod only
 DO;

 //?The D/A with Dead Head uom are not spread to Held over/Subj tattoos
 EXECUTE FUNCTION(Rtv D/A Dead head Amt RT) TYPE(RTVOBJ) FILE(PKCDCPP)           AB1186920;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.Dead_Hd_Addition_Amt_USR);
 PARAMETER(WRK.Dead_Hd_Deduction_Amt_USR);
 {
  //?USER: Initialize routine

  // PAR.Dead Hd Addition Amt  USR = CON.*ZERO
  PAR.Dead_Hd_Addition_Amt_USR = *ZERO;

  // PAR.Dead Hd Deduction Amt USR = CON.*ZERO
  PAR.Dead_Hd_Deduction_Amt_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.THD UOM is Dead Head UOM
  IF DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

  CASE;

  // IF DB1.THD Unit Amt Sign is Add
  IF DB1.THD_Unit_Amt_Sign = '+';

  // PAR.Dead Hd Addition Amt  USR = PAR.Dead Hd Addition Amt  USR + DB1.THD Ded/Add
  PAR.Dead_Hd_Addition_Amt_USR = PAR.Dead_Hd_Addition_Amt_USR + DB1.THD_Ded_Add_Amount;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Dead Hd Deduction Amt USR = PAR.Dead Hd Deduction Amt USR + DB1.THD Ded/Add
  PAR.Dead_Hd_Deduction_Amt_USR = PAR.Dead_Hd_Deduction_Amt_USR + DB1.THD_Ded_Add_Amount;

  ENDIF;

  ENDIF;

 }

 // WRK.Th Deduction Amt Org Usr = WRK.Th Deduction Amt Org Usr - WRK.Dead Hd Deduct
 WRK.Th_Deduction_Amt_Org_Usr = WRK.Th_Deduction_Amt_Org_Usr
 - WRK.Dead_Hd_Deduction_Amt_USR;

 // WRK.Th Add Amt Org Usr = WRK.Th Add Amt Org Usr - WRK.Dead Hd Addition Amt  USR
 WRK.Th_Add_Amt_Org_Usr = WRK.Th_Add_Amt_Org_Usr - WRK.Dead_Hd_Addition_Amt_USR;

 ENDDO;

 //?Set to Zero
 // WRK.TH Head Received = CON.*ZERO
 WRK.TH_Head_Received = *ZERO;

 // WRK.TH Live Wgt = CON.*ZERO
 WRK.TH_Live_Wgt = *ZERO;

 //?*****************
 //?Calculate the orginal rate
 //?Take for example that the org head recv was 145 and you hold 100
 //?Total field div by 145 to get org rate.
 //?Use this org rate and mult by next day field Ded/gross/frt/etc
 //?the answer is the field that will be in the hld ovr record
 //?Crt/chg the held over record and then recalculate the org record
 //?Org record - new held over field = Org record field
 //?Ld hd rcv and recalculate live weight based on held over
 CASE;

 // IF DB1.TH Head Received EQ PAR.TD Held Over
 IF DB1.TH_Head_Received = PAR.TD_Held_Over;

 //?Create held over record for all.
 // WRK.TH Head Received = PAR.TD Held Over
 WRK.TH_Head_Received = PAR.TD_Held_Over;

 // WRK.TH Live Wgt = DB1.TH Live Wgt
 WRK.TH_Live_Wgt = DB1.TH_Live_Wgt;

 //?Ld hd rcv and recalculate live weight based on held over
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Create the held over record
 // WRK.TH Head Received = PAR.TD Held Over
 WRK.TH_Head_Received = PAR.TD_Held_Over;

 //?Held over live wt   =    avg live wt     * new head rcvd
 // WRK.TH Live Wgt = DB1.TH Avg Live Wgt * WRK.TH Head Received *
 WRK.TH_Live_Wgt = DB1.TH_Avg_Live_Wgt * WRK.TH_Head_Received;

 ENDIF;

 //?Load variables per the live uom for the recalc amts formula
 CASE;

 // IF DB1.TH Live Purchase UOM is Live Hundred Weight
 IF DB1.TH_Live_Purchase_UOM = 'LW';

 // WRK.Head/Wt Variable Old  USR = DB1.TH Live Wgt / CON.100 *
 WRK.Head_Wt_Variable_Old_USR = DB1.TH_Live_Wgt / 100;

 // WRK.Head/Wt Variable New  USR = WRK.TH Live Wgt / CON.100 *
 WRK.Head_Wt_Variable_New_USR = WRK.TH_Live_Wgt / 100;

 //?Load variables per the live uom for the recalc amts formula
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Head/Wt Variable Old  USR = DB1.TH Head Received
 WRK.Head_Wt_Variable_Old_USR = DB1.TH_Head_Received;

 // WRK.Head/Wt Variable New  USR = WRK.TH Head Received
 WRK.Head_Wt_Variable_New_USR = WRK.TH_Head_Received;

 ENDIF;

 //?Recalculate payment gross, ded, add, and net amounts
 CASE;

 // IF WRK.Head/Wt Variable Old  USR NE WRK.Zero USR
 IF WRK.Head_Wt_Variable_Old_USR <> WRK.Zero_USR;

 //?Deduction Amt
 // WRK.*Synon (17,7) work field = WRK.Th Deduction Amt Org Usr / WRK.Head/Wt Variab
 WRK.*Synon_177_work_field = WRK.Th_Deduction_Amt_Org_Usr / WRK.Head_Wt_Variable_Old_USR


 // WRK.TH Deduction Amt = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Deduction_Amt = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 // WRK.*Synon (17,7) work field = DB1.TH Total Net WO Adds / WRK.Head/Wt Variable O
 WRK.*Synon_177_work_field = DB1.TH_Total_Net_WO_Adds / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Total Net WO Adds = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable N
 WRK.TH_Total_Net_WO_Adds = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 //?Additions
 // WRK.*Synon (17,7) work field = WRK.Th Add Amt Org Usr / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = WRK.Th_Add_Amt_Org_Usr / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Additions Amt = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Additions_Amt = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 //?Payment Gross
 // WRK.*Synon (17,7) work field = DB1.TH Payment Gross / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.TH_Payment_Gross / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Payment Gross = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Payment_Gross = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 //?Payment Net
 // WRK.*Synon (17,7) work field = DB1.Th Payment Net Amt / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.Th_Payment_Net_Amt / WRK.Head_Wt_Variable_Old_USR;

 // WRK.Th Payment Net Amt = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.Th_Payment_Net_Amt = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 //?Freight Weight
 // WRK.*Synon (17,7) work field = DB1.TH Freight Amount / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.TH_Freight_Amount / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Freight Amount = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Freight_Amount = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 // WRK.Freight Nxt Date Usr = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable N
 WRK.Freight_Nxt_Amount_Usr = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR
 'H';

 //?Live Gross
 // WRK.*Synon (17,7) work field = DB1.TH Live Gross Amt / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.TH_Live_Gross_Amt / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Live Gross Amt = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Live_Gross_Amt = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 //?Live Net
 // WRK.*Synon (17,7) work field = DB1.TH LIve Net Amt / WRK.Head/Wt Variable Old  U
 WRK.*Synon_177_work_field = DB1.TH_LIve_Net_Amt / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH LIve Net Amt = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New  U
 WRK.TH_LIve_Net_Amt = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 //?Shipped Weight
 // WRK.*Synon (17,7) work field = DB1.TH Shipped Weight / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.TH_Shipped_Weight / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Shipped Weight = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Shipped_Weight = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 //?Accrual Amount
 // WRK.*Synon (17,7) work field = DB1.TH Accrual Amount / WRK.Head/Wt Variable Old
 WRK.*Synon_177_work_field = DB1.TH_Accrual_Amount / WRK.Head_Wt_Variable_Old_USR;

 // WRK.TH Accrual Amount = WRK.*Synon (17,7) work field * WRK.Head/Wt Variable New
 WRK.TH_Accrual_Amount = WRK.*Synon_177_work_field * WRK.Head_Wt_Variable_New_USR 'H';

 ENDIF;

 //?Org create record save until done
 //?        Crt/Chg new held over record
 //?Cal org - HELD OVER AMT = new total for the org record
 // WRK.TH Head Received Org Usr = WRK.TH Head Received Org Usr - WRK.TH Head Receiv
 WRK.TH_Head_Received_Org_Usr = WRK.TH_Head_Received_Org_Usr - WRK.TH_Head_Received;

 // WRK.TH Live Wgt Org Usr = WRK.TH Live Wgt Org Usr - WRK.TH Live Wgt
 WRK.TH_Live_Wgt_Org_Usr = WRK.TH_Live_Wgt_Org_Usr - WRK.TH_Live_Wgt;

 // WRK.Th Deduction Amt Org Usr = WRK.Th Deduction Amt Org Usr - WRK.TH Deduction A
 WRK.Th_Deduction_Amt_Org_Usr = WRK.Th_Deduction_Amt_Org_Usr - WRK.TH_Deduction_Amt;

 // WRK.Th Tot Net Wo Adds Org Us = WRK.Th Tot Net Wo Adds Org Us - WRK.TH Total Net
 WRK.Th_Tot_Net_Wo_Adds_Org_Us = WRK.Th_Tot_Net_Wo_Adds_Org_Us - WRK.TH_Total_Net_WO_Adds;

 // WRK.Th Add Amt Org Usr = WRK.Th Add Amt Org Usr - WRK.TH Additions Amt
 WRK.Th_Add_Amt_Org_Usr = WRK.Th_Add_Amt_Org_Usr - WRK.TH_Additions_Amt;

 // WRK.Th Payment Gross Org Usr = WRK.Th Payment Gross Org Usr - WRK.TH Payment Gro
 WRK.Th_Payment_Gross_Org_Usr = WRK.Th_Payment_Gross_Org_Usr - WRK.TH_Payment_Gross;

 // WRK.Th Payment Net Org Usr = WRK.Th Payment Net Org Usr - WRK.Th Payment Net Amt
 WRK.Th_Payment_Net_Org_Usr = WRK.Th_Payment_Net_Org_Usr - WRK.Th_Payment_Net_Amt;

 // WRK.Freight Cur Date Usr = WRK.Th Freight Amount Org Usr - WRK.TH Freight Amount
 WRK.Freight_Cur_Amount_Usr = WRK.Th_Freight_Amount_Org_Usr - WRK.TH_Freight_Amount;

 // WRK.Th Freight Amount Org Usr = WRK.Th Freight Amount Org Usr - WRK.TH Freight A
 WRK.Th_Freight_Amount_Org_Usr = WRK.Th_Freight_Amount_Org_Usr - WRK.TH_Freight_Amount;

 // WRK.Th Live Gross Amt Org Usr = WRK.Th Live Gross Amt Org Usr - WRK.TH Live Gros
 WRK.Th_Live_Gross_Amt_Org_Usr = WRK.Th_Live_Gross_Amt_Org_Usr - WRK.TH_Live_Gross_Amt;

 // WRK.Th Live Net Amt Org Usr = WRK.Th Live Net Amt Org Usr - WRK.TH LIve Net Amt
 WRK.Th_Live_Net_Amt_Org_Usr = WRK.Th_Live_Net_Amt_Org_Usr - WRK.TH_LIve_Net_Amt;

 // WRK.Th Shipped Weight Org Usr = WRK.Th Shipped Weight Org Usr - WRK.TH Shipped W
 WRK.Th_Shipped_Weight_Org_Usr = WRK.Th_Shipped_Weight_Org_Usr - WRK.TH_Shipped_Weight;

 // WRK.Th Accruals Amt Org Usr = WRK.Th Accruals Amt Org Usr - WRK.TH Accrual Amoun
 WRK.Th_Accruals_Amt_Org_Usr = WRK.Th_Accruals_Amt_Org_Usr - WRK.TH_Accrual_Amount;

 //?Get the Tattoo Header Ext for the Producer and Site Id
 //?nothing else
 EXECUTE FUNCTION(Rtv Site ID/Prod Subs RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1291789;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PS_Site_ID);
 PARAMETER(LCL.Producer_Subsidiary_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Create or change the next kill date record for held overs
 //?022806 slm The following rtn was changed to add the TattHdrExt
 //?       with the creation or the update of the producer/site id
 //?E00144 SLM 061208
 EXECUTE FUNCTION(Crt TTO HDR HeldO     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1182835;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(PAR.Next_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(WRK.TH_Live_Gross_Amt);
 PARAMETER(WRK.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(*ZERO);
 PARAMETER(WRK.TH_Head_Received);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.TH_Live_Wgt);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.TH_Deduction_Amt);
 PARAMETER(WRK.TH_Total_Net_WO_Adds);
 PARAMETER(*ZERO);
 PARAMETER(WRK.TH_Additions_Amt);
 PARAMETER(WRK.TH_Payment_Gross);
 PARAMETER(WRK.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(WRK.TH_Freight_Amount);
 PARAMETER(WRK.TH_Accrual_Amount);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER('N');
 PARAMETER('Y');
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(WRK.TH_Shipped_Weight);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.TH_State);
 PARAMETER(DB1.TH_Unused_Code);
 PARAMETER(DB1.TH_Unused_Sts_2_Pos);
 PARAMETER(DB1.TH_Commission_Status);
 PARAMETER(DB1.TH_Paid_2_Week_Avg_Y_N);
 PARAMETER(DB1.TH_Unused_Sts_1_Pos_3);
 PARAMETER(DB1.TH_DOA_Weight);
 PARAMETER(DB1.TH_Avg_Lean_EXC_ADD);
 PARAMETER(DB1.TH_HPS_Farm_Site);
 PARAMETER(DB1.TH_Shift_Held_Over_Head);
 PARAMETER(DB1.TH_Sorting_Amount);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(WRK.Freight_Nxt_Amount_Usr);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PS_Site_ID);
 PARAMETER(LCL.Producer_Subsidiary_Code);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(HPE034) TYPE(EXCINTFUN)                                        AB1195750;
  {
   //?Execute internal function

   //?Create a Trucker edit. - Dwight Shepard
   //?Purpose:
   //?Clone the Trucker report that post and remove
   //?all update of vouchers.  Producer the report
   //?for the user to sight review before continue on.
   //?Modification History
   //?Date        Person   Description
  }

  //?Output default values for sched kill shift and shift held over
  EXECUTE FUNCTION(Crt Tto Hdr HeldO Hogs CR) TYPE(CRTOBJ) FILE(PKA1CPP)          AB1141909;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Group_Reference);
  PARAMETER(PAR.TH_Live_Purchase_UOM);
  PARAMETER(PAR.TH_Live_Purchase_Price);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(PAR.TH_Resale_UOM);
  PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(PAR.TH_Pricing_Date);
  PARAMETER(PAR.TH_Resale_Spread_Sts);
  PARAMETER(PAR.TH_Dead_On_Arrival);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Yard_Deads);
  PARAMETER(PAR.TH_Held_Over);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Head_Accepted);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Hot_Wgt);
  PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Tot_Backfat_Inches);
  PARAMETER(PAR.TH_Tot_Light_Reflectance);
  PARAMETER(PAR.TH_Avg_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Hot_Wgt);
  PARAMETER(PAR.TH_Avg_Light_Reflectance);
  PARAMETER(PAR.TH_Avg_Lean_Percent);
  PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Avg_Backfat);
  PARAMETER(PAR.TH_Std_Yield_Percent);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.TH_Yield_Difference);
  PARAMETER(PAR.TH_Recalc_Live_Wgt);
  PARAMETER(PAR.TH_CM_Market_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
  PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.TH_CM_Base_Carcass_Value);
  PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
  PARAMETER(PAR.TH_Deduction_Amt);
  PARAMETER(PAR.TH_Total_Net_WO_Adds);
  PARAMETER(PAR.TH_Carcass_Net_Amt);
  PARAMETER(PAR.TH_Additions_Amt);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(PAR.TH_Accrual_Amount);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.TH_Calc_Net_Sts);
  PARAMETER(PAR.TH_Payment_Sts);
  PARAMETER(PAR.TH_Header_Error_Sts);
  PARAMETER(PAR.TH_Detail_Error_Sts);
  PARAMETER(PAR.TH_Kill_Balancing_Sts);
  PARAMETER(PAR.TH_Bal_to_Kill_Gen);
  PARAMETER(PAR.TH_Commission_A_P_Voucher);
  PARAMETER(PAR.TH_Voucher_Payment_Date);
  PARAMETER(PAR.TH_User_Error_Override);
  PARAMETER(PAR.TH_Held_Over_Record);
  PARAMETER(PAR.TH_Sex);
  PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
  PARAMETER(PAR.TH_Commission_Paid_Date);
  PARAMETER(PAR.TH_Actual_Check_Date);
  PARAMETER(PAR.TH_Shipped_Weight);
  PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(PAR.TH_FFLI);
  PARAMETER(PAR.TH_Kill_Product_Value);
  PARAMETER(PAR.TH_Cut_Product_Value);
  PARAMETER(PAR.TH_Render_Product_Value);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(PAR.TH_CM_Gross_Live_CWT);
  PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
  PARAMETER(PAR.TH_Source_Type);
  PARAMETER(PAR.TH_Scale_Ticket_Sts);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(PAR.TH_Source_Code);
  PARAMETER(PAR.TH_Hog_Class_Type);
  PARAMETER(PAR.TH_Posted_to_HPS_Flag);
  PARAMETER(1);
  PARAMETER('N');
  PARAMETER(PAR.TH_State);
  PARAMETER(PAR.TH_Unused_Code);
  PARAMETER(PAR.TH_Unused_Sts_2_Pos);
  PARAMETER(PAR.TH_Commission_Status);
  PARAMETER(PAR.TH_Paid_2_Week_Avg_Y_N);
  PARAMETER(PAR.TH_Unused_Sts_1_Pos_3);
  PARAMETER(PAR.TH_DOA_Weight);
  PARAMETER(PAR.TH_Avg_Lean_EXC_ADD);
  PARAMETER(PAR.TH_HPS_Farm_Site);
  PARAMETER(*ZERO);
  PARAMETER(PAR.TH_Sorting_Amount);
  PARAMETER(PAR.TH_Head_Identified);
  PARAMETER(PAR.TH_Percent_Identified);
  PARAMETER(PAR.TH_Percent_Accepted);
  PARAMETER(PAR.TH_Head_Adjusted_LN);
  PARAMETER(PAR.TH_PHA_Head_Adds);
  PARAMETER(PAR.TH_PHA_Add_Type);
  PARAMETER(PAR.TH_PHA_Average_Type);
  PARAMETER(PAR.TH_PHA_Add_Reason);
  PARAMETER(PAR.TH_PHA_Yield_Percent);
  PARAMETER(PAR.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(PAR.TH_VC_Gross_Value_HD);
  PARAMETER(PAR.TH_Excluded_Gross_Value);
  PARAMETER(PAR.TH_Avg_Lean);
  PARAMETER(PAR.TH_Broken_Back_Hd_Count);
  PARAMETER(PAR.TH_Hot_Scl_Upload_Time);
  PARAMETER(PAR.TH_Unused_Nbr_4);
  PARAMETER(PAR.TH_Excluded_Carc_Val);
  PARAMETER(PAR.TH_Excluded_Premium);
  PARAMETER(PAR.TH_Unused_Nbr_7);
  PARAMETER(PAR.TH_Unused_Nbr_8);
  PARAMETER(PAR.TH_Unused_Nbr_9);
  PARAMETER(PAR.TH_Unused_Nbr_10);
  PARAMETER(PAR.TH_Break_Even_Price_CWT);
  PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
  PARAMETER(PAR.TH_Yld_Parm_Adj_Yield);
  PARAMETER(PAR.TH_PHA_Sort_Disc_Fctr);
  PARAMETER(PAR.TH_Avg_Loin_Eye_2_dec);
  PARAMETER(PAR.TH_Avg_Backfat_2_Dec);
  PARAMETER(PAR.TH_HITCH_Old_Pay_Net_Amt);
  PARAMETER(PAR.TH_MPR_Sort_Loss);
  PARAMETER(PAR.TH_Unused_Nbr_19);
  PARAMETER(PAR.TH_Unused_Nbr_20);
  PARAMETER(PAR.TH_Cold_Scl_Upload_Date);
  PARAMETER(PAR.TH_Cold_Scl_Upload_Time);
  PARAMETER(PAR.TH_Head_LFT);
  PARAMETER(PAR.TH_Head_EUT_KOA);
  PARAMETER(PAR.TH_Unused_Date_5);
  PARAMETER(PAR.TH_Unused_Sts_1);
  PARAMETER(PAR.TH_Unused_Sts_2);
  PARAMETER(PAR.TH_Unused_Sts_3);
  PARAMETER(PAR.TH_Unused_Sts_4);
  PARAMETER(PAR.TH_Unused_Sts_5);
  PARAMETER(PAR.TH_Unused_Sts_6);
  PARAMETER(PAR.TH_Unused_Sts_7);
  PARAMETER(PAR.TH_Unused_Sts_8);
  PARAMETER(PAR.DF_Defect_Code);
  PARAMETER(PAR.THP_Process_Code);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.HB_Buyer_Code);
  PARAMETER(PAR.GN_Genetic_Code);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*JOB);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
   PARAMETER(DB1.TH_Payment_Sts);
   PARAMETER(DB1.TH_Payment_Type);
   {
    //?Execute internal function

    EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
    {
     //?Execute internal function

     //?1/10/96  HPE056   Allow payment type to be update based on
     //?                  what the payment status is at the time this
     //?                  tattoo is being updated
    }

    //?Function Description:  If there are any fields that need to be
    //?Changed/Created during the Change functions or Create function
    //?Presently: Payment Type
    //?Add this routine to all of the change objects and create object
    //?that update the Payment Type
    CASE;

    // IF PAR.TH Payment Sts is Live anything
    IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

    // PAR.TH Payment Type = CND.Live
    PAR.TH_Payment_Type = 'L';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.TH Payment Type = CND.Carcass Merit
    PAR.TH_Payment_Type = 'C';

    ENDIF;

   }

  }

  EXECUTE FUNCTION(Crt TatHdrExt PrdSitHOCO) TYPE(CRTOBJ) FILE(PKDNCPP)           AB1270380;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.TE_Unused_Status_1);
  PARAMETER(LCL.TE_Unused_Status_2);
  PARAMETER(LCL.TE_Unused_Status_3);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PS_Site_ID);
  PARAMETER(PAR.Producer_Subsidiary_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Chg TatHdrExt PrdSitHOCH) TYPE(CHGOBJ) FILE(PKDNCPP)           AB1270393;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.TE_Unused_Number_1);
   PARAMETER(DB1.TE_UnUsed_Number_2);
   PARAMETER(DB1.TE_Unused_Number_3);
   PARAMETER(DB1.TE_Unused_Status_1);
   PARAMETER(DB1.TE_Unused_Status_2);
   PARAMETER(DB1.TE_Unused_Status_3);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PS_Site_ID);
   PARAMETER(PAR.Producer_Subsidiary_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Process Data record

  // WRK.TH Live Gross Amt = DB1.TH Live Gross Amt + PAR.TH Live Gross Amt
  WRK.TH_Live_Gross_Amt = DB1.TH_Live_Gross_Amt + PAR.TH_Live_Gross_Amt;

  // WRK.TH LIve Net Amt = DB1.TH LIve Net Amt + PAR.TH LIve Net Amt
  WRK.TH_LIve_Net_Amt = DB1.TH_LIve_Net_Amt + PAR.TH_LIve_Net_Amt;

  // WRK.TH Head Received = DB1.TH Head Received + PAR.TH Head Received
  WRK.TH_Head_Received = DB1.TH_Head_Received + PAR.TH_Head_Received;

  // WRK.TH Live Wgt = DB1.TH Live Wgt + PAR.TH Live Wgt
  WRK.TH_Live_Wgt = DB1.TH_Live_Wgt + PAR.TH_Live_Wgt;

  // WRK.TH Deduction Amt = DB1.TH Deduction Amt + PAR.TH Deduction Amt
  WRK.TH_Deduction_Amt = DB1.TH_Deduction_Amt + PAR.TH_Deduction_Amt;

  // WRK.TH Total Net WO Adds = DB1.TH Total Net WO Adds + PAR.TH Total Net WO Adds
  WRK.TH_Total_Net_WO_Adds = DB1.TH_Total_Net_WO_Adds + PAR.TH_Total_Net_WO_Adds;

  // WRK.TH Additions Amt = DB1.TH Additions Amt + PAR.TH Additions Amt
  WRK.TH_Additions_Amt = DB1.TH_Additions_Amt + PAR.TH_Additions_Amt;

  // WRK.TH Payment Gross = DB1.TH Payment Gross + PAR.TH Payment Gross
  WRK.TH_Payment_Gross = DB1.TH_Payment_Gross + PAR.TH_Payment_Gross;

  // WRK.Th Payment Net Amt = DB1.Th Payment Net Amt + PAR.Th Payment Net Amt
  WRK.Th_Payment_Net_Amt = DB1.Th_Payment_Net_Amt + PAR.Th_Payment_Net_Amt;

  // WRK.TH Freight Amount = DB1.TH Freight Amount + PAR.TH Freight Amount
  WRK.TH_Freight_Amount = DB1.TH_Freight_Amount + PAR.TH_Freight_Amount;

  // WRK.Freight Nxt Date Usr = DB1.TH Freight Amount + PAR.Freight Nxt Date Usr
  WRK.Freight_Nxt_Amount_Usr = DB1.TH_Freight_Amount + PAR.Freight_Nxt_Amount_Usr;

  // WRK.TH Shipped Weight = DB1.TH Shipped Weight + PAR.TH Shipped Weight
  WRK.TH_Shipped_Weight = DB1.TH_Shipped_Weight + PAR.TH_Shipped_Weight;

  // WRK.TH Accrual Amount = DB1.TH Accrual Amount + PAR.TH Accrual Amount
  WRK.TH_Accrual_Amount = DB1.TH_Accrual_Amount + PAR.TH_Accrual_Amount;

  EXECUTE FUNCTION(Chg Tattoo Hdr Hld Rc CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190759;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TH_Purchase_Date);
  PARAMETER(DB1.TH_Group_Reference);
  PARAMETER(DB1.TH_Live_Purchase_UOM);
  PARAMETER(DB1.TH_Live_Purchase_Price);
  PARAMETER(WRK.TH_Live_Gross_Amt);
  PARAMETER(WRK.TH_LIve_Net_Amt);
  PARAMETER(DB1.TH_Resale_UOM);
  PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(DB1.TH_Pricing_Date);
  PARAMETER(DB1.TH_Resale_Spread_Sts);
  PARAMETER(WRK.TH_Head_Received);
  PARAMETER(WRK.TH_Live_Wgt);
  PARAMETER(DB1.TH_Adj_Live_Wgt);
  PARAMETER(WRK.TH_Deduction_Amt);
  PARAMETER(WRK.TH_Additions_Amt);
  PARAMETER(WRK.TH_Payment_Gross);
  PARAMETER(WRK.Th_Payment_Net_Amt);
  PARAMETER(DB1.TH_AP_Voucher_Document#);
  PARAMETER(WRK.TH_Freight_Amount);
  PARAMETER(WRK.TH_Accrual_Amount);
  PARAMETER(DB1.TH_Voucher_Payment_Date);
  PARAMETER(WRK.TH_Shipped_Weight);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?022806 slm Add the routine on the Tattoo Header Ext Crt or Update
  //?The following routine is to get the Tat Hdr Ext Updated or Created
  EXECUTE FUNCTION(Crt TatHdrExt PrdSitHOCO) TYPE(CRTOBJ) FILE(PKDNCPP)           AB1270380;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.TE_Unused_Status_1);
  PARAMETER(LCL.TE_Unused_Status_2);
  PARAMETER(LCL.TE_Unused_Status_3);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PS_Site_ID);
  PARAMETER(PAR.Producer_Subsidiary_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   //?USER: Processing if Data record already exists

   EXECUTE FUNCTION(Chg TatHdrExt PrdSitHOCH) TYPE(CHGOBJ) FILE(PKDNCPP)           AB1270393;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.TE_Unused_Number_1);
   PARAMETER(DB1.TE_UnUsed_Number_2);
   PARAMETER(DB1.TE_Unused_Number_3);
   PARAMETER(DB1.TE_Unused_Status_1);
   PARAMETER(DB1.TE_Unused_Status_2);
   PARAMETER(DB1.TE_Unused_Status_3);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PS_Site_ID);
   PARAMETER(PAR.Producer_Subsidiary_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 //?Update Org record with held overs remove from totals
 //?   Add D/A amt with Dead Head Uom back into Ded and Add amts
 // WRK.Th Deduction Amt Org Usr = WRK.Th Deduction Amt Org Usr + WRK.Dead Hd Deduct
 WRK.Th_Deduction_Amt_Org_Usr = WRK.Th_Deduction_Amt_Org_Usr
 + WRK.Dead_Hd_Deduction_Amt_USR;

 // WRK.Th Add Amt Org Usr = WRK.Th Add Amt Org Usr + WRK.Dead Hd Addition Amt  USR
 WRK.Th_Add_Amt_Org_Usr = WRK.Th_Add_Amt_Org_Usr + WRK.Dead_Hd_Addition_Amt_USR;

 EXECUTE FUNCTION(Chg Tattoo Hdr Org Rc CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1190722;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(WRK.Th_Live_Gross_Amt_Org_Usr);
 PARAMETER(WRK.Th_Live_Net_Amt_Org_Usr);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(WRK.TH_Head_Received_Org_Usr);
 PARAMETER(WRK.TH_Live_Wgt_Org_Usr);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(WRK.Th_Deduction_Amt_Org_Usr);
 PARAMETER(WRK.Th_Add_Amt_Org_Usr);
 PARAMETER(WRK.Th_Payment_Gross_Org_Usr);
 PARAMETER(WRK.Th_Payment_Net_Org_Usr);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(WRK.Th_Freight_Amount_Org_Usr);
 PARAMETER(WRK.Th_Accruals_Amt_Org_Usr);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(WRK.Th_Shipped_Weight_Org_Usr);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDDO;

 //?Report of Held overs
 // Call program Crt Tattoo Action Comm XF.
 CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('HL');
 PARAMETER(*BLANK);

 CASE;

 // IF DB1.TH Payment Sts is Paid Anything
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 //?Recalc TH D/As and calc new Held over TH D/As
 //?Reduce Org Deduction and Additions amts by D/A based on Dead head uom
 DO;

 //?The D/A with Dead Head uom are not spread to Held over/Subj tattoos
 // WRK.Th Deduction Amt Org Usr = WRK.Th Deduction Amt Org Usr - WRK.Dead Hd Deduct
 WRK.Th_Deduction_Amt_Org_Usr = WRK.Th_Deduction_Amt_Org_Usr
 - WRK.Dead_Hd_Deduction_Amt_USR;

 // WRK.Th Add Amt Org Usr = WRK.Th Add Amt Org Usr - WRK.Dead Hd Addition Amt  USR
 WRK.Th_Add_Amt_Org_Usr = WRK.Th_Add_Amt_Org_Usr - WRK.Dead_Hd_Addition_Amt_USR;

 ENDDO;

 // WRK.Th Seabs Exp Amt Org Usr = WRK.Th Freight Amount Org Usr + WRK.Th Accruals A
 WRK.Th_Seabs_Exp_Amt_Org_Usr = WRK.Th_Freight_Amount_Org_Usr
 + WRK.Th_Accruals_Amt_Org_Usr;

 // Call program Zzz D/A for Held AfPd XF.
 CALL PROGRAM(Zzz D/A for Held AfPd XF) ('PKDEAD01');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(WRK.Th_Deduction_Amt_Org_Usr);
 PARAMETER(WRK.Th_Add_Amt_Org_Usr);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(PAR.Next_Kill_Date);
 PARAMETER(WRK.Th_Accruals_Amt_Org_Usr);
 PARAMETER(WRK.Freight_Cur_Amount_Usr);
 PARAMETER(WRK.Freight_Nxt_Amount_Usr);

 ENDIF;

}


