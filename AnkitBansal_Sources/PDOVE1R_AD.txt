// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDOVE1R
// ?Date: 14.08.2025 Time: 03:35:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.Text 3 Length USR = CON.ALL
LCL.Text_3_Length_USR = 'ALL';

//?***** Changes and Comments
DO;

//?*****
//?** 07/06/2015 LJB E004147
//?** Don't allow "ALL" to be entered as a late delivery code
//?*****
//?** 12/21/2005 LJB - Put Security company # on the key screen
//?** Retrieve security parms and restrict to security co#
//?** if Allow Multi-Company is no.
//?*****
//?** 09/20/2006 LJB PK0036
//?** Changed 1 char held over reason to 3 char LH held over reason
//?** changed 15 char held over reason cmt to new 25 char LH held
//?** over reason comment
//?*****
//?*  05/17/02 RMC PKTR01 - remove co from screen
//?*****
ENDDO;

//?USER: Initialize key screen

// KEY.Company Number = WRK.Company Number
KEY.Company_Number = WRK.Company_Number;

//?** Moved the security validation process to initialize program
//?USER: Validate key screen

CASE;

// IF KEY.*CMD key is CF04
IF KEY.*CMD_key = '04';

// AND PAR.Allow Multi-Company is no
AND PAR.Allow_Multi_Company = 'N';

// AND PGM.*Cursor field <IS> KEY.Company Number
AND PGM.*Cursor_field = KEY.Company_Number;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

QUIT;

ENDIF;

//?F10   Added 7/26/01 per Judy
CASE;

// IF KEY.*CMD key is CF10
IF KEY.*CMD_key = '10';

CASE;

// IF PAR.*Initial call is *NO
IF PAR.*Initial_call = 'N';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Initial call = CND.*NO
PAR.*Initial_call = 'N';

// Call program WW Load Status        DF.
CALL PROGRAM(WW Load Status        DF) ('POGADFR');
PARAMETER(PAR.*Initial_call);

// PAR.*Initial call = CND.*YES
PAR.*Initial_call = 'Y';

ENDIF;

ENDIF;

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Ship_From_Warehouse);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Carrier_Name_50A);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** Put held over reason description on the screen
CASE;

// IF DTL.LH Held Over Reason is *Blanks
IF DTL.LH_Held_Over_Reason = *BLANK;

//?** Put held over reason description on the screen
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV OT Resaon Descript RT) TYPE(RTVOBJ) FILE(PPB5REP)          AC1783760;
PARAMETER(DTL.LH_Held_Over_Reason);
PARAMETER(DTL.OTR_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Validate detail screen fields

//?** Validate Held Over Reason if it is not blank  10/03/2006 LJB
CASE;

// IF DTL.LH Held Over Reason NE WRK.Blank for 4           USR
IF DTL.LH_Held_Over_Reason <> WRK.Blank_for_4_USR;

CASE;

// IF DTL.LH Held Over Reason EQ LCL.Text 3 Length USR
IF DTL.LH_Held_Over_Reason = LCL.Text_3_Length_USR;

//?"ALL" not allowed as a reason code                    E004147
// Send error message - 'On Time reason code "ALL" is not allowed.'
ERROR(USR4799);
MSGPARM(DTL.LH_Held_Over_Reason);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val OT Resaon Code    RT) TYPE(RTVOBJ) FILE(PPB5REP)           AC1787946;
PARAMETER(DTL.LH_Held_Over_Reason);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'On Time Reason Code &1 not found.'
ERROR(USR3631);
MSGPARM(DTL.LH_Held_Over_Reason);

ENDIF;

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

//?SEL On Time Reason
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// Call program SEL On Time Reasons    SR.
CALL PROGRAM(SEL On Time Reasons    SR) ('PPYNSRR');
PARAMETER(DTL.LH_Held_Over_Reason);

ENDIF;

//?"ALL" not allowed as a reason code                    E004147
CASE;

// IF DTL.LH Held Over Reason EQ LCL.Text 3 Length USR
IF DTL.LH_Held_Over_Reason = LCL.Text_3_Length_USR;

// Send error message - 'On Time reason code "ALL" is not allowed.'
ERROR(USR4799);
MSGPARM(DTL.LH_Held_Over_Reason);

ENDIF;

EXECUTE FUNCTION(RTV OT Resaon Descript RT) TYPE(RTVOBJ) FILE(PPB5REP)          AC1783760;
PARAMETER(DTL.LH_Held_Over_Reason);
PARAMETER(DTL.OTR_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?F10   Added 7/26/01 per Judy
CASE;

// IF DTL.*CMD key is CF10
IF DTL.*CMD_key = '10';

CASE;

// IF PAR.*Initial call is *NO
IF PAR.*Initial_call = 'N';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Initial call = CND.*NO
PAR.*Initial_call = 'N';

// Call program WW Load Status        DF.
CALL PROGRAM(WW Load Status        DF) ('POGADFR');
PARAMETER(PAR.*Initial_call);

// PAR.*Initial call = CND.*YES
PAR.*Initial_call = 'Y';

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Held Over/Reason   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1502798;
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Load_Held_Over);
PARAMETER(DTL.LH_Held_Over_Rsn_Cmt);
PARAMETER(DTL.LH_Held_Over_Reason);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


