      *****************  RPG PROGRAM HEADING  ************************
      *‚SYSTEM:      Hog Production System
      *‚PROGRAM:     HP10262
      *‚TITLE:       Revise Region
      *‚PROGRAMMER:  Jagdish Mistry
      *‚CREATED:     07/22/25
      *
      *
      *‚FUNCTION: Uses an edit record format to add/change records from the
      *‚          master file.
      *
      *‚          This program is called from HP40262 - Work with Region.
      *
      *‚          The field 'mode' contains the value passed into
      *‚          this program from the calling program.  The field
      *‚          'd1mode' is the screen field that displays the
      *‚          value of 'mode'.  Mode will be CREATE, REVISE
      *‚          Once in the program, mode and
      *‚          d1mode will never change.  However, the action
      *‚          being performed can change depending on the function
      *‚          keys the user takes.
      *
      *‚**************************************************************
      *‚MODIFICATIONS:
      *‚**************************************************************
      * DATE      PROGRAMMER
      *
      /EJECT
      *‚**************************************************************
      *‚FILE SPECIFICATIONS
      *‚**************************************************************
      *
     FHPD10262  cf   e             workstn
     F                                     infds(iofeed)
      *
      *‚Regions
     Fhsp008    Uf A e           k disk
     F                                     infds(dbfeed)
      *
      /eject
      ****************************************************************
      *‚DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      *‚CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D view            c                   'VIEW  '
     D select          c                   'SELECT'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      *‚STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D action          s                   like(mode)
     D maxmsg          s              2  0  inz(20)
      *
      * Parm fields
      ****************************************************************
      *‚DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *‚standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *‚ Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      *‚Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *---------------------------------------------------------------
      *‚Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *‚   externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      *‚Mainline
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     update        $upd1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      *‚Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * display fields on display panel if creating
      *
     C                   select
     C                   when      mode = create                                WH create
     C                   eval      routne = scrn1
     C                   ExSr      $scrn1
     C                   If        routne = Exit
     C                   LeaveSr
     C                   EndIf
      *
      * If incoming mode is REVISE, then retrieve the database
      * record.  Do not lock the record.
      *
     C                   when      mode = revise
     C     d1rgcd        chain(n)  hsp008                             92
     C                   if        *in92 = *off                                 If found
     C                   move      rgrgcd        d1rgcd
     C                   move      rgrgds        d1rgds
     C                   eval      routne = scrn1
      *
     C                   endif                                                  If found
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      *‚Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      *
      * Set indicators to control input/output fields and available
      * function keys.
      *
     c                   select
     C                   when      mode = revise
     C                   seton                                        61
     C                   setoff                                       60
      *
     C                   when      mode = create
      *
     c                   endsl
      *
      * Write screen 1 to CRT
      *
     C                   write     HP10262R2
     C                   write     HP10262EC
     C                   exfmt     HP10262R1
      *
      * Clear messages
      *
     C                   exsr      $clmsg
      *
      * Get user's input and set routine
      *
     C                   select
      *
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
      *
     C                   when      *in12 = *on                                  F12-previous
     C                   eval      rtncd = '12'
     C                   eval      routne = exit
      *
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = update
     C                   endsl
      *
     C                   endsr
      *----------------------------------------------------------------
      /EJECT
      *---------------------------------------------------------------
      *‚Validate description
      *---------------------------------------------------------------
      *
     C     $rgds         begsr
      *
     C                   if        d1rgds = *blank
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      *‚Write/update record in database file
      *----------------------------------------------------------------
      *
     C     $upd1         begsr
      *
      * If there are no errors, revise or create the record.
      *‚35 is RI for region code
      *
     C                   if        error = 0                                    If no error
     C                   Eval      *In35 = *Off
      *
     c                   select
     C                   other
      *
     C                   If        d1rgcd <> *Blanks
     C     d1rgcd        Setll     HSP008
     C                   If        %Equal(HSP008)
     C                   If        mode = create
     C                   if        error < maxmsg
     C                   Eval      *In35 = *On
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09280'
     C                   clear                   mgw
     C                   movea     d1rgcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   Else
     C                   Eval      action = Revise
     C                   EndIf
     C                   EndIf
     C                   Else
     C                   Eval      action = create
     C                   EndIf
      *
      * Move DSPF fields to database file fields
      *
     C                   move      d1rgcd        rgrgcd
     C                   move      d1rgds        rgrgds
      *
     C                   If        Error = 0
     C                   if        action = create                              If create
     C                   write     rgrec
     C                   seton                                        60
     C                   seton                                        61
     C                   else
     C     d1rgcd        Chain     HSP008
     C                   If        %Found(HSP008)
     C                   move      d1rgcd        rgrgcd
     C                   move      d1rgds        rgrgds
     C                   update    rgrec
     C                   EndIf
     C                   Endif                                                  If create
     C                   endif                                                  If No Error
      *
     C                   endsl
      *
     C                   endif                                                  If no error
      *
      * Set next routine
      *
     C                   select
     C                   when      mode = create                                Wh creating
     C                   if        error = 0
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09040'
     C                   eval      routne = set1
     c                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      error <> 0                                   Wh errors
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = exit
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      /EJECT
      *---------------------------------------------------------------
      *‚Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      *‚Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      *‚Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *   None
      *
      * Parm Lists
      *
     C     *entry        plist
     C     d1mode        parm                    mode
     C                   parm                    d1rgcd
     C                   parm                    rtncd
      *
     C                   eval      action = mode
     C                   setoff                                       60
     C                   setoff                                       61
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
