// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBUEDFR
// ?Date: 14.08.2025 Time: 03:49:27
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('SS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

//?First Time Logic
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4=Prompt Sales Channel Code
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Sales Channel Code
AND PGM.*Cursor_field = CTL.Sales_Channel_Code;

// Call program Sel Sales Channel     SR.
CALL PROGRAM(Sel Sales Channel     SR) ('PBTOSRR');
PARAMETER(CTL.Sales_Channel_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F4=Prompt Sales Channel Market
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.SC Market Code
AND PGM.*Cursor_field = CTL.SC_Market_Code;

// Call program Sel Sales Chnl Mkt    DF.
CALL PROGRAM(Sel Sales Chnl Mkt    DF) ('PBUGDFR');
PARAMETER(CTL.Sales_Channel_Code);
PARAMETER(CTL.SC_Market_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F6=Create
CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

//?Set Sales Sold To Code to Highest Value
// LCL.Sales Sold To Code = CON.99999
LCL.Sales_Sold_To_Code = 99999;

//?Create next sequential Sales To Code
EXECUTE FUNCTION(Crt Sales Sold To     RT) TYPE(RTVOBJ) FILE(PBB5REP)           AC2114899;
PARAMETER(LCL.Sales_Sold_To_Code);
{
 //?USER: Initialize routine

 //?The purpose of this function is to create the next sequential
 //?Sales Sold To Code in the Sales Sold To file.
 //?USER: Processing if Data record not found

 // PAR.Sales Sold To Code = CON.1
 PAR.Sales_Sold_To_Code = 1;

 EXECUTE FUNCTION(Crt Sales Sold To     CR) TYPE(CRTOBJ) FILE(PBB5REP)           AC2110627;
 PARAMETER(PAR.Sales_Sold_To_Code);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd SoldTo SalesRoute RT) TYPE(RTVOBJ) FILE(PBB6REP)           AC2118419;
  PARAMETER(DB1.Sales_Sold_To_Code);
  PARAMETER(DB1.Sales_Sold_To_Salesperson);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Upd SoldTo SalesRoute RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2118385;
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.Sales_Route_Code);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Chg SoldTo SalesRoute CH) TYPE(CHGOBJ) FILE(CAEOREP)           AC2118406;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(PAR.Sales_Route_Code);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

  }

 }

 //?USER: Process Data record

 // PAR.Sales Sold To Code = DB1.Sales Sold To Code + CON.1
 PAR.Sales_Sold_To_Code = DB1.Sales_Sold_To_Code + 1;

 EXECUTE FUNCTION(Crt Sales Sold To     CR) TYPE(CRTOBJ) FILE(PBB5REP)           AC2110627;
 PARAMETER(PAR.Sales_Sold_To_Code);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('A');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd SoldTo SalesRoute RT) TYPE(RTVOBJ) FILE(PBB6REP)           AC2118419;
  PARAMETER(DB1.Sales_Sold_To_Code);
  PARAMETER(DB1.Sales_Sold_To_Salesperson);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Upd SoldTo SalesRoute RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2118385;
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.Sales_Route_Code);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Chg SoldTo SalesRoute CH) TYPE(CHGOBJ) FILE(CAEOREP)           AC2118406;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(PAR.Sales_Route_Code);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

   }

  }

 }

 QUIT;

}


//?Edit the new Sales To Code
//?S16143 DN 02/12/20-Added STC# & Update Flag as Input Parm.
// Call program Edt Sales Sold To     E1.
CALL PROGRAM(Edt Sales Sold To     E1) ('PBT6E1R');
PARAMETER(LCL.Sales_Sold_To_Code);
PARAMETER(LCL.Zero_USR);
PARAMETER(LCL.Sales_Sold_To_Desc);
PARAMETER(LCL.Sales_Channel_Code);
PARAMETER(LCL.SC_Market_Code);
PARAMETER(LCL.USR_Update_Flag);

//?Determine if new Sales Sold To Added
CASE;

// IF LCL.Sales Sold To Desc is Blank
IF LCL.Sales_Sold_To_Desc = *BLANK;

// OR LCL.SC Market Code is Not Entered
OR LCL.SC_Market_Code = *BLANK;

EXECUTE FUNCTION(Del Sales Sold To     DL) TYPE(DLTOBJ) FILE(PBB5REP)           AC2110629;
PARAMETER(LCL.Sales_Sold_To_Code);

// Send information message - 'Sales Sold To Code NOT created.'
MESSAGE(USR4872 *INFO);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Sales Channel Code = LCL.Sales Channel Code
CTL.Sales_Channel_Code = LCL.Sales_Channel_Code;

// CTL.SC Market Code = LCL.SC Market Code
CTL.SC_Market_Code = LCL.SC_Market_Code;

// CTL.Sales Sold To Code = LCL.Sales Sold To Code
CTL.Sales_Sold_To_Code = LCL.Sales_Sold_To_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// Send information message - 'Sales Sold To '&1' added.'
MESSAGE(USR4873 *INFO);
MSGPARM(LCL.Sales_Sold_To_Code);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?1=Select
CASE;

// IF RCD.*SFLSEL is *Select#1
IF RCD.*SFLSEL = '1';

// PAR.Sales Sold To Code = RCD.Sales Sold To Code
PAR.Sales_Sold_To_Code = RCD.Sales_Sold_To_Code;

RETURN;

ENDIF;

