// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDEPEFR
// ?Date: 14.08.2025 Time: 03:34:20
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Default All Inventory USR = CND.*No
PAR.Default_All_Inventory_USR = 0;

// PAR.Status Flag 4  Y/N = CND.yes
PAR.Status_Flag_4_Y_N = 'Y';

// PAR.@USR Flag = CND.Asterisk
PAR.@USR_Flag = *;

// WRK.@USR Flag = CND.No
WRK.@USR_Flag = 'N';

EXECUTE FUNCTION(RTV Load Array         RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1503233;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(CTL.Production_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Load IC Item Bal Dtl   CR) TYPE(CRTOBJ) ARRAY(PAR_IC_Item_BalanAC1503235;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Physical_Count_Weight);
 PARAMETER(DB1.Physical_Count_Qty_UOM1);
 {
  //?USER: Processing if Data record already exists

  EXECUTE FUNCTION(CHG IC Item Bal Dtl    CH) TYPE(CHGOBJ) ARRAY(PAR_IC_Item_BalanAC1505970;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Physical_Count_Weight);
  PARAMETER(PAR.Physical_Count_Qty_UOM1);
 }

}


//?USER: Initialize subfile header

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Item_Description);
PARAMETER(NLL.Description_Line_Two);
PARAMETER(PAR.UOM_Primary);
PARAMETER(NLL.Conversion_Factor_1);
PARAMETER(NLL.Operation_Factor_1);
PARAMETER(NLL.UOM_Second);
PARAMETER(NLL.Conversion_Factor_2);
PARAMETER(NLL.Operation_Factor_2);
PARAMETER(NLL.UOM_Third);
PARAMETER(NLL.UOM_Pricing);
PARAMETER(CTL.Unit_Weight);
PARAMETER(NLL.Production_Date_Control);
PARAMETER(CTL.Catch_Weight_Status);
PARAMETER(CTL.Fresh_Chilling_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Qty Min/Max        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1402211;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Minimum_Weight_Per_Case);
PARAMETER(CTL.Maximum_Weight_Per_Case);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR U/M 1 = PAR.U/M - Primary
CTL.USR_U_M_1 = PAR.UOM_Primary;

EXECUTE FUNCTION(Rtv UOM Description    RT) TYPE(RTVOBJ) FILE(CAAMREP)          AC1216290;
PARAMETER(PAR.UOM_Primary);
PARAMETER(CTL.Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Transaction Date Code = PAR.Transaction Date Code
CTL.Transaction_Date_Code = PAR.Transaction_Date_Code;

// CTL.Shift Number = PAR.Shift Number
CTL.Shift_Number = PAR.Shift_Number;

EXECUTE FUNCTION(RTV All                RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1505334;
PARAMETER(CTL.Item_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?USER: Initialize subfile record (existing record)

// PAR.Status Flag 4  Y/N = CND.no
PAR.Status_Flag_4_Y_N = 'N';

// RCD.Production Date Ref = DB1.Production Date
RCD.Production_Date_Ref = DB1.Production_Date;

// WRK.Physical Count Weight = DB1.Physical Count Weight
WRK.Physical_Count_Weight = DB1.Physical_Count_Weight;

//?The following statuses are set to make certain fields in to output fields.
CASE;

// IF PAR.Production Date Control is no
IF PAR.Production_Date_Control = 'N';

// PAR.@USR Flag = CND.Asterisk
PAR.@USR_Flag = *;

// WRK.@USR Flag = CND.No
WRK.@USR_Flag = 'N';

// WRK.Access Denied (Y/N) = CND.yes
WRK.Access_Denied_Y_N = 'Y';

//?The following statuses are set to make certain fields in to output fields.
// IF *OTHERWISE
IF *OTHERWISE;

//?Program Mode
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// PAR.@USR Flag = CND.Asterisk
PAR.@USR_Flag = *;

// WRK.@USR Flag = CND.No
WRK.@USR_Flag = 'N';

//?Program Mode
// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// WRK.Access Denied (Y/N) = CND.yes
WRK.Access_Denied_Y_N = 'Y';

ENDIF;

ENDIF;

//?USER: Initialize subfile record (new record)

//?The following statuses are set to make certain fields in to output fields.
CASE;

// IF PAR.Production Date Control is no
IF PAR.Production_Date_Control = 'N';

// PAR.@USR Flag = CND.Asterisk
PAR.@USR_Flag = *;

// WRK.@USR Flag = CND.No
WRK.@USR_Flag = 'N';

// WRK.Access Denied (Y/N) = CND.yes
WRK.Access_Denied_Y_N = 'Y';

//?The following statuses are set to make certain fields in to output fields.
// IF *OTHERWISE
IF *OTHERWISE;

//?Program Mode
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// PAR.@USR Flag = CND.Asterisk
PAR.@USR_Flag = *;

// WRK.@USR Flag = CND.No
WRK.@USR_Flag = 'N';

//?Program Mode
// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// WRK.Access Denied (Y/N) = CND.yes
WRK.Access_Denied_Y_N = 'Y';

ENDIF;

ENDIF;

//?USER: Validate subfile control

//?Defaults all 'On Hand' values to 'Physical' values.
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program Zzz Dflt OnHand/Physcl XF.
CALL PROGRAM(Zzz Dflt OnHand/Physcl XF) ('PDHEXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(CTL.Transaction_Date_Code);
PARAMETER(CTL.USR_U_M_1);
PARAMETER(CTL.Shift_Number);

// PAR.Default All Inventory USR = CND.*Yes
PAR.Default_All_Inventory_USR = 1;

// PAR.Update Exception Status = CND.blank
PAR.Update_Exception_Status = *BLANK;

EXECUTE FUNCTION(RTV Load Array         RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1503233;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(CTL.Production_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Load IC Item Bal Dtl   CR) TYPE(CRTOBJ) ARRAY(PAR_IC_Item_BalanAC1503235;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Physical_Count_Weight);
 PARAMETER(DB1.Physical_Count_Qty_UOM1);
 {
  //?USER: Processing if Data record already exists

  EXECUTE FUNCTION(CHG IC Item Bal Dtl    CH) TYPE(CHGOBJ) ARRAY(PAR_IC_Item_BalanAC1505970;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Physical_Count_Weight);
  PARAMETER(PAR.Physical_Count_Qty_UOM1);
 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?This is for fields that are to be output based on certain conditions.
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// PAR.@USR Flag = CND.Blank
PAR.@USR_Flag = *BLANK;

// WRK.@USR Flag = CND.Blank
WRK.@USR_Flag = *BLANK;

// WRK.Access Denied (Y/N) = CND.blank
WRK.Access_Denied_Y_N = *BLANK;

ENDIF;

//?USER: Validate subfile record fields

//?Checking that Value and Weight are entered if in 'Add' Mode.
CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

CASE;

// IF RCD.Physical Count Weight is Equal to zero
IF RCD.Physical_Count_Weight = *ZERO;

// AND CTL.Catch Weight Status is yes
AND CTL.Catch_Weight_Status = 'Y';

// Send error message - 'Value Required.'
ERROR(USR2625);
MSGPARM(RCD.Physical_Count_Weight);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Physical Count Qty - U/M1 is Equal to zero
IF RCD.Physical_Count_Qty_UOM1 = *ZERO;

// Send error message - 'Value Required.'
ERROR(USR2625);
MSGPARM(RCD.Physical_Count_Qty_UOM1);

ENDIF;

ENDIF;

ENDIF;

//?Option #7, defaulting the 'Quantity On Hand' to the Physical Count.
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// RCD.Physical Count Weight = RCD.Quantity on Hand - Weight
RCD.Physical_Count_Weight = RCD.Quantity_on_Hand_Weight;

// RCD.Physical Count Qty - U/M1 = RCD.Quantity on Hand - U/M1
RCD.Physical_Count_Qty_UOM1 = RCD.Quantity_on_Hand_UOM1;

ENDIF;

//?Check Catch Weight Sts
CASE;

// IF CTL.Catch Weight Status is no
IF CTL.Catch_Weight_Status = 'N';

// RCD.Physical Count Weight = RCD.Physical Count Qty - U/M1 * CTL.Unit Weight *
RCD.Physical_Count_Weight = RCD.Physical_Count_Qty_UOM1 * CTL.Unit_Weight;

//?Check Catch Weight Sts
// IF CTL.Catch Weight Status is yes
IF CTL.Catch_Weight_Status = 'Y';

// RCD.Weight Average = RCD.Physical Count Weight / RCD.Physical Count Qty - U/M1 *
RCD.Weight_Average = RCD.Physical_Count_Weight / RCD.Physical_Count_Qty_UOM1;

//?Does average weight fall within range?
CASE;

// IF RCD.Weight Average LT CTL.Minimum Weight Per Case
IF RCD.Weight_Average < CTL.Minimum_Weight_Per_Case;

// OR RCD.Weight Average GT CTL.Maximum Weight Per Case
OR RCD.Weight_Average > CTL.Maximum_Weight_Per_Case;

// Send error message - 'The average weight of &2 is out of range.'
ERROR(USR3813);
MSGPARM(RCD.Physical_Count_Weight);
MSGPARM(RCD.Weight_Average);

ENDIF;

ENDIF;

//?USER: Validate subfile record relations

//?Check to see if Quantity and Weight have changed, if so, create trans recd
CASE;

// IF PAR.Status Flag 4  Y/N is no
IF PAR.Status_Flag_4_Y_N = 'N';

EXECUTE FUNCTION(RTV IC Item Bal Dtl    RT) TYPE(RTVOBJ) ARRAY(PAR_IC_Item_BalanAC1503237;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date);
PARAMETER(WRK.Physical_Count_Weight);
PARAMETER(WRK.Physical_Count_Qty_UOM1);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Physical Count Weight
CASE;

// IF RCD.Physical Count Weight NE WRK.Physical Count Weight
IF RCD.Physical_Count_Weight <> WRK.Physical_Count_Weight;

// PAR.Transaction Weight = RCD.Physical Count Weight - WRK.Physical Count Weight
PAR.Transaction_Weight = RCD.Physical_Count_Weight - WRK.Physical_Count_Weight;

//?Physical Count Weight
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Transaction Weight = CON.*ZERO
PAR.Transaction_Weight = *ZERO;

ENDIF;

//?Physical Count Quantity
CASE;

// IF RCD.Physical Count Qty - U/M1 NE WRK.Physical Count Qty - U/M1
IF RCD.Physical_Count_Qty_UOM1 <> WRK.Physical_Count_Qty_UOM1;

// PAR.Transaction Quantity = RCD.Physical Count Qty - U/M1 - WRK.Physical Count Qt
PAR.Transaction_Quantity = RCD.Physical_Count_Qty_UOM1 - WRK.Physical_Count_Qty_UOM1;

//?Physical Count Quantity
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Transaction Quantity = CON.*ZERO
PAR.Transaction_Quantity = *ZERO;

ENDIF;

ENDIF;

//?Default Label Date to Production Date
// RCD.Label Date = RCD.Production Date Ref
RCD.Label_Date = RCD.Production_Date_Ref;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Man Physical Count CR) TYPE(CRTOBJ) FILE(CAB1REP)          AC1503282;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date_Ref);
PARAMETER(RCD.Physical_Count_Weight);
PARAMETER(RCD.Physical_Count_Qty_UOM1);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('P');
PARAMETER(RCD.Quantity_on_Hand_Weight);
PARAMETER(RCD.Quantity_on_Hand_UOM1);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Physical_Start_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Label_Date);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER('A');
PARAMETER(CTL.Transaction_Date_Code);
PARAMETER(CTL.USR_U_M_1);
PARAMETER(CTL.Shift_Number);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Crt Phys. Count Trans  IF) TYPE(EXCINTFUN)                     AC1347512;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER('A');
 PARAMETER('P');
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.UOM_Transaction);
 PARAMETER('IC');
 PARAMETER('Physical Count Entry');
 PARAMETER(PAR.Physical_Count_Qty_UOM1);
 PARAMETER(PAR.Physical_Count_Weight);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(PAR.Label_Date);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Sequence No.  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1304410;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.ITD_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.ITD Sequence Number = CON.1
   PAR.ITD_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.ITD Sequence Number = DB1.ITD Sequence Number + CON.1
   PAR.ITD_Sequence_Number = DB1.ITD_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt IC Trans. Detail   CR) TYPE(CRTOBJ) FILE(CAB7CPP)          AC1122298;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.ITD_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.UOM_Transaction);
  PARAMETER(PAR.Item_Transaction_Source);
  PARAMETER(PAR.Description);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.Label_Date);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   // Call program Crt Export Rate Dtl   XF.
   CALL PROGRAM(Crt Export Rate Dtl   XF) ('POO5XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Inventory_Trans_ID);
   PARAMETER(DB1.Inventory_Trans_Type);
   PARAMETER(DB1.Transaction_Date_Code);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.UOM_Transaction);
   PARAMETER(DB1.Item_Transaction_Source);
   PARAMETER(DB1.Description);
   PARAMETER(DB1.Transaction_Quantity);
   PARAMETER(DB1.Transaction_Weight);
   PARAMETER(DB1.USR_Transaction_Unit_Cost);
   PARAMETER(DB1.UOM_Cost);
   PARAMETER(DB1.Extended_Amount);
   PARAMETER(DB1.Ticket_Number);
   PARAMETER(DB1.GL_Document_Number);
   PARAMETER(DB1.GL_Update_Status);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Reference_Number_Code);
   PARAMETER(DB1.Lot_ID);
   PARAMETER(DB1.Transfer_Batch_Number);
   PARAMETER(DB1.Transfer_Batch_Sequence);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Employee_Badge_Number);
   PARAMETER(DB1.Production_Time);
   PARAMETER(DB1.Shift_Number);
   PARAMETER(DB1.Label_Date);
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.Job_Date);

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Man Physical Count CH) TYPE(CHGOBJ) FILE(CAB1REP)          AC1503281;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Production_Date_Ref);
PARAMETER(RCD.Physical_Count_Weight);
PARAMETER(RCD.Physical_Count_Qty_UOM1);
PARAMETER('P');
PARAMETER(PAR.Physical_Start_Date);
PARAMETER(RCD.Label_Date);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Transaction_Quantity);
PARAMETER(PAR.Transaction_Weight);
PARAMETER(CTL.Transaction_Date_Code);
PARAMETER(CTL.USR_U_M_1);
PARAMETER(CTL.Shift_Number);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Crt Phys. Count Trans  IF) TYPE(EXCINTFUN)                     AC1347512;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER('A');
 PARAMETER('P');
 PARAMETER(PAR.Transaction_Date_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.UOM_Transaction);
 PARAMETER('IC');
 PARAMETER('Physical Count Entry');
 PARAMETER(PAR.Transaction_Quantity);
 PARAMETER(PAR.Transaction_Weight);
 PARAMETER(PAR.Shift_Number);
 PARAMETER(DB1.Label_Date);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Next Sequence No.  RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1304410;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.ITD_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.ITD Sequence Number = CON.1
   PAR.ITD_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.ITD Sequence Number = DB1.ITD Sequence Number + CON.1
   PAR.ITD_Sequence_Number = DB1.ITD_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt IC Trans. Detail   CR) TYPE(CRTOBJ) FILE(CAB7CPP)          AC1122298;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Inventory_Trans_ID);
  PARAMETER(PAR.Inventory_Trans_Type);
  PARAMETER(PAR.Transaction_Date_Code);
  PARAMETER(PAR.ITD_Sequence_Number);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.UOM_Transaction);
  PARAMETER(PAR.Item_Transaction_Source);
  PARAMETER(PAR.Description);
  PARAMETER(PAR.Transaction_Quantity);
  PARAMETER(PAR.Transaction_Weight);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.Label_Date);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   // Call program Crt Export Rate Dtl   XF.
   CALL PROGRAM(Crt Export Rate Dtl   XF) ('POO5XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Inventory_Trans_ID);
   PARAMETER(DB1.Inventory_Trans_Type);
   PARAMETER(DB1.Transaction_Date_Code);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.UOM_Transaction);
   PARAMETER(DB1.Item_Transaction_Source);
   PARAMETER(DB1.Description);
   PARAMETER(DB1.Transaction_Quantity);
   PARAMETER(DB1.Transaction_Weight);
   PARAMETER(DB1.USR_Transaction_Unit_Cost);
   PARAMETER(DB1.UOM_Cost);
   PARAMETER(DB1.Extended_Amount);
   PARAMETER(DB1.Ticket_Number);
   PARAMETER(DB1.GL_Document_Number);
   PARAMETER(DB1.GL_Update_Status);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Reference_Number_Code);
   PARAMETER(DB1.Lot_ID);
   PARAMETER(DB1.Transfer_Batch_Number);
   PARAMETER(DB1.Transfer_Batch_Sequence);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Employee_Badge_Number);
   PARAMETER(DB1.Production_Time);
   PARAMETER(DB1.Shift_Number);
   PARAMETER(DB1.Label_Date);
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.Job_Date);

  }

 }

}


//?USER: Extra processing after DBF update

EXECUTE FUNCTION(RTV Load Array         RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1503233;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(CTL.Production_Date);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Load IC Item Bal Dtl   CR) TYPE(CRTOBJ) ARRAY(PAR_IC_Item_BalanAC1503235;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Physical_Count_Weight);
 PARAMETER(DB1.Physical_Count_Qty_UOM1);
 {
  //?USER: Processing if Data record already exists

  EXECUTE FUNCTION(CHG IC Item Bal Dtl    CH) TYPE(CHGOBJ) ARRAY(PAR_IC_Item_BalanAC1505970;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Physical_Count_Weight);
  PARAMETER(PAR.Physical_Count_Qty_UOM1);
 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Update Exception Status = CND.blank
PAR.Update_Exception_Status = *BLANK;

//?USER: Exit program processing

//?Exit requested?
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

