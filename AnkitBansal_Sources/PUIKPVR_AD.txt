// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUIKPVR
// ?Date: 14.08.2025 Time: 03:50:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? CST/ITM Santosh 04/14/25 - Recompilation due to DDS to DDL conversion of
//?   "POARREP - Packaging Item".
//? 7/19/2018 JBB E13459 - Transfer Packaging Item
//?   - New function to transfer a Packaging Item to a new Packaging
//?     Item.
ENDDO;

//?Initially default the output parm to the old Packaging Item
// PAR.Packaging Item Code 1 USR = PAR.Packaging Item Code
PAR.Packaging_Item_Code_1_USR = PAR.Packaging_Item_Code;

//?USER: Validate fields

//?Validate To Packaging Item.
CASE;

// IF DTL.Packaging Item Code 1 USR is Entered
IF DTL.Packaging_Item_Code_1_USR <> *BLANK;

EXECUTE FUNCTION(Val Pckg Item Exist   RT) TYPE(RTVOBJ) FILE(POARREP)           AC2143780;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Packaging_Item_Code_1_USR);

//?Transfer Packaging Item cannot already exist.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// LCL.Generic Message 80 USR = CONCAT(CON.Transfer to Co/Packaging,CON.Item code already exist.,CON
LCL.Generic_Message_80_USR = 'Transfer to Co/Packaging' + 'Item code already exist.' (1);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

QUIT;

ENDIF;

ENDIF;

//?USER: User defined action

EXECUTE FUNCTION(Crt Transfer Pkg Item IF) TYPE(EXCINTFUN)                      AC2156963;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Packaging_Item_Code);
PARAMETER(DTL.Packaging_Item_Code_1_USR);
{
 //?Execute internal function

 //?Retrieve the Carlisle Active flag
 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(PAR.Company_Number);
 PARAMETER('PRDPKG');
 PARAMETER(NLL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Create the Transfer to Packaging Item record
 EXECUTE FUNCTION(Rtv Transfer Pkg Item RT) TYPE(RTVOBJ) FILE(POARREP)           AC2156966;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Packaging_Item_Code);
 PARAMETER(PAR.Packaging_Item_Code_1_USR);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Copy Packaging Itm CR) TYPE(CRTOBJ) FILE(POARREP)          AC2148920;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Packaging_Item_Code_1_USR);
  PARAMETER(DB1.Pckg_Item_Description);
  PARAMETER(DB1.Pckg_List_Sequence);
  PARAMETER(DB1.Pckg_Type_Class);
  PARAMETER(DB1.Pckg_Item_Type);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Pckg_Unit_Cost);
  PARAMETER(DB1.Pckg_Tare_Weight);
  PARAMETER(DB1.Pckg_Reporting_Group);
  PARAMETER(DB1.Pckg_Group_Category);
  PARAMETER(DB1.Pckg_Modified_Weight);
  PARAMETER(DB1.Pckg_Unused_Status_3);
  PARAMETER(DB1.Pckg_Unused_Sts_2);
  PARAMETER(DB1.Pre_printed_Bag_Sts);
  PARAMETER(DB1.Pckg_Unused_Status_5);
  PARAMETER(DB1.Pckg_Unused_Status_6);
  PARAMETER(DB1.Pckg_Unused_Status_7);
  PARAMETER(DB1.Pckg_Unused_Status_8);
  PARAMETER(DB1.Pckg_Unused_Status_9);
  PARAMETER(DB1.Pckg_Unused_Status_10);
  PARAMETER(DB1.Pckg_Unused_Code);
  PARAMETER('A');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time 2    IF) TYPE(EXCINTFUN)                     AC2045684;
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

  }

 }

 //?If Packaging Item record created, create Packaging BOM records
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Create Packaging BOM and PFS Product Packaging records for the
 //?Transfer to Packaging Item Code, then delete Packaging BOM records
 //?and update PFS Packaging records setting the Record Status to "D"
 //?for the Transfer from Packaging Item.
 EXECUTE FUNCTION(Crt Transfer Pkg BOM  RT) TYPE(RTVOBJ) FILE(POAZCPP)           AC2156974;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Packaging_Item_Code);
 PARAMETER(PAR.Packaging_Item_Code_1_USR);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Initialize routine

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('PRDPKG');
  PARAMETER(NLL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?USER: Process Data record

  //?This CRTOBJ creates Packaging BOM and PFS Product Packaging records
  //?for the Transfer to Packaging Item Code
  EXECUTE FUNCTION(Crt Packaging BOM     CR) TYPE(CRTOBJ) FILE(POAZCPP)           AC1606855;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Packaging_Item_Code_1_USR);
  PARAMETER(DB1.Packaging_Item_Quantity);
  PARAMETER(DB1.Pckg_Item_Type);
  PARAMETER(DB1.Pckg_Reporting_Group);
  PARAMETER(DB1.Pckg_Group_Category);
  PARAMETER(DB1.Pckg_BOM_Unused_Sts_1);
  PARAMETER(DB1.Pckg_BOM_Unused_Sts_2);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    //?*** Set RECORD STATUS field. ***
    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    //?*** Set CREATE fields. ***
    // PAR.Create Date = JOB.*Job date
    PAR.Create_Date = JOB.*Job_date;

    // PAR.Create Time = JOB.*Job time
    PAR.Create_Time = JOB.*Job_time;

    // PAR.Create User = JOB.*USER
    PAR.Create_User = JOB.*USER;

    // PAR.Create Program = JOB.*PROGRAM
    PAR.Create_Program = JOB.*PROGRAM;

    //?*** Set CHANGE fields. ***
    // PAR.Change Date = CON.*ZERO
    PAR.Change_Date = *ZERO;

    // PAR.Change Time = CON.*ZERO
    PAR.Change_Time = *ZERO;

    // PAR.Change User = CON.*BLANK
    PAR.Change_User = *BLANK;

    // PAR.Change Program = CON.*BLANK
    PAR.Change_Program = *BLANK;

   }

   //?USER: Processing after Data update

   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(DB1.Company_Number);
   PARAMETER('PRDPKG');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS One Prod Pkging   XF.
   CALL PROGRAM(PFS One Prod Pkging   XF) ('PPNIXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Packaging_Item_Code);
   PARAMETER('C');

   ENDIF;

  }

  //?If Carlisle flag is Active, update the Record Status on the PFS
  //?Product Packaging record to "D" for the Transfer from Packaging
  //?Item Code
  //?If Carlisle is Active
  CASE;

  // IF PAR.PFS Carlisle Active is Yes
  IF PAR.PFS_Carlisle_Active = 'Y';

  EXECUTE FUNCTION(Chg Record Status     CH) TYPE(CHGOBJ) FILE(PPBOREP)           AC2157037;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Packaging_Item_Code);
  PARAMETER('D');
  ENDIF;

  //?Physically Delete the Packaging BOM record
  EXECUTE FUNCTION(Dlt Packaging BOM Only DL) TYPE(DLTOBJ) FILE(POAZCPP)          AC2157036;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Packaging_Item_Code);
  //?There is no need to recalculate the Tare Weight because the new
  //?records are using the same Item Code.
 }

 //?Delete the Packaging Item record for the Transfer from Packaging Item
 EXECUTE FUNCTION(Del Packaging Item    DO) TYPE(DLTOBJ) FILE(POARREP)           AC1602025;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Packaging_Item_Code);
 ENDIF;

}


//?If no update errors, pass back new Packaging Item Code
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PAR.Packaging Item Code 1 USR = DTL.Packaging Item Code 1 USR
PAR.Packaging_Item_Code_1_USR = DTL.Packaging_Item_Code_1_USR;

//?If no update errors, pass back new Packaging Item Code
// IF *OTHERWISE
IF *OTHERWISE;

//?If errors, pass back original Packaging Item Code
// PAR.Packaging Item Code 1 USR = DTL.Packaging Item Code
PAR.Packaging_Item_Code_1_USR = DTL.Packaging_Item_Code;

ENDIF;

