// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPABDFR
// ?Date: 14.08.2025 Time: 03:39:42
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?042005 slm OMS012A Added logic for the Affect fields on each
//?individual record.
//?Expand the screen to allow for Org fields.
//?100108 slm E00488  CLAIM RESOLUTION EXP,...input field  was 70
//?change to allow user to only have 40 chars since we only store 40
//?E4057 JJH 04/05/15 - Price Credit Memo Fixes
//?- Display Department before Reason Code.
//?- Affect Sales Pnds Sts Usr - Change Input to Output
//?- The following fields are hidden because they are no longer used
//?  Affect Trade Fund Usr, Affect Commission USR, Affect Pricing
//?  USR, AffectInventory Status, Commission USR, and Org Affect
//?  USR.
//?- Chg App/Deny RT - A/R Claim Product - Commented Out
ENDDO;

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile control

// CTL.Claim Status = PAR.Claim Status
CTL.Claim_Status = PAR.Claim_Status;

// CTL.Claim Resolution Explan. = PAR.Claim Resolution Explan.
CTL.Claim_Resolution_Explan = PAR.Claim_Resolution_Explan;

// CTL.Claim Order Number = PAR.Claim Order Number
CTL.Claim_Order_Number = PAR.Claim_Order_Number;

// CTL.Claim Approved Amount = PAR.Claim Amount
CTL.Claim_Approved_Amount = PAR.Claim_Amount;

// CTL.Claim Company Number = PAR.Claim Company Number
CTL.Claim_Company_Number = PAR.Claim_Company_Number;

//?USER: Initialize subfile record from DBF record

//?E4057 JJH 04/05/15 - Fields no longer used
// RCD.Affect Sales Pnds Sts Usr = DB1.Affect Sales Pnds Status
RCD.Affect_Sales_Pnds_Sts_Usr = DB1.Affect_Sales_Pnds_Status;

//?042005 slm OMS012A Added logic for the Affect fields on each
//?individual record
//?E4057 JJH 04/05/15 - Fields no longer used
// PGM.*Re-read Subfile Record = CND.*YES
PGM.*Re_read_Subfile_Record = 1;

EXECUTE FUNCTION(Chk DEV Priced Itm    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1681604;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Claim_Order_Number);
PARAMETER(DB1.Claim_Item_Code);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
PARAMETER(RCD.Price_Method_Code);
{
 //?USER: Initialize routine

 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

}


CASE;

// IF RCD.Price Method Code is Deviated
IF RCD.Price_Method_Code = 'DEV';

// RCD.Description USR = CON.DEVIATED PRICED ITEM
RCD.Description_USR = 'DEVIATED PRICED ITEM';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Description USR = CON.*BLANK
RCD.Description_USR = *BLANK;

ENDIF;

//?E4057 JJH 04/05/15 - Fields no longer used
//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.Claim Status is Sls Approved
IF CTL.Claim_Status = 'S';

//?Claim is sales person approved.
DO;

// CTL.Claim Approved Amount = PAR.Claim Amount
CTL.Claim_Approved_Amount = PAR.Claim_Amount;

ENDDO;

// IF CTL.Claim Status is Denied
IF CTL.Claim_Status = 'D';

EXECUTE FUNCTION(Val Resale for claim  RT) TYPE(RTVOBJ) FILE(PDMPCPP)           AC1678288;
PARAMETER(CTL.Claim_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send error message - 'Claim cannot be denied because resale products exist.'
ERROR(USR3322);
MSGPARM(CTL.Claim_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

//?Claim is denied.
DO;

// CTL.Claim Approved Amount = CON.*ZERO
CTL.Claim_Approved_Amount = *ZERO;

CASE;

// IF CTL.Claim Resolution Explan. is Blank
IF CTL.Claim_Resolution_Explan = *BLANK;

// Send error message - 'Explanation is required.'
ERROR(USR2827);
MSGPARM(CTL.Claim_Explan_Text_1_USR);

ENDIF;

ENDDO;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Claim Status must be either Sales Approved or Denied.'
ERROR(USR2784);
MSGPARM(CTL.Claim_Status);

ENDIF;

// CTL.Claim Status Desc     USR = Condition name of CTL.Claim Status
CTL.Claim_Status_Desc_USR = RTVCND(CTL.Claim_Status);

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(RCD.Item_Desc_DRV);
PARAMETER(RCD.Claim_Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Process subfile record (Pre-confirm)

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?E4057 JJH 04/05/15 - Fields no longer used
//?USER: Process subfile control (Post-confirm)

CASE;

// IF PGM.*Defer confirm is Proceed to confirm
IF PGM.*Defer_confirm = 'N';

EXECUTE FUNCTION(Val Resale for claim  RT) TYPE(RTVOBJ) FILE(PDMPCPP)           AC1678288;
PARAMETER(CTL.Claim_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Call program Dsp Claim Resale Ap/Dn DF.
CALL PROGRAM(Dsp Claim Resale Ap/Dn DF) ('PPA9DFR');
PARAMETER(CTL.Claim_Number);
PARAMETER(PAR.Claim_Ship_to_Customer);
PARAMETER(LCL.Return_Code_Usr);
PARAMETER(PAR.Sales_Type_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Return Code Usr = CND.*Blank
LCL.Return_Code_Usr = *BLANK;

ENDIF;

//?If return code *normal, update
CASE;

// IF LCL.Return Code Usr is *Blank
IF LCL.Return_Code_Usr = *BLANK;

CASE;

// IF CTL.Claim Status is Sls Approved
IF CTL.Claim_Status = 'S';

//?Sales Approved.
DO;

// PAR.Sales Approved Date = JOB.*Job date
PAR.Sales_Approved_Date = JOB.*Job_date;

// PAR.Sales Approved Time = JOB.*Job time
PAR.Sales_Approved_Time = JOB.*Job_time;

// PAR.Sales Approved User = JOB.*USER
PAR.Sales_Approved_User = JOB.*USER;

// PAR.Approved/Denied Date = CON.*ZERO
PAR.Approved_Denied_Date = *ZERO;

// PAR.Approved/Denied Time = CON.*ZERO
PAR.Approved_Denied_Time = *ZERO;

// PAR.Approved/Denied User = CON.*BLANK
PAR.Approved_Denied_User = *BLANK;

// PAR.Claim Resolution Explan. = CON.*BLANK
PAR.Claim_Resolution_Explan = *BLANK;

// LCL.Claim Status = CND.Approved
LCL.Claim_Status = 'A';

// LCL.Approved/Denied Date = PAR.Sales Approved Date
LCL.Approved_Denied_Date = PAR.Sales_Approved_Date;

// LCL.Approved/Denied Time = PAR.Sales Approved Time
LCL.Approved_Denied_Time = PAR.Sales_Approved_Time;

ENDDO;

// IF CTL.Claim Status is Denied
IF CTL.Claim_Status = 'D';

//?Denied.
DO;

// PAR.Sales Approved Date = CON.*ZERO
PAR.Sales_Approved_Date = *ZERO;

// PAR.Sales Approved Time = CON.*ZERO
PAR.Sales_Approved_Time = *ZERO;

// PAR.Sales Approved User = CON.*BLANK
PAR.Sales_Approved_User = *BLANK;

// PAR.Approved/Denied Date = JOB.*Job date
PAR.Approved_Denied_Date = JOB.*Job_date;

// PAR.Approved/Denied Time = JOB.*Job time
PAR.Approved_Denied_Time = JOB.*Job_time;

// PAR.Approved/Denied User = JOB.*USER
PAR.Approved_Denied_User = JOB.*USER;

// PAR.Claim Resolution Explan. = CTL.Claim Resolution Explan.
PAR.Claim_Resolution_Explan = CTL.Claim_Resolution_Explan;

// LCL.Claim Status = CTL.Claim Status
LCL.Claim_Status = CTL.Claim_Status;

// LCL.Approved/Denied Date = PAR.Approved/Denied Date
LCL.Approved_Denied_Date = PAR.Approved_Denied_Date;

// LCL.Approved/Denied Time = PAR.Approved/Denied Time
LCL.Approved_Denied_Time = PAR.Approved_Denied_Time;

ENDDO;

ENDIF;

//?042105 slm oms012a -
//?Update the Approval for the sales person
//?If sales is approval then flag the A/R Claim approval with  A approved
//?If sales deny then flag the A/R Claim appr with the claim status from par
EXECUTE FUNCTION(Chg Apprv/Den For Sls RT) TYPE(RTVOBJ) FILE(PPAYCPP)           AC1734320;
PARAMETER(CTL.Claim_Number);
PARAMETER(LCL.Approved_Denied_Date);
PARAMETER(LCL.Approved_Denied_Time);
PARAMETER(LCL.Claim_Status);
{
 //?USER: Initialize routine

 //?At the time the claim is approved or deny by sls then update the
 //?approval record
 //?USER: Process Data record

 CASE;

 // IF DB1.Approval Person Type is Order Salesperson
 IF DB1.Approval_Person_Type = 'O';

 EXECUTE FUNCTION(Chg Apprv/Den For Sls CH) TYPE(CHGOBJ) FILE(PPAYCPP)           AC1734321;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(PAR.Approved_Denied_Date);
 PARAMETER(PAR.Approved_Denied_Time);
 PARAMETER(PAR.Approval_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


EXECUTE FUNCTION(Rtv Approved/Denied   RT) TYPE(RTVOBJ) FILE(PDMKCPP)           AC1678165;
PARAMETER(CTL.Claim_Number);
PARAMETER(CTL.Claim_Status);
PARAMETER(PAR.Sales_Approved_Date);
PARAMETER(PAR.Sales_Approved_Time);
PARAMETER(PAR.Sales_Approved_User);
PARAMETER(PAR.Approved_Denied_Date);
PARAMETER(PAR.Approved_Denied_Time);
PARAMETER(PAR.Approved_Denied_User);
PARAMETER(PAR.Claim_Resolution_Explan);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG A/R Claim          CH) TYPE(CHGOBJ) FILE(PDMKCPP)          AC1523474;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.Salesperson_to_Rvw_Claim);
 PARAMETER(DB1.Claim_Company_Number);
 PARAMETER(DB1.Claim_Order_Number);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Claim_Ship_to_Customer);
 PARAMETER(DB1.Claim_Customer_Name);
 PARAMETER(DB1.Claim_Type);
 PARAMETER(PAR.Claim_Status);
 PARAMETER(DB1.Claim_Amount);
 PARAMETER(DB1.Claim_Net_Loss);
 PARAMETER(DB1.Claim_Approved_Amount);
 PARAMETER(DB1.Claim_Contact_Name);
 PARAMETER(DB1.Product_Inspection_Avail);
 PARAMETER(DB1.Product_Inspection_Desc);
 PARAMETER(DB1.Rep_Inspection_Required);
 PARAMETER(DB1.Rep_Inspection_Req_Desc);
 PARAMETER(DB1.Lab_Fee_Involved);
 PARAMETER(DB1.Lab_Fee);
 PARAMETER(DB1.Driver_Name);
 PARAMETER(DB1.Lab_Name);
 PARAMETER(DB1.Resolve_Claim_by_Date);
 PARAMETER(DB1.Actual_Delivery_Date);
 PARAMETER(DB1.Claim_Called_in_by);
 PARAMETER(DB1.Claim_Called_in_by_Desc);
 PARAMETER(DB1.Claim_Called_in_by_Date);
 PARAMETER(DB1.Claim_Entry_Date);
 PARAMETER(DB1.Claim_Entry_Time);
 PARAMETER(DB1.Claim_Entry_User);
 PARAMETER(DB1.Resale_Ship_to_Customer);
 PARAMETER(DB1.Resale_Purchase_Order_Nbr);
 PARAMETER(PAR.Sales_Approved_Date);
 PARAMETER(PAR.Sales_Approved_Time);
 PARAMETER(PAR.Sales_Approved_User);
 PARAMETER(PAR.Approved_Denied_Date);
 PARAMETER(PAR.Approved_Denied_Time);
 PARAMETER(PAR.Approved_Denied_User);
 PARAMETER(DB1.Memo_Created);
 PARAMETER(DB1.Memo_Created_Date);
 PARAMETER(DB1.Memo_Created_Time);
 PARAMETER(DB1.Memo_Created_User);
 PARAMETER(PAR.Claim_Resolution_Explan);
 PARAMETER(DB1.Approved_Net_Loss);
 PARAMETER(DB1.Total_Expense_Amount);
 PARAMETER(DB1.Memo_Post_Date);
 PARAMETER(DB1.Memo_Post_Time);
 PARAMETER(DB1.TFS_Batch_Number);
 PARAMETER(DB1.TFS_Process_Status);
 PARAMETER(DB1.Avg_TF_Responsibility_Pct);
 PARAMETER(DB1.Avg_SBF_ResponsibilityPct);
 PARAMETER(DB1.STF_Responsibility_Pct);
 PARAMETER(DB1.FPR_ID);
 PARAMETER(DB1.AC_Unused_Value_2);
 PARAMETER(DB1.AC_Unused_Value_3);
 PARAMETER(DB1.AC_Unused_Value_4);
 PARAMETER(DB1.Claim_Prod_Affect_Commsn);
 PARAMETER(DB1.ARC_Unused_Status_1);
 PARAMETER(DB1.ARC_Unused_Status_2);
 PARAMETER(DB1.AC_Shipping_Method);
 PARAMETER(DB1.AC_Full_Return_to_Plant);
 PARAMETER(DB1.AC_Unused_Pct_1);
 PARAMETER(DB1.AC_Unused_Pct_2);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.Claim Amount is less than zero
  IF PAR.Claim_Amount < *ZERO;

  // DB1.Claim Type = CND.Credit Memo
  DB1.Claim_Type = 'CM';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // DB1.Claim Type = CND.Debit Memo
  DB1.Claim_Type = 'DM';

  ENDIF;

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

}


ENDIF;

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?E4057 JJH 04/05/15 - No longer required because these fields
//? are no longer required.
//?USER: Final processing (Post-confirm)

RETURN;

