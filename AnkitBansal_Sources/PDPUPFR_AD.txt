// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDPUPFR
// ?Date: 14.08.2025 Time: 12:04:15
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?RMC Chg act ship date selection to select par.actual ship date 8/31/06
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?USER: Record selection processing

//?Select orders to be invoiced or Transfers
CASE;

// IF DB1.Billing Activity Type is Invoice
IF DB1.Billing_Activity_Type = '1';

// OR DB1.Order Type - Sales is Transfer Order
OR DB1.Order_Type_Sales = 'TR';

//?Select orders to be invoiced or Transfers
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Modified flag: S=Shipped  M=Shipped Modified  ' '=Not Shipped
CASE;

// IF PAR.Modified Flag is Modified or Blank (*)
IF PAR.Modified_Flag = *;

//?Par.modified is *
CASE;

// IF DB1.Modified Flag is Modified
IF DB1.Modified_Flag = 'M';

// WRK.Modified Flag = DB1.Modified Flag
WRK.Modified_Flag = DB1.Modified_Flag;

//?Par.modified is *
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Actual Shipped Date is not entered
IF DB1.Actual_Shipped_Date = *ZERO;

// AND DB1.Scheduled Ship Date LT JOB.*Job date
AND DB1.Scheduled_Ship_Date < JOB.*Job_date;

// WRK.Modified Flag = DB1.Modified Flag
WRK.Modified_Flag = DB1.Modified_Flag;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Actual Shipped Date is entered
IF DB1.Actual_Shipped_Date <> *ZERO;

// AND DB1.Actual Shipped Date NE DB1.Scheduled Ship Date
AND DB1.Actual_Shipped_Date <> DB1.Scheduled_Ship_Date;

// WRK.Modified Flag = CND.Modified
WRK.Modified_Flag = 'M';

// IF *OTHERWISE
IF *OTHERWISE;

//?Check Actual Quantities are not = Scheduled Quantities
EXECUTE FUNCTION(RTV Qty&Wgt Sched&Act  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428884;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.Quantity_Scheduled);
PARAMETER(WRK.Weight_Scheduled);
PARAMETER(WRK.Quantity_Shipped_Total);
PARAMETER(WRK.Weight_Shipped_Total);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

 CASE;

 // IF DB1.Quantity Shipped Total is Greater than zero
 IF DB1.Quantity_Shipped_Total > *ZERO;

 // AND DB1.Quantity Shipped Total NE DB1.Quantity Scheduled
 AND DB1.Quantity_Shipped_Total <> DB1.Quantity_Scheduled;

 // PGM.*Return code = CND.Check Error
 PGM.*Return_code = 'CHKERR';

 ENDIF;

}


CASE;

// IF PGM.*Return code is Check Error
IF PGM.*Return_code = 'CHKERR';

// WRK.Modified Flag = CND.Modified
WRK.Modified_Flag = 'M';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Modified flag: S=Shipped  M=Shipped Modified  ' '=Not Shipped
// IF *OTHERWISE
IF *OTHERWISE;

//?PAR Modified Flag is blank
CASE;

// IF PAR.Modified Flag is Not Shipped
IF PAR.Modified_Flag = *BLANK;

// WRK.Modified Flag = DB1.Modified Flag
WRK.Modified_Flag = DB1.Modified_Flag;

//?PAR Modified Flag is blank
// IF *OTHERWISE
IF *OTHERWISE;

//?Control field is not an asterisk or blank
CASE;

// IF PAR.Modified Flag NE DB1.Modified Flag
IF PAR.Modified_Flag <> DB1.Modified_Flag;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Control field is not an asterisk or blank
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Modified Flag = DB1.Modified Flag
WRK.Modified_Flag = DB1.Modified_Flag;

ENDIF;

ENDIF;

ENDIF;

//?Block Order Flag
CASE;

// IF PAR.Block Order Flag NE WRK.BLANK
IF PAR.Block_Order_Flag <> WRK.BLANK;

CASE;

// IF DB1.Block Order Flag NE PAR.Block Order Flag
IF DB1.Block_Order_Flag <> PAR.Block_Order_Flag;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// PAR.USR Flag 1 = WRK.Modified Flag
PAR.USR_Flag_1 = WRK.Modified_Flag;

//?Select by warehouse
CASE;

// IF PAR.Warehouse Code is Warehouse Code Blank
IF PAR.Warehouse_Code = *BLANK;

//?Select by warehouse
// IF *OTHERWISE
IF *OTHERWISE;

//?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


CASE;

// IF PAR.Warehouse Code NE WRK.Warehouse Code
IF PAR.Warehouse_Code <> WRK.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(DB1.Load_ID);
PARAMETER(WRK.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


//?Select by load status
CASE;

// IF PAR.Load Status is *Blank
IF PAR.Load_Status = *BLANK;

//?Select by load status
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Load Status NE WRK.Load Status
IF PAR.Load_Status <> WRK.Load_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// PAR.USR Flag 2 = WRK.Load Status
PAR.USR_Flag_2 = WRK.Load_Status;

//?Select by Actual Shipped Date
CASE;

// IF PAR.Actual Shipped Date is entered
IF PAR.Actual_Shipped_Date <> *ZERO;

//?If PAR.Shipped Status is not '*' then select only shipped records
CASE;

// IF PAR.Modified Flag is Modified or Blank (*)
IF PAR.Modified_Flag = *;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.Actual Shipped Date NE PAR.Actual Shipped Date
IF DB1.Actual_Shipped_Date <> PAR.Actual_Shipped_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?SEL: Price Method Code
CASE;

// IF PAR.Price Method Code is Not Blank
IF PAR.Price_Method_Code <> *BLANK;

EXECUTE FUNCTION(VAL Price Mth Exist   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1832525;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 CASE;

 // IF PAR.Price Method Code EQ DB1.Price Method Code
 IF PAR.Price_Method_Code = DB1.Price_Method_Code;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Not Found
IF LCL.Record_Found_OrdDtlUSR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: On print of first page format

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

//?Detail or Summary report
CASE;

// IF PAR.USR Summary/Detail or Tot is Detail
IF PAR.USR_Summary_Detail_or_Tot = 'D';

// 1PG.USR Description - New = CON.* Detail *
1PG.USR Description - New = * Detail *;

//?Detail or Summary report
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.USR Description - New = CON.* Summary *
1PG.USR Description - New = * Summary *;

ENDIF;

//?Select Report
CASE;

// IF PAR.USR Detail or Summary is Report Selection 1
IF PAR.USR_Detail_or_Summary = '1';

// 1PG.USR Description 22 = CON.by Sales Route
X1PG_USR_Description_22 = 'by Sales Route';

//?Select Report
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.USR Description 22 = CON.by Scheduled Ship Date
X1PG_USR_Description_22 = 'by Scheduled Ship Date';

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Sales Route Code = PAR.Sales Route Code
X1PG_Sales_Route_Code = PAR.Sales_Route_Code;

//?Sales Route description
CASE;

// IF PAR.Sales Route Code is not entered
IF PAR.Sales_Route_Code = *BLANK;

// 1PG.Sales Route Description = CON.*All
X1PG_Sales_Route_Description = *All;

//?Sales Route description
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(X1PG_Sales_Route_Code);
PARAMETER(X1PG_Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// 1PG.Order Number = PAR.Order Number
X1PG_Order_Number = PAR.Order_Number;

// 1PG.Price Status = PAR.Price Status
X1PG_Price_Status = PAR.Price_Status;

//?Price Status description
CASE;

// IF PAR.Price Status is Blank
IF PAR.Price_Status = *BLANK;

// 1PG.USR Desc. 10 = CON.*All
X1PG_USR_Desc_10 = *All;

//?Price Status description
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.USR Desc. 10 = Condition name of 1PG.Price Status
X1PG_USR_Desc_10 = RTVCND(X1PG_Price_Status);

ENDIF;

// 1PG.Price Audit = PAR.Price Audit
X1PG_Price_Audit = PAR.Price_Audit;

//?Price Audit description
CASE;

// IF PAR.Price Audit is No Audit
IF PAR.Price_Audit = *BLANK;

// 1PG.USR Description - 15 = CON.*All
1PG.USR Description - 15 = *All;

//?Price Audit description
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.USR Description - 15 = Condition name of 1PG.Price Audit
X1PG_USR_Description_15 = RTVCND(X1PG_Price_Audit);

ENDIF;

// 1PG.Modified Flag = PAR.Modified Flag
X1PG_Modified_Flag = PAR.Modified_Flag;

//?Modified Flag description
CASE;

// IF PAR.Modified Flag is Not Shipped
IF PAR.Modified_Flag = *BLANK;

// 1PG.Description = CON.*All
X1PG_Description = *All;

//?Modified Flag description
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Description = Condition name of 1PG.Modified Flag
X1PG_Description = RTVCND(X1PG_Modified_Flag);

ENDIF;

// 1PG.Block Order Flag = PAR.Block Order Flag
X1PG_Block_Order_Flag = PAR.Block_Order_Flag;

//?Block Order Flag description
CASE;

// IF PAR.Block Order Flag EQ WRK.BLANK
IF PAR.Block_Order_Flag = WRK.BLANK;

// 1PG.USR Description = CON.*All
X1PG_USR_Description = *All;

//?Block Order Flag description
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.USR Description = Condition name of 1PG.Block Order Flag
X1PG_USR_Description = RTVCND(X1PG_Block_Order_Flag);

ENDIF;

// 1PG.Load Status = PAR.Load Status
X1PG_Load_Status = PAR.Load_Status;

//?Load Status description
CASE;

// IF PAR.Load Status is *Blank
IF PAR.Load_Status = *BLANK;

// 1PG.Item Structure Type Desc = CON.*All
X1PG_Item_Structure_Type_Desc = *All;

//?Load Status description
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Item Structure Type Desc = Condition name of 1PG.Load Status
X1PG_Item_Structure_Type_Desc = RTVCND(X1PG_Load_Status);

ENDIF;

// 1PG.Header Status = PAR.Header Status
X1PG_Header_Status = PAR.Header_Status;

//?Order status description
CASE;

// IF PAR.Header Status is *None
IF PAR.Header_Status = *BLANK;

// 1PG.Item Structure Group Desc = CON.*All
X1PG_Item_Structure_Group_Desc = *All;

//?Order status description
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Item Structure Group Desc = Condition name of 1PG.Header Status
X1PG_Item_Structure_Group_Desc = RTVCND(X1PG_Header_Status);

ENDIF;

// 1PG.Ship To Customer = PAR.Ship To Customer
X1PG_Ship_To_Customer = PAR.Ship_To_Customer;

//?Ship to Customer description
CASE;

// IF PAR.Ship To Customer is equal to zero
IF PAR.Ship_To_Customer = *ZERO;

// 1PG.Ship To Name = CON.*All
X1PG_Ship_To_Name = *All;

//?Ship to Customer description
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(X1PG_Ship_To_Customer);
PARAMETER(X1PG_Ship_To_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// 1PG.Scheduled Ship Date = PAR.Scheduled Ship Date
X1PG_Scheduled_Ship_Date = PAR.Scheduled_Ship_Date;

// 1PG.Actual Shipped Date = PAR.Actual Shipped Date
X1PG_Actual_Shipped_Date = PAR.Actual_Shipped_Date;

// 1PG.Load ID = PAR.Load ID
X1PG_Load_ID = PAR.Load_ID;

// 1PG.Warehouse Code = PAR.Warehouse Code
X1PG_Warehouse_Code = PAR.Warehouse_Code;

//?warehouse description
CASE;

// IF PAR.Warehouse Code is Warehouse Code Blank
IF PAR.Warehouse_Code = *BLANK;

// 1PG.Warehouse Description = CON.*All
X1PG_Warehouse_Description = *All;

//?warehouse description
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Warehouse Description = Condition name of 1PG.Warehouse Code
X1PG_Warehouse_Description = RTVCND(X1PG_Warehouse_Code);

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Accounting Company Number header format
PRINT Accounting Company Number header format;

ENDIF;

CASE;

IF NEW Scheduled_Ship_Date;
// SUPPRESSED PRINT Scheduled Ship Date header format

ENDIF;

CASE;

IF NEW Actual_Shipped_Date;
// SUPPRESSED PRINT Actual Shipped Date header format

ENDIF;

CASE;

IF NEW Order_Number;
// SUPPRESSED PRINT Order Number header format

ENDIF;

//?USER: On print of detail format

// CUR.Modified Flag = PAR.USR Flag 1
CUR.Modified_Flag = PAR.USR_Flag_1;

// CUR.Load Status = PAR.USR Flag 2
CUR.Load_Status = PAR.USR_Flag_2;

//?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CUR.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?Display shipped weight if order has been shipped else weight ordered
CASE;

// IF DB1.Event Code is Entered Thru 03 Picked
IF DB1.Event_Code >= '01';
AND DB1.Event_Code <= '03';

// CUR.PS Weight Sched Shipment = DB1.Order Weight Total
CUR.PS_Weight_Sched_Shipment = DB1.Order_Weight_Total;

//?Display shipped weight if order has been shipped else weight ordered
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Weight Shipped Total = CON.*ZERO
WRK.Weight_Shipped_Total = *ZERO;

EXECUTE FUNCTION(RTV Actual Wgt Shipped RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1418098;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(WRK.Weight_Shipped_Total);
{
 //?USER: Process Data record

 // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
 PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

}


// CUR.PS Weight Sched Shipment = WRK.Weight Shipped Total
CUR.PS_Weight_Sched_Shipment = WRK.Weight_Shipped_Total;

ENDIF;

EXECUTE FUNCTION(RTV Load Dispatch flds RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1444756;
PARAMETER(CUR.Load_ID);
PARAMETER(WRK.Scheduled_Ship_Date);
PARAMETER(WRK.Trailer_Id);
PARAMETER(WRK.Carrier_Code);
PARAMETER(WRK.Schedule_Sequence_Number);
PARAMETER(WRK.Shipping_Method);
PARAMETER(WRK.On_Time_Y_N);
PARAMETER(WRK.Truck_Ready_Date);
PARAMETER(WRK.Truck_Ready_Time);
PARAMETER(WRK.Spotted_Date);
PARAMETER(WRK.Spotted_Time);
PARAMETER(WRK.Load_Finished_Date);
PARAMETER(WRK.Load_Finished_Time);
PARAMETER(WRK.BOL_Complete_Date);
PARAMETER(WRK.BOL_Complete_Time);
PARAMETER(WRK.BOL_Received_Date);
PARAMETER(WRK.BOL_Received_Time);
PARAMETER(CUR.Truck_Departure_Date);
PARAMETER(CUR.Truck_Departure_Time);
PARAMETER(WRK.Adjusted_Departure_Date);
PARAMETER(WRK.Adjusted_Departure_Time);
PARAMETER(WRK.Shipping_Line);
PARAMETER(WRK.Port_Delv_Terminal);
PARAMETER(WRK.Scheduled_Delivery_Date);
PARAMETER(WRK.Scheduled_Delivery_Time);
PARAMETER(WRK.LH_Unused_Sts);
PARAMETER(WRK.On_Yard_Date);
PARAMETER(WRK.On_Yard_Time);
PARAMETER(WRK.Load_Held_Over);
PARAMETER(WRK.LH_On_Time_Reason_Code);
PARAMETER(LCL.LH_Held_Over_Reason);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DB1.Block Order Flag is Block Order
IF DB1.Block_Order_Flag = 'B';

// CUR.Text USR 5 = CON.BLOCK
CUR.Text_USR_5 = 'BLOCK';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Text USR 5 = CON.*BLANK
CUR.Text_USR_5 = *BLANK;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Ord Status Details Px
CASE;

// IF PAR.USR Summary/Detail or Tot is Summary
IF PAR.USR_Summary_Detail_or_Tot = 'S';

QUIT;

ENDIF;

EXECUTE FUNCTION(PRT Ord Status Details PO) TYPE(PRTOBJ);
PARAMETER(NXT.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(WRK.Substitution_Flag);
PARAMETER(PAR.Print_Yes_No_USR);
PARAMETER(PAR.Price_Method_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Print required level totals

// SUPPRESSED PRINT Order Number totals format

CASE;

IF NEW Actual_Shipped_Date;
// SUPPRESSED PRINT Actual Shipped Date totals format

ENDIF;

CASE;

IF NEW Scheduled_Ship_Date;
// SUPPRESSED PRINT Scheduled Ship Date totals format

ENDIF;

// SUPPRESSED PRINT Accounting Company Number totals format

