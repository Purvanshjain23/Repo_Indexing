// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDRYXFR
// ?Date: 14.08.2025 Time: 03:35:55
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?********************************
//?1. Initialize Fields.
DO;

//?Initialize all neither parameters.
DO;

// PAR.Age $ Due - Current - CB = CON.*ZERO
PAR.Age_Due_Current_CB = *ZERO;

// PAR.Age $ Due - Aging 1 - CB = CON.*ZERO
PAR.Age_Due_Aging_1_CB = *ZERO;

// PAR.Age $ Due - Aging 2 - CB = CON.*ZERO
PAR.Age_Due_Aging_2_CB = *ZERO;

// PAR.Age $ Due - Aging 3 - CB = CON.*ZERO
PAR.Age_Due_Aging_3_CB = *ZERO;

// PAR.Age $ Due - Aging 4 - CB = CON.*ZERO
PAR.Age_Due_Aging_4_CB = *ZERO;

// PAR.Age $ Due - Aging 5 - CB = CON.*ZERO
PAR.Age_Due_Aging_5_CB = *ZERO;

// PAR.Age $ Due-Current-W/O CB = CON.*ZERO
PAR.Age_Due_Current_W_O_CB = *ZERO;

// PAR.Age $ Due-Aging 1-W/O CB = CON.*ZERO
PAR.Age_Due_Aging_1_W_O_CB = *ZERO;

// PAR.Age $ Due-Aging 2-W/O CB = CON.*ZERO
PAR.Age_Due_Aging_2_W_O_CB = *ZERO;

// PAR.Age $ Due-Aging 3-W/O CB = CON.*ZERO
PAR.Age_Due_Aging_3_W_O_CB = *ZERO;

// PAR.Age $ Due-Aging 4-W/O CB = CON.*ZERO
PAR.Age_Due_Aging_4_W_O_CB = *ZERO;

// PAR.Age $ Due-Aging 5-W/O CB = CON.*ZERO
PAR.Age_Due_Aging_5_W_O_CB = *ZERO;

// PAR.Date of Last Payment = CON.*ZERO
PAR.Date_of_Last_Payment = *ZERO;

// PAR.Amount of Last Payment = CON.*ZERO
PAR.Amount_of_Last_Payment = *ZERO;

// PAR.Date of Highest A/R Bal. = CON.*ZERO
PAR.Date_of_Highest_A_R_Bal = *ZERO;

// PAR.Amount of Highest A/R Bal = CON.*ZERO
PAR.Amount_of_Highest_A_R_Bal = *ZERO;

// PAR.MTD Invoices Paid = CON.*ZERO
PAR.MTD_Invoices_Paid = *ZERO;

// PAR.YTD Invoices Paid = CON.*ZERO
PAR.YTD_Invoices_Paid = *ZERO;

// PAR.MTD Days Paid = CON.*ZERO
PAR.MTD_Days_Paid = *ZERO;

// PAR.YTD Days Paid = CON.*ZERO
PAR.YTD_Days_Paid = *ZERO;

// PAR.Paid in Full Date = CON.*ZERO
PAR.Paid_in_Full_Date = *ZERO;

// PAR.Days to Pay = CON.*ZERO
PAR.Days_to_Pay = *ZERO;

// PAR.USR Tot. Due W/O CB = CON.*ZERO
PAR.USR_Tot_Due_W_O_CB = *ZERO;

// PAR.USR Number of Payments = CON.*ZERO
PAR.USR_Number_of_Payments = *ZERO;

// PAR.USR Total Due = CON.*ZERO
PAR.USR_Total_Due = *ZERO;

// PAR.Current Month = CON.*ZERO
PAR.Current_Month = *ZERO;

// PAR.Value of Open Orders = CON.*ZERO
PAR.Value_of_Open_Orders = *ZERO;

// PAR.A/R Balance Year = CON.*ZERO
PAR.A_R_Balance_Year = *ZERO;

// PAR.A/R Balance Month = CON.*ZERO
PAR.A_R_Balance_Month = *ZERO;

// PAR.*Job year = CON.*ZERO
PAR.*Job_year = *ZERO;

ENDDO;

//?Initialize all work fields.
DO;

// WRK.Days to Pay = CON.*ZERO
WRK.Days_to_Pay = *ZERO;

// WRK.MTD Invoices Paid = CON.*ZERO
WRK.MTD_Invoices_Paid = *ZERO;

ENDDO;

ENDDO;

//?2. Value of Open Orders.
DO;

//?Calculate the "Value of Open Orders" for the A/R Customer from
//?the PD Order Header file.
//?Update the "A/R Order Value" if not = to "Value of Open Orders".
EXECUTE FUNCTION(RTV -Value of Open Ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1354434;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Value_of_Open_Orders);
{
 //?USER: Initialize routine

 // PAR.Value of Open Orders = CON.*ZERO
 PAR.Value_of_Open_Orders = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Order Types        RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1168350;
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(WRK.Unused_Parm_Text_USR);
 PARAMETER(WRK.Unused_Parm_Status_USR);
 PARAMETER(PAR.Billing_Activity_Type);
 PARAMETER(WRK.Unused_Parm_Status_USR);
 PARAMETER(PAR.Affect_Sales_Doll_Default);
 PARAMETER(WRK.Unused_Parm_Status_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Billing Activity Type is Invoice
 IF PAR.Billing_Activity_Type = '1';

 // AND PAR.Affect Sales Doll Default is yes
 AND PAR.Affect_Sales_Doll_Default = 'Y';

 // AND DB1.Block Order Flag is Firm Order
 AND DB1.Block_Order_Flag = 'F';

 //?12/07/06 PKD PK0040 Retrieve the Accounting Company Number for
 //?             the Order and only accumulate if PAR.Company Number
 //?             is equal to the Accounting Company Number.
 EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Warehouse_Code);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Shipping_Company);
  PARAMETER(PAR.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.Accounting Company EQ PAR.Company Number
 IF LCL.Accounting_Company = PAR.Company_Number;

 // PAR.Value of Open Orders = PAR.Value of Open Orders + DB1.Order Value Total
 PAR.Value_of_Open_Orders = PAR.Value_of_Open_Orders + DB1.Order_Value_Total;

 //?Update the "A/R Order Value" if <> "Order Value Total".
 DO;

 CASE;

 // IF DB1.Order Value Total NE DB1.A/R order Value Total
 IF DB1.Order_Value_Total <> DB1.A_R_order_Value_Total;

 // AND DB1.A/R order Value Total NE WRK.ZERO
 AND DB1.A_R_order_Value_Total <> WRK.ZERO;

 EXECUTE FUNCTION(CHG A/R Order Value    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1408783;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Value_Total);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

 ENDIF;

 ENDDO;

 ENDIF;

 ENDIF;

}


ENDDO;

//?3. Age Receivables Due Buckets for A/R customer.
DO;

EXECUTE FUNCTION(RTV CLC Age Inv - Cust RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1356622;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Age_Due_Current_CB);
PARAMETER(PAR.Age_Due_Aging_1_CB);
PARAMETER(PAR.Age_Due_Aging_2_CB);
PARAMETER(PAR.Age_Due_Aging_3_CB);
PARAMETER(PAR.Age_Due_Aging_4_CB);
PARAMETER(PAR.Age_Due_Aging_5_CB);
PARAMETER(PAR.Age_Due_Current_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_1_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_2_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_3_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_4_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_5_W_O_CB);
{
 //?USER: Initialize routine

 //?Initialize Neither Parameters.
 DO;

 // PAR.USR Age Current = CND.equal to zero
 PAR.USR_Age_Current = *ZERO;

 // PAR.USR Age Value 1 = CND.equal to zero
 PAR.USR_Age_Value_1 = *ZERO;

 // PAR.USR Age Value 2 = CND.equal to zero
 PAR.USR_Age_Value_2 = *ZERO;

 // PAR.USR Age Value 3 = CND.equal to zero
 PAR.USR_Age_Value_3 = *ZERO;

 // PAR.USR Age Value 4 = CND.equal to zero
 PAR.USR_Age_Value_4 = *ZERO;

 // PAR.USR Age Value 5 = CND.equal to zero
 PAR.USR_Age_Value_5 = *ZERO;

 // PAR.USR Age Current A = CND.equal to zero
 PAR.USR_Age_Current_A = *ZERO;

 // PAR.USR Age Value 1 A = CND.equal to zero
 PAR.USR_Age_Value_1_A = *ZERO;

 // PAR.USR Age Value 2 A = CND.equal to zero
 PAR.USR_Age_Value_2_A = *ZERO;

 // PAR.USR Age Value 3 A = CND.equal to zero
 PAR.USR_Age_Value_3_A = *ZERO;

 // PAR.USR Age Value 4 A = CND.equal to zero
 PAR.USR_Age_Value_4_A = *ZERO;

 // PAR.USR Age Value 5 A = CND.equal to zero
 PAR.USR_Age_Value_5_A = *ZERO;

 // PAR.USR Age Current B = CND.equal to zero
 PAR.USR_Age_Current_B = *ZERO;

 // PAR.USR Age Value 1 B = CND.equal to zero
 PAR.USR_Age_Value_1_B = *ZERO;

 // PAR.USR Age Value 2 B = CND.equal to zero
 PAR.USR_Age_Value_2_B = *ZERO;

 // PAR.USR Age Value 3 B = CND.equal to zero
 PAR.USR_Age_Value_3_B = *ZERO;

 // PAR.USR Age Value 4 B = CND.equal to zero
 PAR.USR_Age_Value_4_B = *ZERO;

 // PAR.USR Age Value 5 B = CND.equal to zero
 PAR.USR_Age_Value_5_B = *ZERO;

 // PAR.USR Total Credit Amount = CND.Zero
 PAR.USR_Total_Credit_Amount = *ZERO;

 ENDDO;

 //?Retrieve Aging Ranges.
 DO;

 //?** Retrieve aging ranges for the default record   12/01/06 LJB
 EXECUTE FUNCTION(RTV Default Aging Code RT) TYPE(RTVOBJ) FILE(PMADCPP)          AC1801040;
 PARAMETER(WRK.A_R_Aging_Code);
 PARAMETER(PAR.A_R_Aging_Days_1);
 PARAMETER(PAR.A_R_Aging_Days_2);
 PARAMETER(PAR.A_R_Aging_Days_3);
 PARAMETER(PAR.A_R_Aging_Days_4);
 PARAMETER(WRK.Age_by_Trans_or_Due_Date);
 PARAMETER(WRK.Default_Y_N);
 PARAMETER(WRK.Record_Status);
 {
  //?USER: Initialize routine

  // PAR.A/R Aging Code = CND.Not Entered
  PAR.A_R_Aging_Code = *BLANK;

  //?USER: Process Data record

  // PAR.A/R Aging Code = DB1.A/R Aging Code
  PAR.A_R_Aging_Code = DB1.A_R_Aging_Code;

  CASE;

  // IF DB1.Default Y/N is yes
  IF DB1.Default_Y_N = 'Y';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 ENDDO;

 //?***** Change Log and Comments
 DO;

 //?*****
 //?** 12/01/2006 LJB PK0039
 //?** Aging ranges are now stored in the A/R Aging Control file
 //?** Retrieve aging ranges for the default record
 //?*****
 ENDDO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Remaining Balance Due is not equal to zeros
 IF DB1.Remaining_Balance_Due <> *ZERO;

 //?Sum A/R Cust Invoices with a Remaining Bal.(IN,DM)(CB)(CM,OA)
 DO;

 // PAR.Days Past Due  USR = JOB.*Job date - DB1.Due Date *DAYS
 PAR.Days_Past_Due_USR = DURATION(JOB.*Job_date DB1.Due_Date 'DY' 1111111 'NONE' 'N' 1);

 CASE;

 // IF PAR.Days Past Due  USR is <= Zero
 IF PAR.Days_Past_Due_USR <= *ZERO;

 //?Current.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Current);
 PARAMETER(PAR.USR_Age_Current_A);
 PARAMETER(PAR.USR_Age_Current_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 1
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_1;

 //?Past Due Period 1.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_1);
 PARAMETER(PAR.USR_Age_Value_1_A);
 PARAMETER(PAR.USR_Age_Value_1_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 2
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_2;

 //?Past Due Period 2.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_2);
 PARAMETER(PAR.USR_Age_Value_2_A);
 PARAMETER(PAR.USR_Age_Value_2_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 3
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_3;

 //?Past Due Period 3.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_3);
 PARAMETER(PAR.USR_Age_Value_3_A);
 PARAMETER(PAR.USR_Age_Value_3_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF PAR.Days Past Due  USR LE PAR.A/R Aging Days - 4
 IF PAR.Days_Past_Due_USR <= PAR.A_R_Aging_Days_4;

 //?Past Due Period 4.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_4);
 PARAMETER(PAR.USR_Age_Value_4_A);
 PARAMETER(PAR.USR_Age_Value_4_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Past Due Period 5.
 DO;

 EXECUTE FUNCTION(CLC Aging Bucket       IF) TYPE(EXCINTFUN)                     AC1537845;
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Remaining_Balance_Due);
 PARAMETER(PAR.USR_Age_Value_5);
 PARAMETER(PAR.USR_Age_Value_5_A);
 PARAMETER(PAR.USR_Age_Value_5_B);
 PARAMETER(PAR.USR_Total_Credit_Amount);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Invoice Suffix is Charge Backs and Rebills
  IF PAR.Invoice_Suffix = 'CB'/'RB';

  //?Age Chargebacks and Rebills.
  DO;

  // PAR.Aging - CB    Amt USR = PAR.Aging - CB    Amt USR + PAR.Remaining Balance Due
  PAR.Aging_CB_Amt_USR = PAR.Aging_CB_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Invoices
  IF PAR.Invoice_Suffix = 'IN';

  // OR PAR.Invoice Suffix is Debit Memos
  OR PAR.Invoice_Suffix = 'DM';

  //?Age Invoices and Debit Memos.
  DO;

  // PAR.Aging - IN/DM Amt USR = PAR.Aging - IN/DM Amt USR + PAR.Remaining Balance Du
  PAR.Aging_IN_DM_Amt_USR = PAR.Aging_IN_DM_Amt_USR + PAR.Remaining_Balance_Due;

  // PAR.Aging - IN/DM/CB Amt USR = PAR.Aging - IN/DM/CB Amt USR + PAR.Remaining Bala
  PAR.Aging_IN_DM_CB_Amt_USR = PAR.Aging_IN_DM_CB_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  // IF PAR.Invoice Suffix is Credit Memos
  IF PAR.Invoice_Suffix = 'CM';

  // OR PAR.Invoice Suffix is On Account Cash
  OR PAR.Invoice_Suffix = 'OA';

  //?Accumulate Credit to Apply.
  DO;

  // PAR.Aging - CM/OA Amt USR = PAR.Aging - CM/OA Amt USR + PAR.Remaining Balance Du
  PAR.Aging_CM_OA_Amt_USR = PAR.Aging_CM_OA_Amt_USR + PAR.Remaining_Balance_Due;

  ENDDO;

  ENDIF;

 }

 ENDDO;

 ENDIF;

 ENDDO;

 ENDIF;

 //?USER: Exit processing

 //?Apply Credits.
 DO;

 //?*** Save total credit amount for later. ***
 // PAR.Save Total Credit Amt USR = PAR.USR Total Credit Amount
 PAR.Save_Total_Credit_Amt_USR = PAR.USR_Total_Credit_Amount;

 //?*** Apply credits to oldest dollars first. (without CB) ***
 //?Start by Applying Credit to Bucket 5.
 CASE;

 // IF PAR.USR Age Value 5 GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_5 >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 5 = PAR.USR Age Value 5 - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_5 = PAR.USR_Age_Value_5 - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Start by Applying Credit to Bucket 5.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 5
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_5;

 // PAR.USR Age Value 5 = CON.*ZERO
 PAR.USR_Age_Value_5 = *ZERO;

 //?Apply Remaining Credit to Bucket 4.
 CASE;

 // IF PAR.USR Age Value 4 GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_4 >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 4 = PAR.USR Age Value 4 - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_4 = PAR.USR_Age_Value_4 - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 4.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 4
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_4;

 // PAR.USR Age Value 4 = CON.*ZERO
 PAR.USR_Age_Value_4 = *ZERO;

 //?Apply Remaining Credit to Bucket 3.
 CASE;

 // IF PAR.USR Age Value 3 GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_3 >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 3 = PAR.USR Age Value 3 - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_3 = PAR.USR_Age_Value_3 - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 3.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 3
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_3;

 // PAR.USR Age Value 3 = CON.*ZERO
 PAR.USR_Age_Value_3 = *ZERO;

 //?Apply Remaining Credit to Bucket 2.
 CASE;

 // IF PAR.USR Age Value 2 GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_2 >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 2 = PAR.USR Age Value 2 - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_2 = PAR.USR_Age_Value_2 - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 2.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 2
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_2;

 // PAR.USR Age Value 2 = CON.*ZERO
 PAR.USR_Age_Value_2 = *ZERO;

 //?Apply Remaining Credit to Bucket 1.
 CASE;

 // IF PAR.USR Age Value 1 GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_1 >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 1 = PAR.USR Age Value 1 - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_1 = PAR.USR_Age_Value_1 - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 1.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 1
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_1;

 // PAR.USR Age Value 1 = CON.*ZERO
 PAR.USR_Age_Value_1 = *ZERO;

 // PAR.USR Age Current = PAR.USR Age Current - PAR.USR Total Credit Amount
 PAR.USR_Age_Current = PAR.USR_Age_Current - PAR.USR_Total_Credit_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?*** Reset total credit amount. ***
 // PAR.USR Total Credit Amount = PAR.Save Total Credit Amt USR
 PAR.USR_Total_Credit_Amount = PAR.Save_Total_Credit_Amt_USR;

 //?*** Apply credits to oldest dollars first. (with CB) ***
 //?Start by Applying Credit to Bucket 5.
 CASE;

 // IF PAR.USR Age Value 5 B GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_5_B >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 5 B = PAR.USR Age Value 5 B - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_5_B = PAR.USR_Age_Value_5_B - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Start by Applying Credit to Bucket 5.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 5
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_5_B;

 // PAR.USR Age Value 5 B = CON.*ZERO
 PAR.USR_Age_Value_5_B = *ZERO;

 //?Apply Remaining Credit to Bucket 4.
 CASE;

 // IF PAR.USR Age Value 4 B GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_4_B >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 4 B = PAR.USR Age Value 4 B - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_4_B = PAR.USR_Age_Value_4_B - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 4.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 4
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_4_B;

 // PAR.USR Age Value 4 B = CON.*ZERO
 PAR.USR_Age_Value_4_B = *ZERO;

 //?Apply Remaining Credit to Bucket 3.
 CASE;

 // IF PAR.USR Age Value 3 B GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_3_B >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 3 B = PAR.USR Age Value 3 B - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_3_B = PAR.USR_Age_Value_3_B - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 3.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 3
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_3_B;

 // PAR.USR Age Value 3 B = CON.*ZERO
 PAR.USR_Age_Value_3_B = *ZERO;

 //?Apply Remaining Credit to Bucket 2.
 CASE;

 // IF PAR.USR Age Value 2 B GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_2_B >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 2 B = PAR.USR Age Value 2 B - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_2_B = PAR.USR_Age_Value_2_B - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 2.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 2
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_2_B;

 // PAR.USR Age Value 2 B = CON.*ZERO
 PAR.USR_Age_Value_2_B = *ZERO;

 //?Apply Remaining Credit to Bucket 1.
 CASE;

 // IF PAR.USR Age Value 1 B GE PAR.USR Total Credit Amount
 IF PAR.USR_Age_Value_1_B >= PAR.USR_Total_Credit_Amount;

 // PAR.USR Age Value 1 B = PAR.USR Age Value 1 B - PAR.USR Total Credit Amount
 PAR.USR_Age_Value_1_B = PAR.USR_Age_Value_1_B - PAR.USR_Total_Credit_Amount;

 // PAR.USR Total Credit Amount = CON.*ZERO
 PAR.USR_Total_Credit_Amount = *ZERO;

 //?Apply Remaining Credit to Bucket 1.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Total Credit Amount = PAR.USR Total Credit Amount - PAR.USR Age Value 1
 PAR.USR_Total_Credit_Amount = PAR.USR_Total_Credit_Amount - PAR.USR_Age_Value_1_B;

 // PAR.USR Age Value 1 B = CON.*ZERO
 PAR.USR_Age_Value_1_B = *ZERO;

 // PAR.USR Age Current B = PAR.USR Age Current B - PAR.USR Total Credit Amount
 PAR.USR_Age_Current_B = PAR.USR_Age_Current_B - PAR.USR_Total_Credit_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDDO;

 //?Load Output Parameters.
 DO;

 // PAR.Age $ Due - Current - CB = PAR.USR Age Current B
 PAR.Age_Due_Current_CB = PAR.USR_Age_Current_B;

 // PAR.Age $ Due - Aging 1 - CB = PAR.USR Age Value 1 B
 PAR.Age_Due_Aging_1_CB = PAR.USR_Age_Value_1_B;

 // PAR.Age $ Due - Aging 2 - CB = PAR.USR Age Value 2 B
 PAR.Age_Due_Aging_2_CB = PAR.USR_Age_Value_2_B;

 // PAR.Age $ Due - Aging 3 - CB = PAR.USR Age Value 3 B
 PAR.Age_Due_Aging_3_CB = PAR.USR_Age_Value_3_B;

 // PAR.Age $ Due - Aging 4 - CB = PAR.USR Age Value 4 B
 PAR.Age_Due_Aging_4_CB = PAR.USR_Age_Value_4_B;

 // PAR.Age $ Due - Aging 5 - CB = PAR.USR Age Value 5 B
 PAR.Age_Due_Aging_5_CB = PAR.USR_Age_Value_5_B;

 // PAR.Age $ Due-Current-W/O CB = PAR.USR Age Current
 PAR.Age_Due_Current_W_O_CB = PAR.USR_Age_Current;

 // PAR.Age $ Due-Aging 1-W/O CB = PAR.USR Age Value 1
 PAR.Age_Due_Aging_1_W_O_CB = PAR.USR_Age_Value_1;

 // PAR.Age $ Due-Aging 2-W/O CB = PAR.USR Age Value 2
 PAR.Age_Due_Aging_2_W_O_CB = PAR.USR_Age_Value_2;

 // PAR.Age $ Due-Aging 3-W/O CB = PAR.USR Age Value 3
 PAR.Age_Due_Aging_3_W_O_CB = PAR.USR_Age_Value_3;

 // PAR.Age $ Due-Aging 4-W/O CB = PAR.USR Age Value 4
 PAR.Age_Due_Aging_4_W_O_CB = PAR.USR_Age_Value_4;

 // PAR.Age $ Due-Aging 5-W/O CB = PAR.USR Age Value 5
 PAR.Age_Due_Aging_5_W_O_CB = PAR.USR_Age_Value_5;

 ENDDO;

}


ENDDO;

//?4. Highest A/R Balance & Date. (w/o CB)
DO;

// Compute OLD Total Due
PAR.USR_Total_Due = ( ( ( ( PAR.A_R_Summ_Curr_W_O_USR + PAR.A_R_Summ_Age1_W_O_USR )                +
+ PAR.A_R_Summ_Age2_W_O_USR ) + PAR.A_R_Summ_Age3_W_O_USR ) + PAR.A_R_Summ_Age4_W_O_USR )         +
+ PAR.A_R_Summ_Age5_W_O_USR;

// Compute NEW Total Due
PAR.USR_Tot_Due_W_O_CB = ( ( ( ( PAR.Age_Due_Current_W_O_CB + PAR.Age_Due_Aging_1_W_O_CB )         +
+ PAR.Age_Due_Aging_2_W_O_CB ) + PAR.Age_Due_Aging_3_W_O_CB )                                     +
+ PAR.Age_Due_Aging_4_W_O_CB ) + PAR.Age_Due_Aging_5_W_O_CB;

CASE;

// IF PAR.USR Tot. Due W/O CB GT PAR.USR Total Due
IF PAR.USR_Tot_Due_W_O_CB > PAR.USR_Total_Due;

//?Update monthly balance & determine highest 12 month balance.
DO;

//?Create or Update Monthly Balance record.
// PAR.A/R Balance Year = JOB.*Job date *YEAR
PAR.A_R_Balance_Year = DATEDTLS(JOB.*Job_date 'YR' 1111111 'NONE' 'N' 1);

// PAR.A/R Balance Month = JOB.*Job month
PAR.A_R_Balance_Month = JOB.*Job_month;

EXECUTE FUNCTION(CHG or CRT A/R Balance CH) TYPE(CHGOBJ) FILE(PDLDCPP)          AC1450141;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.A_R_Balance_Year);
PARAMETER(PAR.A_R_Balance_Month);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Days_to_Pay);
PARAMETER(*ZERO);
PARAMETER(WRK.SSI_Download_Flag);
PARAMETER(WRK.unused_status_2);
PARAMETER(PAR.USR_Tot_Due_W_O_CB);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT A/R Balance File   CR) TYPE(CRTOBJ) FILE(PDLDCPP)          AC1450075;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.A_R_Balance_Year);
 PARAMETER(PAR.A_R_Balance_Month);
 PARAMETER(PAR.USR_Total_Bal_Due_Cust);
 PARAMETER(JOB.*Job_date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Bal_Nbr_of_Orders);
 PARAMETER(PAR.Bal_Nbr_of_Credits);
 PARAMETER(PAR.Bal_Nbr_of_Payments);
 PARAMETER(PAR.Bal_Nbr_of_Invoices);
 PARAMETER(PAR.Bal_Nbr_of_Invoices_Paid);
 PARAMETER(PAR.Bal_Avg_Days_to_Pay);
 PARAMETER(PAR.Days_to_Pay);
 PARAMETER(PAR.Override_Total_Load_Miles);
 PARAMETER(PAR.SSI_Download_Flag);
 PARAMETER(PAR.unused_status_2);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 CASE;

 // IF PAR.USR Total Bal Due - Cust GT DB1.Amount of Highest A/R Bal
 IF PAR.USR_Total_Bal_Due_Cust > DB1.Amount_of_Highest_A_R_Bal;

 // DB1.Amount of Highest A/R Bal = PAR.USR Total Bal Due - Cust
 DB1.Amount_of_Highest_A_R_Bal = PAR.USR_Total_Bal_Due_Cust;

 // DB1.Date of Highest A/R Bal. = JOB.*Job date
 DB1.Date_of_Highest_A_R_Bal = JOB.*Job_date;

 // PGM.*Record Data Changed = CND.*YES
 PGM.*Record_Data_Changed = 'Y';

 ENDIF;

}


//?Determine highest balance in last 12 months.
// PAR.A/R Balance Year = PAR.A/R Balance Year - CON.1
PAR.A_R_Balance_Year = PAR.A_R_Balance_Year - 1;

// Call program CLC 12 mo. High Bal    XF.
CALL PROGRAM(CLC 12 mo. High Bal    XF) ('PDV0XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.A_R_Balance_Year);
PARAMETER(PAR.A_R_Balance_Month);
PARAMETER(PAR.Amount_of_Highest_A_R_Bal);
PARAMETER(PAR.Date_of_Highest_A_R_Bal);

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?No change to highest balance.
DO;

// PAR.Amount of Highest A/R Bal = PAR.A/R Summ-Amt High A/R USR
PAR.Amount_of_Highest_A_R_Bal = PAR.A_R_Summ_Amt_High_A_R_USR;

// PAR.Date of Highest A/R Bal. = PAR.A/R Summ-Dte High A/R USR
PAR.Date_of_Highest_A_R_Bal = PAR.A_R_Summ_Dte_High_A_R_USR;

ENDDO;

ENDIF;

ENDDO;

//?5. Last Payment Amount & Date.
DO;

// PAR.Date of Last Payment = CON.9999999
PAR.Date_of_Last_Payment = 9999999;

EXECUTE FUNCTION(RTV Last Payment Date  RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1357624;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Date_of_Last_Payment);
PARAMETER(PAR.Amount_of_Last_Payment);
{
 //?USER: Initialize routine

 // PAR.Amount of Last Payment = CND.equal to zero
 PAR.Amount_of_Last_Payment = *ZERO;

 //?USER: Processing if Data record not found

 // PAR.Last Payment Date = CON.*ZERO
 PAR.Last_Payment_Date = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Invoice Suffix is Invoice or Debit Memo
 IF DB1.Invoice_Suffix = 'DM'/'IN';

 CASE;

 // IF DB1.Last Payment Date NE WRK.ZERO
 IF DB1.Last_Payment_Date <> WRK.ZERO;

 // PAR.Last Payment Date = DB1.Last Payment Date
 PAR.Last_Payment_Date = DB1.Last_Payment_Date;

 EXECUTE FUNCTION(RTV Last Paid Invoices RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1363874;
 PARAMETER(PAR.Company_Number);
 PARAMETER(DB1.Bank_Code);
 PARAMETER(DB1.Last_Payment_Date);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(PAR.Amount_of_Last_Payment);
 {
  //?USER: Initialize routine

  // PAR.USR Cash Appl Amount = CND.Zero
  PAR.USR_Cash_Appl_Amount = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Bank Code EQ DB1.Bank Code
  IF PAR.Bank_Code = DB1.Bank_Code;

  // AND PAR.Last Payment Date EQ DB1.Last Payment Date
  AND PAR.Last_Payment_Date = DB1.Last_Payment_Date;

  // AND PAR.A/R Customer Number EQ DB1.A/R Customer Number
  AND PAR.AR_Customer_Number = DB1.AR_Customer_Number;

  EXECUTE FUNCTION(RTV Last Payment Amt   RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1363525;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Transaction_Amount);
  PARAMETER(PAR.Last_Payment_Date);
  PARAMETER(PAR.Bank_Code);
  {
   //?USER: Initialize routine

   // PAR.Transaction Amount = CON.*ZERO
   PAR.Transaction_Amount = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF PAR.Payment/Deposit Date EQ DB1.Payment/Deposit Date
   IF PAR.Payment_Deposit_Date = DB1.Payment_Deposit_Date;

   // AND PAR.Bank Code EQ DB1.Bank Code
   AND PAR.Bank_Code = DB1.Bank_Code;

   // AND PAR.Invoice Number EQ DB1.Invoice Number
   AND PAR.Invoice_Number = DB1.Invoice_Number;

   CASE;

   // IF DB1.Cash/Adj is Cash Adjustment
   IF DB1.Cash_Adj = 'CSH';

   // PAR.Transaction Amount = PAR.Transaction Amount + DB1.Transaction Amount
   PAR.Transaction_Amount = PAR.Transaction_Amount + DB1.Transaction_Amount;

   ENDIF;

   ENDIF;

  }

  // PAR.USR Cash Appl Amount = PAR.Transaction Amount + PAR.USR Cash Appl Amount
  PAR.USR_Cash_Appl_Amount = PAR.Transaction_Amount + PAR.USR_Cash_Appl_Amount;

  ENDIF;

 }

 QUIT;

 ENDIF;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.Last Payment Date is High Values
 IF PAR.Last_Payment_Date = 9999999;

 // PAR.Last Payment Date = CON.*ZERO
 PAR.Last_Payment_Date = *ZERO;

 ENDIF;

}


ENDDO;

//?6. (MTD/YTD) Days to Pay & Invoices Paid. & A/R Bal new fields 11/18/02
DO;

//?Set Current Month Field.
CASE;

// IF PAR.A/R Summ-Curr Month   USR is Equal to Zero
IF PAR.A_R_Summ_Curr_Month_USR = *ZERO;

// PAR.Current Month = JOB.*Job month
PAR.Current_Month = JOB.*Job_month;

//?Set Current Month Field.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Current Month = PAR.A/R Summ-Curr Month   USR
PAR.Current_Month = PAR.A_R_Summ_Curr_Month_USR;

ENDIF;

CASE;

// IF PAR.Current Month EQ JOB.*Job month
IF PAR.Current_Month = JOB.*Job_month;

//?Current Month from A/R Summary = Job Month.
DO;

// PAR.Days to Pay = CON.*ZERO
PAR.Days_to_Pay = *ZERO;

// PAR.MTD Invoices Paid = CON.*ZERO
PAR.MTD_Invoices_Paid = *ZERO;

// WRK.MTD Invoices Paid = CON.*ZERO
WRK.MTD_Invoices_Paid = *ZERO;

// PAR.YTD Invoices Paid = CON.*ZERO
PAR.YTD_Invoices_Paid = *ZERO;

//?1st day of current month.
DO;

// 1st day of current month
PAR.Paid_in_Full_Date = ( ( JOB.*Job_year * 10000 ) + ( PAR.Current_Month * 100 ) ) + 01;

//?Set Century.
CASE;

// IF JOB.*Job year is LT 40
IF JOB.*Job_year < 40;

// PAR.Paid in Full Date = PAR.Paid in Full Date + CON.1000000
PAR.Paid_in_Full_Date = PAR.Paid_in_Full_Date + 1000000;

ENDIF;

ENDDO;

EXECUTE FUNCTION(RTV Days Paid MTD      RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1357656;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Paid_in_Full_Date);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Days_to_Pay);
PARAMETER(JOB.*Job_month);
PARAMETER(JOB.*Job_year);
PARAMETER(PAR.MTD_Invoices_Paid);
{
 //?USER: Initialize routine

 // PAR.Days to Pay = CND.equal to zero
 PAR.Days_to_Pay = *ZERO;

 // PAR.MTD Invoices Paid = CND.Equal zero
 PAR.MTD_Invoices_Paid = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Remaining Balance Due is equal to zero
 IF DB1.Remaining_Balance_Due = *ZERO;

 // AND DB1.Invoice Suffix is Invoice or Debit Memo
 AND DB1.Invoice_Suffix = 'DM'/'IN';

 // PAR.USR Job Year = DB1.Paid in Full Date *YEAR
 PAR.USR_Job_Year = DATEDTLS(DB1.Paid_in_Full_Date 'YR' 1111111 'NONE' 'N' 1);

 // PAR.USR Job Month = DB1.Paid in Full Date *MONTH
 PAR.USR_Job_Month = DATEDTLS(DB1.Paid_in_Full_Date 'MO' 1111111 'NONE' 'N' 1);

 CASE;

 // IF PAR.USR Job Year EQ PAR.*Job year
 IF PAR.USR_Job_Year = PAR.*Job_year;

 // AND PAR.USR Job Month EQ PAR.USR Current Month
 AND PAR.USR_Job_Month = PAR.USR_Current_Month;

 // PAR.Days to Pay = DB1.Days to Pay + PAR.Days to Pay
 PAR.Days_to_Pay = DB1.Days_to_Pay + PAR.Days_to_Pay;

 // PAR.MTD Invoices Paid = PAR.MTD Invoices Paid + CON.1
 PAR.MTD_Invoices_Paid = PAR.MTD_Invoices_Paid + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

 ENDIF;

}


//?Invoices Paid Fields.
CASE;

// IF PAR.MTD Invoices Paid GT PAR.A/R Summ-MTD Inv Paid USR
IF PAR.MTD_Invoices_Paid > PAR.A_R_Summ_MTD_Inv_Paid_USR;

// WRK.MTD Invoices Paid = PAR.MTD Invoices Paid - PAR.A/R Summ-MTD Inv Paid USR
WRK.MTD_Invoices_Paid = PAR.MTD_Invoices_Paid - PAR.A_R_Summ_MTD_Inv_Paid_USR;

// PAR.YTD Invoices Paid = WRK.MTD Invoices Paid + PAR.A/R Summ-YTD Inv Paid USR
PAR.YTD_Invoices_Paid = WRK.MTD_Invoices_Paid + PAR.A_R_Summ_YTD_Inv_Paid_USR;

//?Invoices Paid Fields.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.MTD Invoices Paid = PAR.A/R Summ-MTD Inv Paid USR
PAR.MTD_Invoices_Paid = PAR.A_R_Summ_MTD_Inv_Paid_USR;

// PAR.YTD Invoices Paid = PAR.A/R Summ-YTD Inv Paid USR
PAR.YTD_Invoices_Paid = PAR.A_R_Summ_YTD_Inv_Paid_USR;

ENDIF;

//?Days Paid Fields.
CASE;

// IF PAR.Days to Pay GT PAR.A/R Summ-MTD Days Pd  USR
IF PAR.Days_to_Pay > PAR.A_R_Summ_MTD_Days_Pd_USR;

// WRK.Days to Pay = PAR.Days to Pay - PAR.A/R Summ-MTD Days Pd  USR
WRK.Days_to_Pay = PAR.Days_to_Pay - PAR.A_R_Summ_MTD_Days_Pd_USR;

// PAR.YTD Days Paid = PAR.A/R Summ-YTD Days Pd  USR + WRK.Days to Pay
PAR.YTD_Days_Paid = PAR.A_R_Summ_YTD_Days_Pd_USR + WRK.Days_to_Pay;

// PAR.MTD Days Paid = PAR.Days to Pay
PAR.MTD_Days_Paid = PAR.Days_to_Pay;

//?Days Paid Fields.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.YTD Days Paid = PAR.A/R Summ-YTD Days Pd  USR
PAR.YTD_Days_Paid = PAR.A_R_Summ_YTD_Days_Pd_USR;

// PAR.MTD Days Paid = PAR.A/R Summ-MTD Days Pd  USR
PAR.MTD_Days_Paid = PAR.A_R_Summ_MTD_Days_Pd_USR;

ENDIF;

// PAR.Current Month = PAR.A/R Summ-Curr Month   USR
PAR.Current_Month = PAR.A_R_Summ_Curr_Month_USR;

ENDDO;

ENDIF;

//?11/15/02 Upd A/R Balance with new fields at EOM
//?02/10/05 Dont back out old month 1 year ago
CASE;

// IF PAR.Current Month NE JOB.*Job month
IF PAR.Current_Month <> JOB.*Job_month;

//?Current Month from A/R Summary not= Job Month.
DO;

// PAR.Days to Pay = CON.*ZERO
PAR.Days_to_Pay = *ZERO;

// PAR.MTD Invoices Paid = CON.*ZERO
PAR.MTD_Invoices_Paid = *ZERO;

// PAR.YTD Invoices Paid = CON.*ZERO
PAR.YTD_Invoices_Paid = *ZERO;

// PAR.YTD Days Paid = PAR.A/R Summ-YTD Days Pd  USR
PAR.YTD_Days_Paid = PAR.A_R_Summ_YTD_Days_Pd_USR;

//?Process old month   & update A/R Balance new fields 11/15/02
DO;

//?** Days to Pay Usr fields size changed from 3.0 to 5.0     LJB
//?Set up 1st day of old month
CASE;

// IF PAR.A/R Summ-Curr Month   USR is December
IF PAR.A_R_Summ_Curr_Month_USR = 12;

//?1st day of current month. (minus 1 year)
DO;

// 1st day of current month
PAR.Paid_in_Full_Date = ( ( JOB.*Job_year * 10000 ) + ( PAR.A_R_Summ_Curr_Month_USR                +
* 100 ) ) + 01;

//?Set Century.
CASE;

// IF JOB.*Job year is LT 40
IF JOB.*Job_year < 40;

// PAR.Paid in Full Date = PAR.Paid in Full Date + CON.1000000
PAR.Paid_in_Full_Date = PAR.Paid_in_Full_Date + 1000000;

ENDIF;

// PAR.Paid in Full Date = PAR.Paid in Full Date + CON.-1 *YEARS
PAR.Paid_in_Full_Date = DATEINCR(PAR.Paid_in_Full_Date '-1' 'YR' 1111111 'NONE' 'N' 1);

// PAR.*Job year = PAR.Paid in Full Date *YEAR
PAR.*Job_year = DATEDTLS(PAR.Paid_in_Full_Date 'YR' 1111111 'NONE' 'N' 1);

ENDDO;

//?Set up 1st day of old month
// IF *OTHERWISE
IF *OTHERWISE;

//?1st day of current month.
DO;

// 1st day of current month
PAR.Paid_in_Full_Date = ( ( JOB.*Job_year * 10000 ) + ( PAR.A_R_Summ_Curr_Month_USR                +
* 100 ) ) + 01;

//?Set Century.
CASE;

// IF JOB.*Job year is LT 40
IF JOB.*Job_year < 40;

// PAR.Paid in Full Date = PAR.Paid in Full Date + CON.1000000
PAR.Paid_in_Full_Date = PAR.Paid_in_Full_Date + 1000000;

ENDIF;

// PAR.*Job year = PAR.Paid in Full Date *YEAR
PAR.*Job_year = DATEDTLS(PAR.Paid_in_Full_Date 'YR' 1111111 'NONE' 'N' 1);

ENDDO;

ENDIF;

EXECUTE FUNCTION(RTV Days Paid MTD      RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1357656;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Paid_in_Full_Date);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Days_to_Pay);
PARAMETER(PAR.A_R_Summ_Curr_Month_USR);
PARAMETER(PAR.*Job_year);
PARAMETER(PAR.MTD_Invoices_Paid);
{
 //?USER: Initialize routine

 // PAR.Days to Pay = CND.equal to zero
 PAR.Days_to_Pay = *ZERO;

 // PAR.MTD Invoices Paid = CND.Equal zero
 PAR.MTD_Invoices_Paid = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Remaining Balance Due is equal to zero
 IF DB1.Remaining_Balance_Due = *ZERO;

 // AND DB1.Invoice Suffix is Invoice or Debit Memo
 AND DB1.Invoice_Suffix = 'DM'/'IN';

 // PAR.USR Job Year = DB1.Paid in Full Date *YEAR
 PAR.USR_Job_Year = DATEDTLS(DB1.Paid_in_Full_Date 'YR' 1111111 'NONE' 'N' 1);

 // PAR.USR Job Month = DB1.Paid in Full Date *MONTH
 PAR.USR_Job_Month = DATEDTLS(DB1.Paid_in_Full_Date 'MO' 1111111 'NONE' 'N' 1);

 CASE;

 // IF PAR.USR Job Year EQ PAR.*Job year
 IF PAR.USR_Job_Year = PAR.*Job_year;

 // AND PAR.USR Job Month EQ PAR.USR Current Month
 AND PAR.USR_Job_Month = PAR.USR_Current_Month;

 // PAR.Days to Pay = DB1.Days to Pay + PAR.Days to Pay
 PAR.Days_to_Pay = DB1.Days_to_Pay + PAR.Days_to_Pay;

 // PAR.MTD Invoices Paid = PAR.MTD Invoices Paid + CON.1
 PAR.MTD_Invoices_Paid = PAR.MTD_Invoices_Paid + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

 ENDIF;

}


// WRK.Days to Pay 1 USR = PAR.Days to Pay
WRK.Days_to_Pay_1_USR = PAR.Days_to_Pay;

// WRK.Count USR = PAR.MTD Invoices Paid
WRK.Count_USR = PAR.MTD_Invoices_Paid;

//?Days to Pay.
CASE;

// IF PAR.Days to Pay GT PAR.A/R Summ-MTD Days Pd  USR
IF PAR.Days_to_Pay > PAR.A_R_Summ_MTD_Days_Pd_USR;

// WRK.Days to Pay = PAR.Days to Pay - PAR.A/R Summ-MTD Days Pd  USR
WRK.Days_to_Pay = PAR.Days_to_Pay - PAR.A_R_Summ_MTD_Days_Pd_USR;

// PAR.YTD Days Paid = PAR.YTD Days Paid + WRK.Days to Pay
PAR.YTD_Days_Paid = PAR.YTD_Days_Paid + WRK.Days_to_Pay;

// PAR.MTD Days Paid = CND.equal to zero
PAR.MTD_Days_Paid = *ZERO;

//?Days to Pay.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.MTD Days Paid = PAR.A/R Summ-MTD Days Pd  USR
PAR.MTD_Days_Paid = PAR.A_R_Summ_MTD_Days_Pd_USR;

// PAR.YTD Days Paid = PAR.A/R Summ-YTD Days Pd  USR
PAR.YTD_Days_Paid = PAR.A_R_Summ_YTD_Days_Pd_USR;

ENDIF;

//?MTD and YTD Invoices Paid
CASE;

// IF PAR.MTD Invoices Paid GT PAR.A/R Summ-MTD Inv Paid USR
IF PAR.MTD_Invoices_Paid > PAR.A_R_Summ_MTD_Inv_Paid_USR;

// WRK.MTD Invoices Paid = PAR.MTD Invoices Paid - PAR.A/R Summ-MTD Inv Paid USR
WRK.MTD_Invoices_Paid = PAR.MTD_Invoices_Paid - PAR.A_R_Summ_MTD_Inv_Paid_USR;

// PAR.YTD Invoices Paid = WRK.MTD Invoices Paid + PAR.A/R Summ-YTD Inv Paid USR
PAR.YTD_Invoices_Paid = WRK.MTD_Invoices_Paid + PAR.A_R_Summ_YTD_Inv_Paid_USR;

//?MTD and YTD Invoices Paid
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.MTD Invoices Paid = PAR.A/R Summ-MTD Inv Paid USR
PAR.MTD_Invoices_Paid = PAR.A_R_Summ_MTD_Inv_Paid_USR;

// PAR.YTD Invoices Paid = PAR.A/R Summ-YTD Inv Paid USR
PAR.YTD_Invoices_Paid = PAR.A_R_Summ_YTD_Inv_Paid_USR;

ENDIF;

//?Update A/R Balance at Month-end - new fields 11/15/02
// WRK.Bal Nbr of Invoices Paid = PAR.MTD Invoices Paid
WRK.Bal_Nbr_of_Invoices_Paid = PAR.MTD_Invoices_Paid;

// WRK.Bal Avg Days to Pay = CON.*ZERO
WRK.Bal_Avg_Days_to_Pay = *ZERO;

CASE;

// IF WRK.Count USR is GT 0
IF WRK.Count_USR > *ZERO;

// WRK.Bal Avg Days to Pay = WRK.Days to Pay 1 USR / WRK.Count USR *
WRK.Bal_Avg_Days_to_Pay = WRK.Days_to_Pay_1_USR / WRK.Count_USR;

ENDIF;

// WRK.Text 1 Length USR = CON.1
WRK.Text_1_Length_USR = 1;

// WRK.Day   (Char) USR = CON.01
WRK.Day_Char_USR = 01;

// PAR.A/R Balance Year = CON.2000 + PAR.*Job year
PAR.A_R_Balance_Year = 2000 + PAR.*Job_year;

// WRK.Year  NBR USR = PAR.A/R Balance Year
WRK.Year_NBR_USR = PAR.A_R_Balance_Year;

EXECUTE FUNCTION(RTV Num. Paymnts p/Mo RT) TYPE(RTVOBJ) FILE(ARBDCPP)           AC1658262;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(WRK.Bal_Nbr_of_Payments);
PARAMETER(WRK.Year_NBR_USR);
PARAMETER(PAR.A_R_Summ_Curr_Month_USR);
{
 //?USER: Initialize routine

 // PAR.USR Number of Payments = CND.Equal zero
 PAR.USR_Number_of_Payments = *ZERO;

 //?USER: Process Data record

 // PAR.USR Job Year = DB1.Last Payment Date *YEAR
 PAR.USR_Job_Year = DATEDTLS(DB1.Last_Payment_Date 'YR' 1111111 'NONE' 'N' 1);

 // PAR.USR Accum. Pay days = CND.Equal zero
 PAR.USR_Accum_Pay_days = *ZERO;

 CASE;

 // IF PAR.*Job year EQ PAR.USR Job Year
 IF PAR.*Job_year = PAR.USR_Job_Year;

 EXECUTE FUNCTION(RTV No of Paymnts p/mo RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1658263;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Accum_Pay_days);
 PARAMETER(PAR.A_R_Summ_Curr_Month_USR);
 PARAMETER(PAR.USR_Job_Year);
 {
  //?USER: Initialize routine

  // PAR.USR Number of Payments = CND.Equal zero
  PAR.USR_Number_of_Payments = *ZERO;

  //?USER: Processing if Data record not found

  QUIT;

  //?USER: Process Data record

  // WRK.Month                 USR = DB1.Transaction Date Code *MONTH
  WRK.Month_USR = DATEDTLS(DB1.Transaction_Date_Code 'MO' 1111111 'NONE' 'N' 1);

  // WRK.USR Job Year = DB1.Transaction Date Code *YEAR
  WRK.USR_Job_Year = DATEDTLS(DB1.Transaction_Date_Code 'YR' 1111111 'NONE' 'N' 1);

  CASE;

  // IF WRK.Month                 USR EQ PAR.A/R Summ-Curr Month   USR
  IF WRK.Month_USR = PAR.A_R_Summ_Curr_Month_USR;

  // AND WRK.USR Job Year EQ PAR.USR Job Year
  AND WRK.USR_Job_Year = PAR.USR_Job_Year;

  CASE;

  // IF DB1.Cash/Adj is Cash Adjustment
  IF DB1.Cash_Adj = 'CSH';

  // PAR.USR Number of Payments = CON.1 + PAR.USR Number of Payments
  PAR.USR_Number_of_Payments = 1 + PAR.USR_Number_of_Payments;

  ENDIF;

  ENDIF;

 }

 // PAR.USR Number of Payments = PAR.USR Accum. Pay days + PAR.USR Number of Payments
 PAR.USR_Number_of_Payments = PAR.USR_Accum_Pay_days + PAR.USR_Number_of_Payments;

 ENDIF;

}


// WRK.Year Alpha (YY) USR = WRK.Year  NBR USR
WRK.Year_Alpha_YY_USR = WRK.Year_NBR_USR;

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(WRK.Month_USR);
PARAMETER(PAR.A_R_Summ_Curr_Month_USR);
{
 C                     MOVE #IPANA    #OO9NA
}


// WRK.Day 1 3A = CONCAT(WRK.Text 1 Length USR,WRK.Year Alpha (YY) USR,CON.*ZERO)
WRK.Day_1_3A = WRK.Text_1_Length_USR + WRK.Year_Alpha_YY_USR (*ZERO);

// WRK.Text USR 5 = CONCAT(WRK.Day 1 3A,WRK.Month USR,CON.*ZERO)
WRK.Text_USR_5 = WRK.Day_1_3A + WRK.Month_USR (*ZERO);

// WRK.Date (Alpha) USR = CONCAT(WRK.Text USR 5,WRK.Day   (Char) USR,CON.*ZERO)
WRK.Date_Alpha_USR = WRK.Text_USR_5 + WRK.Day_Char_USR (*ZERO);

// LCL.Invoice Date = CVTVAR(WRK.Date (Alpha) USR)
LCL.Invoice_Date = CVTVAR(WRK.Date_Alpha_USR);

EXECUTE FUNCTION(Rtv f/A/R Bal MTD Upd RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1658275;
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(LCL.Invoice_Date);
PARAMETER(PAR.A_R_Summ_Curr_Month_USR);
PARAMETER(PAR.A_R_Balance_Year);
PARAMETER(WRK.Bal_Nbr_of_Invoices);
PARAMETER(WRK.Bal_Nbr_of_Credits);
PARAMETER(PAR.Company_Number);
{
 //?USER: Initialize routine

 // PAR.Bal Nbr of Invoices = CON.*ZERO
 PAR.Bal_Nbr_of_Invoices = *ZERO;

 // PAR.Bal Nbr of Credits = CON.*ZERO
 PAR.Bal_Nbr_of_Credits = *ZERO;

 //?USER: Process Data record

 // WRK.Month                 USR = DB1.Invoice Date *MONTH
 WRK.Month_USR = DATEDTLS(DB1.Invoice_Date 'MO' 1111111 'NONE' 'N' 1);

 // WRK.Year Code = DB1.Invoice Date *YEAR
 WRK.Year_Code = DATEDTLS(DB1.Invoice_Date 'YR' 1111111 'NONE' 'N' 1);

 CASE;

 // IF WRK.Year Code EQ PAR.Year Code
 IF WRK.Year_Code = PAR.Year_Code;

 // AND WRK.Month                 USR EQ PAR.Month                 USR
 AND WRK.Month_USR = PAR.Month_USR;

 //?12/07/06 PKD PK0040 Retrieve the Accounting Company Number for
 //?             the Order and only accumulate if PAR.Company Number
 //?             is equal to the Accounting Company Number.
 EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Warehouse_Code);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Shipping_Company);
  PARAMETER(PAR.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.Accounting Company EQ PAR.Company Number
 IF LCL.Accounting_Company = PAR.Company_Number;

 CASE;

 // IF DB1.Billing Activity Type is Invoice
 IF DB1.Billing_Activity_Type = '1';

 // PAR.Bal Nbr of Invoices = PAR.Bal Nbr of Invoices + CON.1
 PAR.Bal_Nbr_of_Invoices = PAR.Bal_Nbr_of_Invoices + 1;

 // IF DB1.Billing Activity Type is Credit Memo
 IF DB1.Billing_Activity_Type = '2';

 // PAR.Bal Nbr of Credits = PAR.Bal Nbr of Credits + CON.1
 PAR.Bal_Nbr_of_Credits = PAR.Bal_Nbr_of_Credits + 1;

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv f/A/R Bal #OrdUpd RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1658323;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(LCL.Invoice_Date);
PARAMETER(PAR.A_R_Summ_Curr_Month_USR);
PARAMETER(PAR.A_R_Balance_Year);
PARAMETER(WRK.Bal_Nbr_of_Orders);
{
 //?USER: Initialize routine

 // PAR.Bal Nbr of Orders = CON.*ZERO
 PAR.Bal_Nbr_of_Orders = *ZERO;

 //?USER: Process Data record

 // WRK.Month                 USR = DB1.Order Date *MONTH
 WRK.Month_USR = DATEDTLS(DB1.Order_Date 'MO' 1111111 'NONE' 'N' 1);

 // WRK.Year Code = DB1.Order Date *YEAR
 WRK.Year_Code = DATEDTLS(DB1.Order_Date 'YR' 1111111 'NONE' 'N' 1);

 CASE;

 // IF WRK.Year Code EQ PAR.Year Code
 IF WRK.Year_Code = PAR.Year_Code;

 // AND WRK.Month                 USR EQ PAR.Month                 USR
 AND WRK.Month_USR = PAR.Month_USR;

 //?12/07/06 PKD PK0040 Retrieve the Accounting Company Number for
 //?             the Order and only accumulate if PAR.Company Number
 //?             is equal to the Accounting Company Number.
 EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.Warehouse_Code);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Not cancelled
  IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

  EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Shipping_Company);
  PARAMETER(PAR.Accounting_Company);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.Accounting Company EQ PAR.Company Number
 IF LCL.Accounting_Company = PAR.Company_Number;

 // PAR.Bal Nbr of Orders = PAR.Bal Nbr of Orders + CON.1
 PAR.Bal_Nbr_of_Orders = PAR.Bal_Nbr_of_Orders + 1;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


//?** Update Days to Pay with Days from A/R Header  9/11/06 LJB
EXECUTE FUNCTION(Chg/Crt A/R Bal MTDs  CH) TYPE(CHGOBJ) FILE(PDLDCPP)           AC1658270;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.A_R_Balance_Year);
PARAMETER(PAR.A_R_Summ_Curr_Month_USR);
PARAMETER(WRK.Bal_Nbr_of_Orders);
PARAMETER(WRK.Bal_Nbr_of_Credits);
PARAMETER(WRK.Bal_Nbr_of_Payments);
PARAMETER(WRK.Bal_Nbr_of_Invoices);
PARAMETER(WRK.Bal_Nbr_of_Invoices_Paid);
PARAMETER(WRK.Bal_Avg_Days_to_Pay);
PARAMETER(PAR.Days_to_Pay);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(CRT A/R Balance File   CR) TYPE(CRTOBJ) FILE(PDLDCPP)          AC1450075;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(PAR.A_R_Balance_Year);
 PARAMETER(PAR.A_R_Balance_Month);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Bal_Nbr_of_Orders);
 PARAMETER(PAR.Bal_Nbr_of_Credits);
 PARAMETER(PAR.Bal_Nbr_of_Payments);
 PARAMETER(PAR.Bal_Nbr_of_Invoices);
 PARAMETER(PAR.Bal_Nbr_of_Invoices_Paid);
 PARAMETER(PAR.Bal_Avg_Days_to_Pay);
 PARAMETER(PAR.Days_to_Pay);
 PARAMETER(WRK.Override_Total_Load_Miles);
 PARAMETER(WRK.SSI_Download_Flag);
 PARAMETER(WRK.unused_status_2);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDDO;

//?Process new month
DO;

// PAR.Current Month = JOB.*Job month
PAR.Current_Month = JOB.*Job_month;

// PAR.Days to Pay = CND.equal to zero
PAR.Days_to_Pay = *ZERO;

//?1st day of current month.
DO;

// 1st day of current month
PAR.Paid_in_Full_Date = ( ( JOB.*Job_year * 10000 ) + ( PAR.Current_Month * 100 ) ) + 01;

//?Set Century.
CASE;

// IF JOB.*Job year is LT 40
IF JOB.*Job_year < 40;

// PAR.Paid in Full Date = PAR.Paid in Full Date + CON.1000000
PAR.Paid_in_Full_Date = PAR.Paid_in_Full_Date + 1000000;

ENDIF;

ENDDO;

EXECUTE FUNCTION(RTV Days Paid MTD      RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1357656;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Paid_in_Full_Date);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Days_to_Pay);
PARAMETER(PAR.Current_Month);
PARAMETER(JOB.*Job_year);
PARAMETER(PAR.MTD_Invoices_Paid);
{
 //?USER: Initialize routine

 // PAR.Days to Pay = CND.equal to zero
 PAR.Days_to_Pay = *ZERO;

 // PAR.MTD Invoices Paid = CND.Equal zero
 PAR.MTD_Invoices_Paid = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Remaining Balance Due is equal to zero
 IF DB1.Remaining_Balance_Due = *ZERO;

 // AND DB1.Invoice Suffix is Invoice or Debit Memo
 AND DB1.Invoice_Suffix = 'DM'/'IN';

 // PAR.USR Job Year = DB1.Paid in Full Date *YEAR
 PAR.USR_Job_Year = DATEDTLS(DB1.Paid_in_Full_Date 'YR' 1111111 'NONE' 'N' 1);

 // PAR.USR Job Month = DB1.Paid in Full Date *MONTH
 PAR.USR_Job_Month = DATEDTLS(DB1.Paid_in_Full_Date 'MO' 1111111 'NONE' 'N' 1);

 CASE;

 // IF PAR.USR Job Year EQ PAR.*Job year
 IF PAR.USR_Job_Year = PAR.*Job_year;

 // AND PAR.USR Job Month EQ PAR.USR Current Month
 AND PAR.USR_Job_Month = PAR.USR_Current_Month;

 // PAR.Days to Pay = DB1.Days to Pay + PAR.Days to Pay
 PAR.Days_to_Pay = DB1.Days_to_Pay + PAR.Days_to_Pay;

 // PAR.MTD Invoices Paid = PAR.MTD Invoices Paid + CON.1
 PAR.MTD_Invoices_Paid = PAR.MTD_Invoices_Paid + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

 ENDIF;

}


// PAR.YTD Invoices Paid = PAR.MTD Invoices Paid + PAR.YTD Invoices Paid
PAR.YTD_Invoices_Paid = PAR.MTD_Invoices_Paid + PAR.YTD_Invoices_Paid;

// PAR.YTD Days Paid = PAR.YTD Days Paid + PAR.Days to Pay
PAR.YTD_Days_Paid = PAR.YTD_Days_Paid + PAR.Days_to_Pay;

// PAR.MTD Days Paid = PAR.Days to Pay
PAR.MTD_Days_Paid = PAR.Days_to_Pay;

ENDDO;

ENDDO;

ENDIF;

ENDDO;

//?7. Number of Payments.
DO;

EXECUTE FUNCTION(RTV Num. Payments      RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1357700;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.USR_Number_of_Payments);
PARAMETER(JOB.*Job_year);
{
 //?USER: Initialize routine

 // PAR.USR Number of Payments = CND.Equal zero
 PAR.USR_Number_of_Payments = *ZERO;

 //?USER: Process Data record

 // PAR.USR Job Year = DB1.Last Payment Date *YEAR
 PAR.USR_Job_Year = DATEDTLS(DB1.Last_Payment_Date 'YR' 1111111 'NONE' 'N' 1);

 // PAR.USR Accum. Pay days = CND.Equal zero
 PAR.USR_Accum_Pay_days = *ZERO;

 CASE;

 // IF PAR.*Job year EQ PAR.USR Job Year
 IF PAR.*Job_year = PAR.USR_Job_Year;

 EXECUTE FUNCTION(RTV Num. of Payments   RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1357699;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Accum_Pay_days);
 {
  //?USER: Initialize routine

  // PAR.USR Number of Payments = CND.Equal zero
  PAR.USR_Number_of_Payments = *ZERO;

  //?USER: Processing if Data record not found

  QUIT;

  //?USER: Process Data record

  CASE;

  // IF DB1.Cash/Adj is Cash Adjustment
  IF DB1.Cash_Adj = 'CSH';

  // PAR.USR Number of Payments = CON.1 + PAR.USR Number of Payments
  PAR.USR_Number_of_Payments = 1 + PAR.USR_Number_of_Payments;

  ENDIF;

 }

 // PAR.USR Number of Payments = PAR.USR Accum. Pay days + PAR.USR Number of Payment
 PAR.USR_Number_of_Payments = PAR.USR_Accum_Pay_days + PAR.USR_Number_of_Payments;

 ENDIF;

}


ENDDO;

//?8. Update the A/R Summary record.
DO;

EXECUTE FUNCTION(CHG Nite Aging Fields  CH) TYPE(CHGOBJ) FILE(ARBCREP)          AC1354895;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Age_Due_Current_CB);
PARAMETER(PAR.Age_Due_Aging_1_CB);
PARAMETER(PAR.Age_Due_Aging_2_CB);
PARAMETER(PAR.Age_Due_Aging_3_CB);
PARAMETER(PAR.Age_Due_Aging_4_CB);
PARAMETER(PAR.Age_Due_Aging_5_CB);
PARAMETER(PAR.Age_Due_Current_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_1_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_2_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_3_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_4_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_5_W_O_CB);
PARAMETER(PAR.Value_of_Open_Orders);
PARAMETER(JOB.*Job_time);
PARAMETER(PAR.Date_of_Last_Payment);
PARAMETER(PAR.Amount_of_Last_Payment);
PARAMETER(PAR.Date_of_Highest_A_R_Bal);
PARAMETER(PAR.Amount_of_Highest_A_R_Bal);
PARAMETER(PAR.USR_Number_of_Payments);
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.MTD_Invoices_Paid);
PARAMETER(PAR.YTD_Invoices_Paid);
PARAMETER(PAR.MTD_Days_Paid);
PARAMETER(PAR.YTD_Days_Paid);
PARAMETER(PAR.Current_Month);

ENDDO;

//?***** Change Log and Comments
DO;

//?RMC 2/10/05 Comment the code that does this under Step 6:
//?            Process old month 1 year ago (back out figures)
//?It was for a 12 month rolling figure so now its throwing off the ytd
//?*****
//?** 05/19/2006 LJB T00009
//?** Size of the Days to Pay Usr Fields was changed from
//?** 3.0 to 5.0 to prevent truncating when accumulating for
//?** large volume customers.
//?*****
//?** 09/11/2006 LJB L60906C
//?** Update Days to Pay for last month in A/R Balance from
//?** Days to Pay in A/R Header
//?*****
//?** 12/01/2006 LJB PK0039
//?** The Aging range information is now stored in the A/R Control file
//?** The rtv was changed to get it from there and to use the
//?** DEFAULT record.
//?*****
//?** 12/13/2016 JBB E8097
//?** Recompile for changes in CLC Age Cust Inv.      IF - A/R Header
//?** The Aging function now ages Rebills with Chargebacks.
//?****
//?S019492  AB  09/09/2024  Re-compiled as ARBDCPP is converted to DDL and
//?Logicals with sub-select of fields converted to all fields indexes
//?****
ENDDO;

