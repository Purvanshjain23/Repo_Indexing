// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKPKPVR
// ?Date: 14.08.2025 Time: 02:53:23
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?RMC 5/4/22 th hog class type was added as an input parm but from the menu'
//?  there wont be anything passed. so i'm defaulting it to "M"
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?                      length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


// LCL.Display Field Usr = CND.*No
LCL.Display_Field_Usr = *NO;

//?CON TTOOEMPUNL
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('TTOOEMPUNL');
PARAMETER(LCL.Employee_Unloader_Sts);

//?CON HPERESEARC
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPERESEARC');
PARAMETER(LCL.Allow_Research_Hogs_Usr);

//?HP16979 Allow tattoo from predefine file
//?CON TATTASSGN
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('TATTASSGN');
PARAMETER(WRK.Assign_Tattoo_Number_Usr);

CASE;

// IF PAR.TH Hog Class Type is *ALL values
IF PAR.TH_Hog_Class_Type = 'R'/'S'/'M';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.TH Hog Class Type = CND.Market
PAR.TH_Hog_Class_Type = 'M';

ENDIF;

//?USER: Load screen

// DTL.CC Company Number = PAR.CC Company Number
DTL.CC_Company_Number = PAR.CC_Company_Number;

// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(DTL.TP_Tattoo_Date);

// DTL.TP Alley Number = PAR.TP Alley Number
DTL.TP_Alley_Number = PAR.TP_Alley_Number;

// DTL.Condition Name USR = Condition name of DTL.TP Alley Number
DTL.Condition_Name_USR = RTVCND(DTL.TP_Alley_Number);

CASE;

// IF PAR.TP Alley Number is *ALL values
IF PAR.TP_Alley_Number = '1'/'2'/'3'/'4'/'5';

// LCL.Display Field Usr = CND.*Yes
LCL.Display_Field_Usr = *YES;

ENDIF;

CASE;

// IF WRK.Assign Tattoo Number Usr is Y
IF WRK.Assign_Tattoo_Number_Usr = 'Y';

// DTL.@Desc 45 = CON.Pre-Assigned Tattoo Nbrs
DTL.@Desc_45 = 'Pre-Assigned Tattoo Nbrs';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.@Desc 45 = CON.Next Random Tattoo
DTL.@Desc_45 = 'Next Random Tattoo';

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Employee Name DRV) TYPE(DRVFLD)                                AB1244061;
PARAMETER(DTL.Employee_Name_DRV);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Employee_ID);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Name              RT) TYPE(RTVOBJ) FILE(PKFIREP)           AB1244062;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Employee_ID);
 PARAMETER(PAR.Employee_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

}


//?USER: Validate relations

CASE;

// IF PGM.*Cursor field <IS> DTL.Employee Number 2 Employe
IF PGM.*Cursor_field = DTL.Employee_Number_2_Employe;

CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// Call program Sel Employee          SR.
CALL PROGRAM(Sel Employee          SR) ('PKPKSRR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Employee_Number_2_Employe);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Name              RT) TYPE(RTVOBJ) FILE(PKFIREP)           AB1244062;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Employee_Number_2_Employe);
PARAMETER(DTL.Employee_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF LCL.Employee Unloader Sts is Yes
IF LCL.Employee_Unloader_Sts = 'Y';

CASE;

// IF DTL.Employee Number 2 Employe is Not Entered
IF DTL.Employee_Number_2_Employe = *ZERO;

// Send error message - 'Employee Unloader Req.'
ERROR(PRK1156);
MSGPARM(DTL.Employee_Number_2_Employe);

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Employee not found.'
ERROR(PRK1010);

ENDIF;

ENDIF;

//?USER: User defined action

//?TF predefined tattoo numbers  -- process
//?See if any records exists if not then blank out the U
CASE;

// IF DTL.*CMD key is CF06
IF DTL.*CMD_key = '06';

// AND WRK.Assign Tattoo Number Usr is Y
AND WRK.Assign_Tattoo_Number_Usr = 'Y';

//?TF predefined tattoo numbers
// WRK.*Return code = CND.*Normal
WRK.*Return_code = *BLANK;

CASE;

// IF WRK.Assign Tattoo Number Usr is Y
IF WRK.Assign_Tattoo_Number_Usr = 'Y';

//?TF predefined tattoo numbers
// Call program Chk TattooNBR *ALL=U  XF.
CALL PROGRAM(Chk TattooNBR *ALL=U  XF) ('PWK6XFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(WRK.*Return_code);

//?Tattoo Nbr records have all been used
CASE;

// IF WRK.*Return code is *Record does not exist
IF WRK.*Return_code = 'Y2U0005';

//?The Tattoo nbr has no records ready to be used
//?all have been used, so *blank out all records
// Call program Upd Tattoo Nbr *blanks XF.
CALL PROGRAM(Upd Tattoo Nbr *blanks XF) ('PWK5XFR');
PARAMETER(DTL.CC_Company_Number);

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF DTL.*CMD key is CF06
IF DTL.*CMD_key = '06';

// OR DTL.*CMD key is CF10
OR ( DTL.*CMD_key = '10';

// AND LCL.Allow Research Hogs Usr is Yes
AND LCL.Allow_Research_Hogs_Usr = 'Y' );

CASE;

// IF DTL.*CMD key is CF06
IF DTL.*CMD_key = '06';

// LCL.Tattoo Type USR = CND.*NONE
LCL.Tattoo_Type_USR = *BLANK;

// LCL.SR Type = CND.External
LCL.SR_Type = 'E';

// WRK.*Return code = CND.*Normal
WRK.*Return_code = *BLANK;

// IF DTL.*CMD key is CF10
IF DTL.*CMD_key = '10';

//?allow specific plant to use research hogs
//?Triumph Foods does not want their users to select this.
// LCL.Tattoo Type USR = CND.Research
LCL.Tattoo_Type_USR = 'R';

// LCL.SR Type = CND.Internal
LCL.SR_Type = 'I';

ENDIF;

//?TF is using pre-defined numbers - for Market and Resale
//?Tattoo number pre assign or Random Tattoo number
DO;

//?H16979 Get next TF Assignned Tattoo Number
//?IF this company has pre assign tattoo numbers
//?then use the next one.
CASE;

// IF WRK.Assign Tattoo Number Usr is Y Use the assign file
IF WRK.Assign_Tattoo_Number_Usr = 'Y';

// DTL.TP Tattoo Number = CON.*ZERO
DTL.TP_Tattoo_Number = *ZERO;

// WRK.Tattoo Nbr Group = CON.*ZERO
WRK.Tattoo_Nbr_Group = *ZERO;

// WRK.Tattoo Nbr Group Seq = CON.*ZERO
WRK.Tattoo_Nbr_Group_Seq = *ZERO;

//?CHG TO ALLOW MARKET OR RESALE ON HOG CLASS TYPE
// Call program RTV Next Tattoo Nbrs RFXF.
CALL PROGRAM(RTV Next Tattoo Nbrs RFXF) ('PWKWXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.TH_Hog_Class_Type);
PARAMETER(DTL.TP_Tattoo_Number);
PARAMETER(WRK.Company_Value_Code_USR);
PARAMETER('R');
PARAMETER(DTL.TP_Tattoo_Date);
PARAMETER(WRK.Return_Code_USR);
PARAMETER(LCL.SR_Type);
PARAMETER('N');
PARAMETER(LCL.Tattoo_Type_USR);
PARAMETER(WRK.Tattoo_Nbr_Group);
PARAMETER(WRK.Tattoo_Nbr_Group_Seq);

EXECUTE FUNCTION(Crt Tattoo Pending    CR) TYPE(CRTOBJ) FILE(PKFJCPP)           AB1243798;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TP_Tattoo_Date);
PARAMETER(DTL.TP_Tattoo_Number);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.Employee_ID);
PARAMETER(DTL.TP_Tattoo_Create_Time);
PARAMETER(DTL.TP_Alley_Number);
PARAMETER('P');
PARAMETER(DTL.Employee_Number_2_Employe);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // Call program Rtv System Date & Tim UP.
  CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

 // DB1.TP Tattoo Create Time = DB1.RS Time Added
 DB1.TP_Tattoo_Create_Time = DB1.RS_Time_Added;

}


// Call program Upd Tattoo Nbr Usage  XF.
CALL PROGRAM(Upd Tattoo Nbr Usage  XF) ('PWK0XFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TP_Tattoo_Number);
PARAMETER(WRK.Tattoo_Nbr_Group);
PARAMETER(WRK.Tattoo_Nbr_Group_Seq);

// IF *OTHERWISE
IF *OTHERWISE;

//?MARKET ONLY NO RESALE
// Call program RTV Next Tattoo Nbrs  XF.
CALL PROGRAM(RTV Next Tattoo Nbrs  XF) ('PKY4XFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER('M');
PARAMETER(DTL.TP_Tattoo_Number);
PARAMETER(WRK.Company_Value_Code_USR);
PARAMETER('R');
PARAMETER(DTL.TP_Tattoo_Date);
PARAMETER(WRK.Return_Code_USR);
PARAMETER(LCL.SR_Type);
PARAMETER('N');
PARAMETER(LCL.Tattoo_Type_USR);

EXECUTE FUNCTION(Crt Tattoo Pending    CR) TYPE(CRTOBJ) FILE(PKFJCPP)           AB1243798;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.TP_Tattoo_Date);
PARAMETER(DTL.TP_Tattoo_Number);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.Employee_ID);
PARAMETER(DTL.TP_Tattoo_Create_Time);
PARAMETER(DTL.TP_Alley_Number);
PARAMETER('P');
PARAMETER(*MISSING);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // Call program Rtv System Date & Tim UP.
  CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

 // DB1.TP Tattoo Create Time = DB1.RS Time Added
 DB1.TP_Tattoo_Create_Time = DB1.RS_Time_Added;

}


ENDIF;

ENDDO;

// Retrieve message - '&2 &1 &4 &3'
LCL.Pager_Msg_USR = RTVMSG(PRK1099);
PARAMETER(DTL.TP_Tattoo_Date);
PARAMETER(DTL.TP_Tattoo_Number);
PARAMETER(DTL.Employee_ID);
PARAMETER(DTL.TP_Alley_Number);

CASE;

// IF DTL.TP Alley Number is Scale House
IF DTL.TP_Alley_Number = '5';

// PAR.TP Tattoo Date = DTL.TP Tattoo Date
PAR.TP_Tattoo_Date = DTL.TP_Tattoo_Date;

// PAR.TP Tattoo Number = DTL.TP Tattoo Number
PAR.TP_Tattoo_Number = DTL.TP_Tattoo_Number;

PGM.*Return_code = *BLANK;

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Dsp Alley/Tattoo      CL.
CALL PROGRAM(Dsp Alley/Tattoo      CL) ('PLACUPR');
PARAMETER(DTL.TP_Alley_Number);
PARAMETER(DTL.TP_Tattoo_Number);

ENDIF;

// DTL.TP Alley Number = WRK.Blank USR
DTL.TP_Alley_Number = WRK.Blank_USR;

// DTL.Employee ID = CON.*ZERO
DTL.Employee_ID = *ZERO;

// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(DTL.TP_Tattoo_Date);

ENDIF;

