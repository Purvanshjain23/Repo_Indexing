// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBE7XFR
// ?Date: 14.08.2025 Time: 03:47:42
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Rtv Ps ProdItemSch PFSRT) TYPE(RTVOBJ) FILE(PBAHCPP)           AC2051147;
PARAMETER(PAR.PSP_Prod_Run_Sequence);
PARAMETER(PAR.Base_or_Not_Based_Usr);
{
 //?USER: Process Data record

 // WRK.PFS Production Quantity = CVTVAR(DB1.PSP Qty Production Total)
 WRK.PFS_Production_Quantity = CVTVAR(DB1.PSP_Qty_Production_Total);

 // WRK.PFS Company Number = DB1.PSP Company Number
 WRK.PFS_Company_Number = DB1.PSP_Company_Number;

 // LCL.Date From Alpha       USR = CVTVAR(DB1.PSP Production Date)
 LCL.Date_From_Alpha_USR = CVTVAR(DB1.PSP_Production_Date);

 // Call program Cvt Date              UP.
 CALL PROGRAM(Cvt Date              UP) ('POD5UPR');
 PARAMETER(LCL.Date_From_Alpha_USR);
 PARAMETER(LCL.Date_To_Format_USR);
 PARAMETER(*CYMD);
 PARAMETER(*YYMD);
 PARAMETER(*NONE);

 // WRK.PFS Production Date = CVTVAR(LCL.Date To Format USR)
 WRK.PFS_Production_Date = CVTVAR(LCL.Date_To_Format_USR);

 // WRK.PFS Item Code = DB1.PSP Item Code
 WRK.PFS_Item_Code = DB1.PSP_Item_Code;

 // WRK.PFS Label Type = DB1.PSP Label Type
 WRK.PFS_Label_Type = DB1.PSP_Label_Type;

 CASE;

 // IF DB1.PSP Qty Production Total is Greater then o
 IF DB1.PSP_Qty_Production_Total > *ZERO;

 //?DOUBLE CHECK THIS ROUNDING WITH PURVA
 // LCL.Quantity Scheduled 1 USR = DB1.PSP Qty Production Total * CON.1 *Rounded
 LCL.Quantity_Scheduled_1_USR = DB1.PSP_Qty_Production_Total * 1 'H';

 // WRK.PFS Production Quantity = CVTVAR(LCL.Quantity Scheduled 1 USR)
 WRK.PFS_Production_Quantity = CVTVAR(LCL.Quantity_Scheduled_1_USR);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.PFS Production Quantity = CON.*BLANK
 WRK.PFS_Production_Quantity = *BLANK;

 ENDIF;

 // WRK.PFS WIP Item Code = DB1.PSP WIP Item Code
 WRK.PFS_WIP_Item_Code = DB1.PSP_WIP_Item_Code;

 // WRK.PFS WIP Pieces = DB1.PSP Pieces Schedule
 WRK.PFS_WIP_Pieces = DB1.PSP_Pieces_Schedule;

 // WRK.PFS Country Code = WRK.BLANK
 WRK.PFS_Country_Code = WRK.BLANK;

 //?PRIMAL GROUP RPT, PRIMAL GROUP, UNIT OF MEASURE
 // WRK.PFS Sched Comment 1 = CONCAT(DB1.PSP Primal Group Rpt,DB1.PSP Primal Group Code,CON.1)
 WRK.PFS_Sched_Comment_1 = DB1.PSP_Primal_Group_Report + DB1.PSP_Primal_Group_Code (1);

 // WRK.PFS Sched Comment 1 = CONCAT(WRK.PFS Sched Comment 1,DB1.PSP U/M Primary,CON.1)
 WRK.PFS_Sched_Comment_1 = WRK.PFS_Sched_Comment_1 + DB1.PSP_UOM_Primary (1);

 // WRK.PFS Shift/Priority = WRK.PSP Shift/Priority Code
 WRK.PFS_Shift_Priority = WRK.PSP_Shift_Priority_Code;

 CASE;

 // IF PAR.Base or Not Based Usr is Yes
 IF PAR.Base_or_Not_Based_Usr = 'Y';

 // WRK.PFS Shift/Priority = CON.001
 WRK.PFS_Shift_Priority = 001;

 ENDIF;

 // WRK.PFS Record Status = CND.Change
 WRK.PFS_Record_Status = 'C';

 //?Day 0 to PFS day 0
 CASE;

 // IF DB1.PSP Day 0 is Equal to Zero
 IF DB1.PSP_Day_0 = *ZERO;

 // WRK.PFS Day 0 = CON.*BLANK
 WRK.PFS_Day_0 = *BLANK;

 //?Day 0 to PFS day 0
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.PFS Day 0 = CVTVAR(DB1.PSP Day 0)
 WRK.PFS_Day_0 = CVTVAR(DB1.PSP_Day_0);

 ENDIF;

 //?Day 1 to PFS day 1
 CASE;

 // IF DB1.PSP Day 1 is Equal to Zero
 IF DB1.PSP_Day_1 = *ZERO;

 // WRK.PFS Day 1 = CON.*BLANK
 WRK.PFS_Day_1 = *BLANK;

 //?Day 1 to PFS day 1
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.PFS Day 1 = CVTVAR(DB1.PSP Day 1)
 WRK.PFS_Day_1 = CVTVAR(DB1.PSP_Day_1);

 ENDIF;

 //?Day 2 to PFS day 2
 CASE;

 // IF DB1.PSP Day 2 is Equal to Zero
 IF DB1.PSP_Day_2 = *ZERO;

 // WRK.PFS Day 2 = CON.*BLANK
 WRK.PFS_Day_2 = *BLANK;

 //?Day 2 to PFS day 2
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.PFS Day 2 = CVTVAR(DB1.PSP Day 2)
 WRK.PFS_Day_2 = CVTVAR(DB1.PSP_Day_2);

 ENDIF;

 //?WeekEnd Summary to PFS Weekend Summary
 CASE;

 // IF DB1.PSP Week Ending Summary is Equal to Zero
 IF DB1.PSP_Week_Ending_Summary = *ZERO;

 // WRK.PFS Week Ending Summary = CON.*BLANK
 WRK.PFS_Week_Ending_Summary = *BLANK;

 //?WeekEnd Summary to PFS Weekend Summary
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.PFS Week Ending Summary = CVTVAR(DB1.PSP Week Ending Summary)
 WRK.PFS_Week_Ending_Summary = CVTVAR(DB1.PSP_Week_Ending_Summary);

 ENDIF;

 //?E2746 - UPDATE THE DAY 0 , 1 , 2 , WK END
 EXECUTE FUNCTION(Upd Prod Schedule     RT) TYPE(RTVOBJ) FILE(PPA9CPP)           AC1732271;
 PARAMETER(WRK.PFS_Company_Number);
 PARAMETER(WRK.PFS_Production_Date);
 PARAMETER(WRK.PFS_Item_Code);
 PARAMETER(WRK.PFS_Label_Type);
 PARAMETER(WRK.PFS_Production_Quantity);
 PARAMETER(WRK.PFS_Country_Code);
 PARAMETER(WRK.PFS_Sched_Comment_1);
 PARAMETER(LCL.PFS_Sched_Comment_2);
 PARAMETER(LCL.PFS_Sched_Comment_3);
 PARAMETER(WRK.PFS_WIP_Item_Code);
 PARAMETER(WRK.PFS_WIP_Pieces);
 PARAMETER(WRK.PFS_Shift_Priority);
 PARAMETER(WRK.PFS_Day_0);
 PARAMETER(WRK.PFS_Day_1);
 PARAMETER(WRK.PFS_Day_2);
 PARAMETER(WRK.PFS_Week_Ending_Summary);
 PARAMETER(WRK.PFS_Record_Status);
 {
  //?USER: Processing if Data record not found

  CASE;

  // IF PAR.PFS Record Status is Not Delete
  IF PAR.PFS_Record_Status = 'A'/'C';

  EXECUTE FUNCTION(Crt PFS Prod Sched    CR) TYPE(CRTOBJ) FILE(PPA9CPP)           AC1732240;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Production_Date);
  PARAMETER(PAR.PFS_Item_Code);
  PARAMETER(PAR.PFS_Label_Type);
  PARAMETER(PAR.PFS_Production_Quantity);
  PARAMETER(PAR.PFS_Country_Code);
  PARAMETER(PAR.PFS_Sched_Comment_1);
  PARAMETER(PAR.PFS_Sched_Comment_2);
  PARAMETER(PAR.PFS_Sched_Comment_3);
  PARAMETER(PAR.PFS_WIP_Item_Code);
  PARAMETER(PAR.PFS_WIP_Pieces);
  PARAMETER(PAR.PFS_Shift_Priority);
  PARAMETER(PAR.PFS_Day_0);
  PARAMETER(PAR.PFS_Day_1);
  PARAMETER(PAR.PFS_Day_2);
  PARAMETER(PAR.PFS_Week_Ending_Summary);
  PARAMETER(PAR.PFS_Record_Status);
  PARAMETER(PAR.PFS_Process_Status);
  PARAMETER(PAR.PFS_Error_Reason);
  PARAMETER(PAR.PFS_Create_Date);
  PARAMETER(PAR.PFS_Create_Time);
  PARAMETER(PAR.PFS_Change_Date);
  PARAMETER(PAR.PFS_Change_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Create Stamp      IF) TYPE(EXCINTFUN)                      AC1732162;
   PARAMETER(DB1.PFS_Process_Status);
   PARAMETER(DB1.PFS_Create_Date);
   PARAMETER(DB1.PFS_Create_Time);
   {
    //?Execute internal function

    // PAR.PFS Process Status = CND.Not Processed
    PAR.PFS_Process_Status = *ZERO;

    // PAR.PFS Create Date = JOB.*Job date
    PAR.PFS_Create_Date = JOB.*Job_date;

    // PAR.PFS Create Time = JOB.*Job time
    PAR.PFS_Create_Time = JOB.*Job_time;

   }

  }

  ENDIF;

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg PFS Prod Sched    CH) TYPE(CHGOBJ) FILE(PPA9CPP)           AC1732241;
  PARAMETER(PAR.PFS_Company_Number);
  PARAMETER(PAR.PFS_Production_Date);
  PARAMETER(PAR.PFS_Item_Code);
  PARAMETER(PAR.PFS_Label_Type);
  PARAMETER(PAR.PFS_Production_Quantity);
  PARAMETER(PAR.PFS_Country_Code);
  PARAMETER(PAR.PFS_Sched_Comment_1);
  PARAMETER(PAR.PFS_Sched_Comment_2);
  PARAMETER(PAR.PFS_Sched_Comment_3);
  PARAMETER(PAR.PFS_WIP_Item_Code);
  PARAMETER(PAR.PFS_WIP_Pieces);
  PARAMETER(PAR.PFS_Shift_Priority);
  PARAMETER(PAR.PFS_Day_0);
  PARAMETER(PAR.PFS_Day_1);
  PARAMETER(PAR.PFS_Day_2);
  PARAMETER(PAR.PFS_Week_Ending_Summary);
  PARAMETER(PAR.PFS_Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Change Stamp      IF) TYPE(EXCINTFUN)                      AC1732163;
   PARAMETER(DB1.PFS_Change_Date);
   PARAMETER(DB1.PFS_Change_Time);
   {
    //?Execute internal function

    // PAR.PFS Change Date = JOB.*Job date
    PAR.PFS_Change_Date = JOB.*Job_date;

    // PAR.PFS Change time = JOB.*Job time
    PAR.PFS_Change_Time = JOB.*Job_time;

   }

  }

 }

 //?Now mark record as be processed
 EXECUTE FUNCTION(Rtv Ps ProdItemSch UpdRT) TYPE(RTVOBJ) FILE(PBAHCPP)           AC2051338;
 PARAMETER(DB1.PSP_Prod_Run_Sequence);
 PARAMETER(DB1.PSP_Primal_Group_Report);
 PARAMETER(DB1.PSP_Report_Sequence);
 {
  //?USER: Process Data record

  //?Send out side chnge to - Already sent outside
  EXECUTE FUNCTION(Chg PS Prod Item Sch SCH) TYPE(CHGOBJ) FILE(PBAHCPP)           AC2036104;
  PARAMETER(DB1.PSP_Prod_Run_Sequence);
  PARAMETER(DB1.PSP_Primal_Group_Report);
  PARAMETER(DB1.PSP_Report_Sequence);
  PARAMETER(DB1.PSP_Report_ID);
  PARAMETER(DB1.PSP_Report_Date);
  PARAMETER(DB1.PSP_Report_Time);
  PARAMETER(DB1.PSP_Company_Number);
  PARAMETER(DB1.PSP_Production_Date);
  PARAMETER(DB1.PSP_Production_Warehouse);
  PARAMETER(DB1.PSP_Department_Code);
  PARAMETER(DB1.PSP_Department_Desc);
  PARAMETER(DB1.PSP_Consumed_Item_Code);
  PARAMETER(DB1.PSP_Item_Code);
  PARAMETER(DB1.PSO_Item_Description);
  PARAMETER(DB1.PSP_Qty_Production_Total);
  PARAMETER(DB1.PSP_Piece_Count_Item);
  PARAMETER(DB1.PSP_Pieces_Per_Bag);
  PARAMETER(DB1.PSP_Bags_Per_Unit);
  PARAMETER(DB1.PSP_Total_Pieces);
  PARAMETER(DB1.PSP_Packaging_Item_Code);
  PARAMETER(DB1.PSP_UOM_Primary);
  PARAMETER(DB1.PSP_BOX_Desription);
  PARAMETER(DB1.PSP_Packaging_Item_Desc);
  PARAMETER(DB1.PSP_Comment_Line_1);
  PARAMETER(DB1.PSP_Text);
  PARAMETER(DB1.PSP_Primal_Group_Code);
  PARAMETER('S');
  PARAMETER(DB1.PSP_WIP_Item_Code);
  PARAMETER(DB1.PSP_Shift_Priority_Code);
  PARAMETER(DB1.PSP_Pieces_Schedule);
  PARAMETER(DB1.PSP_Label_Type);
  PARAMETER(DB1.PSP_Day_0);
  PARAMETER(DB1.PSP_Day_1);
  PARAMETER(DB1.PSP_Day_2);
  PARAMETER(DB1.PSP_Week_Ending_Summary);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

}


