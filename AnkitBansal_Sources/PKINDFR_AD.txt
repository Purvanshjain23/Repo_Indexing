// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKINDFR
// ?Date: 14.08.2025 Time: 02:51:47
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E3625 JJH 12/04/14 - Recompile because PrklISTesting List for
//? field *USER to add users Julius High (ISJHIGH) and Collin Lynch
//? ISCLYNC.
//?E4006 RMC 03/27/15 for Delete, reduce pen curr head
//?E4154 JJH 07/17/15 Modify the 4=Delete logic so that the Current
//?  Head in the Pen file cannot be set to a negative quantity.
//?E4154 JJH 07/17/15 - Pen and Tattoo Scale Modifications
//?- Remove the logic that was temporarily placed into the HPESTGGUY
//?  on 7/17/15 to correct errors in the Current Head in Pen file
//?  being set to negative.
//?- Changed the Rtv/Chg Pen Hd, Gntcs RT function to not update the
//?  Pen file when Tattoo Scale Tickets are deleted with option
//?  4=Delete.
//?H16853 ISE 01/23/21 - Increased the length from 5 to 7 and corrected the
//?                      alignment of Buy Order Number field.
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// PAR.TST Record Created Status = CND.PC Uploaded Record
PAR.TST_Record_Created_Status = 'P';

//?USER: Initialize subfile control

// Call program RTV Vldtn Vrbles       XF.
CALL PROGRAM(RTV Vldtn Vrbles       XF) ('PKIWXFR');
PARAMETER(WRK.TST_Val_Ms_Tme_Df_Txt_Us);
PARAMETER(WRK.TST_Val_Ms_Tme_Df_Val_Us);
PARAMETER(WRK.TST_Val_Ms_LTme_Lm_Txt_Us);
PARAMETER(WRK.TST_Val_Ms_LTme_Lm_Val_Us);
PARAMETER(WRK.TST_Val_Ms_#_Wt_Lm_Txt_Us);
PARAMETER(WRK.TST_Val_Ms_#_Wt_Lm_Val_Us);
PARAMETER(WRK.TST_Val_Ms_ALW_Min_Txt_Us);
PARAMETER(WRK.TST_VAl_Ms_ALW_MiN_Val_Us);
PARAMETER(WRK.TST_Val_Ms_ALW_Max_Txt_Us);
PARAMETER(WRK.TST_VAl_Ms_ALW_Max_Val_Us);
PARAMETER(CTL.BOH_Company_Number);

// CTL.TST Head = CON.*ZERO
CTL.TST_Head = *ZERO;

// CTL.TST Wgt = CON.*ZERO
CTL.TST_Wgt = *ZERO;

EXECUTE FUNCTION(Rtv SCL Tkt Totals    RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1178311;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.TST_Head);
PARAMETER(CTL.TST_Wgt);
{
 //?USER: Initialize routine

 // PAR.Head Total USR = CON.*ZERO
 PAR.Head_Total_USR = *ZERO;

 // PAR.Weight Tot USR = CON.*ZERO
 PAR.Weight_Tot_USR = *ZERO;

 //?USER: Processing if Data record not found

 // PAR.Head Total USR = CON.*ZERO
 PAR.Head_Total_USR = *ZERO;

 // PAR.Weight Tot USR = CON.*ZERO
 PAR.Weight_Tot_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Head Total USR = PAR.Head Total USR + DB1.TST Head
 PAR.Head_Total_USR = PAR.Head_Total_USR + DB1.TST_Head;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.TST Wgt
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.TST_Wgt;

}


CASE;

// IF CTL.TST Head is Not Zero
IF CTL.TST_Head <> *ZERO;

// CTL.TH Avg Live Wgt = CTL.TST Wgt / CTL.TST Head *Rounded
CTL.TH_Avg_Live_Wgt = CTL.TST_Wgt / CTL.TST_Head 'H';

ENDIF;

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.BOH Company Number = PAR.BOH Company Number
CTL.BOH_Company_Number = PAR.BOH_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// CTL.Pen Usr = CON.*BLANK
CTL.Pen_Usr = *BLANK;

ENDIF;

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Class Desc    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127790;
PARAMETER(CTL.HC_Class_Code);
PARAMETER(CTL.HC_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.HC_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(CTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Pen Usr = CON.*BLANK
CTL.Pen_Usr = *BLANK;

//?USER: Initialize subfile record from DBF record

//?Calculate average weight
CASE;

// IF RCD.TST Head is Not Zero
IF RCD.TST_Head <> *ZERO;

// RCD.TD Avg Live Wgt = RCD.TST Wgt / RCD.TST Head *
RCD.TD_Avg_Live_Wgt = RCD.TST_Wgt / RCD.TST_Head;

ENDIF;

// PAR.TST Record Created Status = DB1.TST Record Created Status
PAR.TST_Record_Created_Status = DB1.TST_Record_Created_Status;

//?Manual / Live Scale
CASE;

// IF RCD.TST Record Created Status is Manual Record
IF RCD.TST_Record_Created_Status = 'M';

// *MO.VE             1183529*Bu = ilt. in functions
RCD.@Desc_15 = 'Manual Entry';

//?Manual / Live Scale
// IF *OTHERWISE
IF *OTHERWISE;

// *MO.VE             1183529*Bu = ilt. in functions
RCD.@Desc_15 = 'Live Scale';

ENDIF;

//?Scale ticket printed or not
CASE;

// IF RCD.RS Record Status is Active
IF RCD.RS_Record_Status = 'A';

// *MO.VE             1183529*Bu = ilt. in functions
RCD.Description_30_USR = WRK.Blank_USR;

//?Scale ticket printed or not
// IF *OTHERWISE
IF *OTHERWISE;

// *MO.VE             1183529*Bu = ilt. in functions
RCD.Description_30_USR = 'Printed';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?SEL:  Pen
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Pen Usr
IF PGM.*Cursor_field = CTL.Pen_Usr;

// Call program Sel Pen Open/Hc Type  SR.
CALL PROGRAM(Sel Pen Open/Hc Type  SR) ('PKJWSRR');
PARAMETER(CTL.Pen_Company_Number);
PARAMETER(CTL.Pen_Usr);
PARAMETER(PAR.TH_Hog_Class_Type);

ENDIF;

ENDIF;

//?VAL:  Pen
CASE;

// IF CTL.Pen Usr is Entered
IF CTL.Pen_Usr <> *BLANK;

EXECUTE FUNCTION(Rtv Val Pen,Type      RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1170306;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(CTL.Pen_Usr);
PARAMETER(WRK.Pen_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pen &1 must have an Open status.'
ERROR(PRK0361);
MSGPARM(CTL.Pen_Usr);

ENDIF;

CASE;

// IF PAR.TH Hog Class Type NE WRK.Pen Type
IF PAR.TH_Hog_Class_Type <> WRK.Pen_Type;

// Send error message - 'Pen &1 type &3 not the same as the tattoo class type &2.'
ERROR(PRK0606);
MSGPARM(CTL.Pen_Usr);
MSGPARM(PAR.TH_Hog_Class_Type);
MSGPARM(WRK.Pen_Type);

ENDIF;

ENDIF;

//?F5=Refresh
CASE;

// IF CTL.*CMD key is CF05
IF CTL.*CMD_key = '05';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F6=Create
CASE;

// IF CTL.*CMD key is Create
IF CTL.*CMD_key = '06';

// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

// Call program Exc Rtv Ttt Wgt Pndng XF.
CALL PROGRAM(Exc Rtv Ttt Wgt Pndng XF) ('PKP4XFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(WRK.Record_Found_USR);

CASE;

// IF WRK.Record Found USR is Record Found
IF WRK.Record_Found_USR = 'Y';

// Send error message - 'Cannot Create while Get Weight is in process for this tattoo.'
ERROR(PRK0374);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Pen Usr is Entered
IF CTL.Pen_Usr <> *BLANK;

// Call program Get Big Chars         XF.
CALL PROGRAM(Get Big Chars         XF) ('PKYOXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.Pen_Usr);

ENDIF;

EXECUTE FUNCTION(Rtv Last Seq Nbr      RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1128234;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(WRK.TST_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.TST_Sequence_Number = *ZERO;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.TST_Sequence_Number = DB1.TST_Sequence_Number;

 QUIT;

}


// WRK.TST Sequence Number = WRK.TST Sequence Number + CON.1
WRK.TST_Sequence_Number = WRK.TST_Sequence_Number + 1;

// Call program Edt Tattoo Scale Tkt  E1.
CALL PROGRAM(Edt Tattoo Scale Tkt  E1) ('PKMBE1R');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(WRK.TST_Sequence_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PD_Name);
PARAMETER(CTL.PL_Name);
PARAMETER(CTL.HC_Class_Code);
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(CTL.Pen_Usr);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F14=Get Weight
CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

// Call program Pmt Get Tattoo Weight PV.
CALL PROGRAM(Pmt Get Tattoo Weight PV) ('PKIPPVR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.HC_Class_Code);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);
PARAMETER(CTL.PD_Name);
PARAMETER(CTL.PL_Name);
PARAMETER(CTL.Pen_Usr);
PARAMETER(WRK.TST_Val_Ms_Tme_Df_Txt_Us);
PARAMETER(WRK.TST_Val_Ms_Tme_Df_Val_Us);
PARAMETER(WRK.TST_Val_Ms_LTme_Lm_Txt_Us);
PARAMETER(WRK.TST_Val_Ms_LTme_Lm_Val_Us);
PARAMETER(WRK.TST_Val_Ms_#_Wt_Lm_Txt_Us);
PARAMETER(WRK.TST_Val_Ms_#_Wt_Lm_Val_Us);
PARAMETER(WRK.TST_Val_Ms_ALW_Min_Txt_Us);
PARAMETER(WRK.TST_VAl_Ms_ALW_MiN_Val_Us);
PARAMETER(WRK.TST_Val_Ms_ALW_Max_Txt_Us);
PARAMETER(WRK.TST_VAl_Ms_ALW_Max_Val_Us);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F16=Print Scale Ticket
CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

//?Validate Head Count for Internal Hogs.
CASE;

// IF CTL.TST Head is GT 265
IF CTL.TST_Head > 265;

// AND CTL.TH Source Type is Internal
AND CTL.TH_Source_Type = 'I';

// Send error message - 'Head cannot exceed 250.'
ERROR(PRK0774);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

EXECUTE FUNCTION(C2330 Rec of all Tst tatt) TYPE(EXCINTFUN)                     AB1191147;
{
 //?Execute internal function

 //?01/29/97   SLM     Count only the scale tickets for this tattoo
}


//?MOVE RECOUNT OF TATTOO HEADER PRIOR TO PRINT OF SCALE TICKET
// Call program Chg BOL/THDR Rec/Wgt  XF.
CALL PROGRAM(Chg BOL/THDR Rec/Wgt  XF) ('PKHFXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);

EXECUTE FUNCTION(CHG Resale Spread Sts CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1204119;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER('P');

//?Print Scale Ticket Prompt for Manual Weighments.
CASE;

// IF PAR.TST Record Created Status is Manual Record
IF PAR.TST_Record_Created_Status = 'M';

// OR CTL.HC Class Code is Resale
OR CTL.HC_Class_Code = 'RSL';

// Call program Pmt Prt Scale Tkt ??  PV.
CALL PROGRAM(Pmt Prt Scale Tkt ??  PV) ('PKYRPVR');
PARAMETER(WRK.Print_Scale_Tkt_USR);
PARAMETER(WRK.Return_Code_USR);

CASE;

// IF WRK.Return Code USR is *User QUIT requested
IF WRK.Return_Code_USR = 'Y2U9999';

QUIT;

ENDIF;

//?Print Scale Ticket Prompt for Manual Weighments.
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Print Scale Tkt       USR = CND.Yes
WRK.Print_Scale_Tkt_USR = 'Y';

ENDIF;

// Call program Exc Prt Scl Tkt,w/Upd XF.
CALL PROGRAM(Exc Prt Scl Tkt,w/Upd XF) ('PKPDXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);
PARAMETER('N');
PARAMETER(WRK.Print_Scale_Tkt_USR);

//?Print Scale Ticket Completion Message
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

CASE;

// IF WRK.Print Scale Tkt       USR is Yes
IF WRK.Print_Scale_Tkt_USR = 'Y';

// Send information message - 'Scale Ticket for Tattoo &1 has been processed and printed.'
MESSAGE(PRK0370 *INFO);
MSGPARM(PAR.TH_Tattoo_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Scale Ticket for Tattoo &1 has been processed.'
MESSAGE(PRK0593 *INFO);
MSGPARM(PAR.TH_Tattoo_Number);

ENDIF;

// Call program Chg BOL/THDR Rec/Wgt  XF.
CALL PROGRAM(Chg BOL/THDR Rec/Wgt  XF) ('PKHFXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);

RETURN;

ENDIF;

ENDIF;

//?THIS IS CURRENTLY BEING DEVELOPED BY SusanMason 2/21/2014
//?F17=Dsp Tattoo Defects
CASE;

// IF CTL.*CMD key is CF17
IF CTL.*CMD_key = '17';

// Call program Dsp Tattoo Defect     DF.
CALL PROGRAM(Dsp Tattoo Defect     DF) ('PKJ6DFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);

ENDIF;

//?F18=WW Pen Availability
CASE;

// IF CTL.*CMD key is CF18
IF CTL.*CMD_key = '18';

// Call program WW Pen Availability   DF.
CALL PROGRAM(WW Pen Availability   DF) ('PKGGDFR');

ENDIF;

//?CALC: Subfile record function fields

//?Manual / Live Scale
CASE;

// IF RCD.TST Record Created Status is Manual Record
IF RCD.TST_Record_Created_Status = 'M';

// RCD.@Desc 15 = CON.Manual Entry
RCD.@Desc_15 = 'Manual Entry';

//?Manual / Live Scale
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.@Desc 15 = CON.Live Scale
RCD.@Desc_15 = 'Live Scale';

ENDIF;

//?Scale ticket printed or not
CASE;

// IF RCD.RS Record Status is Active
IF RCD.RS_Record_Status = 'A';

// *MO.VE             1183529*Bu = ilt. in functions
RCD.Description_30_USR = WRK.Blank_USR;

//?Scale ticket printed or not
// IF *OTHERWISE
IF *OTHERWISE;

// *MO.VE             1183529*Bu = ilt. in functions
RCD.Description_30_USR = 'Printed';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.RS Record Status is Active
IF RCD.RS_Record_Status = 'A';

//?Active Status Means that a Scale  ticket has not been printed.
//?2=Revise   Is allowed for Manual and Live Weight
CASE;

// IF RCD.*SFLSEL is *Revise request
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt Tattoo Scale Tkt  E1.
CALL PROGRAM(Edt Tattoo Scale Tkt  E1) ('PKMBE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TST_Sequence_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PD_Name);
PARAMETER(CTL.PL_Name);
PARAMETER(CTL.HC_Class_Code);
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(RCD.Pen_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Delete Request
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?Plant wants to delete either man or live scale
//?record but only if a scale ticket has not been printed
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?Display Tattoo Scale Messages
CASE;

// IF RCD.*SFLSEL is *Option 7 (Reusable)
IF RCD.*SFLSEL = '7';

// OR RCD.*SFLSEL is *Option 7#2 (Reusable)
OR RCD.*SFLSEL = '7';

// WRK.*Return code = CND.*Normal
WRK.*Return_code = *BLANK;

// Call program Dsp Weighment Messages DF.
CALL PROGRAM(Dsp Weighment Messages DF) ('PKISDFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TST_Sequence_Number);
PARAMETER(RCD.TST_Head);
PARAMETER(RCD.TST_Wgt);
PARAMETER(RCD.TST_Wgt_Date);
PARAMETER(RCD.TST_Wgt_Time);
PARAMETER(RCD.TST_Last_Zero_Date);
PARAMETER(RCD.TST_Last_Zero_Time);
PARAMETER(RCD.Pen_Number);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PD_Name);
PARAMETER(CTL.PL_Name);
PARAMETER(CTL.HC_Class_Code);
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(WRK.*Return_code);
PARAMETER(RCD.TD_Avg_Live_Wgt);
PARAMETER('V');

// WRK.*Return code = CND.*Normal
WRK.*Return_code = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?2=Revise  If been printed NOT ALLOWED USE EDT TATTOO SCALE PGM
CASE;

// IF RCD.*SFLSEL is *Revise request
IF RCD.*SFLSEL = '2'/'2';

// Send error message - 'Option not allowed'
ERROR(PRK0648);
MSGPARM(RCD.*SFLSEL);

ENDIF;

//?Delete Request not allowed
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// Send error message - 'Option not allowed'
ERROR(PRK0648);
MSGPARM(RCD.*SFLSEL);

ENDIF;

//?Display Tattoo Scale Messages is allowed
CASE;

// IF RCD.*SFLSEL is *Option 7 (Reusable)
IF RCD.*SFLSEL = '7';

// OR RCD.*SFLSEL is *Option 7#2 (Reusable)
OR RCD.*SFLSEL = '7';

// WRK.*Return code = CND.*Normal
WRK.*Return_code = *BLANK;

// Call program Dsp Weighment Messages DF.
CALL PROGRAM(Dsp Weighment Messages DF) ('PKISDFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TST_Sequence_Number);
PARAMETER(RCD.TST_Head);
PARAMETER(RCD.TST_Wgt);
PARAMETER(RCD.TST_Wgt_Date);
PARAMETER(RCD.TST_Wgt_Time);
PARAMETER(RCD.TST_Last_Zero_Date);
PARAMETER(RCD.TST_Last_Zero_Time);
PARAMETER(RCD.Pen_Number);
PARAMETER(CTL.Oms_System_Value_Alpha);
PARAMETER(CTL.Name_USR);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PD_Name);
PARAMETER(CTL.PL_Name);
PARAMETER(CTL.HC_Class_Code);
PARAMETER(CTL.DF_Defect_Code);
PARAMETER(WRK.*Return_code);
PARAMETER(RCD.TD_Avg_Live_Wgt);
PARAMETER('V');

// WRK.*Return code = CND.*Normal
WRK.*Return_code = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.RS Record Status is Active
IF RCD.RS_Record_Status = 'A';

//?4=Delete
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?E4154 JJH 07/28/15 Modify the 4=Delete logic so that the Pen file
//?  is not updated when Un-Printed Tattoo Scale Tickets are deleted.
EXECUTE FUNCTION(Rtv/Dlt TTT Scale Rcd RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1128297;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TST_Sequence_Number);
{
 //?USER: Initialize routine

 //?E4154 JJH 07/28/15 Modify the 4=Delete logic so that the Pen file
 //?  is not updated when Un-Printed Tattoo Scale Tickets are deleted.
 //?USER: Process Data record

 EXECUTE FUNCTION(Delete Tattoo Scale Ticke) TYPE(DLTOBJ) FILE(PKB3CPP)          AB1113771;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TST_Sequence_Number);
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Exit program processing

//?F3=Exit
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

CASE;

// IF CTL.TST Head is GT 250
IF CTL.TST_Head > 265;

// AND CTL.TH Source Type is Internal
AND CTL.TH_Source_Type = 'I';

// Send error message - 'Head cannot exceed 250.'
ERROR(PRK0774);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

ENDIF;

// Call program Chg BOL/THDR Rec/Wgt  XF.
CALL PROGRAM(Chg BOL/THDR Rec/Wgt  XF) ('PKHFXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOL_Load_Number);
PARAMETER(CTL.TH_Tattoo_Number);
PARAMETER(CTL.TH_Kill_Date);

