// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDYDXFR
// ?Date: 14.08.2025 Time: 03:33:35
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// PAR.Ord/Sch Sts USR = CND.Scheduled
PAR.Ord_Sch_Sts_USR = 'S';

CASE;

// IF PAR.Production Type is Schedule Saved in the am
IF PAR.Production_Type = 'X';

// IF PAR.Production Date EQ JOB.*Job date
IF PAR.Production_Date = JOB.*Job_date;

// AND PAR.Production Type is Plan
AND PAR.Production_Type = 'P';

// IF PAR.Production Date LT JOB.*Job date
IF PAR.Production_Date < JOB.*Job_date;

// AND PAR.Production Type is Plan
AND PAR.Production_Type = 'P';

// AND PAR.Fresh Chilling Time is GT Zero
AND PAR.Fresh_Chilling_Time > *ZERO;

// IF PAR.Chilling Time is GT Zero
IF PAR.Fresh_Chilling_Time > *ZERO;

// AND PAR.Avail Ship Date USR EQ JOB.*Job date
AND PAR.Avail_Ship_Date_USR = JOB.*Job_date;

// IF PAR.Production Date LT JOB.*Job date
IF PAR.Production_Date < JOB.*Job_date;

// AND PAR.Avail Ship Date USR GT JOB.*Job date
AND PAR.Avail_Ship_Date_USR > JOB.*Job_date;

//?Retrieve/Calculate Scheduled Shipments
CASE;

// IF PAR.Avail Dsp/Prt Type USR is Display Detail
IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

// OR PAR.Avail Dsp/Prt Type USR is Print Detail
OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Avail_Ship_Date_USR);
PARAMETER(PAR.Weight_Scheduled_SUM);
PARAMETER(PAR.Quantity_Scheduled_SUM);
PARAMETER(PAR.Ord_Sch_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Ord/Sch Sts USR is Scheduled
 IF PAR.Ord_Sch_Sts_USR = 'S';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF PAR.Ord/Sch Sts USR is Ordered
 IF PAR.Ord_Sch_Sts_USR = 'O';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


// Scheduled Shipments
PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Sched_Ship_USR + ( PAR.Weight_Scheduled_SUM             +
/ PAR.Load_Size_USR 'H' );

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
//?Ship Off Cut Weight
CASE;

// IF PAR.Fresh Chilling Time is GT Zero
IF PAR.Fresh_Chilling_Time > *ZERO;

// AND PAR.Production Date EQ JOB.*Job date
AND PAR.Production_Date = JOB.*Job_date;

EXECUTE FUNCTION(Rtv Ship Cut Adjust   RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1461722;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Production_Type);
PARAMETER(PAR.Avail_Ship_Date_USR);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?OVERRIDE: Weight
CASE;

// IF PAR.Piece Count Item is yes
IF PAR.Piece_Count_Item = 'Y';

// AND PAR.Pieces Per Bag is GT Zero
AND PAR.Pieces_Per_Bag > *ZERO;

// AND PAR.Bags Per Unit is GT Zero
AND PAR.Bags_Per_Unit > *ZERO;

// PS Weight Standard
LCL.PS_Weight_Standard = ( PAR.PS_Pieces_Standard / ( PAR.Pieces_Per_Bag                           +
* PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

// PS Weight Prod Adj
LCL.PS_Weight_Prod_Adj = ( PAR.PS_Pieces_Prod_Adj / ( PAR.Pieces_Per_Bag                           +
* PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

// PS Weight Converted
LCL.PS_Weight_Converted = ( PAR.PS_Pieces_Converted / ( PAR.Pieces_Per_Bag                         +
* PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

// PS Weight Whse Tfr Adj
LCL.PS_Weight_Whs_Tfr_Adj = ( PAR.PS_Pieces_Whs_Tfr_Adj / ( PAR.Pieces_Per_Bag                     +
* PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

// PS Weight Prod Allocated
LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag               +
* PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

// PS Weight Shipping Adj
LCL.PS_Weight_Shipping_Adj = ( PAR.PS_Pieces_Shipping_Adj / ( PAR.Pieces_Per_Bag                   +
* PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

// PS Weight Ship Cut Adj
LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag                   +
* PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

//?OVERRIDE: Weight
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.PS Weight Standard = PAR.PS Weight Standard
LCL.PS_Weight_Standard = PAR.PS_Weight_Standard;

// LCL.PS Weight Prod Adj = PAR.PS Weight Prod Adj
LCL.PS_Weight_Prod_Adj = PAR.PS_Weight_Prod_Adj;

// LCL.PS Weight Converted = PAR.PS Weight Converted
LCL.PS_Weight_Converted = PAR.PS_Weight_Converted;

// LCL.PS Weight Whse Tfr Adj = PAR.PS Weight Whse Tfr Adj
LCL.PS_Weight_Whs_Tfr_Adj = PAR.PS_Weight_Whs_Tfr_Adj;

// LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

// LCL.PS Weight Shipping Adj = PAR.PS Weight Shipping Adj
LCL.PS_Weight_Shipping_Adj = PAR.PS_Weight_Shipping_Adj;

// LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

ENDIF;

//?-------------------------------------------------------------
//?02/21/11 PKD Replaced PAR context with LCL on Weight.
// Production
PAR.Quantity_Production_USR = PAR.Quantity_Production_USR + ( ( ( (                                +
LCL.PS_Weight_Standard + LCL.PS_Weight_Prod_Adj ) - LCL.PS_Weight_Converted )                     +
- LCL.PS_Weight_Whs_Tfr_Adj ) / PAR.Load_Size_USR 'H' );

//?reserved
CASE;

// IF PAR.Avail Ship Date USR GT JOB.*Job date
IF PAR.Avail_Ship_Date_USR > JOB.*Job_date;

// Sales
PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( LCL.PS_Weight_Prod_Allocated                   +
/ PAR.Load_Size_USR 'H' );

//?Retrieve/Calculate Scheduled Shipments
CASE;

// IF PAR.Avail Dsp/Prt Type USR is Display Detail
IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

// OR PAR.Avail Dsp/Prt Type USR is Print Detail
OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Avail_Ship_Date_USR);
PARAMETER(PAR.Weight_Scheduled_SUM);
PARAMETER(PAR.Quantity_Scheduled_SUM);
PARAMETER(PAR.Ord_Sch_Sts_USR);
{
 //?USER: Initialize routine

 // PAR.Weight Scheduled SUM = CON.*ZERO
 PAR.Weight_Scheduled_SUM = *ZERO;

 // PAR.Quantity Scheduled SUM = CON.*ZERO
 PAR.Quantity_Scheduled_SUM = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Billing_Activity_Type);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF WRK.Header Status is Not Comp/Canc/Conf
 IF WRK.Header_Status = 'L'/'A'/'E'/'H';

 // AND WRK.Billing Activity Type is Invoice or Transfer
 AND WRK.Billing_Activity_Type = '1'/'4';

 CASE;

 // IF PAR.Ord/Sch Sts USR is Scheduled
 IF PAR.Ord_Sch_Sts_USR = 'S';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

 // IF PAR.Ord/Sch Sts USR is Ordered
 IF PAR.Ord_Sch_Sts_USR = 'O';

 // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
 PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

 // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
 PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

 ENDIF;

 ENDIF;

}


// Scheduled Shipments
PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Sched_Ship_USR + ( PAR.Weight_Scheduled_SUM             +
/ PAR.Load_Size_USR 'H' );

ENDIF;

ENDIF;

// Adjustments
PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Shipping_Adj           +
/ PAR.Load_Size_USR 'H' );

//?Chilling Time > 0 and Production Date = Job Date
CASE;

// IF PAR.Chilling Time is GT Zero
IF PAR.Fresh_Chilling_Time > *ZERO;

// AND PAR.Production Date EQ JOB.*Job date
AND PAR.Production_Date = JOB.*Job_date;

//?02/21/11 PKD Moved up retrieve.
// Ship Cut Adj (No Dec)
PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj           +
/ PAR.Load_Size_USR 'H' );

ENDIF;

// Old Availability
PAR.Quantity_Available_USR = ( ( PAR.Quantity_Inventory_USR                                        +
+ PAR.Quantity_Production_USR ) - PAR.Quantity_Sales_USR ) + PAR.Quantity_Adjustment_USR;

// PAR.Production Date USR = PAR.Production Date
PAR.Production_Date_USR = PAR.Production_Date;

ENDIF;

