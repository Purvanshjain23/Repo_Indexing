// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMDPXFR
// ?Date: 14.08.2025 Time: 03:42:45
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?** Build work file based on the option
CASE;

// IF PAR.Select Option is Option 1
IF PAR.Select_Option = '1';

//?** by Salesperson
EXECUTE FUNCTION(RTV InvDt/SlsRt/Carr   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1808691;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(PAR.Invoice_Date);
PARAMETER(PAR.FC_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Thru_Date_USR);
PARAMETER(PAR.FCG_Group_Code);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER(PAR.USR_CDE_Parm_1);
PARAMETER(PAR.USR_CDE_Parm_2);
PARAMETER(PAR.USR_CDE_Parm_3);
PARAMETER(PAR.USR_CDE_Parm_4);
PARAMETER(PAR.USR_CDE_Parm_5);
PARAMETER(PAR.USR_CDE_Parm_6);
PARAMETER(PAR.USR_CDE_Parm_7);
PARAMETER(PAR.USR_CDE_Parm_8);
PARAMETER(PAR.USR_CDE_Parm_9);
PARAMETER(PAR.USR_Select_Omit_Flag);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?04/13/08 LJB E00385 - Parms have been changed, process based on
 //?  those parms. None or 1 or more warehouse codes may have been
 //?  passed in as well as a flag to either select or omit that
 //?  warehouse. Test the flag, then test the warehouse parms.
 //?05/19/08 LJB FP1225-Add Parent Customer Number
 //?08/22/08 PKD S00383-Added Freight Group as a selection
 ENDDO;

 //?USER: Process Data record

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 //?** Exit if Invoice Date is beyond Thru Date
 CASE;

 // IF DB1.Invoice Date GT PAR.Thru Date             USR
 IF DB1.Invoice_Date > PAR.Thru_Date_USR;

 RETURN;

 ENDIF;

 // WRK.Load ID = DB1.Load ID
 WRK.Load_ID = DB1.Load_ID;

 //?** If Co# entered, file co# must match
 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 // AND DB1.Company Number NE PAR.Company Number
 AND DB1.Company_Number <> PAR.Company_Number;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Salesperson entered, file Sales Route must match
 CASE;

 // IF PAR.Sales Route Code is entered
 IF PAR.Sales_Route_Code <> *BLANK;

 // AND DB1.Sales Route Code NE PAR.Sales Route Code
 AND DB1.Sales_Route_Code <> PAR.Sales_Route_Code;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Carrier entered, file Carrier must match
 CASE;

 // IF PAR.Carrier Code is entered
 IF PAR.Carrier_Code <> *BLANK;

 // AND DB1.Carrier Code NE PAR.Carrier Code
 AND DB1.Carrier_Code <> PAR.Carrier_Code;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Ship To entered, file ship to must match
 CASE;

 // IF PAR.Ship To Customer is not equal to zero
 IF PAR.Ship_To_Customer <> *ZERO;

 // AND DB1.Ship To Customer NE PAR.Ship To Customer
 AND DB1.Ship_To_Customer <> PAR.Ship_To_Customer;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** Process this record if *Record Selected still = Yes
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Company = DB1.Company Number
 PAR.Company = DB1.Company_Number;

 // PAR.Salesperson Code = DB1.Sales Route Code
 PAR.Salesperson_Code = DB1.Sales_Route_Code;

 //?** Don't pass carrier code if none was passed in
 CASE;

 // IF PAR.Carrier Code is not entered
 IF PAR.Carrier_Code = *BLANK;

 // PAR.USR Carrier Code = CON.*BLANK
 PAR.USR_Carrier_Code = *BLANK;

 //?** Don't pass carrier code if none was passed in
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Carrier Code = DB1.Carrier Code
 PAR.USR_Carrier_Code = DB1.Carrier_Code;

 ENDIF;

 //?** Get Warehouse # from Load Detail and BOL Date from Load Header
 EXECUTE FUNCTION(RTV Excessv Frt info  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1912981;
 PARAMETER(DB1.Load_ID);
 PARAMETER(NLL.BOL_Time);
 PARAMETER(PAR.BOL_Complete_Date);
 PARAMETER(NLL.BOL_Complete_Time);
 PARAMETER(NLL.BOL_Received_Date);
 PARAMETER(NLL.BOL_Received_Time);
 PARAMETER(NLL.Deadline_Departure_Date);
 PARAMETER(NLL.Deadline_Departure_Time);
 PARAMETER(PAR.Load_U_M);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Warehouse for Orders) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1591536;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(NLL.Default_Load_Sequence);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(CHK for warehouse codes) TYPE(RTVOBJ) FILE(OPBGWKP)            AC1591545;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Warehouse_Code);
  PARAMETER(PAR.Default_Load_Sequence);
  {
   //?USER: Initialize routine

   // WRK.USR First Time = CND.Yes
   WRK.USR_First_Time = 'Y';

   // PAR.Warehouse Code = CND.Warehouse Code Blank
   PAR.Warehouse_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF WRK.USR First Time is Yes
   IF WRK.USR_First_Time = 'Y';

   // WRK.USR First Time = CND.No
   WRK.USR_First_Time = 'N';

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Warehouse Code EQ DB1.Warehouse Code
   IF PAR.Warehouse_Code = DB1.Warehouse_Code;

   // PAR.Default Load Sequence = CND.yes
   PAR.Default_Load_Sequence = 'Y';

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Default Load Sequence = CND.no
   PAR.Default_Load_Sequence = 'N';

   QUIT;

   ENDIF;

   ENDIF;

  }

  // PAR.Warehouse Code = WRK.Warehouse Code
  PAR.Warehouse_Code = WRK.Warehouse_Code;

 }

 //?** If Sel/Omit = omit and whse code matches, omit the warehouse
 //?** If Sel/Omit = select and whse code matches, select the warehouse
 //?** and skip any other warehouses
 EXECUTE FUNCTION(RTV Multi Warehouses   IF) TYPE(EXCINTFUN)                     AC1931189;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 PARAMETER(PAR.USR_Select_Omit_Flag);
 PARAMETER(LCL.Record_Selected_USR);
 {
  //?Execute internal function

  //?** Process Whse if Select/Omit flag has an entry
  CASE;

  // IF PAR.USR Select/Omit Flag is *Entered
  IF PAR.USR_Select_Omit_Flag = 'O'/'S';

  // LCL.Record Selected       USR = PAR.Record Selected       USR
  LCL.Record_Selected_USR = PAR.Record_Selected_USR;

  //?** Process based on Select or Omit
  CASE;

  // IF PAR.USR Select/Omit Flag is Omit
  IF PAR.USR_Select_Omit_Flag = 'O';

  //?Test 1st warehouse
  CASE;

  // IF PAR.USR Warehouse Code is Warehouse Code not Blank
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // AND PAR.USR Warehouse Code EQ PAR.Warehouse Code
  AND PAR.USR_Warehouse_Code = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 2nd warehouse
  CASE;

  // IF PAR.USR CDE Parm 1 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_1 <> *BLANK;

  // AND PAR.USR CDE Parm 1 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_1 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 3rd warehouse
  CASE;

  // IF PAR.USR CDE Parm 2 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_2 <> *BLANK;

  // AND PAR.USR CDE Parm 2 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_2 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 4th warehouse
  CASE;

  // IF PAR.USR CDE Parm 3 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_3 <> *BLANK;

  // AND PAR.USR CDE Parm 3 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_3 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 5th warehouse
  CASE;

  // IF PAR.USR CDE Parm 4 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_4 <> *BLANK;

  // AND PAR.USR CDE Parm 4 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_4 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 6th warehouse
  CASE;

  // IF PAR.USR CDE Parm 5 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_5 <> *BLANK;

  // AND PAR.USR CDE Parm 5 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_5 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 7th warehouse
  CASE;

  // IF PAR.USR CDE Parm 6 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_6 <> *BLANK;

  // AND PAR.USR CDE Parm 6 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_6 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 8th warehouse
  CASE;

  // IF PAR.USR CDE Parm 7 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_7 <> *BLANK;

  // AND PAR.USR CDE Parm 7 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_7 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 9th warehouse
  CASE;

  // IF PAR.USR CDE Parm 8 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_8 <> *BLANK;

  // AND PAR.USR CDE Parm 8 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_8 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 10th warehouse
  CASE;

  // IF PAR.USR CDE Parm 9 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_9 <> *BLANK;

  // AND PAR.USR CDE Parm 9 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_9 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?** Process based on Select or Omit
  // IF PAR.USR Select/Omit Flag is Select
  IF PAR.USR_Select_Omit_Flag = 'S';

  //?** Set the flag to No then set to yes if warehouse is found
  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  //?Test 1st warehouse
  CASE;

  // IF PAR.USR Warehouse Code is Warehouse Code not Blank
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // AND PAR.USR Warehouse Code EQ PAR.Warehouse Code
  AND PAR.USR_Warehouse_Code = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 2nd warehouse
  CASE;

  // IF PAR.USR CDE Parm 1 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_1 <> *BLANK;

  // AND PAR.USR CDE Parm 1 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_1 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 3rd warehouse
  CASE;

  // IF PAR.USR CDE Parm 2 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_2 <> *BLANK;

  // AND PAR.USR CDE Parm 2 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_2 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 4th warehouse
  CASE;

  // IF PAR.USR CDE Parm 3 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_3 <> *BLANK;

  // AND PAR.USR CDE Parm 3 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_3 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 5th warehouse
  CASE;

  // IF PAR.USR CDE Parm 4 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_4 <> *BLANK;

  // AND PAR.USR CDE Parm 4 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_4 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 6th warehouse
  CASE;

  // IF PAR.USR CDE Parm 5 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_5 <> *BLANK;

  // AND PAR.USR CDE Parm 5 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_5 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 7th warehouse
  CASE;

  // IF PAR.USR CDE Parm 6 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_6 <> *BLANK;

  // AND PAR.USR CDE Parm 6 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_6 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 8th warehouse
  CASE;

  // IF PAR.USR CDE Parm 7 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_7 <> *BLANK;

  // AND PAR.USR CDE Parm 7 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_7 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 9th warehouse
  CASE;

  // IF PAR.USR CDE Parm 8 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_8 <> *BLANK;

  // AND PAR.USR CDE Parm 8 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_8 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 10th warehouse
  CASE;

  // IF PAR.USR CDE Parm 9 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_9 <> *BLANK;

  // AND PAR.USR CDE Parm 9 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_9 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  ENDIF;

  // PAR.Record Selected       USR = LCL.Record Selected       USR
  PAR.Record_Selected_USR = LCL.Record_Selected_USR;

  ENDIF;

 }

 //?** Continue to process if select flag is still Yes              E00384
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 EXECUTE FUNCTION(RTV Parent Customer    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1225254;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Parent_Customer);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Get Load Freight Charge code and amount from Load Freight
 //?** Charge file. If record exists, write WF Excessive Freight record
 //?** Pass parent customer number    FP1225
 EXECUTE FUNCTION(RTV LdFrt Chg for Load RT) TYPE(RTVOBJ) FILE(POBCCPP)          AC1808702;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.Company);
 PARAMETER(PAR.USR_Carrier_Code);
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.LFC_Amount);
 PARAMETER(PAR.BOL_Complete_Date);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Parent_Customer);
 PARAMETER(PAR.Load_U_M);
 PARAMETER(PAR.FCG_Group_Code);
 {
  //?USER: Initialize routine

  //?***** Change Log and Comments
  DO;

  //?** 04/16/2009 LJB E00384
  //?** Load UM was added as an input parm
  //?** 05/19/2008 LJB FP1225
  //?** Pass parent customer number
  ENDDO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // WRK.Record Selected       USR = CND.yes
  WRK.Record_Selected_USR = 'Y';

  //?SEL: Freight Charge Code
  CASE;

  // IF PAR.FC Code is Entered
  IF PAR.FC_Code <> *BLANK;

  CASE;

  // IF DB1.FC Code NE PAR.FC Code
  IF DB1.FC_Code <> PAR.FC_Code;

  // WRK.Record Selected       USR = CND.no
  WRK.Record_Selected_USR = 'N';

  ENDIF;

  ENDIF;

  //?SEL: Freight Group
  CASE;

  // IF PAR.FCG Group Code is Entered
  IF PAR.FCG_Group_Code <> *BLANK;

  EXECUTE FUNCTION(Rtv Frt Grp Chrg Exst RT) TYPE(RTVOBJ) FILE(PMEAREP)           AC1896646;
  PARAMETER(PAR.FCG_Group_Code);
  PARAMETER(DB1.FC_Code);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  CASE;

  // IF LCL.Record Found USR is Record Not Found
  IF LCL.Record_Found_USR = 'N';

  // WRK.Record Selected       USR = CND.no
  WRK.Record_Selected_USR = 'N';

  ENDIF;

  ENDIF;

  CASE;

  // IF WRK.Record Selected       USR is yes
  IF WRK.Record_Selected_USR = 'Y';

  CASE;

  // IF PAR.Carrier Code is not entered
  IF PAR.Carrier_Code = *BLANK;

  // WRK.Carrier Code = DB1.LFC Carrier Code
  WRK.Carrier_Code = DB1.LFC_Carrier_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Carrier Code = PAR.Carrier Code
  WRK.Carrier_Code = PAR.Carrier_Code;

  ENDIF;

  //?** Pass parent customer number  FP1225
  EXECUTE FUNCTION(CRT WF Excess Frt Chgs CR) TYPE(CRTOBJ) FILE(PMAICPP)          AC1808517;
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.FC_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Carrier_Code);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(DB1.LFC_Amount);
  PARAMETER(PAR.BOL_Complete_Date);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Parent_Customer);
  PARAMETER(PAR.Load_U_M);
  ENDIF;

 }

 ENDIF;

 ENDIF;

}


//?** Build work file based on the option
// IF PAR.Select Option is Option 2
IF PAR.Select_Option = '2';

//?** by Carrier
EXECUTE FUNCTION(RTV InvDt/Carr/SlsRt   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1809166;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(PAR.Invoice_Date);
PARAMETER(PAR.FC_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Thru_Date_USR);
PARAMETER(PAR.FCG_Group_Code);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER(PAR.USR_CDE_Parm_1);
PARAMETER(PAR.USR_CDE_Parm_2);
PARAMETER(PAR.USR_CDE_Parm_3);
PARAMETER(PAR.USR_CDE_Parm_4);
PARAMETER(PAR.USR_CDE_Parm_5);
PARAMETER(PAR.USR_CDE_Parm_6);
PARAMETER(PAR.USR_CDE_Parm_7);
PARAMETER(PAR.USR_CDE_Parm_8);
PARAMETER(PAR.USR_CDE_Parm_9);
PARAMETER(PAR.USR_Select_Omit_Flag);
{
 //?USER: Initialize routine

 //?***** Change log and Comments
 DO;

 //?** 04/13/2009 LJB E00384
 //?** If warehouse select/omit flag has an entry, process the order
 //?** detail file warehouse based on the flag and whether or not
 //?** the rtv'd whse code matches
 //?** 05/19/2008 LJB FP1225
 //?** Pass parent customer number
 ENDDO;

 //?USER: Process Data record

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 //?** Exit if Invoice Date is beyond Thru Date
 CASE;

 // IF DB1.Invoice Date GT PAR.Thru Date             USR
 IF DB1.Invoice_Date > PAR.Thru_Date_USR;

 RETURN;

 ENDIF;

 // WRK.Load ID = DB1.Load ID
 WRK.Load_ID = DB1.Load_ID;

 //?** If Co# entered, file co# must match
 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 // AND DB1.Company Number NE PAR.Company Number
 AND DB1.Company_Number <> PAR.Company_Number;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Carrier entered, file Carrier must match
 CASE;

 // IF PAR.Carrier Code is entered
 IF PAR.Carrier_Code <> *BLANK;

 // AND DB1.Carrier Code NE PAR.Carrier Code
 AND DB1.Carrier_Code <> PAR.Carrier_Code;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Salesperson entered, file Sales Route must match
 CASE;

 // IF PAR.Sales Route Code is entered
 IF PAR.Sales_Route_Code <> *BLANK;

 // AND DB1.Sales Route Code NE PAR.Sales Route Code
 AND DB1.Sales_Route_Code <> PAR.Sales_Route_Code;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Ship To entered, file Ship To must match
 CASE;

 // IF PAR.Ship To Customer is not equal to zero
 IF PAR.Ship_To_Customer <> *ZERO;

 // AND DB1.Ship To Customer NE PAR.Ship To Customer
 AND DB1.Ship_To_Customer <> PAR.Ship_To_Customer;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** Process this record if *Record Selected still = Yes
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Company = DB1.Company Number
 PAR.Company = DB1.Company_Number;

 // PAR.Salesperson Code = DB1.Sales Route Code
 PAR.Salesperson_Code = DB1.Sales_Route_Code;

 //?** Don't pass carrier code if none was passed in
 CASE;

 // IF PAR.Carrier Code is not entered
 IF PAR.Carrier_Code = *BLANK;

 // PAR.USR Carrier Code = CON.*BLANK
 PAR.USR_Carrier_Code = *BLANK;

 //?** Don't pass carrier code if none was passed in
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Carrier Code = DB1.Carrier Code
 PAR.USR_Carrier_Code = DB1.Carrier_Code;

 ENDIF;

 //?** Get Warehouse # from Load Detail and BOL Date from Load Header
 EXECUTE FUNCTION(RTV Excessv Frt info  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1912981;
 PARAMETER(DB1.Load_ID);
 PARAMETER(NLL.BOL_Time);
 PARAMETER(PAR.BOL_Complete_Date);
 PARAMETER(NLL.BOL_Complete_Time);
 PARAMETER(NLL.BOL_Received_Date);
 PARAMETER(NLL.BOL_Received_Time);
 PARAMETER(NLL.Deadline_Departure_Date);
 PARAMETER(NLL.Deadline_Departure_Time);
 PARAMETER(PAR.Load_U_M);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Warehouse for Orders) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1591536;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(NLL.Default_Load_Sequence);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(CHK for warehouse codes) TYPE(RTVOBJ) FILE(OPBGWKP)            AC1591545;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Warehouse_Code);
  PARAMETER(PAR.Default_Load_Sequence);
  {
   //?USER: Initialize routine

   // WRK.USR First Time = CND.Yes
   WRK.USR_First_Time = 'Y';

   // PAR.Warehouse Code = CND.Warehouse Code Blank
   PAR.Warehouse_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF WRK.USR First Time is Yes
   IF WRK.USR_First_Time = 'Y';

   // WRK.USR First Time = CND.No
   WRK.USR_First_Time = 'N';

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Warehouse Code EQ DB1.Warehouse Code
   IF PAR.Warehouse_Code = DB1.Warehouse_Code;

   // PAR.Default Load Sequence = CND.yes
   PAR.Default_Load_Sequence = 'Y';

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Default Load Sequence = CND.no
   PAR.Default_Load_Sequence = 'N';

   QUIT;

   ENDIF;

   ENDIF;

  }

  // PAR.Warehouse Code = WRK.Warehouse Code
  PAR.Warehouse_Code = WRK.Warehouse_Code;

 }

 //?** If Sel/Omit = omit and whse code matches, omit the warehouse
 //?** If Sel/Omit = select and whse code matches, select the warehouse
 //?** and skip any other warehouses
 EXECUTE FUNCTION(RTV Multi Warehouses   IF) TYPE(EXCINTFUN)                     AC1931189;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 PARAMETER(PAR.USR_Select_Omit_Flag);
 PARAMETER(LCL.Record_Selected_USR);
 {
  //?Execute internal function

  //?** Process Whse if Select/Omit flag has an entry
  CASE;

  // IF PAR.USR Select/Omit Flag is *Entered
  IF PAR.USR_Select_Omit_Flag = 'O'/'S';

  // LCL.Record Selected       USR = PAR.Record Selected       USR
  LCL.Record_Selected_USR = PAR.Record_Selected_USR;

  //?** Process based on Select or Omit
  CASE;

  // IF PAR.USR Select/Omit Flag is Omit
  IF PAR.USR_Select_Omit_Flag = 'O';

  //?Test 1st warehouse
  CASE;

  // IF PAR.USR Warehouse Code is Warehouse Code not Blank
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // AND PAR.USR Warehouse Code EQ PAR.Warehouse Code
  AND PAR.USR_Warehouse_Code = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 2nd warehouse
  CASE;

  // IF PAR.USR CDE Parm 1 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_1 <> *BLANK;

  // AND PAR.USR CDE Parm 1 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_1 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 3rd warehouse
  CASE;

  // IF PAR.USR CDE Parm 2 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_2 <> *BLANK;

  // AND PAR.USR CDE Parm 2 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_2 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 4th warehouse
  CASE;

  // IF PAR.USR CDE Parm 3 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_3 <> *BLANK;

  // AND PAR.USR CDE Parm 3 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_3 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 5th warehouse
  CASE;

  // IF PAR.USR CDE Parm 4 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_4 <> *BLANK;

  // AND PAR.USR CDE Parm 4 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_4 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 6th warehouse
  CASE;

  // IF PAR.USR CDE Parm 5 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_5 <> *BLANK;

  // AND PAR.USR CDE Parm 5 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_5 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 7th warehouse
  CASE;

  // IF PAR.USR CDE Parm 6 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_6 <> *BLANK;

  // AND PAR.USR CDE Parm 6 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_6 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 8th warehouse
  CASE;

  // IF PAR.USR CDE Parm 7 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_7 <> *BLANK;

  // AND PAR.USR CDE Parm 7 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_7 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 9th warehouse
  CASE;

  // IF PAR.USR CDE Parm 8 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_8 <> *BLANK;

  // AND PAR.USR CDE Parm 8 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_8 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 10th warehouse
  CASE;

  // IF PAR.USR CDE Parm 9 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_9 <> *BLANK;

  // AND PAR.USR CDE Parm 9 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_9 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?** Process based on Select or Omit
  // IF PAR.USR Select/Omit Flag is Select
  IF PAR.USR_Select_Omit_Flag = 'S';

  //?** Set the flag to No then set to yes if warehouse is found
  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  //?Test 1st warehouse
  CASE;

  // IF PAR.USR Warehouse Code is Warehouse Code not Blank
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // AND PAR.USR Warehouse Code EQ PAR.Warehouse Code
  AND PAR.USR_Warehouse_Code = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 2nd warehouse
  CASE;

  // IF PAR.USR CDE Parm 1 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_1 <> *BLANK;

  // AND PAR.USR CDE Parm 1 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_1 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 3rd warehouse
  CASE;

  // IF PAR.USR CDE Parm 2 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_2 <> *BLANK;

  // AND PAR.USR CDE Parm 2 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_2 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 4th warehouse
  CASE;

  // IF PAR.USR CDE Parm 3 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_3 <> *BLANK;

  // AND PAR.USR CDE Parm 3 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_3 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 5th warehouse
  CASE;

  // IF PAR.USR CDE Parm 4 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_4 <> *BLANK;

  // AND PAR.USR CDE Parm 4 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_4 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 6th warehouse
  CASE;

  // IF PAR.USR CDE Parm 5 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_5 <> *BLANK;

  // AND PAR.USR CDE Parm 5 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_5 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 7th warehouse
  CASE;

  // IF PAR.USR CDE Parm 6 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_6 <> *BLANK;

  // AND PAR.USR CDE Parm 6 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_6 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 8th warehouse
  CASE;

  // IF PAR.USR CDE Parm 7 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_7 <> *BLANK;

  // AND PAR.USR CDE Parm 7 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_7 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 9th warehouse
  CASE;

  // IF PAR.USR CDE Parm 8 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_8 <> *BLANK;

  // AND PAR.USR CDE Parm 8 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_8 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 10th warehouse
  CASE;

  // IF PAR.USR CDE Parm 9 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_9 <> *BLANK;

  // AND PAR.USR CDE Parm 9 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_9 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  ENDIF;

  // PAR.Record Selected       USR = LCL.Record Selected       USR
  PAR.Record_Selected_USR = LCL.Record_Selected_USR;

  ENDIF;

 }

 //?** If *Record Selected still = Yes, continue processing
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 EXECUTE FUNCTION(RTV Parent Customer    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1225254;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Parent_Customer);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Get Load Freight Charge code and amount from Load Freight
 //?** Charge file. If record exists, write WF Excessive Freight record
 EXECUTE FUNCTION(RTV LdFrt Chg for Load RT) TYPE(RTVOBJ) FILE(POBCCPP)          AC1808702;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.Company);
 PARAMETER(PAR.USR_Carrier_Code);
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.LFC_Amount);
 PARAMETER(PAR.BOL_Complete_Date);
 PARAMETER(PAR.Invoice_Number);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Parent_Customer);
 PARAMETER(PAR.Load_U_M);
 PARAMETER(PAR.FCG_Group_Code);
 {
  //?USER: Initialize routine

  //?***** Change Log and Comments
  DO;

  //?** 04/16/2009 LJB E00384
  //?** Load UM was added as an input parm
  //?** 05/19/2008 LJB FP1225
  //?** Pass parent customer number
  ENDDO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // WRK.Record Selected       USR = CND.yes
  WRK.Record_Selected_USR = 'Y';

  //?SEL: Freight Charge Code
  CASE;

  // IF PAR.FC Code is Entered
  IF PAR.FC_Code <> *BLANK;

  CASE;

  // IF DB1.FC Code NE PAR.FC Code
  IF DB1.FC_Code <> PAR.FC_Code;

  // WRK.Record Selected       USR = CND.no
  WRK.Record_Selected_USR = 'N';

  ENDIF;

  ENDIF;

  //?SEL: Freight Group
  CASE;

  // IF PAR.FCG Group Code is Entered
  IF PAR.FCG_Group_Code <> *BLANK;

  EXECUTE FUNCTION(Rtv Frt Grp Chrg Exst RT) TYPE(RTVOBJ) FILE(PMEAREP)           AC1896646;
  PARAMETER(PAR.FCG_Group_Code);
  PARAMETER(DB1.FC_Code);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  CASE;

  // IF LCL.Record Found USR is Record Not Found
  IF LCL.Record_Found_USR = 'N';

  // WRK.Record Selected       USR = CND.no
  WRK.Record_Selected_USR = 'N';

  ENDIF;

  ENDIF;

  CASE;

  // IF WRK.Record Selected       USR is yes
  IF WRK.Record_Selected_USR = 'Y';

  CASE;

  // IF PAR.Carrier Code is not entered
  IF PAR.Carrier_Code = *BLANK;

  // WRK.Carrier Code = DB1.LFC Carrier Code
  WRK.Carrier_Code = DB1.LFC_Carrier_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Carrier Code = PAR.Carrier Code
  WRK.Carrier_Code = PAR.Carrier_Code;

  ENDIF;

  //?** Pass parent customer number  FP1225
  EXECUTE FUNCTION(CRT WF Excess Frt Chgs CR) TYPE(CRTOBJ) FILE(PMAICPP)          AC1808517;
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.FC_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Carrier_Code);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(DB1.LFC_Amount);
  PARAMETER(PAR.BOL_Complete_Date);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Parent_Customer);
  PARAMETER(PAR.Load_U_M);
  ENDIF;

 }

 ENDIF;

 ENDIF;

}


//?** Build work file based on the option
// IF PAR.Select Option is Option 3
IF PAR.Select_Option = '3';

//?** by Customer
EXECUTE FUNCTION(RTV InvDt/Cust#        RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1855984;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(PAR.Invoice_Date);
PARAMETER(PAR.FC_Code);
PARAMETER(PAR.Thru_Date_USR);
PARAMETER(PAR.FCG_Group_Code);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER(PAR.USR_CDE_Parm_1);
PARAMETER(PAR.USR_CDE_Parm_2);
PARAMETER(PAR.USR_CDE_Parm_3);
PARAMETER(PAR.USR_CDE_Parm_4);
PARAMETER(PAR.USR_CDE_Parm_5);
PARAMETER(PAR.USR_CDE_Parm_6);
PARAMETER(PAR.USR_CDE_Parm_7);
PARAMETER(PAR.USR_CDE_Parm_8);
PARAMETER(PAR.USR_CDE_Parm_9);
PARAMETER(PAR.USR_Select_Omit_Flag);
{
 //?USER: Initialize routine

 //?***** Change Log and Comments
 DO;

 //?** 04/13/2009 LJB E00384
 //?** If warehouse select/omit flag has an entry, process the order
 //?** detail file warehouse based on the flag and whether or not
 //?** the rtv'd whse code matches
 //?** 05/19/2008 LJB FP1225
 //?** Pass parent customer number (bill to)
 ENDDO;

 //?USER: Process Data record

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 //?** Exit if Invoice Date is beyond Thru Date
 CASE;

 // IF DB1.Invoice Date GT PAR.Thru Date             USR
 IF DB1.Invoice_Date > PAR.Thru_Date_USR;

 RETURN;

 ENDIF;

 // WRK.Load ID = DB1.Load ID
 WRK.Load_ID = DB1.Load_ID;

 //?** If Customer# entered, file customer# must match
 CASE;

 // IF PAR.Ship To Customer is not equal to zero
 IF PAR.Ship_To_Customer <> *ZERO;

 // AND DB1.Ship To Customer NE PAR.Ship To Customer
 AND DB1.Ship_To_Customer <> PAR.Ship_To_Customer;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Parent Cust# entered, bill to cust# must match    FP1225
 CASE;

 // IF PAR.Parent Customer is not equal to zero
 IF PAR.Parent_Customer <> *ZERO;

 // AND DB1.Bill to Customer NE PAR.Parent Customer
 AND DB1.Bill_to_Customer <> PAR.Parent_Customer;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Carrier entered, file carrier must match
 CASE;

 // IF PAR.Carrier Code is entered
 IF PAR.Carrier_Code <> *BLANK;

 // AND DB1.Carrier Code NE PAR.Carrier Code
 AND DB1.Carrier_Code <> PAR.Carrier_Code;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Salesperson entered, file salesperson must match
 CASE;

 // IF PAR.Sales Route Code is entered
 IF PAR.Sales_Route_Code <> *BLANK;

 // AND DB1.Sales Route Code NE PAR.Sales Route Code
 AND DB1.Sales_Route_Code <> PAR.Sales_Route_Code;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Co# entered, file co# must match
 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 // AND DB1.Company Number NE PAR.Company Number
 AND DB1.Company_Number <> PAR.Company_Number;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** Process this record if *Record Selected still = Yes
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Company = DB1.Company Number
 PAR.Company = DB1.Company_Number;

 //?** Load customer number if it is passed in
 CASE;

 // IF PAR.Ship To Customer is equal to zero
 IF PAR.Ship_To_Customer = *ZERO;

 // PAR.USR Customer Number = CND.equal 0
 PAR.USR_Customer_Number = *ZERO;

 //?** Load customer number if it is passed in
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Customer Number = PAR.Ship To Customer
 PAR.USR_Customer_Number = PAR.Ship_To_Customer;

 ENDIF;

 //?** Get Warehouse # from Load Detail and BOL Date from Load Header
 EXECUTE FUNCTION(RTV Excessv Frt info  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1912981;
 PARAMETER(DB1.Load_ID);
 PARAMETER(NLL.BOL_Time);
 PARAMETER(PAR.BOL_Complete_Date);
 PARAMETER(NLL.BOL_Complete_Time);
 PARAMETER(NLL.BOL_Received_Date);
 PARAMETER(NLL.BOL_Received_Time);
 PARAMETER(NLL.Deadline_Departure_Date);
 PARAMETER(NLL.Deadline_Departure_Time);
 PARAMETER(PAR.Load_U_M);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Warehouse for Orders) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1591536;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(NLL.Default_Load_Sequence);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(CHK for warehouse codes) TYPE(RTVOBJ) FILE(OPBGWKP)            AC1591545;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Warehouse_Code);
  PARAMETER(PAR.Default_Load_Sequence);
  {
   //?USER: Initialize routine

   // WRK.USR First Time = CND.Yes
   WRK.USR_First_Time = 'Y';

   // PAR.Warehouse Code = CND.Warehouse Code Blank
   PAR.Warehouse_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF WRK.USR First Time is Yes
   IF WRK.USR_First_Time = 'Y';

   // WRK.USR First Time = CND.No
   WRK.USR_First_Time = 'N';

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Warehouse Code EQ DB1.Warehouse Code
   IF PAR.Warehouse_Code = DB1.Warehouse_Code;

   // PAR.Default Load Sequence = CND.yes
   PAR.Default_Load_Sequence = 'Y';

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Default Load Sequence = CND.no
   PAR.Default_Load_Sequence = 'N';

   QUIT;

   ENDIF;

   ENDIF;

  }

  // PAR.Warehouse Code = WRK.Warehouse Code
  PAR.Warehouse_Code = WRK.Warehouse_Code;

 }

 //?** If Sel/Omit = omit and whse code matches, omit the warehouse
 //?** If Sel/Omit = select and whse code matches, select the warehouse
 //?** and skip any other warehouses
 EXECUTE FUNCTION(RTV Multi Warehouses   IF) TYPE(EXCINTFUN)                     AC1931189;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 PARAMETER(PAR.USR_Select_Omit_Flag);
 PARAMETER(LCL.Record_Selected_USR);
 {
  //?Execute internal function

  //?** Process Whse if Select/Omit flag has an entry
  CASE;

  // IF PAR.USR Select/Omit Flag is *Entered
  IF PAR.USR_Select_Omit_Flag = 'O'/'S';

  // LCL.Record Selected       USR = PAR.Record Selected       USR
  LCL.Record_Selected_USR = PAR.Record_Selected_USR;

  //?** Process based on Select or Omit
  CASE;

  // IF PAR.USR Select/Omit Flag is Omit
  IF PAR.USR_Select_Omit_Flag = 'O';

  //?Test 1st warehouse
  CASE;

  // IF PAR.USR Warehouse Code is Warehouse Code not Blank
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // AND PAR.USR Warehouse Code EQ PAR.Warehouse Code
  AND PAR.USR_Warehouse_Code = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 2nd warehouse
  CASE;

  // IF PAR.USR CDE Parm 1 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_1 <> *BLANK;

  // AND PAR.USR CDE Parm 1 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_1 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 3rd warehouse
  CASE;

  // IF PAR.USR CDE Parm 2 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_2 <> *BLANK;

  // AND PAR.USR CDE Parm 2 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_2 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 4th warehouse
  CASE;

  // IF PAR.USR CDE Parm 3 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_3 <> *BLANK;

  // AND PAR.USR CDE Parm 3 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_3 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 5th warehouse
  CASE;

  // IF PAR.USR CDE Parm 4 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_4 <> *BLANK;

  // AND PAR.USR CDE Parm 4 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_4 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 6th warehouse
  CASE;

  // IF PAR.USR CDE Parm 5 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_5 <> *BLANK;

  // AND PAR.USR CDE Parm 5 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_5 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 7th warehouse
  CASE;

  // IF PAR.USR CDE Parm 6 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_6 <> *BLANK;

  // AND PAR.USR CDE Parm 6 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_6 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 8th warehouse
  CASE;

  // IF PAR.USR CDE Parm 7 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_7 <> *BLANK;

  // AND PAR.USR CDE Parm 7 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_7 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 9th warehouse
  CASE;

  // IF PAR.USR CDE Parm 8 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_8 <> *BLANK;

  // AND PAR.USR CDE Parm 8 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_8 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 10th warehouse
  CASE;

  // IF PAR.USR CDE Parm 9 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_9 <> *BLANK;

  // AND PAR.USR CDE Parm 9 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_9 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?** Process based on Select or Omit
  // IF PAR.USR Select/Omit Flag is Select
  IF PAR.USR_Select_Omit_Flag = 'S';

  //?** Set the flag to No then set to yes if warehouse is found
  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  //?Test 1st warehouse
  CASE;

  // IF PAR.USR Warehouse Code is Warehouse Code not Blank
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // AND PAR.USR Warehouse Code EQ PAR.Warehouse Code
  AND PAR.USR_Warehouse_Code = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 2nd warehouse
  CASE;

  // IF PAR.USR CDE Parm 1 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_1 <> *BLANK;

  // AND PAR.USR CDE Parm 1 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_1 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 3rd warehouse
  CASE;

  // IF PAR.USR CDE Parm 2 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_2 <> *BLANK;

  // AND PAR.USR CDE Parm 2 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_2 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 4th warehouse
  CASE;

  // IF PAR.USR CDE Parm 3 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_3 <> *BLANK;

  // AND PAR.USR CDE Parm 3 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_3 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 5th warehouse
  CASE;

  // IF PAR.USR CDE Parm 4 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_4 <> *BLANK;

  // AND PAR.USR CDE Parm 4 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_4 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 6th warehouse
  CASE;

  // IF PAR.USR CDE Parm 5 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_5 <> *BLANK;

  // AND PAR.USR CDE Parm 5 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_5 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 7th warehouse
  CASE;

  // IF PAR.USR CDE Parm 6 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_6 <> *BLANK;

  // AND PAR.USR CDE Parm 6 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_6 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 8th warehouse
  CASE;

  // IF PAR.USR CDE Parm 7 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_7 <> *BLANK;

  // AND PAR.USR CDE Parm 7 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_7 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 9th warehouse
  CASE;

  // IF PAR.USR CDE Parm 8 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_8 <> *BLANK;

  // AND PAR.USR CDE Parm 8 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_8 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 10th warehouse
  CASE;

  // IF PAR.USR CDE Parm 9 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_9 <> *BLANK;

  // AND PAR.USR CDE Parm 9 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_9 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  ENDIF;

  // PAR.Record Selected       USR = LCL.Record Selected       USR
  PAR.Record_Selected_USR = LCL.Record_Selected_USR;

  ENDIF;

 }

 //?** Get Load Freight Charge code and amount from Load Freight
 //?** Charge file. If record exists, write WF Excessive Freight record
 //?** Pass bill to customer number    FP1225
 EXECUTE FUNCTION(RTV LdFrt Chg for Load RT) TYPE(RTVOBJ) FILE(POBCCPP)          AC1808702;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.Company);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.LFC_Amount);
 PARAMETER(PAR.BOL_Complete_Date);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(PAR.Load_U_M);
 PARAMETER(PAR.FCG_Group_Code);
 {
  //?USER: Initialize routine

  //?***** Change Log and Comments
  DO;

  //?** 04/16/2009 LJB E00384
  //?** Load UM was added as an input parm
  //?** 05/19/2008 LJB FP1225
  //?** Pass parent customer number
  ENDDO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // WRK.Record Selected       USR = CND.yes
  WRK.Record_Selected_USR = 'Y';

  //?SEL: Freight Charge Code
  CASE;

  // IF PAR.FC Code is Entered
  IF PAR.FC_Code <> *BLANK;

  CASE;

  // IF DB1.FC Code NE PAR.FC Code
  IF DB1.FC_Code <> PAR.FC_Code;

  // WRK.Record Selected       USR = CND.no
  WRK.Record_Selected_USR = 'N';

  ENDIF;

  ENDIF;

  //?SEL: Freight Group
  CASE;

  // IF PAR.FCG Group Code is Entered
  IF PAR.FCG_Group_Code <> *BLANK;

  EXECUTE FUNCTION(Rtv Frt Grp Chrg Exst RT) TYPE(RTVOBJ) FILE(PMEAREP)           AC1896646;
  PARAMETER(PAR.FCG_Group_Code);
  PARAMETER(DB1.FC_Code);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  CASE;

  // IF LCL.Record Found USR is Record Not Found
  IF LCL.Record_Found_USR = 'N';

  // WRK.Record Selected       USR = CND.no
  WRK.Record_Selected_USR = 'N';

  ENDIF;

  ENDIF;

  CASE;

  // IF WRK.Record Selected       USR is yes
  IF WRK.Record_Selected_USR = 'Y';

  CASE;

  // IF PAR.Carrier Code is not entered
  IF PAR.Carrier_Code = *BLANK;

  // WRK.Carrier Code = DB1.LFC Carrier Code
  WRK.Carrier_Code = DB1.LFC_Carrier_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Carrier Code = PAR.Carrier Code
  WRK.Carrier_Code = PAR.Carrier_Code;

  ENDIF;

  //?** Pass parent customer number  FP1225
  EXECUTE FUNCTION(CRT WF Excess Frt Chgs CR) TYPE(CRTOBJ) FILE(PMAICPP)          AC1808517;
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.FC_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Carrier_Code);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(DB1.LFC_Amount);
  PARAMETER(PAR.BOL_Complete_Date);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Parent_Customer);
  PARAMETER(PAR.Load_U_M);
  ENDIF;

 }

 ENDIF;

}


//?** Build work file based on the option
// IF PAR.Select Option is Option 4
IF PAR.Select_Option = '4';

//?** by Warehouse
EXECUTE FUNCTION(RTV InvDt/Whs/Inv      RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1907736;
PARAMETER(PAR.Invoice_Date);
PARAMETER(PAR.FC_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Salesperson_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Thru_Date_USR);
PARAMETER(PAR.FCG_Group_Code);
PARAMETER(PAR.USR_Warehouse_Code);
PARAMETER(PAR.USR_CDE_Parm_1);
PARAMETER(PAR.USR_CDE_Parm_2);
PARAMETER(PAR.USR_CDE_Parm_3);
PARAMETER(PAR.USR_CDE_Parm_4);
PARAMETER(PAR.USR_CDE_Parm_5);
PARAMETER(PAR.USR_CDE_Parm_6);
PARAMETER(PAR.USR_CDE_Parm_7);
PARAMETER(PAR.USR_CDE_Parm_8);
PARAMETER(PAR.USR_CDE_Parm_9);
PARAMETER(PAR.USR_Select_Omit_Flag);
{
 //?USER: Process Data record

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 //?** Exit if Invoice Date is beyond Thru Date
 CASE;

 // IF DB1.Invoice Date GT PAR.Thru Date             USR
 IF DB1.Invoice_Date > PAR.Thru_Date_USR;

 RETURN;

 ENDIF;

 // WRK.Load ID = DB1.Load ID
 WRK.Load_ID = DB1.Load_ID;

 EXECUTE FUNCTION(RTV Parent Customer    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1225254;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Parent_Customer);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Get BOL Date & U/M from Load Header
 EXECUTE FUNCTION(RTV Excessv Frt info  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1912981;
 PARAMETER(DB1.Load_ID);
 PARAMETER(NLL.BOL_Time);
 PARAMETER(PAR.BOL_Complete_Date);
 PARAMETER(NLL.BOL_Complete_Time);
 PARAMETER(NLL.BOL_Received_Date);
 PARAMETER(NLL.BOL_Received_Time);
 PARAMETER(NLL.Deadline_Departure_Date);
 PARAMETER(NLL.Deadline_Departure_Time);
 PARAMETER(PAR.Load_U_M);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** If Co# entered, co# must match
 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 // AND DB1.Company Number NE PAR.Company Number
 AND DB1.Company_Number <> PAR.Company_Number;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Ship To entered, ship to must match
 CASE;

 // IF PAR.Ship To Customer is not equal to zero
 IF PAR.Ship_To_Customer <> *ZERO;

 // AND DB1.Ship To Customer NE PAR.Ship To Customer
 AND DB1.Ship_To_Customer <> PAR.Ship_To_Customer;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Carrier entered, file carrier must match
 CASE;

 // IF PAR.Carrier Code is entered
 IF PAR.Carrier_Code <> *BLANK;

 // AND DB1.Carrier Code NE PAR.Carrier Code
 AND DB1.Carrier_Code <> PAR.Carrier_Code;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If Salesperson entered, sales route must match
 CASE;

 // IF PAR.Salesperson Code is entered
 IF PAR.Salesperson_Code <> *BLANK;

 // AND DB1.Sales Route Code NE PAR.Salesperson Code
 AND DB1.Sales_Route_Code <> PAR.Salesperson_Code;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?** If *Record Selected = Yes, if Select/Omit whse, then process whses
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 //?** If Select/Omit is entered, process only the selected whse(s)
 CASE;

 // IF PAR.USR Select/Omit Flag is *Entered
 IF PAR.USR_Select_Omit_Flag = 'O'/'S';

 //?** If Sel/Omit = omit and whse code matches, omit the warehouse
 //?** If Sel/Omit = select and whse code matches, select the warehouse
 //?** and skip any other warehouses
 EXECUTE FUNCTION(RTV Multi Warehouses   IF) TYPE(EXCINTFUN)                     AC1931189;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 PARAMETER(PAR.USR_Select_Omit_Flag);
 PARAMETER(LCL.Record_Selected_USR);
 {
  //?Execute internal function

  //?** Process Whse if Select/Omit flag has an entry
  CASE;

  // IF PAR.USR Select/Omit Flag is *Entered
  IF PAR.USR_Select_Omit_Flag = 'O'/'S';

  // LCL.Record Selected       USR = PAR.Record Selected       USR
  LCL.Record_Selected_USR = PAR.Record_Selected_USR;

  //?** Process based on Select or Omit
  CASE;

  // IF PAR.USR Select/Omit Flag is Omit
  IF PAR.USR_Select_Omit_Flag = 'O';

  //?Test 1st warehouse
  CASE;

  // IF PAR.USR Warehouse Code is Warehouse Code not Blank
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // AND PAR.USR Warehouse Code EQ PAR.Warehouse Code
  AND PAR.USR_Warehouse_Code = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 2nd warehouse
  CASE;

  // IF PAR.USR CDE Parm 1 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_1 <> *BLANK;

  // AND PAR.USR CDE Parm 1 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_1 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 3rd warehouse
  CASE;

  // IF PAR.USR CDE Parm 2 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_2 <> *BLANK;

  // AND PAR.USR CDE Parm 2 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_2 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 4th warehouse
  CASE;

  // IF PAR.USR CDE Parm 3 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_3 <> *BLANK;

  // AND PAR.USR CDE Parm 3 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_3 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 5th warehouse
  CASE;

  // IF PAR.USR CDE Parm 4 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_4 <> *BLANK;

  // AND PAR.USR CDE Parm 4 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_4 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 6th warehouse
  CASE;

  // IF PAR.USR CDE Parm 5 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_5 <> *BLANK;

  // AND PAR.USR CDE Parm 5 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_5 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 7th warehouse
  CASE;

  // IF PAR.USR CDE Parm 6 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_6 <> *BLANK;

  // AND PAR.USR CDE Parm 6 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_6 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 8th warehouse
  CASE;

  // IF PAR.USR CDE Parm 7 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_7 <> *BLANK;

  // AND PAR.USR CDE Parm 7 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_7 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 9th warehouse
  CASE;

  // IF PAR.USR CDE Parm 8 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_8 <> *BLANK;

  // AND PAR.USR CDE Parm 8 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_8 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?Test 10th warehouse
  CASE;

  // IF PAR.USR CDE Parm 9 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_9 <> *BLANK;

  // AND PAR.USR CDE Parm 9 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_9 = PAR.Warehouse_Code;

  // AND LCL.Record Selected       USR is yes
  AND LCL.Record_Selected_USR = 'Y';

  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  ENDIF;

  //?** Process based on Select or Omit
  // IF PAR.USR Select/Omit Flag is Select
  IF PAR.USR_Select_Omit_Flag = 'S';

  //?** Set the flag to No then set to yes if warehouse is found
  // LCL.Record Selected       USR = CND.no
  LCL.Record_Selected_USR = 'N';

  //?Test 1st warehouse
  CASE;

  // IF PAR.USR Warehouse Code is Warehouse Code not Blank
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // AND PAR.USR Warehouse Code EQ PAR.Warehouse Code
  AND PAR.USR_Warehouse_Code = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 2nd warehouse
  CASE;

  // IF PAR.USR CDE Parm 1 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_1 <> *BLANK;

  // AND PAR.USR CDE Parm 1 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_1 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 3rd warehouse
  CASE;

  // IF PAR.USR CDE Parm 2 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_2 <> *BLANK;

  // AND PAR.USR CDE Parm 2 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_2 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 4th warehouse
  CASE;

  // IF PAR.USR CDE Parm 3 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_3 <> *BLANK;

  // AND PAR.USR CDE Parm 3 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_3 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 5th warehouse
  CASE;

  // IF PAR.USR CDE Parm 4 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_4 <> *BLANK;

  // AND PAR.USR CDE Parm 4 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_4 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 6th warehouse
  CASE;

  // IF PAR.USR CDE Parm 5 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_5 <> *BLANK;

  // AND PAR.USR CDE Parm 5 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_5 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 7th warehouse
  CASE;

  // IF PAR.USR CDE Parm 6 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_6 <> *BLANK;

  // AND PAR.USR CDE Parm 6 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_6 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 8th warehouse
  CASE;

  // IF PAR.USR CDE Parm 7 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_7 <> *BLANK;

  // AND PAR.USR CDE Parm 7 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_7 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 9th warehouse
  CASE;

  // IF PAR.USR CDE Parm 8 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_8 <> *BLANK;

  // AND PAR.USR CDE Parm 8 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_8 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  //?Test 10th warehouse
  CASE;

  // IF PAR.USR CDE Parm 9 is Warehouse Code not Blank
  IF PAR.USR_CDE_Parm_9 <> *BLANK;

  // AND PAR.USR CDE Parm 9 EQ PAR.Warehouse Code
  AND PAR.USR_CDE_Parm_9 = PAR.Warehouse_Code;

  // LCL.Record Selected       USR = CND.yes
  LCL.Record_Selected_USR = 'Y';

  ENDIF;

  ENDIF;

  // PAR.Record Selected       USR = LCL.Record Selected       USR
  PAR.Record_Selected_USR = LCL.Record_Selected_USR;

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?** Continue to process if select flag is still Yes
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 //?** Get Load Freight Charge code and amount from Load Freight
 //?** Charge file. If record exists, write WF Excessive Freight record
 //?** Pass parent customer number
 EXECUTE FUNCTION(RTV LdFrt Chg for Load RT) TYPE(RTVOBJ) FILE(POBCCPP)          AC1808702;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.FC_Code);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.LFC_Amount);
 PARAMETER(PAR.BOL_Complete_Date);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Parent_Customer);
 PARAMETER(PAR.Load_U_M);
 PARAMETER(PAR.FCG_Group_Code);
 {
  //?USER: Initialize routine

  //?***** Change Log and Comments
  DO;

  //?** 04/16/2009 LJB E00384
  //?** Load UM was added as an input parm
  //?** 05/19/2008 LJB FP1225
  //?** Pass parent customer number
  ENDDO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // WRK.Record Selected       USR = CND.yes
  WRK.Record_Selected_USR = 'Y';

  //?SEL: Freight Charge Code
  CASE;

  // IF PAR.FC Code is Entered
  IF PAR.FC_Code <> *BLANK;

  CASE;

  // IF DB1.FC Code NE PAR.FC Code
  IF DB1.FC_Code <> PAR.FC_Code;

  // WRK.Record Selected       USR = CND.no
  WRK.Record_Selected_USR = 'N';

  ENDIF;

  ENDIF;

  //?SEL: Freight Group
  CASE;

  // IF PAR.FCG Group Code is Entered
  IF PAR.FCG_Group_Code <> *BLANK;

  EXECUTE FUNCTION(Rtv Frt Grp Chrg Exst RT) TYPE(RTVOBJ) FILE(PMEAREP)           AC1896646;
  PARAMETER(PAR.FCG_Group_Code);
  PARAMETER(DB1.FC_Code);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

  }

  CASE;

  // IF LCL.Record Found USR is Record Not Found
  IF LCL.Record_Found_USR = 'N';

  // WRK.Record Selected       USR = CND.no
  WRK.Record_Selected_USR = 'N';

  ENDIF;

  ENDIF;

  CASE;

  // IF WRK.Record Selected       USR is yes
  IF WRK.Record_Selected_USR = 'Y';

  CASE;

  // IF PAR.Carrier Code is not entered
  IF PAR.Carrier_Code = *BLANK;

  // WRK.Carrier Code = DB1.LFC Carrier Code
  WRK.Carrier_Code = DB1.LFC_Carrier_Code;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Carrier Code = PAR.Carrier Code
  WRK.Carrier_Code = PAR.Carrier_Code;

  ENDIF;

  //?** Pass parent customer number  FP1225
  EXECUTE FUNCTION(CRT WF Excess Frt Chgs CR) TYPE(CRTOBJ) FILE(PMAICPP)          AC1808517;
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.FC_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(WRK.Carrier_Code);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(DB1.LFC_Amount);
  PARAMETER(PAR.BOL_Complete_Date);
  PARAMETER(PAR.Invoice_Number);
  PARAMETER(PAR.Invoice_Date);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Parent_Customer);
  PARAMETER(PAR.Load_U_M);
  ENDIF;

 }

 ENDIF;

}


ENDIF;

//?***** Change Log and Comments
DO;

//?** 04/16/2009 LJB E00384
//?** Added Load UM as a parm, rtv from the Load ID, add to the wf crt
ENDDO;

