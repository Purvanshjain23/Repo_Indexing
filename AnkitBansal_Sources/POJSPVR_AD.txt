// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POJSPVR
// ?Date: 14.08.2025 Time: 03:37:37
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(PAR.Warehouse_Code_Assigned);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Company Ctl Vals  XF.
CALL PROGRAM(Rtv Company Ctl Vals  XF) ('PNOQXFR');
PARAMETER(LCL.Shipping_Company);
PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
PARAMETER(LCL.Partial_Load_Max_Lbs_USR);

//?USER: Load screen

// DTL.Scheduled Ship Date = PAR.Scheduled Ship Date
DTL.Scheduled_Ship_Date = PAR.Scheduled_Ship_Date;

// DTL.Requested Delivery Date = PAR.Req Delivery Date
DTL.Requested_Delivery_Date = PAR.Req_Delivery_Date;

// DTL.Load ID = PAR.Load ID
DTL.Load_ID = PAR.Load_ID;

// DTL.Status - Y or N = CND.yes
DTL.Status_Y_or_N = 'Y';

//?Get Warehouse code/type/UM for existing ordrs on the load
// LCL.Boxes Qty for a Load USR = CON.*ZERO
LCL.Boxes_Qty_for_a_Load_USR = *ZERO;

//?05/11/04 SLM PKTR01 Multi-Company - remove Company RST or Pos
EXECUTE FUNCTION(RTV UM/Whs Code f/Lmt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1620158;
PARAMETER(*ZERO);
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Slot_Type_f_load_USR);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
PARAMETER(LCL.Boxes_Qty_for_a_Load_USR);
PARAMETER(LCL.USR_Weight_9_1_3);
{
 //?USER: Initialize routine

 //?05/13/04 SLM PKTR01 Multi-Company - Funt chg to rmv Co RST or Pos
 // PAR.USR Unit of Measure = CON.*BLANK
 PAR.USR_Unit_of_Measure = *BLANK;

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?6/12/01 Accum Box Qty for Slotting consideration
 EXECUTE FUNCTION(RTV UM/Whs Code Lmt,Bx RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625251;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.USR_Unit_of_Measure);
 PARAMETER(PAR.Boxes_Qty_for_a_Load_USR);
 PARAMETER(PAR.USR_Weight_9_1_3);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  //?PF3280 -- add "Cases" to the case-stmt
  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  // OR DB1.U/M - Ordered is EQ Boxes
  OR DB1.U_M_Ordered = 'BX';

  // OR DB1.U/M - Ordered is Mixed
  OR DB1.U_M_Ordered = 'MX';

  // OR DB1.U/M - Ordered is Cases
  OR DB1.U_M_Ordered = 'CS';

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S17054 DN 04/09/21-Beyond this point, changed all 'U/M - Ordered'
  //?  to reference LCL Context instead of DB1.
  //?S17054 DN 04/09/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  CASE;

  // IF LCL.U/M - Ordered is Cases
  IF LCL.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  ENDIF;

  //?Accumulate the Box Quantity for slotting consideration 6/12/01
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
  PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  // PAR.USR Weight   9.1  3 = PAR.USR Weight   9.1  3 + DB1.Weight Scheduled
  PAR.USR_Weight_9_1_3 = PAR.USR_Weight_9_1_3 + DB1.Weight_Scheduled;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.U/M - Ordered = CND.Mixed
  WRK.U_M_Ordered = 'MX';

  // PAR.USR Unit of Measure = WRK.U/M - Ordered
  PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(PAR.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Fresh Orders on a Load make the Load FRESH.
 CASE;

 // IF LCL.Warehouse Type is Fresh
 IF LCL.Warehouse_Type = 'FR';

 CASE;

 // IF PAR.Warehouse Type is Frozen
 IF PAR.Warehouse_Type = 'FZ';

 // OR PAR.Warehouse Type is Equal blank
 OR PAR.Warehouse_Type = *BLANK;

 // PAR.Warehouse Type = LCL.Warehouse Type
 PAR.Warehouse_Type = LCL.Warehouse_Type;

 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 ENDIF;

 //?Fresh Orders on a Load make the Load FRESH.
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Type is Equal blank
 IF PAR.Warehouse_Type = *BLANK;

 // PAR.Warehouse Type = LCL.Warehouse Type
 PAR.Warehouse_Type = LCL.Warehouse_Type;

 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 ENDIF;

 ENDIF;

 // WRK.U/M - Ordered = PAR.USR Unit of Measure
 WRK.U_M_Ordered = PAR.USR_Unit_of_Measure;

 CASE;

 // IF PAR.Export Status is Not Yes
 IF PAR.Export_Status = *BLANK/'N';

 // AND DB1.Export Status is yes
 AND DB1.Export_Status = 'Y';

 // PAR.Export Status = DB1.Export Status
 PAR.Export_Status = DB1.Export_Status;

 ENDIF;

}


//?Update slot type if it is blanks
CASE;

// IF PAR.Slot Type f/New Ords USR EQ WRK.Blank 6 USR
IF PAR.Slot_Type_f_New_Ords_USR = WRK.Blank_6_USR;

// PAR.Slot Type f/New Ords USR = LCL.Slot Type f/load USR
PAR.Slot_Type_f_New_Ords_USR = LCL.Slot_Type_f_load_USR;

ENDIF;

//?Set Warehouse for Load based on orders already assigned, and to be assgned
CASE;

// IF LCL.Warehouse Type NE PAR.Warehouse Type Assigned
IF LCL.Warehouse_Type <> PAR.Warehouse_Type_Assigned;

CASE;

// IF PAR.Warehouse Type Assigned is Fresh
IF PAR.Warehouse_Type_Assigned = 'FR';

// OR LCL.Warehouse Type is Equal blank
OR LCL.Warehouse_Type = *BLANK;

// LCL.Warehouse Type = PAR.Warehouse Type Assigned
LCL.Warehouse_Type = PAR.Warehouse_Type_Assigned;

// LCL.Warehouse Code = PAR.Warehouse Code Assigned
LCL.Warehouse_Code = PAR.Warehouse_Code_Assigned;

ENDIF;

ENDIF;

// LCL.Boxes Qty for a Load USR = LCL.Boxes Qty for a Load USR + PAR.Boxes Total Quantity
LCL.Boxes_Qty_for_a_Load_USR = LCL.Boxes_Qty_for_a_Load_USR + PAR.Boxes_Total_Quantity;

EXECUTE FUNCTION(Clc Load Slot Type    IF) TYPE(EXCINTFUN)                      AC1625751;
PARAMETER(LCL.Slot_Type_f_load_USR);
PARAMETER(PAR.Slot_Type_f_New_Ords_USR);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Boxes_Qty_for_a_Load_USR);
{
 //?Execute internal function

 //?RMC E2706 9/11/13- No more MX, if MX and boxqty<BOXLOAD Comp value,
 //?   then CB Else BX
 //?Set UM based on Orders to be assgnd- Priority- CB,EX,BX,MX
 CASE;

 // IF PAR.Slot Type f/New Ords USR is Combo
 IF PAR.Slot_Type_f_New_Ords_USR = 'CB';

 // AND PAR.Slot Type f/load USR is Combo
 AND ( PAR.Slot_Type_f_load_USR = 'CB';

 // OR PAR.Slot Type f/load USR EQ WRK.Blank 6 USR
 OR PAR.Slot_Type_f_load_USR = WRK.Blank_6_USR );

 // PAR.Slot Type f/load USR = CND.Combo
 PAR.Slot_Type_f_load_USR = 'CB';

 //?Set UM based on Orders to be assgnd- Priority- CB,EX,BX,MX
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Slot Type f/New Ords USR is Export
 IF PAR.Slot_Type_f_New_Ords_USR = 'EX';

 // OR PAR.Slot Type f/load USR is Export
 OR PAR.Slot_Type_f_load_USR = 'EX';

 // OR PAR.Export Status is yes
 OR PAR.Export_Status = 'Y';

 // PAR.Slot Type f/load USR = CND.Export
 PAR.Slot_Type_f_load_USR = 'EX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Slot Type f/New Ords USR is Box
 IF PAR.Slot_Type_f_New_Ords_USR = 'BX';

 // AND PAR.Slot Type f/load USR is Box
 AND ( PAR.Slot_Type_f_load_USR = 'BX';

 // OR PAR.Slot Type f/load USR EQ WRK.Blank 6 USR
 OR PAR.Slot_Type_f_load_USR = WRK.Blank_6_USR );

 // PAR.Slot Type f/load USR = CND.Box
 PAR.Slot_Type_f_load_USR = 'BX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Slot Type f/load USR = CND.Mixed
 PAR.Slot_Type_f_load_USR = 'MX';

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF PAR.Slot Type f/load USR is Mixed
 IF PAR.Slot_Type_f_load_USR = 'MX';

 EXECUTE FUNCTION(RTV Default Co No App IF) TYPE(EXCINTFUN)                      AC1628378;
 PARAMETER(LCL.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(JOB.*USER);
  PARAMETER(NLL.Allow_Multi_Company);
  PARAMETER(NLL.Default_Printer);
  PARAMETER(NLL.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Company Number is Equal to zero
  IF LCL.Company_Number = *ZERO;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV First Default Co  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1628379;
  PARAMETER(JOB.*USER);
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV First Default Co  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1628379;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Company_Number);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
 PARAMETER(LCL.Company_Number);
 PARAMETER('BOXLOAD');
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
 IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

 // PAR.Slot Type f/load USR = CND.Combo
 PAR.Slot_Type_f_load_USR = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Slot Type f/load USR = CND.Box
 PAR.Slot_Type_f_load_USR = 'BX';

 ENDIF;

 ENDIF;

}


// DTL.Warehouse Code = LCL.Warehouse Code
DTL.Warehouse_Code = LCL.Warehouse_Code;

EXECUTE FUNCTION(RTV Warehouse Slot Typ RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1619241;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(LCL.WHS_Slotting_Limit_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** RTV Day of Week to use for later retrieve          E000233
EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
PARAMETER(LCL.Shipping_Company);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.Accounting_Period_Code);
PARAMETER(LCL.Day_of_Week);
PARAMETER(LCL.Week_Number);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


//?Get Load and Weight Limits from Control file
CASE;

// IF LCL.WHS Slotting Limit Type is By Load
IF LCL.WHS_Slotting_Limit_Type = 'L';

//?** Use Day of Week instead of effective date          E000233
EXECUTE FUNCTION(Rtv Load Slotting Sch RT) TYPE(RTVOBJ) FILE(POA3REP)           AC1619252;
PARAMETER(LCL.Shipping_Company);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Day_of_Week);
PARAMETER(DTL.Slot_Limit_for_Export);
PARAMETER(DTL.Slot_Limit_for_Combo);
PARAMETER(DTL.Slot_Limit_for_Box_Other);
PARAMETER(NLL.Weight_Limit_for_Export);
PARAMETER(NLL.Weight_Limit_for_Combo);
PARAMETER(NLL.Weight_Limit_for_Box_Othr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Get Load and Weight Limits from Control file
// IF LCL.WHS Slotting Limit Type is By Weight
IF LCL.WHS_Slotting_Limit_Type = 'W';

//?** Use Day of Week instead of effective date          E000233
EXECUTE FUNCTION(Rtv Load Slotting Sch RT) TYPE(RTVOBJ) FILE(POA3REP)           AC1619252;
PARAMETER(LCL.Shipping_Company);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Day_of_Week);
PARAMETER(NLL.Slot_Limit_for_Export);
PARAMETER(NLL.Slot_Limit_for_Combo);
PARAMETER(NLL.Slot_Limit_for_Box_Other);
PARAMETER(DTL.Weight_Limit_for_Export);
PARAMETER(DTL.Weight_Limit_for_Combo);
PARAMETER(DTL.Weight_Limit_for_Box_Othr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

// DTL.LSSA Load Slot Type = LCL.Slot Type f/load USR
DTL.LSSA_Load_Slot_Type = LCL.Slot_Type_f_load_USR;

// LCL.USR Weight = LCL.USR Weight   9.1  3 + PAR.Order Weight Assigned
LCL.USR_Weight = LCL.USR_Weight_9_1_3 + PAR.Order_Weight_Assigned;

//?Get Sched Load Slots.
CASE;

// IF LCL.WHS Slotting Limit Type is By Load
IF LCL.WHS_Slotting_Limit_Type = 'L';

// DTL.Export Load Limit = CON.*ZERO
DTL.Export_Load_Limit = *ZERO;

// DTL.Combo Load Limit = CON.*ZERO
DTL.Combo_Load_Limit = *ZERO;

// DTL.Box Load Limit        USR = CON.*ZERO
DTL.Box_Load_Limit_USR = *ZERO;

EXECUTE FUNCTION(RTV Limit Loads f/Slot RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1619257;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(PAR.Load_ID);
PARAMETER(DTL.Export_Load_Limit);
PARAMETER(DTL.Combo_Load_Limit);
PARAMETER(DTL.Box_Load_Limit_USR);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 // PAR.Export Load Limit = CON.*ZERO
 PAR.Export_Load_Limit = *ZERO;

 // PAR.Combo Load Limit = CON.*ZERO
 PAR.Combo_Load_Limit = *ZERO;

 // PAR.Box Load Limit        USR = CON.*ZERO
 PAR.Box_Load_Limit_USR = *ZERO;

 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(LCL.Shipping_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Retrieve needed values from System Values file     E000233
 // Call program Rtv Company Ctl Vals  XF.
 CALL PROGRAM(Rtv Company Ctl Vals  XF) ('PNOQXFR');
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 PARAMETER(LCL.Partial_Load_Max_Lbs_USR);

 //?change log
 DO;

 //?02/03/2010 LJB E000233
 //?   Retrieve needed values from System Values file
 //?08/03/07 RMC dly029 Count Load as Export if export order whse
 //?   matches ShipFrom Whse on the load   -- per jim n, steve b
 //?05/11/04 SLM PKTR01 Multi-Company - Order Header TRG Remove Co
 //?   from Logical View
 //?05/17/04 RMC PKTR01 Multi-Company - Use Shipping Co from Whse
 ENDDO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?RMC 9/11/13 E2709
 //?Check for Mixed having box qty>BOXLOAD qty, if yes, then BX, else CB
 //?Change Priority 3/14/01    RMC
 //?Check for Mixed having a box qty > 60 to stay BX   6/12/01    RMC
 //?Per Steve Burke - 6/27/01
 //?Dont check just for Prepaid Trucks.  Collect and Prepaid trucks included
 //?If Partial Load (<= 20000 lbs) dont count.
 //?Priority :  Combo , Export, Box
 CASE;

 // IF DB1.Load Type is Regular
 IF DB1.Load_Type = 'R';

 // AND DB1.Total Load Order Weight GT LCL.Partial Load Max Lbs USR
 AND DB1.Total_Load_Order_Weight > LCL.Partial_Load_Max_Lbs_USR;

 // AND DB1.Shipping Method is Not Rail
 AND DB1.Shipping_Method = 'CT'/'PT';

 //?Update load found so this load wont be counted again in the calling pgm.
 CASE;

 // IF DB1.Load ID EQ PAR.Load ID
 IF DB1.Load_ID = PAR.Load_ID;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 ENDIF;

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 //?05/11/04 SLM PKTR01 Multi-Company - Function chgd-remove Company RST/Pos
 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1625242;
 PARAMETER(*ZERO);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.U_M_Ordered);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  //?05/13/04 SLM PKTR01 Multi-Company - Funt chg to rmv Co RST or Pos
  // PAR.USR Unit of Measure = CON.*BLANK
  PAR.USR_Unit_of_Measure = *BLANK;

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(1);
  PARAMETER(PAR.USR_Unit_of_Measure);
  PARAMETER(PAR.Boxes_Total_Quantity);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
   //?  to reference LCL Context instead of DB1.
   //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.U/M - Ordered = DB1.U/M - Ordered
   LCL.U_M_Ordered = DB1.U_M_Ordered;

   CASE;

   // IF LCL.U/M - Ordered is Cases
   IF LCL.U_M_Ordered = 'CS';

   // LCL.U/M - Ordered = CND.EQ Boxes
   LCL.U_M_Ordered = 'BX';

   ENDIF;

   ENDIF;

   //?Accumulate the Box Quantity for slotting consideration  6/12/01
   CASE;

   // IF LCL.U/M - Ordered is EQ Boxes
   IF LCL.U_M_Ordered = 'BX';

   // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
   PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

   ENDIF;

   CASE;

   // IF PAR.USR Unit of Measure is *Blank
   IF PAR.USR_Unit_of_Measure = *BLANK;

   // PAR.USR Unit of Measure = LCL.U/M - Ordered
   PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
   IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Unit of Measure = CND.Mixed
   PAR.USR_Unit_of_Measure = 'MX';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?USER: Exit processing

  //?RMC E2709 added here so it wont need to be in every calling pgm
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 // PAR.Combo Load Limit = PAR.Combo Load Limit + CON.1
 PAR.Combo_Load_Limit = PAR.Combo_Load_Limit + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Export Status Dft = DB1.Export Status
 LCL.Export_Status_Dft = DB1.Export_Status;

 //?Count Load as Export if order whse = Ship-From-Whse & Export 8/3/07
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 //?See if export order whse matches load Shipfrom whse  08/03/07 RMC
 //?For example a load could be export sts=Y and ship from whse is GP1, but
 //?there are multiple orders, and the one that is export is out of CF1
 //? in that case, dont count the load as export- per Steve B and Jim Norris
 // Call program RTV ExpOrd Whse for LD XF.
 CALL PROGRAM(RTV ExpOrd Whse for LD XF) ('PMK2XFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(LCL.Export_Status_Dft);

 ENDIF;

 CASE;

 // IF LCL.Export Status Dft is yes
 IF LCL.Export_Status_Dft = 'Y';

 // PAR.Export Load Limit = PAR.Export Load Limit + CON.1
 PAR.Export_Load_Limit = PAR.Export_Load_Limit + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Box Load Limit        USR = PAR.Box Load Limit        USR + CON.1
 PAR.Box_Load_Limit_USR = PAR.Box_Load_Limit_USR + 1;

 ENDIF;

 ENDIF;

 ENDIF;

}


ENDIF;

//?Get Sched Weight Slots.
CASE;

// IF LCL.WHS Slotting Limit Type is By Weight
IF LCL.WHS_Slotting_Limit_Type = 'W';

// LCL.Weight Scheduled USR = CON.*ZERO
LCL.Weight_Scheduled_USR = *ZERO;

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv OrderWt f/ShpDate RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1610091;
PARAMETER(LCL.Shipping_Company);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Slot_Type_f_New_Ords_USR);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(LCL.Weight_Scheduled_USR);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Slot_Type_f_load_USR);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
PARAMETER(PAR.Load_ID);
{
 //?USER: Initialize routine

 //?RMC 10/02/07 set return code to *normal if no rcd found- not an error
 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 CASE;

 // IF DB1.Order Number NE WRK.Order Number Saved USR
 IF DB1.Order_Number <> WRK.Order_Number_Saved_USR;

 EXECUTE FUNCTION(RTV Load ID,shp mth   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1620457;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(LCL.Export_Status);
 PARAMETER(LCL.Load_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S17054 DN 04/07/21-Count Cases as Boxes. Replaced function with
 //?  'RTV UM/Whs Code-Add CS RT'.
 EXECUTE FUNCTION(RTV UM/Whs Code-Add CS RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2196569;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(LCL.USR_Warehouse_Code);
 PARAMETER(LCL.USR_Unit_of_Measure);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  // LCL.Boxes Total Quantity = CON.*ZERO
  LCL.Boxes_Total_Quantity = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  //?PF3280 -- add "Cases" to the case-stmt
  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  // OR DB1.U/M - Ordered is EQ Boxes
  OR DB1.U_M_Ordered = 'BX';

  // OR DB1.U/M - Ordered is Mixed
  OR DB1.U_M_Ordered = 'MX';

  // OR DB1.U/M - Ordered is Cases
  OR DB1.U_M_Ordered = 'CS';

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S17054 DN 04/06/21-Beyond this point, changed all 'U/M - Ordered'
  //?  to reference LCL Context instead of DB1.
  //?S17054 DN 04/06/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  CASE;

  // IF LCL.U/M - Ordered is Cases
  IF LCL.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  ENDIF;

  //?Sum for later check
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + DB1.Quantity Ordered
  LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.U/M - Ordered = CND.Mixed
  WRK.U_M_Ordered = 'MX';

  // PAR.USR Unit of Measure = WRK.U/M - Ordered
  PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?E2709 RMC 9/12/13  Classify as BX/CB - never MX
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 // WRK.Order Number Saved USR = DB1.Order Number
 WRK.Order_Number_Saved_USR = DB1.Order_Number;

 ENDIF;

 CASE;

 // IF LCL.Load ID is Blank
 IF LCL.Load_ID = *ZERO;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 CASE;

 // IF LCL.Shipping Method is Rail
 IF LCL.Shipping_Method = 'CR'/'PR';

 // OR LCL.Load Type is Not Regular
 OR LCL.Load_Type = *BLANK/'B';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?Priority: CB,EX,BX
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 CASE;

 // IF PAR.LSSA Load Slot Type is Combo
 IF PAR.LSSA_Load_Slot_Type = 'CB';

 CASE;

 // IF LCL.USR Unit of Measure is Combos
 IF LCL.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.LSSA Load Slot Type is Export
 IF PAR.LSSA_Load_Slot_Type = 'EX';

 CASE;

 // IF LCL.Export Status is Not Yes
 IF LCL.Export_Status = *BLANK/'N';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 CASE;

 // IF PAR.LSSA Load Slot Type is Box
 IF PAR.LSSA_Load_Slot_Type = 'BX';

 CASE;

 // IF LCL.USR Unit of Measure is Boxed
 IF LCL.USR_Unit_of_Measure = 'BX';

 // OR LCL.USR Unit of Measure is Mixed
 OR LCL.USR_Unit_of_Measure = 'MX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 // PAR.Weight Scheduled USR = PAR.Weight Scheduled USR + DB1.Weight Scheduled
 PAR.Weight_Scheduled_USR = PAR.Weight_Scheduled_USR + DB1.Weight_Scheduled;

 //?Update load found so this load wont be counted again in the calling pgm.
 CASE;

 // IF PAR.Load ID EQ LCL.Load ID
 IF PAR.Load_ID = LCL.Load_ID;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 ENDIF;

 ENDIF;

}


ENDIF;

// LCL.Display Partial Flag = CND.No
LCL.Display_Partial_Flag = 'N';

//?Check for Load Limit exceeded.
CASE;

// IF LCL.WHS Slotting Limit Type is By Load
IF LCL.WHS_Slotting_Limit_Type = 'L';

CASE;

// IF LCL.USR Weight GT LCL.Partial Load Max Lbs USR
IF LCL.USR_Weight > LCL.Partial_Load_Max_Lbs_USR;

//?Check for limit being exceeded
CASE;

// IF LCL.Slot Type f/load USR is Export
IF LCL.Slot_Type_f_load_USR = 'EX';

//?Add this load to load total if it's a new load
CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Not Found
IF LCL.Record_Found_OrdDtlUSR = 'N';

// DTL.Export Load Limit = DTL.Export Load Limit + CON.1
DTL.Export_Load_Limit = DTL.Export_Load_Limit + 1;

ENDIF;

//?Export Load Info Message
CASE;

// IF DTL.Export Load Limit GT DTL.Slot Limit for Export
IF DTL.Export_Load_Limit > DTL.Slot_Limit_for_Export;

// Send error message - 'No Shipping Slots Available.'
ERROR(USR3032);

// DTL.Status - Y or N = CND.no
DTL.Status_Y_or_N = 'N';

ENDIF;

//?Check for limit being exceeded
// IF LCL.Slot Type f/load USR is Box
IF LCL.Slot_Type_f_load_USR = 'BX';

//?add this load to load total
CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Not Found
IF LCL.Record_Found_OrdDtlUSR = 'N';

// DTL.Box Load Limit        USR = DTL.Box Load Limit        USR + CON.1
DTL.Box_Load_Limit_USR = DTL.Box_Load_Limit_USR + 1;

ENDIF;

//?Box Load Info Message
CASE;

// IF DTL.Box Load Limit        USR GT DTL.Slot Limit for Box/Other
IF DTL.Box_Load_Limit_USR > DTL.Slot_Limit_for_Box_Other;

// Send error message - 'No Shipping Slots Available.'
ERROR(USR3032);

// DTL.Status - Y or N = CND.no
DTL.Status_Y_or_N = 'N';

ENDIF;

//?Check for limit being exceeded
// IF LCL.Slot Type f/load USR is Combo
IF LCL.Slot_Type_f_load_USR = 'CB';

//?Add this load to load total
CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Not Found
IF LCL.Record_Found_OrdDtlUSR = 'N';

// DTL.Combo Load Limit = DTL.Combo Load Limit + CON.1
DTL.Combo_Load_Limit = DTL.Combo_Load_Limit + 1;

ENDIF;

//?Combo Load Info Message
CASE;

// IF DTL.Combo Load Limit GT DTL.Slot Limit for Combo
IF DTL.Combo_Load_Limit > DTL.Slot_Limit_for_Combo;

// Send error message - 'No Shipping Slots Available.'
ERROR(USR3032);

// DTL.Status - Y or N = CND.no
DTL.Status_Y_or_N = 'N';

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Partial Flag = CND.Yes
LCL.Display_Partial_Flag = 'Y';

ENDIF;

ENDIF;

//?Check for Weight Limit exceeded
CASE;

// IF LCL.WHS Slotting Limit Type is By Weight
IF LCL.WHS_Slotting_Limit_Type = 'W';

// LCL.Weight Scheduled USR = LCL.Weight Scheduled USR + PAR.Order Weight Assigned
LCL.Weight_Scheduled_USR = LCL.Weight_Scheduled_USR + PAR.Order_Weight_Assigned;

CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Not Found
IF LCL.Record_Found_OrdDtlUSR = 'N';

// LCL.Weight Scheduled USR = LCL.Weight Scheduled USR + LCL.USR Weight   9.1  3
LCL.Weight_Scheduled_USR = LCL.Weight_Scheduled_USR + LCL.USR_Weight_9_1_3;

ENDIF;

//?Weight exceeded message
CASE;

// IF LCL.Weight Scheduled USR GT DTL.Weight Limit for Export
IF LCL.Weight_Scheduled_USR > DTL.Weight_Limit_for_Export;

// Send error message - 'Sched Ship Wt exceeded for the Sched Ship Date.'
ERROR(USR3021);
MSGPARM(DTL.Scheduled_Ship_Date);

// DTL.Status - Y or N = CND.no
DTL.Status_Y_or_N = 'N';

ENDIF;

ENDIF;

// DTL.Weight Scheduled USR = LCL.Weight Scheduled USR
DTL.Weight_Scheduled_USR = LCL.Weight_Scheduled_USR;

//?Setup Scheduled Ship Date if the Load or Weight Limit was exceeded.
CASE;

// IF DTL.Status - Y or N is no
IF DTL.Status_Y_or_N = 'N';

// LCL.Display Flag = CND.Yes
LCL.Display_Flag = 'Y';

// DTL.Scheduled Ship Date USR = DTL.Scheduled Ship Date
DTL.Scheduled_Ship_Date_USR = DTL.Scheduled_Ship_Date;

// LCL.Scheduled Ship Date USR = DTL.Scheduled Ship Date USR
LCL.Scheduled_Ship_Date_USR = DTL.Scheduled_Ship_Date_USR;

//?Setup Scheduled Ship Date if the Load or Weight Limit was exceeded.
// IF *OTHERWISE
IF *OTHERWISE;

//?Limits not found.
CASE;

// IF DTL.Slot Limit for Export EQ WRK.ZERO
IF DTL.Slot_Limit_for_Export = WRK.ZERO;

// AND DTL.Slot Limit for Combo EQ WRK.ZERO
AND DTL.Slot_Limit_for_Combo = WRK.ZERO;

// AND DTL.Slot Limit for Box/Other EQ WRK.ZERO
AND DTL.Slot_Limit_for_Box_Other = WRK.ZERO;

// AND DTL.Weight Limit for Export EQ WRK.ZERO
AND DTL.Weight_Limit_for_Export = WRK.ZERO;

// Send information message - 'Load Slotting Limits not found for warehouse.'
MESSAGE(USR3037 *INFO);

ENDIF;

// LCL.Display Flag = CND.No
LCL.Display_Flag = 'N';

//?*******
//?2007/09/24 PKD Exit if slotting was not exceeded.
RETURN;

//?*******
// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?USER: Process command keys

//?F5=Display Load Slotting Activity
CASE;

// IF DTL.*CMD key is CF05
IF DTL.*CMD_key = '05';

CASE;

// IF DTL.Scheduled Ship Date USR is Entered
IF DTL.Scheduled_Ship_Date_USR <> *ZERO;

//?If new date is entered, save
// WRK.Scheduled Ship Date USR = DTL.Scheduled Ship Date USR
WRK.Scheduled_Ship_Date_USR = DTL.Scheduled_Ship_Date_USR;

// IF *OTHERWISE
IF *OTHERWISE;

//?Else save original date, save to test slotting activity
// WRK.Scheduled Ship Date USR = DTL.Scheduled Ship Date
WRK.Scheduled_Ship_Date_USR = DTL.Scheduled_Ship_Date;

ENDIF;

// Call program Dsp Load Slot Actvty  XF.
CALL PROGRAM(Dsp Load Slot Actvty  XF) ('POJZXFR');
PARAMETER(LCL.Shipping_Company);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(WRK.Scheduled_Ship_Date_USR);

ENDIF;

//?USER: Validate fields

//?If Load/Weight exceeded, retrieve new Sched Ship Date data.
CASE;

// IF LCL.Display Flag is Yes
IF LCL.Display_Flag = 'Y';

//?validate entered date
CASE;

// IF DTL.Scheduled Ship Date USR LT JOB.*Job date
IF DTL.Scheduled_Ship_Date_USR < JOB.*Job_date;

// Send error message - 'Sched Ship Date must be in the future.'
ERROR(USR3022);
MSGPARM(DTL.Scheduled_Ship_Date_USR);

//?validate entered date
// IF DTL.Scheduled Ship Date USR GT DTL.Requested Delivery Date
IF DTL.Scheduled_Ship_Date_USR > DTL.Requested_Delivery_Date;

// AND DTL.Requested Delivery Date is entered
AND DTL.Requested_Delivery_Date <> *ZERO;

// Send information message - 'Scheduled Ship Date is after Requested Delivery Date.'
MESSAGE(USR4489 *INFO);
MSGPARM(DTL.Scheduled_Ship_Date_USR);

//?validate entered date
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Day and Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1235065;
PARAMETER(LCL.Shipping_Company);
PARAMETER(DTL.Scheduled_Ship_Date_USR);
PARAMETER(LCL.Accounting_Period_Code);
PARAMETER(LCL.Day_of_Week);
PARAMETER(LCL.Week_Number);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


//?Get New Load and Weight Limits from Control file
CASE;

// IF LCL.WHS Slotting Limit Type is By Load
IF LCL.WHS_Slotting_Limit_Type = 'L';

EXECUTE FUNCTION(Rtv Load Slotting Sch RT) TYPE(RTVOBJ) FILE(POA3REP)           AC1619252;
PARAMETER(LCL.Shipping_Company);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Day_of_Week);
PARAMETER(DTL.Slot_Limit_for_Export);
PARAMETER(DTL.Slot_Limit_for_Combo);
PARAMETER(DTL.Slot_Limit_for_Box_Other);
PARAMETER(NLL.Weight_Limit_for_Export);
PARAMETER(NLL.Weight_Limit_for_Combo);
PARAMETER(NLL.Weight_Limit_for_Box_Othr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Get New Load and Weight Limits from Control file
// IF LCL.WHS Slotting Limit Type is By Weight
IF LCL.WHS_Slotting_Limit_Type = 'W';

EXECUTE FUNCTION(Rtv Load Slotting Sch RT) TYPE(RTVOBJ) FILE(POA3REP)           AC1619252;
PARAMETER(LCL.Shipping_Company);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Day_of_Week);
PARAMETER(NLL.Slot_Limit_for_Export);
PARAMETER(NLL.Slot_Limit_for_Combo);
PARAMETER(NLL.Slot_Limit_for_Box_Other);
PARAMETER(DTL.Weight_Limit_for_Export);
PARAMETER(DTL.Weight_Limit_for_Combo);
PARAMETER(DTL.Weight_Limit_for_Box_Othr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

//?Check for Load Limit exceeded.
CASE;

// IF LCL.WHS Slotting Limit Type is By Load
IF LCL.WHS_Slotting_Limit_Type = 'L';

// DTL.Export Load Limit = CON.*ZERO
DTL.Export_Load_Limit = *ZERO;

// DTL.Combo Load Limit = CON.*ZERO
DTL.Combo_Load_Limit = *ZERO;

// DTL.Box Load Limit        USR = CON.*ZERO
DTL.Box_Load_Limit_USR = *ZERO;

EXECUTE FUNCTION(RTV Limit Loads f/Slot RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1619257;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Scheduled_Ship_Date_USR);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Export_Load_Limit);
PARAMETER(DTL.Combo_Load_Limit);
PARAMETER(DTL.Box_Load_Limit_USR);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
{
 //?USER: Initialize routine

 // PAR.Export Load Limit = CON.*ZERO
 PAR.Export_Load_Limit = *ZERO;

 // PAR.Combo Load Limit = CON.*ZERO
 PAR.Combo_Load_Limit = *ZERO;

 // PAR.Box Load Limit        USR = CON.*ZERO
 PAR.Box_Load_Limit_USR = *ZERO;

 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(LCL.Shipping_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Retrieve needed values from System Values file     E000233
 // Call program Rtv Company Ctl Vals  XF.
 CALL PROGRAM(Rtv Company Ctl Vals  XF) ('PNOQXFR');
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
 PARAMETER(LCL.Partial_Load_Max_Lbs_USR);

 //?change log
 DO;

 //?02/03/2010 LJB E000233
 //?   Retrieve needed values from System Values file
 //?08/03/07 RMC dly029 Count Load as Export if export order whse
 //?   matches ShipFrom Whse on the load   -- per jim n, steve b
 //?05/11/04 SLM PKTR01 Multi-Company - Order Header TRG Remove Co
 //?   from Logical View
 //?05/17/04 RMC PKTR01 Multi-Company - Use Shipping Co from Whse
 ENDDO;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 //?RMC 9/11/13 E2709
 //?Check for Mixed having box qty>BOXLOAD qty, if yes, then BX, else CB
 //?Change Priority 3/14/01    RMC
 //?Check for Mixed having a box qty > 60 to stay BX   6/12/01    RMC
 //?Per Steve Burke - 6/27/01
 //?Dont check just for Prepaid Trucks.  Collect and Prepaid trucks included
 //?If Partial Load (<= 20000 lbs) dont count.
 //?Priority :  Combo , Export, Box
 CASE;

 // IF DB1.Load Type is Regular
 IF DB1.Load_Type = 'R';

 // AND DB1.Total Load Order Weight GT LCL.Partial Load Max Lbs USR
 AND DB1.Total_Load_Order_Weight > LCL.Partial_Load_Max_Lbs_USR;

 // AND DB1.Shipping Method is Not Rail
 AND DB1.Shipping_Method = 'CT'/'PT';

 //?Update load found so this load wont be counted again in the calling pgm.
 CASE;

 // IF DB1.Load ID EQ PAR.Load ID
 IF DB1.Load_ID = PAR.Load_ID;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 ENDIF;

 // LCL.Boxes Total Quantity = CON.*ZERO
 LCL.Boxes_Total_Quantity = *ZERO;

 //?05/11/04 SLM PKTR01 Multi-Company - Function chgd-remove Company RST/Pos
 EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1625242;
 PARAMETER(*ZERO);
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.U_M_Ordered);
 PARAMETER(LCL.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  //?05/13/04 SLM PKTR01 Multi-Company - Funt chg to rmv Co RST or Pos
  // PAR.USR Unit of Measure = CON.*BLANK
  PAR.USR_Unit_of_Measure = *BLANK;

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV UM/Whs Code,BX Qty RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1625244;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(1);
  PARAMETER(PAR.USR_Unit_of_Measure);
  PARAMETER(PAR.Boxes_Total_Quantity);
  {
   //?USER: Initialize routine

   // WRK.First Time Flag = CND.Yes
   WRK.First_Time_Flag = 'Y';

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.Detail Line Status is Cancelled
   IF DB1.Detail_Line_Status = 'X';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?S17054 DN 04/08/21-Beyond this point, changed all 'U/M - Ordered'
   //?  to reference LCL Context instead of DB1.
   //?S17054 DN 04/08/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.U/M - Ordered = DB1.U/M - Ordered
   LCL.U_M_Ordered = DB1.U_M_Ordered;

   CASE;

   // IF LCL.U/M - Ordered is Cases
   IF LCL.U_M_Ordered = 'CS';

   // LCL.U/M - Ordered = CND.EQ Boxes
   LCL.U_M_Ordered = 'BX';

   ENDIF;

   ENDIF;

   //?Accumulate the Box Quantity for slotting consideration  6/12/01
   CASE;

   // IF LCL.U/M - Ordered is EQ Boxes
   IF LCL.U_M_Ordered = 'BX';

   // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
   PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

   ENDIF;

   CASE;

   // IF PAR.USR Unit of Measure is *Blank
   IF PAR.USR_Unit_of_Measure = *BLANK;

   // PAR.USR Unit of Measure = LCL.U/M - Ordered
   PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
   IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.USR Unit of Measure = CND.Mixed
   PAR.USR_Unit_of_Measure = 'MX';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  //?USER: Exit processing

  //?RMC E2709 added here so it wont need to be in every calling pgm
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF LCL.U/M - Ordered is Combos
 IF LCL.U_M_Ordered = 'CB';

 // PAR.Combo Load Limit = PAR.Combo Load Limit + CON.1
 PAR.Combo_Load_Limit = PAR.Combo_Load_Limit + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Export Status Dft = DB1.Export Status
 LCL.Export_Status_Dft = DB1.Export_Status;

 //?Count Load as Export if order whse = Ship-From-Whse & Export 8/3/07
 CASE;

 // IF DB1.Export Status is yes
 IF DB1.Export_Status = 'Y';

 //?See if export order whse matches load Shipfrom whse  08/03/07 RMC
 //?For example a load could be export sts=Y and ship from whse is GP1, but
 //?there are multiple orders, and the one that is export is out of CF1
 //? in that case, dont count the load as export- per Steve B and Jim Norris
 // Call program RTV ExpOrd Whse for LD XF.
 CALL PROGRAM(RTV ExpOrd Whse for LD XF) ('PMK2XFR');
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Ship_From_Warehouse);
 PARAMETER(LCL.Export_Status_Dft);

 ENDIF;

 CASE;

 // IF LCL.Export Status Dft is yes
 IF LCL.Export_Status_Dft = 'Y';

 // PAR.Export Load Limit = PAR.Export Load Limit + CON.1
 PAR.Export_Load_Limit = PAR.Export_Load_Limit + 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Box Load Limit        USR = PAR.Box Load Limit        USR + CON.1
 PAR.Box_Load_Limit_USR = PAR.Box_Load_Limit_USR + 1;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Check for limit being exceeded
CASE;

// IF LCL.Slot Type f/load USR is Export
IF LCL.Slot_Type_f_load_USR = 'EX';

//?Add this load to load total if it's a new load
CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Not Found
IF LCL.Record_Found_OrdDtlUSR = 'N';

// DTL.Export Load Limit = DTL.Export Load Limit + CON.1
DTL.Export_Load_Limit = DTL.Export_Load_Limit + 1;

ENDIF;

//?Export Load Info Message
CASE;

// IF DTL.Export Load Limit GT DTL.Slot Limit for Export
IF DTL.Export_Load_Limit > DTL.Slot_Limit_for_Export;

// Send error message - 'No Shipping Slots Available.'
ERROR(USR3032);

// DTL.Status - Y or N = CND.no
DTL.Status_Y_or_N = 'N';

//?Export Load Info Message
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Return Code = CND.Returned
PAR.USR_Return_Code = 'R';

// DTL.Status - Y or N = CND.yes
DTL.Status_Y_or_N = 'Y';

// PAR.Scheduled Ship Date USR = DTL.Scheduled Ship Date USR
PAR.Scheduled_Ship_Date_USR = DTL.Scheduled_Ship_Date_USR;

ENDIF;

//?Check for limit being exceeded
// IF LCL.Slot Type f/load USR is Box
IF LCL.Slot_Type_f_load_USR = 'BX';

//?add this load to load total
CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Not Found
IF LCL.Record_Found_OrdDtlUSR = 'N';

// DTL.Box Load Limit        USR = DTL.Box Load Limit        USR + CON.1
DTL.Box_Load_Limit_USR = DTL.Box_Load_Limit_USR + 1;

ENDIF;

//?Box Load Info Message
CASE;

// IF DTL.Box Load Limit        USR GT DTL.Slot Limit for Box/Other
IF DTL.Box_Load_Limit_USR > DTL.Slot_Limit_for_Box_Other;

// Send error message - 'No Shipping Slots Available.'
ERROR(USR3032);

// DTL.Status - Y or N = CND.no
DTL.Status_Y_or_N = 'N';

//?Box Load Info Message
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Return Code = CND.Returned
PAR.USR_Return_Code = 'R';

// DTL.Status - Y or N = CND.yes
DTL.Status_Y_or_N = 'Y';

// PAR.Scheduled Ship Date USR = DTL.Scheduled Ship Date USR
PAR.Scheduled_Ship_Date_USR = DTL.Scheduled_Ship_Date_USR;

ENDIF;

//?Check for limit being exceeded
// IF LCL.Slot Type f/load USR is Combo
IF LCL.Slot_Type_f_load_USR = 'CB';

//?Add this load to load total
CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Not Found
IF LCL.Record_Found_OrdDtlUSR = 'N';

// DTL.Combo Load Limit = DTL.Combo Load Limit + CON.1
DTL.Combo_Load_Limit = DTL.Combo_Load_Limit + 1;

ENDIF;

//?Combo Load Info Message
CASE;

// IF DTL.Combo Load Limit GT DTL.Slot Limit for Combo
IF DTL.Combo_Load_Limit > DTL.Slot_Limit_for_Combo;

// Send error message - 'No Shipping Slots Available.'
ERROR(USR3032);

// DTL.Status - Y or N = CND.no
DTL.Status_Y_or_N = 'N';

//?Combo Load Info Message
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Return Code = CND.Returned
PAR.USR_Return_Code = 'R';

// DTL.Status - Y or N = CND.yes
DTL.Status_Y_or_N = 'Y';

// PAR.Scheduled Ship Date USR = DTL.Scheduled Ship Date USR
PAR.Scheduled_Ship_Date_USR = DTL.Scheduled_Ship_Date_USR;

ENDIF;

ENDIF;

ENDIF;

//?Check for Weight Limit exceeded - Priority: CB,EX,BX
CASE;

// IF LCL.WHS Slotting Limit Type is By Weight
IF LCL.WHS_Slotting_Limit_Type = 'W';

// LCL.Weight Scheduled USR = CON.*ZERO
LCL.Weight_Scheduled_USR = *ZERO;

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv OrderWt f/ShpDate RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1610091;
PARAMETER(LCL.Shipping_Company);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.USR_Unit_of_Measure);
PARAMETER(DTL.Scheduled_Ship_Date_USR);
PARAMETER(LCL.Weight_Scheduled_USR);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Slot_Type_f_load_USR);
PARAMETER(LCL.Record_Found_OrdDtlUSR);
PARAMETER(DTL.Load_ID);
{
 //?USER: Initialize routine

 //?RMC 10/02/07 set return code to *normal if no rcd found- not an error
 // PAR.Record Found -OrdDtlUSR = CND.Record Not Found
 PAR.Record_Found_OrdDtlUSR = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // LCL.Record Selected       USR = CND.yes
 LCL.Record_Selected_USR = 'Y';

 CASE;

 // IF DB1.Order Number NE WRK.Order Number Saved USR
 IF DB1.Order_Number <> WRK.Order_Number_Saved_USR;

 EXECUTE FUNCTION(RTV Load ID,shp mth   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1620457;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Load_ID);
 PARAMETER(LCL.Shipping_Method);
 PARAMETER(LCL.Export_Status);
 PARAMETER(LCL.Load_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?S17054 DN 04/07/21-Count Cases as Boxes. Replaced function with
 //?  'RTV UM/Whs Code-Add CS RT'.
 EXECUTE FUNCTION(RTV UM/Whs Code-Add CS RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2196569;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(LCL.USR_Warehouse_Code);
 PARAMETER(LCL.USR_Unit_of_Measure);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  // LCL.Boxes Total Quantity = CON.*ZERO
  LCL.Boxes_Total_Quantity = *ZERO;

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  //?PF3280 -- add "Cases" to the case-stmt
  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  // OR DB1.U/M - Ordered is EQ Boxes
  OR DB1.U_M_Ordered = 'BX';

  // OR DB1.U/M - Ordered is Mixed
  OR DB1.U_M_Ordered = 'MX';

  // OR DB1.U/M - Ordered is Cases
  OR DB1.U_M_Ordered = 'CS';

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S17054 DN 04/06/21-Beyond this point, changed all 'U/M - Ordered'
  //?  to reference LCL Context instead of DB1.
  //?S17054 DN 04/06/21-Count Type 'Cases' (CS) as 'Boxes' (BX).
  CASE;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  CASE;

  // IF LCL.U/M - Ordered is Cases
  IF LCL.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  ENDIF;

  //?Sum for later check
  CASE;

  // IF LCL.U/M - Ordered is EQ Boxes
  IF LCL.U_M_Ordered = 'BX';

  // LCL.Boxes Total Quantity = LCL.Boxes Total Quantity + DB1.Quantity Ordered
  LCL.Boxes_Total_Quantity = LCL.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.U/M - Ordered = CND.Mixed
  WRK.U_M_Ordered = 'MX';

  // PAR.USR Unit of Measure = WRK.U/M - Ordered
  PAR.USR_Unit_of_Measure = WRK.U_M_Ordered;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  //?E2709 RMC 9/12/13  Classify as BX/CB - never MX
  CASE;

  // IF PAR.USR Unit of Measure is Mixed
  IF PAR.USR_Unit_of_Measure = 'MX';

  EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
  PARAMETER(DB1.Company_Number);
  PARAMETER('BOXLOAD');
  PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
  IF LCL.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

  // PAR.USR Unit of Measure = CND.Combos
  PAR.USR_Unit_of_Measure = 'CB';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Boxed
  PAR.USR_Unit_of_Measure = 'BX';

  ENDIF;

  ENDIF;

 }

 // WRK.Order Number Saved USR = DB1.Order Number
 WRK.Order_Number_Saved_USR = DB1.Order_Number;

 ENDIF;

 CASE;

 // IF LCL.Load ID is Blank
 IF LCL.Load_ID = *ZERO;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 CASE;

 // IF LCL.Shipping Method is Rail
 IF LCL.Shipping_Method = 'CR'/'PR';

 // OR LCL.Load Type is Not Regular
 OR LCL.Load_Type = *BLANK/'B';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 //?Priority: CB,EX,BX
 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 CASE;

 // IF PAR.LSSA Load Slot Type is Combo
 IF PAR.LSSA_Load_Slot_Type = 'CB';

 CASE;

 // IF LCL.USR Unit of Measure is Combos
 IF LCL.USR_Unit_of_Measure = 'CB';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.LSSA Load Slot Type is Export
 IF PAR.LSSA_Load_Slot_Type = 'EX';

 CASE;

 // IF LCL.Export Status is Not Yes
 IF LCL.Export_Status = *BLANK/'N';

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 CASE;

 // IF PAR.LSSA Load Slot Type is Box
 IF PAR.LSSA_Load_Slot_Type = 'BX';

 CASE;

 // IF LCL.USR Unit of Measure is Boxed
 IF LCL.USR_Unit_of_Measure = 'BX';

 // OR LCL.USR Unit of Measure is Mixed
 OR LCL.USR_Unit_of_Measure = 'MX';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Record Selected       USR = CND.no
 LCL.Record_Selected_USR = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 CASE;

 // IF LCL.Record Selected       USR is yes
 IF LCL.Record_Selected_USR = 'Y';

 // PAR.Weight Scheduled USR = PAR.Weight Scheduled USR + DB1.Weight Scheduled
 PAR.Weight_Scheduled_USR = PAR.Weight_Scheduled_USR + DB1.Weight_Scheduled;

 //?Update load found so this load wont be counted again in the calling pgm.
 CASE;

 // IF PAR.Load ID EQ LCL.Load ID
 IF PAR.Load_ID = LCL.Load_ID;

 // PAR.Record Found -OrdDtlUSR = CND.Record Found
 PAR.Record_Found_OrdDtlUSR = 'Y';

 ENDIF;

 ENDIF;

}


// LCL.Weight Scheduled USR = LCL.Weight Scheduled USR + PAR.Order Weight Assigned
LCL.Weight_Scheduled_USR = LCL.Weight_Scheduled_USR + PAR.Order_Weight_Assigned;

CASE;

// IF LCL.Record Found -OrdDtlUSR is Record Not Found
IF LCL.Record_Found_OrdDtlUSR = 'N';

// LCL.Weight Scheduled USR = LCL.Weight Scheduled USR + LCL.USR Weight   9.1  3
LCL.Weight_Scheduled_USR = LCL.Weight_Scheduled_USR + LCL.USR_Weight_9_1_3;

ENDIF;

//?Weight exceeded message
CASE;

// IF LCL.Weight Scheduled USR GT DTL.Weight Limit for Export
IF LCL.Weight_Scheduled_USR > DTL.Weight_Limit_for_Export;

// Send error message - 'Sched Ship Wt exceeded for the Sched Ship Date.'
ERROR(USR3021);
MSGPARM(DTL.Scheduled_Ship_Date);

// DTL.Status - Y or N = CND.no
DTL.Status_Y_or_N = 'N';

//?Weight exceeded message
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Return Code = CND.Returned
PAR.USR_Return_Code = 'R';

// DTL.Status - Y or N = CND.yes
DTL.Status_Y_or_N = 'Y';

// PAR.Scheduled Ship Date USR = DTL.Scheduled Ship Date USR
PAR.Scheduled_Ship_Date_USR = DTL.Scheduled_Ship_Date_USR;

ENDIF;

ENDIF;

ENDIF;

//?If Load/Weight exceeded, retrieve new Sched Ship Date data.
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Return Code = CND.Returned
PAR.USR_Return_Code = 'R';

// DTL.Status - Y or N = CND.yes
DTL.Status_Y_or_N = 'Y';

// PAR.Scheduled Ship Date USR = CON.*ZERO
PAR.Scheduled_Ship_Date_USR = *ZERO;

ENDIF;

//?USER: User defined action

//?Exit pgm if Confirm is NO and the new Sched ship date was not displayed
CASE;

// IF DTL.Status - Y or N is no
IF DTL.Status_Y_or_N = 'N';

// AND LCL.Display Flag is No
AND LCL.Display_Flag = 'N';

// PAR.Status - Y or N = DTL.Status - Y or N
PAR.Status_Y_or_N = DTL.Status_Y_or_N;

// PAR.Scheduled Ship Date USR = CON.*ZERO
PAR.Scheduled_Ship_Date_USR = *ZERO;

RETURN;

ENDIF;

//?USER: Exit program processing

// PAR.Status - Y or N = DTL.Status - Y or N
PAR.Status_Y_or_N = DTL.Status_Y_or_N;

CASE;

// IF DTL.*CMD key is CF03
IF DTL.*CMD_key = '03';

// PAR.Scheduled Ship Date USR = CON.*ZERO
PAR.Scheduled_Ship_Date_USR = *ZERO;

// PAR.Status - Y or N = CND.no
PAR.Status_Y_or_N = 'N';

// PAR.USR Return Code = CND.Exists
PAR.USR_Return_Code = 'E';

ENDIF;

