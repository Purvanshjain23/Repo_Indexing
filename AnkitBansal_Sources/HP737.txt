      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP737
      * TITLE:       VIEW CARCASS DATA AND PREMIUMS/DISCOUNTS
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     06/22/95
      *
      * FUNCTION: THIS VIEW PROGRAM DISPLAYS THE CARCASS DATA AND THE
      *           PREMIUMS/DISCOUNTS FOR A DETAIL CHECK LINE.
      *
      *           RESTRICTORS: CHECK, CUSTOMER, CHECK DATE, LINE NUMBER
      *           POSITIONERS: NONE
      *           SELECTORS:   NONE
      *
      *           IT DOES NOT HAVE F4-PROMPT LOGIC.
      *           IT LOADS THE SUBFILE A PAGE AT A TIME.
      *           IT USES THE STANDARD MESSAGE HANDLING PROGRAM.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      * 10/05/95  LEANNE FEDOR
      *           SINCE THE LOGIC LOADS THE ENTIRE SUBFILE, SET THE
      *           SUBFILE TO DISPLAY ON PAGE 1 WHEN FIRST LOADING THE
      *           SCREEN
      *
      * 03/02/98  LeAnne Fedor
      *           Added the following fields to the screen.
      *                     condemned head and pounds
      *                     yard dead head and pounds
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD737    CF   E             WORKSTN
     F                                     SFILE(HP737S1:HDRRN1)
     F                                     INFDS(IOFEED)
      *
     FHSP045    IF   E           K DISK
      *    PREMIUM/DISCOUNT CODES   (KEY: PDPDCD)
      *
     FHSP064    IF   E           K DISK
      *    CHECK DETAIL             (KEY:  CDCVNO CDCHDT CDCHNO CDLNNO)
      *
     FHSP065    IF   E           K DISK
      *    CHECK ADJUSTMENTS        (KEY: CJCHDT CHCVNO CJCHNO CJLNNO)
      *
      /EJECT
      ****************************************************************
      * TABLE AND ARRAY SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  STANDARD MESSAGE ARRAYS
      *---------------------------------------------------------------
      /EJECT
      ****************************************************************
      * INPUT SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      * STANDARD DATABASE FILE INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTDBFR (RECORD FORMAT: FDBCKD)
     D DBFEED        E DS                  EXTNAME(UTDBFR)
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D CREATE          C                   CONST('CREATE')
     D REVISE          C                   CONST('REVISE')
     D DELETE          C                   CONST('DELETE')
     D VIEW            C                   CONST('VIEW  ')
     D SELECT          C                   CONST('SELECT')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
     D UPDATE          C                   CONST('UPDATE')
      *
     D                 DS
     D  DUMMYD                 1      1
      *  THE PRECEDING DUMMY DATA STRUCTURE IS ONLY TO KEEP THE I-SPEC
      *  INFO FROM RUNNING OVER INTO THE 'CALC SPECS' ON THE COMPILE
      *  LISTING.  IT SERVES NO OTHER PURPOSE AND CAN BE DELETED
      *  AT ANY TIME!!!
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
      *
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
      *
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      * RETRIEVE THE CHECK DETAIL RECORD
      *
     C     K1P064        CHAIN     HSP064                             90
     C     *IN90         IFEQ      *OFF                                         IF FOUND
     C                   Z-ADD     CDCRLB        C1CRLB
     C                   Z-ADD     CDLNPR        C1LNPR
     C                   Z-ADD     CDBFAM        C1BFAM
     C                   Z-ADD     CDLEAM        C1LEAM
     C                   ELSE
     C                   Z-ADD     0             C1CRLB
     C                   Z-ADD     0             C1LNPR
     C                   Z-ADD     0             C1BFAM
     C                   Z-ADD     0             C1LEAM
     C                   ENDIF                                                  IF FOUND
      *
      *  CALCULATE THE HUNDRED WEIGHT EQUIVALENT OF CARCASS
      *  POUNDS FOR LATER CALCULATIONS
      *
     C     C1CRLB        IFGT      0
     C     C1CRLB        DIV(H)    100           WKCWT
     C                   ELSE
     C                   Z-ADD     0             WKCWT
     C                   ENDIF
      *
      *  CLEAR/FILL THE SUBFILE
      *
     C                   EXSR      $CLR1
     C                   EXSR      $FRSH1
      *
      *  SET ROUTINE TO DISPLAY SCREEN
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      * WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP737K1
     C                   WRITE     HP737EC
     C                   EXFMT     HP737C1
      *
      * SET THE 'RESET' FLAG TO NO.  THIS FLAG IS USED TO DETERMINE
      * WHETHER TO REPOSITION THE USER TO A PARTICULAR PLACE IN THE
      * SUBFILE (RESET=YES) OR TO PLACE THE USER AT THE BEGINNNING OF
      * THE SUBFILE (RESET=NO)
      *
     C                   MOVEL     NO            RESET
      *
      * SAVE THE VALUE OF THE LOWEST SUBFILE RRN ON THE SCREEN FOR
      * LATER REPOSITIONING THE SUBFILE
      *
     C                   Z-ADD     IDFLOW        WKFLOW
      *
      * CLEAR THE MESSAGES FROM THE MESSAGE DATA STRUCTURES
      * AND PROGRAM MESSAGE QUEUE.
      *
     C                   EXSR      $CLMSG
      *
      * INITIALIZE THE RETURN CODE
      *
     C                   MOVEL     '00'          RTNCD
      *
      * GET USER'S ENTRY, SET THE RETURN CODE ACCORDING TO THE FUNCTION
      * KEY TAKEN BY THE USER, SET THE NEXT ROUTINE
      *
     C                   SELECT
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C                   MOVEL     '03'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN05         WHENEQ    *ON                                          F5-REFRESH
     C                   MOVEL     YES           RESET
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN12         WHENEQ    *ON                                          F12-PREVIOUS
     C                   MOVEL     '12'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN25         WHENEQ    *ON                                          F25-ROLLUP
     C                   MOVEL     SCRN1         ROUTNE
     C                   OTHER
      *
      * USER HAS PRESSED ENTER
      *
     C                   MOVEL     EXIT          ROUTNE
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $CLR1  - SUBROUTINE TO CLEAR THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $CLR1         BEGSR
      *
     C                   Z-ADD     0             C1PDAM
     C                   Z-ADD     0             C1PCWT
      *
     C                   CLEAR                   HP737S1
     C                   SETON                                        83        SFLCLR
     C                   WRITE     HP737C1
     C                   SETOFF                                       818283
      *                                                    81=SFLDSP
      *                                                    82=SFLEND
      *                                                    83=SFLCLR
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $FRSH1 - SUBROUTINE TO REFRESH/FILL THE SUBFILE ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $FRSH1        BEGSR
      *
      * SET POSITION IN CHECK ADJUSTMENT FILE USING THE CHECK
      * DETAIL LINE NUMBER.
      *
     C     K1P064        SETLL     HSP065
      *
      * THE FIELD 'RESET' IS A FLAG FIELD TO INDICATE WHETHER YOU ARE
      * ATTEMPTING TO REPOSITION THE USER CLOSE TO WHERE HE WAS IN THE
      * SUBFILE.
      * THE LOWEST SUBFILE RRN ON THE SCREEN FROM THE DSPF
      * FEEDBACK AREA (IDFLOW) WAS RETRIEVED EARLIER AND PUT IN WKFLOW.
      * ADD TO WKFLOW THE NUMBER OF LINES ON YOUR SUBFILE PAGE OR THE
      * NUMBER LESS 1 TO DETERMINE A SUBFILE RRN TO REPOSITION TO.
      * IF RESET IS 'NO', DON'T REPOSITION THE USER; JUST START OVER
      *
     C     RESET         IFEQ      YES
     C     WKFLOW        ADD       WKRLIN        MAXRRN
     C                   ELSE
     C                   Z-ADD     WKPLIN        MAXRRN
     C                   ENDIF
      *
      * ALWAYS LOAD THE ENTIRE SUBFILE.  DO NOT LOAD A PAGE AT A TIME.
      *
     C                   EXSR      $LOAD1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $LOAD1- SUBROUTINE TO LOAD THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $LOAD1        BEGSR
      *
      * FILL THE SUBFILE UNTIL THE END OF THE DATABASE FILE
      *
     C                   SETOFF                                       82
     C     *IN82         DOUEQ     *ON                                          DO FILL LOOP
      *
      * RETRIEVE PREMIUMS/DISCOUNTS FOR THE CHECK DETAIL LINE
      *
     C     K1P064        READE     HSP065                                 82
     C     *IN82         IFEQ      *OFF                                         IF NOT EOF
     C     CJCJFL        ANDEQ     'P'
     C                   SETON                                        85
      *
     C                   MOVEL     CJCJCD        DFPDCD
     C                   Z-ADD     CJCJAM        DFPDAM
     C                   ADD       CJCJAM        C1PDAM
      *
      * CALCULATE DOLLAR AMOUNT PER CWT
      *
     C     WKCWT         IFNE      0
     C     CJCJAM        DIV(H)    WKCWT         DFPCWT
     C                   ADD       DFPCWT        C1PCWT
     C                   ENDIF
      *
      * RETRIEVE PREMIUM/DISCOUNT DESCRIPTION
      *
     C     DFPDCD        CHAIN     HSP045                             87
     C     *IN87         IFEQ      *OFF
     C                   MOVEL     PDPDDS        DFPDDS
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     DFPDDS
     C                   ENDIF
      *
     C                   ADD       1             HDRRN1
     C                   WRITE     HP737S1
     C                   SETON                                        81
      *
      * FOR POSITIONING, PLACE THE SUBFILE RELATIVE RECORD NUMBER INTO
      * THE SFLRCDNBR FIELD (HDPAG1)
      *
     C                   Z-ADD     HDRRN1        HDPAG1
      *
     C                   ENDIF                                                  IF READ
     C                   ENDDO                                                  DO FILL LOOP
      *
      * IF NO RECORDS WERE WRITTEN TO THE SUBFILE, THEN ISSUE
      * THE STANDARD MESSAGE 'NO DATA TO DISPLAY'.
      *
     C     HDRRN1        IFEQ      0
     C                   MOVEL     YES           NORECS
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09002'     MGID(E)
     C                   ENDIF
     C                   ELSE
      *
      *  FORCE THE PROGRAM TO DISPLAY PAGE 1 OF THE SCREEN
      *
     C                   Z-ADD     1             HDPAG1
     C                   MOVEL     NO            NORECS
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *---------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANK        MGI
     C                   PARM      *BLANK        MGD
     C                   PARM      *ZERO         ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * *INZSR - INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * KEY LISTS
      *
     C     K1P064        KLIST
     C                   KFLD                    SVCHDT
     C                   KFLD                    C1CVNO
     C                   KFLD                    C1CHNO
     C                   KFLD                    SVLNNO
      *
      * PARM LISTS
      *
     C     *ENTRY        PLIST
     C                   PARM                    C1CVNO
     C                   PARM                    C1CNAM
     C                   PARM                    C1CHNO
      *
     C                   PARM                    SVLNNO
     C                   PARM                    C1MVSN
     C                   PARM                    C1HGCD
     C                   PARM                    C1TANO
     C                   PARM                    C1LVHD
     C                   PARM                    C1LVLB
     C                   PARM                    C1CDHD
     C                   PARM                    C1CDLB
     C                   PARM                    C1YDHD
     C                   PARM                    C1YDLB
     C                   PARM                    C1GRAM
     C                   PARM                    SVCHDT
     C                   PARM                    RTNCD
      *
     C     *LIKE         DEFINE    CDLNNO        SVLNNO
     C     *LIKE         DEFINE    CDCHDT        SVCHDT
      *
      * GLOBAL DEFINES
      *
     C                   MOVE      *BLANK        PGM              10            USED IN MSG
     C                   MOVE      *BLANK        MSGFL            10            USED IN MSG
     C                   MOVE      *BLANK        ROUTNE            6            ROUTINE
     C                   Z-ADD     0             MAXRRN            4 0          REPOSITION
     C                   MOVEL     NO            RESET             1            REPOSITION
     C                   MOVEL     NO            NORECS            1            NO RECORDS
     C     *LIKE         DEFINE    IDFLOW        WKFLOW
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
      *
     C                   Z-ADD     0             WKCWT             7 2
      *
      * TO SUPPORT F5-REFRESH, LOGIC REQUIRES THE NUMBER OF LINES ON
      * THE SUBFILE PAGE AND ALSO THE NUMBER OF LINES LESS 1.  BY
      * SETTING THESE VALUES UP AS CONSTANT WORK FIELDS, THE PROCESSING
      * LOGIC CAN BE STANDARDIZED BETWEEN PROGRAMS.
      *
     C                   Z-ADD     3             WKPLIN            2 0          SFLPAG(0003)
     C     WKPLIN        SUB       1             WKRLIN            2 0          SFLPAG - 1
     C                   Z-ADD     0             COUNT             2 0
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
     C                   ENDSR
      /EJECT
