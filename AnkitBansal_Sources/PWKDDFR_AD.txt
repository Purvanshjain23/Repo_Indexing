// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWKDDFR
// ?Date: 14.08.2025 Time: 02:56:42
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 1/30/2020 JBB E16108 - [ME] Delivery Tracking Split for HPS
//?                        This screen is for HPS to view a Delivery
//?                        Screen for a Sales Movement in the HPS
//?                        System.  This function was copied from the
//?                        Edt Delivery Tracking ER function.
//?11/04/2020 ISE H16853 - Recompiled due to change in Buy Order Number
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?USER: Initialize subfile control

// CTL.DT Delivered Head = PAR.DT Delivered Head
CTL.DT_Delivered_Head = PAR.DT_Delivered_Head;

// CTL.DT Farm Site Code = PAR.DT Farm Site Code
CTL.DT_Farm_Site_Code = PAR.DT_Farm_Site_Code;

// CTL.Weight Tot USR = CON.*ZERO
CTL.Weight_Tot_USR = *ZERO;

EXECUTE FUNCTION(Rtv Accum Split Hd    RT) TYPE(RTVOBJ) FILE(PLAJCPP)           AB1246349;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(CTL.DT_Delivery_Date);
PARAMETER(CTL.DT_Delivery_Time);
PARAMETER(CTL.DT_Delivery_Time_Seq);
PARAMETER(CTL.Head_Total_5_0_USR);
PARAMETER(CTL.Weight_Tot_USR);
{
 //?USER: Initialize routine

 // PAR.DT Delivered Head = CON.*ZERO
 PAR.DT_Delivered_Head = *ZERO;

 // PAR.Weight Tot USR = CON.*ZERO
 PAR.Weight_Tot_USR = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.DT Delivered Head = PAR.DT Delivered Head + DB1.DTS Delivered Head
 PAR.DT_Delivered_Head = PAR.DT_Delivered_Head + DB1.DTS_Delivered_Head;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.DTS Delivered Weight
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.DTS_Delivered_Weight;

 ENDIF;

}


//?USER: Initialize subfile record from DBF record

CASE;

// IF DB1.RS Record Status is Flag for Purge
IF DB1.RS_Record_Status = 'D';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// RCD.DTS Movement Number = PAR.DT Movement Number
RCD.DTS_Movement_Number = PAR.DT_Movement_Number;

ENDIF;

//?CALC: Subfile control function fields

EXECUTE FUNCTION(Rtv Accum Split Hd    RT) TYPE(RTVOBJ) FILE(PLAJCPP)           AB1246349;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(CTL.DT_Delivery_Date);
PARAMETER(CTL.DT_Delivery_Time);
PARAMETER(CTL.DT_Delivery_Time_Seq);
PARAMETER(CTL.Head_Total_5_0_USR);
PARAMETER(CTL.Weight_Tot_USR);
{
 //?USER: Initialize routine

 // PAR.DT Delivered Head = CON.*ZERO
 PAR.DT_Delivered_Head = *ZERO;

 // PAR.Weight Tot USR = CON.*ZERO
 PAR.Weight_Tot_USR = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.DT Delivered Head = PAR.DT Delivered Head + DB1.DTS Delivered Head
 PAR.DT_Delivered_Head = PAR.DT_Delivered_Head + DB1.DTS_Delivered_Head;

 // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.DTS Delivered Weight
 PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.DTS_Delivered_Weight;

 ENDIF;

}


//?USER: Process subfile control (Pre-confirm)

//?F7=Run Delivery Split Sequel
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program Pmt Dlv Trck Split SQL PV.
CALL PROGRAM(Pmt Dlv Trck Split SQL PV) ('PWKGPVR');

ENDIF;

//?USER: Exit program processing

//?Original Code
CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

CASE;

// IF CTL.DT Delivered Head NE CTL.Head Total (5.0) USR
IF CTL.DT_Delivered_Head <> CTL.Head_Total_5_0_USR;

// Send error message - 'Delv Tracking Split Head must equal the Delivered Head.'
ERROR(PRK1063);
MSGPARM(CTL.DT_Delivered_Head);

ENDIF;

ENDIF;

