// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for OMBSDFR
// ?Date: 14.08.2025 Time: 03:26:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.PRT Printer Device = CON.*BLANK
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

// LCL.Status - Y or N = CTL.Status - Y or N
LCL.Status_Y_or_N = CTL.Status_Y_or_N;

// LCL.Status Flag 1  Y/N = CTL.Status Flag 1  Y/N
LCL.Status_Flag_1_Y_N = CTL.Status_Flag_1_Y_N;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Chk Rate Existance    RT) TYPE(RTVOBJ) FILE(PDKHREP)           AC1628850;
PARAMETER(PAR.Company_Number);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Status_Y_or_N);
{
 //?USER: Initialize routine

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 //?USER: Process Data record

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 QUIT;

}


EXECUTE FUNCTION(Chk CMP for Carrier    RT) TYPE(RTVOBJ) FILE(PLAAREP)          AC1835701;
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Status_Flag_10_Y_N);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 QUIT;

}


EXECUTE FUNCTION(Chk Dest Rate for Carr RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1835704;
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Status_Flag_11_Y_N);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 QUIT;

}


EXECUTE FUNCTION(Chk Frght for Carrier  RT) TYPE(RTVOBJ) FILE(PMABREP)          AC1835691;
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Status_Flag_12_Y_N);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 QUIT;

}


//?Select Records
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Select record based on Rate Existence
CASE;

// IF CTL.Status - Y or N is Y/N Values
IF CTL.Status_Y_or_N = 'N'/'Y';

// AND RCD.Status - Y or N NE CTL.Status - Y or N
AND RCD.Status_Y_or_N <> CTL.Status_Y_or_N;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select record based on Company Carrier
CASE;

// IF CTL.Status Flag 10 Y/N is Y/N Values
IF CTL.Status_Flag_10_Y_N = 'N'/'Y';

// AND RCD.Status Flag 10 Y/N NE CTL.Status Flag 10 Y/N
AND RCD.Status_Flag_10_Y_N <> CTL.Status_Flag_10_Y_N;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select record based on Destination Rates
CASE;

// IF CTL.Status Flag 11 Y/N is Y/N Values
IF CTL.Status_Flag_11_Y_N = 'N'/'Y';

// AND RCD.Status Flag 11 Y/N NE CTL.Status Flag 11 Y/N
AND RCD.Status_Flag_11_Y_N <> CTL.Status_Flag_11_Y_N;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select record based on Freight Charges
CASE;

// IF CTL.Status Flag 12 Y/N is Y/N Values
IF CTL.Status_Flag_12_Y_N = 'N'/'Y';

// AND RCD.Status Flag 12 Y/N NE CTL.Status Flag 12 Y/N
AND RCD.Status_Flag_12_Y_N <> CTL.Status_Flag_12_Y_N;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?DLY029J 07/12/2007 - Rate per Stop changed to unused and removed
//?                     from screen
ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?Process create carrier request
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// CTL.Carrier Code = CON.*BLANK
CTL.Carrier_Code = *BLANK;

//?Used to call PDGWE3R (Edit Carrier 3 screen format)
// Call program EDT Carrier            E2.
CALL PROGRAM(EDT Carrier            E2) ('PDEIE2R');
PARAMETER(CTL.Carrier_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Reload subfile if ctl.usr ship via has changed
CASE;

// IF CTL.USR Ship Via NE WRK.USR Ship Via
IF CTL.USR_Ship_Via <> WRK.USR_Ship_Via;

// WRK.USR Ship Via = CTL.USR Ship Via
WRK.USR_Ship_Via = CTL.USR_Ship_Via;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Status - Y or N NE LCL.Status - Y or N
IF CTL.Status_Y_or_N <> LCL.Status_Y_or_N;

// LCL.Status - Y or N = CTL.Status - Y or N
LCL.Status_Y_or_N = CTL.Status_Y_or_N;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Status Flag 1  Y/N NE LCL.Status Flag 1  Y/N
IF CTL.Status_Flag_1_Y_N <> LCL.Status_Flag_1_Y_N;

// LCL.Status Flag 1  Y/N = CTL.Status Flag 1  Y/N
LCL.Status_Flag_1_Y_N = CTL.Status_Flag_1_Y_N;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile record (Pre-confirm)

//?Process change carrier request
CASE;

// IF RCD.*SFLSEL is *Change
IF RCD.*SFLSEL = '2';

//?Used to call PDGWE3R (Edit Carrier 3 screen format)
// Call program EDT Carrier            E2.
CALL PROGRAM(EDT Carrier            E2) ('PDEIE2R');
PARAMETER(RCD.Carrier_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Process Delete
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

// RCD.Record Status = CND.Deleted
RCD.Record_Status = 'D';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?Process Delete
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?Process destination rate request
CASE;

// IF RCD.*SFLSEL is *Details
IF RCD.*SFLSEL = '7'/'7';

// Call program EDT Carrier-Destinatio EF.
CALL PROGRAM(EDT Carrier-Destinatio EF) ('PDWJEFR');
PARAMETER(RCD.Carrier_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?8=Edit Insurance Info
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Edt Carrier Insurance EF.
CALL PROGRAM(Edt Carrier Insurance EF) ('POT6EFR');
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Name);

EXECUTE FUNCTION(Val Ins Existance     RT) TYPE(RTVOBJ) FILE(POCKREP)           AC1661147;
PARAMETER(RCD.Carrier_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

EXECUTE FUNCTION(Upd Cert of Ins Flag  RT) TYPE(RTVOBJ) FILE(OMFFREP)           AC1661069;
PARAMETER(RCD.Carrier_Code);
PARAMETER('Y');
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Certificate of Insurance NE PAR.Certificate of Insurance
 IF DB1.Certificate_of_Insurance <> PAR.Certificate_of_Insurance;

 EXECUTE FUNCTION(Chg Cert of Ins Flag  CH) TYPE(CHGOBJ) FILE(OMFFREP)           AC1661070;
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(PAR.Certificate_of_Insurance);
 ENDIF;

}


// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

EXECUTE FUNCTION(Upd Cert of Ins Flag  RT) TYPE(RTVOBJ) FILE(OMFFREP)           AC1661069;
PARAMETER(RCD.Carrier_Code);
PARAMETER('N');
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Certificate of Insurance NE PAR.Certificate of Insurance
 IF DB1.Certificate_of_Insurance <> PAR.Certificate_of_Insurance;

 EXECUTE FUNCTION(Chg Cert of Ins Flag  CH) TYPE(CHGOBJ) FILE(OMFFREP)           AC1661070;
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(PAR.Certificate_of_Insurance);
 ENDIF;

}


ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?** 5=Work with Company Carrier for email and fax numbers
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program WW Company Carrier     DF.
CALL PROGRAM(WW Company Carrier     DF) ('PNANDFR');
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Name);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Process 9=Edit Freight Charges
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Edt Carrier Frt Chrg  EF.
CALL PROGRAM(Edt Carrier Frt Chrg  EF) ('PMBWEFR');
PARAMETER(RCD.Carrier_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Final processing (Pre-confirm)

//?F21=Print request processing
CASE;

// IF CTL.*CMD key is *Print 21
IF CTL.*CMD_key = '21';

// PAR.Date 1          PASS  USR = CTL.Carrier Last Used Date
PAR.Date_1_PASS_USR = CTL.Carrier_Last_Used_Date;

// Call program PMT Pass State/Dte/Sts UP.
CALL PROGRAM(PMT Pass State/Dte/Sts UP) ('PDEKUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('C/A');
PARAMETER('PDGQCLP');
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(CTL.State_Code);
PARAMETER(CTL.Record_Status);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('Carrier Listing');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

ENDIF;

//?F22=Print Company Carrier Prompt
CASE;

// IF CTL.*CMD key is CF22
IF CTL.*CMD_key = '22';

// Call program PMT Comp Carrier List PV.
CALL PROGRAM(PMT Comp Carrier List PV) ('PLAWPVR');
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(LCL.Return_Code_Usr);

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Process Delete customer request
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4';

EXECUTE FUNCTION(CHG OM Carrier         CH) TYPE(CHGOBJ) FILE(OMFFREP)          AC1183269;
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Name);
PARAMETER(RCD.Address_Line_1);
PARAMETER(RCD.Address_Line_2);
PARAMETER(RCD.Address_Line_3);
PARAMETER(RCD.City);
PARAMETER(RCD.Zip_Postal_Code);
PARAMETER(RCD.Telephone_Number);
PARAMETER(RCD.State_Code);
PARAMETER(RCD.Carrier_Last_Used_Date);
PARAMETER(RCD.Fax_Number);
PARAMETER(RCD.Pallet_Balance);
PARAMETER(RCD.Long_hook_balance);
PARAMETER(RCD.Short_hook_balance);
PARAMETER(RCD.Tub_Balance);
PARAMETER(RCD.OM_Carrier_Status);
PARAMETER(RCD.OM_Carrier_Comments_1);
PARAMETER(RCD.OM_Carrier_Comments_2);
PARAMETER(RCD.AP_Vendor_Number);
PARAMETER(RCD.Home_Phone);
PARAMETER(RCD.Other_Phone);
PARAMETER(RCD.Flat_Rate);
PARAMETER(RCD.Rate_Per_Pound);
PARAMETER(RCD.Unused_Rate_Per_Stop);
PARAMETER(RCD.Miscellaneous_Charges);
PARAMETER(RCD.Unused_Carrier_Rating);
PARAMETER(RCD.Unused_Mile_Range_1);
PARAMETER(RCD.Unused_Mile_Range_2);
PARAMETER(RCD.Unused_Mile_Range_3);
PARAMETER(RCD.Unused_Mile_Range_4);
PARAMETER(RCD.Unused_Mile_Range_5);
PARAMETER(RCD.Unused_Mile_Range_6);
PARAMETER(RCD.Unused_Mile_Rate_1);
PARAMETER(RCD.Unused_Mile_Rate_2);
PARAMETER(RCD.Unused_Mile_Rate_3);
PARAMETER(RCD.Unused_Mile_Rate_4);
PARAMETER(RCD.Unused_Mile_Rate_5);
PARAMETER(RCD.Unused_Mile_Rate_6);
PARAMETER(RCD.Unused_Weight_Range_1);
PARAMETER(RCD.Unused_Weight_Range_2);
PARAMETER(RCD.Unused_Weight_Range_3);
PARAMETER(RCD.Unused_Weight_Range_4);
PARAMETER(RCD.Unused_Weight_Range_5);
PARAMETER(RCD.Unused_Weight_Range_6);
PARAMETER(RCD.Unused_Weight_Rate_1);
PARAMETER(RCD.Unused_Weight_Rate_2);
PARAMETER(RCD.Unused_Weight_Rate_3);
PARAMETER(RCD.Unused_Weight_Rate_4);
PARAMETER(RCD.Unused_Weight_Rate_5);
PARAMETER(RCD.Unused_Weight_Rate_6);
PARAMETER(RCD.Contact_Number);
PARAMETER(RCD.Certificate_of_Insurance);
PARAMETER(RCD.Carrier_Unused_Fld_1);
PARAMETER(RCD.Carrier_Unused_Fld_2);
PARAMETER(RCD.Carrier_DOT_Number);
PARAMETER(RCD.Carrier_Unused_State);
PARAMETER(RCD.Carrier_Unused_Fld_4);
PARAMETER(RCD.Carrier_Unused_Fld_5);
PARAMETER(RCD.Carrier_Fed_ID_Number);
PARAMETER(RCD.Amount_of_Cargo);
PARAMETER(RCD.Amount_of_Liability);
PARAMETER(RCD.Date_of_Expiration);
PARAMETER(RCD.SSI_Download_Flag);
PARAMETER(RCD.unused_status_2);
PARAMETER(RCD.unused_status_3);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Job_Time);
PARAMETER(RCD.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

