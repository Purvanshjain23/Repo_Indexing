// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for OMPVDFR
// ?Date: 14.08.2025 Time: 03:30:52
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = PAR.Default Printer
PAR.PRT_Printer_Device = PAR.Default_Printer;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

// PAR.USR Print Detail = CND.yes
PAR.USR_Print_Detail = 'Y';

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.Job Name CDE = JOB.*JOB
PAR.Job_Name_CDE = JOB.*JOB;

// PAR.Job Name = SUBSTRING(JOB.*JOB,CON.1,CON.9)
PAR.Job_Name = SUBSTRING(JOB.*JOB:1:9);

// PAR.Job Name = CONCAT(PAR.Job Name,CON.P,CON.*ZERO)
PAR.Job_Name = PAR.Job_Name + 'P' (*ZERO);

//?11/04/09 PKD E00519 Warehouse Access by User
EXECUTE FUNCTION(RTV Appl Whs Restrict  RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1959551;
PARAMETER(JOB.*USER);
PARAMETER(LCL.Application_WHS_Restrict);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?07/01/16 RMC E4119 TMS
// LCL.Live with TPM = CND.No
LCL.Live_with_TPM = 'N';

// Call program EXC Rtv Status        XF.
CALL PROGRAM(EXC Rtv Status        XF) ('PBXNXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.Live_with_TPM);

// Call program EXC Rtv Status-AS     XF.
CALL PROGRAM(EXC Rtv Status-AS     XF) ('PBX2XFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(LCL.PFS_AccuSort_Active);

//?12/14/22 DN DO4595-Verify EDI Interchange Active for EDI 601.
EXECUTE FUNCTION(RTV Record Status     RT) TYPE(RTVOBJ) FILE(PNGNREP)           AC2210684;
PARAMETER('SHPEXP');
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set 'EDI Interchange Active U' Flag.
CASE;

// IF LCL.Record Status is Active
IF LCL.Record_Status = 'A';

// LCL.EDI Interchange Active U = CND.Yes
LCL.EDI_Interchange_Active_U = 'Y';

//?Set 'EDI Interchange Active U' Flag.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.EDI Interchange Active U = CND.No
LCL.EDI_Interchange_Active_U = 'N';

ENDIF;

//?USER: Initialize subfile control

//?First time
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

//?RMC 3/1/06 dont dft ctl.company
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

ENDIF;

// CTL.Include/Exclude Option = CND.Include
CTL.Include_Exclude_Option = 'INC';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// PAR.Numeric 4,0           USR = CON.*ZERO
PAR.Numeric_40_USR = *ZERO;

//?11/04/09 PKD E00519 Access by Warehouse
CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

EXECUTE FUNCTION(Rtv 1st Warehouse     RT) TYPE(RTVOBJ) FILE(PNFOREP)           AC1960292;
PARAMETER(JOB.*USER);
PARAMETER('TRF');
PARAMETER(CTL.Warehouse_1_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

ENDIF;

//?** Ship line is no longer the land carrier           P000737
// WRK.Warehouse 1 USR = CTL.Warehouse 1 USR
WRK.Warehouse_1_USR = CTL.Warehouse_1_USR;

// LCL.Ship Method Type USR = CTL.Ship Method Type USR
LCL.Ship_Method_Type_USR = CTL.Ship_Method_Type_USR;

//?USER: Initialize subfile record from DBF record

//?If company selection is made, then select only that company
CASE;

// IF CTL.Accounting Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// AND DB1.Accounting Company Number NE CTL.Accounting Company Number
AND DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?If carrier selection is made, then select only that carrier
CASE;

// IF CTL.Carrier Code is entered
IF CTL.Carrier_Code <> *BLANK;

CASE;

// IF CTL.Carrier Code is Select Blank Carriers
IF CTL.Carrier_Code = *;

CASE;

// IF DB1.Carrier Code is entered
IF DB1.Carrier_Code <> *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Carrier Code NE DB1.Carrier Code
IF CTL.Carrier_Code <> DB1.Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Shipping Line-OHE  RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2016789;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.USR_Carrier_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?** pass back the first record found with a shipping line
 CASE;

 // IF DB1.Shipping Line is not entered
 IF DB1.Shipping_Line = *BLANK;

 //?** pass back the first record found with a shipping line
 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?If Ship Line selection is made, then select only that Shipping Line
CASE;

// IF CTL.USR Carrier Code is entered
IF CTL.USR_Carrier_Code <> *BLANK;

CASE;

// IF RCD.USR Carrier Code NE CTL.USR Carrier Code
IF RCD.USR_Carrier_Code <> CTL.USR_Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Process INC/EXC option
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Load Status EQ WRK.BLANK
IF CTL.Load_Status = WRK.BLANK;

// IF CTL.Include/Exclude Option is Include
IF CTL.Include_Exclude_Option = 'INC';

//?Select only records which match CTL load status
CASE;

// IF DB1.Load Status NE CTL.Load Status
IF DB1.Load_Status <> CTL.Load_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF CTL.Include/Exclude Option is Exclude
IF CTL.Include_Exclude_Option = 'EXC';

//?Select only records which do NOT match CTL load status
CASE;

// IF DB1.Load Status EQ CTL.Load Status
IF DB1.Load_Status = CTL.Load_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Fill trailer ID on screen
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// RCD.Trailer ID USR = DB1.Trailer Id
RCD.Trailer_ID_USR = DB1.Trailer_Id;

ENDIF;

//?Get Last Stop on Order       -- TRF011 scan for ctl.last stop city 7/28/06
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(WRK.Ship_To_City);
PARAMETER(RCD.USR_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


// RCD.USR Load/Stop 10 Alpha = WRK.Ship To City
RCD.USR_Load_Stop_10_Alpha = WRK.Ship_To_City;

CASE;

// IF CTL.Ship To State Code is State code not Blanks
IF CTL.Ship_To_State_Code <> *BLANK;

// AND RCD.USR State Code NE CTL.Ship To State Code
AND RCD.USR_State_Code <> CTL.Ship_To_State_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Scan for Ctl.last stop city         TRF011 RMC 7/28/06
CASE;

// IF CTL.USR Load/Stop 10 Alpha is Entered
IF CTL.USR_Load_Stop_10_Alpha <> *BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(WRK.Ship_To_City);
PARAMETER(20);
PARAMETER(1);
PARAMETER(CTL.USR_Load_Stop_10_Alpha);
PARAMETER(10);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?RST: Scheduled Ship Date
CASE;

// IF CTL.Scheduled Ship Date is entered
IF CTL.Scheduled_Ship_Date <> *ZERO;

CASE;

// IF DB1.Scheduled Ship Date NE CTL.Scheduled Ship Date
IF DB1.Scheduled_Ship_Date <> CTL.Scheduled_Ship_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Setup Delivery Checked field, according to On Time Y/N
CASE;

// IF DB1.On Time - (Y/N) is Y/N Values
IF DB1.On_Time_Y_N = 'N'/'Y';

// RCD.Status - Y or N = CND.yes
RCD.Status_Y_or_N = 'Y';

//?Setup Delivery Checked field, according to On Time Y/N
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Status - Y or N = CND.no
RCD.Status_Y_or_N = 'N';

ENDIF;

//?Restrict on Delivery Checked field
CASE;

// IF CTL.Status - Y or N is Y/N Values
IF CTL.Status_Y_or_N = 'N'/'Y';

CASE;

// IF RCD.Status - Y or N NE CTL.Status - Y or N
IF RCD.Status_Y_or_N <> CTL.Status_Y_or_N;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.USR_Weight_Accumulated);
PARAMETER(RCD.Load_Status);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


// RCD.Weight Adjust 6.0     USR = PAR.USR Weight Accumulated
RCD.Weight_Adjust_6_0_USR = PAR.USR_Weight_Accumulated;

//?Highlight load number if traffic comments exist
EXECUTE FUNCTION(RTV Verify Trffc Cmnts RT) TYPE(RTVOBJ) FILE(PDKECPP)          AC1424786;
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


//?Set Highlight Flag
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// RCD.Include Todays Trans = CND.yes
RCD.Include_Todays_Trans = 'Y';

//?Set Highlight Flag
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Include Todays Trans = CND.no
RCD.Include_Todays_Trans = 'N';

ENDIF;

// WRK.USR Time 4.0 = DB1.Deadline Departure Time / CON.100 *
WRK.USR_Time_4_0 = DB1.Deadline_Departure_Time / 100;

//?Set Highlight Flag - Sched Ship Date   7/10/01 RMC
CASE;

// IF DB1.Actual Departure Date GT DB1.Deadline Departure Date
IF DB1.Actual_Departure_Date > DB1.Deadline_Departure_Date;

// OR DB1.Actual Departure Date EQ DB1.Deadline Departure Date
OR ( DB1.Actual_Departure_Date = DB1.Deadline_Departure_Date;

// AND DB1.Departure Time GT WRK.USR Time 4.0
AND DB1.Departure_Time > WRK.USR_Time_4_0 );

// WRK.USR Status (Y/N) = CND.yes
WRK.USR_Status_Y_N = 'Y';

//?Set Highlight Flag - Sched Ship Date   7/10/01 RMC
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Status (Y/N) = CND.no
WRK.USR_Status_Y_N = 'N';

ENDIF;

//?** Set highlight flag, Override Total Load Miles entered   E00207
CASE;

// IF DB1.Override Total Load Miles is Entered
IF DB1.Override_Total_Load_Miles <> *ZERO;

// RCD.Total Miles 4,0       USR = DB1.Override Total Load Miles
RCD.Total_Miles_40_USR = DB1.Override_Total_Load_Miles;

// RCD.Change Flag USR = CND.Yes
RCD.Change_Flag_USR = 'Y';

//?** Set highlight flag, Override Total Load Miles entered   E00207
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Miles 4,0       USR = DB1.Total Load Miles
RCD.Total_Miles_40_USR = DB1.Total_Load_Miles;

// RCD.Change Flag USR = CND.No
RCD.Change_Flag_USR = 'N';

ENDIF;

//?OMS203:  no updates will be allowed if load contains block orders
EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Block_Order_Flag);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?OMS203:  need to know if there are any Block orders on load
 // PAR.Block Order Flag = CND.Firm Order
 PAR.Block_Order_Flag = 'F';

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.Block Order Flag = DB1.Block Order Flag
 PAR.Block_Order_Flag = DB1.Block_Order_Flag;

 QUIT;

 ENDIF;

}


// RCD.Numeric 4,0           USR = RCD.Schedule Sequence Number
RCD.Numeric_40_USR = RCD.Schedule_Sequence_Number;

// PAR.USR Flag 1 = CND.No
PAR.USR_Flag_1 = 'N';

EXECUTE FUNCTION(RTV Chk Ord on Hld-Pr/Cr) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1589113;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.USR_Flag_1);
PARAMETER(LCL.Production_Hold);
PARAMETER(RCD.Credit_Hold);
{
 //?USER: Initialize routine

 // PAR.USR Flag 1 = CND.No
 PAR.USR_Flag_1 = 'N';

 // PAR.Credit Hold = CND.No
 PAR.Credit_Hold = 'N';

 // PAR.Production Hold = CND.No
 PAR.Production_Hold = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Hold/Status        RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231784;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(WRK.Order_Type_Sales);
 PARAMETER(WRK.Header_Status);
 PARAMETER(WRK.Header_Status_Last);
 PARAMETER(LCL.Credit_Hold);
 PARAMETER(LCL.Production_Hold);
 PARAMETER(WRK.New_Customer_Hold);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Production Hold is Yes
 IF LCL.Production_Hold = 'Y';

 // PAR.Production Hold = CND.Yes
 PAR.Production_Hold = 'Y';

 // PAR.USR Flag 1 = CND.Yes
 PAR.USR_Flag_1 = 'Y';

 ENDIF;

 CASE;

 // IF LCL.Credit Hold is Yes
 IF LCL.Credit_Hold = 'Y';

 // PAR.Credit Hold = CND.Yes
 PAR.Credit_Hold = 'Y';

 // PAR.USR Flag 1 = CND.Yes
 PAR.USR_Flag_1 = 'Y';

 ENDIF;

}


EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
PARAMETER(RCD.Load_ID);
PARAMETER(1);
PARAMETER(RCD.Warehouse_1_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 QUIT;

}


EXECUTE FUNCTION(Val Appt confirm     RT) TYPE(RTVOBJ) FILE(OMFLCPP)            AC2019548;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.LD_Unused_Date_2);
{
 //?USER: Initialize routine

 // PAR.LD Sls Appt Confirm Dt = CND.Zero
 PAR.LD_Unused_Date_2 = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.LD Sls Appt Confirm Dt is Entered
 IF DB1.LD_Unused_Date_2 > *ZERO;

 // PAR.LD Sls Appt Confirm Dt = DB1.LD Sls Appt Confirm Dt
 PAR.LD_Unused_Date_2 = DB1.LD_Unused_Date_2;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(RTV Num Multi-Whs Ords RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1788807;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Multi_Company_Load);
PARAMETER(RCD.Number_of_Orders);
{
 //?USER: Initialize routine

 // PAR.Number of Orders = CON.*ZERO
 PAR.Number_of_Orders = *ZERO;

 // PAR.Warehouse Code = CON.*BLANK
 PAR.Warehouse_Code = *BLANK;

 // PAR.Multi Company Load = CND.no
 PAR.Multi_Company_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF PAR.Number of Orders is Greater Than 1
 IF PAR.Number_of_Orders > 1;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Warehouse wo/Quit RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1788808;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

 }

 CASE;

 // IF PAR.Warehouse Code NE LCL.Warehouse Code
 IF PAR.Warehouse_Code <> LCL.Warehouse_Code;

 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 // PAR.Number of Orders = PAR.Number of Orders + CON.1
 PAR.Number_of_Orders = PAR.Number_of_Orders + 1;

 ENDIF;

 ENDIF;

}


CASE;

// IF RCD.Number of Orders is Greater Than 1
IF RCD.Number_of_Orders > 1;

// RCD.Multi Company Load = CND.yes
RCD.Multi_Company_Load = 'Y';

ENDIF;

//?PK0141
//?Select Records for the Warehouse entered on the control level
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Select Records for the Warehouse entered on the control level
CASE;

// IF CTL.Warehouse 1 USR is EQ Blank
IF CTL.Warehouse_1_USR = *BLANK;

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Records for the Warehouse entered on the control level
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.Warehouse 1 USR EQ RCD.Warehouse 1 USR
IF CTL.Warehouse_1_USR = RCD.Warehouse_1_USR;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?** Load flat amount - to be passed if F9 is pressed   DLY029 07/16/2007
// RCD.Flat Amount = DB1.Flat Amount
RCD.Flat_Amount = DB1.Flat_Amount;

// RCD.Deadline Depart Time 4,0 = DB1.Deadline Departure Time / CON.100 *
RCD.Deadline_Depart_Time_40 = DB1.Deadline_Departure_Time / 100;

// RCD.Deadline Departure MM/DD = DB1.Deadline Departure Date
RCD.Deadline_Departure_MM_DD = DB1.Deadline_Departure_Date;

// RCD.USR Time 4.0 = DB1.LPT Load Plan Start Tm / CON.100 *
RCD.USR_Time_4_0 = DB1.LPT_Load_Plan_Start_Tm / 100;

// RCD.Month/Day Display     USR = DB1.LPT Load Plan Start Dt
RCD.Month_Day_Display_USR = DB1.LPT_Load_Plan_Start_Dt;

//?-----------------------------------
//?01/22/08 PKD Added Ship Method Type
//?02/27/08 PKD Gary Martin wants the regular shipping method
//?             instead of the ship method type. Made the Ship Method
//?             Type field and description hidden. Leaving the code
//?             to populate it. Just incase they want it back.
// RCD.Ship Method Type USR = SUBSTRING(RCD.Shipping Method,CON.2,CON.1)
RCD.Ship_Method_Type_USR = SUBSTRING(RCD.Shipping_Method:2:1);

// RCD.Text USR 5 = Condition name of RCD.Ship Method Type USR
RCD.Text_USR_5 = RTVCND(RCD.Ship_Method_Type_USR);

//?SEL:  Ship Method Type
CASE;

// IF CTL.Ship Method Type USR NE WRK.BLANK
IF CTL.Ship_Method_Type_USR <> WRK.BLANK;

CASE;

// IF CTL.Ship Method Type USR NE RCD.Ship Method Type USR
IF CTL.Ship_Method_Type_USR <> RCD.Ship_Method_Type_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL:  Check for < ctl.Weight Adjust 6.0     USR  -E00180 8/07/08 RMC
CASE;

// IF CTL.Weight Adjust 6.0     USR is Not equal to zero
IF CTL.Weight_Adjust_6_0_USR <> *ZERO;

CASE;

// IF CTL.Weight Adjust 6.0     USR GT RCD.Weight Adjust 6.0     USR
IF CTL.Weight_Adjust_6_0_USR > RCD.Weight_Adjust_6_0_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?-----------------------------------
//?CALC: Subfile control function fields

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?Format seq#
CASE;

// IF CTL.Numeric 4,0           USR is *Zero
IF CTL.Numeric_40_USR = *ZERO;

CASE;

// IF CTL.Numeric 4,0           USR NE PAR.Numeric 4,0           USR
IF CTL.Numeric_40_USR <> PAR.Numeric_40_USR;

// CTL.Schedule Sequence Number = CON.*ZERO
CTL.Schedule_Sequence_Number = *ZERO;

// PAR.Numeric 4,0           USR = CON.*ZERO
PAR.Numeric_40_USR = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Format seq#
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Schedule Sequence Number = CTL.Numeric 4,0           USR
CTL.Schedule_Sequence_Number = CTL.Numeric_40_USR;

// PAR.Numeric 4,0           USR = CTL.Numeric 4,0           USR
PAR.Numeric_40_USR = CTL.Numeric_40_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// PAR.USR Print Detail = CND.no
PAR.USR_Print_Detail = 'N';

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
//?E4119  LIVE WITH TMS RESTRICTED FUNCTION KEYS
CASE;

// IF LCL.Live with TPM is Yes
IF LCL.Live_with_TPM = 'Y';

CASE;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

//?can create loads for intl orders
CASE;

// IF LCL.PFS AccuSort Active is No
IF LCL.PFS_AccuSort_Active = 'N';

// Send error message - 'Live With TMS: Function &1 Invalid.'
ERROR(USR4602);
MSGPARM(06);

QUIT;

ENDIF;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

//?allow.. need for as400 created loads
ENDIF;

ENDIF;

//?11/04/09 PKD E00519 Access by Warehouse
//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Warehouse 1 USR
IF PGM.*Cursor_field = CTL.Warehouse_1_USR;

CASE;

// IF LCL.Application WHS Restrict is yes
IF LCL.Application_WHS_Restrict = 'Y';

// Call program Sel User Appl Whs     SR.
CALL PROGRAM(Sel User Appl Whs     SR) ('PNMMSRR');
PARAMETER(JOB.*USER);
PARAMETER('TRF');
PARAMETER(CTL.Warehouse_1_USR);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_1_USR);

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Warehouse         IF) TYPE(EXCINTFUN)                      AC1961537;
PARAMETER(LCL.Application_WHS_Restrict);
PARAMETER(CTL.Warehouse_1_USR);
PARAMETER('TRF');
{
 //?Execute internal function

 //?VAL: Warehouse Code
 CASE;

 // IF PAR.Application WHS Restrict is yes
 IF PAR.Application_WHS_Restrict = 'Y';

 CASE;

 // IF PAR.Warehouse Code is Blanks
 IF PAR.Warehouse_Code = *BLANK;

 // Send error message - 'Warehouse Code is required.'
 ERROR(USR2015);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program Val App Whs Itm Acs   XF.
 CALL PROGRAM(Val App Whs Itm Acs   XF) ('PNMOXFR');
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(*ZERO);
 PARAMETER(LCL.WHS_Item_Access_Sts_USR);

 CASE;

 // IF LCL.WHS/Item Access Sts USR is Access Denied
 IF LCL.WHS_Item_Access_Sts_USR = 'D';

 // Send error message - 'Access Denied to &1 for Warehouse &2.'
 ERROR(USR2776);
 MSGPARM(JOB.*USER);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 //?VAL: Warehouse Code
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code is Not Blanks
 IF PAR.Warehouse_Code <> *BLANK;

 EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'Warehouse Codes not found.'
 ERROR(USR0007);
 MSGPARM(PAR.Warehouse_Code);

 QUIT;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?F7=Display Unbooked Orders
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program DSP Unbooked Orders    DF.
CALL PROGRAM(DSP Unbooked Orders    DF) ('PDCNDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.USR_Program_name);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F8=Toggle Include/Exclude
CASE;

// IF CTL.*CMD key is *Option Toggle
IF CTL.*CMD_key = '08';

CASE;

// IF CTL.Include/Exclude Option is Include
IF CTL.Include_Exclude_Option = 'INC';

// CTL.Include/Exclude Option = CND.Exclude
CTL.Include_Exclude_Option = 'EXC';

// IF CTL.Include/Exclude Option is Exclude
IF CTL.Include_Exclude_Option = 'EXC';

// CTL.Include/Exclude Option = CND.Include
CTL.Include_Exclude_Option = 'INC';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F9=WW Order Appointments      (New E4195)
CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// Call program WW Order Appointments DF.
CALL PROGRAM(WW Order Appointments DF) ('PNXJDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F6=Process create load
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

CASE;

// IF CTL.Accounting Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// CTL.Load ID = CON.*ZERO
CTL.Load_ID = *ZERO;

// CTL.Load Status = WRK.BLANK
CTL.Load_Status = WRK.BLANK;

// Call program Edt Load Plan          DF.
CALL PROGRAM(Edt Load Plan          DF) ('OMQ6DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Load_Status);
PARAMETER(PAR.USR_Update_Flag);
PARAMETER('Y');
PARAMETER(PAR.Job_Name_CDE);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.Company_Number);

ENDIF;

ENDIF;

//?F13=Work with All Loads
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program WW Load Plans ALL     DF.
CALL PROGRAM(WW Load Plans ALL     DF) ('PDNUDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F14=Accept Loads
CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

CASE;

// IF CTL.Company Number EQ WRK.ZERO
IF CTL.Company_Number = WRK.ZERO;

// WRK.Company Number = CON.*ZERO
WRK.Company_Number = *ZERO;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(WRK.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Company Number = CTL.Company Number
WRK.Company_Number = CTL.Company_Number;

ENDIF;

// Call program DSP Control Chg Log    XF.
CALL PROGRAM(DSP Control Chg Log    XF) ('PDAOXFR');
PARAMETER(WRK.Company_Number);

ENDIF;

//?F18=Sweep Orders - Load Planning to Mercury Gate      E004119
CASE;

// IF CTL.*CMD key is CF18
IF CTL.*CMD_key = '18';

// Call program WW TMS Order Sweep     DF.
CALL PROGRAM(WW TMS Order Sweep     DF) ('PBTHDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Reload subfile if DC control field, carrier changes.
CASE;

// IF PAR.Status - Y or N NE CTL.Status - Y or N
IF PAR.Status_Y_or_N <> CTL.Status_Y_or_N;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?** 04/20/2012 LJB E002057
EXECUTE FUNCTION(RTV Num Multi-Whs Ords RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1788807;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Multi_Company_Load);
PARAMETER(RCD.Number_of_Orders);
{
 //?USER: Initialize routine

 // PAR.Number of Orders = CON.*ZERO
 PAR.Number_of_Orders = *ZERO;

 // PAR.Warehouse Code = CON.*BLANK
 PAR.Warehouse_Code = *BLANK;

 // PAR.Multi Company Load = CND.no
 PAR.Multi_Company_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF PAR.Number of Orders is Greater Than 1
 IF PAR.Number_of_Orders > 1;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Warehouse wo/Quit RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1788808;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

 }

 CASE;

 // IF PAR.Warehouse Code NE LCL.Warehouse Code
 IF PAR.Warehouse_Code <> LCL.Warehouse_Code;

 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 // PAR.Number of Orders = PAR.Number of Orders + CON.1
 PAR.Number_of_Orders = PAR.Number_of_Orders + 1;

 ENDIF;

 ENDIF;

}


CASE;

// IF RCD.Number of Orders is Greater Than 1
IF RCD.Number_of_Orders > 1;

// RCD.Multi Company Load = CND.yes
RCD.Multi_Company_Load = 'Y';

ENDIF;

// PAR.Status - Y or N = CTL.Status - Y or N
PAR.Status_Y_or_N = CTL.Status_Y_or_N;

//?Reload subfile if DC control field, carrier changes.
//?Reload If Warehouse is entered
// IF CTL.Warehouse 1 USR EQ WRK.Warehouse 1 USR
IF CTL.Warehouse_1_USR = WRK.Warehouse_1_USR;

//?Reload If Warehouse is entered
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Warehouse 1 USR = CTL.Warehouse 1 USR
WRK.Warehouse_1_USR = CTL.Warehouse_1_USR;

//?** 04/20/2012 LJB E002057
EXECUTE FUNCTION(RTV Num Multi-Whs Ords RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1788807;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Multi_Company_Load);
PARAMETER(RCD.Number_of_Orders);
{
 //?USER: Initialize routine

 // PAR.Number of Orders = CON.*ZERO
 PAR.Number_of_Orders = *ZERO;

 // PAR.Warehouse Code = CON.*BLANK
 PAR.Warehouse_Code = *BLANK;

 // PAR.Multi Company Load = CND.no
 PAR.Multi_Company_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF PAR.Number of Orders is Greater Than 1
 IF PAR.Number_of_Orders > 1;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Warehouse wo/Quit RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1788808;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

 }

 CASE;

 // IF PAR.Warehouse Code NE LCL.Warehouse Code
 IF PAR.Warehouse_Code <> LCL.Warehouse_Code;

 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 // PAR.Number of Orders = PAR.Number of Orders + CON.1
 PAR.Number_of_Orders = PAR.Number_of_Orders + 1;

 ENDIF;

 ENDIF;

}


CASE;

// IF RCD.Number of Orders is Greater Than 1
IF RCD.Number_of_Orders > 1;

// RCD.Multi Company Load = CND.yes
RCD.Multi_Company_Load = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Reload If LastStopCity is entered       trf011 7/28/06
CASE;

// IF CTL.USR Load/Stop 10 Alpha EQ WRK.USR Load/Stop 10 Alpha
IF CTL.USR_Load_Stop_10_Alpha = WRK.USR_Load_Stop_10_Alpha;

//?Reload If LastStopCity is entered       trf011 7/28/06
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Load/Stop 10 Alpha = CTL.USR Load/Stop 10 Alpha
WRK.USR_Load_Stop_10_Alpha = CTL.USR_Load_Stop_10_Alpha;

//?** 04/20/2012 LJB E002057
EXECUTE FUNCTION(RTV Num Multi-Whs Ords RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1788807;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Multi_Company_Load);
PARAMETER(RCD.Number_of_Orders);
{
 //?USER: Initialize routine

 // PAR.Number of Orders = CON.*ZERO
 PAR.Number_of_Orders = *ZERO;

 // PAR.Warehouse Code = CON.*BLANK
 PAR.Warehouse_Code = *BLANK;

 // PAR.Multi Company Load = CND.no
 PAR.Multi_Company_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF PAR.Number of Orders is Greater Than 1
 IF PAR.Number_of_Orders > 1;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Warehouse wo/Quit RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1788808;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

 }

 CASE;

 // IF PAR.Warehouse Code NE LCL.Warehouse Code
 IF PAR.Warehouse_Code <> LCL.Warehouse_Code;

 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 // PAR.Number of Orders = PAR.Number of Orders + CON.1
 PAR.Number_of_Orders = PAR.Number_of_Orders + 1;

 ENDIF;

 ENDIF;

}


CASE;

// IF RCD.Number of Orders is Greater Than 1
IF RCD.Number_of_Orders > 1;

// RCD.Multi Company Load = CND.yes
RCD.Multi_Company_Load = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?RELOAD: Ship Method Type
CASE;

// IF CTL.Ship Method Type USR NE LCL.Ship Method Type USR
IF CTL.Ship_Method_Type_USR <> LCL.Ship_Method_Type_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?** 04/20/2012 LJB E002057
EXECUTE FUNCTION(RTV Num Multi-Whs Ords RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1788807;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Multi_Company_Load);
PARAMETER(RCD.Number_of_Orders);
{
 //?USER: Initialize routine

 // PAR.Number of Orders = CON.*ZERO
 PAR.Number_of_Orders = *ZERO;

 // PAR.Warehouse Code = CON.*BLANK
 PAR.Warehouse_Code = *BLANK;

 // PAR.Multi Company Load = CND.no
 PAR.Multi_Company_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF PAR.Number of Orders is Greater Than 1
 IF PAR.Number_of_Orders > 1;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Warehouse wo/Quit RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1788808;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

 }

 CASE;

 // IF PAR.Warehouse Code NE LCL.Warehouse Code
 IF PAR.Warehouse_Code <> LCL.Warehouse_Code;

 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 // PAR.Number of Orders = PAR.Number of Orders + CON.1
 PAR.Number_of_Orders = PAR.Number_of_Orders + 1;

 ENDIF;

 ENDIF;

}


CASE;

// IF RCD.Number of Orders is Greater Than 1
IF RCD.Number_of_Orders > 1;

// RCD.Multi Company Load = CND.yes
RCD.Multi_Company_Load = 'Y';

ENDIF;

// LCL.Ship Method Type USR = CTL.Ship Method Type USR
LCL.Ship_Method_Type_USR = CTL.Ship_Method_Type_USR;

ENDIF;

//?RELOAD: change in ctl.Weight Adjust 6.0     USR    e00180 8/07/08 RMc
CASE;

// IF CTL.Weight Adjust 6.0     USR NE LCL.Weight Adjust 6.0     USR
IF CTL.Weight_Adjust_6_0_USR <> LCL.Weight_Adjust_6_0_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?** 04/20/2012 LJB E002057
EXECUTE FUNCTION(RTV Num Multi-Whs Ords RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1788807;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Multi_Company_Load);
PARAMETER(RCD.Number_of_Orders);
{
 //?USER: Initialize routine

 // PAR.Number of Orders = CON.*ZERO
 PAR.Number_of_Orders = *ZERO;

 // PAR.Warehouse Code = CON.*BLANK
 PAR.Warehouse_Code = *BLANK;

 // PAR.Multi Company Load = CND.no
 PAR.Multi_Company_Load = 'N';

 //?USER: Process Data record

 CASE;

 // IF PAR.Number of Orders is Greater Than 1
 IF PAR.Number_of_Orders > 1;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Warehouse wo/Quit RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1788808;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

 }

 CASE;

 // IF PAR.Warehouse Code NE LCL.Warehouse Code
 IF PAR.Warehouse_Code <> LCL.Warehouse_Code;

 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 // PAR.Number of Orders = PAR.Number of Orders + CON.1
 PAR.Number_of_Orders = PAR.Number_of_Orders + 1;

 ENDIF;

 ENDIF;

}


CASE;

// IF RCD.Number of Orders is Greater Than 1
IF RCD.Number_of_Orders > 1;

// RCD.Multi Company Load = CND.yes
RCD.Multi_Company_Load = 'Y';

ENDIF;

// LCL.Weight Adjust 6.0     USR = CTL.Weight Adjust 6.0     USR
LCL.Weight_Adjust_6_0_USR = CTL.Weight_Adjust_6_0_USR;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?OMS203: 1/97  no updates allowed if load contains block orders
//?* Ensure have current data
//?** Put miles into wrk context. Use Override Miles if entered.  E00207
EXECUTE FUNCTION(RTV WW Screen Fields   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1384832;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Allocate_Pounds_Miles);
PARAMETER(RCD.Trailer_Id);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Truck_Size);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(RCD.Tot_Pallet_Tare);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.Load_Status);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Set highlight flag, Override Total Load Miles entered   E00207
CASE;

// IF WRK.Override Total Load Miles is Entered
IF WRK.Override_Total_Load_Miles <> *ZERO;

// RCD.Total Miles 4,0       USR = WRK.Override Total Load Miles
RCD.Total_Miles_40_USR = WRK.Override_Total_Load_Miles;

// RCD.Change Flag USR = CND.Yes
RCD.Change_Flag_USR = 'Y';

//?** Set highlight flag, Override Total Load Miles entered   E00207
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Miles 4,0       USR = WRK.Total Load Miles
RCD.Total_Miles_40_USR = WRK.Total_Load_Miles;

// RCD.Change Flag USR = CND.No
RCD.Change_Flag_USR = 'N';

ENDIF;

//?Error if Load Header Not Found
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Error if Load Header Not Found
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Load Header &1 not found.'
ERROR(USR2313);
MSGPARM(RCD.Load_ID);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(RCD.Block_Order_Flag);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 // PAR.USR Check Y/N Status = CND.blank
 PAR.USR_Check_Y_N_Status = *BLANK;

 //?OMS203:  need to know if there are any Block orders on load
 // PAR.Block Order Flag = CND.Firm Order
 PAR.Block_Order_Flag = 'F';

 //?USER: Process Data record

 // PAR.USR Check Y/N Status = CND.yes
 PAR.USR_Check_Y_N_Status = 'Y';

 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // PAR.Block Order Flag = DB1.Block Order Flag
 PAR.Block_Order_Flag = DB1.Block_Order_Flag;

 QUIT;

 ENDIF;

}


// RCD.Trailer ID USR = RCD.Trailer Id
RCD.Trailer_ID_USR = RCD.Trailer_Id;

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
//?E4119  LIVE WITH TMS RESTRICTED OPTIONS
CASE;

// IF RCD.MG Created Load is Yes
IF RCD.MG_Created_Load = 'Y';

CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// OR RCD.*SFLSEL is Option 9
OR RCD.*SFLSEL = '9'/'9';

// OR RCD.*SFLSEL is Option 10
OR RCD.*SFLSEL = '10';

// OR RCD.*SFLSEL is Option 12
OR RCD.*SFLSEL = '12';

// Send error message - 'Live With TMS: Option &1 Invalid.'
ERROR(USR4601);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

ENDIF;

//?2=Process change load request
CASE;

// IF RCD.*SFLSEL is *Change Status
IF RCD.*SFLSEL = '2'/'2';

CASE;

// IF RCD.Block Order Flag is Block Order
IF RCD.Block_Order_Flag = 'B';

// Send error message - 'Load &2 contains Block Orders--no update allowed.'
ERROR(USR2441);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Load_ID);

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'Load &2 cannot be changed due to load status.'
ERROR(USR2278);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

//?** If Usr Flag 1 = Y then it will send to Fax routine
// Call program EDT Load Header        E1.
CALL PROGRAM(EDT Load Header        E1) ('PDCIE1R');
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.USR_Flag_1);
PARAMETER(RCD.Status_Y_or_N);
PARAMETER(RCD.USR_Status_Y_N);

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Order Number 1  PASS  USR = RCD.Load ID
PAR.Order_Number_1_PASS_USR = RCD.Load_ID;

// PAR.Load ID = RCD.Load ID
PAR.Load_ID = RCD.Load_ID;

//?** Put miles into wrk context. Use Override Miles if entered.  E00207
EXECUTE FUNCTION(RTV WW Screen Fields   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1384832;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Allocate_Pounds_Miles);
PARAMETER(RCD.Trailer_ID_USR);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Truck_Size);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(RCD.Tot_Pallet_Tare);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.Load_Status);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Carrier Code = RCD.Carrier Code
PAR.Carrier_Code = RCD.Carrier_Code;

//?** Set highlight flag, Override Total Load Miles entered   E00207
CASE;

// IF WRK.Override Total Load Miles is Entered
IF WRK.Override_Total_Load_Miles <> *ZERO;

// RCD.Total Miles 4,0       USR = WRK.Override Total Load Miles
RCD.Total_Miles_40_USR = WRK.Override_Total_Load_Miles;

// RCD.Change Flag USR = CND.Yes
RCD.Change_Flag_USR = 'Y';

//?** Set highlight flag, Override Total Load Miles entered   E00207
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Miles 4,0       USR = WRK.Total Load Miles
RCD.Total_Miles_40_USR = WRK.Total_Load_Miles;

// RCD.Change Flag USR = CND.No
RCD.Change_Flag_USR = 'N';

ENDIF;

// RCD.Numeric 4,0           USR = RCD.Schedule Sequence Number
RCD.Numeric_40_USR = RCD.Schedule_Sequence_Number;

//?*-----------------------------------------------------------------*
//?* 05/15/00 PKD OMS336 Replaced with routine that will include
//?*              the Pallet Tare Weight.
EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.USR_Weight_Accumulated);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


//?*-----------------------------------------------------------------*
// RCD.Weight Adjust 6.0     USR = PAR.USR Weight Accumulated
RCD.Weight_Adjust_6_0_USR = PAR.USR_Weight_Accumulated;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

CASE;

// IF RCD.Load Status is Locked or Shipped
IF RCD.Load_Status = 'L'/'S';

EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
PARAMETER(RCD.Company_Number);
PARAMETER('LDORDD');
PARAMETER(NLL.PFS_AccuSort_Active);
PARAMETER(LCL.PFS_Carlisle_Active);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.PFS Carlisle Active is Yes
IF LCL.PFS_Carlisle_Active = 'Y';

// Call program PFS Lock Load/Order   XF.
CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
PARAMETER(RCD.Load_ID);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?4=If delete request display pending message
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

CASE;

// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

// Send error message - 'This load is locked; Delete is invalid'
ERROR(USR1269);
MSGPARM(RCD.*SFLSEL);
MSGPARM(WRK.USR_Stop);

// IF *OTHERWISE
IF *OTHERWISE;

//?If an order assigned to this load is confirmed, then can't delete
EXECUTE FUNCTION(Val Order for Load Dl RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1197316;
PARAMETER(RCD.Load_ID);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
 //?USER: Process Data record

 CASE;

 // IF DB1.Order in Use is yes
 IF DB1.Order_in_Use = 'Y';

 // PGM.*Return code = CND.Order in use
 PGM.*Return_code = 'ORDUSE';

 QUIT;

 // IF DB1.Header Status is Confirmed & Complete
 IF DB1.Header_Status = 'C'/'R';

 // PGM.*Return code = CND.Order on load can't unlck
 PGM.*Return_code = 'NOUNLCK';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Picked Event       RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1305643;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('03');
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Record already exists
 IF PGM.*Return_code = 'Y2U0003';

 // PGM.*Return code = CND.Order on load can't unlck
 PGM.*Return_code = 'NOUNLCK';

 QUIT;

 ENDIF;

 ENDIF;

}


//?If confirmed/picked order exists, can't delete
CASE;

// IF PGM.*Return code is Order on load can't unlck
IF PGM.*Return_code = 'NOUNLCK';

// Send error message - 'Load &2 contains a picked or confirmed order; Delete not allowed'
ERROR(USR1247);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Load_ID);

//?If confirmed/picked order exists, can't delete
// IF PGM.*Return code is Order in use
IF PGM.*Return_code = 'ORDUSE';

// Send error message - 'Load &2 contains an order which is in use by someone else;  Delete not allo
ERROR(USR2279);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Load_ID);

//?If confirmed/picked order exists, can't delete
// IF *OTHERWISE
IF *OTHERWISE;

//?If load has been shipped, can't delete
CASE;

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'Load has been shipped, delete not allowed'
ERROR(USR1275);
MSGPARM(RCD.Load_Status);

//?If load has been shipped, can't delete
// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Delete pending.  Confirm Y or N.'
MESSAGE(USR0597 *INFO);

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?5=Process display orders on load request
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

//?used to call WW DSP ORDERS ON LOAD DF (Order Header) (PDJ6DFR)
// Call program WW Orders on Load      DF.
CALL PROGRAM(WW Orders on Load      DF) ('PDODDFR');
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.USR_Weight_Accumulated);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

//?6=Print Load Confirmation
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

CASE;

// IF RCD.Carrier Code EQ WRK.BLANK
IF RCD.Carrier_Code = WRK.BLANK;

// Send error message - 'Carrier must be entered for load &2'
ERROR(USR1253);
MSGPARM(RCD.Carrier_Code);
MSGPARM(RCD.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Order Number 1  PASS  USR = RCD.Load ID
PAR.Order_Number_1_PASS_USR = RCD.Load_ID;

// PAR.Carrier Code = RCD.Carrier Code
PAR.Carrier_Code = RCD.Carrier_Code;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

//?prompt for printer specs
CASE;

// IF PAR.USR Print Detail is Not Yes
IF PAR.USR_Print_Detail = *BLANK/'N';

// LCL.Hold On Jobq = CND.*NO
LCL.Hold_On_Jobq = *NO;

// LCL.Job Log Create = CND.*NO
LCL.Job_Log_Create = *NO;

// PAR.PRT Description = CON.FAXLDCNFRM
PAR.PRT_Description = 'FAXLDCNFRM';

// PAR.PRT Hold Output Sts = CND.*NO
PAR.PRT_Hold_Output_Sts = *NO;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CON.*BLANK
PAR.PRT_Night_Queue = *BLANK;

// PAR.PRT Printer Device = PAR.Default Printer
PAR.PRT_Printer_Device = PAR.Default_Printer;

//?** pass 1 for number of copies to print options       P000737
// PAR.PRT Number of Copies = CND.One
PAR.PRT_Number_of_Copies = 1;

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('O/M');

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// PAR.USR Print Detail = CND.yes
PAR.USR_Print_Detail = 'Y';

ENDIF;

//?print
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

//?print
// IF *OTHERWISE
IF *OTHERWISE;

//?** default # of copies to 1 if it is zeros      P000737
CASE;

// IF PAR.System Value Numeric is Equal to zero
IF PAR.System_Value_Numeric = *ZERO;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

ENDIF;

// WRK.USR Status (Y/N) = CND.Print
WRK.USR_Status_Y_N = 'P';

// WRK.Status Description 3  USR = CON.PNW2PFR$
WRK.Status_Description_3_USR = 'PNW2PFR$';

// WRK.Status - Y or N = CND.no
WRK.Status_Y_or_N = 'N';

// WRK.Status Flag 1  Y/N = CND.No
WRK.Status_Flag_1_Y_N = 'N';

// WRK.Status Flag 2  Y/N = CND.No
WRK.Status_Flag_2_Y_N = 'N';

// WRK.Status Flag 3  Y/N = CND.No
WRK.Status_Flag_3_Y_N = 'N';

// WRK.Status Flag 4  Y/N = CND.no
WRK.Status_Flag_4_Y_N = 'N';

// WRK.Status Flag 5  Y/N = CND.No
WRK.Status_Flag_5_Y_N = 'N';

EXECUTE FUNCTION(EXC Load Confirm Fax   IF) TYPE(EXCINTFUN)                     AC1595755;
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(*BLANK);
PARAMETER(PAR.Carrier_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(WRK.Status_Flag_1_Y_N);
PARAMETER(WRK.Status_Flag_2_Y_N);
PARAMETER(WRK.Status_Flag_3_Y_N);
PARAMETER(WRK.Status_Flag_4_Y_N);
PARAMETER(WRK.Status_Flag_5_Y_N);
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(WRK.Status_Description_3_USR);
PARAMETER(WRK.USR_Status_Y_N);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(*BLANK);
{
 //?Execute internal function

 //?** See comments for explanation of parms.
 // Call program PRC Submit Fax Load Cn UP.
 CALL PROGRAM(PRC Submit Fax Load Cn UP) ('PDVVUPC');
 PARAMETER(WRK.Return_Code_Usr);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(PAR.Transloader_Carrier_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.OHE_Carrier_SCAC_Code);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 PARAMETER(PAR.Status_Flag_3_Y_N);
 PARAMETER(PAR.Status_Flag_4_Y_N);
 PARAMETER(PAR.Status_Flag_5_Y_N);
 PARAMETER(PAR.Status_Y_or_N);
 PARAMETER(PAR.Status_Description_3_USR);
 PARAMETER(PAR.USR_Status_Y_N);
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(PAR.System_Value_Numeric);
 PARAMETER(PAR.Email_Address);

 //?***** Change Log and Comments
 DO;

 //?*****
 //?** 04/24/2011 LJB P000737
 //?** Pgm PODPUPR replaced with PDVVUPC. Parms changed to either
 //?** Print Only or Fax/Email to all carriers that are passed in.
 //?** *** Parms are:
 //?** Status-Y or N = Fax Carrier, Status Flag 1 Y/N=Fax Dispatcher,
 //?** Status Flag 2 Y/N=Fax Transloader, Status Flag 3 Y/N=Fax Mexican,
 //?** Status Flag 4 Y/N=Fax Exp Coordn, Status Flag 5 Y/N=Fax Ocean Shpr,
 //?** Usr Status (Y/N)=Print Only/Fax, Status Description 3=Printer file
 //?*****
 ENDDO;

}


CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

ENDIF;

//?7=If process unlock request, check for errors
CASE;

// IF RCD.*SFLSEL is *Unlock Load
IF RCD.*SFLSEL = '7'/'7';

//?RMC 6/5/6 dont allow unlock if picked from this pgm
EXECUTE FUNCTION(EDT Unlock Load Edits  IF) TYPE(EXCINTFUN)                     AC1419437;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.*SFLSEL);
PARAMETER(PAR.Error_Status);
PARAMETER(RCD.Block_Order_Flag);
PARAMETER('N');
{
 //?Execute internal function

 //?assume will have error
 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
 PARAMETER('LOCKLD');
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Access_Denied_Y_N);
 {
  //?Execute internal function

  // PAR.User Profile Name = JOB.*USER
  PAR.User_Profile_Name = JOB.*USER;

  EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(WRK.Access_Denied_Y_N);
  {
   //?Execute internal function

   //?RMC 5/11/09 Rtv default company from user profile --
   //?  Override user code model company if it exists
   EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.User_Code_Model);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?User Profile Record Not found
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   //?User Profile Record Not found
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   ENDIF;

   CASE;

   // IF PAR.User Code Model is equal to blank
   IF PAR.User_Code_Model = *BLANK;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Code_Model);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   // PAR.Warehouse Code = LCL.Warehouse Code
   PAR.Warehouse_Code = LCL.Warehouse_Code;

   //?Return code when not normal for Application Profile
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   //?Return code when not normal for Application Profile
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   ENDIF;

   CASE;

   // IF LCL.Company Number is greater than zero
   IF LCL.Company_Number > *ZERO;

   // PAR.Company Number = LCL.Company Number
   PAR.Company_Number = LCL.Company_Number;

   CASE;

   // IF LCL.Warehouse Code is Not Blanks
   IF LCL.Warehouse_Code <> *BLANK;

   EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Shipping_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    CASE;

    // IF DB1.Production Warehouse Code is Warehouse Code not Blank
    IF DB1.Production_Warehouse_Code <> *BLANK;

    // PAR.Warehouse Code = DB1.Production Warehouse Code
    PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

    QUIT;

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

  // PAR.Company Number = WRK.Company Number
  PAR.Company_Number = WRK.Company_Number;

  // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
  PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

  //?If access denied is no, rtv co. name
  CASE;

  // IF WRK.Access Denied (Y/N) is no
  IF WRK.Access_Denied_Y_N = 'N';

  EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 //?check the entry control field too.  4/28/05 so christa can do.
 EXECUTE FUNCTION(Rtv Unlock Load Authr RT) TYPE(RTVOBJ) FILE(OPC0REP)           AC1736002;
 PARAMETER(JOB.*USER);
 PARAMETER('O/P');
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Unlock_Load_Authority);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Access Denied (Y/N) is yes
 IF PAR.Access_Denied_Y_N = 'Y';

 // AND WRK.Unlock Load Authority is Blank
 AND WRK.Unlock_Load_Authority = *BLANK;

 // Send error message - 'User not allowed to  Lock/Unlock Loads.'
 ERROR(USR2468);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
 CASE;

 // IF PAR.Block Order Flag is Block Order
 IF PAR.Block_Order_Flag = 'B';

 //?  (load contains a block order)
 // Send error message - 'Load &2 contains Block Orders--no update allowed.'
 ERROR(USR2441);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 // Send error message - 'Load has been shipped can not unlock it'
 ERROR(USR1272);
 MSGPARM(PAR.Load_Status);

 //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?**** Determine if Load has been picked, if yes do not allow unlock
 //?**** This function checks OP Order Events & AS Picked Acknowledgment
 CASE;

 // IF PAR.Allow Unlock if Picked St is No
 IF PAR.Allow_Unlock_if_Picked_St = 'N';

 //?Do this one if par is NO. We dont want an UNLOCK if there are XOx
 //?  and it isnt shipping doing it.
 // Call program RTV Load Order Picked  XF.
 CALL PROGRAM(RTV Load Order Picked  XF) ('PDQVXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Pick_Status_USR);

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(PFS Val Order Picked  RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1754282;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Pick_Status_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Pick Status USR = CND.Not Picked
  PAR.Pick_Status_USR = 'N';

  //?USER: Process Data record

  // PAR.Pick Status USR = CND.Picked
  PAR.Pick_Status_USR = 'Y';

  QUIT;

 }

 ENDIF;

 //?Allow if picked but not Close Order or Close Truck  5/31/06
 CASE;

 // IF WRK.Pick Status USR is Picked
 IF WRK.Pick_Status_USR = 'Y';

 CASE;

 // IF PAR.Allow Unlock if Picked St is No
 IF PAR.Allow_Unlock_if_Picked_St = 'N';

 // Send error message - 'Unlocking of Load is not allowed for a Load which has been picked.'
 ERROR(USR1999);
 MSGPARM(PAR.Load_Status);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program PFS Val Close Ord/Trk XF.
 CALL PROGRAM(PFS Val Close Ord/Trk XF) ('PPYIXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Status_Y_or_N);

 CASE;

 // IF WRK.Status - Y or N is yes
 IF WRK.Status_Y_or_N = 'Y';

 // Send error message - 'Unlock Load not allowed for Load with a Closed Order or Closed Truck.'
 ERROR(USR3629);
 MSGPARM(PAR.*SFLSEL);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Unlock Load Pending'
 MESSAGE(USR1274 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 ENDIF;

 ENDIF;

 //?Allow if picked but not Close Order or Close Truck  5/31/06
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Unlock Load Pending'
 MESSAGE(USR1274 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Set confirm if error
CASE;

// IF PAR.Error Status is yes
IF PAR.Error_Status = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Set confirm if error
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

ENDIF;

ENDIF;

//?8=If process lock request, check for errors
CASE;

// IF RCD.*SFLSEL is *Lock Load
IF RCD.*SFLSEL = '8'/'8';

//?** Don't allow lock if errors pending in Order Detail   P001251
EXECUTE FUNCTION(EDT Lock Load Edits    IF) TYPE(EXCINTFUN)                     AC1384547;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Truck_Size);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(RCD.*SFLSEL);
PARAMETER(PAR.Error_Status);
PARAMETER(RCD.Block_Order_Flag);
{
 //?Execute internal function

 //?assume will have error
 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
 PARAMETER('LOCKLD');
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Access_Denied_Y_N);
 {
  //?Execute internal function

  // PAR.User Profile Name = JOB.*USER
  PAR.User_Profile_Name = JOB.*USER;

  EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(WRK.Access_Denied_Y_N);
  {
   //?Execute internal function

   //?RMC 5/11/09 Rtv default company from user profile --
   //?  Override user code model company if it exists
   EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.User_Code_Model);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?User Profile Record Not found
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   //?User Profile Record Not found
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   ENDIF;

   CASE;

   // IF PAR.User Code Model is equal to blank
   IF PAR.User_Code_Model = *BLANK;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Code_Model);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   // PAR.Warehouse Code = LCL.Warehouse Code
   PAR.Warehouse_Code = LCL.Warehouse_Code;

   //?Return code when not normal for Application Profile
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   //?Return code when not normal for Application Profile
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   ENDIF;

   CASE;

   // IF LCL.Company Number is greater than zero
   IF LCL.Company_Number > *ZERO;

   // PAR.Company Number = LCL.Company Number
   PAR.Company_Number = LCL.Company_Number;

   CASE;

   // IF LCL.Warehouse Code is Not Blanks
   IF LCL.Warehouse_Code <> *BLANK;

   EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Shipping_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    CASE;

    // IF DB1.Production Warehouse Code is Warehouse Code not Blank
    IF DB1.Production_Warehouse_Code <> *BLANK;

    // PAR.Warehouse Code = DB1.Production Warehouse Code
    PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

    QUIT;

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

  // PAR.Company Number = WRK.Company Number
  PAR.Company_Number = WRK.Company_Number;

  // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
  PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

  //?If access denied is no, rtv co. name
  CASE;

  // IF WRK.Access Denied (Y/N) is no
  IF WRK.Access_Denied_Y_N = 'N';

  EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 CASE;

 // IF PAR.Access Denied (Y/N) is yes
 IF PAR.Access_Denied_Y_N = 'Y';

 // Send error message - 'User not allowed to  Lock/Unlock Loads.'
 ERROR(USR2468);

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(VAL no Stop Entered    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1295710;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.USR_Orders_on_Load);
 {
  //?USER: Initialize routine

  // PAR.Status - Y or N = CND.no
  PAR.Status_Y_or_N = 'N';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.Stop/Drop is EQ Zero
  IF DB1.Stop_Drop = *ZERO;

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  QUIT;

  ENDIF;

 }

 //?Validate lock request
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'No orders assigned to load &1; Can't lock'
 ERROR(USR1276);
 MSGPARM(PAR.Load_ID);
 MSGPARM(PAR.*SFLSEL);

 //?Validate lock request
 // IF PAR.Block Order Flag is Block Order
 IF PAR.Block_Order_Flag = 'B';

 // Send error message - 'Load &2 contains Block Orders--no update allowed.'
 ERROR(USR2441);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Load Status is Locked thru Invoiced
 IF PAR.Load_Status = 'I'/'L'/'S';

 // Send error message - 'Load &2 cannot be locked due to load status'
 ERROR(USR2189);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Carrier Code EQ WRK.BLANK
 IF PAR.Carrier_Code = WRK.BLANK;

 // Send error message - 'Carrier must be entered for load &2'
 ERROR(USR1253);
 MSGPARM(PAR.Carrier_Code);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Truck Size EQ WRK.BLANK
 IF PAR.Truck_Size = WRK.BLANK;

 // Send error message - 'Truck size must be entered for load &2'
 ERROR(USR1255);
 MSGPARM(PAR.Truck_Size);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Shipping Method EQ WRK.BLANK
 IF PAR.Shipping_Method = WRK.BLANK;

 // Send error message - 'Shipping Method required to lock load.'
 ERROR(USR2197);
 MSGPARM(PAR.Shipping_Method);

 //?Validate lock request
 // IF PAR.USR Orders on Load is yes
 IF PAR.USR_Orders_on_Load = 'Y';

 // Send error message - 'Function not allowed; Load &1 has orders tied to it which are not assigned
 ERROR(USR2196);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF PAR.Load Acceptance Flag is Load not Accepted
 IF PAR.Load_Acceptance_Flag = 'U';

 // Send error message - 'Load cannot be locked, it is unaccepted.'
 ERROR(USR2514);
 MSGPARM(PAR.Load_ID);

 //?Validate lock request
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Hold, Use-by load  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1304327;
 PARAMETER(PAR.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?If find 1 order on load which is held/cancelled, set par flag and exit
  CASE;

  // IF DB1.Header Status is Hold
  IF DB1.Header_Status = 'H';

  // PAR.Header Status = DB1.Header Status
  PAR.Header_Status = DB1.Header_Status;

  QUIT;

  //?If find 1 order on load which is held/cancelled, set par flag and exit
  // IF DB1.Header Status is Cancelled
  IF DB1.Header_Status = 'X';

  // PAR.Header Status = DB1.Header Status
  PAR.Header_Status = DB1.Header_Status;

  QUIT;

  //?If find 1 order on load which is held/cancelled, set par flag and exit
  // IF DB1.Order in Use is yes
  IF DB1.Order_in_Use = 'Y';

  // PAR.Order in Use = DB1.Order in Use
  PAR.Order_in_Use = DB1.Order_in_Use;

  QUIT;

  ENDIF;

 }

 //?Error if held/cancelled/in use order(s) on load
 CASE;

 // IF PAR.Header Status is Hold
 IF PAR.Header_Status = 'H';

 // Send error message - 'Load &1 contains orders on Hold.  Load cannot be Locked.'
 ERROR(USR1921);
 MSGPARM(PAR.Load_ID);
 MSGPARM(PAR.*SFLSEL);

 //?Error if held/cancelled/in use order(s) on load
 // IF PAR.Header Status is Cancelled
 IF PAR.Header_Status = 'X';

 // Send error message - 'Load &1 contains cancelled order(s).  Load cannot be Locked.'
 ERROR(USR2236);
 MSGPARM(PAR.Load_ID);
 MSGPARM(PAR.*SFLSEL);

 //?Error if held/cancelled/in use order(s) on load
 // IF PAR.Order in Use is yes
 IF PAR.Order_in_Use = 'Y';

 // Send error message - 'Load &2 has order(s) in use; Load cannot be locked.'
 ERROR(USR2280);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?Error if held/cancelled/in use order(s) on load
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** Check if Export Order Automation Upload had errors  P001251
 EXECUTE FUNCTION(RTV Ord Requires Revw RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2027682;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Order_Requires_Review);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?** Cannot lock if Upload had errors                  P001251
 CASE;

 // IF LCL.Order Requires Review is Yes
 IF LCL.Order_Requires_Review = 'Y';

 // Send error message - 'Order has detail lines that require review'
 ERROR(USR4464);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?** Cannot lock if Upload had errors                  P001251
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
 PARAMETER(PAR.Truck_Size);
 PARAMETER(PAR.Maximum_pounds);
 PARAMETER(PAR.Minimum_pounds);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Check minimum and maximum pounds
 CASE;

 // IF PAR.Total Weight LT PAR.Minimum pounds
 IF PAR.Total_Load_Order_Weight < PAR.Minimum_pounds;

 // Send information message - 'Load weight is less than the minimum weight allowed for load &1.'
 MESSAGE(USR1262 *INFO);
 MSGPARM(PAR.Load_ID);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 //?Check minimum and maximum pounds
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Total Weight GT PAR.Maximum pounds
 IF PAR.Total_Load_Order_Weight > PAR.Maximum_pounds;

 // Send information message - 'Load weight is greater than maximum allowed for truck size.'
 MESSAGE(USR2231 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Locking load pending'
 MESSAGE(USR1273 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?***** Change Log and Comments
 DO;

 //?** 09/20/2011 LJB P001251 Export Order Automation
 //?** Cannot lock if Export Order Automation Upload had errors
 //?** that have not been cleared up
 ENDDO;

}


//?Set confirm if error
CASE;

// IF PAR.Error Status is yes
IF PAR.Error_Status = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Set confirm if error
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

ENDIF;

ENDIF;

//?9 = If process calc rated freight, check for errors
CASE;

// IF RCD.*SFLSEL is *Calc Rated Freight
IF RCD.*SFLSEL = '9'/'9';

//?Find errors or send msg
CASE;

// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

//?Warehouse, state required
CASE;

// IF RCD.Ship From Warehouse EQ WRK.BLANK
IF RCD.Ship_From_Warehouse = WRK.BLANK;

// Send error message - 'Ship From Warehouse required to calculate rated freight.'
ERROR(USR2228);
MSGPARM(RCD.*SFLSEL);

//?Warehouse, state required
// IF RCD.Ship To State Code EQ WRK.BLANK
IF RCD.Ship_To_State_Code = WRK.BLANK;

// Send error message - 'Ship to State required to calculate rated freight.'
ERROR(USR2229);
MSGPARM(RCD.*SFLSEL);

//?Warehouse, state required
// IF *OTHERWISE
IF *OTHERWISE;

//?** Put miles into wrk context. Use Override Miles if entered.  E00207
EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(RCD.Carrier_Code);
PARAMETER(WRK.USR_Carrier_Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program EDT Calc Rated Freight ET.
CALL PROGRAM(EDT Calc Rated Freight ET) ('PDYLETR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Allocate_Pounds_Miles);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Rated_Freight);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Carrier_Broker);
PARAMETER(WRK.Override_Total_Load_Miles);
PARAMETER(WRK.USR_Carrier_Name);

EXECUTE FUNCTION(RTV WW Screen Fields   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1384832;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Allocate_Pounds_Miles);
PARAMETER(RCD.Trailer_Id);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Truck_Size);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(RCD.Tot_Pallet_Tare);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.Load_Status);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Set highlight flag, Override Total Load Miles entered   E00207
CASE;

// IF WRK.Override Total Load Miles is Entered
IF WRK.Override_Total_Load_Miles <> *ZERO;

// RCD.Total Miles 4,0       USR = WRK.Override Total Load Miles
RCD.Total_Miles_40_USR = WRK.Override_Total_Load_Miles;

// RCD.Change Flag USR = CND.Yes
RCD.Change_Flag_USR = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?** Set highlight flag, Override Total Load Miles entered   E00207
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Miles 4,0       USR = WRK.Total Load Miles
RCD.Total_Miles_40_USR = WRK.Total_Load_Miles;

// RCD.Change Flag USR = CND.No
RCD.Change_Flag_USR = 'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Fill trailer ID on screen
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// RCD.Trailer ID USR = RCD.Trailer Id
RCD.Trailer_ID_USR = RCD.Trailer_Id;

ENDIF;

//?*-----------------------------------------------------------------*
//?* 05/15/00 PKD OMS336 Replaced with routine that will include
//?*              the Pallet Tare Weight.
EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.USR_Weight_Accumulated);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


//?*-----------------------------------------------------------------*
// RCD.Weight Adjust 6.0     USR = PAR.USR Weight Accumulated
RCD.Weight_Adjust_6_0_USR = PAR.USR_Weight_Accumulated;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

//?Find errors or send msg
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option invalid for loads which are not locked'
ERROR(USR2109);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?10=Process change load orders request    Edit Load Plan
CASE;

// IF RCD.*SFLSEL is *Work with Orders
IF RCD.*SFLSEL = '10';

CASE;

// IF RCD.Block Order Flag is Block Order
IF RCD.Block_Order_Flag = 'B';

// Send error message - 'Load &2 contains Block Orders--no update allowed.'
ERROR(USR2441);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Load_ID);

// IF RCD.Load Status is Shipped or Invoiced
IF RCD.Load_Status = 'I'/'S';

// Send error message - 'Load &2 cannot be changed due to load status.'
ERROR(USR2278);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Load_ID);

// IF RCD.Load Status is Lock
IF RCD.Load_Status = 'L';

// Send error message - 'Load &2 cannot be changed due to load status.'
ERROR(USR2278);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

//?** Pass Access Limited parm                   W288
// Call program Edt Load Plan          DF.
CALL PROGRAM(Edt Load Plan          DF) ('OMQ6DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Load_Status);
PARAMETER(WRK.USR_Flag_1);
PARAMETER('Y');
PARAMETER(PAR.Job_Name_CDE);

//?Set USR Flag 1
CASE;

// IF WRK.USR Flag 1 is Yes
IF WRK.USR_Flag_1 = 'Y';

// PAR.USR Flag 1 = CND.Yes
PAR.USR_Flag_1 = 'Y';

ENDIF;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Order Number 1  PASS  USR = RCD.Load ID
PAR.Order_Number_1_PASS_USR = RCD.Load_ID;

// PAR.Load ID = RCD.Load ID
PAR.Load_ID = RCD.Load_ID;

//?** Put miles into wrk context. Use Override Miles if entered.  E00207
EXECUTE FUNCTION(RTV WW Screen Fields   RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1384832;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Total_Load_Order_Weight);
PARAMETER(RCD.Flat_Amount);
PARAMETER(RCD.Allocate_Pounds_Miles);
PARAMETER(RCD.Trailer_Id);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Truck_Size);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Schedule_Sequence_Number);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(RCD.Load_Acceptance_Flag);
PARAMETER(RCD.Tot_Pallet_Tare);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.Load_Status);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Set highlight flag, Override Total Load Miles entered   E00207
CASE;

// IF WRK.Override Total Load Miles is Entered
IF WRK.Override_Total_Load_Miles <> *ZERO;

// RCD.Total Miles 4,0       USR = WRK.Override Total Load Miles
RCD.Total_Miles_40_USR = WRK.Override_Total_Load_Miles;

// RCD.Change Flag USR = CND.Yes
RCD.Change_Flag_USR = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?** Set highlight flag, Override Total Load Miles entered   E00207
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Miles 4,0       USR = WRK.Total Load Miles
RCD.Total_Miles_40_USR = WRK.Total_Load_Miles;

// RCD.Change Flag USR = CND.No
RCD.Change_Flag_USR = 'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// PAR.Carrier Code = RCD.Carrier Code
PAR.Carrier_Code = RCD.Carrier_Code;

//?Fill trailer ID on screen
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// RCD.Trailer ID USR = RCD.Trailer Id
RCD.Trailer_ID_USR = RCD.Trailer_Id;

ENDIF;

//?*-----------------------------------------------------------------*
//?* 05/15/00 PKD OMS336 Replaced with routine that will include
//?*              the Pallet Tare Weight.
EXECUTE FUNCTION(RTV GrsWgt w/PltTr Ld RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1601442;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(PAR.USR_Weight_Accumulated);
{
 //?USER: Initialize routine

 // PAR.USR Weight Accumulated = CON.*ZERO
 PAR.USR_Weight_Accumulated = *ZERO;

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 //?***** Change log and comments
 DO;

 //?** 01/18/2010 PKD E000261 Pass the Average Pallet Tare
 ENDDO;

 //?USER: Process Data record

 //?01/18/10 PKD E000261 SEND in LCL.Avg Pallet Tare
 // Call program RTV Gross Wgt/Qty     XF.
 CALL PROGRAM(RTV Gross Wgt/Qty     XF) ('PQPQXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.USR_Weight_Accumulated);
 PARAMETER(LCL.Order_Quantity);
 PARAMETER(LCL.Avg_Pallet_Tare);

 //?USER: Exit processing

 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 EXECUTE FUNCTION(RTV Pallet/Tare        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1585842;
 PARAMETER(DB1.Load_ID);
 PARAMETER(LCL.Pallets_Loaded);
 PARAMETER(LCL.Avg_Pallet_Tare);
 PARAMETER(LCL.Tot_Pallet_Tare);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.USR Weight Accumulated = PAR.USR Weight Accumulated + LCL.Tot Pallet Tare
 PAR.USR_Weight_Accumulated = PAR.USR_Weight_Accumulated + LCL.Tot_Pallet_Tare;

 ENDIF;

}


//?*-----------------------------------------------------------------*
// RCD.Weight Adjust 6.0     USR = PAR.USR Weight Accumulated
RCD.Weight_Adjust_6_0_USR = PAR.USR_Weight_Accumulated;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?11=Edit Traffic Comments
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

// Call program EDT PD Traffic Comment EF.
CALL PROGRAM(EDT PD Traffic Comment EF) ('PDCZEFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

//?12=Calc Total Load Miles Option
CASE;

// IF RCD.*SFLSEL is *Calc Total Load Miles
IF RCD.*SFLSEL = '12';

CASE;

// IF LCL.Application WHS Restrict is no
IF LCL.Application_WHS_Restrict = 'N';

// Call program EDT Stop Miles         EF.
CALL PROGRAM(EDT Stop Miles         EF) ('PDW7EFR');
PARAMETER(RCD.Load_ID);

//?** Retrieve both total miles and override miles    E00207
EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.Load_Status);
PARAMETER(WRK.Total_Load_Miles);
PARAMETER(WRK.Override_Total_Load_Miles);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Use Override miles, if entered                 E00207
CASE;

// IF WRK.Override Total Load Miles is Entered
IF WRK.Override_Total_Load_Miles <> *ZERO;

// RCD.Total Miles 4,0       USR = WRK.Override Total Load Miles
RCD.Total_Miles_40_USR = WRK.Override_Total_Load_Miles;

// RCD.Change Flag USR = CND.Yes
RCD.Change_Flag_USR = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?** Use Override miles, if entered                 E00207
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Total Miles 4,0       USR = WRK.Total Load Miles
RCD.Total_Miles_40_USR = WRK.Total_Load_Miles;

// RCD.Change Flag USR = CND.No
RCD.Change_Flag_USR = 'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?14 = Edit Export Instructions
CASE;

// IF RCD.*SFLSEL is Option 14
IF RCD.*SFLSEL = '14';

CASE;

// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

//?** First select which order is to be processed. Then pass the
//?** order number to the Edit Export Instructions program
// WRK.Exit Selection USR = CND.No
WRK.Exit_Selection_USR = 'N';

//?** Loop until the Select receives an <F3> to exit
// DOW WRK.Exit Selection USR is No
DOW WRK.Exit_Selection_USR = 'N';

// OR WRK.USR Exit Program is yes
OR WRK.USR_Exit_Program = 'Y';

//?11/23/22 DN DO4595-Replaced PMFXSRR with PUXRSRR.
// Call program SEL Order/Load/Exp Sts2SR.
CALL PROGRAM(SEL Order/Load/Exp Sts2SR) ('PUXRSRR');
PARAMETER(WRK.Exit_Selection_USR);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Company_Number);
PARAMETER(LCL.Orders_have_Same_Booking#);

//?** Process record if not <F3> to exit
CASE;

// IF WRK.Exit Selection USR is No
IF WRK.Exit_Selection_USR = 'N';

CASE;

// IF RCD.MG Created Load is Yes
IF RCD.MG_Created_Load = 'Y';

// Call program DSP Cust Ord Export    D1.
CALL PROGRAM(DSP Cust Ord Export    D1) ('PMFWD1R');
PARAMETER(WRK.USR_Company_Number);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

//?11/23/22 DN DO4595-Passed in Parm 'Orders have Same Booking#'.
// Call program EDT Export Order Instr E2.
CALL PROGRAM(EDT Export Order Instr E2) ('PNVZE2R');
PARAMETER(WRK.USR_Company_Number);
PARAMETER(WRK.USR_Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.USR_Exit_Program);
PARAMETER(LCL.Orders_have_Same_Booking#);

ENDIF;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

ENDDO;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

SET CURSOR;

CASE;

// IF RCD.Load Status is Unlocked thru Invoiced
IF RCD.Load_Status = 'I'/'L'/'S'/'U';

EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
PARAMETER(RCD.Company_Number);
PARAMETER('LDORDD');
PARAMETER(NLL.PFS_AccuSort_Active);
PARAMETER(LCL.PFS_Carlisle_Active);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.PFS Carlisle Active is Yes
IF LCL.PFS_Carlisle_Active = 'Y';

// Call program PFS Lock Load/Order   XF.
CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
PARAMETER(RCD.Load_ID);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?18 = Flag to Fax load confirmation, send to SSI PowerPro, if applicable
CASE;

// IF RCD.*SFLSEL is Option 18
IF RCD.*SFLSEL = '18';

//?** interactive - can take a while if several are selected
CASE;

// IF RCD.Carrier Code is not entered
IF RCD.Carrier_Code = *BLANK;

// Send error message - 'Carrier must exist on load to fax Load Confirmation.'
ERROR(USR2444);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Carrier_Code);

// IF *OTHERWISE
IF *OTHERWISE;

SET CURSOR;

// PAR.Company Number Pass   USR = RCD.Company Number
PAR.Company_Number_Pass_USR = RCD.Company_Number;

// PAR.Order Number 1  PASS  USR = RCD.Load ID
PAR.Order_Number_1_PASS_USR = RCD.Load_ID;

// PAR.Load ID = RCD.Load ID
PAR.Load_ID = RCD.Load_ID;

// PAR.Carrier Code = RCD.Carrier Code
PAR.Carrier_Code = RCD.Carrier_Code;

// WRK.Load ID = RCD.Load ID
WRK.Load_ID = RCD.Load_ID;

//?** Check SSI download flag. If Yes, send info to PowerPro  FP1166
EXECUTE FUNCTION(RTV SSI Carrier flag   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1904336;
PARAMETER(RCD.Carrier_Code);
PARAMETER(WRK.SSI_Download_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV SSI Fax'd Flag     RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1906598;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Fax_Sent_to_SSI_Carrier);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.MG Created Load is Not MG Created Load
IF RCD.MG_Created_Load = *BLANK;

//?** See if carrier has already received a fax, if yes, send Change  FP1166
CASE;

// IF WRK.SSI Download Flag is Yes, Download to SSI
IF WRK.SSI_Download_Flag = 'Y';

CASE;

// IF WRK.Fax Sent to SSI Carrier is Not Fax'd to Carrier
IF WRK.Fax_Sent_to_SSI_Carrier = *BLANK/'N';

// WRK.SSI Add, Chg, Delete flag = CND.Add
WRK.SSI_Add_Chg_Delete_flag = 00;

// IF *OTHERWISE
IF *OTHERWISE;

//?** Send "Changed" record to SSI PowerPro
// WRK.SSI Add, Chg, Delete flag = CND.Change
WRK.SSI_Add_Chg_Delete_flag = 04;

ENDIF;

// Call program BLD SSI Download       XF.
CALL PROGRAM(BLD SSI Download       XF) ('PNPNXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Carrier_Code);
PARAMETER(WRK.SSI_Add_Chg_Delete_flag);

EXECUTE FUNCTION(CHG Fax'd to SSI flag  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1906429;
PARAMETER(RCD.Load_ID);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?if USR Flag 1 is not yes
CASE;

// IF PAR.USR Flag 1 is No
IF PAR.USR_Flag_1 = 'N';

// OR PAR.USR Flag 1 is Blank
OR PAR.USR_Flag_1 = *BLANK;

//?** Fax/Email Documentation                        P000737
DO;

//?** PDVVUPC which calls PDVVPCLP which calls
//?** PDAMXFR which calls PODYUPR to send any faxes and then calls
//?** PLAMUPC to send any emails
//?** Set Fax Carrier=Yes, Fax dispatch=No, Fax/Print=Fax
//?** Fax Mexican Carrier=No, Fax Ship Line=No, Fax Transloader=No
//?** Default reporting parms, so no popup window for print options
//?** Always include Carrier Code. It is used for the subject
//?** line of the emailed confirmation
ENDDO;

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

// WRK.Status Flag 1  Y/N = CND.No
WRK.Status_Flag_1_Y_N = 'N';

// WRK.Status Flag 2  Y/N = CND.No
WRK.Status_Flag_2_Y_N = 'N';

// WRK.Status Flag 3  Y/N = CND.No
WRK.Status_Flag_3_Y_N = 'N';

// WRK.Status Flag 4  Y/N = CND.no
WRK.Status_Flag_4_Y_N = 'N';

// WRK.Status Flag 5  Y/N = CND.No
WRK.Status_Flag_5_Y_N = 'N';

// WRK.USR Status (Y/N) = CND.Fax
WRK.USR_Status_Y_N = 'F';

// WRK.Status Description 3  USR = CON.PNW2PFR$
WRK.Status_Description_3_USR = 'PNW2PFR$';

// PAR.PRT Description = CON.FAXLDCNFRM
PAR.PRT_Description = 'FAXLDCNFRM';

// PAR.PRT Printer Device = PAR.Default Printer
PAR.PRT_Printer_Device = PAR.Default_Printer;

// PAR.PRT Hold Output Sts = CND.*YES
PAR.PRT_Hold_Output_Sts = *YES;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CON.*BLANK
PAR.PRT_Night_Queue = *BLANK;

// PAR.PRT Number of Copies = CND.One
PAR.PRT_Number_of_Copies = 1;

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// PAR.USR Flag 1 = CND.Yes
PAR.USR_Flag_1 = 'Y';

ENDIF;

//?** Fax Load Confirmation - Cancel if F3 is pressed   C1921
CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// Send information message - 'Fax/Email Load Confirmation has been cancelled'
MESSAGE(USR4484 *INFO);

//?** Fax Load Confirmation - Cancel if F3 is pressed   C1921
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(EXC Load Confirm Fax   IF) TYPE(EXCINTFUN)                     AC1595755;
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(*BLANK);
PARAMETER(PAR.Carrier_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(WRK.Status_Flag_1_Y_N);
PARAMETER(WRK.Status_Flag_2_Y_N);
PARAMETER(WRK.Status_Flag_3_Y_N);
PARAMETER(WRK.Status_Flag_4_Y_N);
PARAMETER(WRK.Status_Flag_5_Y_N);
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(WRK.Status_Description_3_USR);
PARAMETER(WRK.USR_Status_Y_N);
PARAMETER(PAR.PRT_Description);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(*BLANK);
{
 //?Execute internal function

 //?** See comments for explanation of parms.
 // Call program PRC Submit Fax Load Cn UP.
 CALL PROGRAM(PRC Submit Fax Load Cn UP) ('PDVVUPC');
 PARAMETER(WRK.Return_Code_Usr);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(PAR.Transloader_Carrier_Code);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Shipping_Line);
 PARAMETER(PAR.OHE_Carrier_SCAC_Code);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 PARAMETER(PAR.Status_Flag_3_Y_N);
 PARAMETER(PAR.Status_Flag_4_Y_N);
 PARAMETER(PAR.Status_Flag_5_Y_N);
 PARAMETER(PAR.Status_Y_or_N);
 PARAMETER(PAR.Status_Description_3_USR);
 PARAMETER(PAR.USR_Status_Y_N);
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(PAR.PRT_Hold_Output_Sts);
 PARAMETER(PAR.PRT_Save_Output_Sts);
 PARAMETER(PAR.System_Value_Numeric);
 PARAMETER(PAR.Email_Address);

 //?***** Change Log and Comments
 DO;

 //?*****
 //?** 04/24/2011 LJB P000737
 //?** Pgm PODPUPR replaced with PDVVUPC. Parms changed to either
 //?** Print Only or Fax/Email to all carriers that are passed in.
 //?** *** Parms are:
 //?** Status-Y or N = Fax Carrier, Status Flag 1 Y/N=Fax Dispatcher,
 //?** Status Flag 2 Y/N=Fax Transloader, Status Flag 3 Y/N=Fax Mexican,
 //?** Status Flag 4 Y/N=Fax Exp Coordn, Status Flag 5 Y/N=Fax Ocean Shpr,
 //?** Usr Status (Y/N)=Print Only/Fax, Status Description 3=Printer file
 //?*****
 ENDDO;

}


// Send information message - 'Selected Load(s) have been faxed/emailed to carrier.'
MESSAGE(USR2445 *INFO);

ENDIF;

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

//?19=Display Load
CASE;

// IF RCD.*SFLSEL is Option 19
IF RCD.*SFLSEL = '19';

// Call program DSP Load Plan          DF.
CALL PROGRAM(DSP Load Plan          DF) ('PDSLDFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?20=Display Change Log
CASE;

// IF RCD.*SFLSEL is Option 20
IF RCD.*SFLSEL = '20';

// Call program DSP Chg Log Entries-Ld DF.
CALL PROGRAM(DSP Chg Log Entries-Ld DF) ('PDCRDFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?screen displays state of last stop on load, so get that field again
//?do this @end of validate, so that processing will use REAL ship to state
EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(RCD.USR_Load_Stop_10_Alpha);
PARAMETER(RCD.USR_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


//?USER: Final processing (Pre-confirm)

// PAR.USR Print Detail = CND.no
PAR.USR_Print_Detail = 'N';

// PAR.USR Flag 1 = CND.No
PAR.USR_Flag_1 = 'N';

//?if USR Update Flag = Y
CASE;

// IF PAR.USR Update Flag is No
IF PAR.USR_Update_Flag = *BLANK;

//?if USR Update Flag = Y
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

ENDIF;

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

//?USER: Process subfile record (Post-confirm)

//?Process delete load request
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?12/14/22 DN DO4595-Cancel EDI 601 Transaction Processing.
CASE;

// IF RCD.Export Status is yes
IF RCD.Export_Status = 'Y';

// AND LCL.EDI Interchange Active U is Yes
AND LCL.EDI_Interchange_Active_U = 'Y';

EXECUTE FUNCTION(Val Cancel EDI 601    RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2211097;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.OHE_Vessel_Airline);
PARAMETER(LCL.OHE_Discharge_Port_Airprt);
PARAMETER(LCL.OHE_Sail_Flight_Date);
PARAMETER(LCL.OHE_EDI_824_AES_ITN_#);
PARAMETER(LCL.Cancel_EDI_601_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?EDI 601 has been sent before.
 CASE;

 // IF DB1.OHE EDI 601 Action is Sent
 IF DB1.OHE_EDI_601_Action = 'S';

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Cancel EDI 601 USR = CND.Yes
 PAR.Cancel_EDI_601_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Cancel EDI 601 USR is Yes
IF LCL.Cancel_EDI_601_USR = 'Y';

EXECUTE FUNCTION(RTV Country Code only  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1531787;
PARAMETER(RCD.Company_Number);
PARAMETER(LCL.Order_Number);
PARAMETER(LCL.Country_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv CBP Info f/EDI 601 RT) TYPE(RTVOBJ) FILE(PUC1REP)          AC2211898;
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.CBP_Export_Port_Code);
PARAMETER(LCL.CBP_Std_Carrier_Alpha_Cde);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Port of Unlading  RT) TYPE(RTVOBJ) FILE(PUCRREP)           AC2210451;
PARAMETER(LCL.Country_Code);
PARAMETER(LCL.OHE_Discharge_Port_Airprt);
PARAMETER(LCL.CBP_Foreign_Port_Code);
PARAMETER(NLL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Crt EDI 601 Exp Shp InfXF.
CALL PROGRAM(Crt EDI 601 Exp Shp InfXF) ('PUXSXFR');
PARAMETER(LCL.Order_Number);
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.OHE_Vessel_Airline);
PARAMETER(LCL.OHE_Sail_Flight_Date);
PARAMETER(LCL.OHE_EDI_824_AES_ITN_#);
PARAMETER(LCL.Country_Code);
PARAMETER(LCL.CBP_Export_Port_Code);
PARAMETER(LCL.CBP_Std_Carrier_Alpha_Cde);
PARAMETER(LCL.CBP_Foreign_Port_Code);
PARAMETER('D');

ENDIF;

ENDIF;

//?** Rtv ship to cust# for change log record            E000722
EXECUTE FUNCTION(CHG Load Number        RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1197366;
PARAMETER(RCD.Load_ID);
{
 //?USER: Initialize routine

 //?05/14/04 SLM PKTR01 Multi-Company - Function was changed
 //?                                   to remove Company RST or Pos
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Specific Event Cde RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1349580;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('02');
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(DLT OP Order Events    DL) TYPE(DLTOBJ) FILE(OPEYCPP)          AC1170143;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Event_Number);
 }

 EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Event_Number);
 PARAMETER(PAR.Event_Code);
 PARAMETER(PAR.Event_Date);
 PARAMETER(PAR.Activity_Hold);
 PARAMETER(DB1.Ship_To_Customer);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(UPD Load Information   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1325557;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Event_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(UPD Event: Ship Detail RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1335289;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Event_Code);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Shipping Event     CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1325667;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Event_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(Chg Load Information   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1197376;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Rated_Freight);
  PARAMETER(PAR.Event_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   // Call program TRG Order Hdr CHG Trig XT.
   CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Type_Sales);
   PARAMETER(DB1.AR_Customer_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Ship_To_Name);
   PARAMETER(DB1.Ship_To_Address_Line_1);
   PARAMETER(DB1.Ship_To_Address_Line_2);
   PARAMETER(DB1.Ship_To_Address_Line_3);
   PARAMETER(DB1.Ship_To_City);
   PARAMETER(DB1.Ship_To_State_Code);
   PARAMETER(DB1.Ship_To_Zip_Postal_Code);
   PARAMETER(DB1.Bill_to_Customer);
   PARAMETER(DB1.Bill_to_Name);
   PARAMETER(DB1.Bill_to_Address_Line_1);
   PARAMETER(DB1.Bill_to_Address_Line_2);
   PARAMETER(DB1.Bill_to_Address_Line_3);
   PARAMETER(DB1.Bill_to_City);
   PARAMETER(DB1.Bill_to_State_Code);
   PARAMETER(DB1.Bill_to_Zip_Postal_Code);
   PARAMETER(DB1.Customer_Purchase_Order_#);
   PARAMETER(DB1.Order_Date);
   PARAMETER(DB1.Requested_Ship_Date);
   PARAMETER(DB1.Actual_Shipped_Date);
   PARAMETER(DB1.Cancel_Date);
   PARAMETER(DB1.Terms_Code);
   PARAMETER(DB1.Special_Instructions);
   PARAMETER(DB1.Special_Instructions_2);
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Comment_Print_Acknowledge);
   PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
   PARAMETER(DB1.Comment_Print_Pick_Slip);
   PARAMETER(DB1.Comment_Print_Ship_Doc);
   PARAMETER(DB1.Reason_Code);
   PARAMETER(DB1.Order_in_Use);
   PARAMETER(DB1.Header_Status);
   PARAMETER(DB1.Header_Status_Last);
   PARAMETER(DB1.Order_Type_Print_Status);
   PARAMETER(DB1.Scheduled_Ship_Date);
   PARAMETER(DB1.User_Original_Entry);
   PARAMETER(DB1.Date_of_Original_Entry);
   PARAMETER(DB1.Order_Value_Total);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(DB1.Credit_Hold);
   PARAMETER(DB1.Production_Hold);
   PARAMETER(DB1.New_Customer_Hold);
   PARAMETER(DB1.Requested_Delivery_Date);
   PARAMETER(DB1.Requested_Delivery_Time);
   PARAMETER(DB1.Accounts_Receiv_Ent_1);
   PARAMETER(DB1.Accounts_Receiv_Ent_2);
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
   PARAMETER(DB1.Rated_Freight);
   PARAMETER(DB1.LTL_Flag);
   PARAMETER(DB1.Price_Audit);
   PARAMETER(DB1.Price_Status);
   PARAMETER(DB1.Shipping_Method);
   PARAMETER(DB1.Export_Status);
   PARAMETER(DB1.Palletize);
   PARAMETER(DB1.Shrink_Wrap);
   PARAMETER(DB1.Slip_Sheet);
   PARAMETER(DB1.Age_Code);
   PARAMETER(DB1.Reefer_Temperature);
   PARAMETER(DB1.Load_Type);
   PARAMETER(DB1.Attach_to_Invoice_Number);
   PARAMETER(DB1.Load_Plan_Order);
   PARAMETER(DB1.Print_Pick_Slip);
   PARAMETER(DB1.Resell_Reference_Number);
   PARAMETER(DB1.Special_Comment_1);
   PARAMETER(DB1.Special_Comment_2);
   PARAMETER(DB1.Affect_Auto_Accruals);
   PARAMETER(DB1.Sales_Route_Code);
   PARAMETER(DB1.Manager_Level_Code);
   PARAMETER(DB1.VP_Level_Code);
   PARAMETER(DB1.Attach_to_Order_Number);
   PARAMETER(DB1.Reason_for_Price_Audit);
   PARAMETER(DB1.Invoice_Number);
   PARAMETER(DB1.Invoice_Suffix);
   PARAMETER(DB1.Invoice_Date);
   PARAMETER(DB1.Event_Code);
   PARAMETER(DB1.Trans_Contol_AS400_Plant);
   PARAMETER(DB1.Modified_Flag);
   PARAMETER(DB1.A_R_order_Value_Total);
   PARAMETER(DB1.Billing_Activity_Type);
   PARAMETER(DB1.Block_Order_Flag);
   PARAMETER(DB1.Order_Certification_Flag);
   PARAMETER(DB1.Invoice_Order_Value_Tot);
   PARAMETER(DB1.Process_Sts_for_3C);
   PARAMETER(DB1.Order_Conf_Fax_Sts);
   PARAMETER(DB1.Manifest_Fax_Sts);
   PARAMETER(DB1.Invoice_Fax_Sts);
   PARAMETER(DB1.Transfer_in_Storage_Ind);
   PARAMETER(DB1.Email_Cust_On_Order_Ship);
   PARAMETER(DB1.Order_Emailed);
   PARAMETER(DB1.Export_Docs_Go_w_Driver);
   PARAMETER(DB1.Shipping_Temp_Code_C_F);
   PARAMETER(DB1.Broker_Order_Status);
   PARAMETER(DB1.Air_Freight_Order);
   PARAMETER(DB1.Order_Requires_Review);
   PARAMETER(DB1.OH_Load_Plan_Ready);
   PARAMETER(DB1.Export_USDA_Approved);
   PARAMETER(DB1.HPB_Ship_to_Warehouse);
   PARAMETER(DB1.OH_TF_Exempt_Code);
   PARAMETER(DB1.OH_Appt_Confirmation_Dt);
   PARAMETER(DB1.JPN_Invoice_Issuance_Date);
   PARAMETER(DB1.Load_Actual_Shipped_Date);
   PARAMETER(DB1.Load_BOL_Complete_Date);
   PARAMETER(DB1.Load_Truck_Departure_Date);
   PARAMETER(DB1.Maximum_Gross_Weight);
   PARAMETER(DB1.Time_of_Original_Entry);
   PARAMETER(DB1.OH_Appt_Confirmation_Tm);
   PARAMETER(DB1.Load_BOL_Complete_Time);
   PARAMETER(DB1.Load_Truck_Departure_Time);
   PARAMETER(DB1.Act_Frt_Reference_Amount);
   PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
   PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
   PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
   PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
   PARAMETER(DB1.Claim_Number);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);

  }

 }

 //?*------------------------------------------------------*
 //?* 07/18/02 PKP When the Order is removed from the Load, change
 //?*              the Deadline Departure Date and Time to zero.
 EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Deadline_Depart_Date_LH);
  PARAMETER(PAR.Deadline_Depart_Time_LH);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 //?*------------------------------------------------------*
}


//?*------------------------------------------------------*
// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);

CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

EXECUTE FUNCTION(RTV First Order on LoadRT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1464005;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Order_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


ENDIF;

//?*------------------------------------------------------*
//?** Write a group of Log recs for the deleted load     E000722
DO;

// WRK.Load Change Type = CND.Delete Load
WRK.Load_Change_Type = 'DELOAD';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// PAR.Stop/Drop = CON.1
PAR.Stop_Drop = 1;

EXECUTE FUNCTION(RTV First Order on LoadRT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1464005;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Order_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(RCD.Load_Status);
PARAMETER('Deleted');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

//?** Write a record for the deleted carrier code
CASE;

// IF RCD.Carrier Code is entered
IF RCD.Carrier_Code <> *BLANK;

// WRK.Load Change Type = CND.Delete Load-Carrier
WRK.Load_Change_Type = 'DELCAR';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// PAR.Stop/Drop = CON.1
PAR.Stop_Drop = 1;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(RCD.Carrier_Code);
PARAMETER('Dltd CAR');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

ENDIF;

//?** Write a record for the deleted Scheduled Ship Date
// WRK.Load Change Type = CND.Delete Load-SSD
WRK.Load_Change_Type = 'DELSSD';

// LCL.Text USR 7 = CON.*BLANK
LCL.Text_USR_7 = *BLANK;

// LCL.Text USR 7 = CVTVAR(RCD.Scheduled Ship Date)
LCL.Text_USR_7 = CVTVAR(RCD.Scheduled_Ship_Date);

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// PAR.Stop/Drop = CON.1
PAR.Stop_Drop = 1;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(LCL.Text_USR_7);
PARAMETER('Dltd SSD');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

//?** Write a record for the deleted Trailer ID, if entered
CASE;

// IF RCD.Trailer Id is Entered
IF RCD.Trailer_Id <> *BLANK;

// WRK.Load Change Type = CND.Delete Load-Trailer ID
WRK.Load_Change_Type = 'DELTRL';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// PAR.Stop/Drop = CON.1
PAR.Stop_Drop = 1;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(RCD.Trailer_ID_USR);
PARAMETER('Dltd TRLR');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

ENDIF;

//?** Write a record for the deleted Customer Number
// WRK.Load Change Type = CND.Delete Load-Customer
WRK.Load_Change_Type = 'DELCST';

EXECUTE FUNCTION(RTV All Hdr flds b/ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1699784;
PARAMETER(NLL.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Bill_to_Customer);
PARAMETER(NLL.Bill_to_Name);
PARAMETER(NLL.Bill_to_Address_Line_1);
PARAMETER(NLL.Bill_to_Address_Line_2);
PARAMETER(NLL.Bill_to_Address_Line_3);
PARAMETER(NLL.Bill_to_City);
PARAMETER(NLL.Bill_to_State_Code);
PARAMETER(NLL.Bill_to_Zip_Postal_Code);
PARAMETER(NLL.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(NLL.Actual_Shipped_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(NLL.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(NLL.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(NLL.Special_Comment_1);
PARAMETER(NLL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Text USR 7 = CON.*BLANK
LCL.Text_USR_7 = *BLANK;

// LCL.Text USR 7 = CVTVAR(RCD.Ship To Customer)
LCL.Text_USR_7 = CVTVAR(RCD.Ship_To_Customer);

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// PAR.Stop/Drop = CON.1
PAR.Stop_Drop = 1;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(LCL.Text_USR_7);
PARAMETER('Dltd Cust');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

//?** Write a record for DELODA Delete load accepted if NO carrier 7/22/16
CASE;

// IF RCD.Carrier Code is not entered
IF RCD.Carrier_Code = *BLANK;

// WRK.Load Change Type = CND.Delete Load Accepted
WRK.Load_Change_Type = 'DELODA';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// PAR.Stop/Drop = CON.1
PAR.Stop_Drop = 1;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(*BLANK);
PARAMETER('Del accepted');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

ENDIF;

ENDDO;

EXECUTE FUNCTION(DLT Load Detail       RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197338;
PARAMETER(RCD.Load_ID);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Load Detail        DL) TYPE(DLTOBJ) FILE(OMFLCPP)          AC1183328;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
}


EXECUTE FUNCTION(DLT Load Header        DL) TYPE(DLTOBJ) FILE(OMFJCPP)          AC1183331;
PARAMETER(RCD.Load_ID);

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Process unlock load
CASE;

// IF RCD.*SFLSEL is *Unlock Load
IF RCD.*SFLSEL = '7'/'7';

EXECUTE FUNCTION(UPD Unlock Load Update IF) TYPE(EXCINTFUN)                     AC1454814;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(CHG Ld Sts,Rated Frts  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1371002;
 PARAMETER(PAR.Load_ID);
 PARAMETER('U');
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(EDT Unlock Load        IF) TYPE(EXCINTFUN)                     AC1419468;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('PLTFLRSYS');
  PARAMETER(LCL.Plant_Floor_System_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?Notify Accusort if locked load
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program DEL AS Order Hdr/Dtl   XF.
  CALL PROGRAM(DEL AS Order Hdr/Dtl   XF) ('PDQ0XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Unlock Load/Order XF.
  CALL PROGRAM(PFS Unlock Load/Order XF) ('PPNQXFR');
  PARAMETER(PAR.Load_ID);

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 09/23/2011 RMC E1607  if load had a whs with edi wso interchange, then
  //?   delete it if Unproc, else change it to "D"elete/and reprocess
  // Call program Exc ChgDel EDI f/UnlckXF.
  CALL PROGRAM(Exc ChgDel EDI f/UnlckXF) ('PBAEXFR');
  PARAMETER(PAR.Load_ID);

 }

 EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1399763;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(DB1.Miles_to_next_stop);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1399729;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Order_Number);
  {
   //?USER: Initialize routine

   //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
   //?                                    to remove Company RST or Pos
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

   //?05/13/04 slm Multi-Company - Order Header lv remove co must use db1
   //?                              was using the par replace with db1
   EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(*ZERO);
   {
    //?USER: Initialize routine

    //?par.@rated freight is the sum of all the detail rated frt, for adjusting
    // PAR.@Rated Freight = CON.*ZERO
    PAR.@Rated_Freight = *ZERO;

    //?par.usr process status is used to indicate if there are detail present
    // PAR.USR Process status = CND.no
    PAR.USR_Process_status = 'N';

    //?USER: Process Data record

    CASE;

    // IF DB1.Detail Line Status is Cancelled
    IF DB1.Detail_Line_Status = 'X';

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.USR Process status = CND.yes
    PAR.USR_Process_status = 'Y';

    CASE;

    // IF PAR.Order Weight Total is Equal to zero
    IF PAR.Order_Weight_Total = *ZERO;

    // OR PAR.Total Rated Freight is Zero
    OR PAR.Total_Rated_Freight = *ZERO;

    // PAR.Rated Freight = CON.*ZERO
    PAR.Rated_Freight = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Detail Line Status is Confirmed & Complete
    IF DB1.Detail_Line_Status = 'C'/'R';

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
    * PAR.Total_Rated_Freight 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
    / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

    ENDIF;

    // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
    PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

    ENDIF;

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
    PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

    // PAR.Order Sequence Number = DB1.Order Sequence Number
    PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

    // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
    PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

    ENDIF;

    //?USER: Exit processing

    //?Adjust totals
    CASE;

    // IF PAR.@Rated Freight NE PAR.Total Rated Freight
    IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

    // AND PAR.USR Process status is yes
    AND PAR.USR_Process_status = 'Y';

    // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
    WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

    // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
    PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

    //?Update last detail line processed
    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

  }

 }

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

}


// WRK.Load Change Type = CND.Unlock Load
WRK.Load_Change_Type = 'UNLOCK';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(CTL.Stop_Drop);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(RCD.Load_Status);
PARAMETER('U');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

//?Process lock load
CASE;

// IF RCD.*SFLSEL is *Lock Load
IF RCD.*SFLSEL = '8'/'8';

CASE;

// IF RCD.Load Acceptance Flag is Load not Accepted
IF RCD.Load_Acceptance_Flag = 'U';

// Send error message - 'Load cannot be locked, it is unaccepted.'
ERROR(USR2514);
MSGPARM(RCD.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(UPD Lock Load Update   IF) TYPE(EXCINTFUN)                     AC1451094;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Load Header All,Mg RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2124794;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Total_Load_Miles);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Export_Status);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.MG_Created_Load);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?.** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 //?Fill in ship from whse deadline depart, if locking load and none entered
 CASE;

 // IF PAR.Ship From Warehouse EQ WRK.BLANK
 IF PAR.Ship_From_Warehouse = WRK.BLANK;

 EXECUTE FUNCTION(Rtv/Chg Whs,ld miles  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1471360;
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
  PARAMETER(DB1.Load_ID);
  PARAMETER(1);
  PARAMETER(PAR.Ship_From_Warehouse);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(WRK.TXT_field_not_needed);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   QUIT;

  }

  CASE;

  // IF DB1.Warehouse Code EQ PAR.Ship From Warehouse
  IF DB1.Warehouse_Code = PAR.Ship_From_Warehouse;

  // PAR.Warehouse Code = CON.*BLANK
  PAR.Warehouse_Code = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Total Load Miles will = zeros if no
  //?** Miles Between Cities record exists
  //?** Override total load miles will take precedence over tlm  E00207
  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  // PAR.Total Load Miles = DB1.Total Load Miles
  PAR.Total_Load_Miles = DB1.Total_Load_Miles;

  // PAR.Override Total Load Miles = DB1.Override Total Load Miles
  PAR.Override_Total_Load_Miles = DB1.Override_Total_Load_Miles;

  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Override_Total_Load_Miles);

  ENDIF;

  //?** Add override miles to the update            E00207 LJB 08/13/08
  EXECUTE FUNCTION(CHG Ship FrmWhs,ld mls CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1471384;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Override_Total_Load_Miles);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 CASE;

 // IF PAR.MG Created Load is Not MG Created Load
 IF PAR.MG_Created_Load = *BLANK;

 //?** RTV carrier appt date/time                         E00495
 EXECUTE FUNCTION(RTV 1st Carr Apt Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1954073;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.LD_Carrier_Appt_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.LD Carrier Appt Date = DB1.LD Carrier Appt Date
  PAR.LD_Carrier_Appt_Date = DB1.LD_Carrier_Appt_Date;

  // PAR.LD Carrier Appt Time = DB1.LD Carrier Appt Time
  PAR.LD_Carrier_Appt_Time = DB1.LD_Carrier_Appt_Time;

  QUIT;

 }

 //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 CASE;

 // IF WRK.LD Carrier Appt Date is Entered
 IF WRK.LD_Carrier_Appt_Date > 0;

 // PAR.Deadline Departure Date = WRK.LD Carrier Appt Date
 PAR.Deadline_Departure_Date = WRK.LD_Carrier_Appt_Date;

 //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv 1st Ord Delv Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456727;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Ship_To_Name);
  PARAMETER(WRK.Ship_To_City);
  PARAMETER(NLL.Ship_To_State_Code);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 // PAR.Deadline Departure Time = PAR.Requested Delivery Time * CON.100 *
 PAR.Deadline_Departure_Time = PAR.Requested_Delivery_Time * 100;

 ENDIF;

 EXECUTE FUNCTION(CLC Departure Date/TimeIF) TYPE(EXCINTFUN)                     AC1456426;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?Execute internal function

  //?***** Change Log and Comments
  DO;

  //?** The Date and Time being calculated are the latest date and time
  //?** that the truck can leave the warehouse and still make the
  //?** delivery on time.
  //?*****
  //?** E00495 LJB 09.23.2009
  //?** Carrier Appt Date and Time are in the parm Deadline Departure
  //?** date and time, if called from "UPD Ld Mi,Whse,DDD/T IF"
  //?*****
  //?** E00207 LJB 08/11/2008
  //?** Override Total Load Miles has been added to the
  //?** Retrieve Total Load Miles function
  //?*****
  //?** FP1251 LJB 12/26/2007
  //?** If no Miles To Next record, change SSD/T to zeros.
  //?** Scheduled Deliv Date has (should have) Requested Delivery Date in it
  ENDDO;

  EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Shipping_Method);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Shipping Method is Collect Truck
  IF LCL.Shipping_Method = 'CT';

  // OR LCL.Shipping Method is Collect Rail
  OR LCL.Shipping_Method = 'CR';

  //?** Treat CT & CR the same           FP1251 LJB 12/26/2007
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?** Calc miles between all stops then retrieve 1st stop miles
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  //?** Override miles will be returned, if entered
  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  // PAR.Scheduled Delivery Date = CND.not entered
  PAR.Scheduled_Delivery_Date = *ZERO;

  // PAR.Scheduled Delivery Time = CND.Not Entered
  PAR.Scheduled_Delivery_Time = *ZERO;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Hours Required = CON.*ZERO
  PAR.Hours_Required = *ZERO;

  // LCL.Hours Required = CON.*ZERO
  LCL.Hours_Required = *ZERO;

  EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
  PARAMETER(PAR.Miles_to_next_stop);
  PARAMETER(LCL.Hours_Required);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?09/09/11 PKD E1659 Additional Route Hours
  // Call program Rtv Addtnl Route Hrs  XF.
  CALL PROGRAM(Rtv Addtnl Route Hrs  XF) ('PMACXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Additional_Route_Hours);

  // PAR.Hours Required = LCL.Hours Required + LCL.Additional Route Hours
  PAR.Hours_Required = LCL.Hours_Required + LCL.Additional_Route_Hours;

  //?get number of whole days + remaining hours
  CASE;

  // IF PAR.Hours Required is Zero
  IF PAR.Hours_Required = *ZERO;

  //?get number of whole days + remaining hours
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.@Days 5 = PAR.Hours Required / CON.24 *
  PAR.@Days_5 = PAR.Hours_Required / 24;

  // WRK.USR Hours 5.0 = PAR.@Days 5 * CON.24 *
  WRK.USR_Hours_5_0 = PAR.@Days_5 * 24;

  // PAR.USR Hours 5.0 = PAR.Hours Required - WRK.USR Hours 5.0
  PAR.USR_Hours_5_0 = PAR.Hours_Required - WRK.USR_Hours_5_0;

  // WRK.@Numeric 6,0 = PAR.USR Hours 5.0 * CON.10000 *
  WRK.@Numeric_60 = PAR.USR_Hours_5_0 * 10000;

  //?Subtract whole days
  CASE;

  // IF PAR.@Days 5 is greater than zero
  IF PAR.@Days_5 > *ZERO;

  // PAR.@Days 5 = PAR.@Days 5 * CON.-1 *
  PAR.@Days_5 = PAR.@Days_5 * -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  //?Calculate # whole days + hours left
  CASE;

  // IF WRK.@Numeric 6,0 GE PAR.Scheduled Delivery Time
  IF WRK.@Numeric_60 >= PAR.Scheduled_Delivery_Time;

  // WRK.@Numeric 6,0 = WRK.@Numeric 6,0 - PAR.Scheduled Delivery Time
  WRK.@Numeric_60 = WRK.@Numeric_60 - PAR.Scheduled_Delivery_Time;

  // PAR.@Days 5 = CON.-1
  PAR.@Days_5 = -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  // PAR.Scheduled Delivery Time = CON.240000 - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = 240000 - WRK.@Numeric_60;

  //?Calculate # whole days + hours left
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = PAR.Scheduled_Delivery_Time - WRK.@Numeric_60;

  ENDIF;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?---------------------------------------------------------------
 EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Ship_To_Customer);
 PARAMETER(WRK.Ship_To_Name);
 PARAMETER(WRK.Ship_To_Address_Line_1);
 PARAMETER(WRK.Ship_To_Address_Line_2);
 PARAMETER(WRK.Ship_To_Address_Line_3);
 PARAMETER(WRK.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Ship_To_Zip_Postal_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_Address_Line_1);
  PARAMETER(PAR.Ship_To_Address_Line_2);
  PARAMETER(PAR.Ship_To_Address_Line_3);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Ship_To_Zip_Postal_Code);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 //?---------------------------------------------------------------
 //?OMS132:  Fill in Flat Amount as required
 CASE;

 // IF PAR.Total Stops is One Stop
 IF PAR.Total_Stops = 1;

 // AND PAR.Flat Amount EQ WRK.ZERO
 AND PAR.Flat_Amount = WRK.ZERO;

 //?get flat amount for destination city
 EXECUTE FUNCTION(RTV Ship To City/St-Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454218;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Destination_City);
 PARAMETER(PAR.State_Code);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.Destination_City);
 PARAMETER(WRK.Destination_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 // PAR.Destination City = WRK.Destination City
 PAR.Destination_City = WRK.Destination_City;

 EXECUTE FUNCTION(RTV Destination Amount RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1454806;
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Destination_City);
 PARAMETER(PAR.State_Code);
 PARAMETER(PAR.Flat_Amount);
 {
  //?USER: Process Data record

  //?only pass out FLAT amt.  (it could now be a ML rate too)  01/03/07
  CASE;

  // IF DB1.CDR Unit of Measure is Flat
  IF DB1.CDR_Unit_of_Measure = 'FL';

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

 }

 ENDIF;

 //?Calc Load U/M           -- RMC 6/16/06
 DO;

 //?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
 // Call program RTV UM/Whs Code,BX Qty XF.
 CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Load_U_M);

 ENDDO;

 EXECUTE FUNCTION(CHG Lock Load Update   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1454811;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER('L');
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.Load_U_M);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

 }

 //?OMS261:  if sched to ship today, print prelim pick at all whses
 //?Sched to ship today
 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 EXECUTE FUNCTION(RTV All Whses on Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1483728;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV All Whses on Order RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1483729;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.USR_CDE_Parm_1);
  PARAMETER(PAR.USR_CDE_Parm_2);
  PARAMETER(PAR.USR_CDE_Parm_3);
  PARAMETER(PAR.USR_CDE_Parm_4);
  PARAMETER(PAR.USR_CDE_Parm_5);
  PARAMETER(PAR.USR_CDE_Parm_6);
  PARAMETER(PAR.USR_CDE_Parm_7);
  PARAMETER(PAR.USR_CDE_Parm_8);
  PARAMETER(PAR.USR_CDE_Parm_9);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Warehouse Code EQ PAR.USR Warehouse Code
   IF DB1.Warehouse_Code = PAR.USR_Warehouse_Code;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 1
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_1;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 2
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_2;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 3
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_3;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 4
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_4;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 5
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_5;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 6
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_6;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 7
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_7;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 8
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_8;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 9
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_9;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?current warehouse not already being used
   //?Fill in first blank warehouse
   CASE;

   // IF PAR.USR Warehouse Code EQ WRK.BLANK
   IF PAR.USR_Warehouse_Code = WRK.BLANK;

   // PAR.USR Warehouse Code = DB1.Warehouse Code
   PAR.USR_Warehouse_Code = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 1 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_1 = WRK.BLANK;

   // PAR.USR CDE Parm 1 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_1 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 2 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_2 = WRK.BLANK;

   // PAR.USR CDE Parm 2 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_2 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 3 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_3 = WRK.BLANK;

   // PAR.USR CDE Parm 3 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_3 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 4 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_4 = WRK.BLANK;

   // PAR.USR CDE Parm 4 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_4 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 5 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_5 = WRK.BLANK;

   // PAR.USR CDE Parm 5 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_5 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 6 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_6 = WRK.BLANK;

   // PAR.USR CDE Parm 6 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_6 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 7 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_7 = WRK.BLANK;

   // PAR.USR CDE Parm 7 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_7 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 8 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_8 = WRK.BLANK;

   // PAR.USR CDE Parm 8 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_8 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 9 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_9 = WRK.BLANK;

   // PAR.USR CDE Parm 9 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_9 = DB1.Warehouse_Code;

   ENDIF;

   ENDIF;

  }

 }

 // PAR.Company Number Pass   USR = PAR.Company Number
 PAR.Company_Number_Pass_USR = PAR.Company_Number;

 // PAR.Order Number 1  PASS  USR = PAR.Load ID
 PAR.Order_Number_1_PASS_USR = PAR.Load_ID;

 // PAR.Date 1          PASS  USR = PAR.Scheduled Ship Date
 PAR.Date_1_PASS_USR = PAR.Scheduled_Ship_Date;

 // WRK.USR Select/Omit Flag = CND.Select
 WRK.USR_Select_Omit_Flag = 'S';

 // WRK.USR Detail or Summary = CND.Detail
 WRK.USR_Detail_or_Summary = 'D';

 // WRK.AUTO PRINT PRELIM PICK = CND.AUTO PRINT YES
 WRK.AUTO_PRINT_PRELIM_PICK = 'Y';

 //?letting all the other parms default in the CL
 //?If warehouse exists for load then print.
 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // Call program Pass Pre Pick @LoadLockUP.
 CALL PROGRAM(Pass Pre Pick @LoadLockUP) ('PDBDUPC');
 PARAMETER(PAR.Return_Code_Usr);
 PARAMETER('OMS');
 PARAMETER('PDIZPCLP');
 PARAMETER(WRK.USR_Detail_or_Summary);
 PARAMETER('Auto Print Prelim. Pick');
 PARAMETER(WRK.PRT_Printer_Device);
 PARAMETER(WRK.PRT_Hold_Output_Sts);
 PARAMETER(WRK.PRT_Save_Output_Sts);
 PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
 PARAMETER(WRK.PRT_Night_Queue);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Date_1_PASS_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(WRK.System_Value_Numeric);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 PARAMETER(WRK.USR_Select_Omit_Flag);
 PARAMETER(WRK.AUTO_PRINT_PRELIM_PICK);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(EDT Lock Load          IF) TYPE(EXCINTFUN)                     AC1419469;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?AccuSort:  Create Order Header and Order Detail
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program Zzz AS Order Hdr/Dtl   XF.
  CALL PROGRAM(Zzz AS Order Hdr/Dtl   XF) ('PDQPXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 07/28/2017 RMC R131331 if load had a whs with edi wso interchange, then
  // Call program Exc Create EDI f/Lock XF.
  CALL PROGRAM(Exc Create EDI f/Lock XF) ('PUDNXFR');
  PARAMETER(PAR.Load_ID);

 }

 CASE;

 // IF JOB.*PROGRAM is PRT Audit Report
 IF JOB.*PROGRAM = 'PDSNPFR';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

 //?Sched to ship today
 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // Call program RTV Warehouse Dflt PrtrXF.
 CALL PROGRAM(RTV Warehouse Dflt PrtrXF) ('PDCHXFR');
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(LCL.Include_in_Auto_Pre_Pick);

 //?RMC DLY029 10/30/07 - sndmsg only if Warehouse is set up for auto-print
 CASE;

 // IF LCL.Include in Auto Pre Pick is Incl in Auto Prelim Pick
 IF LCL.Include_in_Auto_Pre_Pick = 'Y';

 // Send information message - 'Preliminary Pick Printing at printer for warehouses: &1 &2 &3 &4 &5
 MESSAGE(USR2565 *INFO);
 MSGPARM(PAR.USR_Warehouse_Code);
 MSGPARM(PAR.USR_CDE_Parm_1);
 MSGPARM(PAR.USR_CDE_Parm_2);
 MSGPARM(PAR.USR_CDE_Parm_3);
 MSGPARM(PAR.USR_CDE_Parm_4);
 MSGPARM(PAR.USR_CDE_Parm_5);
 MSGPARM(PAR.USR_CDE_Parm_6);
 MSGPARM(PAR.USR_CDE_Parm_7);
 MSGPARM(PAR.USR_CDE_Parm_8);
 MSGPARM(PAR.USR_CDE_Parm_9);

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Preliminary Pick not printed, no order details.'
 MESSAGE(USR2715 *INFO);

 ENDIF;

 ENDIF;

 ENDIF;

 //?***** Change Log and comments
 DO;

 //?** 07/15/16  RMC E4119 Dont recalc deadl depart,miles if MG Created Load
 //?** 09/30/2009 LJB E00495
 //?**   Use carrier date/time, if entered, to calc DDD/T
 //?** 11/16/2007 LJB FP1251 Deadline Depart Date and Time will be
 //?** zeros if there is no Miles Between Cities record
 ENDDO;

}


// WRK.Load Change Type = CND.Lock Load
WRK.Load_Change_Type = 'LOCK';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(CTL.Stop_Drop);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(RCD.Load_Status);
PARAMETER('L');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

ENDIF;

//?USER: Final processing (Post-confirm)

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

