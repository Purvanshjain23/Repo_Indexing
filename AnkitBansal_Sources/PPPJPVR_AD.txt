// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPPJPVR
// ?Date: 14.08.2025 Time: 03:41:32
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?R9083 02/13/17 DN-Get Default Company.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


ENDIF;

//?USER: Load screen

// DTL.IVF Week Ending Date = CND.eq 20991231
DTL.IVF_Week_Ending_Date = 20991231;

//?R9083 02/13/17 DN-Set Inventory Valuation Grouping.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(PAR.Company_Number);
PARAMETER('IVFGROUP');
PARAMETER(DTL.Inv_Valuation_Group_Desc);
PARAMETER(DTL.IVF_Valuation_Grouping);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?R9083 02/13/17 DN-Added RST by ISC Valuation Grouping.
EXECUTE FUNCTION(Rtv Last Posted Week  RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1742328;
PARAMETER(DTL.IVF_Valuation_Grouping);
PARAMETER(DTL.IVF_Week_Ending_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Get the latest week ending date that was posted
 CASE;

 // IF DB1.ISC Post Balance Sts is Posted or Reposted
 IF DB1.ISC_Post_Balance_Sts = 'P'/'R';

 // AND DB1.ISC Post Warehouse Sts is Posted or Reposted
 AND DB1.ISC_Post_Warehouse_Sts = 'P'/'R';

 // PAR.ISC Week Ending Date = DB1.ISC Week Ending Date
 PAR.ISC_Week_Ending_Date = DB1.ISC_Week_Ending_Date;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

}


//?DISPLAY WARNING IF IVF weekly RCDS EXIST
CASE;

// IF WRK.IVF Post Inventory Sts is *ALL values
IF WRK.IVF_Post_Inventory_Sts = 'P'/'O'/'R';

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

ENDIF;

//?USER: Validate fields

//?R9083 02/05/17 DN-Modify to Read By Grouping/WE Date.
EXECUTE FUNCTION(Rtv Post Status-Both  RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1768440;
PARAMETER(DTL.IVF_Valuation_Grouping);
PARAMETER(DTL.IVF_Week_Ending_Date);
PARAMETER(LCL.ISC_Warehouse_Company);
PARAMETER(WRK.ISC_Post_Balance_Sts);
PARAMETER(WRK.ISC_Post_Warehouse_Sts);
{
 //?USER: Initialize routine

 // WRK.Record Found USR = CND.Record Found
 WRK.Record_Found_USR = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.ISC Post Balance Sts is Open
 IF DB1.ISC_Post_Balance_Sts = 'O';

 // OR DB1.ISC Post Warehouse Sts is Open
 OR ( DB1.ISC_Post_Warehouse_Sts = 'O';

 // AND DB1.ISC Item Type is Finished Good
 AND DB1.ISC_Item_Type = 'FG' );

 // PAR.ISC Post Balance Sts = DB1.ISC Post Balance Sts
 PAR.ISC_Post_Balance_Sts = DB1.ISC_Post_Balance_Sts;

 // PAR.ISC Post Warehouse Sts = DB1.ISC Post Warehouse Sts
 PAR.ISC_Post_Warehouse_Sts = DB1.ISC_Post_Warehouse_Sts;

 // PAR.ISC Warehouse Company = DB1.ISC Warehouse Company
 PAR.ISC_Warehouse_Company = DB1.ISC_Warehouse_Company;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ISC Post Balance Sts = DB1.ISC Post Balance Sts
 PAR.ISC_Post_Balance_Sts = DB1.ISC_Post_Balance_Sts;

 // PAR.ISC Post Warehouse Sts = DB1.ISC Post Warehouse Sts
 PAR.ISC_Post_Warehouse_Sts = DB1.ISC_Post_Warehouse_Sts;

 // PAR.ISC Warehouse Company = DB1.ISC Warehouse Company
 PAR.ISC_Warehouse_Company = DB1.ISC_Warehouse_Company;

 ENDIF;

}


//?Post Balances not done for either company
CASE;

// IF WRK.ISC Post Balance Sts is Open
IF WRK.ISC_Post_Balance_Sts = 'O';

//?R9083 02/22/17 DN-Modified to Add Grouping to Message.
// Send error message - 'Error: Post has not been done for Balances Co &1, group &2.'
ERROR(USR3572);
MSGPARM(LCL.ISC_Warehouse_Company);
MSGPARM(DTL.IVF_Valuation_Grouping);

ENDIF;

//?Post Warehouse prices not done
CASE;

// IF WRK.ISC Post Warehouse Sts is Open
IF WRK.ISC_Post_Warehouse_Sts = 'O';

//?R9083 02/22/17 DN-Modified to Add Grouping to Message.
// Send error message - 'Error: Post has not been done for Warehouse Prices group &2.'
ERROR(USR3613);
MSGPARM(DTL.IVF_Week_Ending_Date);
MSGPARM(DTL.IVF_Valuation_Grouping);

ENDIF;

//?R9083 02/13/17 DN-Modify to Read By Grouping/WE Date.
EXECUTE FUNCTION(Rtv Post Inv Sts-1st  RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1740674;
PARAMETER(DTL.IVF_Valuation_Grouping);
PARAMETER(DTL.IVF_Week_Ending_Date);
PARAMETER(WRK.IVF_Post_Inventory_Sts);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF WRK.IVF Post Inventory Sts is Posted
IF WRK.IVF_Post_Inventory_Sts = 'P';

//?R9083 02/22/17 DN-Modified to Add Grouping to Message.
// Send error message - 'Post Inventory Values for group &1 is complete. Cannot recalculate.'
ERROR(USR3547);
MSGPARM(DTL.IVF_Valuation_Grouping);

ENDIF;

//?Weekly product Revenue Process complete?
CASE;

// IF WRK.Status - Y or N is no
IF WRK.Status_Y_or_N = 'N';

// Send error message - 'Weekly Stock Revenue process in not complete. Cannot proceed.'
ERROR(USR3548);

ENDIF;

//?USER: User defined action

//?Restart the process if this option is taken and rcds exist for the week
CASE;

// IF WRK.IVF Post Inventory Sts is *ALL values
IF WRK.IVF_Post_Inventory_Sts = 'P'/'O'/'R';

//?Delete existing records for the week ending date.
// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?R9083 06/26/17 DN-Update date conversion due to Synon version difference.
// LCL.Date Out (8,0) USR = DTL.IVF Week Ending Date
LCL.Date_Out_80_USR = DTL.IVF_Week_Ending_Date;

// WRK.Date (Char-8) USR = CVTVAR(LCL.Date Out (8,0) USR)
WRK.Date_Char_8_USR = CVTVAR(LCL.Date_Out_80_USR);

//?R9083 02/14/17 DN-Added Inventory Valuation Grouping as Parm.
// Call program Exc Calc Inv/Prd Vals UP.
SBMJOB;
CALL PROGRAM(Exc Calc Inv/Prd Vals UP) ('PPPNUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(WRK.Date_Char_8_USR);
PARAMETER(WRK.Record_Found_USR);
PARAMETER(DTL.IVF_Valuation_Grouping);
SBMJOBOVR JOB(INVENVALUE);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

//?R9083 02/15/17 DN-Modified to Add Grouping to Message.
// Send information message - 'Inventory Valuation for group &2 week ending &1 has been submitted.'
MESSAGE(USR3549 *INFO);
MSGPARM(DTL.IVF_Week_Ending_Date);
MSGPARM(DTL.IVF_Valuation_Grouping);

