// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPGUEFR
// ?Date: 14.08.2025 Time: 03:40:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification History
DO;

//?11/5/2009 Changes via email from Alice, project E00523
//?Additional validation for alice on the Meat Cost Group Code is required
ENDDO;

//?***** Change Log and Comments
DO;

//?*****
//?** 05/03/2007 LJB OMS011
//?** Class Group is passed in from HDR and Classification edit pgms
//?** 07/12/2007 LJB FT??
//?** Pass the TF Class Group Code from the CTL context
//?** 03/19/2008 slm clean up on F4 and F5
//?** confirm prompt
//?** 03/19/2008 slm add validation on buy products that meat
//?**                cost is required
//?** 04/04/2008 slm CHANGE SCAN LIMIT was at 999999
//?** 07/16/08 SAZ CHANGE SCAN LIMIT to 9999. It was starting
//?** in the middle of the selected rcds instead of on the first one.
//?** 08/14/2008 slm Add the Co_Owned Producer Company to
//?program and initial to N on new record plus validation
//?** 01/22/08 slm CHANGE SCAN LIMIT to (5) 99999 try this one
//?*****
ENDDO;

// PGM.*Scan limit = CON.99999
PGM.*Scan_limit = 99999;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// CTL.TF Classification Code = PAR.TF Classification Code
CTL.TF_Classification_Code = PAR.TF_Classification_Code;

// CTL.Item Structure Type Code = PAR.Item Structure Type Code
CTL.Item_Structure_Type_Code = PAR.Item_Structure_Type_Code;

//?USER: Initialize subfile header

// CTL.TF Class Group = PAR.TF Class Group
CTL.TF_Class_Group = PAR.TF_Class_Group;

EXECUTE FUNCTION(TF Class Desc DRV) TYPE(DRVFLD)                                AC1707607;
PARAMETER(CTL.TF_Class_Desc_DRV);
PARAMETER(CTL.TF_Classification_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv TF Class Desc     RT) TYPE(RTVOBJ) FILE(PPAMREP)           AC1707658;
 PARAMETER(PAR.TF_Classification_Code);
 PARAMETER(PAR.TF_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Str Type Desc DRV) TYPE(DRVFLD)                           AC1705175;
PARAMETER(CTL.Item_Str_Type_Desc_DRV);
PARAMETER(CTL.Item_Structure_Type_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Str_Type_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(Item Str Group Desc DRV) TYPE(DRVFLD)                          AC1705174;
PARAMETER(RCD.Item_Str_Group_Desc_DRV);
PARAMETER(RCD.Item_Structure_Group_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Str_Group_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Str Class Desc DRV) TYPE(DRVFLD)                          AC1705173;
PARAMETER(RCD.Item_Str_Class_Desc_DRV);
PARAMETER(RCD.Item_Structure_Class_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Str_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// RCD.Condition Name USR = Condition name of RCD.Include Sts
RCD.Condition_Name_USR = RTVCND(RCD.Include_Sts);

// RCD.Include Sts USR = DB1.Include Sts
RCD.Include_Sts_USR = DB1.Include_Sts;

EXECUTE FUNCTION(Val Items Exists      RT) TYPE(RTVOBJ) FILE(PPAPREP)           AC1746715;
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// RCD.Display Flag = CND.No
RCD.Display_Flag = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Display Flag = CND.Yes
RCD.Display_Flag = 'Y';

ENDIF;

// RCD.Sequence Number = PAR.Sequence Number
RCD.Sequence_Number = PAR.Sequence_Number;

//?** Class Group is passed in from HDR and Classification edit pgms
//?** This field is not input from this screen.
// RCD.TF Class Group = CTL.TF Class Group
RCD.TF_Class_Group = CTL.TF_Class_Group;

//?USER: Initialize subfile record (new record)

// RCD.Sequence Number = PAR.Sequence Number
RCD.Sequence_Number = PAR.Sequence_Number;

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

// RCD.TF Class Group = CTL.TF Class Group
RCD.TF_Class_Group = CTL.TF_Class_Group;

// RCD.TF Classification Code = CTL.TF Classification Code
RCD.TF_Classification_Code = CTL.TF_Classification_Code;

// RCD.Item Structure Type Code = CTL.Item Structure Type Code
RCD.Item_Structure_Type_Code = CTL.Item_Structure_Type_Code;

// RCD.Co-Own Producing Code = CND.Not Co-Own
RCD.Co_Own_Producing_Co_Code = 'N';

//?USER: Validate subfile record fields

EXECUTE FUNCTION(VAL Structure Exists  RT) TYPE(RTVOBJ) FILE(PPAOREP)           AC1746885;
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(LCL.Invalid_Y_N);
PARAMETER(LCL.TF_Classification_USR);
{
 //?USER: Initialize routine

 // PAR.Invalid (Y/N) = CND.no
 PAR.Invalid_Y_N = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.TF Classification Code EQ PAR.TF Classification Code
 IF DB1.TF_Classification_Code = PAR.TF_Classification_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Include Sts is Not All Items
 IF DB1.Include_Sts = 'E'/'O';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Invalid (Y/N) = CND.yes
 PAR.Invalid_Y_N = 'Y';

 // PAR.TF Classification USR = DB1.TF Classification Code
 PAR.TF_Classification_USR = DB1.TF_Classification_Code;

 ENDIF;

 ENDIF;

}


//?Can't have the same STR assigned to TF Cls unless Str is O or E.
CASE;

// IF LCL.Invalid (Y/N) is yes
IF LCL.Invalid_Y_N = 'Y';

// Send error message - 'Item Structure exist with Include Status=A for TF Classification &1'
ERROR(USR3569);
MSGPARM(LCL.TF_Classification_USR);

ENDIF;

//?** F4=Prompt Meat Cost Group
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.TFMC Group Code
IF PGM.*Cursor_field = RCD.TFMC_Group_Code;

// Call program SEL TF Meat Cost Group SR.
CALL PROGRAM(SEL TF Meat Cost Group SR) ('PMGFSRR');
PARAMETER(RCD.TFMC_Group_Code);
PARAMETER(NLL.TFMC_Group_Description);
PARAMETER(RCD.Record_Status);
PARAMETER('A');

ENDIF;

ENDIF;

//?** IF Meat Cost Group is entered, validate, must be valid
CASE;

// IF RCD.TFMC Group Code is Entered
IF RCD.TFMC_Group_Code <> *BLANK;

EXECUTE FUNCTION(RTV TF Meat Cost Desc  RT) TYPE(RTVOBJ) FILE(PMAPREP)          AC1818482;
PARAMETER(RCD.TFMC_Group_Code);
PARAMETER(NLL.TFMC_Group_Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** If invalid, send no record found or inactive message
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'TF Meat Cost Group not found.'
ERROR(USR3703);

//?** replace meat cost if one was entered
CASE;

// IF WRK.TFMC Group Code is Entered
IF WRK.TFMC_Group_Code <> *BLANK;

// RCD.TFMC Group Code = WRK.TFMC Group Code
RCD.TFMC_Group_Code = WRK.TFMC_Group_Code;

ENDIF;

ENDIF;

ENDIF;

//?CHG:  Include Status - Margin Items Exists
CASE;

// IF RCD.Include Sts is All Items
IF RCD.Include_Sts = 'A';

CASE;

// IF RCD.Include Sts USR is Not All Items
IF RCD.Include_Sts_USR = 'E'/'O';

EXECUTE FUNCTION(Val Items Exists      RT) TYPE(RTVOBJ) FILE(PPAPREP)           AC1746715;
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'Margin Adjustment Group Items exists with Include Status of &2.'
ERROR(USR3567);
MSGPARM(RCD.Include_Sts_USR);
MSGPARM(RCD.Include_Sts_USR);

ENDIF;

ENDIF;

ENDIF;

//?5=Edit Margin Adj Group Item List
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF RCD.Include Sts is Not All Items
IF RCD.Include_Sts = 'E'/'O';

// Call program Edt Margin Adj Item   EF.
CALL PROGRAM(Edt Margin Adj Item   EF) ('PPGYEFR');
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.Include_Sts);

//?031908 SLM misc clean up on F4 delete
// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

//?** 4=Delete - Handle the delete here with confirmed intr pmt
CASE;

// IF RCD.*SFLSEL is *Delete#1
IF RCD.*SFLSEL = '4';

// LCL.Confirmed Intr Msg Usr 1 = CON.Delete Margin Adjustment
LCL.Confirmed_Intr_Msg_Usr_1 = 'Delete Margin Adjustment';

// LCL.Confirmed Intr Msg Usr 1 = CONCAT(LCL.Confirmed Intr Msg Usr 1,CON.Group Detail,CON.1)
LCL.Confirmed_Intr_Msg_Usr_1 = LCL.Confirmed_Intr_Msg_Usr_1 + 'Group Detail' (1);

// LCL.Confirmed Intr Msg Usr 1 = CONCAT(LCL.Confirmed Intr Msg Usr 1,CON.?,CON.*ZERO)
LCL.Confirmed_Intr_Msg_Usr_1 = LCL.Confirmed_Intr_Msg_Usr_1 + '?' (0);

// LCL.Confirmed Intr Msg Usr 2 = CON.Class/Item Str Type/Gr
LCL.Confirmed_Intr_Msg_Usr_2 = 'Class/Item Str Type/Gr';

// LCL.Confirmed Intr Msg Usr 2 = CONCAT(LCL.Confirmed Intr Msg Usr 2,CON.oup/Class,CON.*ZERO)
LCL.Confirmed_Intr_Msg_Usr_2 = LCL.Confirmed_Intr_Msg_Usr_2 + 'oup/Class' (0);

// LCL.Confirmed Intr Msr Usr3 = CONCAT(LCL.Confirmed Intr Msr Usr3,RCD.TF Classification Code,CON.1
LCL.Confirmed_Intr_Msg_Usr_3 = LCL.Confirmed_Intr_Msg_Usr_3 + RCD.TF_Classification_Code (1);

// WRK.Text USR = CVTVAR(RCD.Item Structure Type Code)
WRK.Text_USR = CVTVAR(RCD.Item_Structure_Type_Code);

// LCL.Confirmed Intr Msr Usr3 = CONCAT(LCL.Confirmed Intr Msr Usr3,WRK.Text USR,CON.1)
LCL.Confirmed_Intr_Msg_Usr_3 = LCL.Confirmed_Intr_Msg_Usr_3 + WRK.Text_USR (1);

// WRK.Text USR = CVTVAR(RCD.Item Structure Group Code)
WRK.Text_USR = CVTVAR(RCD.Item_Structure_Group_Code);

// LCL.Confirmed Intr Msr Usr3 = CONCAT(LCL.Confirmed Intr Msr Usr3,WRK.Text USR,CON.1)
LCL.Confirmed_Intr_Msg_Usr_3 = LCL.Confirmed_Intr_Msg_Usr_3 + WRK.Text_USR (1);

// WRK.Text USR = CVTVAR(RCD.Item Structure Class Code)
WRK.Text_USR = CVTVAR(RCD.Item_Structure_Class_Code);

// LCL.Confirmed Intr Msr Usr3 = CONCAT(LCL.Confirmed Intr Msr Usr3,WRK.Text USR,CON.1)
LCL.Confirmed_Intr_Msg_Usr_3 = LCL.Confirmed_Intr_Msg_Usr_3 + WRK.Text_USR (1);

// Call program Pmt Confirmed IntrSel PV.
CALL PROGRAM(Pmt Confirmed IntrSel PV) ('PMS6PVR');
PARAMETER(LCL.Confirmed_Intr_Usr);
PARAMETER(LCL.Confirmed_Intr_Msg_Usr_1);
PARAMETER(LCL.Confirmed_Intr_Msg_Usr_2);
PARAMETER(LCL.Confirmed_Intr_Msg_Usr_3);

CASE;

// IF LCL.Confirmed Intr Usr is Confirm
IF LCL.Confirmed_Intr_Usr = 'Y';

EXECUTE FUNCTION(Del TF Margin Adj Dtl DL) TYPE(DLTOBJ) FILE(PPAOREP)           AC1707578;
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.TF_Class_Group);
PARAMETER(RCD.Mix_Sub_Group_Code);
PARAMETER(RCD.Sequence_Number);
PARAMETER(RCD.Include_Sts);
PARAMETER(RCD.Include_In_Mix);
PARAMETER(RCD.Include_In_Vol_Margins);
PARAMETER(RCD.Include_In_Inventory);
PARAMETER(RCD.Converted_Raw_Material);
PARAMETER(RCD.TFMC_Group_Code);
PARAMETER(RCD.TF_Pct_Owned);
PARAMETER(RCD.Co_Own_Producing_Co_Code);
PARAMETER(RCD.TFMAGD_Unused_Sts_2);
PARAMETER(RCD.TFMAGD_Unused_Sts_3);
PARAMETER(RCD.TFMAGD_Unused_Sts_4);
PARAMETER(RCD.TFMAGD_Unused_Sts_5);
PARAMETER(RCD.TFMAGD_Unused_Sts_6);
PARAMETER(RCD.TFMAGD_Unused_Sts_7);
PARAMETER(RCD.TFMAGD_Unused_Sts_8);
PARAMETER(RCD.TFMAGD_Unused_Pct_1);
PARAMETER(RCD.TFMAGD_Unused_Pct_2);
PARAMETER(RCD.TFMAGD_Unused_Pct_3);
PARAMETER(RCD.TFMAGD_Unused_Pct_4);
PARAMETER(RCD.TFMAGD_Unused_Pct_5);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Del Margin Adj Item   RT) TYPE(RTVOBJ) FILE(PPAPREP)           AC1707770;
 PARAMETER(PAR.TF_Classification_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del Margin Adj Item   DL) TYPE(DLTOBJ) FILE(PPAPREP)           AC1707647;
  PARAMETER(DB1.TF_Classification_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Code);
  //?** Set return code to normal if no items to delete
  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?Validation that if Buy Product then Meat Cost is required
CASE;

// IF CTL.TF Class Group is Buy Product
IF CTL.TF_Class_Group = 'BP';

// AND RCD.Include In Mix is yes
AND RCD.Include_In_Mix = 'Y';

CASE;

// IF RCD.TFMC Group Code is Entered
IF RCD.TFMC_Group_Code <> *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Meat Cost Group Code is required'
ERROR(USR3909);
MSGPARM(RCD.TFMC_Group_Code);

ENDIF;

//?Validation that if Buy Product then Meat Cost is required
// IF CTL.TF Class Group is Buy Product
IF CTL.TF_Class_Group = 'BP';

// AND RCD.Include In Vol Margins is yes
AND RCD.Include_In_Vol_Margins = 'Y';

CASE;

// IF RCD.TFMC Group Code is Entered
IF RCD.TFMC_Group_Code <> *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Meat Cost Group Code is required'
ERROR(USR3909);
MSGPARM(RCD.TFMC_Group_Code);

ENDIF;

ENDIF;

//?Validation on TF% Owned and Co-Owned
CASE;

// IF RCD.Co-Own Producing Code is Not Co-Own
IF RCD.Co_Own_Producing_Co_Code = 'N';

// AND RCD.TF % Owned is equal to zero
AND RCD.TF_Pct_Owned = *ZERO;

//?Validation on TF% Owned and Co-Owned
// IF RCD.Co-Own Producing Code is Co-Own
IF RCD.Co_Own_Producing_Co_Code = 'S'/'T';

// AND RCD.TF % Owned is Greater than zero
AND RCD.TF_Pct_Owned > *ZERO;

//?Validation on TF% Owned and Co-Owned
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'TF% Qwned/Co-Owned Invalid - If TF % Owned N=0, Co-Owned must be S or T, TF
ERROR(USR3996);
MSGPARM(RCD.TF_Pct_Owned);
MSGPARM(RCD.Co_Own_Producing_Co_Code);

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Item Str Group Desc DRV) TYPE(DRVFLD)                          AC1705174;
PARAMETER(RCD.Item_Str_Group_Desc_DRV);
PARAMETER(RCD.Item_Structure_Group_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Group Desc) TYPE(RTVOBJ) FILE(OME9REP)                     AC1663396;
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Str_Group_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Str Class Desc DRV) TYPE(DRVFLD)                          AC1705173;
PARAMETER(RCD.Item_Str_Class_Desc_DRV);
PARAMETER(RCD.Item_Structure_Class_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Str_Class_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// RCD.Condition Name USR = Condition name of RCD.Include Sts
RCD.Condition_Name_USR = RTVCND(RCD.Include_Sts);

//?USER: Validate subfile record relations

CASE;

// IF RCD.TFMC Group Code is Entered
IF RCD.TFMC_Group_Code <> *BLANK;

EXECUTE FUNCTION(RTV TF Meat Cost Desc  RT) TYPE(RTVOBJ) FILE(PMAPREP)          AC1818482;
PARAMETER(RCD.TFMC_Group_Code);
PARAMETER(WRK.TFMC_Group_Description);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


CASE;

// IF WRK.Record Status is Inactive/Delete
IF WRK.Record_Status = 'D'/'I';

// Send error message - 'This Meat Cost Group is inactive.'
ERROR(USR3716);
MSGPARM(RCD.TFMC_Group_Code);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt TF Margin Adj Dtl CR) TYPE(CRTOBJ) FILE(PPAOREP)           AC1707576;
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.TF_Class_Group);
PARAMETER(RCD.Mix_Sub_Group_Code);
PARAMETER(RCD.Sequence_Number);
PARAMETER(RCD.Include_Sts);
PARAMETER(RCD.Include_In_Mix);
PARAMETER(RCD.Include_In_Vol_Margins);
PARAMETER(RCD.Include_In_Inventory);
PARAMETER(RCD.Converted_Raw_Material);
PARAMETER(RCD.TFMC_Group_Code);
PARAMETER(RCD.TF_Pct_Owned);
PARAMETER(RCD.Co_Own_Producing_Co_Code);
PARAMETER(RCD.TFMAGD_Unused_Sts_2);
PARAMETER(RCD.TFMAGD_Unused_Sts_3);
PARAMETER(RCD.TFMAGD_Unused_Sts_4);
PARAMETER(RCD.TFMAGD_Unused_Sts_5);
PARAMETER(RCD.TFMAGD_Unused_Sts_6);
PARAMETER(RCD.TFMAGD_Unused_Sts_7);
PARAMETER(RCD.TFMAGD_Unused_Sts_8);
PARAMETER(RCD.TFMAGD_Unused_Pct_1);
PARAMETER(RCD.TFMAGD_Unused_Pct_2);
PARAMETER(RCD.TFMAGD_Unused_Pct_3);
PARAMETER(RCD.TFMAGD_Unused_Pct_4);
PARAMETER(RCD.TFMAGD_Unused_Pct_5);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg TF Margin Adj Dtl CH) TYPE(CHGOBJ) FILE(PPAOREP)           AC1707577;
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(RCD.Item_Structure_Type_Code);
PARAMETER(RCD.Item_Structure_Group_Code);
PARAMETER(RCD.Item_Structure_Class_Code);
PARAMETER(RCD.TF_Class_Group);
PARAMETER(RCD.Mix_Sub_Group_Code);
PARAMETER(RCD.Sequence_Number);
PARAMETER(RCD.Include_Sts);
PARAMETER(RCD.Include_In_Mix);
PARAMETER(RCD.Include_In_Vol_Margins);
PARAMETER(RCD.Include_In_Inventory);
PARAMETER(RCD.Converted_Raw_Material);
PARAMETER(RCD.TFMC_Group_Code);
PARAMETER(RCD.TF_Pct_Owned);
PARAMETER(RCD.Co_Own_Producing_Co_Code);
PARAMETER(RCD.TFMAGD_Unused_Sts_2);
PARAMETER(RCD.TFMAGD_Unused_Sts_3);
PARAMETER(RCD.TFMAGD_Unused_Sts_4);
PARAMETER(RCD.TFMAGD_Unused_Sts_5);
PARAMETER(RCD.TFMAGD_Unused_Sts_6);
PARAMETER(RCD.TFMAGD_Unused_Sts_7);
PARAMETER(RCD.TFMAGD_Unused_Sts_8);
PARAMETER(RCD.TFMAGD_Unused_Pct_1);
PARAMETER(RCD.TFMAGD_Unused_Pct_2);
PARAMETER(RCD.TFMAGD_Unused_Pct_3);
PARAMETER(RCD.TFMAGD_Unused_Pct_4);
PARAMETER(RCD.TFMAGD_Unused_Pct_5);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


//?USER: Extra processing after DBF update

// RCD.Include Sts USR = RCD.Include Sts
RCD.Include_Sts_USR = RCD.Include_Sts;

