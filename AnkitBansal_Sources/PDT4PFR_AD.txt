// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDT4PFR
// ?Date: 14.08.2025 Time: 12:04:30
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Accounts Receivable
PAR.Application_Code = 'A/R';

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER(PAR.Application_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// PAR.Print Selections = CND.Yes
PAR.Print_Selections = 'Y';

//?***** Change Log
//?** 1/26/2006  LJB
//?** Add record selection here - If co# from work file does not
//?**  match the parameter co#, then skip it.
//?*****
//?** 1/30/2006  LJB
//?** If parameter Company # is zeros, put "*ALL" into Company name
//?**  in Top of Page section
//?*****
//?** 2/09/2006  LJB
//?** Change index-add Claim Dept as a high-order key (2nd). Add
//?**  claim responsibility flag to dept break. Get resp flag from
//?**  A/R Claim Dept file.
//?*****
//?** 3/22/2006  LJB
//?** Display *ALL on the first page if par.co# = zero, display
//?**  the db1.co# on subsequent pages.
//?*****
//?USER: Record selection processing

//?** See if company number was entered and passed in  1/26/06 LJB
CASE;

// IF PAR.Claim Item Company Number is not equal to zero
IF PAR.Claim_Item_Company_Number <> *ZERO;

//?** If company number from work file <> par co#, skip it
CASE;

// IF DB1.Claim Item Company Number NE PAR.Claim Item Company Number
IF DB1.Claim_Item_Company_Number <> PAR.Claim_Item_Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

CASE;

// IF PAR.Print Selections is Yes
IF PAR.Print_Selections = 'Y';

//?Load Selection Fields.
//?** If par Co# is zeros, put "*ALL" into Co. name    1/30/2006 LJB
CASE;

// IF PAR.Claim Item Company Number is Equal to zero
IF PAR.Claim_Item_Company_Number = *ZERO;

// TOP.Company Name = CON.*ALL
TOP_Company_Name = *ALL;

//?** If par Co# is zeros, put "*ALL" into Co. name    1/30/2006 LJB
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Claim Item Company Number = PAR.Claim Item Company Number
TOP_Claim_Item_Company_Number = PAR.Claim_Item_Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Claim_Item_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Put co# & name into fields to print on pages 2 thru nnn. 3/22/06 LJB
// TOP.Claim Start Number = PAR.Claim Start Number
TOP_Claim_Start_Number = PAR.Claim_Start_Number;

// TOP.Claim End Number = PAR.Claim End Number
TOP_Claim_End_Number = PAR.Claim_End_Number;

// TOP.Claim Status = PAR.Claim Status
TOP_Claim_Status = PAR.Claim_Status;

//?Load Claim Status Description.
CASE;

// IF TOP.Claim Status is Blank
IF TOP_Claim_Status = *BLANK;

// TOP.Claim Status Desc     USR = CON.*BLANK
TOP_Claim_Status_Desc_USR = *BLANK;

//?Load Claim Status Description.
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Claim Status Desc     USR = Condition name of TOP.Claim Status
TOP_Claim_Status_Desc_USR = RTVCND(TOP_Claim_Status);

ENDIF;

// TOP.Claim Start Entry Date = PAR.Claim Start Entry Date
TOP_Claim_Start_Entry_Date = PAR.Claim_Start_Entry_Date;

// TOP.Claim End Entry Date = PAR.Claim End Entry Date
TOP_Claim_End_Entry_Date = PAR.Claim_End_Entry_Date;

// TOP.Memo Posting Str Date Usr = PAR.Memo Posting Str Date Usr
TOP_Memo_Posting_Str_Date_Usr = PAR.Memo_Posting_Str_Date_Usr;

// TOP.Memo Posting End Date Usr = PAR.Memo Posting End Date Usr
TOP_Memo_Posting_End_Date_Usr = PAR.Memo_Posting_End_Date_Usr;

// TOP.Claim Item Code = PAR.Claim Item Code
TOP_Claim_Item_Code = PAR.Claim_Item_Code;

EXECUTE FUNCTION(RTV Item desc/type     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1128573;
PARAMETER(TOP_Claim_Item_Company_Number);
PARAMETER(TOP_Claim_Item_Code);
PARAMETER(TOP_Item_Description);
PARAMETER(WRK.Unused_Parm_Status_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.Claim Ship to Customer = PAR.Claim Ship to Customer
TOP_Claim_Ship_to_Customer = PAR.Claim_Ship_to_Customer;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(TOP_Claim_Ship_to_Customer);
PARAMETER(TOP_Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.Reason Code = PAR.Reason Code
TOP_Reason_Code = PAR.Reason_Code;

EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(OPCXREP)          AC1273797;
PARAMETER(TOP_Reason_Code);
PARAMETER(TOP_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.Salesperson to Rvw Claim = PAR.Salesperson to Rvw Claim
TOP_Salesperson_to_Rvw_Claim = PAR.Salesperson_to_Rvw_Claim;

EXECUTE FUNCTION(RTV Salesperson        RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1369411;
PARAMETER(TOP_Salesperson_to_Rvw_Claim);
PARAMETER(TOP_Sales_Route_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: On print of first page format

// PAR.Print Selections = CND.No
PAR.Print_Selections = 'N';

//?USER: Print required level headings

CASE;

IF NEW Claim_Item_Company_Number;
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.Claim_Item_Company_Number);
PARAMETER(CUR.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Claim Item Company Number header format
PRINT Claim Item Company Number header format;

ENDIF;

CASE;

IF NEW Claim_Department_Code;
//?** Get claim responsibility flag from a/r         2/09/06 LJB
EXECUTE FUNCTION(Rtv Claim Department   RT) TYPE(RTVOBJ) FILE(PPATREP)          AC1721713;
PARAMETER(CUR.Claim_Department_Code);
PARAMETER(WRK.Claim_Department_Desc);
PARAMETER(CUR.Claim_Responsibility);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


// Print Claim Department Code header format
PRINT Claim Department Code header format;

ENDIF;

CASE;

IF NEW Reason_Code;
EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(OPCXREP)          AC1273797;
PARAMETER(CUR.Reason_Code);
PARAMETER(CUR.Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Reason Code header format
PRINT Reason Code header format;

ENDIF;

// SUPPRESSED PRINT Claim Number header format

//?USER: On print of detail format

//?Load Description Fields & Retrieved Values on DETAIL FORMAT.
//?Get Condition Values Descriptions.
// CUR.Claim Sts Desc Short  USR = Condition name of CUR.Claim Status
CUR.Claim_Sts_Desc_Short_USR = RTVCND(CUR.Claim_Status);

//?Get History/Order Info.
EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OMHSTPP)          AC1524891;
PARAMETER(CUR.Claim_Company_Number);
PARAMETER(CUR.Claim_Order_Number);
PARAMETER(WRK.Unused_Parm_CD7_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(CUR.Warehouse_Code);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(CUR.Invoice_Number);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(CUR.Actual_Shipped_Date);
PARAMETER(CUR.Load_ID);
PARAMETER(WRK.Unused_Parm_Text_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Claim Order Info   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1525060;
PARAMETER(CUR.Claim_Company_Number);
PARAMETER(CUR.Claim_Order_Number);
PARAMETER(WRK.Unused_Parm_CD7_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(CUR.Actual_Shipped_Date);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(CUR.Load_ID);
PARAMETER(CUR.Invoice_Number);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Date_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(CUR.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(PAR.Salesperson_to_Rvw_Claim);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


ENDIF;

//?Get Item Description.
EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(CUR.Claim_Item_Company_Number);
PARAMETER(CUR.Claim_Item_Code);
PARAMETER(CUR.Item_Description);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
PARAMETER(WRK.Unused_Parm_Text_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

NXT.Claim_Amount_Total_$_SUM = SUM(CUR.Claim_Item_Amount);

//?USER: Print required level totals

// SUPPRESSED PRINT Claim Number totals format

CASE;

IF NEW Reason_Code;
// Print Reason Code totals format
PRINT Reason Code totals format;

NXT.Claim_Amount_Total_$_SUM = SUM(CUR.Claim_Amount_Total_$_SUM);

ENDIF;

CASE;

IF NEW Claim_Department_Code;
// Print Claim Department Code totals format
PRINT Claim Department Code totals format;

NXT.Claim_Amount_Total_$_SUM = SUM(CUR.Claim_Amount_Total_$_SUM);

ENDIF;

CASE;

IF NEW Claim_Item_Company_Number;
// Print Claim Item Company Number totals format
PRINT Claim Item Company Number totals format;

ENDIF;

