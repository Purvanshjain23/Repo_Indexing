// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMMLSRR
// ?Date: 14.08.2025 Time: 03:43:27
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

// PAR.Record Selected       USR = CND.no
PAR.Record_Selected_USR = 'N';

//?USER: Load subfile record from DBF record

//?** Don't display if order is not yet assigned to a load  P000737
CASE;

// IF DB1.Load ID is Blank
IF DB1.Load_ID = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process selected line

CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

MOVE *ALL (To: PAR From: RCD);

// PAR.Shipping Line = RCD.Shipping Line
PAR.Shipping_Line = RCD.Shipping_Line;

// PAR.Port Delv Terminal = RCD.Port Delv Terminal
PAR.Port_Delv_Terminal = RCD.Port_Delv_Terminal;

// PAR.Vessel Name = RCD.OHE Vessel/Airline
PAR.Vessel_Name = RCD.OHE_Vessel_Airline;

//?07/22/19 DN R15161-Replaced Voyage with OHE Voyage/Flight.
// PAR.OHE Voyage/Flight = RCD.OHE Voyage/Flight
PAR.OHE_Voyage_Flight = RCD.OHE_Voyage_Flight;

// PAR.Sail Date = RCD.OHE Sail/Flight Date
PAR.Sail_Date = RCD.OHE_Sail_Flight_Date;

//?07/22/19 DN R15161-Replaced Booking Number with OHE Booking Number.
// PAR.OHE Booking Number = RCD.OHE Booking Number
PAR.OHE_Booking_Number = RCD.OHE_Booking_Number;

// PAR.Discharge Port = RCD.OHE Discharge Port/Airprt
PAR.Discharge_Port = RCD.OHE_Discharge_Port_Airprt;

// PAR.Container Number = RCD.OHE Container Number
PAR.Container_Number = RCD.OHE_Container_Number;

// PAR.OHE Port Cut Date = RCD.OHE Port Cut Date
PAR.OHE_Port_Cut_Date = RCD.OHE_Port_Cut_Date;

// PAR.OHE Load Haul Type = RCD.OHE Load Haul Type
PAR.OHE_Load_Haul_Type = RCD.OHE_Load_Haul_Type;

// PAR.OHE Arrival Date = RCD.OHE Arrival Date
PAR.OHE_Arrival_Date = RCD.OHE_Arrival_Date;

// PAR.OHE Est Arrv at Dest Date = RCD.OHE Est Arrv at Dest Date
PAR.OHE_Est_Arrv_at_Dest_Date = RCD.OHE_Est_Arrv_at_Dest_Date;

// PAR.OHE PowerPro Load#-Outbnd = RCD.OHE PowerPro Load#-Outbnd
PAR.OHE_PowerPro_Load#_Outbnd = RCD.OHE_PowerPro_Load#_Outbnd;

// PAR.OHE PowerPro Load#-Bckhl = RCD.OHE PowerPro Load#-Bckhl
PAR.OHE_PowerPro_Load#_Bckhl = RCD.OHE_PowerPro_Load#_Bckhl;

// PAR.OHE Pier Pass Fee Amount = RCD.OHE Pier Pass Fee Amount
PAR.OHE_Pier_Pass_Fee_Amount = RCD.OHE_Pier_Pass_Fee_Amount;

// PAR.OHE Port Check Fee Amount = RCD.OHE Port Check Fee Amount
PAR.OHE_Port_Check_Fee_Amount = RCD.OHE_Port_Check_Fee_Amount;

// PAR.OHE Transload Container# = RCD.OHE Transload Container#
PAR.OHE_Transload_Container# = RCD.OHE_Transload_Container#;

// PAR.OHE Transload Seal Nbr = RCD.OHE Transload Seal Nbr
PAR.OHE_Transload_Seal_Nbr = RCD.OHE_Transload_Seal_Nbr;

// PAR.OHE USDA Seal Number = RCD.OHE USDA Seal Number
PAR.OHE_Abs_Rate_Override_Rsn = RCD.OHE_Abs_Rate_Override_Rsn;

// PAR.OHE Pier Pass Invoice = RCD.OHE Pier Pass Invoice
PAR.OHE_Pier_Pass_Invoice = RCD.OHE_Pier_Pass_Invoice;

// PAR.OHE Port Check Invoice = RCD.OHE Port Check Invoice
PAR.OHE_Carrier_Nm = RCD.OHE_Carrier_Nm;

// PAR.OHE Port/Pier Paid Date = RCD.OHE Port/Pier Paid Date
PAR.OHE_Port_Pier_Paid_Date = RCD.OHE_Port_Pier_Paid_Date;

EXECUTE FUNCTION(RTV Load All Fields    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1491510;
PARAMETER(RCD.Load_ID);
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Load_Status);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Seal_1);
PARAMETER(NLL.Seal_2);
PARAMETER(NLL.Seal_3);
PARAMETER(NLL.Seal_4);
PARAMETER(NLL.Seal_2_Unused);
PARAMETER(NLL.Total_Load_Order_Weight);
PARAMETER(NLL.Flat_Amount);
PARAMETER(NLL.Allocate_Pounds_Miles);
PARAMETER(NLL.Total_Stops);
PARAMETER(NLL.Trailer_Id);
PARAMETER(PAR.Transloader_Carrier_Code);
PARAMETER(NLL.BOL_Time);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Truck_Size);
PARAMETER(NLL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.Ship_Status);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Number_Pallets_Received);
PARAMETER(NLL.Number_Pallets_Loaded);
PARAMETER(NLL.Load_Carrier_Pay_Amt);
PARAMETER(NLL.Estimated_Arrival_Time);
PARAMETER(NLL.Actual_Arrival_Date);
PARAMETER(NLL.Actual_Arrival_Time);
PARAMETER(NLL.Trailer_IN_Weight);
PARAMETER(NLL.Trailer_OUT_Weight);
PARAMETER(NLL.Actual_Departure_Date);
PARAMETER(NLL.Departure_Time);
PARAMETER(NLL.Schedule_Sequence_Number);
PARAMETER(NLL.Product_Temperature);
PARAMETER(NLL.Number_Spacers_Loaded);
PARAMETER(NLL.Car_Veh_Initials);
PARAMETER(NLL.Total_Load_Miles);
PARAMETER(NLL.Recorder_ID);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Ship_From_Warehouse);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Gross_Weight);
PARAMETER(NLL.Carrier_Broker);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Actual_Ship_Date);
PARAMETER(NLL.On_Time_Y_N);
PARAMETER(NLL.Truck_Ready_Date);
PARAMETER(NLL.Truck_Ready_Time);
PARAMETER(NLL.Spotted_Date);
PARAMETER(NLL.Spotted_Time);
PARAMETER(NLL.Load_Finished_Date);
PARAMETER(NLL.Load_Finished_Time);
PARAMETER(NLL.BOL_Complete_Date);
PARAMETER(NLL.BOL_Complete_Time);
PARAMETER(NLL.BOL_Received_Date);
PARAMETER(NLL.BOL_Received_Time);
PARAMETER(NLL.Truck_Departure_Date);
PARAMETER(NLL.Truck_Departure_Time);
PARAMETER(NLL.Adjusted_Departure_Date);
PARAMETER(NLL.Adjusted_Departure_Time);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.Vessel_Name);
PARAMETER(NLL.Voyage);
PARAMETER(NLL.Sail_Date);
PARAMETER(NLL.Booking_Number);
PARAMETER(NLL.Discharge_Port);
PARAMETER(NLL.Arrival_Date);
PARAMETER(NLL.Container_Number);
PARAMETER(NLL.Date_In);
PARAMETER(NLL.Time_In);
PARAMETER(NLL.Date_Out);
PARAMETER(NLL.Time_Out);
PARAMETER(NLL.Load_Total_Freight);
PARAMETER(NLL.Scheduled_Delivery_Date);
PARAMETER(NLL.Scheduled_Delivery_Time);
PARAMETER(NLL.LH_Unused_Sts);
PARAMETER(NLL.LH_Carrier_Payment_Sts);
PARAMETER(NLL.Bring_Back_Miles);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Load_Acceptance_Flag);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.On_Yard_Date);
PARAMETER(NLL.On_Yard_Time);
PARAMETER(NLL.Deadline_Departure_Date);
PARAMETER(NLL.Deadline_Departure_Time);
PARAMETER(NLL.Load_Held_Over);
PARAMETER(NLL.Load_Held_Over_Reason);
PARAMETER(NLL.Load_Held_Over_Rsn_Cmt);
PARAMETER(NLL.Ocean_BOL_Number);
PARAMETER(NLL.Express_Mail_Number);
PARAMETER(NLL.Express_Mail_Date);
PARAMETER(NLL.Load_Shag_Flag);
PARAMETER(NLL.Load_Wash_Flag);
PARAMETER(NLL.Product_Complete_Date);
PARAMETER(NLL.Product_Complete_Time);
PARAMETER(NLL.Pallets_Loaded);
PARAMETER(NLL.Avg_Pallet_Tare);
PARAMETER(NLL.Tot_Pallet_Tare);
PARAMETER(NLL.Load_Confirmed_Sts);
PARAMETER(NLL.Load_Confirmed_Contact);
PARAMETER(NLL.Load_Confirmation_Time);
PARAMETER(NLL.Load_Door_1);
PARAMETER(NLL.Override_Total_Load_Miles);
PARAMETER(NLL.Load_Door_2);
PARAMETER(NLL.Partial_Load);
PARAMETER(NLL.Load_Confirmation_Fax_Sts);
PARAMETER(NLL.Export_Load_USDA_OK);
PARAMETER(NLL.Late_Delivery_Email_Flag);
PARAMETER(NLL.Load_Actual_Freight);
PARAMETER(NLL.Hide_on_WW_Load_Sts);
PARAMETER(NLL.Late_Billing_Email_Flag);
PARAMETER(NLL.Shipping_Temp_C_F_txt);
PARAMETER(NLL.LH_Held_Over_Rsn_Cmt);
PARAMETER(NLL.Multi_Company_Load);
PARAMETER(NLL.Fax_Sent_to_SSI_Carrier);
PARAMETER(NLL.Schedule_Pos_Load_Grade);
PARAMETER(NLL.LH_Power_Only_Load);
PARAMETER(NLL.MG_Created_Load);
PARAMETER(NLL.LH_Unused_Sts_5);
PARAMETER(NLL.Load_U_M);
PARAMETER(NLL.TPM_Shipment_Status);
PARAMETER(NLL.LH_Unused_Sts_8);
PARAMETER(NLL.LH_On_Time_Reason_Code);
PARAMETER(NLL.LH_Held_Over_Reason);
PARAMETER(NLL.LH_Carrier_Paid_Dte);
PARAMETER(NLL.LH_Carrier_Paid_Time);
PARAMETER(NLL.LH_Last_Combo_Prod_Date);
PARAMETER(NLL.LH_Last_Combo_Prod_Time);
PARAMETER(NLL.LPT_Load_Plan_Start_Dt);
PARAMETER(NLL.LPT_Load_Plan_Start_Tm);
PARAMETER(NLL.TPM_Planned_Ship_Date);
PARAMETER(NLL.LH_Unused_Time_4);
PARAMETER(NLL.LH_Unused_Date_5);
PARAMETER(NLL.LH_Unused_Time_5);
PARAMETER(NLL.LH_Unused_Date_6);
PARAMETER(NLL.LH_Unused_Time_6);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// PAR.Record Selected       USR = CND.yes
PAR.Record_Selected_USR = 'Y';

ENDIF;

