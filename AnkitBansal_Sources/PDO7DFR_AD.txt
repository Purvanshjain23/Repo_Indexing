// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDO7DFR
// ?Date: 14.08.2025 Time: 03:32:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//?E14775 JJH 04/03/19 - Correct Orders not Displaying
//?- Increased the size of Warehouse/Types Array from 100 - 200
//?- Re-compile only as no logic changes
//?** 05/25/2017 LJB E010372  Add City and State to the Display Item
//?**    Orders CTL and filter the subfile if there is an entry
//?** 05/19/16   RMC E4119  remove live with tpm check
//?** 03/02/2015 JJH E3796  - Display Requested Ship Date
//?**  8/09/2010 FP1309 chg add the requested delivery dte per D'Lynn
//?**  8/03/2010 FP1309 chg add the Inv Ages - per Damon G
EXECUTE FUNCTION(FP1309 Inventory Age  IF) TYPE(EXCINTFUN)                      AC1981251;
{
 //?Execute internal function

 //?FP1309 Inventory Age Code Description
}


//?FP1054 slm 041009 correction on Total Ord and Total Sched
//?FP1054 slm 021709 Dsp the Load Id & the  deadline depart date/time
//?if order is not found on a load then calculate the deadline depart
//?dt/time also add the user status y/n and change screen to 132 wide
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

EXECUTE FUNCTION(VAL Field Lvl Security IF) TYPE(EXCINTFUN)                     AC1600660;
PARAMETER(WRK.USR_Display_2);
PARAMETER('FPRICE');
{
 //?Execute internal function

 //?See if the user has the par Appl Code in their user group
 // LCL.User Profile Name = JOB.*USER
 LCL.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(LCL.User_Profile_Name);
 PARAMETER(LCL.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.User Code Model is equal to blank
 IF LCL.User_Code_Model = *BLANK;

 // LCL.User Code Model = LCL.User Profile Name
 LCL.User_Code_Model = LCL.User_Profile_Name;

 ENDIF;

 EXECUTE FUNCTION(RTV Appl               RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1600659;
 PARAMETER(LCL.User_Code_Model);
 PARAMETER(PAR.Application_Code);
 PARAMETER(NLL.Company_Number);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.USR Display 2 = CND.No
 PAR.USR_Display_2 = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.USR Display 2 = CND.Yes
 PAR.USR_Display_2 = 'Y';

 ENDIF;

}


//?Load array of valid Warehouse codes and their types.
EXECUTE FUNCTION(DLT Warehouse Array    DL) TYPE(DLTOBJ) ARRAY(Warehouses_types)AC1470020;

EXECUTE FUNCTION(Rtv/Crt Warehouse Arry RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1470023;
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CRT Warehouse Array    CR) TYPE(CRTOBJ) ARRAY(Warehouses_types)AC1470024;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Warehouse_Type);
 {
  //?USER: Processing if Data record already exists

  QUIT;

 }

}


// PGM.*Scan limit = CON.999999
PGM.*Scan_limit = 999999;

// WRK.Status Flag 10 Y/N = CND.No
WRK.Status_Flag_10_Y_N = 'N';

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

// CTL.Warehouse Type USR = PAR.Warehouse Type
CTL.Warehouse_Type_USR = PAR.Warehouse_Type;

// CTL.Reserved Product  USR2 = CND.Blank
CTL.Reserved_Product_USR2 = *BLANK;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

EXECUTE FUNCTION(RTV Newest SchShDt     RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1564027;
PARAMETER(PAR.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Scheduled_Ship_Date_USR);
PARAMETER(PAR.Scheduled_Ship_Date_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Scheduled Ship Date USR = CON.*ZERO
 PAR.Scheduled_Ship_Date_USR = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not Comp/Canc/Conf
 IF DB1.Detail_Line_Status = 'L'/'A'/'E'/'H';

 EXECUTE FUNCTION(RTV Order Type         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1564834;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.Order_Type_Sales);
 {
  //?USER: Process Data record

  // PAR.Order Type - Sales = DB1.Order Type - Sales
  PAR.Order_Type_Sales = DB1.Order_Type_Sales;

  QUIT;

 }

 EXECUTE FUNCTION(RTV Billing Type       RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1316455;
 PARAMETER(PAR.Order_Type_Sales);
 PARAMETER(PAR.Billing_Activity_Type);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Billing Activity Type is Invoice or Transfer
 IF PAR.Billing_Activity_Type = '1'/'4';

 // PAR.Scheduled Ship Date USR = DB1.Scheduled Ship Date
 PAR.Scheduled_Ship_Date_USR = DB1.Scheduled_Ship_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


// CTL.Scheduled Ship Date = PAR.Scheduled Ship Date USR
CTL.Scheduled_Ship_Date = PAR.Scheduled_Ship_Date_USR;

// CTL.Detail Line Status = CND.Available
CTL.Detail_Line_Status = 'A';

// CTL.OD Production Plan Sts = CND.Yes
CTL.OD_Production_Plan_Sts = *BLANK;

//?Place in truncate
// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

ENDIF;

EXECUTE FUNCTION(Rtv Desc/Cnv-BsSts,UM RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1790376;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Item_Description);
PARAMETER(CTL.UOM_Primary);
PARAMETER(WRK.Base_Conv_Loss_Item);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Desc/Type/LotTrk  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1471511;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
PARAMETER(LCL.Lot_Tracking_Flag);
PARAMETER(CTL.Warehouse_Type_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// CTL.Warehouse Type = CTL.Warehouse Type USR
CTL.Warehouse_Type = CTL.Warehouse_Type_USR;

CASE;

// IF CTL.Warehouse Type NE WRK.BLANK 1               USR
IF CTL.Warehouse_Type <> WRK.BLANK_1_USR;

// CTL.Warehouse Type Desc. = Condition name of CTL.Warehouse Type
CTL.Warehouse_Type_Desc = RTVCND(CTL.Warehouse_Type);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Warehouse Type Desc. = CON.*ALL
CTL.Warehouse_Type_Desc = *ALL;

ENDIF;

//?SAVE FIELDS FOR TOTALS
DO;

// WRK.Scheduled ShpDate SavUsr = CTL.Scheduled Ship Date
WRK.Scheduled_ShpDate_SavUsr = CTL.Scheduled_Ship_Date;

// WRK.Order Number SavUsr = CTL.Order Number
WRK.Order_Number_SavUsr = CTL.Order_Number;

// WRK.Ship To Customer SavUsr = CTL.Ship To Customer
WRK.Ship_To_Customer_SavUsr = CTL.Ship_To_Customer;

// WRK.Load ID USR = CTL.Load ID
WRK.Load_ID_USR = CTL.Load_ID;

// WRK.Event Code SavUsr = CTL.Event Code
WRK.Event_Code_SavUsr = CTL.Event_Code;

// WRK.Detail Line Status SavUsr = CTL.Detail Line Status
WRK.Detail_Line_Status_SavUsr = CTL.Detail_Line_Status;

// WRK.USR City = CTL.City
WRK.USR_City = CTL.City;

// WRK.USR State 2 = CTL.State
WRK.USR_State_2 = CTL.State;

ENDDO;

// WRK.Status Flag 10 Y/N = CND.Yes
WRK.Status_Flag_10_Y_N = 'Y';

//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Rtv warehouse type, and display rcd if it eq CTL.Whs type if entered.
EXECUTE FUNCTION(RTV Warehouse type     RT) TYPE(RTVOBJ) ARRAY(Warehouses_types)AC1470026;
PARAMETER(DB1.Warehouse_Code);
PARAMETER(RCD.Warehouse_Type_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(VAL Order Schedule    RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1502667;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?If order detail schedule exist, product is reserved, so * record.
CASE;

// IF PAR.Record Found USR is Record Found
IF PAR.Record_Found_USR = 'Y';

// AND DB1.Quantity Scheduled is Greater than zero
AND DB1.Quantity_Scheduled > *ZERO;

// RCD.Reserved Product  USR = CND.*Astrict
RCD.Reserved_Product_USR = *;

ENDIF;

//?Select on warehouse type, reserved product
CASE;

// IF CTL.Warehouse Type USR NE WRK.BLANK 1               USR
IF CTL.Warehouse_Type_USR <> WRK.BLANK_1_USR;

// AND CTL.Warehouse Type USR NE RCD.Warehouse Type USR
AND CTL.Warehouse_Type_USR <> RCD.Warehouse_Type_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Select on warehouse type, reserved product
// IF CTL.Reserved Product  USR is *Astrict
IF CTL.Reserved_Product_USR = *;

// AND CTL.Reserved Product  USR NE RCD.Reserved Product  USR
AND CTL.Reserved_Product_USR <> RCD.Reserved_Product_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Select on warehouse type, reserved product
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Quantity Ordered 2 USR = CTL.Quantity Ordered 2 USR + DB1.Quantity Ordered
CTL.Quantity_Ordered_2_USR = CTL.Quantity_Ordered_2_USR + DB1.Quantity_Ordered;

// CTL.Quantity Scheduled 2 USR = CTL.Quantity Scheduled 2 USR + DB1.Quantity Scheduled
CTL.Quantity_Scheduled_2_USR = CTL.Quantity_Scheduled_2_USR + DB1.Quantity_Scheduled;

// CTL.Weight Order 2 usr = CTL.Weight Order 2 usr + DB1.Weight Ordered
CTL.Weight_Order_2_usr = CTL.Weight_Order_2_usr + DB1.Weight_Ordered;

// CTL.Weight Schd 2 USR = CTL.Weight Schd 2 USR + DB1.Weight Scheduled
CTL.Weight_Schd_2_USR = CTL.Weight_Schd_2_USR + DB1.Weight_Scheduled;

ENDIF;

CASE;

// IF RCD.Scheduled Ship Date is not entered
IF RCD.Scheduled_Ship_Date = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Quantity Ordered 1 USR = RCD.Quantity Ordered
RCD.Quantity_Ordered_1_USR = RCD.Quantity_Ordered;

// RCD.Quantity Scheduled 1 USR = RCD.Quantity Scheduled
RCD.Quantity_Scheduled_1_USR = RCD.Quantity_Scheduled;

// RCD.Unit Price (DSP)  USR = RCD.Unit Price
RCD.Unit_Price_DSP_USR = RCD.Unit_Price;

//?RMC 8/18/06 PFS019 moved U/M to ctl to make room for event in the subfile
//?Order processing
DO;

//?FP1054 SLM 02/17/2009 - Read the Order Header
//?Get the Load information
//?if the order does not have a load id then
//?calculate the departure date and time.  Do not update the Orddtl
//?Get the deadline departure date
//?** 05/19/16   RMC E4119  remove live with tpm check
//?** 05/25/2017 LJB E010372  Put City and State into subfile
EXECUTE FUNCTION(Rtv Load/LdSts        IF) TYPE(EXCINTFUN)                      AC1648393;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Name);
PARAMETER(RCD.City);
PARAMETER(RCD.State);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Actual_Shipped_Date);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Credit_Hold);
PARAMETER(LCL.Production_Hold);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(RCD.Block_Order_Flag);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(RCD.Deadline_Depart_Date_LH);
PARAMETER(RCD.Deadline_Depart_Time_LH);
{
 //?Execute internal function

 //?** 05/19/16   RMC E4119  remove live with tpm check
 EXECUTE FUNCTION(RTV LdId/OrdDt/ShpDt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1648395;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Type_Sales);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Order_Date);
 PARAMETER(PAR.Actual_Shipped_Date);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.Credit_Hold);
 PARAMETER(PAR.Production_Hold);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 PARAMETER(LCL.Load_ID);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.Billing_Activity_Type);
 PARAMETER(PAR.Block_Order_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Load ID = LCL.Load ID
 PAR.Load_ID = LCL.Load_ID;

 CASE;

 // IF LCL.Load ID is NE Blank
 IF LCL.Load_ID <> *ZERO;

 EXECUTE FUNCTION(RTV LoadSts/Carrier    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1648402;
 PARAMETER(LCL.Load_ID);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Export_Status);
 PARAMETER(PAR.Load_Acceptance_Flag);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


//?Calc DDD/T
CASE;

// IF RCD.Load ID is Blank
IF RCD.Load_ID = *ZERO;

//?Calculate the deadline departure date
// Call program CLC Deadln Depart Dt  XF.
CALL PROGRAM(CLC Deadln Depart Dt  XF) ('POSCXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Requested_Delivery_Date);
PARAMETER(LCL.Requested_Delivery_Time);
PARAMETER(RCD.Deadline_Depart_Date_LH);
PARAMETER(RCD.Deadline_Depart_Time_LH);

ENDIF;

//?Select on the Load ID
CASE;

// IF CTL.Load ID is NE Blank
IF CTL.Load_ID <> *ZERO;

CASE;

// IF CTL.Load ID NE RCD.Load ID
IF CTL.Load_ID <> RCD.Load_ID;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select on the City and/or State                       E010372
CASE;

// IF CTL.City is NE Blanks
IF CTL.City <> *BLANK;

CASE;

// IF CTL.City NE RCD.City
IF CTL.City <> RCD.City;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select on the City and/or State                       E010372
// IF CTL.State is *Not Blank
IF CTL.State <> *BLANK;

CASE;

// IF CTL.State NE RCD.State
IF CTL.State <> RCD.State;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// RCD.Requested Delivery Dt = LCL.Requested Delivery Date
RCD.Requested_Delivery_Dt = LCL.Requested_Delivery_Date;

ENDDO;

//?Calculate the Prod days
//?Calculate the Days between Request Delivery Date - Sched Ship Dte
//?Item Age days - Days between = Production days
//?if Item age days = 0 production days make 0
CASE;

// IF DB1.Item Age Days is Not Entered
IF DB1.Item_Age_Days = *ZERO;

// LCL.Number of Days = CON.*ZERO
LCL.Number_of_Days = *ZERO;

// RCD.Days to Pay 1 USR = CON.*ZERO
RCD.Days_to_Pay_1_USR = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Number of Days = RCD.Requested Delivery Dt - DB1.Scheduled Ship Date *DAYS
LCL.Number_of_Days = DURATION(RCD.Requested_Delivery_Dt DB1.Scheduled_Ship_Date 'DY'               +
1111111 'NONE' 'N' 1);

// RCD.Days to Pay 1 USR = DB1.Item Age Days - LCL.Number of Days
RCD.Days_to_Pay_1_USR = DB1.Item_Age_Days - LCL.Number_of_Days;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?warehouse type
CASE;

// IF CTL.Warehouse Type USR NE CTL.Warehouse Type
IF CTL.Warehouse_Type_USR <> CTL.Warehouse_Type;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?scheduled ship date
CASE;

// IF CTL.Scheduled Ship Date NE WRK.Scheduled ShpDate SavUsr
IF CTL.Scheduled_Ship_Date <> WRK.Scheduled_ShpDate_SavUsr;

//?Sched Ship date Reload sub-file
// WRK.Scheduled ShpDate SavUsr = CTL.Scheduled Ship Date
WRK.Scheduled_ShpDate_SavUsr = CTL.Scheduled_Ship_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?order number
CASE;

// IF CTL.Order Number NE WRK.Order Number SavUsr
IF CTL.Order_Number <> WRK.Order_Number_SavUsr;

//?Order number not = reload sub-file
// WRK.Order Number SavUsr = CTL.Order Number
WRK.Order_Number_SavUsr = CTL.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?ship to customer
CASE;

// IF CTL.Ship To Customer NE WRK.Ship To Customer SavUsr
IF CTL.Ship_To_Customer <> WRK.Ship_To_Customer_SavUsr;

//?Load ID Break reload sub-file
// WRK.Ship To Customer SavUsr = CTL.Ship To Customer
WRK.Ship_To_Customer_SavUsr = CTL.Ship_To_Customer;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?load id
CASE;

// IF CTL.Load ID NE WRK.Load ID USR
IF CTL.Load_ID <> WRK.Load_ID_USR;

//?Load ID Break reload sub-file
// WRK.Load ID USR = CTL.Load ID
WRK.Load_ID_USR = CTL.Load_ID;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?event code
CASE;

// IF CTL.Event Code NE WRK.Event Code SavUsr
IF CTL.Event_Code <> WRK.Event_Code_SavUsr;

//?Load ID Break reload sub-file
// WRK.Event Code SavUsr = CTL.Event Code
WRK.Event_Code_SavUsr = CTL.Event_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?detail line status
CASE;

// IF CTL.Detail Line Status NE WRK.Detail Line Status SavUsr
IF CTL.Detail_Line_Status <> WRK.Detail_Line_Status_SavUsr;

//?Load ID Break reload sub-file
// WRK.Detail Line Status SavUsr = CTL.Detail Line Status
WRK.Detail_Line_Status_SavUsr = CTL.Detail_Line_Status;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Resvered Product
CASE;

// IF CTL.Reserved Product  USR NE CTL.Reserved Product  USR2
IF CTL.Reserved_Product_USR <> CTL.Reserved_Product_USR2;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// CTL.Reserved Product  USR2 = CTL.Reserved Product  USR
CTL.Reserved_Product_USR2 = CTL.Reserved_Product_USR;

ENDIF;

//?city
CASE;

// IF WRK.USR City NE CTL.City
IF WRK.USR_City <> CTL.City;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.USR City = CTL.City
WRK.USR_City = CTL.City;

ENDIF;

//?state
CASE;

// IF WRK.USR State 2 NE CTL.State
IF WRK.USR_State_2 <> CTL.State;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// WRK.USR State 2 = CTL.State
WRK.USR_State_2 = CTL.State;

ENDIF;

//?reset ordered & scheduled usr fields
CASE;

// IF PGM.*Reload subfile is *YES
IF PGM.*Reload_subfile = 'Y';

// CTL.Quantity Ordered 2 USR = CON.*ZERO
CTL.Quantity_Ordered_2_USR = *ZERO;

// CTL.Quantity Scheduled 2 USR = CON.*ZERO
CTL.Quantity_Scheduled_2_USR = *ZERO;

// CTL.Weight Order 2 usr = CON.*ZERO
CTL.Weight_Order_2_usr = *ZERO;

// CTL.Weight Schd 2 USR = CON.*ZERO
CTL.Weight_Schd_2_USR = *ZERO;

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Customer Name DRV) TYPE(DRVFLD)                                AC1631131;
PARAMETER(RCD.Customer_Name_DRV);
PARAMETER(RCD.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Customer_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// CTL.Quantity Ordered 3 USR = WRK.Quantity Ordered 3 USR
CTL.Quantity_Ordered_3_USR = WRK.Quantity_Ordered_3_USR;

// CTL.Quantity Scheduled 3 USR = WRK.Quantity Scheduled 3 USR
CTL.Quantity_Scheduled_3_USR = WRK.Quantity_Scheduled_3_USR;

// CTL.Weight Order 3 usr = WRK.Weight Order 3 usr
CTL.Weight_Order_3_usr = WRK.Weight_Order_3_usr;

// CTL.Weight Schd 3 USR = WRK.Weight Schd 3 USR
CTL.Weight_Schd_3_USR = WRK.Weight_Schd_3_USR;

//?USER: Process subfile record (Pre-confirm)

//?Display Order
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Type_Sales);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(WRK.Ship_To_City);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
PARAMETER(WRK.Bill_to_Customer);
PARAMETER(WRK.Bill_to_Name);
PARAMETER(WRK.Bill_to_Address_Line_1);
PARAMETER(WRK.Bill_to_Address_Line_2);
PARAMETER(WRK.Bill_to_Address_Line_3);
PARAMETER(WRK.Bill_to_City);
PARAMETER(WRK.Bill_to_State_Code);
PARAMETER(WRK.Bill_to_Zip_Postal_Code);
PARAMETER(WRK.Customer_Purchase_Order_#);
PARAMETER(WRK.Order_Date);
PARAMETER(WRK.Requested_Ship_Date);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Cancel_Date);
PARAMETER(WRK.Terms_Code);
PARAMETER(WRK.Special_Instructions);
PARAMETER(WRK.Special_Instructions_2);
PARAMETER(WRK.Carrier_Code);
PARAMETER(WRK.Comment_Print_Acknowledge);
PARAMETER(WRK.Comment_Print_Inv_Cr_Memo);
PARAMETER(WRK.Comment_Print_Pick_Slip);
PARAMETER(WRK.Comment_Print_Ship_Doc);
PARAMETER(WRK.Reason_Code);
PARAMETER(WRK.Order_in_Use);
PARAMETER(WRK.Header_Status);
PARAMETER(WRK.Header_Status_Last);
PARAMETER(WRK.Order_Type_Print_Status);
PARAMETER(WRK.Scheduled_Ship_Date);
PARAMETER(WRK.User_Original_Entry);
PARAMETER(WRK.Date_of_Original_Entry);
PARAMETER(WRK.Order_Value_Total);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(WRK.Credit_Hold);
PARAMETER(WRK.Production_Hold);
PARAMETER(WRK.New_Customer_Hold);
PARAMETER(WRK.Requested_Delivery_Date);
PARAMETER(WRK.Requested_Delivery_Time);
PARAMETER(WRK.Accounts_Receiv_Ent_1);
PARAMETER(WRK.Accounts_Receiv_Ent_2);
PARAMETER(WRK.Load_ID);
PARAMETER(WRK.Absorbed_Freight_Rate_CWT);
PARAMETER(WRK.Rated_Freight);
PARAMETER(WRK.LTL_Flag);
PARAMETER(WRK.Price_Audit);
PARAMETER(WRK.Price_Status);
PARAMETER(WRK.Shipping_Method);
PARAMETER(WRK.Export_Status);
PARAMETER(WRK.Palletize);
PARAMETER(WRK.Shrink_Wrap);
PARAMETER(WRK.Slip_Sheet);
PARAMETER(WRK.Age_Code);
PARAMETER(WRK.Reefer_Temperature);
PARAMETER(WRK.Load_Type);
PARAMETER(WRK.Attach_to_Invoice_Number);
PARAMETER(WRK.Load_Plan_Order);
PARAMETER(WRK.Print_Pick_Slip);
PARAMETER(WRK.Resell_Reference_Number);
PARAMETER(WRK.Special_Comment_1);
PARAMETER(WRK.Special_Comment_2);
PARAMETER(WRK.Affect_Auto_Accruals);
PARAMETER(WRK.Sales_Route_Code);
PARAMETER(WRK.Manager_Level_Code);
PARAMETER(WRK.VP_Level_Code);
PARAMETER(WRK.Attach_to_Order_Number);
PARAMETER(WRK.Reason_for_Price_Audit);
PARAMETER(WRK.Invoice_Number);
PARAMETER(WRK.Invoice_Suffix);
PARAMETER(WRK.Invoice_Date);
PARAMETER(WRK.Event_Code);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(WRK.Modified_Flag);
PARAMETER(WRK.A_R_order_Value_Total);
PARAMETER(WRK.Billing_Activity_Type);
PARAMETER(WRK.Block_Order_Flag);
PARAMETER(WRK.Order_Certification_Flag);
PARAMETER(WRK.EDI_Status_1);
PARAMETER(WRK.EDI_Status_2);
PARAMETER(WRK.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Order_Sequence_Number);
PARAMETER(WRK.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

//?Display Age days
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Dsp Age Information   DR.
CALL PROGRAM(Dsp Age Information   DR) ('PNQ0D1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);

ENDIF;

//?Display Order Schedule
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

// Call program Dsp Order Sched Pdctn DF.
CALL PROGRAM(Dsp Order Sched Pdctn DF) ('PDFMDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(RCD.Item_Code);

ENDIF;

//?USER: Process command keys

//?F4=PROMPT
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Warehouse Type USR
IF PGM.*Cursor_field = CTL.Warehouse_Type_USR;

// Call program SEL Warehouse Type-Int SR.
CALL PROGRAM(SEL Warehouse Type-Int SR) ('PDSNSRR');
PARAMETER(CTL.Warehouse_Type_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Search on Ship to customer
CASE;

// IF PGM.*Cursor field <IS> CTL.Ship To Customer
IF PGM.*Cursor_field = CTL.Ship_To_Customer;

// Call program SEL Ship To Customer   SR.
CALL PROGRAM(SEL Ship To Customer   SR) ('PDR5SRR');
PARAMETER(CTL.Ship_To_Customer);

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?F14=Display Item Warehouse Inquiry Detail
CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

CASE;

// IF PAR.*Initial call is *NO
IF PAR.*Initial_call = 'N';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.*Initial call = CND.*NO
PAR.*Initial_call = 'N';

EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(LCL.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(LCL.UOM_Pricing);
PARAMETER(LCL.Unit_Weight);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Piece_Count_Item);
PARAMETER(WRK.Pieces_Per_Bag);
PARAMETER(WRK.Bags_Per_Unit);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Lot Tracking Flag is yes
IF LCL.Lot_Tracking_Flag = 'Y';

// Call program Dsp Item Lot Locs     DF.
CALL PROGRAM(Dsp Item Lot Locs     DF) ('PDH2DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(PAR.*Initial_call);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Dsp Item/Whse Inqy Dtl DF.
CALL PROGRAM(Dsp Item/Whse Inqy Dtl DF) ('ICQ9DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(LCL.Unit_Weight);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Warehouse_Description);
PARAMETER(CTL.Name);
PARAMETER(PAR.*Initial_call);

ENDIF;

// PAR.*Initial call = CND.*YES
PAR.*Initial_call = 'Y';

ENDIF;

ENDIF;

// WRK.Status Flag 10 Y/N = CND.No
WRK.Status_Flag_10_Y_N = 'N';

