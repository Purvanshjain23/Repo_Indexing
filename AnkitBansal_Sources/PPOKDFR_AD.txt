// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPOKDFR
// ?Date: 14.08.2025 Time: 03:41:23
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Inventory Management
PAR.Application_Code = 'I/C';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

// PAR.ISC Week Ending Date = CND.eq 20991231
PAR.ISC_Week_Ending_Date = 20991231;

//?R9083 02/07/17 DN-Get Default Inventory Valuation Grouping.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(PAR.Company_Number);
PARAMETER('IVFGROUP');
PARAMETER(NLL.Description);
PARAMETER(LCL.ISC_Valuation_Grouping);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?R9083 02/09/17 DN-Added RST by ISC Valuation Grouping.
EXECUTE FUNCTION(Rtv Last Week in file RT) TYPE(RTVOBJ) FILE(PPBSCPP)           AC1742385;
PARAMETER(LCL.ISC_Valuation_Grouping);
PARAMETER(PAR.ISC_Week_Ending_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Get the latest week ending date in the file
 // PAR.ISC Week Ending Date = DB1.ISC Week Ending Date
 PAR.ISC_Week_Ending_Date = DB1.ISC_Week_Ending_Date;

 QUIT;

}


//?USER: Initialize subfile control

CASE;

// IF CTL.ISC Week Ending Date is Not Entered
IF CTL.ISC_Week_Ending_Date = *ZERO;

// CTL.ISC Week Ending Date = PAR.ISC Week Ending Date
CTL.ISC_Week_Ending_Date = PAR.ISC_Week_Ending_Date;

// WRK.ISC Week Ending Date = CTL.ISC Week Ending Date
WRK.ISC_Week_Ending_Date = CTL.ISC_Week_Ending_Date;

ENDIF;

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// CTL.ISC Warehouse Company = PAR.Company Number
CTL.ISC_Warehouse_Company = PAR.Company_Number;

// WRK.ISC Warehouse Company = PAR.Company Number
WRK.ISC_Warehouse_Company = PAR.Company_Number;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

//?R9083 02/07/17 DN-Set Inventory Valuation Grouping.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.ISC Warehouse Company = CTL.ISC Warehouse Company
LCL.ISC_Warehouse_Company = CTL.ISC_Warehouse_Company;

//?Default Grouping with User Company Default if Blanks.
CASE;

// IF LCL.ISC Warehouse Company is Equal to zero
IF LCL.ISC_Warehouse_Company = *ZERO;

//?2/15/17-Cmp 440 User profile MUST be set PAR.Allow Multi-Company=N.
//?  Otherwise, they can switch Company to process Group G for
//?  Cmp 360/960.
// LCL.ISC Warehouse Company = PAR.Company Number
LCL.ISC_Warehouse_Company = PAR.Company_Number;

ENDIF;

EXECUTE FUNCTION(RTV Desc & Val Alpha  RT) TYPE(RTVOBJ) FILE(PDKMREP)           AC2131892;
PARAMETER(LCL.ISC_Warehouse_Company);
PARAMETER('IVFGROUP');
PARAMETER(CTL.Inv_Valuation_Group_Desc);
PARAMETER(CTL.ISC_Valuation_Grouping);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Initialize subfile record from DBF record

CASE;

// IF CTL.ISC Warehouse Company NE DB1.ISC Warehouse Company
IF CTL.ISC_Warehouse_Company <> DB1.ISC_Warehouse_Company;

// AND CTL.ISC Warehouse Company is not equal to zero
AND CTL.ISC_Warehouse_Company <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF CTL.ISC Week Ending Date NE DB1.ISC Week Ending Date
IF CTL.ISC_Week_Ending_Date <> DB1.ISC_Week_Ending_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF CTL.ISC Warehouse Code NE DB1.ISC Warehouse Code
IF CTL.ISC_Warehouse_Code <> DB1.ISC_Warehouse_Code;

// AND CTL.ISC Warehouse Code is Warehouse Code not Blank
AND CTL.ISC_Warehouse_Code <> *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF DB1.ISC Warehouse Code NE WRK.ISC Warehouse Code
IF DB1.ISC_Warehouse_Code <> WRK.ISC_Warehouse_Code;

EXECUTE FUNCTION(Rtv User Whs Access   IF) TYPE(EXCINTFUN)                      AC1535148;
PARAMETER(PAR.User_Profile_Name);
PARAMETER(DB1.ISC_Warehouse_Code);
PARAMETER('I');
PARAMETER('U');
PARAMETER(PAR.Access_Denied_Y_N);
{
 //?Execute internal function

 // PAR.Access Denied (Y/N) = CND.no
 PAR.Access_Denied_Y_N = 'N';

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Retrieve User Warehouse Access Type
 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 //?Retrieve User Warehouse Access Type
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv User Whs Access   RT) TYPE(RTVOBJ) FILE(PDL1REP)           AC1531985;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.UWA_Inventory_Trans);
 PARAMETER(PAR.UWA_Lot_Loc_Trans);
 PARAMETER(PAR.UWA_Shipping_Trans);
 PARAMETER(PAR.UWA_Cross_Applications);
 PARAMETER(PAR.UWA_Unused_Status_1);
 PARAMETER(PAR.UWA_Unused_Status_2);
 PARAMETER(PAR.UWA_Unused_Sts_3);
 PARAMETER(PAR.UWA_Unused_Sts_4);
 PARAMETER(PAR.UWA_Unused_Sts_5);
 PARAMETER(PAR.UWA_Unused_Sts_6);
 PARAMETER(PAR.UWA_Unused_Sts_7);
 PARAMETER(PAR.UWA_Unused_Sts_8);
 PARAMETER(PAR.UWA_Unused_Sts_9);
 PARAMETER(PAR.UWA_Unused_Sts_10);
 PARAMETER(PAR.UWA_Unused_Sts_11);
 PARAMETER(PAR.UWA_Unused_Sts_12);
 PARAMETER(PAR.UWA_Unused_Sts_13);
 PARAMETER(PAR.UWA_Unused_Sts_14);
 PARAMETER(PAR.UWA_Unused_Sts_15);
 PARAMETER(PAR.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 ENDIF;

 //?Validate Access
 CASE;

 // IF PAR.Record Found USR is Record Not Found
 IF PAR.Record_Found_USR = 'N';

 // PAR.Access Denied (Y/N) = CND.yes
 PAR.Access_Denied_Y_N = 'Y';

 //?Validate Access
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Inventory Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Inventory Transactions
 IF PAR.Access_Area_Needed_USR = 'I';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Inventory Trans is *Not Update
 IF PAR.UWA_Inventory_Trans = 'N'/'R';

 // PAR.Access Denied (Y/N) = CND.yes
 PAR.Access_Denied_Y_N = 'Y';

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Inventory Trans is None
 IF PAR.UWA_Inventory_Trans = 'N';

 // PAR.Access Denied (Y/N) = CND.yes
 PAR.Access_Denied_Y_N = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?Lot Loc Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Lot Loc Transactions
 IF PAR.Access_Area_Needed_USR = 'L';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Lot Loc Trans is *Not Update
 IF PAR.UWA_Lot_Loc_Trans = 'N'/'R';

 // PAR.Access Denied (Y/N) = CND.yes
 PAR.Access_Denied_Y_N = 'Y';

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Lot Loc Trans is None
 IF PAR.UWA_Lot_Loc_Trans = 'N';

 // PAR.Access Denied (Y/N) = CND.yes
 PAR.Access_Denied_Y_N = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?Shipping Transactions
 CASE;

 // IF PAR.Access Area Needed USR is Shipping Transactions
 IF PAR.Access_Area_Needed_USR = 'S';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Shipping Trans is *Not Update
 IF PAR.UWA_Shipping_Trans = 'N'/'R';

 // PAR.Access Denied (Y/N) = CND.yes
 PAR.Access_Denied_Y_N = 'Y';

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Shipping Trans is None
 IF PAR.UWA_Shipping_Trans = 'N';

 // PAR.Access Denied (Y/N) = CND.yes
 PAR.Access_Denied_Y_N = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?Cross Applications
 CASE;

 // IF PAR.Access Area Needed USR is Cross Applications
 IF PAR.Access_Area_Needed_USR = 'C';

 CASE;

 // IF PAR.Access Needed USR is Update
 IF PAR.Access_Needed_USR = 'U';

 CASE;

 // IF PAR.UWA Cross Applications is *Not Update
 IF PAR.UWA_Cross_Applications = 'N'/'R';

 // PAR.Access Denied (Y/N) = CND.yes
 PAR.Access_Denied_Y_N = 'Y';

 ENDIF;

 // IF PAR.Access Needed USR is Read
 IF PAR.Access_Needed_USR = 'R';

 CASE;

 // IF PAR.UWA Cross Applications is None
 IF PAR.UWA_Cross_Applications = 'N';

 // PAR.Access Denied (Y/N) = CND.yes
 PAR.Access_Denied_Y_N = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


// WRK.ISC Warehouse Code = DB1.ISC Warehouse Code
WRK.ISC_Warehouse_Code = DB1.ISC_Warehouse_Code;

ENDIF;

CASE;

// IF PAR.Access Denied (Y/N) is yes
IF PAR.Access_Denied_Y_N = 'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
PARAMETER(RCD.ISC_Item_Code);
PARAMETER(RCD.Description_Line_One);
PARAMETER(NLL.Description_Line_Two);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.ISC Post Balance Sts is *ALL values
IF CTL.ISC_Post_Balance_Sts = 'P'/'O'/'R';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Condition Desc. 1  USR = Condition name of RCD.ISC Post Balance Sts
CTL.Condition_Desc_1_USR = RTVCND(RCD.ISC_Post_Balance_Sts);

// CTL.ISC Post Balance Sts = RCD.ISC Post Balance Sts
CTL.ISC_Post_Balance_Sts = RCD.ISC_Post_Balance_Sts;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?Sel Whse
CASE;

// IF CTL.ISC Warehouse Code is Warehouse Code not Blank
IF CTL.ISC_Warehouse_Code <> *BLANK;

CASE;

// IF CTL.ISC Warehouse Code NE DB1.ISC Warehouse Code
IF CTL.ISC_Warehouse_Code <> DB1.ISC_Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?Sel co
CASE;

// IF PGM.*Cursor field <IS> CTL.ISC Warehouse Company
IF PGM.*Cursor_field = CTL.ISC_Warehouse_Company;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.ISC_Warehouse_Company);

ENDIF;

//?Sel whs
CASE;

// IF PGM.*Cursor field <IS> CTL.ISC Warehouse Code
IF PGM.*Cursor_field = CTL.ISC_Warehouse_Code;

EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
PARAMETER(PAR.User_Profile_Name);
PARAMETER(WRK.User_Code_Model);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Sel User Whse         SL.
CALL PROGRAM(Sel User Whse         SL) ('PPP2SRR');
PARAMETER(WRK.User_Code_Model);
PARAMETER(CTL.ISC_Warehouse_Code);

ENDIF;

ENDIF;

//?PK0040 RMC 12/7/06  Validate Whse & Acctng Co combo
CASE;

// IF CTL.ISC Warehouse Company is greater than zero
IF CTL.ISC_Warehouse_Company > *ZERO;

// AND CTL.ISC Warehouse Code is Warehouse Code not Blank
AND CTL.ISC_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Acct Co          RT) TYPE(RTVOBJ) FILE(CAADREP)            AC1802492;
PARAMETER(CTL.ISC_Warehouse_Code);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Accounting Company NE CTL.ISC Warehouse Company
IF LCL.Accounting_Company <> CTL.ISC_Warehouse_Company;

// Send error message - 'Warehouse &1 and Acctng Company &2 combo invalid.'
ERROR(USR3675);
MSGPARM(CTL.ISC_Warehouse_Code);
MSGPARM(CTL.ISC_Warehouse_Company);

ENDIF;

ENDIF;

CASE;

// IF CTL.ISC Week Ending Date NE WRK.ISC Week Ending Date
IF CTL.ISC_Week_Ending_Date <> WRK.ISC_Week_Ending_Date;

// OR CTL.ISC Warehouse Company NE WRK.ISC Warehouse Company
OR CTL.ISC_Warehouse_Company <> WRK.ISC_Warehouse_Company;

// CTL.ISC Post Balance Sts = WRK.Blank for 4           USR
CTL.ISC_Post_Balance_Sts = WRK.Blank_for_4_USR;

// CTL.Condition Desc. 1  USR = WRK.Blank for 12          USR
CTL.Condition_Desc_1_USR = WRK.Blank_for_12_USR;

// WRK.ISC Warehouse Company = CTL.ISC Warehouse Company
WRK.ISC_Warehouse_Company = CTL.ISC_Warehouse_Company;

// WRK.ISC Week Ending Date = CTL.ISC Week Ending Date
WRK.ISC_Week_Ending_Date = CTL.ISC_Week_Ending_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// CTL.ISC Post Balance Sts = WRK.Blank for 4           USR
CTL.ISC_Post_Balance_Sts = WRK.Blank_for_4_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F6=Create
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

CASE;

// IF CTL.ISC Warehouse Company is Equal to zero
IF CTL.ISC_Warehouse_Company = *ZERO;

// OR CTL.ISC Warehouse Code is Warehouse Code Blank
OR CTL.ISC_Warehouse_Code = *BLANK;

// Send error message - 'Warehouse Company and Code required for a F6=Create.'
ERROR(USR3559);
MSGPARM(CTL.ISC_Warehouse_Code);
MSGPARM(CTL.ISC_Warehouse_Company);

// IF *OTHERWISE
IF *OTHERWISE;

//?R9083 02/23/17 DN-Passed in Grouping & Grouping Desc.
// Call program Edt Stock Closing Bal ER.
CALL PROGRAM(Edt Stock Closing Bal ER) ('PPOME1R');
PARAMETER(CTL.ISC_Week_Ending_Date);
PARAMETER(CTL.ISC_Warehouse_Company);
PARAMETER(CTL.ISC_Warehouse_Code);
PARAMETER(*ZERO);
PARAMETER(CTL.ISC_Valuation_Grouping);
PARAMETER(CTL.Inv_Valuation_Group_Desc);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?F20=Post
CASE;

// IF CTL.*CMD key is CF20
IF CTL.*CMD_key = '20';

//?R9083 02/21/17 DN-Ensure Whse Acctng Company is Entered.
CASE;

// IF CTL.ISC Warehouse Company is Equal to zero
IF CTL.ISC_Warehouse_Company = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.ISC_Warehouse_Company);

QUIT;

ENDIF;

//?R9083 06/14/17 DN-Update date conversion due to Synon version difference.
// PAR.Week End Date = CTL.ISC Week Ending Date
PAR.Week_End_Date = CTL.ISC_Week_Ending_Date;

// PAR.Post Flag USR = CND.No
PAR.Post_Flag_USR = 'N';

//?R9083 02/21/17 DN-Added ISC Valuation Grouping & Desc as Input Parm.
// Call program Pmt Post Inventory    PV.
CALL PROGRAM(Pmt Post Inventory    PV) ('PPOQPVR');
PARAMETER(CTL.ISC_Week_Ending_Date);
PARAMETER(CTL.ISC_Warehouse_Company);
PARAMETER(CTL.ISC_Valuation_Grouping);
PARAMETER('Y');
PARAMETER(PAR.Post_Flag_USR);
PARAMETER(PAR.Week_End_Date);
PARAMETER(CTL.Inv_Valuation_Group_Desc);

CASE;

// IF PAR.Post Flag USR is Yes
IF PAR.Post_Flag_USR = 'Y';

//?R9083 02/22/17 DN-Modified to Add Grouping to Message.
// Send information message - 'Post stock closing balances for group &1 has completed.'
MESSAGE(USR3535 *INFO);
MSGPARM(CTL.ISC_Valuation_Grouping);

// CTL.ISC Post Balance Sts = WRK.Blank for 4           USR
CTL.ISC_Post_Balance_Sts = WRK.Blank_for_4_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?F21=Print List
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Stock Closing List');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// PAR.Company Number Pass   USR = CTL.ISC Warehouse Company
PAR.Company_Number_Pass_USR = CTL.ISC_Warehouse_Company;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

//?R9083 06/26/17 DN-Update date conversion due to Synon version difference.
// LCL.Date Out (8,0) USR = CTL.ISC Week Ending Date
LCL.Date_Out_80_USR = CTL.ISC_Week_Ending_Date;

// WRK.Date (Char-8) USR = CVTVAR(LCL.Date Out (8,0) USR)
WRK.Date_Char_8_USR = CVTVAR(LCL.Date_Out_80_USR);

//?R9083 02/10/17 DN-Added ISC Valuation Grouping & Desc as Input Parm.
// Call program Prt ISC-End Inv Comps UP.
SBMJOB;
CALL PROGRAM(Prt ISC-End Inv Comps UP) ('PPP5UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(CTL.ISC_Warehouse_Code);
PARAMETER(WRK.Date_Char_8_USR);
PARAMETER(CTL.ISC_Valuation_Grouping);
PARAMETER(CTL.Inv_Valuation_Group_Desc);
SBMJOBOVR JOB(PRT_INVBAL);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2=Edit
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// WRK.IVF Post Inventory Sts = CND.Open
WRK.IVF_Post_Inventory_Sts = 'O';

//?R9083 02/07/17 DN-Added RST by IVF Valuation Grouping.
EXECUTE FUNCTION(Rtv Post Inv Sts-1st  RT) TYPE(RTVOBJ) FILE(PPBTCPP)           AC1740674;
PARAMETER(RCD.ISC_Valuation_Grouping);
PARAMETER(RCD.ISC_Week_Ending_Date);
PARAMETER(WRK.IVF_Post_Inventory_Sts);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF WRK.IVF Post Inventory Sts is Posted or Reposted
IF WRK.IVF_Post_Inventory_Sts = 'P'/'R';

//?R9083 02/22/17 DN-Modified to Add Grouping to Message.
// Send error message - 'Invalid Option. Inventory Value File has been posted for group &2.'
ERROR(USR3614);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.ISC_Valuation_Grouping);

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.ISC Item Code = RCD.ISC Item Code
CTL.ISC_Item_Code = RCD.ISC_Item_Code;

//?R9083 02/23/17 DN-Passed in Grouping & Grouping Desc.
// Call program Edt Stock Closing Bal ER.
CALL PROGRAM(Edt Stock Closing Bal ER) ('PPOME1R');
PARAMETER(RCD.ISC_Week_Ending_Date);
PARAMETER(RCD.ISC_Warehouse_Company);
PARAMETER(RCD.ISC_Warehouse_Code);
PARAMETER(RCD.ISC_Item_Code);
PARAMETER(RCD.ISC_Valuation_Grouping);
PARAMETER(CTL.Inv_Valuation_Group_Desc);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?5=Display
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// CTL.ISC Item Code = RCD.ISC Item Code
CTL.ISC_Item_Code = RCD.ISC_Item_Code;

//?R9083 02/23/17 DN-Passed in Grouping Desc.
// Call program Dsp Stock Closing  2  DR.
CALL PROGRAM(Dsp Stock Closing  2  DR) ('PPPAD2R');
PARAMETER(RCD.ISC_Week_Ending_Date);
PARAMETER(RCD.ISC_Warehouse_Company);
PARAMETER(RCD.ISC_Warehouse_Code);
PARAMETER(RCD.ISC_Item_Code);
PARAMETER(CTL.Inv_Valuation_Group_Desc);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?6=Print
CASE;

// IF RCD.*SFLSEL is *Print
IF RCD.*SFLSEL = '6'/'6';

//?R9083 02/13/17 DN-Added Company Require If Opt 6=Print is Selected.
CASE;

// IF CTL.ISC Warehouse Company is Equal to zero
IF CTL.ISC_Warehouse_Company = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.ISC_Warehouse_Company);

QUIT;

ENDIF;

// CTL.ISC Item Code = RCD.ISC Item Code
CTL.ISC_Item_Code = RCD.ISC_Item_Code;

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Stock Closing  - 1 item');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// PAR.Company Number Pass   USR = RCD.ISC Warehouse Company
PAR.Company_Number_Pass_USR = RCD.ISC_Warehouse_Company;

// PAR.Item Code PASS        USR = RCD.ISC Item Code
PAR.Item_Code_PASS_USR = RCD.ISC_Item_Code;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

//?R9083 06/26/17 DN-Update date conversion due to Synon version difference.
// LCL.Date Out (8,0) USR = CTL.ISC Week Ending Date
LCL.Date_Out_80_USR = CTL.ISC_Week_Ending_Date;

// WRK.Date (Char-8) USR = CVTVAR(LCL.Date Out (8,0) USR)
WRK.Date_Char_8_USR = CVTVAR(LCL.Date_Out_80_USR);

// Call program Prt Inv Stk Bal-1 Itm UP.
SBMJOB;
CALL PROGRAM(Prt Inv Stk Bal-1 Itm UP) ('PPQBUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(RCD.ISC_Warehouse_Code);
PARAMETER(PAR.Item_Code_PASS_USR);
PARAMETER(WRK.Date_Char_8_USR);
SBMJOBOVR JOB(PRT_INVBAL);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

