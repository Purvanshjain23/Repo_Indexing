// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKHYPVR
// ?Date: 14.08.2025 Time: 02:51:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//? 7/02/2021 JBB WHD80995 - Increase rollover values for BO#
//?                          Recompile only after changing the
//?                          RTVOBJ-Rtv Crt Next BOH      RT to
//?                          rollover when the BO# reaches 999999,
//?                          instead of 99999.
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?   length from 5 to 7.
ENDDO;

//?USER: Load screen

// DTL.BOH Company Number = PAR.CC Company Number
DTL.BOH_Company_Number = PAR.CC_Company_Number;

//?USER: Validate fields

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

ENDIF;

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TH_Purchase_Date);
PARAMETER(DTL.TH_Group_Reference);
PARAMETER(DTL.TH_Live_Purchase_UOM);
PARAMETER(DTL.TH_Live_Purchase_Price);
PARAMETER(DTL.TH_Resale_UOM);
PARAMETER(DTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(DTL.TH_Pricing_Date);
PARAMETER(DTL.TH_Resale_Spread_Sts);
PARAMETER(DTL.TH_Dead_On_Arrival);
PARAMETER(DTL.TH_Head_Received);
PARAMETER(DTL.TH_Yard_Deads);
PARAMETER(DTL.TH_Held_Over);
PARAMETER(DTL.TH_Head_Condemned);
PARAMETER(DTL.TH_Head_Killed);
PARAMETER(DTL.TH_Head_Adds);
PARAMETER(DTL.TH_Head_Accepted);
PARAMETER(DTL.TH_Live_Wgt);
PARAMETER(DTL.TH_Hot_Wgt);
PARAMETER(DTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(DTL.TH_Tot_Backfat_Inches);
PARAMETER(DTL.TH_Tot_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Live_Wgt);
PARAMETER(DTL.TH_Avg_Hot_Wgt);
PARAMETER(DTL.TH_Avg_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Lean_Percent);
PARAMETER(DTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(DTL.TH_Avg_Backfat);
PARAMETER(DTL.TH_Std_Yield_Percent);
PARAMETER(DTL.TH_Actual_Yield);
PARAMETER(DTL.TH_Yield_Difference);
PARAMETER(DTL.TH_Recalc_Live_Wgt);
PARAMETER(DTL.TH_CM_Base_Mkt_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(DTL.TH_CM_Sort_Discount_Amt);
PARAMETER(DTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(DTL.TH_CM_Base_Carcass_Value);
PARAMETER(DTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(DTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(DTL.TH_Deduction_Amt);
PARAMETER(DTL.TH_Total_Net_WO_Adds);
PARAMETER(DTL.TH_Carcass_Net_Amt);
PARAMETER(DTL.TH_Additions_Amt);
PARAMETER(DTL.TH_Accrual_Amount);
PARAMETER(DTL.TH_Fixed_Cost_Amount);
PARAMETER(DTL.TH_Payment_Sts);
PARAMETER(DTL.TH_Header_Error_Sts);
PARAMETER(DTL.TH_Detail_Error_Sts);
PARAMETER(DTL.TH_Kill_Balancing_Sts);
PARAMETER(DTL.TH_Bal_to_Kill_Gen);
PARAMETER(DTL.TH_Commission_A_P_Voucher);
PARAMETER(DTL.TH_Voucher_Payment_Date);
PARAMETER(DTL.TH_User_Error_Override);
PARAMETER(DTL.TH_Held_Over_Record);
PARAMETER(DTL.TH_Sex);
PARAMETER(DTL.TH_Held_Ovr_Completed_Dte);
PARAMETER(DTL.TH_Commission_Paid_Date);
PARAMETER(DTL.TH_Actual_Check_Date);
PARAMETER(DTL.TH_Shipped_Weight);
PARAMETER(DTL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(DTL.TH_FFLI);
PARAMETER(DTL.TH_Kill_Product_Value);
PARAMETER(DTL.TH_Cut_Product_Value);
PARAMETER(DTL.TH_Render_Product_Value);
PARAMETER(DTL.TH_Shift_Held_Over_Head);
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.THP_Process_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Kill Date 1 Usr LE DTL.TH Kill Date
IF DTL.Kill_Date_1_Usr <= DTL.TH_Kill_Date;

// Send error message - '&1 must be less than or equal to &2'
ERROR(PRK0635);
MSGPARM(DTL.TH_Kill_Date);
MSGPARM(DTL.Kill_Date_1_Usr);

ENDIF;

CASE;

// IF DTL.Kill Date 1 Usr GT DTL.Kill Date 2 USR
IF DTL.Kill_Date_1_Usr > DTL.Kill_Date_2_USR;

// Send error message - '&1 must be less than or equal to &2'
ERROR(PRK0635);
MSGPARM(DTL.Kill_Date_1_Usr);
MSGPARM(DTL.Kill_Date_2_USR);

ENDIF;

//?USER: User defined action

EXECUTE FUNCTION(Utl Copy Buy Order    RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1192872;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.Kill_Date_1_Usr);
PARAMETER(DTL.Kill_Date_2_USR);
PARAMETER(DTL.Company);
{
 //?USER: Initialize routine

 // PAR.Kill Date Usr = PAR.Kill Date 1 Usr
 PAR.Kill_Date_Usr = PAR.Kill_Date_1_Usr;

 //?USER: Process Data record

 // DOW PAR.Kill Date Usr LE PAR.Kill Date 2 USR
 DOW PAR.Kill_Date_Usr <= PAR.Kill_Date_2_USR;

 EXECUTE FUNCTION(Rtv/Upd Next BO       RT) TYPE(RTVOBJ) FILE(PKAZREP)           AB1100930;
 PARAMETER(PAR.Company);
 PARAMETER(PAR.Buy_Order_Number_USR);
 {
  //?USER: Initialize routine

  //?Modification history
  DO;

  //? 7/02/2021 JBB WHD80995 - Increase rollover from 99999 to 9999999
  ENDDO;

  //?USER: Process Data record

  // PAR.BOH Buy Order Number = DB1.Next Buy Order Number
  PAR.BOH_Buy_Order_Number = DB1.Next_Buy_Order_Number;

  CASE;

  // IF DB1.Next Buy Order Number is EQ 9999999
  IF DB1.Next_Buy_Order_Number = 9999999;

  EXECUTE FUNCTION(Chg Next BO           CH) TYPE(CHGOBJ) FILE(PKAZREP)           AB1100933;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(10000);
  PARAMETER(DB1.Last_Tattoo_Nbr);
  PARAMETER(DB1.Current_Production_Date);
  PARAMETER(DB1.Next_Production_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Next Buy Order Number = DB1.Next Buy Order Number + CON.1
  WRK.Next_Buy_Order_Number = DB1.Next_Buy_Order_Number + 1;

  EXECUTE FUNCTION(Chg Next BO           CH) TYPE(CHGOBJ) FILE(PKAZREP)           AB1100933;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(WRK.Next_Buy_Order_Number);
  PARAMETER(DB1.Last_Tattoo_Nbr);
  PARAMETER(DB1.Current_Production_Date);
  PARAMETER(DB1.Next_Production_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

 EXECUTE FUNCTION(Crt Buy Order Header  CR) TYPE(CRTOBJ) FILE(PKAWCPP)           AB1100514;
 PARAMETER(PAR.Company);
 PARAMETER(PAR.Buy_Order_Number_USR);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.BOH_Payment_Type);
 PARAMETER(DB1.BOH_Buy_Order_Type);
 PARAMETER(DB1.BOH_Market_Add_Deduct);
 PARAMETER(DB1.BOH_Status);
 PARAMETER(DB1.BOH_Delv_Plan_Printed);
 PARAMETER(DB1.BOH_Quote_Price_Type);
 PARAMETER(DB1.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(DB1.BOH_Commodity_Market_Code);
 PARAMETER(DB1.BOH_Commodity_Price_Group);
 PARAMETER(DB1.BOH_Market_Date_Method);
 PARAMETER(DB1.BOH_MPR_Reporting_Date);
 PARAMETER(DB1.BOH_Hedge_Date);
 PARAMETER(DB1.BOH_Unused_Date_3);
 PARAMETER(DB1.BOH_Unused_Date_4);
 PARAMETER(DB1.BOH_Unused_Date_5);
 PARAMETER(DB1.BOH_Hedge_Head_Total);
 PARAMETER(DB1.BOH_Hedge_Reference_BO);
 PARAMETER(DB1.BOH_Hedge_Time_hhmm);
 PARAMETER(DB1.BOH_Unused_Nbr_4);
 PARAMETER(DB1.BOH_Unused_Nbr_5);
 PARAMETER(DB1.BOH_Unused_Nbr_6);
 PARAMETER(DB1.BOH_Unused_Nbr_7);
 PARAMETER(DB1.BOH_Unused_Nbr_8);
 PARAMETER(DB1.BOH_Unused_Nbr_9);
 PARAMETER(DB1.BOH_Unused_Nbr_10);
 PARAMETER(DB1.BOH_MPR_Reporting_Time);
 PARAMETER(DB1.BOH_MPR_EST_RPT_STS);
 PARAMETER(DB1.BOH_MPR_Purchase_Type);
 PARAMETER(DB1.BOH_Status_4);
 PARAMETER(DB1.BOH_Status_5);
 PARAMETER(DB1.PPWS_Company_Number);
 PARAMETER(DB1.CW_Year);
 PARAMETER(DB1.CW_Week_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.PC_Contract_Code);
 PARAMETER(DB1.PSC_Sub_Contract_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.PO_Option_Code);
 PARAMETER(DB1.CMP_Program_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  //?RMC 6/19/19 whd 49122 Chg time to 1:45 per Jerry L at tf
  //?RMC 9/23/16 R7307   Chg time as of 10/11/2016  per new MPR Rule:
  //?            compile all functions that call this CRTOBJ
  //?     9:55:59 changed to 9:30:59             9:56 changed to 9:31
  //?     1:55:59 changed to 1:30:59
  //?************************************************************************
  //?RMC  Chg time as of 01/10/07:
  //?     9:30:59 changed to 9:55:59             9:31 changed to 9:56
  //?     1:30:59 changed to 1:55:59
  //?*********************************************************************
  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

  //?** create record boh status as open
  // DB1.BOH Status = CND.Open
  DB1.BOH_Status = 'O';

  //?PK0254 -- MPR Reporting Time and Date       RMC 1/19/2001
  //?  If Current Time < 9:30:59 am
  //?    Reporting Date = Current Date
  //?    Reporting Time = 1
  //?  If 9:31 am < Current Time < 1:30:59 pm
  //?    Reporting Date = Current Date
  //?    Reporting Time = 2
  //?*** replace with R7307 -- effective 10/11/2016
  //?  * Otherwise         (These will not be reported at all.)
  //?  * Reporting Date = 0
  //?  * Reporting Time = 0
  //?*** NEW     with R7307 -- effective 10/11/2016
  //?    Reporting Date = Next kill date - skip sat/sun
  //?    Reporting Time = 1
  // Call program Rtv System Date & Tim UP.
  CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
  PARAMETER(LCL.*DATE);
  PARAMETER(LCL.*TIME);

  CASE;

  // IF LCL.*TIME is LE 09:30:59
  IF LCL.*TIME <= 093059;

  // DB1.BOH MPR Reporting Date = LCL.*DATE
  DB1.BOH_MPR_Reporting_Date = LCL.*DATE;

  // DB1.BOH MPR Reporting Time = CND.Reporting Time is 1
  DB1.BOH_MPR_Reporting_Time = 1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.*TIME is LE 13:45:59
  IF LCL.*TIME <= 134559;

  //?6/19/19 RMC time was LE 13:30:59
  // DB1.BOH MPR Reporting Date = LCL.*DATE
  DB1.BOH_MPR_Reporting_Date = LCL.*DATE;

  // DB1.BOH MPR Reporting Time = CND.Reporting Time is 2
  DB1.BOH_MPR_Reporting_Time = 2;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?R7307 -- GT 1:30 get reported at next day's 1st submission at 9:30
  // Call program RTV Next WkDy,N=Holidy XF.
  CALL PROGRAM(RTV Next WkDy,N=Holidy XF) ('PBYUXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(LCL.*DATE);
  PARAMETER(LCL.MPR_Reporting_Date);

  // DB1.BOH MPR Reporting Date = LCL.MPR Reporting Date
  DB1.BOH_MPR_Reporting_Date = LCL.MPR_Reporting_Date;

  // DB1.BOH MPR Reporting Time = CND.Reporting Time is 1
  DB1.BOH_MPR_Reporting_Time = 1;

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Utl Copy Buy Order Ld RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1192880;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Buy_Order_Number_USR);
 PARAMETER(PAR.Company);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Buy Order Detail  CR) TYPE(CRTOBJ) FILE(PKAXCPP)           AB1100530;
  PARAMETER(PAR.Company);
  PARAMETER(PAR.Buy_Order_Number_USR);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(DB1.BOL_Pln_Delv_Start_Time);
  PARAMETER(DB1.BOL_Pln_Delv_End_Time);
  PARAMETER(DB1.BOL_Pln_Head_Delv);
  PARAMETER(DB1.BOL_Shipped_Wgt);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(DB1.BOL_Freight_UOM);
  PARAMETER(DB1.BOL_Freight_Unit_Amt);
  PARAMETER(DB1.BOL_Freight_Amt);
  PARAMETER(DB1.BOL_Freight_Allocation);
  PARAMETER(DB1.BOL_Head_Received);
  PARAMETER(DB1.BOL_Live_Wgt_Received);
  PARAMETER(DB1.BOL_Trucker_Payment_Sts);
  PARAMETER(DB1.BOL_Trucker_Check_Number);
  PARAMETER(DB1.BOL_Trucker_Check_Date);
  PARAMETER(DB1.BOL_AP_Voucher);
  PARAMETER(DB1.BOL_Trailer);
  PARAMETER(DB1.BOL_Freight_Exp_Paid_By);
  PARAMETER(DB1.BOL_Scheduled_Kill_Shift);
  PARAMETER(DB1.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Shipped_Head);
  PARAMETER(DB1.Reported_to_USDA);
  PARAMETER(DB1.BOL_MPR_Prior_Day_Prch);
  PARAMETER(DB1.BOL_Violated_Auth_Tme_Sts);
  PARAMETER(DB1.BOL_Status_5);
  PARAMETER(DB1.BOL_Status_6);
  PARAMETER(DB1.BOL_Status_7);
  PARAMETER(DB1.BOL_HPS_Movement_Number);
  PARAMETER(DB1.BOL_Head_LFT);
  PARAMETER(DB1.BOL_Head_EUT_KOA);
  PARAMETER(DB1.BOL_Auth_Gate_Entry_Time);
  PARAMETER(DB1.BOL_Head_Received_Market);
  PARAMETER(DB1.BOL_Unused_Wgt_1);
  PARAMETER(DB1.BOL_Unused_Wgt_2);
  PARAMETER(DB1.BOL_Unused_Wgt_3);
  PARAMETER(DB1.BOL_Unused_Wgt_4);
  PARAMETER(DB1.BOL_Unused_Wgt_5);
  PARAMETER(DB1.BOL_Auth_Gate_Entry_Date);
  PARAMETER(DB1.BOL_Unused_Date_2);
  PARAMETER(DB1.BOL_Unused_Date_3);
  PARAMETER(DB1.BOL_Unused_Date_4);
  PARAMETER(DB1.BOL_Unused_Date_5);
  PARAMETER(DB1.TRK_Trucker_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 EXECUTE FUNCTION(Utl Copy Tattoo Hdr   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1192941;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Buy_Order_Number_USR);
 PARAMETER(PAR.Company);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.TH Payment Type is Carcass Merit
  IF DB1.TH_Payment_Type = 'C';

  // WRK.TH Payment Sts = CND.Sl Carcass Merit
  WRK.TH_Payment_Sts = 'SC';

  // IF DB1.TH Payment Type is Live
  IF DB1.TH_Payment_Type = 'L';

  // WRK.TH Payment Sts = CND.Select Live
  WRK.TH_Payment_Sts = 'SL';

  ENDIF;

  EXECUTE FUNCTION(Create Tattoo Header) TYPE(CRTOBJ) FILE(PKA1CPP)               AB1101743;
  PARAMETER(PAR.Company);
  PARAMETER(PAR.Buy_Order_Number_USR);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(DB1.TH_Group_Reference);
  PARAMETER(DB1.TH_Live_Purchase_UOM);
  PARAMETER(DB1.TH_Live_Purchase_Price);
  PARAMETER(DB1.TH_Live_Gross_Amt);
  PARAMETER(DB1.TH_LIve_Net_Amt);
  PARAMETER(DB1.TH_Resale_UOM);
  PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(DB1.TH_Pricing_Date);
  PARAMETER(DB1.TH_Resale_Spread_Sts);
  PARAMETER(DB1.TH_Dead_On_Arrival);
  PARAMETER(DB1.TH_Head_Received);
  PARAMETER(DB1.TH_Yard_Deads);
  PARAMETER(DB1.TH_Held_Over);
  PARAMETER(DB1.TH_Head_Condemned);
  PARAMETER(DB1.TH_Head_Killed);
  PARAMETER(DB1.TH_Head_Adds);
  PARAMETER(DB1.TH_Head_Accepted);
  PARAMETER(DB1.TH_Live_Wgt);
  PARAMETER(DB1.TH_Adj_Live_Wgt);
  PARAMETER(DB1.TH_Hot_Wgt);
  PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
  PARAMETER(DB1.TH_Tot_Backfat_Inches);
  PARAMETER(DB1.TH_Tot_Light_Reflectance);
  PARAMETER(DB1.TH_Avg_Live_Wgt);
  PARAMETER(DB1.TH_Avg_Hot_Wgt);
  PARAMETER(DB1.TH_Avg_Light_Reflectance);
  PARAMETER(DB1.TH_Avg_Lean_Percent);
  PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
  PARAMETER(DB1.TH_Avg_Backfat);
  PARAMETER(DB1.TH_Std_Yield_Percent);
  PARAMETER(DB1.TH_Actual_Yield);
  PARAMETER(DB1.TH_Adj_Actual_Yield);
  PARAMETER(DB1.TH_Yield_Difference);
  PARAMETER(DB1.TH_Recalc_Live_Wgt);
  PARAMETER(DB1.TH_CM_Market_Price);
  PARAMETER(DB1.TH_CM_Base_Mkt_Price);
  PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
  PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(DB1.TH_CM_Base_Carcass_Value);
  PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
  PARAMETER(DB1.TH_Deduction_Amt);
  PARAMETER(DB1.TH_Total_Net_WO_Adds);
  PARAMETER(DB1.TH_Carcass_Net_Amt);
  PARAMETER(DB1.TH_Additions_Amt);
  PARAMETER(DB1.TH_Payment_Gross);
  PARAMETER(DB1.Th_Payment_Net_Amt);
  PARAMETER(DB1.TH_AP_Voucher_Document#);
  PARAMETER(DB1.TH_Freight_Amount);
  PARAMETER(DB1.TH_Accrual_Amount);
  PARAMETER(DB1.TH_Fixed_Cost_Amount);
  PARAMETER(DB1.TH_Calc_Net_Sts);
  PARAMETER(WRK.TH_Payment_Sts);
  PARAMETER(DB1.TH_Header_Error_Sts);
  PARAMETER(DB1.TH_Detail_Error_Sts);
  PARAMETER(DB1.TH_Kill_Balancing_Sts);
  PARAMETER(DB1.TH_Bal_to_Kill_Gen);
  PARAMETER(DB1.TH_Commission_A_P_Voucher);
  PARAMETER(DB1.TH_Voucher_Payment_Date);
  PARAMETER(DB1.TH_User_Error_Override);
  PARAMETER(DB1.TH_Held_Over_Record);
  PARAMETER(DB1.TH_Sex);
  PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
  PARAMETER(DB1.TH_Commission_Paid_Date);
  PARAMETER(DB1.TH_Actual_Check_Date);
  PARAMETER(DB1.TH_Shipped_Weight);
  PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(DB1.TH_FFLI);
  PARAMETER(DB1.TH_Kill_Product_Value);
  PARAMETER(DB1.TH_Cut_Product_Value);
  PARAMETER(DB1.TH_Render_Product_Value);
  PARAMETER(DB1.TH_Head_Excluded);
  PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(DB1.TH_CM_Gross_Live_CWT);
  PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
  PARAMETER(DB1.TH_Source_Type);
  PARAMETER(DB1.TH_Scale_Ticket_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  PARAMETER(DB1.TH_HPS_Movement_Ref_#);
  PARAMETER(DB1.TH_Source_Code);
  PARAMETER(DB1.TH_Hog_Class_Type);
  PARAMETER(DB1.TH_Posted_to_HPS_Flag);
  PARAMETER(DB1.TH_Schedule_Kill_Shift);
  PARAMETER(DB1.TH_Shift_Held_Over);
  PARAMETER(DB1.TH_State);
  PARAMETER(DB1.TH_Unused_Code);
  PARAMETER(DB1.TH_Unused_Sts_2_Pos);
  PARAMETER(DB1.TH_Commission_Status);
  PARAMETER(DB1.TH_Paid_2_Week_Avg_Y_N);
  PARAMETER(DB1.TH_Unused_Sts_1_Pos_3);
  PARAMETER(DB1.TH_DOA_Weight);
  PARAMETER(DB1.TH_Avg_Lean_EXC_ADD);
  PARAMETER(DB1.TH_HPS_Farm_Site);
  PARAMETER(DB1.TH_Shift_Held_Over_Head);
  PARAMETER(DB1.TH_Sorting_Amount);
  PARAMETER(DB1.TH_Head_Identified);
  PARAMETER(DB1.TH_Percent_Identified);
  PARAMETER(DB1.TH_Percent_Accepted);
  PARAMETER(DB1.TH_Head_Adjusted_LN);
  PARAMETER(DB1.TH_PHA_Head_Adds);
  PARAMETER(DB1.TH_PHA_Add_Type);
  PARAMETER(DB1.TH_PHA_Average_Type);
  PARAMETER(DB1.TH_PHA_Add_Reason);
  PARAMETER(DB1.TH_PHA_Yield_Percent);
  PARAMETER(DB1.TH_PHA_Lean_Prm_Crc_CWT);
  PARAMETER(DB1.TH_VC_Gross_Value_HD);
  PARAMETER(DB1.TH_Excluded_Gross_Value);
  PARAMETER(DB1.TH_Avg_Lean);
  PARAMETER(DB1.TH_Broken_Back_Hd_Count);
  PARAMETER(DB1.TH_Hot_Scl_Upload_Time);
  PARAMETER(DB1.TH_Unused_Nbr_4);
  PARAMETER(DB1.TH_Excluded_Carc_Val);
  PARAMETER(DB1.TH_Excluded_Premium);
  PARAMETER(DB1.TH_Unused_Nbr_7);
  PARAMETER(DB1.TH_Unused_Nbr_8);
  PARAMETER(DB1.TH_Unused_Nbr_9);
  PARAMETER(DB1.TH_Unused_Nbr_10);
  PARAMETER(DB1.TH_Break_Even_Price_CWT);
  PARAMETER(DB1.TH_Meat_Value_Factor_Amt);
  PARAMETER(DB1.TH_Yld_Parm_Adj_Yield);
  PARAMETER(DB1.TH_PHA_Sort_Disc_Fctr);
  PARAMETER(DB1.TH_Avg_Loin_Eye_2_dec);
  PARAMETER(DB1.TH_Avg_Backfat_2_Dec);
  PARAMETER(DB1.TH_HITCH_Old_Pay_Net_Amt);
  PARAMETER(DB1.TH_MPR_Sort_Loss);
  PARAMETER(DB1.TH_Unused_Nbr_19);
  PARAMETER(DB1.TH_Unused_Nbr_20);
  PARAMETER(DB1.TH_Cold_Scl_Upload_Date);
  PARAMETER(DB1.TH_Cold_Scl_Upload_Time);
  PARAMETER(DB1.TH_Head_LFT);
  PARAMETER(DB1.TH_Head_EUT_KOA);
  PARAMETER(DB1.TH_Unused_Date_5);
  PARAMETER(DB1.TH_Unused_Sts_1);
  PARAMETER(DB1.TH_Unused_Sts_2);
  PARAMETER(DB1.TH_Unused_Sts_3);
  PARAMETER(DB1.TH_Unused_Sts_4);
  PARAMETER(DB1.TH_Unused_Sts_5);
  PARAMETER(DB1.TH_Unused_Sts_6);
  PARAMETER(DB1.TH_Unused_Sts_7);
  PARAMETER(DB1.TH_Unused_Sts_8);
  PARAMETER(DB1.DF_Defect_Code);
  PARAMETER(DB1.THP_Process_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.HB_Buyer_Code);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.HC_Class_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
   {
    //?Execute internal function

    //?1/10/96  HPE056   Allow payment type to be update based on
    //?                  what the payment status is at the time this
    //?                  tattoo is being updated
   }

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

   // DB1.TH User Error Override = CND.No
   DB1.TH_User_Error_Override = 'N';

   EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
   PARAMETER(DB1.TH_Payment_Sts);
   PARAMETER(DB1.TH_Payment_Type);
   {
    //?Execute internal function

    EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
    {
     //?Execute internal function

     //?1/10/96  HPE056   Allow payment type to be update based on
     //?                  what the payment status is at the time this
     //?                  tattoo is being updated
    }

    //?Function Description:  If there are any fields that need to be
    //?Changed/Created during the Change functions or Create function
    //?Presently: Payment Type
    //?Add this routine to all of the change objects and create object
    //?that update the Payment Type
    CASE;

    // IF PAR.TH Payment Sts is Live anything
    IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

    // PAR.TH Payment Type = CND.Live
    PAR.TH_Payment_Type = 'L';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.TH Payment Type = CND.Carcass Merit
    PAR.TH_Payment_Type = 'C';

    ENDIF;

   }

  }

 }

 EXECUTE FUNCTION(Utl Copy Tattoo ST    RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1193004;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Buy_Order_Number_USR);
 PARAMETER(PAR.Company);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Tattoo Scale Tkt  CR) TYPE(CRTOBJ) FILE(PKB3CPP)           AB1113769;
  PARAMETER(PAR.Company);
  PARAMETER(PAR.Buy_Order_Number_USR);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(DB1.TST_Sequence_Number);
  PARAMETER(DB1.TST_Head);
  PARAMETER(DB1.TST_Wgt);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(DB1.TST_Wgt_Time);
  PARAMETER(DB1.TST_Wgt_Hour);
  PARAMETER(DB1.TST_Last_Zero_Date);
  PARAMETER(DB1.TST_Last_Zero_Time);
  PARAMETER(DB1.TST_Record_Created_Status);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 EXECUTE FUNCTION(Utl Copy Eval Trans   RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1192885;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Buy_Order_Number_USR);
 PARAMETER(PAR.Company);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
  PARAMETER(PAR.Company);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(DB1.ET_Scale_Sequence_Number);
  PARAMETER(DB1.ET_Carcass_Number);
  PARAMETER(DB1.ET_Carcass_Number_Insert);
  PARAMETER(DB1.ET_Tattoo_Number);
  PARAMETER(DB1.ET_Lot);
  PARAMETER(DB1.ET_Shift);
  PARAMETER(DB1.ET_Hot_Wgt);
  PARAMETER(DB1.ET_Backfat_Thickness_Inch);
  PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
  PARAMETER(DB1.ET_Lean_Percent_NPPC);
  PARAMETER(DB1.ET_Backfat_Thickness_MM);
  PARAMETER(DB1.ET_Loineye_Depth_MM);
  PARAMETER(DB1.ET_Light_Reflectance_MM);
  PARAMETER(DB1.ET_Lean_Percent_FOM);
  PARAMETER(DB1.ET_Light_Reflectance);
  PARAMETER(DB1.ET_Trim_Area);
  PARAMETER(DB1.ET_Carcass_Sex);
  PARAMETER(DB1.ET_Error_Sts);
  PARAMETER(DB1.ET_Record_Add_Del_Sts);
  PARAMETER(DB1.ET_Record_Created_W_Avg);
  PARAMETER(DB1.ET_Record_Created_Status);
  PARAMETER(DB1.ET_User_Error_Override);
  PARAMETER(DB1.ET_Adjust_Add_Type);
  PARAMETER(DB1.ET_Broken_Back_Sts);
  PARAMETER(DB1.ET_Unused_Sts_2);
  PARAMETER(DB1.ET_Adjust_Add_Source);
  PARAMETER(DB1.ET_Unused_Sts_4);
  PARAMETER(DB1.ET_Unused_Sts_5);
  PARAMETER(PAR.Company);
  PARAMETER(PAR.Buy_Order_Number_USR);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  PARAMETER(DB1.RU_Date);
  PARAMETER(DB1.RU_Time);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 EXECUTE FUNCTION(Utl Copy Carc Dtl     RT) TYPE(RTVOBJ) FILE(PKB1CPP)           AB1194982;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Buy_Order_Number_USR);
 PARAMETER(PAR.Company);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Carcass Detail    CR) TYPE(CRTOBJ) FILE(PKB1CPP)           AB1104737;
  PARAMETER(PAR.Company);
  PARAMETER(PAR.Buy_Order_Number_USR);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(DB1.CD_Scale_Sequence_Number);
  PARAMETER(DB1.CD_Carcass_Number);
  PARAMETER(DB1.CD_Carcass_Number_Insert);
  PARAMETER(DB1.CD_Record_Add_Del_Sts);
  PARAMETER(DB1.CD_Sort_Loss);
  PARAMETER(DB1.CD_STD_Yield);
  PARAMETER(DB1.CD_Carcass_Hot_Weight);
  PARAMETER(DB1.CD_Base_Carcass_CWT);
  PARAMETER(DB1.CD_Crc_Value_Per_CWT);
  PARAMETER(DB1.CD_Base_Carc_Value);
  PARAMETER(DB1.CD_Crc_Value_$_Per_Hd);
  PARAMETER(DB1.CD_Lean_Percent);
  PARAMETER(DB1.CD_Lean_Premium_CWT);
  PARAMETER(DB1.CD_Lean_Premium_$_Per_Hd);
  PARAMETER(DB1.CD_Gross_Value_Per_CWT);
  PARAMETER(DB1.CD_Gross_Value_$_Per_HD);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(DB1.CD_Kill_Time);
  PARAMETER(DB1.CD_Shift);
  PARAMETER(DB1.CD_Carcass_Activity_Sts);
  PARAMETER(DB1.CD_Backfat_Thickness_Inch);
  PARAMETER(DB1.CD_Loin_Eye_Depth_Inch);
  PARAMETER(DB1.CD_Light_Reflectance);
  PARAMETER(DB1.CD_Trim_Area);
  PARAMETER(DB1.CD_Carcass_Sex);
  PARAMETER(DB1.CD_FFLI);
  PARAMETER(DB1.CD_Record_Created_W_Avg);
  PARAMETER(DB1.CD_Record_Created_Status);
  PARAMETER(DB1.CD_LOT);
  PARAMETER(DB1.CD_User_Error_Override);
  PARAMETER(DB1.CD_Backfat_Thickness_MM);
  PARAMETER(DB1.CD_Loin_Eye_Depth_MM);
  PARAMETER(DB1.CD_Light_Reflectance_MM);
  PARAMETER(DB1.CD_Lean_Percent_MM);
  PARAMETER(DB1.CD_Source_Type);
  PARAMETER(DB1.CD_Payment_Type);
  PARAMETER(DB1.CD_CA_Sort_Loss);
  PARAMETER(DB1.CD_CA_Std_Yield);
  PARAMETER(DB1.CD_CA_Base_Carcass_CWT);
  PARAMETER(DB1.CD_CA_Crc_Value_Per_CWT);
  PARAMETER(DB1.CD_CA_Base_Carc_Value);
  PARAMETER(DB1.CD_CA_Crc_Value_$_Per_Hd);
  PARAMETER(DB1.CD_CA_Lean_Premium_CWT);
  PARAMETER(DB1.CD_CA_Lean_Premium_$_P_Hd);
  PARAMETER(DB1.CD_CA_Gross_Value_Per_CWT);
  PARAMETER(DB1.CD_CA_Gross_Value_$_P_Hd);
  PARAMETER(DB1.CD_Adjust_Add_Type);
  PARAMETER(DB1.CD_Producer_Loc_Farm);
  PARAMETER(DB1.CD_Loin_Eye_Inch_2_dec);
  PARAMETER(DB1.CD_Backfat_Inch_2_dec);
  PARAMETER(DB1.CD_Meat_Value_Factor);
  PARAMETER(DB1.CD_Lean_Prem_Disc_Factor);
  PARAMETER(DB1.CD_Fixed_Cost_Factor);
  PARAMETER(DB1.CD_MPR_Sort_Loss);
  PARAMETER(DB1.CD_Meat_Value_Factor_Amt);
  PARAMETER(DB1.CD_Fixed_Cost_Factor_Amt);
  PARAMETER(DB1.CD_Gross_Before_Sort_CWT);
  PARAMETER(DB1.CD_Gross_Before_Sort_HD);
  PARAMETER(DB1.CD_Broken_Back_Sts);
  PARAMETER(DB1.CD_Adjust_Add_Source);
  PARAMETER(DB1.CD_Unused_Sts_3);
  PARAMETER(DB1.CD_Unused_Sts_4);
  PARAMETER(DB1.CD_Unused_Sts_5);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.SR_Source_Code);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Added);
    PARAMETER(PAR.RS_Time_Added);

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 EXECUTE FUNCTION(Utl Copy Exp Rate     rt) TYPE(RTVOBJ) FILE(PKDDCPP)           AB1195150;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Company);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Create Company Kill Expen) TYPE(CRTOBJ) FILE(PKDDCPP)          AB1162661;
  PARAMETER(PAR.Company);
  PARAMETER(DB1.CE_Expense_Code);
  PARAMETER(PAR.Kill_Date_Usr);
  PARAMETER(DB1.CKE_Unit_of_Measure);
  PARAMETER(DB1.CKE_Unit_Amount);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 // PAR.Kill Date Usr = PAR.Kill Date Usr + CON.1 *DAYS
 PAR.Kill_Date_Usr = DATEINCR(PAR.Kill_Date_Usr 1 'DY' 1111100 'NONE' 'N' 1);

 ENDDO;

}


