      *****************  RPG PROGRAM HEADING  ***********************
     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF124 - Margin: Maintain WIP Usage
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     07/12/07
      *
      * FUNCTION: This function is used to maintain the WIP Usage.
      *
      *           Restrictors:
      *               Week-ending date
      *               Warehouse company (hardcoded to 360)
      *               Warehouse code    (hardcoded to GP1)
      *               Item type         (hardcoded to WP)
      *
      *           This program does not create/delete records.
      *           It fills the subfile with existing Inventory Stock Closing records
      *           and allows the user to key in WIP Usage Pounds and udpate the record.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 08/24/07  LeAnne Ramsey
      *           Conditioned the display of the F9=Accept key; it will no
      *           longer appear if the subfile is empty.
      *
      * 08/14/08  LeAnne Ramsey
      *           Triumph will now be entering data. So, we replaced the
      *           hardcoding of Company/Warehouse (360/GP1) with retrieval
      *           logic based on User ID.
      *
      * 12/23/09  LeAnne Ramsey
      *           Added and then (when Tom Dye was done) removed temporary code to let
      *           Tom Dye enter the Triumph data (Company 960/warehouse SJ1). None of
      *           the 4 Triumph people who have the Menu Option were available. The temp
      *           code hardcoded 960/SJ1 when the user was OKTDYE.
      *
      * 11/15/12  LeAnne Ramsey (E2337)
      *           Recompile only.
      *           Rose had to increase the price/cwt field sizes in PPBTCPP-Inventory
      *           Value file and PPBSCPP-Inventory Stock Closing.
      *
      * 02/24/17  Danny Nguyen (R9083)
      *           New Seaboard Triumph Foods (STF) will need to be valued on its own and NOT
      *           included in company 360/960 Valuation and NOT included in the Triumph Fees
      *           & Payments Weekly Revenue processing.
      *           Changed process when option 'M' (Maintenance) is taken on TF424 screen, to get
      *           Grouping code based on User Profile Company. This change will allow Company 440
      *           to also utilize this process.
      *           Added Company Values (PDKMREL1) file to get Grouping code. Inventory Value File
      *           (ppbtcpl1) keys have changed to have Grouping code as the first key hence
      *           changed key02 key list to also check by Grouping.
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd124    cf   e             workstn sfile(tf124s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fcadrrel1  if   e           k disk
      *  User profile control
      *
      *
     Fcadtrel0  if   e           k disk
      *  Application profile
      *
      *
R9083Fpdkmrel1  if   e           k disk
R9083 *  Company Values
      *
     Fombyrel1  if   e           k disk
      *  Item default
      *
      *
     Fppbscpl0  uf   e           k disk
      *  Inventory stock closing
      *
      *
     Fppbscpl1  if   e           k disk
      *  Inventory stock closing
      *
      *
     Fppbtcpl1  uf   e           k disk
      *  Inventory values
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D wkflow          s                   like(idflow)
     D rtncd           s              2
     D svrrn1          s                   like(hdrrn1)
R9083D wkinvgrp        s              1    inz(*blank)
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Control fields
      *
     D wkapcd          s                   like(dtdncd) inz('I/C   ')
R9083D wkcvcd          s                   like(kmv8cd) inz('IVFGROUP')
      *
      *
      * Parms
      *
     D xxwedt          s                   like(bsaidx)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * Mainline
      ****************************************************************
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear/fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Perform operator I/O for screen 1
      *---------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Set the page of the subfile to display
      *
     C                   select
     C                   when      wkflow = 0 and error = 0
     C                   z-add     1             hdpag1
      *
     C                   when      reset = yes and wkflow <= hdrrn1
     C                   z-add     wkflow        hdpag1
     C                   endsl
      *
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     tf124k1
     C                   write     tf124ec
     C                   exfmt     tf124c1
      *
      * Set off the error indicators in the subfile
      *
     C                   exsr      $sfloff
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   z-add     idflow        wkflow
     C                   move      no            reset
      *
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      reset = yes
     C                   eval      routne = set1
      *
     C                   when      norecs = yes
     C                   eval      routne = set1
      *
     C                   when      *in09 = *on                                  F9-accept
     C                   exsr      $edit1
     C                   if        error = 0
     C                   exsr      $accept
     C                   endif
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User pressed ENTER
      *
     C                   exsr      $edit1
     C                   movel     scrn1         routne
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Subroutine to edit input fields on screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
     C                   exsr      $eds1
      *
     C                   movel     scrn1         routne
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Edit subfile on screen 1
      *---------------------------------------------------------------
      *
     C     $eds1         begsr
      *
     C                   z-add     0             c1wiplb
      *
      * Read/process all changed subfile records
      *
     C                   dou       *in80 = *on                                  Do process
     C                   readc     tf124s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set on MDT
      * Set off error indicators in the subfile
      *
     C                   seton                                        85
     C                   exsr      $sfloff
      *
      * Validate:
      *   1) WIP usage pounds
      *
     C                   exsr      $wiplb
      *
      * Update subfile
     C                   update    tf124s1
     C                   exsr      $sfloff
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      * Set MDT
     C                   setoff                                       85
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * WIP usage lbs
      *---------------------------------------------------------------
      *
      * Validations:
      *  The value can be negative, positive, zero.
      *  If the value is NOT zero, there msut be an Inventory Value record.
      *
     C     $wiplb        begsr
      *
     C                   if        d1wiplb <> 0                                 If some lbs
      *
      ** R9083 - Inventory Value File will now RST by Group/WeekEnd/Item.
     C     key02         chain     ppbtcpl1                           92
     C                   if        *in92 = *off                                 If there
     C                   add       d1wiplb       c1wiplb
     C                   else
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08128'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If there
     C                   endif                                                  If some lbs
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear the subfile on screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   tf124s1
     C                   seton                                        83        sflclr
     C                   write     tf124c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile on screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Always load the entire subfile.
      * Set position in file
      *
     C     key01         setll     ppbscpl1
      *
     C                   dou       *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load the subfile on screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on                                  Do fill
     C     key01         reade     ppbscpl1                               82
     C                   if        *in82 = *off and bsw1sx = 'WP '              If not EOF
      *
     C                   z-add     bsejc7        d1prcd
     C                   z-add     bsm6wg        d1wiplb
     C                   z-add(h)  bsmqwg        d1mqwg
     C                   z-add(h)  bsmswg        d1mswg
     C                   z-add(h)  bsnawg        d1nawg
     C                   z-add(h)  bsm5wg        d1m5wg
      *
      * Accumulate WIP Usage Pounds for control record total
      *
     C                   add       d1wiplb       c1wiplb
      *
      * Retrieve the Item Description
      *
     C     d1prcd        chain     ombyrel1                           92
     C                   if        *in92 = *off
     C                   eval      d1prds  = byavna
     C                   else
     C                   eval      d1prds = 'Unknown'
     C                   endif
      *
     C                   add       1             hdrrn1
      *
     C                   seton                                        85
     C                   write     tf124s1
     C                   exsr      $sfloff
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
     C                   seton                                        89
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   setoff                                       89
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Set off all subfile indicators
      *----------------------------------------------------------------
      *
     C     $sfloff       begsr
      *
     C                   setoff                                       31
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * User took F9 to accept his entries
      *--------------------------------------------------------------------------------------
      *
     C     $accept       begsr
      *
     C                   dou       *in80 = *on                                  Do loop
     C                   readc     tf124s1                                80
     C                   if        *in80 = *off                                 If read
      *
     C     key03         chain     ppbscpl0                           92
     C                   if        *in92 = *off                                 If not there
     C                   z-add     d1wiplb       bsm6wg
     C                   update    @bscpa5
     C                   endif
      *
     C                   endif                                                  If read
     C                   enddo                                                  Do loop
      *
      * Set next routine
     C                   move      exit          routne
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors
      *---------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Retrieve a Company/Warehouse
      *---------------------------------------------------------------
      *
      * When only Seaboard was entering data, we hardcoded 360/GP1 for
      * Company/Warehouse. When Triumph began entering data, we changed
      * our logic to retrieve a Company/Warehouse based on User Id.
      *
     C     $conowhs      begsr
      *
      * Using the User Id, retrieve the user's "model" from the
      * User Profile Control file.
      *
     C     sdusr         chain     cadrrel1                           92
     C                   if        *in92 = *off                                 If model hit
      *
      * Now, retrieve Company/Warehouse from the Application Profile file
      * using a key of:
      *     1) the Model just retrieved and
      *     2) a hardcoded value of "I/C"
      *
     C     key04         chain     cadtrel0                           92
     C                   if        *in92 = *off                                 If hit
     C                   z-add     dtaic3        c1cono
     C                   move      dtajcd        c1whs
      *
R9083 ** Get Grouping code from Company Values file.
  |  C     key05         chain     pdkmrel1                           92
  |  C                   if        *in92 = *off
  |  C                   movel     kmbxtx        wkinvgrp
R9083C                   endif
      *
     C                   endif                                                  If hit
     C                   endif                                                  If model hit
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    xxwedt
     C                   parm                    c1wemdy
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    xxwedt
     C                   kfld                    c1cono
     C                   kfld                    c1whs
      *
     C     key02         klist
R9083C                   kfld                    wkinvgrp
     C                   kfld                    xxwedt
     C                   kfld                    d1prcd
      *
      *
     C     key03         klist
     C                   kfld                    xxwedt
     C                   kfld                    c1cono
     C                   kfld                    c1whs
     C                   kfld                    d1prcd
      *
      *
     C     key04         klist
     C                   kfld                    drbuvn
     C                   kfld                    wkapcd
      *
      *
R9083C     key05         klist
  |  C                   kfld                    c1cono
R9083C                   kfld                    wkcvcd
      *
      *
      * Retrieve Company/Warehouse
      *
     C                   exsr      $conowhs
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     12            wkplin
     C     wkplin        sub       1             wkrlin
      *
     C                   eval      routne = set1
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
     C                   endsr
      /EJECT
