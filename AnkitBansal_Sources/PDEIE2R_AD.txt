// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDEIE2R
// ?Date: 14.08.2025 Time: 03:31:32
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?Set to Add Mode if no carrier passed in
CASE;

// IF PAR.Carrier Code EQ WRK.BLANK
IF PAR.Carrier_Code = WRK.BLANK;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?***** Change Log and Comments
DO;

//?** 10/27/2009 RMC E00518
//?** Add Federal ID number to the screen
//?** 10/16/2008 LJB FP1166
//?** Add "SSI Download Carrier" flag to the screen. "Y"=Download
//?** this carrier's load information to SSI PowerPro
ENDDO;

//?USER: Initialize detail screen (new record)

//?Default flag values
// DTL.OM Carrier Status = CND.Active
DTL.OM_Carrier_Status = 'A';

// DTL.Certificate of Insurance = CND.no
DTL.Certificate_of_Insurance = 'N';

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(DB1.State_Code);
PARAMETER(DTL.USR_State_Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Status Description = Condition name of DB1.Record Status
DTL.Status_Description = RTVCND(DB1.Record_Status);

// DTL.USR Desc. 10 = Condition name of DTL.SSI Download Flag
DTL.USR_Desc_10 = RTVCND(DTL.SSI_Download_Flag);

//?USER: Process key screen request

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

//?USER: Validate detail screen fields

//?Validate weight ranges
CASE;

// IF 2ND.Weight Range 1 GE 2ND.Weight Range 2
IF 2ND.Unused_Weight_Range_1 >= 2ND.Unused_Weight_Range_2;

// AND 2ND.Weight Range 2 NE WRK.ZERO
AND 2ND.Unused_Weight_Range_2 <> WRK.ZERO;

// Send error message - 'Weight Range is overlapping.'
ERROR(USR2134);
MSGPARM(2ND.Unused_Weight_Range_1);
MSGPARM(2ND.Unused_Weight_Range_2);

//?Validate weight ranges
// IF 2ND.Weight Range 2 GE 2ND.Weight Range 3
IF 2ND.Unused_Weight_Range_2 >= 2ND.Unused_Weight_Range_3;

// AND 2ND.Weight Range 3 NE WRK.ZERO
AND 2ND.Unused_Weight_Range_3 <> WRK.ZERO;

// Send error message - 'Weight Range is overlapping.'
ERROR(USR2134);
MSGPARM(2ND.Unused_Weight_Range_2);
MSGPARM(2ND.Unused_Weight_Range_3);

//?Validate weight ranges
// IF 2ND.Weight Range 3 GE 2ND.Weight Range 4
IF 2ND.Unused_Weight_Range_3 >= 2ND.Unused_Weight_Range_4;

// AND 2ND.Weight Range 4 NE WRK.ZERO
AND 2ND.Unused_Weight_Range_4 <> WRK.ZERO;

// Send error message - 'Weight Range is overlapping.'
ERROR(USR2134);
MSGPARM(2ND.Unused_Weight_Range_3);
MSGPARM(2ND.Unused_Weight_Range_4);

//?Validate weight ranges
// IF 2ND.Weight Range 4 GE 2ND.Weight Range 5
IF 2ND.Unused_Weight_Range_4 >= 2ND.Unused_Weight_Range_5;

// AND 2ND.Weight Range 5 NE WRK.ZERO
AND 2ND.Unused_Weight_Range_5 <> WRK.ZERO;

// Send error message - 'Weight Range is overlapping.'
ERROR(USR2134);
MSGPARM(2ND.Unused_Weight_Range_4);
MSGPARM(2ND.Unused_Weight_Range_5);

//?Validate weight ranges
// IF 2ND.Weight Range 5 GE 2ND.Weight Range 6
IF 2ND.Unused_Weight_Range_5 >= 2ND.Unused_Weight_Range_6;

// AND 2ND.Weight Range 6 NE WRK.ZERO
AND 2ND.Unused_Weight_Range_6 <> WRK.ZERO;

// Send error message - 'Weight Range is overlapping.'
ERROR(USR2134);
MSGPARM(2ND.Unused_Weight_Range_5);
MSGPARM(2ND.Unused_Weight_Range_6);

ENDIF;

//?USER: Validate detail screen relations

EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(DTL.State_Code);
PARAMETER(DTL.USR_State_Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.USR Desc. 10 = Condition name of DTL.SSI Download Flag
DTL.USR_Desc_10 = RTVCND(DTL.SSI_Download_Flag);

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

//?USER: Create DBF record

EXECUTE FUNCTION(CRT OM Carrier         CR) TYPE(CRTOBJ) FILE(OMFFREP)          AC1183268;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Telephone_Number);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.Carrier_Last_Used_Date);
PARAMETER(DTL.Fax_Number);
PARAMETER(DTL.Pallet_Balance);
PARAMETER(DTL.Long_hook_balance);
PARAMETER(DTL.Short_hook_balance);
PARAMETER(DTL.Tub_Balance);
PARAMETER(DTL.OM_Carrier_Status);
PARAMETER(DTL.OM_Carrier_Comments_1);
PARAMETER(DTL.OM_Carrier_Comments_2);
PARAMETER(DTL.AP_Vendor_Number);
PARAMETER(DTL.Home_Phone);
PARAMETER(DTL.Other_Phone);
PARAMETER(2ND.Flat_Rate);
PARAMETER(2ND.Rate_Per_Pound);
PARAMETER(2ND.Unused_Rate_Per_Stop);
PARAMETER(DTL.Miscellaneous_Charges);
PARAMETER(2ND.Unused_Carrier_Rating);
PARAMETER(DTL.Unused_Mile_Range_1);
PARAMETER(DTL.Unused_Mile_Range_2);
PARAMETER(DTL.Unused_Mile_Range_3);
PARAMETER(DTL.Unused_Mile_Range_4);
PARAMETER(DTL.Unused_Mile_Range_5);
PARAMETER(DTL.Unused_Mile_Range_6);
PARAMETER(DTL.Unused_Mile_Rate_1);
PARAMETER(DTL.Unused_Mile_Rate_2);
PARAMETER(DTL.Unused_Mile_Rate_3);
PARAMETER(DTL.Unused_Mile_Rate_4);
PARAMETER(DTL.Unused_Mile_Rate_5);
PARAMETER(DTL.Unused_Mile_Rate_6);
PARAMETER(2ND.Unused_Weight_Range_1);
PARAMETER(2ND.Unused_Weight_Range_2);
PARAMETER(2ND.Unused_Weight_Range_3);
PARAMETER(2ND.Unused_Weight_Range_4);
PARAMETER(2ND.Unused_Weight_Range_5);
PARAMETER(2ND.Unused_Weight_Range_6);
PARAMETER(2ND.Unused_Weight_Rate_1);
PARAMETER(2ND.Unused_Weight_Rate_2);
PARAMETER(2ND.Unused_Weight_Rate_3);
PARAMETER(2ND.Unused_Weight_Rate_4);
PARAMETER(2ND.Unused_Weight_Rate_5);
PARAMETER(2ND.Unused_Weight_Rate_6);
PARAMETER(2ND.Contact_Number);
PARAMETER(2ND.Certificate_of_Insurance);
PARAMETER(2ND.Carrier_Unused_Fld_1);
PARAMETER(2ND.Carrier_Unused_Fld_2);
PARAMETER(2ND.Carrier_DOT_Number);
PARAMETER(2ND.Carrier_Unused_State);
PARAMETER(2ND.Carrier_Unused_Fld_4);
PARAMETER(2ND.Carrier_Unused_Fld_5);
PARAMETER(DTL.Carrier_Fed_ID_Number);
PARAMETER(2ND.Amount_of_Cargo);
PARAMETER(2ND.Amount_of_Liability);
PARAMETER(2ND.Date_of_Expiration);
PARAMETER(DTL.SSI_Download_Flag);
PARAMETER(DTL.unused_status_2);
PARAMETER(DTL.unused_status_3);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 // Call program Rtv Init Car w/TierStp XF.
 CALL PROGRAM(Rtv Init Car w/TierStp XF) ('PMCUXFR');
 PARAMETER(DB1.Carrier_Code);

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG OM Carrier         CH) TYPE(CHGOBJ) FILE(OMFFREP)          AC1183269;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Telephone_Number);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.Carrier_Last_Used_Date);
PARAMETER(DTL.Fax_Number);
PARAMETER(DTL.Pallet_Balance);
PARAMETER(DTL.Long_hook_balance);
PARAMETER(DTL.Short_hook_balance);
PARAMETER(DTL.Tub_Balance);
PARAMETER(DTL.OM_Carrier_Status);
PARAMETER(DTL.OM_Carrier_Comments_1);
PARAMETER(DTL.OM_Carrier_Comments_2);
PARAMETER(DTL.AP_Vendor_Number);
PARAMETER(DTL.Home_Phone);
PARAMETER(DTL.Other_Phone);
PARAMETER(2ND.Flat_Rate);
PARAMETER(2ND.Rate_Per_Pound);
PARAMETER(2ND.Unused_Rate_Per_Stop);
PARAMETER(DTL.Miscellaneous_Charges);
PARAMETER(2ND.Unused_Carrier_Rating);
PARAMETER(DTL.Unused_Mile_Range_1);
PARAMETER(DTL.Unused_Mile_Range_2);
PARAMETER(DTL.Unused_Mile_Range_3);
PARAMETER(DTL.Unused_Mile_Range_4);
PARAMETER(DTL.Unused_Mile_Range_5);
PARAMETER(DTL.Unused_Mile_Range_6);
PARAMETER(DTL.Unused_Mile_Rate_1);
PARAMETER(DTL.Unused_Mile_Rate_2);
PARAMETER(DTL.Unused_Mile_Rate_3);
PARAMETER(DTL.Unused_Mile_Rate_4);
PARAMETER(DTL.Unused_Mile_Rate_5);
PARAMETER(DTL.Unused_Mile_Rate_6);
PARAMETER(2ND.Unused_Weight_Range_1);
PARAMETER(2ND.Unused_Weight_Range_2);
PARAMETER(2ND.Unused_Weight_Range_3);
PARAMETER(2ND.Unused_Weight_Range_4);
PARAMETER(2ND.Unused_Weight_Range_5);
PARAMETER(2ND.Unused_Weight_Range_6);
PARAMETER(2ND.Unused_Weight_Rate_1);
PARAMETER(2ND.Unused_Weight_Rate_2);
PARAMETER(2ND.Unused_Weight_Rate_3);
PARAMETER(2ND.Unused_Weight_Rate_4);
PARAMETER(2ND.Unused_Weight_Rate_5);
PARAMETER(2ND.Unused_Weight_Rate_6);
PARAMETER(2ND.Contact_Number);
PARAMETER(2ND.Certificate_of_Insurance);
PARAMETER(2ND.Carrier_Unused_Fld_1);
PARAMETER(2ND.Carrier_Unused_Fld_2);
PARAMETER(2ND.Carrier_DOT_Number);
PARAMETER(2ND.Carrier_Unused_State);
PARAMETER(2ND.Carrier_Unused_Fld_4);
PARAMETER(2ND.Carrier_Unused_Fld_5);
PARAMETER(DTL.Carrier_Fed_ID_Number);
PARAMETER(2ND.Amount_of_Cargo);
PARAMETER(2ND.Amount_of_Liability);
PARAMETER(2ND.Date_of_Expiration);
PARAMETER(DTL.SSI_Download_Flag);
PARAMETER(DTL.unused_status_2);
PARAMETER(DTL.unused_status_3);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

