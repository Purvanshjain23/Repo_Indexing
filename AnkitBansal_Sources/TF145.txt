      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF145
      * TITLE:       Margin: Revise Product Split
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     10/10/06
      *
      * FUNCTION: Uses an edit record format to add/change/delete records.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 12/01/06  LeAnne Ramsey
      *           Added "period" parm to call to generic calendar program
      *           TF811.
      *
      * 02/19/07  LeAnne Ramsey
      *           Recompile only; changed message line to line 22.
      *
      * 05/02/07  LeAnne Ramsey
      *           Recompile only. Synon file PPAMREP was changed.
      /eject
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd145    cf   e             workstn infds(iofeed)
      *
      *
     Fombyrel1  if   e           k disk
      *    Item default
      *
      *
     Fome8rel0  if   e           k disk
      *    Product type
      *
      *
     Fppamrel1  if   e           k disk
      *    TF classification
      *
      *
     Ftfp099    if   e           k disk
      *   Function control
      *
      *
     Ftfl045d   if   e           k disk    rename(psrec:psrecd) prefix(p1)
      *   Product splits
      *
      *
     Ftfp045    uf a e           k disk
      *   Product splits
      *
      /eject
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2
     D action          s                   like(mode)
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Control fields
      *
     D svwedt          s                   like(psefdt)
     D svcbdt          s                   like(fncbdt)
     D activefl        s              1
      *
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
     D wkdt            s              8  0
      *
      *
      * Parms
      *
     D xxwedt          s                   like(psefdt)
     D xxsatdt         s              8  0
     D xxdt            s              8  0
     D xxyr            s              4  0
     D xxpe            s              4  0
     D xxwk            s              2  0
      *
      *
     D xxprcd          s                   like(d1prcd)
     D xxprds          s                   like(d1prds)
     D xxalphprcd      s              7
      *
     D xxistycd        s                   like(d1istycd)
     D xxistyds        s                   like(d1istyds)
     D xxalphtycd      s              3
      *
     D xxtfclcd        s                   like(d1tfclcd)
     D xxtfclds        s                   like(d1tfclds)
      *
     D xxtfcgcd        s                   like(d1tfcgcd)
     D xxtfcgds        s                   like(d1tfcgds)
      *
     D xxaist          s                   like(d1aist)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /eject
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     update        $upd1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /eject
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * If incoming mode is REVISE or DELETE, then retrieve the database
      * record.  Do not lock the record.  Typically, in DELETE mode, these
      * values will not be displayed. However, if there is an error on the
      * delete action, the panel will be displayed with messages.
      *
     C                   select
     C                   when      mode = create                                WH create
     C                   z-add     0             d1prcd
     C                   move      *blank        d1prds
     C                   z-add     0             d1spltpc
     C                   move      *blank        d1tfcgcd
     C                   move      *blank        d1tfcgds
     C                   move      *blank        d1tfclcd
     C                   move      *blank        d1tfclds
     C                   z-add     0             d1istycd
     C                   move      *blank        d1istyds
      *
     C                   when      mode = revise or mode = delete               WH revise/delete
     C     key01         chain(n)  tfp045                             92
     C                   if        *in92 = *on                                  If no hit
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   else
      *
     C                   z-add     psprcd        d1prcd
     C                   z-add     psspltpc      d1spltpc
     C                   z-add     psistycd      d1istycd
     C                   move      pstfcgcd      d1tfcgcd
     C                   move      pstfclcd      d1tfclcd
     C                   move      psaist        d1aist
      *
      * Flip Effective Date to MMDDYY format
      *
     C     *iso          test(d)                 psefdt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      psefdt        wkisodate
     C     *mdy          move      wkisodate     d1efmdy
     C                   z-add     d1efmdy       d1wemdy
     C                   else
     C                   z-add     0             d1efmdy
     C                   z-add     0             d1wemdy
     C                   endif                                                  If OK date
      *
      * Retrieve Descriptions
      *
     C                   exsr      $desc
     C                   endif                                                  If no hit
     C                   endsl
      *
      * If the user is deleting and there were no errors when retrieving the
      * record, go on to the update routine without displaying the screen.
      * Otherwise, display the screen.
      *
     C                   if        error = 0 and action = delete                If no error
     C                   eval      routne = update
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Set indicators to control input/output fields and available
      * function keys.
     C                   exsr      $ind
      *
      *
      * Write screen 1 to CRT
      *
     C                   write     tf145k1
     C                   write     tf145ec
     C                   exfmt     tf145r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      *
      * Reset action to be equal to the incoming mode.  This is required
      * in case the user took F11-Delete and got an error on the
      * deletion and now needs to be able to change the record and take
      * an action other than delete
      *
     C                   eval      action = mode
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4=prompt
     C                   exsr      $f4s1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      routne = set1
      *
     C                   when      *in11 = *on or mode = delete                 F11-delete
     C                   eval      action = delete
     C                   eval      routne = update
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = edit1
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set indicators to control/protect screen fields
      *----------------------------------------------------------------
      *
     C     $ind          begsr
      *
     C                   select
     C                   when      mode = revise
     C                   seton                                        60
     C                   if        xxwedt < svcbdt
     C                   seton                                        63
     C                   endif
      *
     C                   when      mode = create
     C                   seton                                        61
      *
     C                   when      mode = delete
     C                   seton                                        62
     c                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * *IN62 will be on if the record the user is trying to access has
      * been deleted by another user.  So, only perform the edits for the
      * fields on the screen if the indicator is off
      *
     C                   if        *in62 = *off                                 If here
      *
     C     'MARGIN    '  chain     tfp099                             92
     C                   if        *in92 = *off                                 If hit
      *
      * In Create Mode, validate:
      *   1) Effective date
      *   2) Product code
      *
     C                   if        mode = create
     C                   exsr      $efmdy
     C                   exsr      $prcd
     C                   endif
      *
      * Always validate:
      *   1) split percent
      *   2) Item structure type code
      *   3) TF class group code
      *   4) TF classification code
      *   5) Active/inactive status
      *   6) Last check to see if Margin Close is running
      *
     C                   exsr      $spltpc
     C                   exsr      $istycd
     C                   exsr      $tfcgcd
     C                   exsr      $tfclcd
     C                   exsr      $aist
     C                   exsr      $last
     C                   endif                                                  If hit
     C                   endif                                                  If here
      *
      * If there are no errors, attempt the write/update; otherwise,
      * redisplay the screen.  If a record has been deleted out from
      * under the user (*IN62 is ON), then the error message will be
      * issued in the update subroutine.  So, always perform this code.
      *
     C                   if        error = 0
     C                   exsr      $upd1
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Effective Date (in CREATE mode only)
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) must be a valid date
      *  3) must be on/after the Week-beginning Date of the Current "Margin" week.
      *
     C     $efmdy        begsr
      *
     C                   z-add     0             d1wemdy
     C                   z-add     0             svwedt
      *
     C                   select
     C                   when      d1efmdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1efmdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1efmdy                92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and continue editing.
      *
     C     *mdy          move      d1efmdy       wkisodate
     C                   move      wkisodate     wkdt
      *
      * Date must be on/after the Beginning Date of the Current Week.
      *
     C                   if        wkdt < svcbdt                                If prior
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08101'
     C                   endif
     C                   else
      *
      * The date is not too early; so, continue editing.
      * Retrieve Saturday week-ending date associated with the date
      * entered.
     C                   call      'TF811'
     C                   parm      wkdt          xxdt
     C                   parm      0             xxsatdt
     C                   parm      0             xxyr
     C                   parm      0             xxpe
     C                   parm      0             xxwk
      *
      * Get returned 'week-ending date' into MMDDYY format.
      *
     C     *iso          test(d)                 xxsatdt                92
     C                   if        *in92 = *on                                  If bad Saturday
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09229'
     C                   endif
     C                   else
      *
     C                   z-add     xxsatdt       svwedt
     C                   move      xxsatdt       wkisodate
     C     *mdy          move      wkisodate     d1wemdy
     C                   endif                                                  If bad Saturday
     C                   endif                                                  If prior
     C                   endif                                                  If bad date
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Product Code   (in CREATE mode only)
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) must exist in the Item master
      *  3) the product/week-ending date cannot already exist in the Product Split file
      *
     C     $prcd         begsr
      *
     C                   select
     C                   when      d1prcd = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1prcd < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
      * Product must exist in the Item Default file
      *
     C     d1prcd        chain     ombyrel1                           92
     C                   if        *in92 = *on                                  If invalid
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08006'     mgid(e)
     C                   clear                   mgw
     C                   move      d1prcd        xxalphprcd
     C                   movea     xxalphprcd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   else
      *
     C                   eval      d1prds  = byavna
      *
      * The Product/Week-ending Date cannot already exist in the Product Split file.
      *
     C                   if        *in30 = *off                                 If date OK
     C     key01         chain(n)  tfp045                             92
     C                   if        *in92 = *off
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08102'
     C                   endif
     C                   endif
     C                   endif                                                  If date OK
      *
     C                   endif                                                  If invalid
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Split Percent
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) must be greater than 0
      *  2) cannot be greater than 100
      *
     C     $spltpc       begsr
      *
     C                   select
     C                   when      d1spltpc = 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1spltpc < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
      *
     C                   when      d1spltpc > 100
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09041'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Item Structure Type Code
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) cannot be negative
      *  3) must exist in the Product Type file
      *
     C     $istycd       begsr
      *
     C                   move      *blank        d1istyds
      *
     C                   select
     C                   when      d1istycd = 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
      *
     C                   when      d1istycd < 0
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1istycd      chain     ome8rel0                           92
     C                   if        *in92 = *off                                 If ok
     C                   move(p)   e8dctx        d1istyds
     C                   else
      *
     C                   seton                                        33
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08003'     mgid(e)
     C                   clear                   mgw
     C                   move      d1istycd      xxalphtycd
     C                   movea     xxalphtycd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate TF Class Group Code
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) must be a valid value
      *
     C     $tfcgcd       begsr
      *
     C                   move      *blank        d1tfcgds
      *
     C                   select
     C                   when      d1tfcgcd = *blank
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C                   call      'TF804'
     C                   parm      d1tfcgcd      xxtfcgcd
     C     d1tfcgds      parm      *blank        xxtfcgds
      *
     C                   if        xxtfcgds = *blank                            If invalid
     C                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08013'     mgid(e)
     C                   endif
     C                   endif                                                  If invalid
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate TF Classification Code
      *------------------------------------------------------------------------------------
      *
      * Validations:
      *  1) required
      *  2) must exist in the TF Classification file
      *
     C     $tfclcd       begsr
      *
     C                   move      *blank        d1tfclds
      *
     C                   select
     C                   when      d1tfclcd = *blank
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   endif
     C                   other
      *
     C     d1tfclcd      chain     ppamrel1                           92
     C                   if        *in92 = *off                                 If ok
     C                   eval      d1tfclds = amq0na
     C                   else
      *
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS08012'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1tfclcd      mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If ok
     C                   endsl
      *
     C                   endsr
      /eject
      *------------------------------------------------------------------------------------
      * Validate Active/Inactive Status
      *------------------------------------------------------------------------------------
      *
     C     $aist         begsr
      *
     C                   select
     C                   when      d1aist <> 'A' and d1aist <> 'I'
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09105'
     C                   endif
      *
      * There can only be 1 "active" record for a Product. (Only make this
      * check when you have a valid date.)
      *
     C                   when      d1aist = 'A' and *in30 = *off
      *
     C     d1prcd        setll     tfl045d
     C                   move      no            activefl
      *
     C                   dou       *in91 = *on or activefl = yes                Do loop
     C     d1prcd        reade     tfl045d                                91
     C                   if        *in91 = *off and p1psefdt <> svwedt          If not EOF
     C                   move      yes           activefl
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
      *
     C                   if        activefl = yes                               If toomany
     C                   seton                                        36
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08086'
     C                   endif
     C                   endif                                                  If toomany
      *
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Make 1 final check
      *-------------------------------------------------------------------------------------
      *
      * We don't want users changing a split record if a "Final"
      * Margin Close is running that will be using that split record.
      *
     C     $last         begsr
      *
     C                   if        fnsbfl = yes and
     C                             fnpfcd = 'F' and
     C                             svwedt <= fncedt and
     C                             error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08100'
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Product Code
     C                   select
     C                   when      fld = 'D1PRCD' and *in61 = *on
     C                   seton                                        51
     C                   call      'TF504'
     C                   parm      0             xxprcd
     C                   parm      *blank        xxprds
      *
     C                   if        xxprcd <> 0
     C                   z-add     xxprcd        d1prcd
     C                   eval      d1prds = xxprds
     C                   endif
      *
      * Item Structure Type
      *
     C                   when      fld = 'D1ISTYCD' and *in63 = *off
     C                   call      'TF501'
     C                   parm      0             xxistycd
     C                   parm      *blank        xxistyds
     C                   seton                                        53
     C                   if        xxistycd <> 0
     C                   z-add     xxistycd      d1istycd
     C                   movel(p)  xxistyds      d1istyds
     C                   endif
      *
      * TF Class Group
      *
     C                   when      fld = 'D1TFCGCD' and *in63 = *off
     C                   call      'TF506'
     C                   parm      *blank        xxtfcgcd
     C                   parm      *blank        xxtfcgds
     C                   seton                                        54
     C                   if        xxtfcgcd <> *blank
     C                   move      xxtfcgcd      d1tfcgcd
     C                   move      xxtfcgds      d1tfcgds
     C                   endif
      *
      * TF Classification
      *
     C                   when      fld = 'D1TFCLCD' and *in63 = *off
     C                   call      'TF505'
     C                   parm      *blank        xxtfclcd
     C                   parm      *blank        xxtfclds
     C                   seton                                        55
     C                   if        xxtfclcd <> *blank
     C                   move      xxtfclcd      d1tfclcd
     C                   move      xxtfclds      d1tfclds
     C                   endif
      *
      * Active/inactive status
      *
     C                   when      fld = 'D1AIST'
     C                   seton                                        56
     C                   call      'HP512'
     C                   parm      *blank        xxaist
      *
     C                   if        xxaist <> *blank
     C                   move      xxaist        d1aist
     C                   endif
      *
      * F4 not valid for this field...issue message
      *
     C                   other
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Write/update/delete record in database file
      *----------------------------------------------------------------
      *
     C     $upd1         begsr
      *
      * We do not have to perform deletion integrity checks because we do not even
      * let the user into this program if they cannot delete.
      *
     C                   if        action = delete
     C                   endif
      *
      * If user action is revising or deleting, determine that the
      * record he is accessing still exists prior to attempting to
      * update.  Lock the record for update.
      *
     C                   if        error = 0 and                                If OK
     C                             (action = delete or action = revise)
     C     key01         chain     tfp045                             92
     C                   if        *in92 = *on                                  If not found
     C                   seton                                        62
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09008'
     C                   endif
     C                   endif                                                  If not found
     C                   endif                                                  If OK
      *
      *
      * If there are no errors, delete, revise or create the record.
      *
     C                   if        error = 0                                    If no error
      *
     c                   select
     C                   when      action = delete
     C                   delete    psrec
     C                   other
      *
      * Move DSPF fields to database file fields
      *
     C                   z-add     svwedt        psefdt
     C                   z-add     d1prcd        psprcd
     C                   z-add     d1spltpc      psspltpc
     C                   move      d1tfcgcd      pstfcgcd
     C                   move      d1tfclcd      pstfclcd
     C                   z-add     d1istycd      psistycd
     C                   move      d1aist        psaist
      *
     C                   if        action = create
     C                   write     psrec
     C                   else
     C                   update    psrec
     C                   endif                                                  If create
     C                   endsl
     C                   endif                                                  If no error
      *
      * Always redisplay when:
      *     1) there are errors
      *     2) you are creating records
      *
     C                   select
     C                   when      error > 0
     C                   movel     scrn1         routne
      *
     C                   when      mode = create
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09040'
     C                   eval      routne = set1
     C                   movel     set1          routne
     C                   other
      *
     C                   eval      rtncd = '00'
     C                   movel     exit          routne
     C                   endsl
      *
     C                   endsr
      /eject
      *-------------------------------------------------------------------------------------
      * Write error messages
      *-------------------------------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Set on last record indicator and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        lr
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Retrieve descriptions
      *---------------------------------------------------------------
      *
     C     $desc         begsr
      *
      * Product
      *
     C     d1prcd        chain     ombyrel1                           92
     C                   if        *in92 = *off
     C                   eval      d1prds  = byavna
     C                   else
     C                   eval      d1prds = 'Unknown'
     C                   endif
      *
      *
      * Item structure type
      *
     C     d1istycd      chain     ome8rel0                           92
     C                   if        *in92 = *off                                 If ok
     C                   move(p)   e8dctx        d1istyds
     C                   else
     C                   eval      d1istyds = 'Unknown'
     C                   endif
      *
      * TF Class group
      *
     C                   call      'TF804'
     C                   parm      d1tfcgcd      xxtfcgcd
     C     d1tfcgds      parm      *blank        xxtfcgds
      *
     C                   if        xxtfcgds = *blank
     C                   eval      d1tfcgds = 'Unknown'
     C                   endif
      *
      * TF Classification
      *
     C     d1tfclcd      chain     ppamrel1                           92
     C                   if        *in92 = *off
     C                   eval      d1tfclds = amq0na
     C                   else
     C                   eval      d1tfclds = 'Unknown'
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm Lists
      *
     C     *entry        plist
     C     d1mode        parm                    mode
     C     svwedt        parm                    xxwedt
     C     d1prcd        parm                    xxprcd
     C                   parm                    rtncd
      *
     C                   movel     mode          action
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    d1prcd
     C                   kfld                    svwedt
      *
      *
      * Retrieve the Margin record from the Control file.
      *
     C     'MARGIN    '  chain     tfp099                             92
     C                   if        *in92 = *off                                 If hit
     C                   z-add     fncbdt        svcbdt
      *
      * If in Create mode,
      *   1) Default Status to Active
      *   2) Default the Current End Date from the Function Control "Margin"
      *      record into the Effective Date.
      *
     C                   if        mode = create                                If create
     C                   move      'A'           d1aist
      *
     C                   z-add     fncedt        svwedt
     C                   z-add     fncemdy       d1efmdy
     C                   z-add     fncemdy       d1wemdy
     C                   endif                                                  If create
     C                   endif                                                  If hit
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
