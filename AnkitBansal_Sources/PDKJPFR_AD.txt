// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDKJPFR
// ?Date: 14.08.2025 Time: 12:04:00
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?This will deallocate and reallocate all scheduled orders. C6096
EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(PAR.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(LCL.Production_Day_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


EXECUTE FUNCTION(Rtv Ats ShpDte-21+Sun RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1621711;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.PS_Available_Ship_Date);
PARAMETER(PAR.USR_Day_1);
PARAMETER(PAR.USR_Day_2);
PARAMETER(PAR.USR_Day_3);
PARAMETER(PAR.USR_Day_4);
PARAMETER(PAR.USR_Day_5);
PARAMETER(PAR.USR_Day_6);
PARAMETER(PAR.USR_Day_7);
PARAMETER(PAR.USR_Day_8);
PARAMETER(PAR.USR_Day_9);
PARAMETER(PAR.USR_Day_10);
PARAMETER(PAR.USR_Day_11);
PARAMETER(PAR.USR_Day_12);
PARAMETER(PAR.USR_Day_13);
PARAMETER(PAR.USR_Day_14);
PARAMETER(PAR.USR_Day_15);
PARAMETER(PAR.USR_Day_16);
PARAMETER(PAR.USR_Day_17);
PARAMETER(PAR.USR_Day_18);
PARAMETER(PAR.USR_Day_19);
PARAMETER(PAR.USR_Day_20);
PARAMETER(PAR.USR_Day_21);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.1
 WRK.Count_USR = 1;

 //?USER: Process Data record

 CASE;

 // IF WRK.Count USR is GT 21
 IF WRK.Count_USR > 21;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Move Date
 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 // PAR.USR Day 1 = DB1.Plant Date of Last Order
 PAR.USR_Day_1 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 1  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_1_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 // PAR.USR Day 2 = DB1.Plant Date of Last Order
 PAR.USR_Day_2 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 2  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_2_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 // PAR.USR Day 3 = DB1.Plant Date of Last Order
 PAR.USR_Day_3 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 3  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_3_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Four
 IF WRK.Count_USR = 4;

 // PAR.USR Day 4 = DB1.Plant Date of Last Order
 PAR.USR_Day_4 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 4  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_4_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Five
 IF WRK.Count_USR = 5;

 // PAR.USR Day 5 = DB1.Plant Date of Last Order
 PAR.USR_Day_5 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 5  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_5_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Six
 IF WRK.Count_USR = 6;

 // PAR.USR Day 6 = DB1.Plant Date of Last Order
 PAR.USR_Day_6 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 6  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_6_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Seven
 IF WRK.Count_USR = 7;

 // PAR.USR Day 7 = DB1.Plant Date of Last Order
 PAR.USR_Day_7 = DB1.Post_to_G_L_Date;

 // WRK.Condition Desc. 7  USR = Condition name of DB1.Day of Week
 WRK.Condition_Desc_7_USR = RTVCND(DB1.Day_of_Week);

 //?Move Date
 // IF WRK.Count USR is Eight
 IF WRK.Count_USR = 8;

 // PAR.USR Day 8 = DB1.Plant Date of Last Order
 PAR.USR_Day_8 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Nine
 IF WRK.Count_USR = 9;

 // PAR.USR Day 9 = DB1.Plant Date of Last Order
 PAR.USR_Day_9 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Ten
 IF WRK.Count_USR = 10;

 // PAR.USR Day 10 = DB1.Plant Date of Last Order
 PAR.USR_Day_10 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Eleven
 IF WRK.Count_USR = 11;

 // PAR.USR Day 11 = DB1.Plant Date of Last Order
 PAR.USR_Day_11 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twelve
 IF WRK.Count_USR = 12;

 // PAR.USR Day 12 = DB1.Plant Date of Last Order
 PAR.USR_Day_12 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Thirteen
 IF WRK.Count_USR = 13;

 // PAR.USR Day 13 = DB1.Plant Date of Last Order
 PAR.USR_Day_13 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Fourteen
 IF WRK.Count_USR = 14;

 // PAR.USR Day 14 = DB1.Plant Date of Last Order
 PAR.USR_Day_14 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Fifteen
 IF WRK.Count_USR = 15;

 // PAR.USR Day 15 = DB1.Plant Date of Last Order
 PAR.USR_Day_15 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Sixteen
 IF WRK.Count_USR = 16;

 // PAR.USR Day 16 = DB1.Plant Date of Last Order
 PAR.USR_Day_16 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Seventeen
 IF WRK.Count_USR = 17;

 // PAR.USR Day 17 = DB1.Plant Date of Last Order
 PAR.USR_Day_17 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Eighteen
 IF WRK.Count_USR = 18;

 // PAR.USR Day 18 = DB1.Plant Date of Last Order
 PAR.USR_Day_18 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Nineteen
 IF WRK.Count_USR = 19;

 // PAR.USR Day 19 = DB1.Plant Date of Last Order
 PAR.USR_Day_19 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty
 IF WRK.Count_USR = 20;

 // PAR.USR Day 20 = DB1.Plant Date of Last Order
 PAR.USR_Day_20 = DB1.Post_to_G_L_Date;

 //?Move Date
 // IF WRK.Count USR is Twenty One
 IF WRK.Count_USR = 21;

 // PAR.USR Day 21 = DB1.Plant Date of Last Order
 PAR.USR_Day_21 = DB1.Post_to_G_L_Date;

 ENDIF;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

}


//?USER: Record selection processing

CASE;

// IF PAR.Availability Group Code NE DB1.Availability Group Code
IF PAR.Availability_Group_Code <> DB1.Availability_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PAR.Warehouse Code is Warehouse Code not Blank
IF PAR.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val Item Bal Exist    RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1428561;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

//?USER: Process before print of first page format

MOVE *ALL (To: 1PG From: PAR);

//?Company
CASE;

// IF 1PG.Company Number is Equal to zero
IF X1PG_Company_Number = *ZERO;

// 1PG.Name = CON.*All
X1PG_Name = *All;

//?Company
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?Warehouse type
CASE;

// IF 1PG.Warehouse Type EQ WRK.BLANK 1               USR
IF X1PG_Warehouse_Type = WRK.BLANK_1_USR;

// 1PG.Warehouse Type Desc = CON.*All
X1PG_Warehouse_Type_Desc = *All;

//?Warehouse type
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Warehouse Type Desc = Condition name of 1PG.Warehouse Type
X1PG_Warehouse_Type_Desc = RTVCND(X1PG_Warehouse_Type);

ENDIF;

//?Warehouse
CASE;

// IF 1PG.Warehouse Code is Warehouse Code Blank
IF X1PG_Warehouse_Code = *BLANK;

// 1PG.Warehouse Description = CON.*All
X1PG_Warehouse_Description = *All;

//?Warehouse
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


ENDIF;

//?Availability Group
CASE;

// IF 1PG.Availability Group Code is Blank
IF X1PG_Availability_Group_Code = *BLANK;

// 1PG.Availability Group Desc = CON.*ALL
X1PG_Availability_Group_Desc = *ALL;

//?Availability Group
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(X1PG_Availability_Group_Code);
PARAMETER(X1PG_Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

//?Unit of Measure
CASE;

// IF 1PG.Primary/Load Sts USR is *ALL values
IF X1PG_Primary_Load_Sts_USR = 'P'/'L';

// 1PG.Condition Desc. 1  USR = Condition name of 1PG.Primary/Load Sts USR
X1PG_Condition_Desc_1_USR = RTVCND(X1PG_Primary_Load_Sts_USR);

//?Unit of Measure
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Condition Desc. 1  USR = CON.*All
X1PG_Condition_Desc_1_USR = *All;

ENDIF;

//?Load Size
CASE;

// IF 1PG.Primary/Load Sts USR is Primary
IF X1PG_Primary_Load_Sts_USR = 'P';

// 1PG.Load Size USR = CON.*ZERO
X1PG_Load_Size_USR = *ZERO;

ENDIF;

// 1PG.Condition Desc. 2  USR = Condition name of 1PG.Print Zeros USR
X1PG_Condition_Desc_2_USR = RTVCND(X1PG_Print_Zeros_USR);

//?USER: Print required level headings

// SUPPRESSED PRINT Accounting Company Number header format

// SUPPRESSED PRINT Availability Group Code header format

// SUPPRESSED PRINT Item Display Sequence header format

//?USER: Process before print of detail format

EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(CUR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(WRK.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(WRK.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(WRK.Warehouse_Location);
PARAMETER(WRK.Warehouse_Std_Chill_Time);
PARAMETER(WRK.Warehouse_Chill_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Rtv PA Tot SD-21      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1652232;
PARAMETER(PAR.Warehouse_Type);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.PS_Available_Ship_Date);
PARAMETER(PAR.USR_Day_1);
PARAMETER(PAR.USR_Day_2);
PARAMETER(PAR.USR_Day_3);
PARAMETER(PAR.USR_Day_4);
PARAMETER(PAR.USR_Day_5);
PARAMETER(PAR.USR_Day_6);
PARAMETER(PAR.USR_Day_7);
PARAMETER(PAR.USR_Day_8);
PARAMETER(PAR.USR_Day_9);
PARAMETER(PAR.USR_Day_10);
PARAMETER(PAR.USR_Day_11);
PARAMETER(PAR.USR_Day_12);
PARAMETER(PAR.USR_Day_13);
PARAMETER(PAR.USR_Day_14);
PARAMETER(PAR.USR_Day_15);
PARAMETER(PAR.USR_Day_16);
PARAMETER(PAR.USR_Day_17);
PARAMETER(PAR.USR_Day_18);
PARAMETER(PAR.USR_Day_19);
PARAMETER(PAR.USR_Day_20);
PARAMETER(PAR.USR_Day_21);
PARAMETER(LCL.Day_1_Inventory_USR);
PARAMETER(LCL.Day_2_Inventory_USR);
PARAMETER(LCL.Day_3_Inventory_USR);
PARAMETER(LCL.Day_4_Inventory_USR);
PARAMETER(LCL.Day_5_Inventory_USR);
PARAMETER(LCL.Day_6_Inventory_USR);
PARAMETER(LCL.Day_7_Inventory_USR);
PARAMETER(PAR.Primary_Load_Sts_USR);
PARAMETER(PAR.Load_Size_USR);
PARAMETER(LCL.Day_8_Inventory_USR);
PARAMETER(CUR.Day_1_ATS_Qty_USR);
PARAMETER(CUR.Day_2_ATS_Qty_USR);
PARAMETER(CUR.Day_3_ATS_Qty_USR);
PARAMETER(CUR.Day_4_ATS_Qty_USR);
PARAMETER(CUR.Day_5_ATS_Qty_USR);
PARAMETER(CUR.Day_6_ATS_Qty_USR);
PARAMETER(CUR.Day_7_ATS_Qty_USR);
PARAMETER(CUR.Day_8_ATS_Qty_USR);
PARAMETER(CUR.Day_9_ATS_Qty_USR);
PARAMETER(CUR.Day_10_ATS_Qty_USR);
PARAMETER(CUR.Day_11_ATS_Qty_USR);
PARAMETER(CUR.Day_12_ATS_Qty_USR);
PARAMETER(CUR.Day_13_ATS_Qty_USR);
PARAMETER(CUR.Day_14_ATS_Qty_USR);
PARAMETER(CUR.Day_15_ATS_Qty_USR);
PARAMETER(CUR.Day_16_ATS_Qty_USR);
PARAMETER(CUR.Day_17_ATS_Qty_USR);
PARAMETER(CUR.Day_18_ATS_Qty_USR);
PARAMETER(CUR.Day_19_ATS_Qty_USR);
PARAMETER(CUR.Day_20_ATS_Qty_USR);
PARAMETER(CUR.Day_21_ATS_Qty_USR);
PARAMETER('P');
PARAMETER(CUR.Day_1_Availability_USR);
PARAMETER(CUR.Day_2_Availability_USR);
PARAMETER(CUR.Day_3_Availability_USR);
PARAMETER(CUR.Day_4_Availability_USR);
PARAMETER(CUR.Day_5_Availability_USR);
PARAMETER(CUR.Day_6_Availability_USR);
PARAMETER(CUR.Day_7_Availability_USR);
PARAMETER(CUR.Day_8_Availability_USR);
PARAMETER(CUR.Day_9_Availability_USR);
PARAMETER(CUR.Day_10_Availability_USR);
PARAMETER(CUR.Day_11_Availability_USR);
PARAMETER(CUR.Day_12_Availability_USR);
PARAMETER(CUR.Day_13_Availability_USR);
PARAMETER(CUR.Day_14_Availability_USR);
PARAMETER(CUR.Day_15_Availability_USR);
PARAMETER(CUR.Day_16_Availability_USR);
PARAMETER(CUR.Day_17_Availability_USR);
PARAMETER(CUR.Day_18_Availability_USR);
PARAMETER(CUR.Day_19_Availability_USR);
PARAMETER(CUR.Day_20_Availability_USR);
PARAMETER(CUR.Day_21_Availability_USR);
PARAMETER(CUR.UOM_Primary);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
{
 //?USER: Initialize routine

 //?FP1054 5/20/09  made inventory parms "B"oth, they werent anything before
 MOVE *ALL (To: PAR From: CON);

 // LCL.Status - Y or N = CND.no
 LCL.Status_Y_or_N = 'N';

 //?USER: Process Data record

 //?Check for matching warehouse code and warehouse type
 CASE;

 // IF PAR.Warehouse Code is Warehouse Code Blank
 IF PAR.Warehouse_Code = *BLANK;

 // AND PAR.Warehouse Type is Equal blank
 AND PAR.Warehouse_Type = *BLANK;

 EXECUTE FUNCTION(RTV PA Tot SD-21      IF) TYPE(EXCINTFUN)                      AC1652249;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(DB1.Warehouse_Type);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(PAR.Primary_Load_Sts_USR);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_8_Inventory_USR);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?FP1054 5/20/09 made inventory parms "B"oth, they were Neither
  MOVE *ALL (To: PAR From: CON);

  EXECUTE FUNCTION(Rtv PA In/Sh SD-6     IF) TYPE(EXCINTFUN)                      AC1388774;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  {
   //?Execute internal function

   //?Retrieve Inventory and Scheduled Shipments
   EXECUTE FUNCTION(Rtv PA In/Sh SD-6 WHS RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1376865;
   PARAMETER(PAR.Company_Number);
   PARAMETER('S');
   PARAMETER(JOB.*Job_date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Inventory / Sales if Chilling Time > 0
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calculate Quantity based on Unit Weight or Pieces
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   //?Inventory / Sales if Chilling Time > 0
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate Quantity based on Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   ENDIF;

   //?Total Inventory
   CASE;

   // IF PAR.Avail Dsp/Prt Type USR is Display
   IF PAR.Avail_Dsp_Prt_Type_USR = 'D'/'T';

   // Total Inventory
   PAR.Day_8_Inventory_USR = ( ( ( ( ( PAR.Day_1_Inventory_USR + PAR.Day_2_Inventory_USR )
   + PAR.Day_3_Inventory_USR ) + PAR.Day_4_Inventory_USR ) + PAR.Day_5_Inventory_USR )
   + PAR.Day_6_Inventory_USR ) + PAR.Day_7_Inventory_USR;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv PA Dtl SD-21 WHS  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1652262;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_8_Adjustments_USR);
  PARAMETER(PAR.Day_9_Adjustments_USR);
  PARAMETER(PAR.Day_10_Adjustments_USR);
  PARAMETER(PAR.Day_11_Adjustments_USR);
  PARAMETER(PAR.Day_12_Adjustments_USR);
  PARAMETER(PAR.Day_13_Adjustments_USR);
  PARAMETER(PAR.Day_14_Adjustments_USR);
  PARAMETER(PAR.Day_15_Adjustments_USR);
  PARAMETER(PAR.Day_16_Adjustments_USR);
  PARAMETER(PAR.Day_17_Adjustments_USR);
  PARAMETER(PAR.Day_18_Adjustments_USR);
  PARAMETER(PAR.Day_19_Adjustments_USR);
  PARAMETER(PAR.Day_20_Adjustments_USR);
  PARAMETER(PAR.Day_21_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   //?fp1054 4/28/09 include whse txfr in PROD calc
   // PAR.Status Flag 1  Y/N = CND.No
   PAR.Status_Flag_1_Y_N = 'N';

   // PAR.Status Flag 2  Y/N = CND.No
   PAR.Status_Flag_2_Y_N = 'N';

   // PAR.Status Flag 3  Y/N = CND.No
   PAR.Status_Flag_3_Y_N = 'N';

   // PAR.Status Flag 4  Y/N = CND.no
   PAR.Status_Flag_4_Y_N = 'N';

   // PAR.Status Flag 5  Y/N = CND.No
   PAR.Status_Flag_5_Y_N = 'N';

   // PAR.Status Flag 6  Y/N = CND.No
   PAR.Status_Flag_6_Y_N = 'N';

   // PAR.Status Flag 7  Y/N = CND.No
   PAR.Status_Flag_7_Y_N = 'N';

   // PAR.Status Flag 8  Y/N = CND.No
   PAR.Status_Flag_8_Y_N = 'N';

   // PAR.Status Flag 9  Y/N = CND.No
   PAR.Status_Flag_9_Y_N = 'N';

   // PAR.Status Flag 10 Y/N = CND.No
   PAR.Status_Flag_10_Y_N = 'N';

   // PAR.Status Flag 11 Y/N = CND.No
   PAR.Status_Flag_11_Y_N = 'N';

   // PAR.Status Flag 12 Y/N = CND.No
   PAR.Status_Flag_12_Y_N = 'N';

   // PAR.Status Flag 13 Y/N = CND.No
   PAR.Status_Flag_13_Y_N = 'N';

   // PAR.Status Flag 14 Y/N = CND.No
   PAR.Status_Flag_14_Y_N = 'N';

   // PAR.Status Flag 15 Y/N = CND.No
   PAR.Status_Flag_15_Y_N = 'N';

   // PAR.Status Flag 16 Y/N = CND.No
   PAR.Status_Flag_16_Y_N = 'N';

   // PAR.Status Flag 17 Y/N = CND.No
   PAR.Status_Flag_17_Y_N = 'N';

   // PAR.Status Flag 18 Y/N = CND.No
   PAR.Status_Flag_18_Y_N = 'N';

   // PAR.Status Flag 19 Y/N = CND.No
   PAR.Status_Flag_19_Y_N = 'N';

   // PAR.Status Flag 20 Y/N = CND.No
   PAR.Status_Flag_20_Y_N = 'N';

   // PAR.Status Flag 21 Y/N = CND.No
   PAR.Status_Flag_21_Y_N = 'N';

   //?USER: Process Data record

   //?Quit:  Available Ship Date > Day 21
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(PAR.Status_Flag_8_Y_N);
   PARAMETER(PAR.Status_Flag_11_Y_N);
   PARAMETER(PAR.Status_Flag_9_Y_N);
   PARAMETER(PAR.Status_Flag_10_Y_N);
   PARAMETER(PAR.Status_Flag_12_Y_N);
   PARAMETER(PAR.Status_Flag_13_Y_N);
   PARAMETER(PAR.Status_Flag_14_Y_N);
   PARAMETER(PAR.Status_Flag_15_Y_N);
   PARAMETER(PAR.Status_Flag_16_Y_N);
   PARAMETER(PAR.Status_Flag_17_Y_N);
   PARAMETER(PAR.Status_Flag_18_Y_N);
   PARAMETER(PAR.Status_Flag_19_Y_N);
   PARAMETER(PAR.Status_Flag_20_Y_N);
   PARAMETER(PAR.Status_Flag_21_Y_N);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PS Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   //?Calculate Availability
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calcualte PA w/Unit Weight
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Adjustments_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 8  Y/N = CND.Yes
   PAR.Status_Flag_8_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Adjustments_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 9  Y/N = CND.Yes
   PAR.Status_Flag_9_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Adjustments_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Adjustments_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 11 Y/N = CND.Yes
   PAR.Status_Flag_11_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Adjustments_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 12 Y/N = CND.Yes
   PAR.Status_Flag_12_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Adjustments_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 13 Y/N = CND.Yes
   PAR.Status_Flag_13_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Adjustments_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 14 Y/N = CND.Yes
   PAR.Status_Flag_14_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Adjustments_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 15 Y/N = CND.Yes
   PAR.Status_Flag_15_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Adjustments_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 16 Y/N = CND.Yes
   PAR.Status_Flag_16_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Adjustments_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 17 Y/N = CND.Yes
   PAR.Status_Flag_17_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Adjustments_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 18 Y/N = CND.Yes
   PAR.Status_Flag_18_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Adjustments_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 19 Y/N = CND.Yes
   PAR.Status_Flag_19_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Adjustments_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 20 Y/N = CND.Yes
   PAR.Status_Flag_20_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Adjustments_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 21 Y/N = CND.Yes
   PAR.Status_Flag_21_Y_N = 'Y';

   ENDIF;

   //?Calculate Availability
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate PA w/ Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Adjustments_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 8  Y/N = CND.Yes
   PAR.Status_Flag_8_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Adjustments_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 9  Y/N = CND.Yes
   PAR.Status_Flag_9_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Adjustments_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Adjustments_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 11 Y/N = CND.Yes
   PAR.Status_Flag_11_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Adjustments_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 12 Y/N = CND.Yes
   PAR.Status_Flag_12_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Adjustments_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 13 Y/N = CND.Yes
   PAR.Status_Flag_13_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Adjustments_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 14 Y/N = CND.Yes
   PAR.Status_Flag_14_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Adjustments_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 15 Y/N = CND.Yes
   PAR.Status_Flag_15_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Adjustments_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 16 Y/N = CND.Yes
   PAR.Status_Flag_16_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Adjustments_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 17 Y/N = CND.Yes
   PAR.Status_Flag_17_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Adjustments_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 18 Y/N = CND.Yes
   PAR.Status_Flag_18_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Adjustments_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 19 Y/N = CND.Yes
   PAR.Status_Flag_19_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Adjustments_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 20 Y/N = CND.Yes
   PAR.Status_Flag_20_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Adjustments_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 21 Y/N = CND.Yes
   PAR.Status_Flag_21_Y_N = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(PAR.Status_Flag_8_Y_N);
   PARAMETER(PAR.Status_Flag_11_Y_N);
   PARAMETER(PAR.Status_Flag_9_Y_N);
   PARAMETER(PAR.Status_Flag_10_Y_N);
   PARAMETER(PAR.Status_Flag_12_Y_N);
   PARAMETER(PAR.Status_Flag_13_Y_N);
   PARAMETER(PAR.Status_Flag_14_Y_N);
   PARAMETER(PAR.Status_Flag_15_Y_N);
   PARAMETER(PAR.Status_Flag_16_Y_N);
   PARAMETER(PAR.Status_Flag_17_Y_N);
   PARAMETER(PAR.Status_Flag_18_Y_N);
   PARAMETER(PAR.Status_Flag_19_Y_N);
   PARAMETER(PAR.Status_Flag_20_Y_N);
   PARAMETER(PAR.Status_Flag_21_Y_N);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

  }

 }

 // LCL.Status - Y or N = CND.yes
 LCL.Status_Y_or_N = 'Y';

 //?Check for matching warehouse code and warehouse type
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code is Warehouse Code Blank
 IF PAR.Warehouse_Code = *BLANK;

 // AND PAR.Warehouse Type EQ DB1.Warehouse Type
 AND PAR.Warehouse_Type = DB1.Warehouse_Type;

 EXECUTE FUNCTION(RTV PA Tot SD-21      IF) TYPE(EXCINTFUN)                      AC1652249;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(DB1.Warehouse_Type);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(PAR.Primary_Load_Sts_USR);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_8_Inventory_USR);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?FP1054 5/20/09 made inventory parms "B"oth, they were Neither
  MOVE *ALL (To: PAR From: CON);

  EXECUTE FUNCTION(Rtv PA In/Sh SD-6     IF) TYPE(EXCINTFUN)                      AC1388774;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  {
   //?Execute internal function

   //?Retrieve Inventory and Scheduled Shipments
   EXECUTE FUNCTION(Rtv PA In/Sh SD-6 WHS RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1376865;
   PARAMETER(PAR.Company_Number);
   PARAMETER('S');
   PARAMETER(JOB.*Job_date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Inventory / Sales if Chilling Time > 0
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calculate Quantity based on Unit Weight or Pieces
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   //?Inventory / Sales if Chilling Time > 0
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate Quantity based on Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   ENDIF;

   //?Total Inventory
   CASE;

   // IF PAR.Avail Dsp/Prt Type USR is Display
   IF PAR.Avail_Dsp_Prt_Type_USR = 'D'/'T';

   // Total Inventory
   PAR.Day_8_Inventory_USR = ( ( ( ( ( PAR.Day_1_Inventory_USR + PAR.Day_2_Inventory_USR )
   + PAR.Day_3_Inventory_USR ) + PAR.Day_4_Inventory_USR ) + PAR.Day_5_Inventory_USR )
   + PAR.Day_6_Inventory_USR ) + PAR.Day_7_Inventory_USR;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv PA Dtl SD-21 WHS  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1652262;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_8_Adjustments_USR);
  PARAMETER(PAR.Day_9_Adjustments_USR);
  PARAMETER(PAR.Day_10_Adjustments_USR);
  PARAMETER(PAR.Day_11_Adjustments_USR);
  PARAMETER(PAR.Day_12_Adjustments_USR);
  PARAMETER(PAR.Day_13_Adjustments_USR);
  PARAMETER(PAR.Day_14_Adjustments_USR);
  PARAMETER(PAR.Day_15_Adjustments_USR);
  PARAMETER(PAR.Day_16_Adjustments_USR);
  PARAMETER(PAR.Day_17_Adjustments_USR);
  PARAMETER(PAR.Day_18_Adjustments_USR);
  PARAMETER(PAR.Day_19_Adjustments_USR);
  PARAMETER(PAR.Day_20_Adjustments_USR);
  PARAMETER(PAR.Day_21_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   //?fp1054 4/28/09 include whse txfr in PROD calc
   // PAR.Status Flag 1  Y/N = CND.No
   PAR.Status_Flag_1_Y_N = 'N';

   // PAR.Status Flag 2  Y/N = CND.No
   PAR.Status_Flag_2_Y_N = 'N';

   // PAR.Status Flag 3  Y/N = CND.No
   PAR.Status_Flag_3_Y_N = 'N';

   // PAR.Status Flag 4  Y/N = CND.no
   PAR.Status_Flag_4_Y_N = 'N';

   // PAR.Status Flag 5  Y/N = CND.No
   PAR.Status_Flag_5_Y_N = 'N';

   // PAR.Status Flag 6  Y/N = CND.No
   PAR.Status_Flag_6_Y_N = 'N';

   // PAR.Status Flag 7  Y/N = CND.No
   PAR.Status_Flag_7_Y_N = 'N';

   // PAR.Status Flag 8  Y/N = CND.No
   PAR.Status_Flag_8_Y_N = 'N';

   // PAR.Status Flag 9  Y/N = CND.No
   PAR.Status_Flag_9_Y_N = 'N';

   // PAR.Status Flag 10 Y/N = CND.No
   PAR.Status_Flag_10_Y_N = 'N';

   // PAR.Status Flag 11 Y/N = CND.No
   PAR.Status_Flag_11_Y_N = 'N';

   // PAR.Status Flag 12 Y/N = CND.No
   PAR.Status_Flag_12_Y_N = 'N';

   // PAR.Status Flag 13 Y/N = CND.No
   PAR.Status_Flag_13_Y_N = 'N';

   // PAR.Status Flag 14 Y/N = CND.No
   PAR.Status_Flag_14_Y_N = 'N';

   // PAR.Status Flag 15 Y/N = CND.No
   PAR.Status_Flag_15_Y_N = 'N';

   // PAR.Status Flag 16 Y/N = CND.No
   PAR.Status_Flag_16_Y_N = 'N';

   // PAR.Status Flag 17 Y/N = CND.No
   PAR.Status_Flag_17_Y_N = 'N';

   // PAR.Status Flag 18 Y/N = CND.No
   PAR.Status_Flag_18_Y_N = 'N';

   // PAR.Status Flag 19 Y/N = CND.No
   PAR.Status_Flag_19_Y_N = 'N';

   // PAR.Status Flag 20 Y/N = CND.No
   PAR.Status_Flag_20_Y_N = 'N';

   // PAR.Status Flag 21 Y/N = CND.No
   PAR.Status_Flag_21_Y_N = 'N';

   //?USER: Process Data record

   //?Quit:  Available Ship Date > Day 21
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(PAR.Status_Flag_8_Y_N);
   PARAMETER(PAR.Status_Flag_11_Y_N);
   PARAMETER(PAR.Status_Flag_9_Y_N);
   PARAMETER(PAR.Status_Flag_10_Y_N);
   PARAMETER(PAR.Status_Flag_12_Y_N);
   PARAMETER(PAR.Status_Flag_13_Y_N);
   PARAMETER(PAR.Status_Flag_14_Y_N);
   PARAMETER(PAR.Status_Flag_15_Y_N);
   PARAMETER(PAR.Status_Flag_16_Y_N);
   PARAMETER(PAR.Status_Flag_17_Y_N);
   PARAMETER(PAR.Status_Flag_18_Y_N);
   PARAMETER(PAR.Status_Flag_19_Y_N);
   PARAMETER(PAR.Status_Flag_20_Y_N);
   PARAMETER(PAR.Status_Flag_21_Y_N);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PS Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   //?Calculate Availability
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calcualte PA w/Unit Weight
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Adjustments_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 8  Y/N = CND.Yes
   PAR.Status_Flag_8_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Adjustments_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 9  Y/N = CND.Yes
   PAR.Status_Flag_9_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Adjustments_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Adjustments_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 11 Y/N = CND.Yes
   PAR.Status_Flag_11_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Adjustments_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 12 Y/N = CND.Yes
   PAR.Status_Flag_12_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Adjustments_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 13 Y/N = CND.Yes
   PAR.Status_Flag_13_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Adjustments_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 14 Y/N = CND.Yes
   PAR.Status_Flag_14_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Adjustments_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 15 Y/N = CND.Yes
   PAR.Status_Flag_15_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Adjustments_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 16 Y/N = CND.Yes
   PAR.Status_Flag_16_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Adjustments_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 17 Y/N = CND.Yes
   PAR.Status_Flag_17_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Adjustments_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 18 Y/N = CND.Yes
   PAR.Status_Flag_18_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Adjustments_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 19 Y/N = CND.Yes
   PAR.Status_Flag_19_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Adjustments_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 20 Y/N = CND.Yes
   PAR.Status_Flag_20_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Adjustments_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 21 Y/N = CND.Yes
   PAR.Status_Flag_21_Y_N = 'Y';

   ENDIF;

   //?Calculate Availability
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate PA w/ Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Adjustments_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 8  Y/N = CND.Yes
   PAR.Status_Flag_8_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Adjustments_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 9  Y/N = CND.Yes
   PAR.Status_Flag_9_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Adjustments_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Adjustments_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 11 Y/N = CND.Yes
   PAR.Status_Flag_11_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Adjustments_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 12 Y/N = CND.Yes
   PAR.Status_Flag_12_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Adjustments_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 13 Y/N = CND.Yes
   PAR.Status_Flag_13_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Adjustments_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 14 Y/N = CND.Yes
   PAR.Status_Flag_14_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Adjustments_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 15 Y/N = CND.Yes
   PAR.Status_Flag_15_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Adjustments_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 16 Y/N = CND.Yes
   PAR.Status_Flag_16_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Adjustments_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 17 Y/N = CND.Yes
   PAR.Status_Flag_17_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Adjustments_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 18 Y/N = CND.Yes
   PAR.Status_Flag_18_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Adjustments_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 19 Y/N = CND.Yes
   PAR.Status_Flag_19_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Adjustments_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 20 Y/N = CND.Yes
   PAR.Status_Flag_20_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Adjustments_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 21 Y/N = CND.Yes
   PAR.Status_Flag_21_Y_N = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(PAR.Status_Flag_8_Y_N);
   PARAMETER(PAR.Status_Flag_11_Y_N);
   PARAMETER(PAR.Status_Flag_9_Y_N);
   PARAMETER(PAR.Status_Flag_10_Y_N);
   PARAMETER(PAR.Status_Flag_12_Y_N);
   PARAMETER(PAR.Status_Flag_13_Y_N);
   PARAMETER(PAR.Status_Flag_14_Y_N);
   PARAMETER(PAR.Status_Flag_15_Y_N);
   PARAMETER(PAR.Status_Flag_16_Y_N);
   PARAMETER(PAR.Status_Flag_17_Y_N);
   PARAMETER(PAR.Status_Flag_18_Y_N);
   PARAMETER(PAR.Status_Flag_19_Y_N);
   PARAMETER(PAR.Status_Flag_20_Y_N);
   PARAMETER(PAR.Status_Flag_21_Y_N);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

  }

 }

 // LCL.Status - Y or N = CND.yes
 LCL.Status_Y_or_N = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Warehouse Code EQ DB1.Warehouse Code
 IF PAR.Warehouse_Code = DB1.Warehouse_Code;

 EXECUTE FUNCTION(RTV PA Tot SD-21      IF) TYPE(EXCINTFUN)                      AC1652249;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.PS_Available_Ship_Date);
 PARAMETER(DB1.Warehouse_Type);
 PARAMETER(PAR.Avail_Ship_Date_1_USR);
 PARAMETER(PAR.Avail_Ship_Date_2_USR);
 PARAMETER(PAR.Avail_Ship_Date_3_USR);
 PARAMETER(PAR.Avail_Ship_Date_4_USR);
 PARAMETER(PAR.Avail_Ship_Date_5_USR);
 PARAMETER(PAR.Avail_Ship_Date_6_USR);
 PARAMETER(PAR.Avail_Ship_Date_7_USR);
 PARAMETER(PAR.Avail_Ship_Date_8_USR);
 PARAMETER(PAR.Avail_Ship_Date_9_USR);
 PARAMETER(PAR.Avail_Ship_Date_10_USR);
 PARAMETER(PAR.Avail_Ship_Date_11_USR);
 PARAMETER(PAR.Avail_Ship_Date_12_USR);
 PARAMETER(PAR.Avail_Ship_Date_13_USR);
 PARAMETER(PAR.Avail_Ship_Date_14_USR);
 PARAMETER(PAR.Avail_Ship_Date_15_USR);
 PARAMETER(PAR.Avail_Ship_Date_16_USR);
 PARAMETER(PAR.Avail_Ship_Date_17_USR);
 PARAMETER(PAR.Avail_Ship_Date_18_USR);
 PARAMETER(PAR.Avail_Ship_Date_19_USR);
 PARAMETER(PAR.Avail_Ship_Date_20_USR);
 PARAMETER(PAR.Avail_Ship_Date_21_USR);
 PARAMETER(PAR.Day_1_Inventory_USR);
 PARAMETER(PAR.Day_2_Inventory_USR);
 PARAMETER(PAR.Day_3_Inventory_USR);
 PARAMETER(PAR.Day_4_Inventory_USR);
 PARAMETER(PAR.Day_5_Inventory_USR);
 PARAMETER(PAR.Day_6_Inventory_USR);
 PARAMETER(PAR.Day_7_Inventory_USR);
 PARAMETER(PAR.Day_1_Availability_USR);
 PARAMETER(PAR.Day_2_Availability_USR);
 PARAMETER(PAR.Day_3_Availability_USR);
 PARAMETER(PAR.Day_4_Availability_USR);
 PARAMETER(PAR.Day_5_Availability_USR);
 PARAMETER(PAR.Day_6_Availability_USR);
 PARAMETER(PAR.Day_7_Availability_USR);
 PARAMETER(PAR.Day_8_Availability_USR);
 PARAMETER(PAR.Day_9_Availability_USR);
 PARAMETER(PAR.Day_10_Availability_USR);
 PARAMETER(PAR.Day_11_Availability_USR);
 PARAMETER(PAR.Day_12_Availability_USR);
 PARAMETER(PAR.Day_13_Availability_USR);
 PARAMETER(PAR.Day_14_Availability_USR);
 PARAMETER(PAR.Day_15_Availability_USR);
 PARAMETER(PAR.Day_16_Availability_USR);
 PARAMETER(PAR.Day_17_Availability_USR);
 PARAMETER(PAR.Day_18_Availability_USR);
 PARAMETER(PAR.Day_19_Availability_USR);
 PARAMETER(PAR.Day_20_Availability_USR);
 PARAMETER(PAR.Day_21_Availability_USR);
 PARAMETER(PAR.Primary_Load_Sts_USR);
 PARAMETER(PAR.Load_Size_USR);
 PARAMETER(PAR.Day_8_Inventory_USR);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
 {
  //?Execute internal function

  //?FP1054 5/20/09 made inventory parms "B"oth, they were Neither
  MOVE *ALL (To: PAR From: CON);

  EXECUTE FUNCTION(Rtv PA In/Sh SD-6     IF) TYPE(EXCINTFUN)                      AC1388774;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_7_Inventory_USR);
  PARAMETER(PAR.Day_8_Inventory_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  {
   //?Execute internal function

   //?Retrieve Inventory and Scheduled Shipments
   EXECUTE FUNCTION(Rtv PA In/Sh SD-6 WHS RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1376865;
   PARAMETER(PAR.Company_Number);
   PARAMETER('S');
   PARAMETER(JOB.*Job_date);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?Inventory / Sales if Chilling Time > 0
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calculate Quantity based on Unit Weight or Pieces
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Unit Weight or Pieces
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Unt Wgt IF) TYPE(EXCINTFUN)                      AC1389158;
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    ENDIF;

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    CASE;

    // IF PAR.Piece Count Item is Not Yes
    IF PAR.Piece_Count_Item = *BLANK/'N';

    // AND PAR.Unit Weight is Greater than zero
    AND PAR.Unit_Weight > *ZERO;

    //?06/24/09 FP1054:  Moved calc for non-piece count here.
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Weight_Inv_On_Hand + PAR.PS_Weight_Inv_Adj )
    / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Fresh Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Reserved
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Reserved
    PAR.Quantity_Sales_USR = ( PAR.PS_Weight_Prod_Allocated + PAR.PS_Weight_Inv_Allocated )
    / PAR.Unit_Weight 'H';

    ENDIF;

    // Sched Shipments (ie.SALE)
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Weight_Ship_Cut_Adj
    / PAR.Unit_Weight 'H' );

    //?Calculate Inventory/Reserved/Shipments/Ship Cut Adjustment/Sales
    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    //?06/24/09 FP1054:  Calcualte Inventory by Pieces
    // Inventory On-Hand
    PAR.Quantity_Inventory_USR = ( PAR.PS_Pieces_Inv_On_Hand + PAR.PS_Pieces_Inv_Adj ) / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) + 'H';

    //?Reserved (Sales)
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    //?Reserved (Sales)
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Inv Alloc
    PAR.Quantity_Sales_USR = PAR.PS_Weight_Inv_Allocated / PAR.Unit_Weight 'H';

    // Inv Alloc + Prod Alloc
    PAR.Quantity_Sales_USR = PAR.Quantity_Sales_USR + ( PAR.PS_Pieces_Prod_Allocated / (
    PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // PAR.Quantity Sched Ship USR = PAR.Quantity Scheduled SUM
    PAR.Quantity_Sched_Ship_USR = PAR.Quantity_Scheduled_SUM;

    // Comp:Ship Cut Adj(No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( PAR.PS_Pieces_Ship_Cut_Adj /
    ( PAR.Pieces_Per_Bag * PAR.Bags_Per_Unit ) 'H' );

    ENDIF;

    // Compute: Quantity Avail
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   //?Inventory / Sales if Chilling Time > 0
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate Quantity based on Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_1_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 2 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_2_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 3 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_3_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 4 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_4_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 5 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_5_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 6 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_6_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   //?Calculate Quantity based on Load Size
   // IF PAR.Avail Ship Date 7 USR EQ JOB.*Job date
   IF PAR.Avail_Ship_Date_7_USR = JOB.*Job_date;

   EXECUTE FUNCTION(Clc Inv/Sls w/Load Sz IF) TYPE(EXCINTFUN)                      AC1389177;
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_7_Inventory_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.PS_Weight_Inv_On_Hand);
   PARAMETER(PAR.PS_Pieces_Inv_On_Hand);
   PARAMETER(PAR.PS_Weight_Inv_Adj);
   PARAMETER(PAR.PS_Pieces_Inv_Adj);
   PARAMETER(PAR.PS_Weight_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Pieces_Ship_Cut_Adj);
   PARAMETER(PAR.PS_Weight_Prod_Allocated);
   PARAMETER(PAR.PS_Pieces_Prod_Allocated);
   PARAMETER(PAR.PS_Weight_Inv_Allocated);
   PARAMETER(PAR.PS_Pieces_Inv_Allocated);
   PARAMETER(PAR.PS_Weight_Ordered);
   PARAMETER(PAR.PS_Weight_Sched_Shipment);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   {
    //?Execute internal function

    //?---- 02/21/11 PKD Calculate Weight based on Unit Weight. ----
    //?OVERRIDE: Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // AND PAR.Pieces Per Bag is GT Zero
    AND PAR.Pieces_Per_Bag > *ZERO;

    // AND PAR.Bags Per Unit is GT Zero
    AND PAR.Bags_Per_Unit > *ZERO;

    // PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = ( PAR.PS_Pieces_Inv_On_Hand / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = ( PAR.PS_Pieces_Inv_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = ( PAR.PS_Pieces_Inv_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = ( PAR.PS_Pieces_Prod_Allocated / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    // PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = ( PAR.PS_Pieces_Ship_Cut_Adj / ( PAR.Pieces_Per_Bag
    * PAR.Bags_Per_Unit ) * 'H' ) * PAR.Unit_Weight 'H';

    //?OVERRIDE: Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.PS Weight Inv On-Hand = PAR.PS Weight Inv On-Hand
    LCL.PS_Weight_Inv_On_Hand = PAR.PS_Weight_Inv_On_Hand;

    // LCL.PS Weight Inv Adj = PAR.PS Weight Inv Adj
    LCL.PS_Weight_Inv_Adj = PAR.PS_Weight_Inv_Adj;

    // LCL.PS Weight Inv Allocated = PAR.PS Weight Inv Allocated
    LCL.PS_Weight_Inv_Allocated = PAR.PS_Weight_Inv_Allocated;

    // LCL.PS Weight Prod Allocated = PAR.PS Weight Prod Allocated
    LCL.PS_Weight_Prod_Allocated = PAR.PS_Weight_Prod_Allocated;

    // LCL.PS Weight Ship Cut Adj = PAR.PS Weight Ship Cut Adj
    LCL.PS_Weight_Ship_Cut_Adj = PAR.PS_Weight_Ship_Cut_Adj;

    ENDIF;

    //?-------------------------------------------------------------
    //?Scheduled Shipments
    CASE;

    // IF PAR.Avail Dsp/Prt Type USR is Display Detail
    IF PAR.Avail_Dsp_Prt_Type_USR = 'D';

    // OR PAR.Avail Dsp/Prt Type USR is Print Detail
    OR PAR.Avail_Dsp_Prt_Type_USR = 'L';

    EXECUTE FUNCTION(Rtv Sch Shps Cur Dte  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425200;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(JOB.*Job_date);
    PARAMETER(PAR.Weight_Scheduled_SUM);
    PARAMETER(PAR.Quantity_Scheduled_SUM);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     ENDIF;

    }

    // Scheduled Shipments
    PAR.Quantity_Sched_Ship_USR = PAR.Weight_Scheduled_SUM / PAR.Load_Size_USR;

    ENDIF;

    //?02/21/11 PKD Replaced with LCL context instead of PAR.
    // Inventory
    PAR.Quantity_Inventory_USR = ( LCL.PS_Weight_Inv_On_Hand + LCL.PS_Weight_Inv_Adj )
    / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    CASE;

    // IF PAR.Chilling Time is GT Zero
    IF PAR.Fresh_Chilling_Time > *ZERO;

    // Sales
    PAR.Quantity_Sales_USR = LCL.PS_Weight_Inv_Allocated / PAR.Load_Size_USR;

    //?Sales ----->  RESERVED
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sales
    PAR.Quantity_Sales_USR = ( LCL.PS_Weight_Inv_Allocated + LCL.PS_Weight_Prod_Allocated )
    / PAR.Load_Size_USR;

    ENDIF;

    // Ship Cut Adj (No Dec)
    PAR.Quantity_Adjustment_USR = PAR.Quantity_Adjustment_USR + ( LCL.PS_Weight_Ship_Cut_Adj
    / PAR.Load_Size_USR 'H' );

    // Quantity Available
    PAR.Quantity_Available_USR = ( PAR.Quantity_Inventory_USR + PAR.Quantity_Adjustment_USR )
    - PAR.Quantity_Sales_USR;

   }

   ENDIF;

   ENDIF;

   //?Total Inventory
   CASE;

   // IF PAR.Avail Dsp/Prt Type USR is Display
   IF PAR.Avail_Dsp_Prt_Type_USR = 'D'/'T';

   // Total Inventory
   PAR.Day_8_Inventory_USR = ( ( ( ( ( PAR.Day_1_Inventory_USR + PAR.Day_2_Inventory_USR )
   + PAR.Day_3_Inventory_USR ) + PAR.Day_4_Inventory_USR ) + PAR.Day_5_Inventory_USR )
   + PAR.Day_6_Inventory_USR ) + PAR.Day_7_Inventory_USR;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv PA Dtl SD-21 WHS  RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1652262;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.PS_Available_Ship_Date);
  PARAMETER(PAR.Avail_Ship_Date_1_USR);
  PARAMETER(PAR.Avail_Ship_Date_2_USR);
  PARAMETER(PAR.Avail_Ship_Date_3_USR);
  PARAMETER(PAR.Avail_Ship_Date_4_USR);
  PARAMETER(PAR.Avail_Ship_Date_5_USR);
  PARAMETER(PAR.Avail_Ship_Date_6_USR);
  PARAMETER(PAR.Avail_Ship_Date_7_USR);
  PARAMETER(PAR.Avail_Ship_Date_8_USR);
  PARAMETER(PAR.Avail_Ship_Date_9_USR);
  PARAMETER(PAR.Avail_Ship_Date_10_USR);
  PARAMETER(PAR.Avail_Ship_Date_11_USR);
  PARAMETER(PAR.Avail_Ship_Date_12_USR);
  PARAMETER(PAR.Avail_Ship_Date_13_USR);
  PARAMETER(PAR.Avail_Ship_Date_14_USR);
  PARAMETER(PAR.Avail_Ship_Date_15_USR);
  PARAMETER(PAR.Avail_Ship_Date_16_USR);
  PARAMETER(PAR.Avail_Ship_Date_17_USR);
  PARAMETER(PAR.Avail_Ship_Date_18_USR);
  PARAMETER(PAR.Avail_Ship_Date_19_USR);
  PARAMETER(PAR.Avail_Ship_Date_20_USR);
  PARAMETER(PAR.Avail_Ship_Date_21_USR);
  PARAMETER(PAR.USR_Day_1);
  PARAMETER(PAR.USR_Day_2);
  PARAMETER(PAR.USR_Day_3);
  PARAMETER(PAR.USR_Day_4);
  PARAMETER(PAR.USR_Day_5);
  PARAMETER(PAR.USR_Day_6);
  PARAMETER(PAR.USR_Day_7);
  PARAMETER(PAR.USR_Day_8);
  PARAMETER(PAR.USR_Day_9);
  PARAMETER(PAR.USR_Day_10);
  PARAMETER(PAR.USR_Day_11);
  PARAMETER(PAR.USR_Day_12);
  PARAMETER(PAR.USR_Day_13);
  PARAMETER(PAR.USR_Day_14);
  PARAMETER(PAR.USR_Day_15);
  PARAMETER(PAR.USR_Day_16);
  PARAMETER(PAR.USR_Day_17);
  PARAMETER(PAR.USR_Day_18);
  PARAMETER(PAR.USR_Day_19);
  PARAMETER(PAR.USR_Day_20);
  PARAMETER(PAR.USR_Day_21);
  PARAMETER(PAR.Day_1_Inventory_USR);
  PARAMETER(PAR.Day_2_Inventory_USR);
  PARAMETER(PAR.Day_3_Inventory_USR);
  PARAMETER(PAR.Day_4_Inventory_USR);
  PARAMETER(PAR.Day_5_Inventory_USR);
  PARAMETER(PAR.Day_6_Inventory_USR);
  PARAMETER(PAR.Day_1_Production_USR);
  PARAMETER(PAR.Day_2_Production_USR);
  PARAMETER(PAR.Day_3_Production_USR);
  PARAMETER(PAR.Day_4_Production_USR);
  PARAMETER(PAR.Day_5_Production_USR);
  PARAMETER(PAR.Day_6_Production_USR);
  PARAMETER(PAR.Day_7_Production_USR);
  PARAMETER(PAR.Day_8_Production_USR);
  PARAMETER(PAR.Day_9_Production_USR);
  PARAMETER(PAR.Day_10_Production_USR);
  PARAMETER(PAR.Day_11_Production_USR);
  PARAMETER(PAR.Day_12_Production_USR);
  PARAMETER(PAR.Day_13_Production_USR);
  PARAMETER(PAR.Day_14_Production_USR);
  PARAMETER(PAR.Day_15_Production_USR);
  PARAMETER(PAR.Day_16_Production_USR);
  PARAMETER(PAR.Day_17_Production_USR);
  PARAMETER(PAR.Day_18_Production_USR);
  PARAMETER(PAR.Day_19_Production_USR);
  PARAMETER(PAR.Day_20_Production_USR);
  PARAMETER(PAR.Day_21_Production_USR);
  PARAMETER(PAR.Day_1_Sales_USR);
  PARAMETER(PAR.Day_2_Sales_USR);
  PARAMETER(PAR.Day_3_Sales_USR);
  PARAMETER(PAR.Day_4_Sales_USR);
  PARAMETER(PAR.Day_6_Sales_USR);
  PARAMETER(PAR.Day_7_Sales_USR);
  PARAMETER(PAR.Day_8_Sales_USR);
  PARAMETER(PAR.Day_9_Sales_USR);
  PARAMETER(PAR.Day_11_Sales_USR);
  PARAMETER(PAR.Day_12_Sales_USR);
  PARAMETER(PAR.Day_13_Sales_USR);
  PARAMETER(PAR.Day_14_Sales_USR);
  PARAMETER(PAR.Day_5_Sales_USR);
  PARAMETER(PAR.Day_10_Sales_USR);
  PARAMETER(PAR.Day_15_Sales_USR);
  PARAMETER(PAR.Day_16_Sales_USR);
  PARAMETER(PAR.Day_17_Sales_USR);
  PARAMETER(PAR.Day_18_Sales_USR);
  PARAMETER(PAR.Day_19_Sales_USR);
  PARAMETER(PAR.Day_20_Sales_USR);
  PARAMETER(PAR.Day_21_Sales_USR);
  PARAMETER(PAR.Day_1_Adjustments_USR);
  PARAMETER(PAR.Day_2_Adjustments_USR);
  PARAMETER(PAR.Day_3_Adjustments_USR);
  PARAMETER(PAR.Day_4_Adjustments_USR);
  PARAMETER(PAR.Day_5_Adjustments_USR);
  PARAMETER(PAR.Day_6_Adjustments_USR);
  PARAMETER(PAR.Day_7_Adjustments_USR);
  PARAMETER(PAR.Day_8_Adjustments_USR);
  PARAMETER(PAR.Day_9_Adjustments_USR);
  PARAMETER(PAR.Day_10_Adjustments_USR);
  PARAMETER(PAR.Day_11_Adjustments_USR);
  PARAMETER(PAR.Day_12_Adjustments_USR);
  PARAMETER(PAR.Day_13_Adjustments_USR);
  PARAMETER(PAR.Day_14_Adjustments_USR);
  PARAMETER(PAR.Day_15_Adjustments_USR);
  PARAMETER(PAR.Day_16_Adjustments_USR);
  PARAMETER(PAR.Day_17_Adjustments_USR);
  PARAMETER(PAR.Day_18_Adjustments_USR);
  PARAMETER(PAR.Day_19_Adjustments_USR);
  PARAMETER(PAR.Day_20_Adjustments_USR);
  PARAMETER(PAR.Day_21_Adjustments_USR);
  PARAMETER(PAR.Day_1_Availability_USR);
  PARAMETER(PAR.Day_2_Availability_USR);
  PARAMETER(PAR.Day_3_Availability_USR);
  PARAMETER(PAR.Day_4_Availability_USR);
  PARAMETER(PAR.Day_5_Availability_USR);
  PARAMETER(PAR.Day_6_Availability_USR);
  PARAMETER(PAR.Day_7_Availability_USR);
  PARAMETER(PAR.Day_8_Availability_USR);
  PARAMETER(PAR.Day_9_Availability_USR);
  PARAMETER(PAR.Day_10_Availability_USR);
  PARAMETER(PAR.Day_11_Availability_USR);
  PARAMETER(PAR.Day_12_Availability_USR);
  PARAMETER(PAR.Day_13_Availability_USR);
  PARAMETER(PAR.Day_14_Availability_USR);
  PARAMETER(PAR.Day_15_Availability_USR);
  PARAMETER(PAR.Day_16_Availability_USR);
  PARAMETER(PAR.Day_17_Availability_USR);
  PARAMETER(PAR.Day_18_Availability_USR);
  PARAMETER(PAR.Day_19_Availability_USR);
  PARAMETER(PAR.Day_20_Availability_USR);
  PARAMETER(PAR.Day_21_Availability_USR);
  PARAMETER(PAR.Primary_Load_Sts_USR);
  PARAMETER(PAR.Load_Size_USR);
  PARAMETER(PAR.Day_1_Sched_Shipments_USR);
  PARAMETER(PAR.Day_2_Sched_Shipments_USR);
  PARAMETER(PAR.Day_3_Sched_Shipments_USR);
  PARAMETER(PAR.Day_4_Sched_Shipments_USR);
  PARAMETER(PAR.Day_5_Sched_Shipments_USR);
  PARAMETER(PAR.Day_6_Sched_Shipments_USR);
  PARAMETER(PAR.Day_7_Sched_Shipments_USR);
  PARAMETER(PAR.Day_8_Sched_Shipments_USR);
  PARAMETER(PAR.Day_9_Sched_Shipments_USR);
  PARAMETER(PAR.Day_10_Sched_Shipment_USR);
  PARAMETER(PAR.Day_11_Sched_Shipment_USR);
  PARAMETER(PAR.Day_12_Sched_Shipment_USR);
  PARAMETER(PAR.Day_13_Sched_Shipment_USR);
  PARAMETER(PAR.Day_14_Sched_Shipment_USR);
  PARAMETER(PAR.Day_15_Sched_Shipment_USR);
  PARAMETER(PAR.Day_16_Sched_Shipment_USR);
  PARAMETER(PAR.Day_17_Sched_Shipment_USR);
  PARAMETER(PAR.Day_18_Sched_Shipment_USR);
  PARAMETER(PAR.Day_19_Sched_Shipment_USR);
  PARAMETER(PAR.Day_20_Sched_Shipment_USR);
  PARAMETER(PAR.Day_21_Sched_Shipment_USR);
  PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Fresh_Chilling_Time);
  PARAMETER(PAR.Piece_Count_Item);
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(PAR.Bags_Per_Unit);
  {
   //?USER: Initialize routine

   //?fp1054 4/28/09 include whse txfr in PROD calc
   // PAR.Status Flag 1  Y/N = CND.No
   PAR.Status_Flag_1_Y_N = 'N';

   // PAR.Status Flag 2  Y/N = CND.No
   PAR.Status_Flag_2_Y_N = 'N';

   // PAR.Status Flag 3  Y/N = CND.No
   PAR.Status_Flag_3_Y_N = 'N';

   // PAR.Status Flag 4  Y/N = CND.no
   PAR.Status_Flag_4_Y_N = 'N';

   // PAR.Status Flag 5  Y/N = CND.No
   PAR.Status_Flag_5_Y_N = 'N';

   // PAR.Status Flag 6  Y/N = CND.No
   PAR.Status_Flag_6_Y_N = 'N';

   // PAR.Status Flag 7  Y/N = CND.No
   PAR.Status_Flag_7_Y_N = 'N';

   // PAR.Status Flag 8  Y/N = CND.No
   PAR.Status_Flag_8_Y_N = 'N';

   // PAR.Status Flag 9  Y/N = CND.No
   PAR.Status_Flag_9_Y_N = 'N';

   // PAR.Status Flag 10 Y/N = CND.No
   PAR.Status_Flag_10_Y_N = 'N';

   // PAR.Status Flag 11 Y/N = CND.No
   PAR.Status_Flag_11_Y_N = 'N';

   // PAR.Status Flag 12 Y/N = CND.No
   PAR.Status_Flag_12_Y_N = 'N';

   // PAR.Status Flag 13 Y/N = CND.No
   PAR.Status_Flag_13_Y_N = 'N';

   // PAR.Status Flag 14 Y/N = CND.No
   PAR.Status_Flag_14_Y_N = 'N';

   // PAR.Status Flag 15 Y/N = CND.No
   PAR.Status_Flag_15_Y_N = 'N';

   // PAR.Status Flag 16 Y/N = CND.No
   PAR.Status_Flag_16_Y_N = 'N';

   // PAR.Status Flag 17 Y/N = CND.No
   PAR.Status_Flag_17_Y_N = 'N';

   // PAR.Status Flag 18 Y/N = CND.No
   PAR.Status_Flag_18_Y_N = 'N';

   // PAR.Status Flag 19 Y/N = CND.No
   PAR.Status_Flag_19_Y_N = 'N';

   // PAR.Status Flag 20 Y/N = CND.No
   PAR.Status_Flag_20_Y_N = 'N';

   // PAR.Status Flag 21 Y/N = CND.No
   PAR.Status_Flag_21_Y_N = 'N';

   //?USER: Process Data record

   //?Quit:  Available Ship Date > Day 21
   CASE;

   // IF DB1.PS Available Ship Date GT PAR.Avail Ship Date 21 USR
   IF DB1.PS_Available_Ship_Date > PAR.Avail_Ship_Date_21_USR;

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(PAR.Status_Flag_8_Y_N);
   PARAMETER(PAR.Status_Flag_11_Y_N);
   PARAMETER(PAR.Status_Flag_9_Y_N);
   PARAMETER(PAR.Status_Flag_10_Y_N);
   PARAMETER(PAR.Status_Flag_12_Y_N);
   PARAMETER(PAR.Status_Flag_13_Y_N);
   PARAMETER(PAR.Status_Flag_14_Y_N);
   PARAMETER(PAR.Status_Flag_15_Y_N);
   PARAMETER(PAR.Status_Flag_16_Y_N);
   PARAMETER(PAR.Status_Flag_17_Y_N);
   PARAMETER(PAR.Status_Flag_18_Y_N);
   PARAMETER(PAR.Status_Flag_19_Y_N);
   PARAMETER(PAR.Status_Flag_20_Y_N);
   PARAMETER(PAR.Status_Flag_21_Y_N);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

   QUIT;

   ENDIF;

   CASE;

   // IF DB1.PS Available Ship Date GE JOB.*Job date
   IF DB1.PS_Available_Ship_Date >= JOB.*Job_date;

   //?Calculate Availability
   CASE;

   // IF PAR.Primary/Load Sts USR is Primary
   IF PAR.Primary_Load_Sts_USR = 'P';

   // AND PAR.Unit Weight is Greater than zero
   AND ( PAR.Unit_Weight > *ZERO;

   // OR PAR.Piece Count Item is yes
   OR PAR.Piece_Count_Item = 'Y' );

   //?Calcualte PA w/Unit Weight
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Adjustments_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 8  Y/N = CND.Yes
   PAR.Status_Flag_8_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Adjustments_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 9  Y/N = CND.Yes
   PAR.Status_Flag_9_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Adjustments_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Adjustments_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 11 Y/N = CND.Yes
   PAR.Status_Flag_11_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Adjustments_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 12 Y/N = CND.Yes
   PAR.Status_Flag_12_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Adjustments_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 13 Y/N = CND.Yes
   PAR.Status_Flag_13_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Adjustments_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 14 Y/N = CND.Yes
   PAR.Status_Flag_14_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Adjustments_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 15 Y/N = CND.Yes
   PAR.Status_Flag_15_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Adjustments_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 16 Y/N = CND.Yes
   PAR.Status_Flag_16_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Adjustments_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 17 Y/N = CND.Yes
   PAR.Status_Flag_17_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Adjustments_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 18 Y/N = CND.Yes
   PAR.Status_Flag_18_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Adjustments_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 19 Y/N = CND.Yes
   PAR.Status_Flag_19_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Adjustments_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 20 Y/N = CND.Yes
   PAR.Status_Flag_20_Y_N = 'Y';

   //?Calcualte PA w/Unit Weight
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Unit Weight  XF.
   CALL PROGRAM(Clc PA w/Unit Weight  XF) ('PDYEXFR');
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Adjustments_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(PAR.UOM_Primary);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);

   // PAR.Status Flag 21 Y/N = CND.Yes
   PAR.Status_Flag_21_Y_N = 'Y';

   ENDIF;

   //?Calculate Availability
   // IF PAR.Primary/Load Sts USR is Load Size
   IF PAR.Primary_Load_Sts_USR = 'L';

   // AND PAR.Load Size USR is GT Zero
   AND PAR.Load_Size_USR > *ZERO;

   //?Calculate PA w/ Load Size
   CASE;

   // IF PAR.Avail Ship Date 1 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_1_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.USR_Day_1);
   PARAMETER(PAR.Day_1_Inventory_USR);
   PARAMETER(PAR.Day_1_Production_USR);
   PARAMETER(PAR.Day_1_Sales_USR);
   PARAMETER(PAR.Day_1_Adjustments_USR);
   PARAMETER(PAR.Day_1_Availability_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 2 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_2_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.USR_Day_2);
   PARAMETER(PAR.Day_2_Inventory_USR);
   PARAMETER(PAR.Day_2_Production_USR);
   PARAMETER(PAR.Day_2_Sales_USR);
   PARAMETER(PAR.Day_2_Adjustments_USR);
   PARAMETER(PAR.Day_2_Availability_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 3 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_3_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.USR_Day_3);
   PARAMETER(PAR.Day_3_Inventory_USR);
   PARAMETER(PAR.Day_3_Production_USR);
   PARAMETER(PAR.Day_3_Sales_USR);
   PARAMETER(PAR.Day_3_Adjustments_USR);
   PARAMETER(PAR.Day_3_Availability_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 3  Y/N = CND.Yes
   PAR.Status_Flag_3_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 4 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_4_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.USR_Day_4);
   PARAMETER(PAR.Day_4_Inventory_USR);
   PARAMETER(PAR.Day_4_Production_USR);
   PARAMETER(PAR.Day_4_Sales_USR);
   PARAMETER(PAR.Day_4_Adjustments_USR);
   PARAMETER(PAR.Day_4_Availability_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 4  Y/N = CND.yes
   PAR.Status_Flag_4_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 5 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_5_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.USR_Day_5);
   PARAMETER(PAR.Day_5_Inventory_USR);
   PARAMETER(PAR.Day_5_Production_USR);
   PARAMETER(PAR.Day_5_Sales_USR);
   PARAMETER(PAR.Day_5_Adjustments_USR);
   PARAMETER(PAR.Day_5_Availability_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 5  Y/N = CND.Yes
   PAR.Status_Flag_5_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 6 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_6_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.USR_Day_6);
   PARAMETER(PAR.Day_6_Inventory_USR);
   PARAMETER(PAR.Day_6_Production_USR);
   PARAMETER(PAR.Day_6_Sales_USR);
   PARAMETER(PAR.Day_6_Adjustments_USR);
   PARAMETER(PAR.Day_6_Availability_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 6  Y/N = CND.Yes
   PAR.Status_Flag_6_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 7 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_7_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.USR_Day_7);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_7_Production_USR);
   PARAMETER(PAR.Day_7_Sales_USR);
   PARAMETER(PAR.Day_7_Adjustments_USR);
   PARAMETER(PAR.Day_7_Availability_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 7  Y/N = CND.Yes
   PAR.Status_Flag_7_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 8 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_8_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.USR_Day_8);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_8_Production_USR);
   PARAMETER(PAR.Day_8_Sales_USR);
   PARAMETER(PAR.Day_8_Adjustments_USR);
   PARAMETER(PAR.Day_8_Availability_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 8  Y/N = CND.Yes
   PAR.Status_Flag_8_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 9 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_9_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.USR_Day_9);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_9_Production_USR);
   PARAMETER(PAR.Day_9_Sales_USR);
   PARAMETER(PAR.Day_9_Adjustments_USR);
   PARAMETER(PAR.Day_9_Availability_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 9  Y/N = CND.Yes
   PAR.Status_Flag_9_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 10 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_10_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.USR_Day_10);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_10_Production_USR);
   PARAMETER(PAR.Day_10_Sales_USR);
   PARAMETER(PAR.Day_10_Adjustments_USR);
   PARAMETER(PAR.Day_10_Availability_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 11 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_11_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.USR_Day_11);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_11_Production_USR);
   PARAMETER(PAR.Day_11_Sales_USR);
   PARAMETER(PAR.Day_11_Adjustments_USR);
   PARAMETER(PAR.Day_11_Availability_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 11 Y/N = CND.Yes
   PAR.Status_Flag_11_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 12 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_12_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.USR_Day_12);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_12_Production_USR);
   PARAMETER(PAR.Day_12_Sales_USR);
   PARAMETER(PAR.Day_12_Adjustments_USR);
   PARAMETER(PAR.Day_12_Availability_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 12 Y/N = CND.Yes
   PAR.Status_Flag_12_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 13 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_13_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.USR_Day_13);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_13_Production_USR);
   PARAMETER(PAR.Day_13_Sales_USR);
   PARAMETER(PAR.Day_13_Adjustments_USR);
   PARAMETER(PAR.Day_13_Availability_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 13 Y/N = CND.Yes
   PAR.Status_Flag_13_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 14 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_14_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.USR_Day_14);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_14_Production_USR);
   PARAMETER(PAR.Day_14_Sales_USR);
   PARAMETER(PAR.Day_14_Adjustments_USR);
   PARAMETER(PAR.Day_14_Availability_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 14 Y/N = CND.Yes
   PAR.Status_Flag_14_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 15 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_15_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.USR_Day_15);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_15_Production_USR);
   PARAMETER(PAR.Day_15_Sales_USR);
   PARAMETER(PAR.Day_15_Adjustments_USR);
   PARAMETER(PAR.Day_15_Availability_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 15 Y/N = CND.Yes
   PAR.Status_Flag_15_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 16 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_16_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.USR_Day_16);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_16_Production_USR);
   PARAMETER(PAR.Day_16_Sales_USR);
   PARAMETER(PAR.Day_16_Adjustments_USR);
   PARAMETER(PAR.Day_16_Availability_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 16 Y/N = CND.Yes
   PAR.Status_Flag_16_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 17 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_17_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.USR_Day_17);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_17_Production_USR);
   PARAMETER(PAR.Day_17_Sales_USR);
   PARAMETER(PAR.Day_17_Adjustments_USR);
   PARAMETER(PAR.Day_17_Availability_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 17 Y/N = CND.Yes
   PAR.Status_Flag_17_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 18 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_18_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.USR_Day_18);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_18_Production_USR);
   PARAMETER(PAR.Day_18_Sales_USR);
   PARAMETER(PAR.Day_18_Adjustments_USR);
   PARAMETER(PAR.Day_18_Availability_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 18 Y/N = CND.Yes
   PAR.Status_Flag_18_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 19 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_19_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.USR_Day_19);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_19_Production_USR);
   PARAMETER(PAR.Day_19_Sales_USR);
   PARAMETER(PAR.Day_19_Adjustments_USR);
   PARAMETER(PAR.Day_19_Availability_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 19 Y/N = CND.Yes
   PAR.Status_Flag_19_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 20 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_20_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.USR_Day_20);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_20_Production_USR);
   PARAMETER(PAR.Day_20_Sales_USR);
   PARAMETER(PAR.Day_20_Adjustments_USR);
   PARAMETER(PAR.Day_20_Availability_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 20 Y/N = CND.Yes
   PAR.Status_Flag_20_Y_N = 'Y';

   //?Calculate PA w/ Load Size
   // IF PAR.Avail Ship Date 21 USR EQ DB1.PS Available Ship Date
   IF PAR.Avail_Ship_Date_21_USR = DB1.PS_Available_Ship_Date;

   // Call program Clc PA w/Load Size    XF.
   CALL PROGRAM(Clc PA w/Load Size    XF) ('PDYDXFR');
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.USR_Day_21);
   PARAMETER(WRK.Quantity_Inventory_USR);
   PARAMETER(PAR.Day_21_Production_USR);
   PARAMETER(PAR.Day_21_Sales_USR);
   PARAMETER(PAR.Day_21_Adjustments_USR);
   PARAMETER(PAR.Day_21_Availability_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Type);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.PS_Weight_Standard);
   PARAMETER(DB1.PS_Pieces_Standard);
   PARAMETER(DB1.PS_Weight_Converted);
   PARAMETER(DB1.PS_Pieces_Converted);
   PARAMETER(DB1.PS_Weight_Shipping_Adj);
   PARAMETER(DB1.PS_Pieces_Shipping_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Adj);
   PARAMETER(DB1.PS_Pieces_Prod_Adj);
   PARAMETER(DB1.PS_Weight_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Prod_Allocated);
   PARAMETER(DB1.PS_Pieces_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Whs_Tfr_Adj);
   PARAMETER(DB1.PS_Weight_Ordered);
   PARAMETER(DB1.PS_Pieces_Ordered);
   PARAMETER(DB1.PS_Weight_Sched_Prod);
   PARAMETER(DB1.PS_Pieces_Sched_Prod);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Avail_Dsp_Prt_Type_USR);
   PARAMETER(PAR.Fresh_Chilling_Time);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   PARAMETER(PAR.Pieces_Per_Bag);
   PARAMETER(PAR.Bags_Per_Unit);

   // PAR.Status Flag 21 Y/N = CND.Yes
   PAR.Status_Flag_21_Y_N = 'Y';

   ENDIF;

   ENDIF;

   ENDIF;

   //?USER: Exit processing

   EXECUTE FUNCTION(Rtv PA Ship Only-21  IF) TYPE(EXCINTFUN)                       AC1815983;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Avail_Ship_Date_1_USR);
   PARAMETER(PAR.Avail_Ship_Date_2_USR);
   PARAMETER(PAR.Avail_Ship_Date_3_USR);
   PARAMETER(PAR.Avail_Ship_Date_4_USR);
   PARAMETER(PAR.Avail_Ship_Date_5_USR);
   PARAMETER(PAR.Avail_Ship_Date_6_USR);
   PARAMETER(PAR.Avail_Ship_Date_7_USR);
   PARAMETER(PAR.Avail_Ship_Date_8_USR);
   PARAMETER(PAR.Avail_Ship_Date_9_USR);
   PARAMETER(PAR.Avail_Ship_Date_10_USR);
   PARAMETER(PAR.Avail_Ship_Date_11_USR);
   PARAMETER(PAR.Avail_Ship_Date_12_USR);
   PARAMETER(PAR.Avail_Ship_Date_13_USR);
   PARAMETER(PAR.Avail_Ship_Date_14_USR);
   PARAMETER(PAR.Avail_Ship_Date_15_USR);
   PARAMETER(PAR.Avail_Ship_Date_16_USR);
   PARAMETER(PAR.Avail_Ship_Date_17_USR);
   PARAMETER(PAR.Avail_Ship_Date_18_USR);
   PARAMETER(PAR.Avail_Ship_Date_19_USR);
   PARAMETER(PAR.Avail_Ship_Date_20_USR);
   PARAMETER(PAR.Avail_Ship_Date_21_USR);
   PARAMETER(PAR.Primary_Load_Sts_USR);
   PARAMETER(PAR.Load_Size_USR);
   PARAMETER(PAR.Day_1_Sched_Shipments_USR);
   PARAMETER(PAR.Day_2_Sched_Shipments_USR);
   PARAMETER(PAR.Day_3_Sched_Shipments_USR);
   PARAMETER(PAR.Day_4_Sched_Shipments_USR);
   PARAMETER(PAR.Day_5_Sched_Shipments_USR);
   PARAMETER(PAR.Day_6_Sched_Shipments_USR);
   PARAMETER(PAR.Day_7_Sched_Shipments_USR);
   PARAMETER(PAR.Day_8_Sched_Shipments_USR);
   PARAMETER(PAR.Day_9_Sched_Shipments_USR);
   PARAMETER(PAR.Day_10_Sched_Shipment_USR);
   PARAMETER(PAR.Day_11_Sched_Shipment_USR);
   PARAMETER(PAR.Day_12_Sched_Shipment_USR);
   PARAMETER(PAR.Day_13_Sched_Shipment_USR);
   PARAMETER(PAR.Day_14_Sched_Shipment_USR);
   PARAMETER(PAR.Day_15_Sched_Shipment_USR);
   PARAMETER(PAR.Day_16_Sched_Shipment_USR);
   PARAMETER(PAR.Day_17_Sched_Shipment_USR);
   PARAMETER(PAR.Day_18_Sched_Shipment_USR);
   PARAMETER(PAR.Day_19_Sched_Shipment_USR);
   PARAMETER(PAR.Day_20_Sched_Shipment_USR);
   PARAMETER(PAR.Day_21_Sched_Shipment_USR);
   PARAMETER(PAR.Status_Flag_1_Y_N);
   PARAMETER(PAR.Status_Flag_2_Y_N);
   PARAMETER(PAR.Status_Flag_3_Y_N);
   PARAMETER(PAR.Status_Flag_4_Y_N);
   PARAMETER(PAR.Status_Flag_5_Y_N);
   PARAMETER(PAR.Status_Flag_6_Y_N);
   PARAMETER(PAR.Status_Flag_7_Y_N);
   PARAMETER(PAR.Status_Flag_8_Y_N);
   PARAMETER(PAR.Status_Flag_11_Y_N);
   PARAMETER(PAR.Status_Flag_9_Y_N);
   PARAMETER(PAR.Status_Flag_10_Y_N);
   PARAMETER(PAR.Status_Flag_12_Y_N);
   PARAMETER(PAR.Status_Flag_13_Y_N);
   PARAMETER(PAR.Status_Flag_14_Y_N);
   PARAMETER(PAR.Status_Flag_15_Y_N);
   PARAMETER(PAR.Status_Flag_16_Y_N);
   PARAMETER(PAR.Status_Flag_17_Y_N);
   PARAMETER(PAR.Status_Flag_18_Y_N);
   PARAMETER(PAR.Status_Flag_19_Y_N);
   PARAMETER(PAR.Status_Flag_20_Y_N);
   PARAMETER(PAR.Status_Flag_21_Y_N);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Piece_Count_Item);
   {
    //?Execute internal function

    //?02/21/11 PKD Do not need to Override Weight for Piece Count Items.
    // PAR.Ord/Sch Sts USR = CND.Scheduled
    PAR.Ord_Sch_Sts_USR = 'S';

    //?day 1
    CASE;

    // IF PAR.Avail Ship Date 1 USR is Entered
    IF PAR.Avail_Ship_Date_1_USR <> *ZERO;

    // AND PAR.Status Flag 1  Y/N is No
    AND PAR.Status_Flag_1_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_1_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 1
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 1 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_1_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 1
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_1_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 2
    CASE;

    // IF PAR.Avail Ship Date 2 USR is Entered
    IF PAR.Avail_Ship_Date_2_USR <> *ZERO;

    // AND PAR.Status Flag 2  Y/N is No
    AND PAR.Status_Flag_2_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_2_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 2
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 2 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_2_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 2
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_2_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 3
    CASE;

    // IF PAR.Avail Ship Date 3 USR is Entered
    IF PAR.Avail_Ship_Date_3_USR <> *ZERO;

    // AND PAR.Status Flag 3  Y/N is No
    AND PAR.Status_Flag_3_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_3_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 3
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 3 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_3_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 3
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_3_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 4
    CASE;

    // IF PAR.Avail Ship Date 4 USR is Entered
    IF PAR.Avail_Ship_Date_4_USR <> *ZERO;

    // AND PAR.Status Flag 4  Y/N is no
    AND PAR.Status_Flag_4_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_4_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 4
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 4 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_4_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 4
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_4_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 5
    CASE;

    // IF PAR.Avail Ship Date 5 USR is Entered
    IF PAR.Avail_Ship_Date_5_USR <> *ZERO;

    // AND PAR.Status Flag 5  Y/N is No
    AND PAR.Status_Flag_5_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_5_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 5
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 5 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_5_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 5
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_5_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 6
    CASE;

    // IF PAR.Avail Ship Date 6 USR is Entered
    IF PAR.Avail_Ship_Date_6_USR <> *ZERO;

    // AND PAR.Status Flag 6  Y/N is No
    AND PAR.Status_Flag_6_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_6_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 6
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 6 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_6_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 6
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_6_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 7
    CASE;

    // IF PAR.Avail Ship Date 7 USR is Entered
    IF PAR.Avail_Ship_Date_7_USR <> *ZERO;

    // AND PAR.Status Flag 7  Y/N is No
    AND PAR.Status_Flag_7_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_7_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 7
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 7 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_7_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 7
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_7_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 8
    CASE;

    // IF PAR.Avail Ship Date 8 USR is Entered
    IF PAR.Avail_Ship_Date_8_USR <> *ZERO;

    // AND PAR.Status Flag 8  Y/N is No
    AND PAR.Status_Flag_8_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_8_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 8
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 8 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_8_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 8
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_8_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 9
    CASE;

    // IF PAR.Avail Ship Date 9 USR is Entered
    IF PAR.Avail_Ship_Date_9_USR <> *ZERO;

    // AND PAR.Status Flag 9  Y/N is No
    AND PAR.Status_Flag_9_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_9_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 9
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 9 Sched Shipments USR = LCL.Quantity Scheduled SUM
    PAR.Day_9_Sched_Shipments_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 9
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_9_Sched_Shipments_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 10
    CASE;

    // IF PAR.Avail Ship Date 10 USR is Entered
    IF PAR.Avail_Ship_Date_10_USR <> *ZERO;

    // AND PAR.Status Flag 10 Y/N is No
    AND PAR.Status_Flag_10_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_10_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 10
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 10 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_10_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 10
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_10_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 11
    CASE;

    // IF PAR.Avail Ship Date 11 USR is Entered
    IF PAR.Avail_Ship_Date_11_USR <> *ZERO;

    // AND PAR.Status Flag 11 Y/N is No
    AND PAR.Status_Flag_11_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_11_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 11
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 11 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_11_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 11
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_11_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 12
    CASE;

    // IF PAR.Avail Ship Date 12 USR is Entered
    IF PAR.Avail_Ship_Date_12_USR <> *ZERO;

    // AND PAR.Status Flag 12 Y/N is No
    AND PAR.Status_Flag_12_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_12_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 12
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 12 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_12_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 12
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_12_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 13
    CASE;

    // IF PAR.Avail Ship Date 13 USR is Entered
    IF PAR.Avail_Ship_Date_13_USR <> *ZERO;

    // AND PAR.Status Flag 13 Y/N is No
    AND PAR.Status_Flag_13_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_13_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 13
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 13 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_13_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 13
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_13_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 14
    CASE;

    // IF PAR.Avail Ship Date 14 USR is Entered
    IF PAR.Avail_Ship_Date_14_USR <> *ZERO;

    // AND PAR.Status Flag 14 Y/N is No
    AND PAR.Status_Flag_14_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_14_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 14
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 14 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_14_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 14
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_14_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 15
    CASE;

    // IF PAR.Avail Ship Date 15 USR is Entered
    IF PAR.Avail_Ship_Date_15_USR <> *ZERO;

    // AND PAR.Status Flag 15 Y/N is No
    AND PAR.Status_Flag_15_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_15_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 15
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 15 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_15_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 15
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_15_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 16
    CASE;

    // IF PAR.Avail Ship Date 16 USR is Entered
    IF PAR.Avail_Ship_Date_16_USR <> *ZERO;

    // AND PAR.Status Flag 16 Y/N is No
    AND PAR.Status_Flag_16_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_16_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 16
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 16 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_16_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 16
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_16_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 17
    CASE;

    // IF PAR.Avail Ship Date 17 USR is Entered
    IF PAR.Avail_Ship_Date_17_USR <> *ZERO;

    // AND PAR.Status Flag 17 Y/N is No
    AND PAR.Status_Flag_17_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_17_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 17
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 17 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_17_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 17
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_17_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 18
    CASE;

    // IF PAR.Avail Ship Date 18 USR is Entered
    IF PAR.Avail_Ship_Date_18_USR <> *ZERO;

    // AND PAR.Status Flag 18 Y/N is No
    AND PAR.Status_Flag_18_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_18_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 18
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 18 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_18_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 18
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_18_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 19
    CASE;

    // IF PAR.Avail Ship Date 19 USR is Entered
    IF PAR.Avail_Ship_Date_19_USR <> *ZERO;

    // AND PAR.Status Flag 19 Y/N is No
    AND PAR.Status_Flag_19_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_19_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 19
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 19 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_19_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 19
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_19_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 20
    CASE;

    // IF PAR.Avail Ship Date 20 USR is Entered
    IF PAR.Avail_Ship_Date_20_USR <> *ZERO;

    // AND PAR.Status Flag 20 Y/N is No
    AND PAR.Status_Flag_20_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_20_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 20
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 20 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_20_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 20
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_20_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

    //?day 21
    CASE;

    // IF PAR.Avail Ship Date 21 USR is Entered
    IF PAR.Avail_Ship_Date_21_USR <> *ZERO;

    // AND PAR.Status Flag 21 Y/N is No
    AND PAR.Status_Flag_21_Y_N = 'N';

    EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Avail_Ship_Date_21_USR);
    PARAMETER(LCL.Weight_Scheduled_SUM);
    PARAMETER(LCL.Quantity_Scheduled_SUM);
    PARAMETER(PAR.Ord_Sch_Sts_USR);
    {
     //?USER: Initialize routine

     // PAR.Weight Scheduled SUM = CON.*ZERO
     PAR.Weight_Scheduled_SUM = *ZERO;

     // PAR.Quantity Scheduled SUM = CON.*ZERO
     PAR.Quantity_Scheduled_SUM = *ZERO;

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Header_Status);
     PARAMETER(WRK.Billing_Activity_Type);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     CASE;

     // IF WRK.Header Status is Not Comp/Canc/Conf
     IF WRK.Header_Status = 'L'/'A'/'E'/'H';

     // AND WRK.Billing Activity Type is Invoice or Transfer
     AND WRK.Billing_Activity_Type = '1'/'4';

     CASE;

     // IF PAR.Ord/Sch Sts USR is Scheduled
     IF PAR.Ord_Sch_Sts_USR = 'S';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

     // IF PAR.Ord/Sch Sts USR is Ordered
     IF PAR.Ord_Sch_Sts_USR = 'O';

     // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
     PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

     // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
     PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

     ENDIF;

     ENDIF;

    }

    //?Calculate Sales Quantity 21
    CASE;

    // IF PAR.Primary/Load Sts USR is Primary
    IF PAR.Primary_Load_Sts_USR = 'P';

    // AND PAR.Unit Weight is Greater than zero
    AND ( PAR.Unit_Weight > *ZERO;

    // OR PAR.Piece Count Item is yes
    OR PAR.Piece_Count_Item = 'Y' );

    //?***Calculate Sales with Unit Weight
    CASE;

    // IF PAR.Piece Count Item is yes
    IF PAR.Piece_Count_Item = 'Y';

    // PAR.Day 21 Sched Shipment USR = LCL.Quantity Scheduled SUM
    PAR.Day_21_Sched_Shipment_USR = LCL.Quantity_Scheduled_SUM;

    //?***Calculate Sales with Unit Weight
    // IF *OTHERWISE
    IF *OTHERWISE;

    // Sched Shipments (No Dec)
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Unit_Weight 'H';

    ENDIF;

    //?Calculate Sales Quantity 21
    // IF PAR.Primary/Load Sts USR is Load Size
    IF PAR.Primary_Load_Sts_USR = 'L';

    // AND PAR.Load Size USR is GT Zero
    AND PAR.Load_Size_USR > *ZERO;

    // Scheduled Shipments
    PAR.Day_21_Sched_Shipment_USR = LCL.Weight_Scheduled_SUM / PAR.Load_Size_USR 'H';

    ENDIF;

    ENDIF;

   }

  }

 }

 // LCL.Status - Y or N = CND.yes
 LCL.Status_Y_or_N = 'Y';

 ENDIF;

 ENDIF;

 ENDIF;

 //?LEAVE NEGATIVE E1885 PER CURT 12/10/13
 //?Accumulate Availability
 CASE;

 // IF LCL.Status - Y or N is yes
 IF LCL.Status_Y_or_N = 'Y';

 // PAR.Day 1 Avail Total     USR = PAR.Day 1 Avail Total     USR + PAR.Day 1 Availability USR
 PAR.Day_1_Avail_Total_USR = PAR.Day_1_Avail_Total_USR + PAR.Day_1_Availability_USR;

 // PAR.Day 2 Avail Total     USR = PAR.Day 2 Avail Total     USR + PAR.Day 2 Availability USR
 PAR.Day_2_Avail_Total_USR = PAR.Day_2_Avail_Total_USR + PAR.Day_2_Availability_USR;

 // PAR.Day 3 Avail Total     USR = PAR.Day 3 Avail Total     USR + PAR.Day 3 Availability USR
 PAR.Day_3_Avail_Total_USR = PAR.Day_3_Avail_Total_USR + PAR.Day_3_Availability_USR;

 // PAR.Day 4 Avail Total     USR = PAR.Day 4 Avail Total     USR + PAR.Day 4 Availability USR
 PAR.Day_4_Avail_Total_USR = PAR.Day_4_Avail_Total_USR + PAR.Day_4_Availability_USR;

 // PAR.Day 5 Avail Total     USR = PAR.Day 5 Avail Total     USR + PAR.Day 5 Availability USR
 PAR.Day_5_Avail_Total_USR = PAR.Day_5_Avail_Total_USR + PAR.Day_5_Availability_USR;

 // PAR.Day 6 Avail Total     USR = PAR.Day 6 Avail Total     USR + PAR.Day 6 Availability USR
 PAR.Day_6_Avail_Total_USR = PAR.Day_6_Avail_Total_USR + PAR.Day_6_Availability_USR;

 // PAR.Day 7 Avail Total     USR = PAR.Day 7 Avail Total     USR + PAR.Day 7 Availability USR
 PAR.Day_7_Avail_Total_USR = PAR.Day_7_Avail_Total_USR + PAR.Day_7_Availability_USR;

 // PAR.Day 8 Avail Total     USR = PAR.Day 8 Avail Total     USR + PAR.Day 8 Availability USR
 PAR.Day_8_Avail_Total_USR = PAR.Day_8_Avail_Total_USR + PAR.Day_8_Availability_USR;

 // PAR.Day 9 Avail Total     USR = PAR.Day 9 Avail Total     USR + PAR.Day 9 Availability USR
 PAR.Day_9_Avail_Total_USR = PAR.Day_9_Avail_Total_USR + PAR.Day_9_Availability_USR;

 // PAR.Day 10 Avail Total    USR = PAR.Day 10 Avail Total    USR + PAR.Day 10 Availability USR
 PAR.Day_10_Avail_Total_USR = PAR.Day_10_Avail_Total_USR + PAR.Day_10_Availability_USR;

 // PAR.Day 11 Avail Total    USR = PAR.Day 11 Avail Total    USR + PAR.Day 11 Availability USR
 PAR.Day_11_Avail_Total_USR = PAR.Day_11_Avail_Total_USR + PAR.Day_11_Availability_USR;

 // PAR.Day 12 Avail Total    USR = PAR.Day 12 Avail Total    USR + PAR.Day 12 Availability USR
 PAR.Day_12_Avail_Total_USR = PAR.Day_12_Avail_Total_USR + PAR.Day_12_Availability_USR;

 // PAR.Day 13 Avail Total    USR = PAR.Day 13 Avail Total    USR + PAR.Day 13 Availability USR
 PAR.Day_13_Avail_Total_USR = PAR.Day_13_Avail_Total_USR + PAR.Day_13_Availability_USR;

 // PAR.Day 14 Avail Total    USR = PAR.Day 14 Avail Total    USR + PAR.Day 14 Availability USR
 PAR.Day_14_Avail_Total_USR = PAR.Day_14_Avail_Total_USR + PAR.Day_14_Availability_USR;

 // PAR.Day 15 Avail Total    USR = PAR.Day 15 Avail Total    USR + PAR.Day 15 Availability USR
 PAR.Day_15_Avail_Total_USR = PAR.Day_15_Avail_Total_USR + PAR.Day_15_Availability_USR;

 // PAR.Day 16 Avail Total    USR = PAR.Day 16 Avail Total    USR + PAR.Day 16 Availability USR
 PAR.Day_16_Avail_Total_USR = PAR.Day_16_Avail_Total_USR + PAR.Day_16_Availability_USR;

 // PAR.Day 17 Avail Total    USR = PAR.Day 17 Avail Total    USR + PAR.Day 17 Availability USR
 PAR.Day_17_Avail_Total_USR = PAR.Day_17_Avail_Total_USR + PAR.Day_17_Availability_USR;

 // PAR.Day 18 Avail Total    USR = PAR.Day 18 Avail Total    USR + PAR.Day 18 Availability USR
 PAR.Day_18_Avail_Total_USR = PAR.Day_18_Avail_Total_USR + PAR.Day_18_Availability_USR;

 // PAR.Day 19 Avail Total    USR = PAR.Day 19 Avail Total    USR + PAR.Day 19 Availability USR
 PAR.Day_19_Avail_Total_USR = PAR.Day_19_Avail_Total_USR + PAR.Day_19_Availability_USR;

 // PAR.Day 20 Avail Total    USR = PAR.Day 20 Avail Total    USR + PAR.Day 20 Availability USR
 PAR.Day_20_Avail_Total_USR = PAR.Day_20_Avail_Total_USR + PAR.Day_20_Availability_USR;

 // PAR.Day 21 Avail Total    USR = PAR.Day 21 Avail Total    USR + PAR.Day 21 Availability USR
 PAR.Day_21_Avail_Total_USR = PAR.Day_21_Avail_Total_USR + PAR.Day_21_Availability_USR;

 ENDIF;

 //?Cumulative Total
 CASE;

 // IF LCL.Status - Y or N is yes
 IF LCL.Status_Y_or_N = 'Y';

 // PAR.Day 1 ATS Qty USR = PAR.Day 1 Availability USR
 PAR.Day_1_ATS_Qty_USR = PAR.Day_1_Availability_USR;

 // PAR.Day 2 ATS Qty USR = PAR.Day 1 ATS Qty USR + PAR.Day 2 Availability USR
 PAR.Day_2_ATS_Qty_USR = PAR.Day_1_ATS_Qty_USR + PAR.Day_2_Availability_USR;

 // PAR.Day 3 ATS Qty USR = PAR.Day 2 ATS Qty USR + PAR.Day 3 Availability USR
 PAR.Day_3_ATS_Qty_USR = PAR.Day_2_ATS_Qty_USR + PAR.Day_3_Availability_USR;

 // PAR.Day 4 ATS Qty USR = PAR.Day 3 ATS Qty USR + PAR.Day 4 Availability USR
 PAR.Day_4_ATS_Qty_USR = PAR.Day_3_ATS_Qty_USR + PAR.Day_4_Availability_USR;

 // PAR.Day 5 ATS Qty USR = PAR.Day 4 ATS Qty USR + PAR.Day 5 Availability USR
 PAR.Day_5_ATS_Qty_USR = PAR.Day_4_ATS_Qty_USR + PAR.Day_5_Availability_USR;

 // PAR.Day 6 ATS Qty USR = PAR.Day 5 ATS Qty USR + PAR.Day 6 Availability USR
 PAR.Day_6_ATS_Qty_USR = PAR.Day_5_ATS_Qty_USR + PAR.Day_6_Availability_USR;

 // PAR.Day 7 ATS Qty USR = PAR.Day 6 ATS Qty USR + PAR.Day 7 Availability USR
 PAR.Day_7_ATS_Qty_USR = PAR.Day_6_ATS_Qty_USR + PAR.Day_7_Availability_USR;

 // PAR.Day 8 ATS Qty USR = PAR.Day 7 ATS Qty USR + PAR.Day 8 Availability USR
 PAR.Day_8_ATS_Qty_USR = PAR.Day_7_ATS_Qty_USR + PAR.Day_8_Availability_USR;

 // PAR.Day 9 ATS Qty USR = PAR.Day 8 ATS Qty USR + PAR.Day 9 Availability USR
 PAR.Day_9_ATS_Qty_USR = PAR.Day_8_ATS_Qty_USR + PAR.Day_9_Availability_USR;

 // PAR.Day 10 ATS Qty USR = PAR.Day 9 ATS Qty USR + PAR.Day 10 Availability USR
 PAR.Day_10_ATS_Qty_USR = PAR.Day_9_ATS_Qty_USR + PAR.Day_10_Availability_USR;

 // PAR.Day 11 ATS Qty USR = PAR.Day 10 ATS Qty USR + PAR.Day 11 Availability USR
 PAR.Day_11_ATS_Qty_USR = PAR.Day_10_ATS_Qty_USR + PAR.Day_11_Availability_USR;

 // PAR.Day 12 ATS Qty USR = PAR.Day 11 ATS Qty USR + PAR.Day 12 Availability USR
 PAR.Day_12_ATS_Qty_USR = PAR.Day_11_ATS_Qty_USR + PAR.Day_12_Availability_USR;

 // PAR.Day 13 ATS Qty USR = PAR.Day 12 ATS Qty USR + PAR.Day 13 Availability USR
 PAR.Day_13_ATS_Qty_USR = PAR.Day_12_ATS_Qty_USR + PAR.Day_13_Availability_USR;

 // PAR.Day 14 ATS Qty USR = PAR.Day 13 ATS Qty USR + PAR.Day 14 Availability USR
 PAR.Day_14_ATS_Qty_USR = PAR.Day_13_ATS_Qty_USR + PAR.Day_14_Availability_USR;

 // PAR.Day 15 ATS Qty USR = PAR.Day 14 ATS Qty USR + PAR.Day 15 Availability USR
 PAR.Day_15_ATS_Qty_USR = PAR.Day_14_ATS_Qty_USR + PAR.Day_15_Availability_USR;

 // PAR.Day 16 ATS Qty USR = PAR.Day 15 ATS Qty USR + PAR.Day 16 Availability USR
 PAR.Day_16_ATS_Qty_USR = PAR.Day_15_ATS_Qty_USR + PAR.Day_16_Availability_USR;

 // PAR.Day 17 ATS Qty USR = PAR.Day 16 ATS Qty USR + PAR.Day 17 Availability USR
 PAR.Day_17_ATS_Qty_USR = PAR.Day_16_ATS_Qty_USR + PAR.Day_17_Availability_USR;

 // PAR.Day 18 ATS Qty USR = PAR.Day 17 ATS Qty USR + PAR.Day 18 Availability USR
 PAR.Day_18_ATS_Qty_USR = PAR.Day_17_ATS_Qty_USR + PAR.Day_18_Availability_USR;

 // PAR.Day 19 ATS Qty USR = PAR.Day 18 ATS Qty USR + PAR.Day 19 Availability USR
 PAR.Day_19_ATS_Qty_USR = PAR.Day_18_ATS_Qty_USR + PAR.Day_19_Availability_USR;

 // PAR.Day 20 ATS Qty USR = PAR.Day 19 ATS Qty USR + PAR.Day 20 Availability USR
 PAR.Day_20_ATS_Qty_USR = PAR.Day_19_ATS_Qty_USR + PAR.Day_20_Availability_USR;

 // PAR.Day 21 ATS Qty USR = PAR.Day 20 ATS Qty USR + PAR.Day 21 Availability USR
 PAR.Day_21_ATS_Qty_USR = PAR.Day_20_ATS_Qty_USR + PAR.Day_21_Availability_USR;

 ENDIF;

 // LCL.Status - Y or N = CND.no
 LCL.Status_Y_or_N = 'N';

}


//?WRK fields not being used
// Total Availability 1-19
WRK.Quantity_Avail_To_Sell = ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (                                     +
CUR.Day_1_Availability_USR + CUR.Day_2_Availability_USR ) + CUR.Day_3_Availability_USR )          +
+ CUR.Day_4_Availability_USR ) + CUR.Day_5_Availability_USR )                                     +
+ CUR.Day_6_Availability_USR ) + CUR.Day_7_Availability_USR )                                     +
+ CUR.Day_8_Availability_USR ) + CUR.Day_9_Availability_USR )                                     +
+ CUR.Day_10_Availability_USR ) + CUR.Day_11_Availability_USR )                                   +
+ CUR.Day_12_Availability_USR ) + CUR.Day_13_Availability_USR )                                   +
+ CUR.Day_14_Availability_USR ) + CUR.Day_15_Availability_USR )                                   +
+ CUR.Day_16_Availability_USR ) + CUR.Day_17_Availability_USR )                                   +
+ CUR.Day_18_Availability_USR ) + CUR.Day_19_Availability_USR;

CASE;

// IF PAR.Primary/Load Sts USR is Load Size
IF PAR.Primary_Load_Sts_USR = 'L';

// CUR.U/M - Primary = CON.LD
CUR.UOM_Primary = 'LD';

ENDIF;

//?USER: On print of detail format

CASE;

// IF PAR.Print Zeros USR is no
IF PAR.Print_Zeros_USR = 'N';

CASE;

// IF WRK.Quantity Avail. to Sell is Equal to zero
IF WRK.Quantity_Avail_To_Sell = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Item Display Sequence totals format

CASE;

IF NEW Availability_Group_Code;
// SUPPRESSED PRINT Availability Group Code totals format

//?Embedded PRTOBJ : Prt Avail Group Comnt PO
EXECUTE FUNCTION(Prt Avail Group Comnt PO) TYPE(PRTOBJ);
PARAMETER(CUR.Availability_Group_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Embedded PRTOBJ : Prt Avail Group Comnt PO
EXECUTE FUNCTION(Prt Avail Group Comnt PO) TYPE(PRTOBJ);
PARAMETER('ALL');
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// SUPPRESSED PRINT Accounting Company Number totals format

