// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMFWD1R
// ?Date: 14.08.2025 Time: 03:42:59
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Allow_Multi_Company);
PARAMETER(LCL.Default_Printer);
PARAMETER(LCL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// KEY.Load ID = PAR.Load ID
KEY.Load_ID = PAR.Load_ID;

// KEY.Order Number = PAR.Order Number
KEY.Order_Number = PAR.Order_Number;

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

//?USER: Validate key screen

// DTL.Stop/Drop Sequence Number = CON.1
DTL.Stop_Drop_Sequence_Number = 1;

CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'OHE record has not yet been added'
ERROR(USR3705);

RETURN;

ENDIF;

//?USER: Load detail screen from DBF record

MOVE *ALL (To: DTL From: DB1);

// DTL.Stop/Drop Sequence Number = CON.1
DTL.Stop_Drop_Sequence_Number = 1;

EXECUTE FUNCTION(RTV Load All Fields    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1491510;
PARAMETER(KEY.Load_ID);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Scheduled_Ship_Date);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Load_Status);
PARAMETER(LCL.Reefer_Temperature);
PARAMETER(DTL.Seal_1);
PARAMETER(DTL.Seal_2);
PARAMETER(DTL.Seal_3);
PARAMETER(NLL.Seal_4);
PARAMETER(NLL.Seal_2_Unused);
PARAMETER(LCL.Total_Load_Order_Weight);
PARAMETER(LCL.Flat_Amount);
PARAMETER(LCL.Allocate_Pounds_Miles);
PARAMETER(LCL.Total_Stops);
PARAMETER(DTL.Trailer_Id);
PARAMETER(DTL.Transloader_Carrier_Code);
PARAMETER(LCL.BOL_Time);
PARAMETER(LCL.Carrier_Code);
PARAMETER(LCL.Truck_Size);
PARAMETER(LCL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.Ship_Status);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Number_Pallets_Received);
PARAMETER(LCL.Number_Pallets_Loaded);
PARAMETER(LCL.Load_Carrier_Pay_Amt);
PARAMETER(LCL.Estimated_Arrival_Time);
PARAMETER(LCL.Actual_Arrival_Date);
PARAMETER(LCL.Actual_Arrival_Time);
PARAMETER(LCL.Trailer_IN_Weight);
PARAMETER(LCL.Trailer_OUT_Weight);
PARAMETER(LCL.Actual_Departure_Date);
PARAMETER(LCL.Departure_Time);
PARAMETER(LCL.Schedule_Sequence_Number);
PARAMETER(LCL.Product_Temperature);
PARAMETER(LCL.Number_Spacers_Loaded);
PARAMETER(LCL.Car_Veh_Initials);
PARAMETER(LCL.Total_Load_Miles);
PARAMETER(LCL.Recorder_ID);
PARAMETER(DTL.Ship_Method_USR);
PARAMETER(LCL.Ship_From_Warehouse);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Gross_Weight);
PARAMETER(LCL.Carrier_Broker);
PARAMETER(LCL.Export_Status);
PARAMETER(DTL.Actual_Ship_Date);
PARAMETER(LCL.On_Time_Y_N);
PARAMETER(LCL.Truck_Ready_Date);
PARAMETER(LCL.Truck_Ready_Time);
PARAMETER(LCL.Spotted_Date);
PARAMETER(LCL.Spotted_Time);
PARAMETER(LCL.Load_Finished_Date);
PARAMETER(LCL.Load_Finished_Time);
PARAMETER(LCL.BOL_Complete_Date);
PARAMETER(LCL.BOL_Complete_Time);
PARAMETER(LCL.BOL_Received_Date);
PARAMETER(LCL.BOL_Received_Time);
PARAMETER(LCL.Truck_Departure_Date);
PARAMETER(LCL.Truck_Departure_Time);
PARAMETER(LCL.Adjusted_Departure_Date);
PARAMETER(LCL.Adjusted_Departure_Time);
PARAMETER(LCL.Shipping_Line);
PARAMETER(LCL.Port_Delv_Terminal);
PARAMETER(LCL.Vessel_Name);
PARAMETER(LCL.Voyage);
PARAMETER(LCL.Sail_Date);
PARAMETER(LCL.Booking_Number);
PARAMETER(LCL.Discharge_Port);
PARAMETER(LCL.Arrival_Date);
PARAMETER(LCL.Container_Number);
PARAMETER(LCL.Date_In);
PARAMETER(LCL.Time_In);
PARAMETER(LCL.Date_Out);
PARAMETER(LCL.Time_Out);
PARAMETER(LCL.Load_Total_Freight);
PARAMETER(LCL.Scheduled_Delivery_Date);
PARAMETER(LCL.Scheduled_Delivery_Time);
PARAMETER(LCL.LH_Unused_Sts);
PARAMETER(LCL.LH_Carrier_Payment_Sts);
PARAMETER(LCL.Bring_Back_Miles);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(DTL.Deadline_Depart_DT_HDR);
PARAMETER(DTL.Deadline_Depart_Time_40);
PARAMETER(LCL.Load_Held_Over);
PARAMETER(LCL.Load_Held_Over_Reason);
PARAMETER(LCL.Load_Held_Over_Rsn_Cmt);
PARAMETER(LCL.Ocean_BOL_Number);
PARAMETER(LCL.Express_Mail_Number);
PARAMETER(LCL.Express_Mail_Date);
PARAMETER(LCL.Load_Shag_Flag);
PARAMETER(LCL.Load_Wash_Flag);
PARAMETER(LCL.Product_Complete_Date);
PARAMETER(LCL.Product_Complete_Time);
PARAMETER(LCL.Pallets_Loaded);
PARAMETER(LCL.Avg_Pallet_Tare);
PARAMETER(LCL.Tot_Pallet_Tare);
PARAMETER(LCL.Load_Confirmed_Sts);
PARAMETER(LCL.Load_Confirmed_Contact);
PARAMETER(LCL.Load_Confirmation_Time);
PARAMETER(LCL.Load_Door_1);
PARAMETER(LCL.Override_Total_Load_Miles);
PARAMETER(LCL.Load_Door_2);
PARAMETER(LCL.Partial_Load);
PARAMETER(LCL.Load_Confirmation_Fax_Sts);
PARAMETER(LCL.Export_Load_USDA_OK);
PARAMETER(LCL.Late_Delivery_Email_Flag);
PARAMETER(LCL.Load_Actual_Freight);
PARAMETER(LCL.Hide_on_WW_Load_Sts);
PARAMETER(LCL.Late_Billing_Email_Flag);
PARAMETER(LCL.Shipping_Temp_C_F_txt);
PARAMETER(LCL.LH_Held_Over_Rsn_Cmt);
PARAMETER(LCL.Multi_Company_Load);
PARAMETER(LCL.Fax_Sent_to_SSI_Carrier);
PARAMETER(LCL.Schedule_Pos_Load_Grade);
PARAMETER(LCL.LH_Power_Only_Load);
PARAMETER(LCL.MG_Created_Load);
PARAMETER(LCL.LH_Unused_Sts_5);
PARAMETER(LCL.Load_U_M);
PARAMETER(LCL.TPM_Shipment_Status);
PARAMETER(LCL.LH_Unused_Sts_8);
PARAMETER(LCL.LH_On_Time_Reason_Code);
PARAMETER(LCL.LH_Held_Over_Reason);
PARAMETER(LCL.LH_Carrier_Paid_Dte);
PARAMETER(LCL.LH_Carrier_Paid_Time);
PARAMETER(LCL.LH_Last_Combo_Prod_Date);
PARAMETER(LCL.LH_Last_Combo_Prod_Time);
PARAMETER(LCL.LPT_Load_Plan_Start_Dt);
PARAMETER(LCL.LPT_Load_Plan_Start_Tm);
PARAMETER(LCL.TPM_Planned_Ship_Date);
PARAMETER(LCL.LH_Unused_Time_4);
PARAMETER(LCL.LH_Unused_Date_5);
PARAMETER(LCL.LH_Unused_Time_5);
PARAMETER(LCL.LH_Unused_Date_6);
PARAMETER(LCL.LH_Unused_Time_6);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV All Hdr flds b/ord RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1699784;
PARAMETER(LCL.Company_Number);
PARAMETER(KEY.Order_Number);
PARAMETER(LCL.Order_Type_Sales);
PARAMETER(LCL.AR_Customer_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(LCL.Ship_To_Address_Line_1);
PARAMETER(LCL.Ship_To_Address_Line_2);
PARAMETER(LCL.Ship_To_Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.State);
PARAMETER(LCL.Ship_To_Zip_Postal_Code);
PARAMETER(LCL.Bill_to_Customer);
PARAMETER(LCL.Bill_to_Name);
PARAMETER(LCL.Bill_to_Address_Line_1);
PARAMETER(LCL.Bill_to_Address_Line_2);
PARAMETER(LCL.Bill_to_Address_Line_3);
PARAMETER(LCL.Bill_to_City);
PARAMETER(LCL.Bill_to_State_Code);
PARAMETER(LCL.Bill_to_Zip_Postal_Code);
PARAMETER(LCL.Customer_Purchase_Order_#);
PARAMETER(LCL.Order_Date);
PARAMETER(LCL.Requested_Ship_Date);
PARAMETER(DTL.Actual_Ship_Date);
PARAMETER(LCL.Cancel_Date);
PARAMETER(LCL.Terms_Code);
PARAMETER(LCL.Special_Instructions);
PARAMETER(LCL.Special_Instructions_2);
PARAMETER(DTL.Carrier_Code);
PARAMETER(LCL.Comment_Print_Acknowledge);
PARAMETER(LCL.Comment_Print_Inv_Cr_Memo);
PARAMETER(LCL.Comment_Print_Pick_Slip);
PARAMETER(LCL.Comment_Print_Ship_Doc);
PARAMETER(LCL.Reason_Code);
PARAMETER(LCL.Order_in_Use);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Header_Status_Last);
PARAMETER(LCL.Order_Type_Print_Status);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(LCL.User_Original_Entry);
PARAMETER(LCL.Date_of_Original_Entry);
PARAMETER(LCL.Order_Value_Total);
PARAMETER(LCL.Order_Weight_Total);
PARAMETER(LCL.Credit_Hold);
PARAMETER(LCL.Production_Hold);
PARAMETER(LCL.New_Customer_Hold);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.USR_From_Time_4_0);
PARAMETER(LCL.Accounts_Receiv_Ent_1);
PARAMETER(LCL.Accounts_Receiv_Ent_2);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.LTL_Flag);
PARAMETER(LCL.Price_Audit);
PARAMETER(LCL.Price_Status);
PARAMETER(LCL.Shipping_Method);
PARAMETER(LCL.Export_Status);
PARAMETER(LCL.Palletize);
PARAMETER(LCL.Shrink_Wrap);
PARAMETER(LCL.Slip_Sheet);
PARAMETER(LCL.Age_Code);
PARAMETER(LCL.Reefer_Temperature);
PARAMETER(LCL.Load_Type);
PARAMETER(LCL.Attach_to_Invoice_Number);
PARAMETER(LCL.Load_Plan_Order);
PARAMETER(LCL.Print_Pick_Slip);
PARAMETER(LCL.Resell_Reference_Number);
PARAMETER(LCL.Special_Comment_1);
PARAMETER(LCL.Special_Comment_2);
PARAMETER(LCL.Affect_Auto_Accruals);
PARAMETER(LCL.Sales_Route_Code);
PARAMETER(LCL.Manager_Level_Code);
PARAMETER(LCL.VP_Level_Code);
PARAMETER(LCL.Attach_to_Order_Number);
PARAMETER(LCL.Reason_for_Price_Audit);
PARAMETER(LCL.Invoice_Number);
PARAMETER(LCL.Invoice_Suffix);
PARAMETER(LCL.Invoice_Date);
PARAMETER(LCL.Event_Code);
PARAMETER(LCL.Trans_Contol_AS400_Plant);
PARAMETER(LCL.Modified_Flag);
PARAMETER(LCL.A_R_order_Value_Total);
PARAMETER(LCL.Billing_Activity_Type);
PARAMETER(LCL.Block_Order_Flag);
PARAMETER(LCL.Order_Certification_Flag);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Put Warehouse Type on the screen                    E003144
EXECUTE FUNCTION(RTV Warehouse Code RT) TYPE(RTVOBJ) FILE(OPBGWKP)              AC1577257;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(1);
PARAMETER(1);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Price_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Type/Std Chil/Chil RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1501268;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(NLL.Warehouse_Std_Chill_Time);
PARAMETER(NLL.Warehouse_Chill_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Carrier_Name_DRV);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(RTV Order Info by Load RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1814603;
PARAMETER(DTL.Load_ID);
PARAMETER(LCL.Sequence_Number);
PARAMETER(DTL.Stop_Drop_Sequence_Number);
PARAMETER(LCL.Comments_for_Pickup);
PARAMETER(LCL.Miles_to_next_stop);
PARAMETER(LCL.Freight_Charge);
PARAMETER(LCL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(LCL.Freight_Misc_Charge);
PARAMETER(LCL.Freight_Stop_Charge);
PARAMETER(LCL.Rated_Freight);
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.OHE_Ship_Status);
PARAMETER(LCL.Estimated_Arrival_Date);
PARAMETER(LCL.Estimated_Arrival_Time);
PARAMETER(LCL.Appointment_Confirm_Date);
PARAMETER(LCL.Appointment_Confirm_Time);
PARAMETER(LCL.Confirmation_Made_With);
PARAMETER(LCL.Confirmation_Number);
PARAMETER(LCL.Actual_Delivery_Date);
PARAMETER(LCL.Actual_Delivery_time);
PARAMETER(LCL.Scheduled_Delivery_Date);
PARAMETER(LCL.Scheduled_Delivery_Time);
PARAMETER(LCL.Deadline_Depart_DT_HDR);
PARAMETER(LCL.Deadline_Depart_Time_HDR);
PARAMETER(LCL.On_Yard_Date);
PARAMETER(LCL.On_Yard_Time);
PARAMETER(LCL.MPC_Number);
PARAMETER(LCL.Load_Dtl_On_Time_Flag);
PARAMETER(LCL.On_Time_Addl_Rsn_Unused);
PARAMETER(LCL.Seal_Nbr_1);
PARAMETER(LCL.Seal_Nbr_2);
PARAMETER(LCL.Seal_Nbr_3);
PARAMETER(LCL.Seal_Nbr_4);
PARAMETER(LCL.Seal_Nbr_5);
PARAMETER(LCL.LD_Carrier_Appt_Date);
PARAMETER(LCL.LD_Unused_Date_2);
PARAMETER(LCL.LD_Unused_Date_3);
PARAMETER(LCL.LD_Carrier_Appt_Time);
PARAMETER(LCL.LD_Unused_Time_2);
PARAMETER(LCL.LD_Unused_Time_3);
PARAMETER(LCL.Miles_Error_Sts);
PARAMETER(LCL.LD_Unused_Sts_2);
PARAMETER(LCL.HPB_Transload_Station);
PARAMETER(LCL.LD_Cst_Svc_Tracer_Cmmnt);
PARAMETER(LCL.Carrier_Ref_PRO_Inv);
PARAMETER(LCL.Cust_Assigned_Appt_#);
PARAMETER(LCL.EDI_Status_1);
PARAMETER(LCL.EDI_Status_2);
PARAMETER(LCL.EDI_Status_3);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.MG Created Load is Not MG Created Load
IF LCL.MG_Created_Load = *BLANK;

//?** Rtv the Ship Port City and addr  Skip when Live w/TPM  E004119
CASE;

// IF DB1.Port Delv Terminal is Entered
IF DB1.Port_Delv_Terminal <> *BLANK;

EXECUTE FUNCTION(RTV Shp Line/Port All  RT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1502160;
PARAMETER(DB1.Shipping_Line);
PARAMETER(DB1.Port_Delv_Terminal);
PARAMETER(DTL.OHE_City);
PARAMETER(LCL.Port_Address_Line_1);
PARAMETER(LCL.Port_Address_Line_2);
PARAMETER(DTL.Sail_Port_State);
PARAMETER(LCL.Port_Zip_Postal_Code);
PARAMETER(LCL.Port_Phone_Number);
PARAMETER(LCL.Port_Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


ENDIF;

//?** Rtv Ship Line name from Carr file - skip when Live w/TPM  E004119
CASE;

// IF DB1.Shipping Line is entered
IF DB1.Shipping_Line <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Shipping_Line);
PARAMETER(DTL.USR_Name);
PARAMETER(WRK.SSI_Download_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


ENDIF;

ENDIF;

// DTL.String 30 = DB1.Letter of Credit Number
DTL.String_30 = DB1.Letter_of_Credit_Number;

// DTL.USR Time 4.0 = DB1.OHE Port Cut Time *HHMM
DTL.USR_Time_4_0 = TIMEDTLS(DB1.OHE_Port_Cut_Time 'HM');

// DTL.Deadline Depart Time 4,0 = LCL.Deadline Departure Time *HHMM
DTL.Deadline_Depart_Time_40 = TIMEDTLS(LCL.Deadline_Departure_Time 'HM');

//?USER: Process command keys

//?** 20=Display Traffic Comments; 3=Exit
CASE;

// IF DTL.*CMD key is CF20
IF DTL.*CMD_key = '20';

//?** Traffic Comments
// Call program DSP PD Traffic Comment DF.
CALL PROGRAM(DSP PD Traffic Comment DF) ('PDSKDFR');
PARAMETER(DTL.Load_ID);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?** 20=Display Traffic Comments; 3=Exit
// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

RETURN;

ENDIF;

