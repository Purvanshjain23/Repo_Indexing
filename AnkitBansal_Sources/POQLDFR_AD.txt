// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POQLDFR
// ?Date: 14.08.2025 Time: 03:38:38
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.Count 2 USR = CON.*ZERO
PAR.Count_2_USR = *ZERO;

//?***** Change Log
DO;

//?** 02/26/2009 SLM FP1054 - Remove * out Prt Prd Schedule      PV
//?** 01/26/2009 RMC FP1054 - shift/priority name chg to PS PRoduction
//?**  Warehouse and not updated on this screen
//?** 11/21/2008 slm e00243
//?** new trim * belly reports being added to the f21
//?** 04/14/2008 LJB FP1235
//?** Change hardcoded program name to use variables from prompt screen
//?** Add option to email the production schedule
//?** 04/03/2008 LJB FP1235
//?** Changed parms for Print Production Schedule to call
//?** the Make Sheet with Variance report
//?** 03/09/2006 LJB
//?** Change routine: Rtv Prd Sch Info   PS RT in User:Init SF from
//?** DBF to check for Unit Weight = Zeros. If it is, then skip the
//?** division and just set production qty 1-5 to zeros, as needed.
//?** 08/31/2006 RMC PFS019  print new prod sched pla9pfr
//?** 09/14/2006 RMC PFS019  put pgm name in print sched prompt
//?** 09/01/2006 LJB L60831A  Pass Co# & Whse code to the
//?**    Product Availability program
//?** 04/25/2007 RMC FP1090 Dsp Alloc Inv Qty in orig On Hand Usr field;
//?**    dsp On Hand in new On Hand Usr 2 field
//?**    Did this way so the calcs across will still use the Qty OnHand Usr
//?**    Chgd in : Rtv Sch Item Info 5dy IF - PS Prod Item Schedule  *
//?** 05/25/07 DLY029R JRB Changed Co Num from hard coded to RCD
//?** in 9=Edit BOM
ENDDO;

//?USER: Initialize subfile control

//?First Time Processing
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Warehouse Code = PAR.Warehouse Code
CTL.Warehouse_Code = PAR.Warehouse_Code;

// CTL.Availability Group Code = CON.ALL
CTL.Availability_Group_Code = 'ALL';

// CTL.Print On Schedule = CND.yes
CTL.Print_On_Schedule = 'Y';

// PAR.Print On Schedule = CTL.Print On Schedule
PAR.Print_On_Schedule = CTL.Print_On_Schedule;

// CTL.Active Status Flag = CND.Active
CTL.Active_Status_Flag = 'A';

// PAR.Sel Value 1 USR = CTL.Sel Value 1 USR
PAR.Sel_Value_1_USR = CTL.Sel_Value_1_USR;

// PAR.Sel Value 2 USR = CTL.Sel Value 2 USR
PAR.Sel_Value_2_USR = CTL.Sel_Value_2_USR;

// PAR.Sel Value 3 USR = CTL.Sel Value 3 USR
PAR.Sel_Value_3_USR = CTL.Sel_Value_3_USR;

// PAR.Sel Value 4 USR = CTL.Sel Value 4 USR
PAR.Sel_Value_4_USR = CTL.Sel_Value_4_USR;

// PAR.Sel Value 5 USR = CTL.Sel Value 5 USR
PAR.Sel_Value_5_USR = CTL.Sel_Value_5_USR;

// CTL.USR Day 1 = JOB.*Job date
CTL.USR_Day_1 = JOB.*Job_date;

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_1);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_1_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Day 2 = CTL.USR Day 1 + CON.1 *DAYS
CTL.USR_Day_2 = DATEINCR(CTL.USR_Day_1 1 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_2);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Day 3 = CTL.USR Day 2 + CON.1 *DAYS
CTL.USR_Day_3 = DATEINCR(CTL.USR_Day_2 1 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_3);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_3_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Day 4 = CTL.USR Day 3 + CON.1 *DAYS
CTL.USR_Day_4 = DATEINCR(CTL.USR_Day_3 1 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_4);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_4_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Day 5 = CTL.USR Day 4 + CON.1 *DAYS
CTL.USR_Day_5 = DATEINCR(CTL.USR_Day_4 1 'DY' 1111111 'NONE' 'N' 1);

EXECUTE FUNCTION(Rtv Kill/Prod Day Sts RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1461011;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_5);
PARAMETER(LCL.Kill_Day_Status);
PARAMETER(CTL.Production_Day_5_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Next Prod Date     RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1338022;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.Production_Date_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Plant Date of Last Order EQ PAR.Plant Date of Last Order
 IF DB1.Post_to_G_L_Date = PAR.Post_to_G_L_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Production Day Status is yes
 IF DB1.Production_Day_Status = 'Y';

 // PAR.Production Date = DB1.Post to G/L Date
 PAR.Production_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

 ENDIF;

}


// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?INIT:  Availability Group
CASE;

// IF CTL.Availability Group Code is Blank
IF CTL.Availability_Group_Code = *BLANK;

// CTL.Availability Group Code = CON.ALL
CTL.Availability_Group_Code = 'ALL';

ENDIF;

//?Descriptions:
EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Group Description  RT) TYPE(RTVOBJ) FILE(PDKKREP)          AC1380777;
PARAMETER(CTL.Availability_Group_Code);
PARAMETER(CTL.Availability_Group_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


EXECUTE FUNCTION(RTV Desc/Type/LotTrk  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1471511;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(CTL.Lot_Tracking_Flag);
PARAMETER(WRK.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?All/Active Items
CASE;

// IF CTL.Active Status Flag is Active
IF CTL.Active_Status_Flag = 'A';

// CTL.Condition Name 10 USR = Condition name of CTL.Active Status Flag
CTL.Condition_Name_10_USR = RTVCND(CTL.Active_Status_Flag);

//?All/Active Items
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Condition Name 10 USR = CON.*BLANK
CTL.Condition_Name_10_USR = *BLANK;

ENDIF;

SET CURSOR;

EXECUTE FUNCTION(Val Production Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1542370;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Status_Flag_1_Y_N);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


// PAR.Count 2 USR = CON.*ZERO
PAR.Count_2_USR = *ZERO;

//?USER: Initialize subfile record from DBF record

//?RST:  Company Number
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

// AND CTL.Company Number NE DB1.Company Number
AND CTL.Company_Number <> DB1.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST:  Availability Group
CASE;

// IF CTL.Availability Group Code is NE Blank
IF CTL.Availability_Group_Code <> *BLANK;

// AND CTL.Availability Group Code NE DB1.Availability Group Code
AND CTL.Availability_Group_Code <> DB1.Availability_Group_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?RST:  Warehouse code if entered
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(Val Item Bal Exist    RT) TYPE(RTVOBJ) FILE(CAB0REP)           AC1428561;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Item_Description);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Unit_Weight);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(RCD.Fresh_Chilling_Time);
PARAMETER(RCD.Base_Conv_Loss_Item);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(RCD.Credit_Item_Status);
PARAMETER(WRK.Std_Weight_Head_Var_Ren);
PARAMETER(WRK.Pieces_Per_Head);
PARAMETER(WRK.Department_Code);
PARAMETER(WRK.Group_for_Packaging);
PARAMETER(WRK.Seconds_Item);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
PARAMETER(WRK.Export_Domestic);
PARAMETER(RCD.Print_On_Schedule);
PARAMETER(WRK.Fresh_Inv_Allocation_Seq);
PARAMETER(WRK.Fresh_Sched_As_Ordered);
PARAMETER(WRK.Frozen_Inv_Allocation_Seq);
PARAMETER(WRK.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Output Only:  Day 1
CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

// OR RCD.Base/Conv/Loss Item is Base
OR ( RCD.Base_Conv_Loss_Item = 'B';

// AND RCD.Credit Item Status is yes
AND RCD.Credit_Item_Status = 'Y' );

// OR CTL.Production Day 1 USR is no
OR CTL.Production_Day_1_USR = 'N';

// RCD.Output Only 1 USR = CND.no
RCD.Output_Only_1_USR = 'N';

//?Output Only:  Day 1
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Output Only 1 USR = CND.yes
RCD.Output_Only_1_USR = 'Y';

ENDIF;

//?Output Only:  Day 2
CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

// OR RCD.Base/Conv/Loss Item is Base
OR RCD.Base_Conv_Loss_Item = 'B';

// OR CTL.Production Day 2 USR is no
OR CTL.Production_Day_2_USR = 'N';

// RCD.Output Only 2 USR = CND.no
RCD.Output_Only_2_USR = 'N';

//?Output Only:  Day 2
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Output Only 2 USR = CND.yes
RCD.Output_Only_2_USR = 'Y';

ENDIF;

//?Output Only:  Day 3
CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

// OR RCD.Base/Conv/Loss Item is Base
OR RCD.Base_Conv_Loss_Item = 'B';

// OR CTL.Production Day 3 USR is no
OR CTL.Production_Day_3_USR = 'N';

// RCD.Output Only 3 USR = CND.no
RCD.Output_Only_3_USR = 'N';

//?Output Only:  Day 3
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Output Only 3 USR = CND.yes
RCD.Output_Only_3_USR = 'Y';

ENDIF;

//?Output Only:  Day 4
CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

// OR RCD.Base/Conv/Loss Item is Base
OR RCD.Base_Conv_Loss_Item = 'B';

// OR CTL.Production Day 4 USR is no
OR CTL.Production_Day_4_USR = 'N';

// RCD.Output Only 4 USR = CND.no
RCD.Output_Only_4_USR = 'N';

//?Output Only:  Day 4
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Output Only 4 USR = CND.yes
RCD.Output_Only_4_USR = 'Y';

ENDIF;

//?Output Only:  Day 5
CASE;

// IF PAR.Status Flag 1  Y/N is No
IF PAR.Status_Flag_1_Y_N = 'N';

// OR RCD.Base/Conv/Loss Item is Base
OR RCD.Base_Conv_Loss_Item = 'B';

// OR CTL.Production Day 5 USR is no
OR CTL.Production_Day_5_USR = 'N';

// RCD.Output Only 5 USR = CND.no
RCD.Output_Only_5_USR = 'N';

//?Output Only:  Day 5
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Output Only 5 USR = CND.yes
RCD.Output_Only_5_USR = 'Y';

ENDIF;

EXECUTE FUNCTION(Rtv Sch Item Info 5dy IF) TYPE(EXCINTFUN)                      AC1632437;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(CTL.USR_Day_2);
PARAMETER(CTL.USR_Day_3);
PARAMETER(CTL.USR_Day_4);
PARAMETER(CTL.USR_Day_5);
PARAMETER(RCD.Qty_On_Hand_USR);
PARAMETER(RCD.Qty_Sched_Prod_1_USR);
PARAMETER(RCD.Qty_Produced_USR);
PARAMETER(RCD.Qty_Remaining_Prod_USR);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
PARAMETER(RCD.Qty_EOD_Inv_1_USR);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
PARAMETER(RCD.Qty_EOD_Inv_2_USR);
PARAMETER(RCD.Qty_Prod_Needed_2_USR);
PARAMETER(RCD.Qty_Prod_Adjusted_2_USR);
PARAMETER(RCD.Qty_Sched_Prod_2_USR);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
PARAMETER(RCD.Qty_EOD_Inv_3_USR);
PARAMETER(RCD.Qty_Prod_Needed_3_USR);
PARAMETER(RCD.Qty_Prod_Adjusted_3_USR);
PARAMETER(RCD.Qty_Sched_Prod_3_USR);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
PARAMETER(RCD.Qty_EOD_Inv_4_USR);
PARAMETER(RCD.Qty_Prod_Needed_4_USR);
PARAMETER(RCD.Qty_Prod_Adjusted_4_USR);
PARAMETER(RCD.Qty_Sched_Prod_4_USR);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
PARAMETER(RCD.Qty_EOD_Inv_5_USR);
PARAMETER(RCD.Qty_Prod_Needed_5_USR);
PARAMETER(RCD.Qty_Prod_Adjusted_5_USR);
PARAMETER(RCD.Qty_Sched_Prod_5_USR);
PARAMETER(RCD.PS_Production_Warehouse);
PARAMETER(CTL.Production_Date_USR);
PARAMETER(RCD.Qty_On_Hand_USR_2);
PARAMETER('S');
PARAMETER(RCD.Unit_Weight);
PARAMETER(RCD.Piece_Count_Item);
PARAMETER(RCD.Pieces_Per_Bag);
PARAMETER(RCD.Bags_Per_Unit);
{
 //?Execute internal function

 MOVE *ALL (To: PAR From: CON);

 //?Day 1
 DO;

 EXECUTE FUNCTION(Rtv Lot Tracking Flag RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1506123;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Lot_Tracking_Flag);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?*****
 //?Include aged>=F if orders are sched. FP1090 per STEVE BURKE 05/03/07
 EXECUTE FUNCTION(Rtv Current/Aged 5dys RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1818705;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(LCL.Inv_Current_USR);
 PARAMETER(LCL.Inv_Aged_USR);
 PARAMETER(LCL.Not_Used_Qty);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Call program CLC Age Code #ofDays  XF.
  CALL PROGRAM(CLC Age Code #ofDays  XF) ('PNO6XFR');
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.@Number_of_Days_to_Age);

  CASE;

  // IF LCL.@Number of Days to Age is 5 day to 121 days & over
  IF LCL.@Number_of_Days_to_Age >= 5;
  AND LCL.@Number_of_Days_to_Age <= 9999;

  EXECUTE FUNCTION(Rtv Inv Allocated-Dy  RT) TYPE(RTVOBJ) FILE(POB5CPP)           AC1818782;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(LCL.OD_Quantity_Inv_Sched);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?DOC: 05/03/07 Change Log
   DO;

   //?05/03/07 New RTV to see if aged product is allocated to orders   FP1090
   //?05/04/07 If order is shipped, dont add to par                   FP1090
   ENDDO;

   EXECUTE FUNCTION(RTV Last Event Code    RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1393013;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(LCL.Event_Number);
   PARAMETER(LCL.Event_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Event Code is GE than Shipped
   IF LCL.Event_Code >= '04';

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.OD Quantity Inv Sched = PAR.OD Quantity Inv Sched + DB1.OD Quantity Inv Sched
   PAR.OD_Quantity_Inv_Sched = PAR.OD_Quantity_Inv_Sched + DB1.OD_Quantity_Inv_Sched;

   ENDIF;

  }

  // PAR.Inv Aged              USR = PAR.Inv Aged              USR + LCL.OD Quantity Inv Sched
  PAR.Inv_Aged_USR = PAR.Inv_Aged_USR + LCL.OD_Quantity_Inv_Sched;

  //?Aged qty thats not usable
  // Compute:Aged qty not used
  PAR.Not_Used_Qty = ( DB1.Quantity_on_Hand_UOM1 - LCL.OD_Quantity_Inv_Sched )
  - PAR.Not_Used_Qty;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Inv Current           USR = PAR.Inv Current           USR + DB1.Quantity on Hand - U/M1
  PAR.Inv_Current_USR = PAR.Inv_Current_USR + DB1.Quantity_on_Hand_UOM1;

  ENDIF;

 }

 // PAR.Qty On-Hand USR 2 = LCL.Inv Current           USR
 PAR.Qty_On_Hand_USR_2 = LCL.Inv_Current_USR;

 // PAR.Qty On-Hand USR = PAR.Qty On-Hand USR 2 + LCL.Inv Aged              USR
 PAR.Qty_On_Hand_USR = PAR.Qty_On_Hand_USR_2 + LCL.Inv_Aged_USR;

 //?*****
 //?If inventory qty is less than zero then make zero
 CASE;

 // IF PAR.Qty On-Hand USR is LT Zero
 IF PAR.Qty_On_Hand_USR < *ZERO;

 // PAR.Qty On-Hand USR = CON.*ZERO
 PAR.Qty_On_Hand_USR = *ZERO;

 ENDIF;

 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER('S');
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 //?Shift/Priority
 CASE;

 // IF PAR.USR Day 1 EQ PAR.Production Date USR
 IF PAR.USR_Day_1 = PAR.Production_Date_USR;

 // PAR.PS Shift/Priority = LCL.PS Shift/Priority
 PAR.PS_Production_Warehouse = LCL.PS_Production_Warehouse;

 ENDIF;

 //?Scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_1_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?Scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** If unit wgt=0, skip the divide, default Qty Sched Prod=0  LJB 3/9/06
 CASE;

 // IF PAR.Unit Weight is Not equal zero
 IF PAR.Unit_Weight <> *ZERO;

 // PAR.Qty Sched Prod 1 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_1_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 1 USR = CND.EQ Zero
 PAR.Qty_Sched_Prod_1_USR = *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv Actual Production RT) TYPE(RTVOBJ) FILE(CAB7CPP)           AC1377968;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(WRK.Production_Weight_USR);
 PARAMETER(PAR.Qty_Produced_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Production Weight USR = PAR.Production Weight USR + DB1.Transaction Weight
  PAR.Production_Weight_USR = PAR.Production_Weight_USR + DB1.Transaction_Weight;

  // PAR.Production Quantity USR = PAR.Production Quantity USR + DB1.Transaction Quantity
  PAR.Production_Quantity_USR = PAR.Production_Quantity_USR + DB1.Transaction_Quantity;

 }

 //?Remaining to Produce Quantity
 CASE;

 // IF PAR.Qty Sched Prod 1 USR GT PAR.Qty Produced USR
 IF PAR.Qty_Sched_Prod_1_USR > PAR.Qty_Produced_USR;

 // PAR.Qty Remaining Prod USR = PAR.Qty Sched Prod 1 USR - PAR.Qty Produced USR
 PAR.Qty_Remaining_Prod_USR = PAR.Qty_Sched_Prod_1_USR - PAR.Qty_Produced_USR;

 //?Remaining to Produce Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Remaining Prod USR = CON.*ZERO
 PAR.Qty_Remaining_Prod_USR = *ZERO;

 ENDIF;

 //?Rtv sched qty and wt, which is what is was doing FP1054 4/15/09
 EXECUTE FUNCTION(Rtv Sched Ship ALL    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1515089;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_1);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_1_USR);
 PARAMETER('Y');
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Status Flag 10 Y/N is Yes
  IF PAR.Status_Flag_10_Y_N = 'Y';

  //?FP1054 if Yes, accum Scheduled qty & wgt as it was before
  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?FP1054 if no, accum Ordered & qty & wgt
  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 // EOD Inventory
 PAR.Qty_EOD_Inv_1_USR = ( PAR.Qty_On_Hand_USR + PAR.Qty_Remaining_Prod_USR )
 - PAR.Qty_Sched_Ord_1_USR;

 ENDDO;

 //?Day 2
 DO;

 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 //?Shift/Priority
 CASE;

 // IF PAR.USR Day 2 EQ PAR.Production Date USR
 IF PAR.USR_Day_2 = PAR.Production_Date_USR;

 // PAR.PS Shift/Priority = LCL.PS Shift/Priority
 PAR.PS_Production_Warehouse = LCL.PS_Production_Warehouse;

 ENDIF;

 //?Scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_2_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?Scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** If unit wgt=0, skip the divide, default Qty Sched Prod=0
 CASE;

 // IF PAR.Unit Weight is Not equal zero
 IF PAR.Unit_Weight <> *ZERO;

 // PAR.Qty Sched Prod 2 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_2_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 //?** If unit wgt=0, skip the divide, default Qty Sched Prod=0
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 2 USR = CND.EQ Zero
 PAR.Qty_Sched_Prod_2_USR = *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_2);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_2_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 // EOD Inventory
 PAR.Qty_EOD_Inv_2_USR = ( PAR.Qty_EOD_Inv_1_USR + PAR.Qty_Sched_Prod_2_USR )
 - PAR.Qty_Sched_Ord_2_USR;

 CASE;

 // IF PAR.Qty EOD Inv 2 USR is LT Zero
 IF PAR.Qty_EOD_Inv_2_USR < *ZERO;

 // PAR.Qty Prod Needed 2 USR = PAR.Qty EOD Inv 2 USR * CON.-1 *Rounded
 PAR.Qty_Prod_Needed_2_USR = PAR.Qty_EOD_Inv_2_USR * -1 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Prod Needed 2 USR = CON.*ZERO
 PAR.Qty_Prod_Needed_2_USR = *ZERO;

 ENDIF;

 // PAR.Qty Prod Adjusted 2 USR = PAR.Qty Sched Prod 2 USR + PAR.Qty Prod Needed 2 U
 PAR.Qty_Prod_Adjusted_2_USR = PAR.Qty_Sched_Prod_2_USR + PAR.Qty_Prod_Needed_2_USR;

 ENDDO;

 //?Day 3
 DO;

 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 //?Shift/Priority
 CASE;

 // IF PAR.USR Day 3 EQ PAR.Production Date USR
 IF PAR.USR_Day_3 = PAR.Production_Date_USR;

 // PAR.PS Shift/Priority = LCL.PS Shift/Priority
 PAR.PS_Production_Warehouse = LCL.PS_Production_Warehouse;

 ENDIF;

 //?Scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_3_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?Scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** If unit wgt=0, skip the divide, default Qty Sched Prod=0    LJB 3/9/06
 CASE;

 // IF PAR.Unit Weight is Not equal zero
 IF PAR.Unit_Weight <> *ZERO;

 // PAR.Qty Sched Prod 3 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_3_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 //?** If unit wgt=0, skip the divide, default Qty Sched Prod=0    LJB 3/9/06
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 3 USR = CND.EQ Zero
 PAR.Qty_Sched_Prod_3_USR = *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_3);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_3_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 // EOD Inventory
 PAR.Qty_EOD_Inv_3_USR = ( PAR.Qty_EOD_Inv_2_USR + PAR.Qty_Sched_Prod_3_USR )
 - PAR.Qty_Sched_Ord_3_USR;

 CASE;

 // IF PAR.Qty EOD Inv 3 USR is LT Zero
 IF PAR.Qty_EOD_Inv_3_USR < *ZERO;

 // PAR.Qty Prod Needed 3 USR = PAR.Qty EOD Inv 3 USR * CON.-1 *Rounded
 PAR.Qty_Prod_Needed_3_USR = PAR.Qty_EOD_Inv_3_USR * -1 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Prod Needed 3 USR = CON.*ZERO
 PAR.Qty_Prod_Needed_3_USR = *ZERO;

 ENDIF;

 // PAR.Qty Prod Adjusted 3 USR = PAR.Qty Sched Prod 3 USR + PAR.Qty Prod Needed 3 U
 PAR.Qty_Prod_Adjusted_3_USR = PAR.Qty_Sched_Prod_3_USR + PAR.Qty_Prod_Needed_3_USR;

 ENDDO;

 //?Day 4
 DO;

 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 //?Shift/Priority
 CASE;

 // IF PAR.USR Day 4 EQ PAR.Production Date USR
 IF PAR.USR_Day_4 = PAR.Production_Date_USR;

 // PAR.PS Shift/Priority = LCL.PS Shift/Priority
 PAR.PS_Production_Warehouse = LCL.PS_Production_Warehouse;

 ENDIF;

 //?Scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_4_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?Scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** If unit wgt=0, skip the divide, default Qty Sched Prod=0    LJB 3/9/06
 CASE;

 // IF PAR.Unit Weight is Not equal zero
 IF PAR.Unit_Weight <> *ZERO;

 // PAR.Qty Sched Prod 4 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_4_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 //?** If unit wgt=0, skip the divide, default Qty Sched Prod=0    LJB 3/9/06
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 4 USR = CND.EQ Zero
 PAR.Qty_Sched_Prod_4_USR = *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_4);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_4_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 // EOD Inventory
 PAR.Qty_EOD_Inv_4_USR = ( PAR.Qty_EOD_Inv_3_USR + PAR.Qty_Sched_Prod_4_USR )
 - PAR.Qty_Sched_Ord_4_USR;

 CASE;

 // IF PAR.Qty EOD Inv 4 USR is LT Zero
 IF PAR.Qty_EOD_Inv_4_USR < *ZERO;

 // PAR.Qty Prod Needed 4 USR = PAR.Qty EOD Inv 4 USR * CON.-1 *Rounded
 PAR.Qty_Prod_Needed_4_USR = PAR.Qty_EOD_Inv_4_USR * -1 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Prod Needed 4 USR = CON.*ZERO
 PAR.Qty_Prod_Needed_4_USR = *ZERO;

 ENDIF;

 // PAR.Qty Prod Adjusted 4 USR = PAR.Qty Sched Prod 4 USR + PAR.Qty Prod Needed 4 USR
 PAR.Qty_Prod_Adjusted_4_USR = PAR.Qty_Sched_Prod_4_USR + PAR.Qty_Prod_Needed_4_USR;

 ENDDO;

 //?Day 5
 DO;

 EXECUTE FUNCTION(Rtv Production        RT) TYPE(RTVOBJ) FILE(PDI8CPP)           AC1459979;
 PARAMETER(PAR.Company_Number);
 PARAMETER('P');
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Weight_Production_USR);
 PARAMETER(PAR.Pieces_Production_USR);
 PARAMETER(LCL.PS_Production_Warehouse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // Weight Production
  PAR.Weight_Production_USR = ( ( DB1.PS_Weight_Standard + DB1.PS_Weight_Prod_Adj )
  - DB1.PS_Weight_Converted ) - DB1.PS_Weight_Whs_Tfr_Adj;

  // Pieces Production
  PAR.Pieces_Production_USR = ( ( DB1.PS_Pieces_Standard + DB1.PS_Pieces_Prod_Adj )
  - DB1.PS_Pieces_Converted ) - DB1.PS_Pieces_Whs_Tfr_Adj;

  // PAR.PS Shift/Priority = DB1.PS Shift/Priority
  PAR.PS_Production_Warehouse = DB1.PS_Production_Warehouse;

 }

 //?Shift/Priority
 CASE;

 // IF PAR.USR Day 5 EQ PAR.Production Date USR
 IF PAR.USR_Day_5 = PAR.Production_Date_USR;

 // PAR.PS Shift/Priority = LCL.PS Shift/Priority
 PAR.PS_Production_Warehouse = LCL.PS_Production_Warehouse;

 ENDIF;

 //?Scheduled Production Quantity
 CASE;

 // IF PAR.Piece Count Item is yes
 IF PAR.Piece_Count_Item = 'Y';

 // Qty Sched Prod
 PAR.Qty_Sched_Prod_5_USR = PAR.Pieces_Production_USR / ( PAR.Pieces_Per_Bag
 * PAR.Bags_Per_Unit 'H' ) 'H';

 //?Scheduled Production Quantity
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?** If unit wgt=0, skip the divide, default Qty Sched Prod=0  LJB 3/9/06
 CASE;

 // IF PAR.Unit Weight is Not equal zero
 IF PAR.Unit_Weight <> *ZERO;

 // PAR.Qty Sched Prod 5 USR = PAR.Weight Production USR / PAR.Unit Weight *Rounded
 PAR.Qty_Sched_Prod_5_USR = PAR.Weight_Production_USR / PAR.Unit_Weight 'H';

 //?** If unit wgt=0, skip the divide, default Qty Sched Prod=0  LJB 3/9/06
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Sched Prod 5 USR = CND.EQ Zero
 PAR.Qty_Sched_Prod_5_USR = *ZERO;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Rtv Sched Shipments   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1425201;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.USR_Day_5);
 PARAMETER(WRK.Weight_Scheduled_SUM);
 PARAMETER(PAR.Qty_Sched_Ord_5_USR);
 PARAMETER(PAR.Ord_Sch_Sts_USR);
 {
  //?USER: Initialize routine

  // PAR.Weight Scheduled SUM = CON.*ZERO
  PAR.Weight_Scheduled_SUM = *ZERO;

  // PAR.Quantity Scheduled SUM = CON.*ZERO
  PAR.Quantity_Scheduled_SUM = *ZERO;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Hdr Sts,BillActTy RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1946282;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Header_Status);
  PARAMETER(WRK.Billing_Activity_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF WRK.Header Status is Not Comp/Canc/Conf
  IF WRK.Header_Status = 'L'/'A'/'E'/'H';

  // AND WRK.Billing Activity Type is Invoice or Transfer
  AND WRK.Billing_Activity_Type = '1'/'4';

  CASE;

  // IF PAR.Ord/Sch Sts USR is Scheduled
  IF PAR.Ord_Sch_Sts_USR = 'S';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Scheduled
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Scheduled;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Scheduled
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Scheduled;

  // IF PAR.Ord/Sch Sts USR is Ordered
  IF PAR.Ord_Sch_Sts_USR = 'O';

  // PAR.Weight Scheduled SUM = PAR.Weight Scheduled SUM + DB1.Weight Ordered
  PAR.Weight_Scheduled_SUM = PAR.Weight_Scheduled_SUM + DB1.Weight_Ordered;

  // PAR.Quantity Scheduled SUM = PAR.Quantity Scheduled SUM + DB1.Quantity Ordered
  PAR.Quantity_Scheduled_SUM = PAR.Quantity_Scheduled_SUM + DB1.Quantity_Ordered;

  ENDIF;

  ENDIF;

 }

 // EOD Inventory
 PAR.Qty_EOD_Inv_5_USR = ( PAR.Qty_EOD_Inv_4_USR + PAR.Qty_Sched_Prod_5_USR )
 - PAR.Qty_Sched_Ord_5_USR;

 CASE;

 // IF PAR.Qty EOD Inv 5 USR is LT Zero
 IF PAR.Qty_EOD_Inv_5_USR < *ZERO;

 // PAR.Qty Prod Needed 5 USR = PAR.Qty EOD Inv 5 USR * CON.-1 *Rounded
 PAR.Qty_Prod_Needed_5_USR = PAR.Qty_EOD_Inv_5_USR * -1 'H';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Qty Prod Needed 5 USR = CON.*ZERO
 PAR.Qty_Prod_Needed_5_USR = *ZERO;

 ENDIF;

 // PAR.Qty Prod Adjusted 5 USR = PAR.Qty Sched Prod 5 USR + PAR.Qty Prod Needed 5 USR
 PAR.Qty_Prod_Adjusted_5_USR = PAR.Qty_Sched_Prod_5_USR + PAR.Qty_Prod_Needed_5_USR;

 ENDDO;

 //?***** Change Log
 //?** 03/09/2006 LJB
 //?** If par unit weight is zeros, skip the division and just
 //?** set par Qty Sched Prod 1 to zeros to prevent divide by zero error.
 //?*****
}


// RCD.Qty Remaining Hold USR = RCD.Qty Remaining Prod USR
RCD.Qty_Remaining_Hold_USR = RCD.Qty_Remaining_Prod_USR;

// RCD.Qty Prod Adj Hold 2 USR = RCD.Qty Sched Prod 2 USR
RCD.Qty_Prod_Adj_Hold_2_USR = RCD.Qty_Sched_Prod_2_USR;

// RCD.Qty Prod Adj Hold 3 USR = RCD.Qty Sched Prod 3 USR
RCD.Qty_Prod_Adj_Hold_3_USR = RCD.Qty_Sched_Prod_3_USR;

// RCD.Qty Prod Adj Hold 4 USR = RCD.Qty Sched Prod 4 USR
RCD.Qty_Prod_Adj_Hold_4_USR = RCD.Qty_Sched_Prod_4_USR;

// RCD.Qty Prod Adj Hold 5 USR = RCD.Qty Sched Prod 5 USR
RCD.Qty_Prod_Adj_Hold_5_USR = RCD.Qty_Sched_Prod_5_USR;

//?Sel:  EOD Inv 1
CASE;

// IF CTL.Sel Value 1 USR is Negative
IF CTL.Sel_Value_1_USR = '-';

CASE;

// IF RCD.Qty EOD Inv 1 USR is GE Zero
IF RCD.Qty_EOD_Inv_1_USR >= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel:  EOD Inv 1
// IF CTL.Sel Value 1 USR is Positive
IF CTL.Sel_Value_1_USR = '+';

CASE;

// IF RCD.Qty EOD Inv 1 USR is LE Zero
IF RCD.Qty_EOD_Inv_1_USR <= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel:  EOD Inv 1
// IF CTL.Sel Value 1 USR is Zero
IF CTL.Sel_Value_1_USR = '0';

CASE;

// IF RCD.Qty EOD Inv 1 USR is NE Zero
IF RCD.Qty_EOD_Inv_1_USR <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel:  EOD Inv 2
CASE;

// IF CTL.Sel Value 2 USR is Negative
IF CTL.Sel_Value_2_USR = '-';

CASE;

// IF RCD.Qty EOD Inv 2 USR is GE Zero
IF RCD.Qty_EOD_Inv_2_USR >= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel:  EOD Inv 2
// IF CTL.Sel Value 2 USR is Positive
IF CTL.Sel_Value_2_USR = '+';

CASE;

// IF RCD.Qty EOD Inv 2 USR is LE Zero
IF RCD.Qty_EOD_Inv_2_USR <= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel:  EOD Inv 2
// IF CTL.Sel Value 2 USR is Zero
IF CTL.Sel_Value_2_USR = '0';

CASE;

// IF RCD.Qty EOD Inv 2 USR is NE Zero
IF RCD.Qty_EOD_Inv_2_USR <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel:  EOD Inv 3
CASE;

// IF CTL.Sel Value 3 USR is Negative
IF CTL.Sel_Value_3_USR = '-';

CASE;

// IF RCD.Qty EOD Inv 3 USR is GE Zero
IF RCD.Qty_EOD_Inv_3_USR >= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel:  EOD Inv 3
// IF CTL.Sel Value 3 USR is Positive
IF CTL.Sel_Value_3_USR = '+';

CASE;

// IF RCD.Qty EOD Inv 3 USR is LE Zero
IF RCD.Qty_EOD_Inv_3_USR <= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel:  EOD Inv 3
// IF CTL.Sel Value 3 USR is Zero
IF CTL.Sel_Value_3_USR = '0';

CASE;

// IF RCD.Qty EOD Inv 3 USR is NE Zero
IF RCD.Qty_EOD_Inv_3_USR <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel:  EOD Inv 4
CASE;

// IF CTL.Sel Value 4 USR is Negative
IF CTL.Sel_Value_4_USR = '-';

CASE;

// IF RCD.Qty EOD Inv 4 USR is GE Zero
IF RCD.Qty_EOD_Inv_4_USR >= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel:  EOD Inv 4
// IF CTL.Sel Value 4 USR is Positive
IF CTL.Sel_Value_4_USR = '+';

CASE;

// IF RCD.Qty EOD Inv 4 USR is LE Zero
IF RCD.Qty_EOD_Inv_4_USR <= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel:  EOD Inv 4
// IF CTL.Sel Value 4 USR is Zero
IF CTL.Sel_Value_4_USR = '0';

CASE;

// IF RCD.Qty EOD Inv 4 USR is NE Zero
IF RCD.Qty_EOD_Inv_4_USR <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel:  EOD Inv 5
CASE;

// IF CTL.Sel Value 5 USR is Negative
IF CTL.Sel_Value_5_USR = '-';

CASE;

// IF RCD.Qty EOD Inv 5 USR is GE Zero
IF RCD.Qty_EOD_Inv_5_USR >= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel:  EOD Inv 5
// IF CTL.Sel Value 5 USR is Positive
IF CTL.Sel_Value_5_USR = '+';

CASE;

// IF RCD.Qty EOD Inv 5 USR is LE Zero
IF RCD.Qty_EOD_Inv_5_USR <= *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel:  EOD Inv 5
// IF CTL.Sel Value 5 USR is Zero
IF CTL.Sel_Value_5_USR = '0';

CASE;

// IF RCD.Qty EOD Inv 5 USR is NE Zero
IF RCD.Qty_EOD_Inv_5_USR <> *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel:  Print on Schedule
CASE;

// IF CTL.Print On Schedule is Y/N Values
IF CTL.Print_On_Schedule = 'N'/'Y';

// AND CTL.Print On Schedule NE RCD.Print On Schedule
AND CTL.Print_On_Schedule <> RCD.Print_On_Schedule;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel:  All/Active Items
CASE;

// IF CTL.Active Status Flag is Active
IF CTL.Active_Status_Flag = 'A';

//?Omt:  All Quantities = Zero (Column 1 - 5)
CASE;

// IF RCD.Qty On-Hand USR is EQ Zero
IF RCD.Qty_On_Hand_USR = *ZERO;

// AND RCD.Qty Remaining Prod USR is EQ Zero
AND RCD.Qty_Remaining_Prod_USR = *ZERO;

// AND RCD.Qty Sched Ord 1 USR is EQ Zero
AND RCD.Qty_Sched_Ord_1_USR = *ZERO;

// AND RCD.Qty EOD Inv 1 USR is EQ Zero
AND RCD.Qty_EOD_Inv_1_USR = *ZERO;

// AND RCD.Qty Sched Prod 2 USR is EQ Zero
AND RCD.Qty_Sched_Prod_2_USR = *ZERO;

// AND RCD.Qty Sched Ord 2 USR is EQ Zero
AND RCD.Qty_Sched_Ord_2_USR = *ZERO;

// AND RCD.Qty EOD Inv 2 USR is EQ Zero
AND RCD.Qty_EOD_Inv_2_USR = *ZERO;

// AND RCD.Qty Sched Prod 3 USR is EQ Zero
AND RCD.Qty_Sched_Prod_3_USR = *ZERO;

// AND RCD.Qty Sched Ord 3 USR is EQ Zero
AND RCD.Qty_Sched_Ord_3_USR = *ZERO;

// AND RCD.Qty EOD Inv 3 USR is EQ Zero
AND RCD.Qty_EOD_Inv_3_USR = *ZERO;

CASE;

// IF RCD.Qty Sched Prod 4 USR is EQ Zero
IF RCD.Qty_Sched_Prod_4_USR = *ZERO;

// AND RCD.Qty Sched Ord 4 USR is EQ Zero
AND RCD.Qty_Sched_Ord_4_USR = *ZERO;

// AND RCD.Qty EOD Inv 4 USR is EQ Zero
AND RCD.Qty_EOD_Inv_4_USR = *ZERO;

// AND RCD.Qty Sched Prod 5 USR is EQ Zero
AND RCD.Qty_Sched_Prod_5_USR = *ZERO;

// AND RCD.Qty Sched Ord 5 USR is EQ Zero
AND RCD.Qty_Sched_Ord_5_USR = *ZERO;

// AND RCD.Qty EOD Inv 5 USR is EQ Zero
AND RCD.Qty_EOD_Inv_5_USR = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Count 2 USR is Zero
IF PAR.Count_2_USR = *ZERO;

// PAR.USR Item Code = RCD.Item Code
PAR.USR_Item_Code = RCD.Item_Code;

// PAR.Count 2 USR = PAR.Count 2 USR + CON.1
PAR.Count_2_USR = PAR.Count_2_USR + 1;

ENDIF;

// Call program Rtv First Consumed Itm XF.
CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Consumed_Item_Code);

//?USER: Process subfile control (Pre-confirm)

//?F4=Prompt  (Company/Warehouse/PA Group)
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number
IF PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Company_Number);

// IF PGM.*Cursor field <IS> CTL.Availability Group Code
IF PGM.*Cursor_field = CTL.Availability_Group_Code;

// Call program SEL Avail Group        SR.
CALL PROGRAM(SEL Avail Group        SR) ('PDDVSRR');
PARAMETER(CTL.Availability_Group_Code);

ENDIF;

ENDIF;

//?Val:  Company Number
CASE;

// IF CTL.Company Number is Equal to zero
IF CTL.Company_Number = *ZERO;

// Send error message - 'Company Number is required.'
ERROR(USR2183);
MSGPARM(CTL.Company_Number);

ENDIF;

//?Val:  Warehouse Code
CASE;

// IF CTL.Warehouse Code is Warehouse Code Blank
IF CTL.Warehouse_Code = *BLANK;

// CTL.Warehouse Description = CON.*ALL
CTL.Warehouse_Description = *ALL;

//?Val:  Warehouse Code
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Shipping Co WHS   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714721;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Warehouse Description is equal to blank
IF WRK.Warehouse_Description = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(CTL.Warehouse_Code);
MSGPARM(CTL.Company_Number);

ENDIF;

EXECUTE FUNCTION(Rtv Warehouse/type Val RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1469740;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.Warehouse_Type);
PARAMETER(PAR.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 // PAR.Warehouse Type = DB1.Warehouse Type
 PAR.Warehouse_Type = DB1.Warehouse_Type;

 QUIT;

}


CASE;

// IF PAR.Record Found USR is Record Not Found
IF PAR.Record_Found_USR = 'N';

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Chg:  Warehouse Code
CASE;

// IF PAR.Warehouse Code NE CTL.Warehouse Code
IF PAR.Warehouse_Code <> CTL.Warehouse_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Warehouse Code = CTL.Warehouse Code
PAR.Warehouse_Code = CTL.Warehouse_Code;

QUIT;

ENDIF;

//?Chg:  Print on Schedule
CASE;

// IF PAR.Print On Schedule NE CTL.Print On Schedule
IF PAR.Print_On_Schedule <> CTL.Print_On_Schedule;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Print On Schedule = CTL.Print On Schedule
PAR.Print_On_Schedule = CTL.Print_On_Schedule;

QUIT;

ENDIF;

//?Chg:  EOD Inv 1 Select
CASE;

// IF PAR.Sel Value 1 USR NE CTL.Sel Value 1 USR
IF PAR.Sel_Value_1_USR <> CTL.Sel_Value_1_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Sel Value 1 USR = CTL.Sel Value 1 USR
PAR.Sel_Value_1_USR = CTL.Sel_Value_1_USR;

QUIT;

ENDIF;

//?Chg:  EOD Inv 2 Select
CASE;

// IF PAR.Sel Value 2 USR NE CTL.Sel Value 2 USR
IF PAR.Sel_Value_2_USR <> CTL.Sel_Value_2_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Sel Value 2 USR = CTL.Sel Value 2 USR
PAR.Sel_Value_2_USR = CTL.Sel_Value_2_USR;

QUIT;

ENDIF;

//?Chg:  EOD Inv 3 Select
CASE;

// IF PAR.Sel Value 3 USR NE CTL.Sel Value 3 USR
IF PAR.Sel_Value_3_USR <> CTL.Sel_Value_3_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Sel Value 3 USR = CTL.Sel Value 3 USR
PAR.Sel_Value_3_USR = CTL.Sel_Value_3_USR;

QUIT;

ENDIF;

//?Chg:  EOD Inv 4 Select
CASE;

// IF PAR.Sel Value 4 USR NE CTL.Sel Value 4 USR
IF PAR.Sel_Value_4_USR <> CTL.Sel_Value_4_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Sel Value 4 USR = CTL.Sel Value 4 USR
PAR.Sel_Value_4_USR = CTL.Sel_Value_4_USR;

QUIT;

ENDIF;

//?Chg:  EOD Inv 5 Select
CASE;

// IF PAR.Sel Value 5 USR NE CTL.Sel Value 5 USR
IF PAR.Sel_Value_5_USR <> CTL.Sel_Value_5_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PAR.Sel Value 5 USR = CTL.Sel Value 5 USR
PAR.Sel_Value_5_USR = CTL.Sel_Value_5_USR;

QUIT;

ENDIF;

SET CURSOR;

//?USER: Process subfile record (Pre-confirm)

//?2=Edit Production Adjustment
CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

// Call program Edt Prod Adjustments  DF.
CALL PROGRAM(Edt Prod Adjustments  DF) ('PORWDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Consumed_Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(RCD.Item_Code);

ENDIF;

//?5=Display Item Warehouse inquiry Detail
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Description_Line_One);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Dsp Item/Whse Inqy Dtl DF.
CALL PROGRAM(Dsp Item/Whse Inqy Dtl DF) ('ICQ9DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(RCD.UOM_Primary);
PARAMETER(RCD.Conversion_Factor_1);
PARAMETER(RCD.Operation_Factor_1);
PARAMETER(RCD.UOM_Second);
PARAMETER(RCD.Conversion_Factor_2);
PARAMETER(RCD.Operation_Factor_2);
PARAMETER(RCD.UOM_Third);
PARAMETER(RCD.Unit_Weight);
PARAMETER(RCD.Production_Date_Control);
PARAMETER(RCD.Catch_Weight_Status);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.Warehouse_Description);
PARAMETER(PAR.Name);
PARAMETER(LCL.*Initial_call);

ENDIF;

//?7=Edit Comments
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Edt Prod Sched Commnt EF.
CALL PROGRAM(Edt Prod Sched Commnt EF) ('PDSNEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(PAR.Name);
PARAMETER(RCD.Item_Description);

ENDIF;

//?8=Display Item Orders
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// LCL.*Initial call = CND.*YES
LCL.*Initial_call = 'Y';

// Call program Zzz Item Orders       DF.
CALL PROGRAM(Zzz Item Orders       DF) ('PDO7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.USR_Day_1);
PARAMETER(PAR.Name);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.*Initial_call);
PARAMETER('FR');

ENDIF;

//?9=Display BOM
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program DSP Bill of Material   ET.
CALL PROGRAM(DSP Bill of Material   ET) ('PPVMETR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);

ENDIF;

//?10=Work With Item Allocation
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

// Call program WW Inv Allocation     DF.
CALL PROGRAM(WW Inv Allocation     DF) ('POP5DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(*ZERO);

ENDIF;

//?11=Work With Order Production Sched
CASE;

// IF RCD.*SFLSEL is Option 11
IF RCD.*SFLSEL = '11';

// Retrieve message - 'Inv=&1 Prd/Ord/EOD=&2/&3/&4 - &7/&5/&6 - &10/&8/&9 - &13/&11/&12 - &16/&14/&1
LCL.Message_USR = RTVMSG(USR3275);
PARAMETER(RCD.Qty_On_Hand_USR);
PARAMETER(RCD.Qty_Remaining_Prod_USR);
PARAMETER(RCD.Qty_Sched_Ord_1_USR);
PARAMETER(RCD.Qty_EOD_Inv_1_USR);
PARAMETER(RCD.Qty_Sched_Ord_2_USR);
PARAMETER(RCD.Qty_EOD_Inv_2_USR);
PARAMETER(RCD.Qty_Sched_Prod_2_USR);
PARAMETER(RCD.Qty_Sched_Ord_3_USR);
PARAMETER(RCD.Qty_EOD_Inv_3_USR);
PARAMETER(RCD.Qty_Sched_Prod_3_USR);
PARAMETER(RCD.Qty_Sched_Ord_4_USR);
PARAMETER(RCD.Qty_EOD_Inv_4_USR);
PARAMETER(RCD.Qty_Sched_Prod_4_USR);
PARAMETER(RCD.Qty_Sched_Ord_5_USR);
PARAMETER(RCD.Qty_EOD_Inv_5_USR);
PARAMETER(RCD.Qty_Sched_Prod_5_USR);

// Call program WW OrdPrdSch Edit     DF.
CALL PROGRAM(WW OrdPrdSch Edit     DF) ('POQJDFR');
PARAMETER(RCD.Consumed_Item_Code);
PARAMETER(RCD.PS_Production_Warehouse);
PARAMETER(RCD.Item_Code);
PARAMETER(LCL.Message_USR);

ENDIF;

//?12=Display Scheduled Item Orders
CASE;

// IF RCD.*SFLSEL is Option 12
IF RCD.*SFLSEL = '12';

// Call program Dsp Sched Transfers   DF.
CALL PROGRAM(Dsp Sched Transfers   DF) ('PDU0DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(PAR.Name);

ENDIF;

//?13=Display Base Item Orders
CASE;

// IF RCD.*SFLSEL is Option 13
IF RCD.*SFLSEL = '13';

EXECUTE FUNCTION(Dsp Base Item Orders   RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1565418;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(CTL.Warehouse_Code);
{
 //?USER: Process Data record

 // Call program Dsp Base Item Orders  DF.
 CALL PROGRAM(Dsp Base Item Orders  DF) ('PDU3DFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(DB1.Item_Code);

}


ENDIF;

//?15=Display Item Specifications
CASE;

// IF RCD.*SFLSEL is Option 15
IF RCD.*SFLSEL = '15';

// Call program Dsp Item Specs        DR.
CALL PROGRAM(Dsp Item Specs        DR) ('POQMD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);

ENDIF;

// WRK.Numeral 1             USR = CON.1
WRK.Numeral_1_USR = 1;

CASE;

// IF WRK.Numeral 1             USR EQ WRK.Numeral 1             USR
IF WRK.Numeral_1_USR = WRK.Numeral_1_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process command keys

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F10=All/Active Items
CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

CASE;

// IF CTL.Active Status Flag is Active
IF CTL.Active_Status_Flag = 'A';

// CTL.Active Status Flag = CND.Blank
CTL.Active_Status_Flag = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Active Status Flag = CND.Active
CTL.Active_Status_Flag = 'A';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F13=WW Production Hold Orders
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

// Call program WW Prod Order Hold     DF.
CALL PROGRAM(WW Prod Order Hold     DF) ('PDVLDFR');

ENDIF;

//?F15=Edit PA Group Comment
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// Call program Zzz Avail Group Comnt EF.
CALL PROGRAM(Zzz Avail Group Comnt EF) ('POX8EFR');
PARAMETER(CTL.Availability_Group_Code);

ENDIF;

//?F16=WW PA
CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

//?** Pass Co# & Whse code                   09/01/2006 LJB workin
// Call program WW Product Availablty DF.
CALL PROGRAM(WW Product Availablty DF) ('PDFPDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Warehouse_Code);

ENDIF;

//?Add the trim and belly use new prompt screen
//?F21=Print Schedule
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.Production Date = CTL.USR Day 2
PAR.Production_Date = CTL.USR_Day_2;

//?Production Type
CASE;

// IF PAR.Production Date EQ JOB.*Job date
IF PAR.Production_Date = JOB.*Job_date;

// WRK.Production Type = CND.Schedule
WRK.Production_Type = 'S';

//?Production Type
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Production Type = CND.Plan
WRK.Production_Type = 'P';

ENDIF;

// PAR.Display Prt Opt Pmt USR = CND.*YES
PAR.Display_Prt_Opt_Pmt_USR = *YES;

// Call program Prt Prd Schedule Rpts PV.
CALL PROGRAM(Prt Prd Schedule Rpts PV) ('PMAQPVR');
PARAMETER(PAR.Production_Date);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Display_Prt_Opt_Pmt_USR);
PARAMETER(CTL.Company_Number);
PARAMETER(WRK.Production_Type);
PARAMETER('Production Schedule');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(1);

ENDIF;

//?F23=Prt Aged not sold
CASE;

// IF CTL.*CMD key is CF23
IF CTL.*CMD_key = '23';

// Call program PMT Prt/Sbm Opt    SHR PV.
CALL PROGRAM(PMT Prt/Sbm Opt    SHR PV) ('PDKMPVR');
PARAMETER('Aged Not Sold Report');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);
PARAMETER(1);
PARAMETER(WRK.Hold_On_Jobq);
PARAMETER(WRK.Job_Log_Create);
PARAMETER(WRK.Hold);
PARAMETER(WRK.Log);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Company Number Pass   USR = CTL.Company Number
WRK.Company_Number_Pass_USR = CTL.Company_Number;

// WRK.System Value Numeric = PAR.PRT Number of Copies
WRK.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// Call program PRT Aged not Sold     UP.
SBMJOB;
CALL PROGRAM(PRT Aged not Sold     UP) ('PMGQUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(WRK.Company_Number_Pass_USR);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(WRK.System_Value_Numeric);
SBMJOBOVR JOB(AGEDNOTSLD);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDIF;

ENDIF;

// WRK.Numeral 1             USR = CON.1
WRK.Numeral_1_USR = 1;

CASE;

// IF WRK.Numeral 1             USR EQ WRK.Numeral 1             USR
IF WRK.Numeral_1_USR = WRK.Numeral_1_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

