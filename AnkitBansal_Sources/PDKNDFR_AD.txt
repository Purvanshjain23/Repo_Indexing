// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDKNDFR
// ?Date: 14.08.2025 Time: 03:34:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?DLY029 07/13/07 JRB Added Customer to screen
//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Accounts Receivable
PAR.Application_Code = 'A/R';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile control

//?*** Load fixed control format fields ***
EXECUTE FUNCTION(RTV Cust Number Name   RT) TYPE(RTVOBJ) FILE(PDMCCPP)          AC1835712;
PARAMETER(CTL.LckBx_Number);
PARAMETER(CTL.LckBx_Deposit_Date);
PARAMETER(CTL.LckBx_Deposit_Time);
PARAMETER(CTL.LckBx_Batch_Number);
PARAMETER(CTL.LckBx_Item_Number);
PARAMETER(CTL.Customer_Number_NBR);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Text USR = Condition name of CTL.LckBx Deposit Status
CTL.Text_USR = RTVCND(CTL.LckBx_Deposit_Status);

//?*** Load changing control format fields ***
EXECUTE FUNCTION(RTV Hold Flag          RT) TYPE(RTVOBJ) FILE(PDMCCPP)          AC1511372;
PARAMETER(CTL.LckBx_Number);
PARAMETER(CTL.LckBx_Deposit_Date);
PARAMETER(CTL.LckBx_Deposit_Time);
PARAMETER(CTL.LckBx_Batch_Number);
PARAMETER(CTL.LckBx_Item_Number);
PARAMETER(CTL.LckBx_Hold_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Load hold description
DO;

CASE;

// IF CTL.LckBx Hold Flag is Yes
IF CTL.LckBx_Hold_Flag = 'Y';

// CTL.Text-17               USR = CON.Check is held
CTL.Text_17_USR = 'Check is held';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Text-17               USR = CON.Check is released
CTL.Text_17_USR = 'Check is released';

ENDIF;

ENDDO;

// Call program RTV Total Item/Inv Amt XF.
CALL PROGRAM(RTV Total Item/Inv Amt XF) ('PDJGXFR');
PARAMETER(CTL.LckBx_Number);
PARAMETER(CTL.LckBx_Deposit_Date);
PARAMETER(CTL.LckBx_Deposit_Time);
PARAMETER(CTL.LckBx_Batch_Number);
PARAMETER(CTL.LckBx_Item_Number);
PARAMETER(CTL.LckBx_Total_Inv_Amt_USR);

// CTL.LckBx Inv/Chk Diff    USR = CTL.LckBx Check Amount - CTL.LckBx Total Inv Amt
CTL.LckBx_Inv_Chk_Diff_USR = CTL.LckBx_Check_Amount - CTL.LckBx_Total_Inv_Amt_USR;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(RTV Remaining/Open Inv RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1514841;
PARAMETER(WRK.Company_Number);
PARAMETER(RCD.LckBx_Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.Remaining_Balance_Due);
PARAMETER(WRK.AR_Customer_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PAR.Auto Hold/Release     USR = CND.No
PAR.Auto_Hold_Release_USR = 'N';

CASE;

// IF CTL.*CMD key is CF05
IF CTL.*CMD_key = '05';

//?Refresh Screen.
DO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

// IF CTL.*CMD key is CF06
IF CTL.*CMD_key = '06';

//?Create A/R Lockbox Invoice Record.
DO;

// Call program PRC Create Manual Inv  XF.
CALL PROGRAM(PRC Create Manual Inv  XF) ('PDKKXFR');
PARAMETER(CTL.LckBx_Number);
PARAMETER(CTL.LckBx_Deposit_Date);
PARAMETER(*MISSING);
PARAMETER(CTL.LckBx_Batch_Number);
PARAMETER(CTL.LckBx_Item_Number);
PARAMETER(CTL.LckBx_Check_Number);
PARAMETER(CTL.LckBx_Check_Amount);
PARAMETER(CTL.LckBx_Hold_Flag);
PARAMETER(CTL.LckBx_Deposit_Status);
PARAMETER(CTL.LckBx_Total_Inv_Amt_USR);
PARAMETER(CTL.LckBx_Inv_Chk_Diff_USR);

// PAR.Auto Hold/Release     USR = CND.Yes
PAR.Auto_Hold_Release_USR = 'Y';

ENDDO;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

//?Hold/Release Check.
DO;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDDO;

ENDIF;

//?CALC: Subfile record function fields

// RCD.USR Work Field 7A = Condition name of RCD.LckBx Trans Source
RCD.USR_Work_Field_7A = RTVCND(RCD.LckBx_Trans_Source);

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

//?*** bypass edit/delete ***
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

//?Edit Lockbox Invoice Record.
DO;

// Call program EDT Lockbox Invoice    E1.
CALL PROGRAM(EDT Lockbox Invoice    E1) ('PDKRE1R');
PARAMETER(RCD.LckBx_Number);
PARAMETER(RCD.LckBx_Deposit_Date);
PARAMETER(RCD.LckBx_Deposit_Time);
PARAMETER(RCD.LckBx_Batch_Number);
PARAMETER(RCD.LckBx_Item_Number);
PARAMETER(RCD.LckBx_Seq_Number);
PARAMETER(RCD.LckBx_Seq_Counter);
PARAMETER(CTL.LckBx_Check_Number);
PARAMETER(CTL.LckBx_Check_Amount);
PARAMETER(CTL.LckBx_Hold_Flag);
PARAMETER(CTL.LckBx_Deposit_Status);
PARAMETER(CTL.LckBx_Total_Inv_Amt_USR);
PARAMETER(CTL.LckBx_Inv_Chk_Diff_USR);

// PAR.Auto Hold/Release     USR = CND.Yes
PAR.Auto_Hold_Release_USR = 'Y';

ENDDO;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

//?Delete Lockbox Invoice Record.
DO;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDDO;

ENDIF;

ENDIF;

//?USER: Final processing (Pre-confirm)

CASE;

// IF PAR.Auto Hold/Release     USR is Yes
IF PAR.Auto_Hold_Release_USR = 'Y';

//?Automatic hold or release of check.
DO;

EXECUTE FUNCTION(UPD Val/Upd Hold Flag  IF) TYPE(EXCINTFUN)                     AC1516171;
PARAMETER(CTL.LckBx_Number);
PARAMETER(CTL.LckBx_Deposit_Date);
PARAMETER(CTL.LckBx_Deposit_Time);
PARAMETER(CTL.LckBx_Batch_Number);
PARAMETER(CTL.LckBx_Item_Number);
PARAMETER(CTL.LckBx_Check_Amount);
{
 //?Execute internal function

 EXECUTE FUNCTION(VAL Release of Check   RT) TYPE(RTVOBJ) FILE(PDMDCPP)          AC1511461;
 PARAMETER(PAR.LckBx_Number);
 PARAMETER(PAR.LckBx_Deposit_Date);
 PARAMETER(PAR.LckBx_Deposit_Time);
 PARAMETER(PAR.LckBx_Batch_Number);
 PARAMETER(PAR.LckBx_Item_Number);
 PARAMETER(PAR.LckBx_Check_Amount);
 PARAMETER(PAR.OK_to_Release_Check_USR);
 PARAMETER(PAR.Message_Number_USR);
 PARAMETER(PAR.LckBx_Invoice_Number);
 {
  //?USER: Initialize routine

  // PAR.OK to Release Check   USR = CND.Yes
  PAR.OK_to_Release_Check_USR = 'Y';

  // PAR.Message Number        USR = CND.Blank
  PAR.Message_Number_USR = *BLANK;

  // PAR.LckBx Invoice Number = CND.eq zero
  PAR.LckBx_Invoice_Number = *ZERO;

  // PAR.Total Inv for Chk     USR = CON.*ZERO
  PAR.Total_Inv_for_Chk_USR = *ZERO;

  // PAR.Save Invoice Number   USR = CND.eq zero
  PAR.Save_Invoice_Number_USR = *ZERO;

  //?USER: Processing if Data record not found

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.One
  PAR.Message_Number_USR = 1;

  //?USER: Process Data record

  CASE;

  // IF DB1.LckBx Invoice Number is eq zero
  IF DB1.LckBx_Invoice_Number = *ZERO;

  //?Blank Lockbox Invoice Number.
  DO;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Seven
  PAR.Message_Number_USR = 7;

  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Process Lockbox Invoice.
  CASE;

  // IF DB1.LckBx Invoice Number EQ PAR.Save Invoice Number   USR
  IF DB1.LckBx_Invoice_Number = PAR.Save_Invoice_Number_USR;

  //?*** skip record ***
  //?Process Lockbox Invoice.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Process Invoice
  DO;

  //?*** Calculate total Invoice Amount ***
  // PAR.LckBx Total Inv Amt   USR = CON.*ZERO
  PAR.LckBx_Total_Inv_Amt_USR = *ZERO;

  // Call program RTV Total Invoice Amt  XF.
  CALL PROGRAM(RTV Total Invoice Amt  XF) ('PDJAXFR');
  PARAMETER(DB1.LckBx_Number);
  PARAMETER(DB1.LckBx_Deposit_Date);
  PARAMETER(DB1.LckBx_Deposit_Time);
  PARAMETER(DB1.LckBx_Batch_Number);
  PARAMETER(DB1.LckBx_Item_Number);
  PARAMETER(DB1.LckBx_Invoice_Number);
  PARAMETER(PAR.LckBx_Total_Inv_Amt_USR);

  //?*** Get A/R Remaining Balance ***
  EXECUTE FUNCTION(RTV Remaining/Open Inv RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1514841;
  PARAMETER(WRK.Company_Number);
  PARAMETER(DB1.LckBx_Invoice_Number);
  PARAMETER(WRK.Unused_Parm_Status_USR);
  PARAMETER(PAR.Remaining_Balance_Due);
  PARAMETER(WRK.Unused_Parm_CD7_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Process Payments against A/R Invoices.
  DO;

  CASE;

  // IF PAR.Lckbx Total Inv Amt   USR is less or equal to zero
  IF PAR.LckBx_Total_Inv_Amt_USR <= *ZERO;

  //?Net Payment <= 0            - Hold Check
  DO;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Three
  PAR.Message_Number_USR = 3;

  // PAR.LckBx Invoice Number = DB1.LckBx Invoice Number
  PAR.LckBx_Invoice_Number = DB1.LckBx_Invoice_Number;

  ENDDO;

  // IF PAR.Remaining Balance Due is less or equal to zero
  IF PAR.Remaining_Balance_Due <= *ZERO;

  //?Remaining Balance <= 0      - Hold Check
  DO;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Four
  PAR.Message_Number_USR = 4;

  // PAR.LckBx Invoice Number = DB1.LckBx Invoice Number
  PAR.LckBx_Invoice_Number = DB1.LckBx_Invoice_Number;

  ENDDO;

  // IF PAR.Lckbx Total Inv Amt   USR GT PAR.Remaining Balance Due
  IF PAR.LckBx_Total_Inv_Amt_USR > PAR.Remaining_Balance_Due;

  //?Payment > Remaining Balance - Hold Check
  DO;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Five
  PAR.Message_Number_USR = 5;

  // PAR.LckBx Invoice Number = DB1.LckBx Invoice Number
  PAR.LckBx_Invoice_Number = DB1.LckBx_Invoice_Number;

  ENDDO;

  ENDIF;

  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Two
  PAR.Message_Number_USR = 2;

  // PAR.LckBx Invoice Number = DB1.LckBx Invoice Number
  PAR.LckBx_Invoice_Number = DB1.LckBx_Invoice_Number;

  ENDIF;

  ENDDO;

  ENDIF;

  ENDIF;

  // PAR.Save Invoice Number   USR = DB1.LckBx Invoice Number
  PAR.Save_Invoice_Number_USR = DB1.LckBx_Invoice_Number;

  CASE;

  // IF DB1.Adjustment Type Code is Regular Pay
  IF DB1.Adjustment_Type_Code = 'PAY';

  // PAR.Total Inv for Chk     USR = PAR.Total Inv for Chk     USR + DB1.LckBx Invoic
  PAR.Total_Inv_for_Chk_USR = PAR.Total_Inv_for_Chk_USR + DB1.LckBx_Invoice_Amount;

  ENDIF;

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Exit processing

  CASE;

  // IF PAR.LckBx Check Amount LT PAR.Total Inv for Chk     USR
  IF PAR.LckBx_Check_Amount < PAR.Total_Inv_for_Chk_USR;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Six
  PAR.Message_Number_USR = 6;

  // IF PAR.LckBx Check Amount NE PAR.Total Inv for Chk     USR
  IF PAR.LckBx_Check_Amount <> PAR.Total_Inv_for_Chk_USR;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Eight
  PAR.Message_Number_USR = 8;

  ENDIF;

 }

 CASE;

 // IF PAR.OK to Release Check   USR is Yes
 IF PAR.OK_to_Release_Check_USR = 'Y';

 EXECUTE FUNCTION(CHG Inv & Hld Flag     CH) TYPE(CHGOBJ) FILE(PDMCCPP)          AC1508633;
 PARAMETER(PAR.LckBx_Number);
 PARAMETER(PAR.LckBx_Deposit_Date);
 PARAMETER(PAR.LckBx_Deposit_Time);
 PARAMETER(PAR.LckBx_Batch_Number);
 PARAMETER(PAR.LckBx_Item_Number);
 PARAMETER('Y');
 PARAMETER('N');
 // Send information message - 'Lockbox Check has been released.'
 MESSAGE(USR2701 *INFO);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Place Check on Hold & Send Message.
 DO;

 CASE;

 // IF PAR.Message Number        USR is One
 IF PAR.Message_Number_USR = '1';

 // PAR.LckBx Invoice Flag = CND.No
 PAR.LckBx_Invoice_Flag = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.LckBx Invoice Flag = CND.Yes
 PAR.LckBx_Invoice_Flag = 'Y';

 ENDIF;

 EXECUTE FUNCTION(CHG Inv & Hld Flag     CH) TYPE(CHGOBJ) FILE(PDMCCPP)          AC1508633;
 PARAMETER(PAR.LckBx_Number);
 PARAMETER(PAR.LckBx_Deposit_Date);
 PARAMETER(PAR.LckBx_Deposit_Time);
 PARAMETER(PAR.LckBx_Batch_Number);
 PARAMETER(PAR.LckBx_Item_Number);
 PARAMETER(PAR.LckBx_Invoice_Flag);
 PARAMETER('Y');
 //?Determine Correct Error Message & Display
 DO;

 CASE;

 // IF PAR.Message Number        USR is One
 IF PAR.Message_Number_USR = '1';

 // Send information message - 'CHECK IS HELD! Lockbox check must have invoice detail.'
 MESSAGE(USR2693 *INFO);

 // IF PAR.Message Number        USR is Two
 IF PAR.Message_Number_USR = '2';

 // Send information message - 'CHECK IS HELD! Invoice: &1 is invalid.'
 MESSAGE(USR2697 *INFO);
 MSGPARM(PAR.LckBx_Invoice_Number);

 // IF PAR.Message Number        USR is Three
 IF PAR.Message_Number_USR = '3';

 // Send information message - 'CHECK IS HELD! Total amounts for invoice: &1 must be > zero.'
 MESSAGE(USR2686 *INFO);
 MSGPARM(PAR.LckBx_Invoice_Number);

 // IF PAR.Message Number        USR is Four
 IF PAR.Message_Number_USR = '4';

 // Send information message - 'CHECK IS HELD! Remaining balance due for invoice: &1 must be > zero.
 MESSAGE(USR2698 *INFO);
 MSGPARM(PAR.LckBx_Invoice_Number);

 // IF PAR.Message Number        USR is Five
 IF PAR.Message_Number_USR = '5';

 // Send information message - 'CHECK IS HELD! Total amts for invoice: &1 cannot be > remaining bal.
 MESSAGE(USR2687 *INFO);
 MSGPARM(PAR.LckBx_Invoice_Number);

 // IF PAR.Message Number        USR is Six
 IF PAR.Message_Number_USR = '6';

 // Send information message - 'CHECK IS HELD! Total Invoice Amounts cannot be > the check amount.'
 MESSAGE(USR2694 *INFO);

 // IF PAR.Message Number        USR is Seven
 IF PAR.Message_Number_USR = '7';

 // Send information message - 'CHECK IS HELD! LockBox Invoice Number cannot be blank.'
 MESSAGE(USR2718 *INFO);

 // IF PAR.Message Number        USR is Eight
 IF PAR.Message_Number_USR = '8';

 // Send information message - 'CHECK IS HELD! Total invoice payment amounts must equal the check am
 MESSAGE(USR2725 *INFO);

 ENDIF;

 ENDDO;

 ENDDO;

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

ENDIF;

//?USER: Process subfile control (Post-confirm)

// PAR.Auto Hold/Release     USR = CND.No
PAR.Auto_Hold_Release_USR = 'N';

//?USER: Process subfile record (Post-confirm)

CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

//?*** bypass delete ***
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

//?Delete Lockbox Invoice Record.
DO;

EXECUTE FUNCTION(DLT A/R Lockbox Invoic DL) TYPE(DLTOBJ) FILE(PDMDCPP)          AC1507062;
PARAMETER(RCD.LckBx_Number);
PARAMETER(RCD.LckBx_Deposit_Date);
PARAMETER(RCD.LckBx_Deposit_Time);
PARAMETER(RCD.LckBx_Batch_Number);
PARAMETER(RCD.LckBx_Item_Number);
PARAMETER(RCD.LckBx_Seq_Number);
PARAMETER(RCD.LckBx_Seq_Counter);

// PAR.Auto Hold/Release     USR = CND.Yes
PAR.Auto_Hold_Release_USR = 'Y';

ENDDO;

ENDIF;

ENDIF;

//?USER: Final processing (Post-confirm)

CASE;

// IF PAR.Auto Hold/Release     USR is Yes
IF PAR.Auto_Hold_Release_USR = 'Y';

//?Automatic hold or release of check.
DO;

EXECUTE FUNCTION(UPD Val/Upd Hold Flag  IF) TYPE(EXCINTFUN)                     AC1516171;
PARAMETER(CTL.LckBx_Number);
PARAMETER(CTL.LckBx_Deposit_Date);
PARAMETER(*MISSING);
PARAMETER(CTL.LckBx_Batch_Number);
PARAMETER(CTL.LckBx_Item_Number);
PARAMETER(CTL.LckBx_Check_Amount);
{
 //?Execute internal function

 EXECUTE FUNCTION(VAL Release of Check   RT) TYPE(RTVOBJ) FILE(PDMDCPP)          AC1511461;
 PARAMETER(PAR.LckBx_Number);
 PARAMETER(PAR.LckBx_Deposit_Date);
 PARAMETER(PAR.LckBx_Deposit_Time);
 PARAMETER(PAR.LckBx_Batch_Number);
 PARAMETER(PAR.LckBx_Item_Number);
 PARAMETER(PAR.LckBx_Check_Amount);
 PARAMETER(PAR.OK_to_Release_Check_USR);
 PARAMETER(PAR.Message_Number_USR);
 PARAMETER(PAR.LckBx_Invoice_Number);
 {
  //?USER: Initialize routine

  // PAR.OK to Release Check   USR = CND.Yes
  PAR.OK_to_Release_Check_USR = 'Y';

  // PAR.Message Number        USR = CND.Blank
  PAR.Message_Number_USR = *BLANK;

  // PAR.LckBx Invoice Number = CND.eq zero
  PAR.LckBx_Invoice_Number = *ZERO;

  // PAR.Total Inv for Chk     USR = CON.*ZERO
  PAR.Total_Inv_for_Chk_USR = *ZERO;

  // PAR.Save Invoice Number   USR = CND.eq zero
  PAR.Save_Invoice_Number_USR = *ZERO;

  //?USER: Processing if Data record not found

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.One
  PAR.Message_Number_USR = 1;

  //?USER: Process Data record

  CASE;

  // IF DB1.LckBx Invoice Number is eq zero
  IF DB1.LckBx_Invoice_Number = *ZERO;

  //?Blank Lockbox Invoice Number.
  DO;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Seven
  PAR.Message_Number_USR = 7;

  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Process Lockbox Invoice.
  CASE;

  // IF DB1.LckBx Invoice Number EQ PAR.Save Invoice Number   USR
  IF DB1.LckBx_Invoice_Number = PAR.Save_Invoice_Number_USR;

  //?*** skip record ***
  //?Process Lockbox Invoice.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Process Invoice
  DO;

  //?*** Calculate total Invoice Amount ***
  // PAR.LckBx Total Inv Amt   USR = CON.*ZERO
  PAR.LckBx_Total_Inv_Amt_USR = *ZERO;

  // Call program RTV Total Invoice Amt  XF.
  CALL PROGRAM(RTV Total Invoice Amt  XF) ('PDJAXFR');
  PARAMETER(DB1.LckBx_Number);
  PARAMETER(DB1.LckBx_Deposit_Date);
  PARAMETER(DB1.LckBx_Deposit_Time);
  PARAMETER(DB1.LckBx_Batch_Number);
  PARAMETER(DB1.LckBx_Item_Number);
  PARAMETER(DB1.LckBx_Invoice_Number);
  PARAMETER(PAR.LckBx_Total_Inv_Amt_USR);

  //?*** Get A/R Remaining Balance ***
  EXECUTE FUNCTION(RTV Remaining/Open Inv RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1514841;
  PARAMETER(WRK.Company_Number);
  PARAMETER(DB1.LckBx_Invoice_Number);
  PARAMETER(WRK.Unused_Parm_Status_USR);
  PARAMETER(PAR.Remaining_Balance_Due);
  PARAMETER(WRK.Unused_Parm_CD7_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Process Payments against A/R Invoices.
  DO;

  CASE;

  // IF PAR.Lckbx Total Inv Amt   USR is less or equal to zero
  IF PAR.LckBx_Total_Inv_Amt_USR <= *ZERO;

  //?Net Payment <= 0            - Hold Check
  DO;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Three
  PAR.Message_Number_USR = 3;

  // PAR.LckBx Invoice Number = DB1.LckBx Invoice Number
  PAR.LckBx_Invoice_Number = DB1.LckBx_Invoice_Number;

  ENDDO;

  // IF PAR.Remaining Balance Due is less or equal to zero
  IF PAR.Remaining_Balance_Due <= *ZERO;

  //?Remaining Balance <= 0      - Hold Check
  DO;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Four
  PAR.Message_Number_USR = 4;

  // PAR.LckBx Invoice Number = DB1.LckBx Invoice Number
  PAR.LckBx_Invoice_Number = DB1.LckBx_Invoice_Number;

  ENDDO;

  // IF PAR.Lckbx Total Inv Amt   USR GT PAR.Remaining Balance Due
  IF PAR.LckBx_Total_Inv_Amt_USR > PAR.Remaining_Balance_Due;

  //?Payment > Remaining Balance - Hold Check
  DO;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Five
  PAR.Message_Number_USR = 5;

  // PAR.LckBx Invoice Number = DB1.LckBx Invoice Number
  PAR.LckBx_Invoice_Number = DB1.LckBx_Invoice_Number;

  ENDDO;

  ENDIF;

  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Two
  PAR.Message_Number_USR = 2;

  // PAR.LckBx Invoice Number = DB1.LckBx Invoice Number
  PAR.LckBx_Invoice_Number = DB1.LckBx_Invoice_Number;

  ENDIF;

  ENDDO;

  ENDIF;

  ENDIF;

  // PAR.Save Invoice Number   USR = DB1.LckBx Invoice Number
  PAR.Save_Invoice_Number_USR = DB1.LckBx_Invoice_Number;

  CASE;

  // IF DB1.Adjustment Type Code is Regular Pay
  IF DB1.Adjustment_Type_Code = 'PAY';

  // PAR.Total Inv for Chk     USR = PAR.Total Inv for Chk     USR + DB1.LckBx Invoic
  PAR.Total_Inv_for_Chk_USR = PAR.Total_Inv_for_Chk_USR + DB1.LckBx_Invoice_Amount;

  ENDIF;

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Exit processing

  CASE;

  // IF PAR.LckBx Check Amount LT PAR.Total Inv for Chk     USR
  IF PAR.LckBx_Check_Amount < PAR.Total_Inv_for_Chk_USR;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Six
  PAR.Message_Number_USR = 6;

  // IF PAR.LckBx Check Amount NE PAR.Total Inv for Chk     USR
  IF PAR.LckBx_Check_Amount <> PAR.Total_Inv_for_Chk_USR;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Eight
  PAR.Message_Number_USR = 8;

  ENDIF;

 }

 CASE;

 // IF PAR.OK to Release Check   USR is Yes
 IF PAR.OK_to_Release_Check_USR = 'Y';

 EXECUTE FUNCTION(CHG Inv & Hld Flag     CH) TYPE(CHGOBJ) FILE(PDMCCPP)          AC1508633;
 PARAMETER(PAR.LckBx_Number);
 PARAMETER(PAR.LckBx_Deposit_Date);
 PARAMETER(PAR.LckBx_Deposit_Time);
 PARAMETER(PAR.LckBx_Batch_Number);
 PARAMETER(PAR.LckBx_Item_Number);
 PARAMETER('Y');
 PARAMETER('N');
 // Send information message - 'Lockbox Check has been released.'
 MESSAGE(USR2701 *INFO);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Place Check on Hold & Send Message.
 DO;

 CASE;

 // IF PAR.Message Number        USR is One
 IF PAR.Message_Number_USR = '1';

 // PAR.LckBx Invoice Flag = CND.No
 PAR.LckBx_Invoice_Flag = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.LckBx Invoice Flag = CND.Yes
 PAR.LckBx_Invoice_Flag = 'Y';

 ENDIF;

 EXECUTE FUNCTION(CHG Inv & Hld Flag     CH) TYPE(CHGOBJ) FILE(PDMCCPP)          AC1508633;
 PARAMETER(PAR.LckBx_Number);
 PARAMETER(PAR.LckBx_Deposit_Date);
 PARAMETER(PAR.LckBx_Deposit_Time);
 PARAMETER(PAR.LckBx_Batch_Number);
 PARAMETER(PAR.LckBx_Item_Number);
 PARAMETER(PAR.LckBx_Invoice_Flag);
 PARAMETER('Y');
 //?Determine Correct Error Message & Display
 DO;

 CASE;

 // IF PAR.Message Number        USR is One
 IF PAR.Message_Number_USR = '1';

 // Send information message - 'CHECK IS HELD! Lockbox check must have invoice detail.'
 MESSAGE(USR2693 *INFO);

 // IF PAR.Message Number        USR is Two
 IF PAR.Message_Number_USR = '2';

 // Send information message - 'CHECK IS HELD! Invoice: &1 is invalid.'
 MESSAGE(USR2697 *INFO);
 MSGPARM(PAR.LckBx_Invoice_Number);

 // IF PAR.Message Number        USR is Three
 IF PAR.Message_Number_USR = '3';

 // Send information message - 'CHECK IS HELD! Total amounts for invoice: &1 must be > zero.'
 MESSAGE(USR2686 *INFO);
 MSGPARM(PAR.LckBx_Invoice_Number);

 // IF PAR.Message Number        USR is Four
 IF PAR.Message_Number_USR = '4';

 // Send information message - 'CHECK IS HELD! Remaining balance due for invoice: &1 must be > zero.
 MESSAGE(USR2698 *INFO);
 MSGPARM(PAR.LckBx_Invoice_Number);

 // IF PAR.Message Number        USR is Five
 IF PAR.Message_Number_USR = '5';

 // Send information message - 'CHECK IS HELD! Total amts for invoice: &1 cannot be > remaining bal.
 MESSAGE(USR2687 *INFO);
 MSGPARM(PAR.LckBx_Invoice_Number);

 // IF PAR.Message Number        USR is Six
 IF PAR.Message_Number_USR = '6';

 // Send information message - 'CHECK IS HELD! Total Invoice Amounts cannot be > the check amount.'
 MESSAGE(USR2694 *INFO);

 // IF PAR.Message Number        USR is Seven
 IF PAR.Message_Number_USR = '7';

 // Send information message - 'CHECK IS HELD! LockBox Invoice Number cannot be blank.'
 MESSAGE(USR2718 *INFO);

 // IF PAR.Message Number        USR is Eight
 IF PAR.Message_Number_USR = '8';

 // Send information message - 'CHECK IS HELD! Total invoice payment amounts must equal the check am
 MESSAGE(USR2725 *INFO);

 ENDIF;

 ENDDO;

 ENDDO;

 ENDIF;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF14
IF CTL.*CMD_key = '14';

//?Hold/Release Check.
DO;

CASE;

// IF CTL.LckBx Hold Flag is No
IF CTL.LckBx_Hold_Flag = 'N';

//?Hold Check.
DO;

EXECUTE FUNCTION(CHG Hold Flag          CH) TYPE(CHGOBJ) FILE(PDMCCPP)          AC1511363;
PARAMETER(CTL.LckBx_Number);
PARAMETER(CTL.LckBx_Deposit_Date);
PARAMETER(CTL.LckBx_Deposit_Time);
PARAMETER(CTL.LckBx_Batch_Number);
PARAMETER(CTL.LckBx_Item_Number);
PARAMETER('Y');

// Send information message - 'Lockbox Check has been placed on hold.'
MESSAGE(USR2700 *INFO);

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Attempt Release of Check.
DO;

EXECUTE FUNCTION(UPD Val/Upd Hold Flag  IF) TYPE(EXCINTFUN)                     AC1516171;
PARAMETER(CTL.LckBx_Number);
PARAMETER(CTL.LckBx_Deposit_Date);
PARAMETER(CTL.LckBx_Deposit_Time);
PARAMETER(CTL.LckBx_Batch_Number);
PARAMETER(CTL.LckBx_Item_Number);
PARAMETER(CTL.LckBx_Check_Amount);
{
 //?Execute internal function

 EXECUTE FUNCTION(VAL Release of Check   RT) TYPE(RTVOBJ) FILE(PDMDCPP)          AC1511461;
 PARAMETER(PAR.LckBx_Number);
 PARAMETER(PAR.LckBx_Deposit_Date);
 PARAMETER(PAR.LckBx_Deposit_Time);
 PARAMETER(PAR.LckBx_Batch_Number);
 PARAMETER(PAR.LckBx_Item_Number);
 PARAMETER(PAR.LckBx_Check_Amount);
 PARAMETER(PAR.OK_to_Release_Check_USR);
 PARAMETER(PAR.Message_Number_USR);
 PARAMETER(PAR.LckBx_Invoice_Number);
 {
  //?USER: Initialize routine

  // PAR.OK to Release Check   USR = CND.Yes
  PAR.OK_to_Release_Check_USR = 'Y';

  // PAR.Message Number        USR = CND.Blank
  PAR.Message_Number_USR = *BLANK;

  // PAR.LckBx Invoice Number = CND.eq zero
  PAR.LckBx_Invoice_Number = *ZERO;

  // PAR.Total Inv for Chk     USR = CON.*ZERO
  PAR.Total_Inv_for_Chk_USR = *ZERO;

  // PAR.Save Invoice Number   USR = CND.eq zero
  PAR.Save_Invoice_Number_USR = *ZERO;

  //?USER: Processing if Data record not found

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.One
  PAR.Message_Number_USR = 1;

  //?USER: Process Data record

  CASE;

  // IF DB1.LckBx Invoice Number is eq zero
  IF DB1.LckBx_Invoice_Number = *ZERO;

  //?Blank Lockbox Invoice Number.
  DO;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Seven
  PAR.Message_Number_USR = 7;

  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Process Lockbox Invoice.
  CASE;

  // IF DB1.LckBx Invoice Number EQ PAR.Save Invoice Number   USR
  IF DB1.LckBx_Invoice_Number = PAR.Save_Invoice_Number_USR;

  //?*** skip record ***
  //?Process Lockbox Invoice.
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Process Invoice
  DO;

  //?*** Calculate total Invoice Amount ***
  // PAR.LckBx Total Inv Amt   USR = CON.*ZERO
  PAR.LckBx_Total_Inv_Amt_USR = *ZERO;

  // Call program RTV Total Invoice Amt  XF.
  CALL PROGRAM(RTV Total Invoice Amt  XF) ('PDJAXFR');
  PARAMETER(DB1.LckBx_Number);
  PARAMETER(DB1.LckBx_Deposit_Date);
  PARAMETER(DB1.LckBx_Deposit_Time);
  PARAMETER(DB1.LckBx_Batch_Number);
  PARAMETER(DB1.LckBx_Item_Number);
  PARAMETER(DB1.LckBx_Invoice_Number);
  PARAMETER(PAR.LckBx_Total_Inv_Amt_USR);

  //?*** Get A/R Remaining Balance ***
  EXECUTE FUNCTION(RTV Remaining/Open Inv RT) TYPE(RTVOBJ) FILE(ARBDCPP)          AC1514841;
  PARAMETER(WRK.Company_Number);
  PARAMETER(DB1.LckBx_Invoice_Number);
  PARAMETER(WRK.Unused_Parm_Status_USR);
  PARAMETER(PAR.Remaining_Balance_Due);
  PARAMETER(WRK.Unused_Parm_CD7_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Process Payments against A/R Invoices.
  DO;

  CASE;

  // IF PAR.Lckbx Total Inv Amt   USR is less or equal to zero
  IF PAR.LckBx_Total_Inv_Amt_USR <= *ZERO;

  //?Net Payment <= 0            - Hold Check
  DO;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Three
  PAR.Message_Number_USR = 3;

  // PAR.LckBx Invoice Number = DB1.LckBx Invoice Number
  PAR.LckBx_Invoice_Number = DB1.LckBx_Invoice_Number;

  ENDDO;

  // IF PAR.Remaining Balance Due is less or equal to zero
  IF PAR.Remaining_Balance_Due <= *ZERO;

  //?Remaining Balance <= 0      - Hold Check
  DO;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Four
  PAR.Message_Number_USR = 4;

  // PAR.LckBx Invoice Number = DB1.LckBx Invoice Number
  PAR.LckBx_Invoice_Number = DB1.LckBx_Invoice_Number;

  ENDDO;

  // IF PAR.Lckbx Total Inv Amt   USR GT PAR.Remaining Balance Due
  IF PAR.LckBx_Total_Inv_Amt_USR > PAR.Remaining_Balance_Due;

  //?Payment > Remaining Balance - Hold Check
  DO;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Five
  PAR.Message_Number_USR = 5;

  // PAR.LckBx Invoice Number = DB1.LckBx Invoice Number
  PAR.LckBx_Invoice_Number = DB1.LckBx_Invoice_Number;

  ENDDO;

  ENDIF;

  ENDDO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Two
  PAR.Message_Number_USR = 2;

  // PAR.LckBx Invoice Number = DB1.LckBx Invoice Number
  PAR.LckBx_Invoice_Number = DB1.LckBx_Invoice_Number;

  ENDIF;

  ENDDO;

  ENDIF;

  ENDIF;

  // PAR.Save Invoice Number   USR = DB1.LckBx Invoice Number
  PAR.Save_Invoice_Number_USR = DB1.LckBx_Invoice_Number;

  CASE;

  // IF DB1.Adjustment Type Code is Regular Pay
  IF DB1.Adjustment_Type_Code = 'PAY';

  // PAR.Total Inv for Chk     USR = PAR.Total Inv for Chk     USR + DB1.LckBx Invoic
  PAR.Total_Inv_for_Chk_USR = PAR.Total_Inv_for_Chk_USR + DB1.LckBx_Invoice_Amount;

  ENDIF;

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Exit processing

  CASE;

  // IF PAR.LckBx Check Amount LT PAR.Total Inv for Chk     USR
  IF PAR.LckBx_Check_Amount < PAR.Total_Inv_for_Chk_USR;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Six
  PAR.Message_Number_USR = 6;

  // IF PAR.LckBx Check Amount NE PAR.Total Inv for Chk     USR
  IF PAR.LckBx_Check_Amount <> PAR.Total_Inv_for_Chk_USR;

  // PAR.OK to Release Check   USR = CND.No
  PAR.OK_to_Release_Check_USR = 'N';

  // PAR.Message Number        USR = CND.Eight
  PAR.Message_Number_USR = 8;

  ENDIF;

 }

 CASE;

 // IF PAR.OK to Release Check   USR is Yes
 IF PAR.OK_to_Release_Check_USR = 'Y';

 EXECUTE FUNCTION(CHG Inv & Hld Flag     CH) TYPE(CHGOBJ) FILE(PDMCCPP)          AC1508633;
 PARAMETER(PAR.LckBx_Number);
 PARAMETER(PAR.LckBx_Deposit_Date);
 PARAMETER(PAR.LckBx_Deposit_Time);
 PARAMETER(PAR.LckBx_Batch_Number);
 PARAMETER(PAR.LckBx_Item_Number);
 PARAMETER('Y');
 PARAMETER('N');
 // Send information message - 'Lockbox Check has been released.'
 MESSAGE(USR2701 *INFO);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Place Check on Hold & Send Message.
 DO;

 CASE;

 // IF PAR.Message Number        USR is One
 IF PAR.Message_Number_USR = '1';

 // PAR.LckBx Invoice Flag = CND.No
 PAR.LckBx_Invoice_Flag = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.LckBx Invoice Flag = CND.Yes
 PAR.LckBx_Invoice_Flag = 'Y';

 ENDIF;

 EXECUTE FUNCTION(CHG Inv & Hld Flag     CH) TYPE(CHGOBJ) FILE(PDMCCPP)          AC1508633;
 PARAMETER(PAR.LckBx_Number);
 PARAMETER(PAR.LckBx_Deposit_Date);
 PARAMETER(PAR.LckBx_Deposit_Time);
 PARAMETER(PAR.LckBx_Batch_Number);
 PARAMETER(PAR.LckBx_Item_Number);
 PARAMETER(PAR.LckBx_Invoice_Flag);
 PARAMETER('Y');
 //?Determine Correct Error Message & Display
 DO;

 CASE;

 // IF PAR.Message Number        USR is One
 IF PAR.Message_Number_USR = '1';

 // Send information message - 'CHECK IS HELD! Lockbox check must have invoice detail.'
 MESSAGE(USR2693 *INFO);

 // IF PAR.Message Number        USR is Two
 IF PAR.Message_Number_USR = '2';

 // Send information message - 'CHECK IS HELD! Invoice: &1 is invalid.'
 MESSAGE(USR2697 *INFO);
 MSGPARM(PAR.LckBx_Invoice_Number);

 // IF PAR.Message Number        USR is Three
 IF PAR.Message_Number_USR = '3';

 // Send information message - 'CHECK IS HELD! Total amounts for invoice: &1 must be > zero.'
 MESSAGE(USR2686 *INFO);
 MSGPARM(PAR.LckBx_Invoice_Number);

 // IF PAR.Message Number        USR is Four
 IF PAR.Message_Number_USR = '4';

 // Send information message - 'CHECK IS HELD! Remaining balance due for invoice: &1 must be > zero.
 MESSAGE(USR2698 *INFO);
 MSGPARM(PAR.LckBx_Invoice_Number);

 // IF PAR.Message Number        USR is Five
 IF PAR.Message_Number_USR = '5';

 // Send information message - 'CHECK IS HELD! Total amts for invoice: &1 cannot be > remaining bal.
 MESSAGE(USR2687 *INFO);
 MSGPARM(PAR.LckBx_Invoice_Number);

 // IF PAR.Message Number        USR is Six
 IF PAR.Message_Number_USR = '6';

 // Send information message - 'CHECK IS HELD! Total Invoice Amounts cannot be > the check amount.'
 MESSAGE(USR2694 *INFO);

 // IF PAR.Message Number        USR is Seven
 IF PAR.Message_Number_USR = '7';

 // Send information message - 'CHECK IS HELD! LockBox Invoice Number cannot be blank.'
 MESSAGE(USR2718 *INFO);

 // IF PAR.Message Number        USR is Eight
 IF PAR.Message_Number_USR = '8';

 // Send information message - 'CHECK IS HELD! Total invoice payment amounts must equal the check am
 MESSAGE(USR2725 *INFO);

 ENDIF;

 ENDDO;

 ENDDO;

 ENDIF;

}


ENDDO;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDDO;

ENDIF;

