// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKANETR
// ?Date: 14.08.2025 Time: 02:48:46
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 7/02/2021 JBB WHD80995 - Increase rollover values for BO#
//?                          Recompile only after changing the
//?                          RTVOBJ-Rtv Crt Next BOH      RT to
//?                          rollover when the BO# reaches 999999,
//?                          instead of 99999.
//? 4/06/2021 JBB H16853 - Increase Buy Order Number from 5.0 to 7.0
//? 4/25/2019 JBB E14910 - Edit Buy Order Load, Validate Buy Order Type
//?- There is a business rule that states that if the Producer's
//?  Source Code = TO, then the BO Type must = C.
//? 4/12/2017 JBB E12898 - Validate Commodity Market Code/Price Group
//?- Validate against the OMS Commodity Mrkt Price file OMF0CPL0.
//?  Currently, the fields are only validated if the Buy Order Type is
//?  'O'pen Market.  After discussion with Susan Blakey, the values
//?  will be validated if entered regardless of Buy Order Type.
//? 5/22/17 JBB C9426 - Remove validation of the REF fields.
//? 4/13/17 JBB C9426 - Add Ref fields for Company 440
ENDDO;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?RMC 11/04/16 R7805 add mpr purch type to BOH
//?RMC 9/27/16 comment Hedge code -- never installed
//?E3577 11/5/14 RMC Allow new BOH Type is Hedge. Hedge wont have any
//? Loads.  They will have BOH Hedge Head and get reported to USDA MPR
EXECUTE FUNCTION(HPE034) TYPE(EXCINTFUN)                                        AB1195750;
{
 //?Execute internal function

 //?Create a Trucker edit. - Dwight Shepard
 //?Purpose:
 //?Clone the Trucker report that post and remove
 //?all update of vouchers.  Producer the report
 //?for the user to sight review before continue on.
 //?Modification History
 //?Date        Person   Description
}


//?PK0495 12/12/02 Make subfile fields output & dsp movement#
//?  & Comment SFL Detail validations
//?USER: Initialize screen for new transaction

// CTL.BOH Company Number = PAR.BOH Company Number
CTL.BOH_Company_Number = PAR.BOH_Company_Number;

// CTL.BOH Kill Date = PAR.BOH Kill Date
CTL.BOH_Kill_Date = PAR.BOH_Kill_Date;

// CTL.PD Producer Code = PAR.PD Producer Code
CTL.PD_Producer_Code = PAR.PD_Producer_Code;

// CTL.PL Location Code = PAR.PL Location Code
CTL.PL_Location_Code = PAR.PL_Location_Code;

EXECUTE FUNCTION(Rtv/Upd Next BO       RT) TYPE(RTVOBJ) FILE(PKAZREP)           AB1100930;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
{
 //?USER: Initialize routine

 //?Modification history
 DO;

 //? 7/02/2021 JBB WHD80995 - Increase rollover from 99999 to 9999999
 ENDDO;

 //?USER: Process Data record

 // PAR.BOH Buy Order Number = DB1.Next Buy Order Number
 PAR.BOH_Buy_Order_Number = DB1.Next_Buy_Order_Number;

 CASE;

 // IF DB1.Next Buy Order Number is EQ 9999999
 IF DB1.Next_Buy_Order_Number = 9999999;

 EXECUTE FUNCTION(Chg Next BO           CH) TYPE(CHGOBJ) FILE(PKAZREP)           AB1100933;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(10000);
 PARAMETER(DB1.Last_Tattoo_Nbr);
 PARAMETER(DB1.Current_Production_Date);
 PARAMETER(DB1.Next_Production_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Next Buy Order Number = DB1.Next Buy Order Number + CON.1
 WRK.Next_Buy_Order_Number = DB1.Next_Buy_Order_Number + 1;

 EXECUTE FUNCTION(Chg Next BO           CH) TYPE(CHGOBJ) FILE(PKAZREP)           AB1100933;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(WRK.Next_Buy_Order_Number);
 PARAMETER(DB1.Last_Tattoo_Nbr);
 PARAMETER(DB1.Current_Production_Date);
 PARAMETER(DB1.Next_Production_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


// CTL.BOH Payment Type = CND.Carcass Merit
CTL.BOH_Payment_Type = 'C';

// CTL.PPWS Company Number = PAR.PPWS Company Number
CTL.PPWS_Company_Number = PAR.PPWS_Company_Number;

// CTL.CW Year = PAR.CW Year
CTL.CW_Year = PAR.CW_Year;

// CTL.CW Week Number = PAR.CW Week Number
CTL.CW_Week_Number = PAR.CW_Week_Number;

EXECUTE FUNCTION(Rtv Producer Split    RT) TYPE(RTVOBJ) FILE(PKBFREP)           AB1107922;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(LCL.Primary_Split_USR);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.PSS_Split_Percent = 100;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Producer TrkSz,Src RT) TYPE(RTVOBJ) FILE(PKACREP)          AB1121114;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.Prd_Std_Truck_Size_Usr);
PARAMETER(LCL.PD_Freight_Exp_Paid_By);
PARAMETER(WRK.SR_Source_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV MPR Prdcr Purch TpRT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235599;
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(WRK.MPR_Purchase_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// CTL.BOH MPR Purchase Type = CVTVAR(WRK.MPR Purchase Type Code)
CTL.BOH_MPR_Purchase_Type = CVTVAR(WRK.MPR_Purchase_Type_Code);

// CTL.Description 30 USR = Condition name of CTL.BOH MPR Purchase Type
CTL.Description_30_USR = RTVCND(CTL.BOH_MPR_Purchase_Type);

// CTL.BOH Status = CND.Open
CTL.BOH_Status = 'O';

// CTL.BOH Status Desc Usr = CON.Open
CTL.BOH_Status_Desc_Usr = 'Open';

// WRK.Time Beg USR = JOB.*Job time
WRK.Time_Beg_USR = JOB.*Job_time;

// CTL.Time Beg 4.0 USR = WRK.Time Beg USR / CON.100 *
CTL.Time_Beg_4_0_USR = WRK.Time_Beg_USR / 100;

//? 4/13/17 JBB C9426 - Add Ref Fields to screen for Company 440
//? 5/22/17 JBB C9426 - Remove validation of the REF fields.
//?USER: Validate header non-key fields

//?F5 Refresh
CASE;

// IF CTL.*CMD key is Refresh
IF CTL.*CMD_key = '05';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

ENDIF;

// LCL.Buy Order Type Error = CND.No
LCL.Buy_Order_Type_Error = 'N';

// CTL.Description 30 USR = Condition name of CTL.BOH MPR Purchase Type
CTL.Description_30_USR = RTVCND(CTL.BOH_MPR_Purchase_Type);

//?Validate Buy Order Type with Producer Source Type
CASE;

// IF CTL.BOH Buy Order Type EQ LCL.BOH Buy Order Type
IF CTL.BOH_Buy_Order_Type = LCL.BOH_Buy_Order_Type;

// Send error message - 'Value Required.'
ERROR(PRK1201);
MSGPARM(CTL.BOH_Buy_Order_Type);

//?Validate Buy Order Type with Producer Source Type
// IF WRK.SR Type is External
IF WRK.SR_Type = 'E';

//?External validation
CASE;

// IF WRK.SR Source Code is Triumph Member (Owner)
IF WRK.SR_Source_Code = 'TO';

EXECUTE FUNCTION(Chk Src/BO Type XREF  RT) TYPE(RTVOBJ) FILE(PWAIREP)           AB1339345;
PARAMETER(WRK.SR_Source_Code);
PARAMETER(CTL.BOH_Buy_Order_Type);

//?If record not found, Buy Order Type not valid for TO hogs
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

//?4/25/2019 JBB E14910 - Buy Order Type not valid for 'TO'
// LCL.Buy Order Type Error = CND.Yes
LCL.Buy_Order_Type_Error = 'Y';

// Send error message - 'Buy Order Type not a valid value for Triumph Owned hogs.'
ERROR(PRK1538);
MSGPARM(CTL.BOH_Buy_Order_Type);

ENDIF;

//?External validation
// IF CTL.BOH Buy Order Type is Contract
IF CTL.BOH_Buy_Order_Type = 'C';

// OR CTL.BOH Buy Order Type is Open Market
OR CTL.BOH_Buy_Order_Type = 'O';

// OR CTL.BOH Buy Order Type is Hedge
OR CTL.BOH_Buy_Order_Type = 'H';

//?C, O, and H are valid
//?External validation
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Buy Order Type Error = CND.Yes
LCL.Buy_Order_Type_Error = 'Y';

// Send error message - 'BO Type must be (C)ontract,(O)pen market, (H)edge for producer source Exter
ERROR(PRK0388);

ENDIF;

//?Validate Buy Order Type with Producer Source Type
// IF WRK.SR Type is Internal
IF WRK.SR_Type = 'I';

//?Internal Validation
CASE;

// IF NOT CTL.BOH Buy Order Type is Internal
IF ! CTL.BOH_Buy_Order_Type = 'I';

// LCL.Buy Order Type Error = CND.Yes
LCL.Buy_Order_Type_Error = 'Y';

// Send error message - 'Buy Order Type must Be (I)nternal for producer source Internal.'
ERROR(PRK0389);

ENDIF;

ENDIF;

CASE;

// IF CTL.BOH Buy Order Date GT CTL.BOH Kill Date
IF CTL.BOH_Buy_Order_Date > CTL.BOH_Kill_Date;

// Send error message - 'Buy Date must be less than or equal to the Kill Date.'
ERROR(PRK0838);
MSGPARM(CTL.BOH_Buy_Order_Date);
MSGPARM(CTL.BOH_Kill_Date);

ENDIF;

//?USER: Validate header non-key relations

//?Select Contract/Sub Contract
CASE;

// IF LCL.Buy Order Type Error is Yes
IF LCL.Buy_Order_Type_Error = 'Y';

//?No further Buy Order Type testing
//?Select Contract/Sub Contract
// IF CTL.BOH Buy Order Type is Contract or Internal
IF CTL.BOH_Buy_Order_Type = 'C'/'I';

// AND CTL.PC Contract Code EQ WRK.Blank USR
AND CTL.PC_Contract_Code = WRK.Blank_USR;

// Call program Sel Sub-Contract PP   SR.
CALL PROGRAM(Sel Sub-Contract PP   SR) ('PKFFSRR');
PARAMETER(CTL.PC_Contract_Code);
PARAMETER(CTL.PSC_Sub_Contract_Code);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);

EXECUTE FUNCTION(Rtv Sub-Contract Info RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1110451;
PARAMETER(CTL.PC_Contract_Code);
PARAMETER(CTL.PSC_Sub_Contract_Code);
PARAMETER(LCL.PSC_Sub_Contract_Type);
PARAMETER(CTL.BOH_Commodity_Market_Code);
PARAMETER(CTL.BOH_Commodity_Price_Group);
PARAMETER(CTL.BOH_Market_Add_Deduct);
PARAMETER(CTL.BOH_Market_Date_Method);
PARAMETER(CTL.GN_Genetic_Code);
PARAMETER(CTL.PO_Option_Code);
PARAMETER(CTL.CMP_Program_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If record not found, send error message
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?If record not found, send error message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Bo Type Req/Cont/Sub Con'
ERROR(PRK0239);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

//?Select Contract/Sub Contract
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.BOH Buy Order Type is Contract or Internal
IF CTL.BOH_Buy_Order_Type = 'C'/'I';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.PC Contract Code = CON.*BLANK
CTL.PC_Contract_Code = *BLANK;

// CTL.PSC Sub-Contract Code = CON.*BLANK
CTL.PSC_Sub_Contract_Code = *BLANK;

ENDIF;

ENDIF;

//?Open Market validation, comm code/group and market date method
CASE;

// IF CTL.BOH Buy Order Type is Open Market
IF CTL.BOH_Buy_Order_Type = 'O';

//?Select Market Date Method
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.BOH Market Date Method
IF PGM.*Cursor_field = CTL.BOH_Market_Date_Method;

// Call program Sel Market Date Method UP.
CALL PROGRAM(Sel Market Date Method UP) ('PDZWXFR');
PARAMETER(PGM.*Return_code);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(CTL.BOH_Market_Date_Method);
PARAMETER(WRK.Market_Date_Method_Desc);
PARAMETER('H');

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

CASE;

// IF CTL.PO Option Code is Multi Market Price
IF CTL.PO_Option_Code = 'MMP';

// IF *OTHERWISE
IF *OTHERWISE;

//?Select Commodity Market Code & Price Group
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.BOH Commodity Market Code
IF PGM.*Cursor_field = CTL.BOH_Commodity_Market_Code;

// Call program Sel Commodity Market  XF.
CALL PROGRAM(Sel Commodity Market  XF) ('PDEDSRR');
PARAMETER(CTL.BOH_Commodity_Market_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

// IF PGM.*Cursor field <IS> CTL.BOH Commodity Price Group
IF PGM.*Cursor_field = CTL.BOH_Commodity_Price_Group;

// Call program Sel Commodity Group   XF.
CALL PROGRAM(Sel Commodity Group   XF) ('PDECSRR');
PARAMETER(CTL.BOH_Commodity_Price_Group);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

//?Validate Market and Group
DO;

// WRK.Invalid Y/N USR = CND.Blank
WRK.Invalid_Y_N_USR = *BLANK;

// Call program Val Commodity Market  XF.
CALL PROGRAM(Val Commodity Market  XF) ('PDG1XFR');
PARAMETER(CTL.BOH_Commodity_Market_Code);
PARAMETER(WRK.Market_Code_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Market Code is invalid.'
ERROR(PRK0028);
MSGPARM(CTL.BOH_Commodity_Market_Code);

ENDIF;

// WRK.Invalid Y/N USR = CND.Blank
WRK.Invalid_Y_N_USR = *BLANK;

// Call program Val Commodity Group   XF.
CALL PROGRAM(Val Commodity Group   XF) ('PDG2XFR');
PARAMETER(CTL.BOH_Commodity_Price_Group);
PARAMETER(WRK.Market_Group_Desc_USR);
PARAMETER(WRK.Invalid_Y_N_USR);

CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Price Group is invalid.'
ERROR(PRK0027);
MSGPARM(CTL.BOH_Commodity_Price_Group);

ENDIF;

ENDDO;

ENDIF;

// WRK.Market Group Desc USR = WRK.Blank USR
WRK.Market_Group_Desc_USR = WRK.Blank_USR;

// Call program Val Market Date Method UP.
CALL PROGRAM(Val Market Date Method UP) ('PDZUXFR');
PARAMETER(WRK.*Return_code);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(CTL.BOH_Market_Date_Method);
PARAMETER(WRK.Market_Date_Method_Desc);
PARAMETER('H');

CASE;

// IF WRK.Market Date Method Desc NE WRK.Blank USR
IF WRK.Market_Date_Method_Desc <> WRK.Blank_USR;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Market Date Method.'
ERROR(PRK0556);
MSGPARM(CTL.BOH_Market_Date_Method);

ENDIF;

ENDIF;

//?Validate Commodity Mrkt/Group if entered, regardless of BO Type
CASE;

// IF CTL.BOH Commodity Market Code is Entered
IF CTL.BOH_Commodity_Market_Code <> *BLANK;

// OR CTL.BOH Commodity Price Group is Entered
OR CTL.BOH_Commodity_Price_Group <> *BLANK;

//? 4/10/18 JBB E12898 Validate Commodity Market Code/Price Group
// WRK.Invalid Y/N USR = CND.Blank
WRK.Invalid_Y_N_USR = *BLANK;

// Call program Val Commodity Cde/Grp XF.
CALL PROGRAM(Val Commodity Cde/Grp XF) ('PNH5XFR');
PARAMETER(CTL.BOH_Commodity_Market_Code);
PARAMETER(CTL.BOH_Commodity_Price_Group);
PARAMETER(WRK.Invalid_Y_N_USR);

//?If not found in OMS, send error message
CASE;

// IF WRK.Invalid Y/N USR is Yes
IF WRK.Invalid_Y_N_USR = 'Y';

// Send error message - 'Commodity Market Code/Price Group combination is invalid.'
ERROR(PRK1492);
MSGPARM(CTL.BOH_Commodity_Market_Code);
MSGPARM(CTL.BOH_Commodity_Price_Group);

ENDIF;

ENDIF;

//?IF BUY ORDER TYPE IS OPEN MARKET USE CASH BASE PRICE FOR PRICING OPTION
CASE;

// IF CTL.BOH Buy Order Type is Open Market
IF CTL.BOH_Buy_Order_Type = 'O';

// CTL.PO Option Code = CND.Cash Basis Price
CTL.PO_Option_Code = 'CBP';

ENDIF;

//?********** 08/02/95 PKP **********
//?If Payment Type = Carcass Merit, validate Base Quote & Type.
//?If Payment Type = Live, Base Quote must be 0 and Type is blank.
//?Validate/Initialize Base Quote and Type
CASE;

// IF CTL.BOH Payment Type is Carcass Merit
IF CTL.BOH_Payment_Type = 'C';

//?If Base Quote entered, quote type is required.
CASE;

// IF CTL.BOH Quoted Base Mkt Price is Zeros
IF CTL.BOH_Quoted_Base_Mkt_Price = *ZERO;

// *MO.VE             1183529*Bu = ilt. in functions
CTL.BOH_Quote_Price_Type = *BLANK;

//?If Base Quote entered, quote type is required.
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.BOH Quote Price Type is Not Entered
IF CTL.BOH_Quote_Price_Type = *BLANK;

// Send error message - 'Base Quote Type is required.'
ERROR(PRK0497);
MSGPARM(CTL.BOH_Quote_Price_Type);

ENDIF;

ENDIF;

//?Validate/Initialize Base Quote and Type
// IF CTL.BOH Payment Type is Live
IF CTL.BOH_Payment_Type = 'L';

// *MO.VE             1183529*Bu = ilt. in functions
CTL.BOH_Quoted_Base_Mkt_Price = *ZERO;

// *MO.VE             1183529*Bu = ilt. in functions
CTL.BOH_Quote_Price_Type = *BLANK;

ENDIF;

//?**********************************
//?Either Base quote or Market +/- are allowed not both
CASE;

// IF CTL.BOH Payment Type is Carcass Merit
IF CTL.BOH_Payment_Type = 'C';

CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

ENDIF;

//?Either Base quote or Market +/- are allowed not both
// IF CTL.BOH Quoted Base Mkt Price is Not Zeros
IF CTL.BOH_Quoted_Base_Mkt_Price <> *ZERO;

CASE;

// IF CTL.BOH Market Add/Deduct is Not Zeros
IF CTL.BOH_Market_Add_Deduct <> *ZERO;

// Send error message - 'Either Base Qte or Mkt +-'
ERROR(PRK0248);
MSGPARM(CTL.BOH_Market_Add_Deduct);
MSGPARM(CTL.BOH_Quoted_Base_Mkt_Price);

ENDIF;

ENDIF;

//?Carcass Merit Program -- Required
CASE;

// IF CTL.BOH Payment Type is Carcass Merit
IF CTL.BOH_Payment_Type = 'C';

CASE;

// IF CTL.CMP Program Code is *Blank
IF CTL.CMP_Program_Code = *BLANK;

// Send error message - 'Carcass Merit Program value required.'
ERROR(PRK0252);
MSGPARM(CTL.CMP_Program_Code);

ENDIF;

ENDIF;

//?CMP - must be a SBD type
CASE;

// IF CTL.CMP Program Code is *Blank
IF CTL.CMP_Program_Code = *BLANK;

//?CMP - must be a SBD type
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv CMP type          RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1167001;
PARAMETER(CTL.CMP_Program_Code);
PARAMETER(WRK.CMP_Type);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.CMP_Type = WRK.Blank_USR;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.CMP_Type = DB1.CMP_Type;

}


CASE;

// IF WRK.CMP Type is Seaboard's
IF WRK.CMP_Type = 'N'/'S';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Carcass Merit Program must have a Seaboard program type.'
ERROR(PRK0580);

ENDIF;

ENDIF;

//?USER: Validate subfile record fields

//?E3577 RMC 11/6/14 BOH Type Hedge cannot have load detail
CASE;

// IF CTL.BOH Buy Order Type is Hedge
IF CTL.BOH_Buy_Order_Type = 'H';

CASE;

// IF RCD.BOL Pln Head Delv is GT Zero
IF RCD.BOL_Pln_Head_Delv > *ZERO;

// OR RCD.BOL Scheduled Kill Shift is *ALL values
OR RCD.BOL_Scheduled_Kill_Shift = '1'/'2'/'3'/*BLANK;

// OR RCD.BOL Load Number is Entered
OR RCD.BOL_Load_Number <> *ZERO;

// OR RCD.BOL Pln Delv Date is Not EQ Zero
OR RCD.BOL_Pln_Delv_Date <> *ZERO;

// Send error message - 'Buy Order Type Hedge cannot have Load Detail.'
ERROR(PRK1323);
MSGPARM(CTL.BOH_Buy_Order_Type);

ENDIF;

ENDIF;

//?Default Scheduled Kill Shift
CASE;

// IF RCD.BOL Scheduled Kill Shift EQ WRK.Blank USR
IF RCD.BOL_Scheduled_Kill_Shift = WRK.Blank_USR;

// RCD.BOL Scheduled Kill Shift = CND.Shift 1
RCD.BOL_Scheduled_Kill_Shift = 1;

ENDIF;

//?Default Delivery Date
CASE;

// IF RCD.BOL Delv Date is EQ Zero
IF RCD.BOL_Pln_Delv_Date = *ZERO;

// RCD.BOL Pln Delv Date = CTL.BOH Kill Date
RCD.BOL_Pln_Delv_Date = CTL.BOH_Kill_Date;

ENDIF;

// RCD.BOL Kill Date = CTL.BOH Kill Date
RCD.BOL_Kill_Date = CTL.BOH_Kill_Date;

//?Validate Delv date Less then or equal to kill date
CASE;

// IF RCD.BOL Pln Delv Date LE CTL.BOH Kill Date
IF RCD.BOL_Pln_Delv_Date <= CTL.BOH_Kill_Date;

//?Validate Delv date Less then or equal to kill date
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Must be prior/= Kill Date'
ERROR(PRK0242);
MSGPARM(RCD.BOL_Pln_Delv_Date);

ENDIF;

//?Validate: Delv start time
CASE;

// IF RCD.BOL Pln Delv Start Time is Valid on 24 hr clock
IF RCD.BOL_Pln_Delv_Start_Time <= 2400;

//?Validate: Delv start time
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Delivery start time &1 not valid.'
ERROR(PRK0278);
MSGPARM(RCD.BOL_Pln_Delv_Start_Time);

ENDIF;

//?Select Option 8 Dsp Delv Sched
CASE;

// IF RCD.*SFLSEL is Select Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Zzz Delivery Schedule DF.
CALL PROGRAM(Zzz Delivery Schedule DF) ('PKAVDFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOL_Kill_Date);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
RCD.*SFLSEL = *BLANK;

ENDIF;

//?Edit Producer Std Split
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// Call program Edt Prod/Prod Split   ET.
CALL PROGRAM(Edt Prod/Prod Split   ET) ('PKFOETR');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Validate the Standard Truck Size
DO;

CASE;

// IF RCD.BOL Pln Head Delv GT CTL.Prd Std Truck Size Usr
IF RCD.BOL_Pln_Head_Delv > CTL.Prd_Std_Truck_Size_Usr;

// Send error message - 'Plan Head cannot be more than the Standard Truck Size.'
ERROR(PRK0247);
MSGPARM(RCD.BOL_Pln_Head_Delv);

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDDO;

//?Test for Delection of Subfile record
CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

CASE;

// IF RCD.BOL Head Received is Greater then Zero
IF RCD.BOL_Head_Received > *ZERO;

// Send error message - 'Delete is not allowed'
ERROR(PRK0282);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

ENDIF;

// RCD.BOL MPR Prior Day Prch = CND.Blank
RCD.BOL_MPR_Prior_Day_Prch = *BLANK;

//?CALC: Subfile record function fields

CTL.Head_Total_SUM = SUM(RCD.BOL_Pln_Head_Delv);

//?USER: Validate totals

//?command 15
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// Call program Edt Prod/Prod Split   ET.
CALL PROGRAM(Edt Prod/Prod Split   ET) ('PKFOETR');
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Defer_confirm = 'Y';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Create header DBF record

EXECUTE FUNCTION(Crt Buy Order Header  CR) TYPE(CRTOBJ) FILE(PKAWCPP)           AB1100514;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(CTL.BOH_Buy_Order_Date);
PARAMETER(CTL.BOH_Kill_Date);
PARAMETER(CTL.BOH_Payment_Type);
PARAMETER(CTL.BOH_Buy_Order_Type);
PARAMETER(CTL.BOH_Market_Add_Deduct);
PARAMETER(CTL.BOH_Status);
PARAMETER(CTL.BOH_Delv_Plan_Printed);
PARAMETER(CTL.BOH_Quote_Price_Type);
PARAMETER(CTL.BOH_Quoted_Base_Mkt_Price);
PARAMETER(CTL.BOH_Commodity_Market_Code);
PARAMETER(CTL.BOH_Commodity_Price_Group);
PARAMETER(CTL.BOH_Market_Date_Method);
PARAMETER(CTL.BOH_MPR_Reporting_Date);
PARAMETER(CTL.BOH_Hedge_Date);
PARAMETER(CTL.BOH_Unused_Date_3);
PARAMETER(CTL.BOH_Unused_Date_4);
PARAMETER(CTL.BOH_Unused_Date_5);
PARAMETER(CTL.BOH_Hedge_Head_Total);
PARAMETER(CTL.BOH_Hedge_Reference_BO);
PARAMETER(CTL.BOH_Hedge_Time_hhmm);
PARAMETER(CTL.BOH_Unused_Nbr_4);
PARAMETER(CTL.BOH_Unused_Nbr_5);
PARAMETER(CTL.BOH_Unused_Nbr_6);
PARAMETER(CTL.BOH_Unused_Nbr_7);
PARAMETER(CTL.BOH_Unused_Nbr_8);
PARAMETER(CTL.BOH_Unused_Nbr_9);
PARAMETER(CTL.BOH_Unused_Nbr_10);
PARAMETER(CTL.BOH_MPR_Reporting_Time);
PARAMETER(CTL.BOH_MPR_EST_RPT_STS);
PARAMETER(CTL.BOH_MPR_Purchase_Type);
PARAMETER(CTL.BOH_Status_4);
PARAMETER(CTL.BOH_Status_5);
PARAMETER(CTL.PPWS_Company_Number);
PARAMETER(CTL.CW_Year);
PARAMETER(CTL.CW_Week_Number);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(CTL.PC_Contract_Code);
PARAMETER(CTL.PSC_Sub_Contract_Code);
PARAMETER(CTL.GN_Genetic_Code);
PARAMETER(CTL.PO_Option_Code);
PARAMETER(CTL.CMP_Program_Code);
PARAMETER(CTL.HB_Buyer_Code);
PARAMETER(CTL.RS_User_Changed);
PARAMETER(CTL.RS_Date_Changed);
PARAMETER(CTL.RS_Time_Changed);
PARAMETER(CTL.RS_Record_Status);
PARAMETER(CTL.RS_Job);
PARAMETER(CTL.RS_Program);
PARAMETER(CTL.RS_User_Added);
PARAMETER(CTL.RS_Date_Added);
PARAMETER(CTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 //?RMC 6/19/19 whd 49122 Chg time to 1:45 per Jerry L at tf
 //?RMC 9/23/16 R7307   Chg time as of 10/11/2016  per new MPR Rule:
 //?            compile all functions that call this CRTOBJ
 //?     9:55:59 changed to 9:30:59             9:56 changed to 9:31
 //?     1:55:59 changed to 1:30:59
 //?************************************************************************
 //?RMC  Chg time as of 01/10/07:
 //?     9:30:59 changed to 9:55:59             9:31 changed to 9:56
 //?     1:30:59 changed to 1:55:59
 //?*********************************************************************
 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

 //?** create record boh status as open
 // DB1.BOH Status = CND.Open
 DB1.BOH_Status = 'O';

 //?PK0254 -- MPR Reporting Time and Date       RMC 1/19/2001
 //?  If Current Time < 9:30:59 am
 //?    Reporting Date = Current Date
 //?    Reporting Time = 1
 //?  If 9:31 am < Current Time < 1:30:59 pm
 //?    Reporting Date = Current Date
 //?    Reporting Time = 2
 //?*** replace with R7307 -- effective 10/11/2016
 //?  * Otherwise         (These will not be reported at all.)
 //?  * Reporting Date = 0
 //?  * Reporting Time = 0
 //?*** NEW     with R7307 -- effective 10/11/2016
 //?    Reporting Date = Next kill date - skip sat/sun
 //?    Reporting Time = 1
 // Call program Rtv System Date & Tim UP.
 CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
 PARAMETER(LCL.*DATE);
 PARAMETER(LCL.*TIME);

 CASE;

 // IF LCL.*TIME is LE 09:30:59
 IF LCL.*TIME <= 093059;

 // DB1.BOH MPR Reporting Date = LCL.*DATE
 DB1.BOH_MPR_Reporting_Date = LCL.*DATE;

 // DB1.BOH MPR Reporting Time = CND.Reporting Time is 1
 DB1.BOH_MPR_Reporting_Time = 1;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.*TIME is LE 13:45:59
 IF LCL.*TIME <= 134559;

 //?6/19/19 RMC time was LE 13:30:59
 // DB1.BOH MPR Reporting Date = LCL.*DATE
 DB1.BOH_MPR_Reporting_Date = LCL.*DATE;

 // DB1.BOH MPR Reporting Time = CND.Reporting Time is 2
 DB1.BOH_MPR_Reporting_Time = 2;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?R7307 -- GT 1:30 get reported at next day's 1st submission at 9:30
 // Call program RTV Next WkDy,N=Holidy XF.
 CALL PROGRAM(RTV Next WkDy,N=Holidy XF) ('PBYUXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(LCL.*DATE);
 PARAMETER(LCL.MPR_Reporting_Date);

 // DB1.BOH MPR Reporting Date = LCL.MPR Reporting Date
 DB1.BOH_MPR_Reporting_Date = LCL.MPR_Reporting_Date;

 // DB1.BOH MPR Reporting Time = CND.Reporting Time is 1
 DB1.BOH_MPR_Reporting_Time = 1;

 ENDIF;

 ENDIF;

}


//?USER: Change header DBF record

EXECUTE FUNCTION(Chg Buy Order Header  CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1100515;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.BOH_Buy_Order_Number);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(CTL.PD_Producer_Code);
PARAMETER(CTL.PL_Location_Code);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(CTL.RS_User_Changed);
PARAMETER(CTL.RS_Date_Changed);
PARAMETER(CTL.RS_Time_Changed);
PARAMETER(CTL.RS_Record_Status);
PARAMETER(CTL.RS_Job);
PARAMETER(CTL.RS_Program);
PARAMETER(CTL.RS_User_Added);
PARAMETER(CTL.RS_Date_Added);
PARAMETER(CTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Change detail DBF record

EXECUTE FUNCTION(Chg BOL and BOL Ref   CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1332939;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.BOL_Kill_Date);
PARAMETER(RCD.BOL_Pln_Delv_Start_Time);
PARAMETER(RCD.BOL_Pln_Delv_End_Time);
PARAMETER(RCD.BOL_Pln_Head_Delv);
PARAMETER(RCD.BOL_Shipped_Wgt);
PARAMETER(RCD.BOL_Pln_Delv_Date);
PARAMETER(RCD.BOL_Freight_UOM);
PARAMETER(RCD.BOL_Freight_Unit_Amt);
PARAMETER(RCD.BOL_Freight_Amt);
PARAMETER(RCD.BOL_Freight_Allocation);
PARAMETER(RCD.BOL_Head_Received);
PARAMETER(RCD.BOL_Live_Wgt_Received);
PARAMETER(RCD.BOL_Trucker_Payment_Sts);
PARAMETER(RCD.BOL_Trucker_Check_Number);
PARAMETER(RCD.BOL_Trucker_Check_Date);
PARAMETER(RCD.BOL_AP_Voucher);
PARAMETER(RCD.BOL_Trailer);
PARAMETER(RCD.BOL_Freight_Exp_Paid_By);
PARAMETER(RCD.BOL_Scheduled_Kill_Shift);
PARAMETER(RCD.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(RCD.BOL_MPR_Prior_Day_Prch);
PARAMETER(RCD.BOL_Violated_Auth_Tme_Sts);
PARAMETER(RCD.TRK_Trucker_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(RCD.BOL_Ref_1);
PARAMETER(RCD.BOL_Ref_2);
PARAMETER(RCD.BOL_Ref_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Crt/Upd BO Load Ref   IF) TYPE(EXCINTFUN)                      AB1331981;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.BOL_Ref_1);
 PARAMETER(PAR.BOL_Ref_2);
 PARAMETER(PAR.BOL_Ref_Status);
 {
  //?Execute internal function

  //?C9426 032217 slm
  //?C9426 use the BOL Referene to store the Ref1,Ref2 and Ref Status
  EXECUTE FUNCTION(Crt/Chg BO Load Ref   RT) TYPE(RTVOBJ) FILE(PWACCPP)           AB1331982;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.BOL_Ref_1);
  PARAMETER(PAR.BOL_Ref_2);
  PARAMETER(PAR.BOL_Ref_Status);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Buy Order Load Ref CR) TYPE(CRTOBJ) FILE(PWACCPP)          AB1331978;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.BOL_Ref_1);
   PARAMETER(PAR.BOL_Ref_2);
   PARAMETER(PAR.BOL_Ref_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Buy Order Load Ref CH) TYPE(CHGOBJ) FILE(PWACCPP)          AB1331979;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(PAR.BOL_Ref_1);
   PARAMETER(PAR.BOL_Ref_2);
   PARAMETER(PAR.BOL_Ref_Status);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

}


//?USER: Process command keys

RETURN;

