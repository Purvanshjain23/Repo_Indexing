     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF461
      * TITLE:       Revenue: Specify AR Adjustment Report by G/L Post Account
      * PROGRAMMER:  LeAnne Ramsey
      * CREATED:     10/06/09
      *
      * FUNCTION: This Specify uses an edit record format to allow the user
      *           to specify options for generating the report.
      *
      ***************************************************************************************
      * MODIFICATIONS:
      ***************************************************************************************
      * DATE      PROGRAMMER
      *
      /EJECT
      ***************************************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd461    cf   e             workstn infds(iofeed)
      *
      *
     Ftfp002    if   e           k disk
      *  G/L Post methods
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               d   datfmt(*iso)
     D wkmdydt         s               d   datfmt(*mdy)
      *
     D wkdt            s              8  0
     D wkcymd          s              8  0
     D wkfcymd         s              8  0
     D wktcymd         s              8  0
      *
     D wkmdy           s              6  0
     D wkyr            s              4  0
     D wkpe            s              2  0
     D wkwk            s              2  0
      *
      *
      * Work fields
      *
     d wkpcc           s             12
     D long            s              2  0
     D start           s              2  0
      *
      *
      * Parm fields
      *
     D xxsatdt         s              8  0
     D xxdt            s              8  0
     D xxyr            s              4  0
     D xxpe            s              2  0
     d xxwk            s              2  0
     d xxapfl          s              1
      *
     d xxdsfl          s                   like(d1dsfl)
     d xxdsds          s                   like(d1dsds)
      *
     d xxpmcd          s                   like(pmpmcd)
     d xxpmds          s                   like(pmpmds)
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      * We initially thought we would generate this from the Weekly Revenue Close function.
      * But, we decided later that it would only be On-Demand....I did not bother to
      * change the LDA positions to start in position 1.
      *
     Dlda             uds                  dtaara(*lda)
     D  ldfwemdy              39     44  0
     D  ldtwemdy              45     50  0
     D  ldfwecymd             52     59  0
     D  ldtwecymd             60     67  0
      *
     D  ldpcono               71     73  0
     D  ldpcc                 77     88
     D  ldpobj                89     94
     D  ldpsub                95    102
      *
     D  lddsfl               140    140
      *
     D  ldpmcd               141    141
     D  ldpmds               142    171
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the error
      * message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     tf461k1
     C                   write     tf461ec
     C                   exfmt     tf461r1
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   eval      routne = edit1
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * Validate:
      *   1) from date
      *   2) to date
      *   3) detail/summary flag
      *   4) company
      *   5) G/L post method
      *   6) Post cost center (no edits; just right justify the entry)
      *
     C                   exsr      $fmdy
     C                   exsr      $tmdy
     C                   exsr      $dsfl
     C                   exsr      $pcono
     C                   exsr      $pmcd
      *
      * If entered, right justify Post Cost Center.
      *
     C                   if        d1pcc <> *blank
     C                   move      d1pcc         wkpcc
     C     ' '           checkr    wkpcc         long
     C                   move      *blank        d1pcc
     C                   eval      start = 12 - long + 1
     C                   eval      %subst(d1pcc:start) = %subst(wkpcc:1:long)
     C                   endif
      *
      * If there are no errors, execute the subroutine to submit the report.
      *
     C                   if        error = 0 and *in08 = *on
     C                   exsr      $proc1
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * From Date
      *----------------------------------------------------------------
      *
     C     $fmdy         begsr
      *
     C                   z-add     0             d1fwemdy
     C                   z-add     0             d1fyr
     C                   z-add     0             d1fwk
     C                   z-add     0             d1fpe
      *
     C                   select
     C                   when      d1fmdy = 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1fmdy < 0
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1fmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and go find:
      *  1) the week-ending date for this date
      *  2) the year/period/week for the week-ending date
      *
     C     *mdy          move      d1fmdy        wkisodate
     C                   move      wkisodate     wkdt
     C                   z-add     wkdt          wkfcymd
      *
     C                   exsr      $wedt
     C                   z-add     wkmdy         ldfwemdy
     C                   z-add     wkcymd        ldfwecymd
     C                   z-add     wkmdy         d1fwemdy
     C                   z-add     wkyr          d1fyr
     C                   z-add     wkpe          d1fpe
     C                   z-add     wkwk          d1fwk
      *
     C                   if        *in98 = *on
     C                   seton                                        30
     C                   endif
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * To Date
      *----------------------------------------------------------------
      *
     C     $tmdy         begsr
      *
     C                   z-add     0             d1twemdy
     C                   z-add     0             d1tyr
     C                   z-add     0             d1twk
     C                   z-add     0             d1tpe
      *
     C                   select
     C                   when      d1tmdy = 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   endif
      *
     C                   when      d1tmdy < 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   endif
     C                   other
      *
     C     *mdy          test(d)                 d1tmdy                 92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   endif
     C                   else
      *
      * Flip the date from MMDDYY to CCYYMMDD and go find:
      *  1) the week-ending date for this date
      *  2) the year/period/week for the week-ending date
      *
     C     *mdy          move      d1tmdy        wkisodate
     C                   move      wkisodate     wkdt
     C                   z-add     wkdt          wktcymd
      *
     C                   exsr      $wedt
     C                   z-add     wkmdy         ldtwemdy
     C                   z-add     wkcymd        ldtwecymd
     C                   z-add     wkmdy         d1twemdy
     C                   z-add     wkyr          d1tyr
     C                   z-add     wkpe          d1tpe
     C                   z-add     wkwk          d1twk
      *
     C                   if        *in98 = *on
     C                   seton                                        31
     C                   endif
      *
     C                   endif                                                  If bad date
     C                   endsl
      *
      * Make the "TO date cannot be earlier than FROM date" check.
      *
     C                   if        *in30 = *off and                             If OK
     C                             *in31 = *off and
     C                             wktcymd < wkfcymd
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09009'
     C                   endif
     C                   endif                                                  If OK
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate detail/summary flag
      *---------------------------------------------------------------
      *
     C     $dsfl         begsr
      *
     C                   move      *blank        d1dsds
      *
     C                   select
     C                   when      d1dsfl = 'S'
     C                   movel(p)  'Summary'     d1dsds
      *
     C                   when      d1dsfl = 'D'
     C                   movel(p)  'Detail'      d1dsds
      *
     C                   when      d1dsfl = 'B'
     C                   eval      d1dsds = 'Both Detail and Summary'
     C                   other
      *
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00454'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate Post Company Number
      *---------------------------------------------------------------
      *
     C     $pcono        begsr
      *
     C                   if        d1pcono < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09000'     mgid(e)
     C                   endif
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Validate G/L Post Method Code
      *---------------------------------------------------------------
      *
     C     $pmcd         begsr
      *
     C                   move      *blank        d1pmds
      *
     C                   select
     C                   when      d1pmcd = *blank
     C                   other
      *
     C     d1pmcd        chain     tfp002                             92
     C                   if        *in92 = *on                                  If no hit
     c                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08159'
     C                   movea     d1pmcd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   else
      *
     C                   eval      d1pmds = pmpmds
      *
      * We will never have "N" or "C" records in the TFP025 file. So, edit
      * these out....even though the prompt lets them pick those.
      *
     C                   if        d1pmcd = 'C' or d1pmcd = 'N'
     c                   seton                                        34
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08161'
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif
      *
     C                   endif                                                  If no hit
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Retrieve Week-ending date
      *----------------------------------------------------------------
      *
     C     $wedt         begsr
      *
     C                   z-add     0             wkcymd
     C                   z-add     0             wkmdy
     C                   z-add     0             wkyr
     C                   z-add     0             wkpe
     C                   z-add     0             wkwk
      *
      * Retrieve Saturday Week-Ending Date for the user's date.
      *
     C                   call      'TF811'
     C                   parm      wkdt          xxdt
     C                   parm      0             xxsatdt
     C                   parm      0             xxyr
     C                   parm      0             xxpe
     C                   parm      0             xxwk
      *
      * Is the returned "Saturday" a valid date?
      *
     C     *iso          test(d)                 xxsatdt                92
     C                   if        *in92 = *on                                  If bad date
     C                   seton                                        98
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09229'
     C                   endif
     C                   else
      *
     C                   setoff                                       98
      *
      * Saturday is valid; flip it to MMDDYY format.
      *
     C     *iso          move      xxsatdt       wkmdydt
     C                   move      wkmdydt       wkmdy
      *
      * Retrieve the Production Year/Period/Week for the Saturday date
      *
     C                   call      'TF815'
     C     wkcymd        parm                    xxsatdt
     C                   parm      'P'           xxapfl
     C     wkyr          parm      0             xxyr
     C     wkpe          parm      0             xxpe
     C     wkwk          parm      0             xxwk
     C                   endif                                                  If bad date
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * F4 prompt on screen 1
      *----------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      * Detail/summary
     C                   when      fld = 'D1DSFL'
     C                   call      'TF520'
     C                   parm      *blank        xxdsfl
     C                   parm      *blank        xxdsds
     C                   seton                                        55
     C                   if        xxdsfl <> *blank
     C                   move      xxdsfl        d1dsfl
     C                   move      xxdsds        d1dsds
     C                   endif
      *
      * G/L Post method
     C                   when      fld = 'D1PMCD'
     C                   call      'TF534'
     C                   parm      *blank        xxpmcd
     C                   parm      *blank        xxpmds
     C                   seton                                        54
     C                   if        xxpmcd <> *blank
     C                   move      xxpmcd        d1pmcd
     C                   move      xxpmds        d1pmds
     C                   endif
     C                   other
      *
      * F4 not valid for this field, so issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09011'
     C                   endif
     C                   endsl
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
      * This subroutine is only executed if the user submits the listing
      *
     C     $proc1        begsr
      *
      * Move submission values into LDA
      *
     C                   move      d1dsfl        lddsfl
     C                   z-add     d1pcono       ldpcono
     C                   move      d1pmcd        ldpmcd
     C                   move      d1pmds        ldpmds
     C                   move      d1pcc         ldpcc
     C                   move      d1pobj        ldpobj
     C                   move      d1psub        ldpsub
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *    None
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA fields
      *
     C                   z-add     0             ldfwemdy
     C                   z-add     0             ldfwecymd
     C                   z-add     0             ldtwemdy
     C                   z-add     0             ldtwecymd
     C                   z-add     0             ldpcono
     C                   out       lda
      *
      * Default "Both" for Detail/Summary versions.
      *
     C                   move      'B'           d1dsfl
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F8 selected
SBMJOB CMD(CALL PGM(TF461CL))  JOB(TFADJPOS) JOBQ(*JOBD)
