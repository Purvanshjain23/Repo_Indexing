// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDZEPVR
// ?Date: 14.08.2025 Time: 03:30:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

// DTL.text usr 75 = CON.*BLANK
DTL.text_usr_75 = *BLANK;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate fields

// DTL.text usr 75 = CON.*BLANK
DTL.text_usr_75 = *BLANK;

//?R9547 DN 03/15/17-Select/Validate To Company.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Select To Company.
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.To Company
AND PGM.*Cursor_field = DTL.To_Company;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.To_Company);

ENDIF;

//?Validate To Company.
CASE;

// IF DTL.To Company is not equal to zero
IF DTL.To_Company <> *ZERO;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.To_Company);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Plant Company'
ERROR(USR3603);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?Select to item code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Item Code Detail
AND PGM.*Cursor_field = DTL.Item_Code_Detail;

// Call program SEL Actv Item by Co    SR.
CALL PROGRAM(SEL Actv Item by Co    SR) ('PDL9SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code_Detail);

ENDIF;

//?R9547 DN 03/16/17-Validate To Item & Get Item Desc Line One.
CASE;

// IF DTL.Item Code Detail is Entered
IF DTL.Item_Code_Detail <> *ZERO;

EXECUTE FUNCTION(Rtv Item Desc Line One RT) TYPE(RTVOBJ) FILE(CABZREP)          AC2134148;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code_Detail);
PARAMETER(DTL.Item_Description);
{
 //?USER: Initialize routine

 // PAR.Description Line One = CON.*BLANK
 PAR.Description_Line_One = *BLANK;

 //?USER: Process Data record

 // PAR.Description Line One = DB1.Description Line One
 PAR.Description_Line_One = DB1.Description_Line_One;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Copy To Company/To Item Cannot Be The Same As Copy From Company/From Item.
CASE;

// IF DTL.Company Number EQ DTL.To Company
IF DTL.Company_Number = DTL.To_Company;

// AND DTL.Item Code EQ DTL.Item Code Detail
AND DTL.Item_Code = DTL.Item_Code_Detail;

// LCL.Generic Message 80 USR = CONCAT(CON.To Company/To Item cannot,CON.be the same as from Compa,C
LCL.Generic_Message_80_USR = 'To Company/To Item cannot' + 'be the same as from Compa' (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.ny/Item.,CON.*ZERO)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'ny/Item.' (*ZERO);

// Send error message - '&1'
ERROR(USR4977);
MSGPARM(LCL.Generic_Message_80_USR);

QUIT;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item not found'
ERROR(USR0374);
MSGPARM(DTL.Item_Code_Detail);

ENDIF;

ENDIF;

//?Tell user if there are any bom items
CASE;

// IF DTL.BOM Type is Meat Items
IF DTL.BOM_Type = 'C'/'P';

// OR DTL.BOM Type EQ WRK.BLANK
OR DTL.BOM_Type = WRK.BLANK;

//?R9547 DN 03/16/17-Changed to Read By Company/Item.
EXECUTE FUNCTION(Val Item Has BOM-anyCo2RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1930004;
PARAMETER(DTL.To_Company);
PARAMETER(DTL.Item_Code_Detail);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.BOM Type is Meat Items
 IF DB1.BOM_Type = 'C'/'P';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// LCL.Item Code Txt = CVTVAR(DTL.Item Code Detail)
LCL.Item_Code_Txt = CVTVAR(DTL.Item_Code_Detail);

//?R9547 DN 03/16/17-Reformatted message to also show Company.
// LCL.Company Number Alpha = CVTVAR(DTL.To Company)
LCL.Company_Number_Alpha = CVTVAR(DTL.To_Company);

// DTL.text usr 75 = CON.There are BOM's for Cmp
DTL.text_usr_75 = 'There are BOM's for Cmp';

// DTL.text usr 75 = CONCAT(DTL.text usr 75,LCL.Company Number Alpha,CON.1)
DTL.text_usr_75 = DTL.text_usr_75 + LCL.Company_Number_Alpha (1);

// DTL.text usr 75 = CONCAT(DTL.text usr 75,CON.Item,CON.1)
DTL.text_usr_75 = DTL.text_usr_75 + 'Item' (1);

// DTL.text usr 75 = CONCAT(DTL.text usr 75,LCL.Item Code Txt,CON.1)
DTL.text_usr_75 = DTL.text_usr_75 + LCL.Item_Code_Txt (1);

// DTL.text usr 75 = CONCAT(DTL.text usr 75,CON.. Do you want to continue,CON.*ZERO)
DTL.text_usr_75 = DTL.text_usr_75 + '. Do you want to continue' (*ZERO);

// DTL.text usr 75 = CONCAT(DTL.text usr 75,CON.?,CON.*ZERO)
DTL.text_usr_75 = DTL.text_usr_75 + '?' (*ZERO);

ENDIF;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.To_Company);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

// DTL.BOM Type Description = Condition name of DTL.BOM Type
DTL.BOM_Type_Description = RTVCND(DTL.BOM_Type);

//?Validate BOM for original item
EXECUTE FUNCTION(Val Item Has BOM       RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1362016;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?Send message if the item being copied does not have a BOM
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'The item being copied does not have a bill of material.'
ERROR(USR2152);
MSGPARM(DTL.Item_Code);

ENDIF;

//?Validate to item
EXECUTE FUNCTION(Val Item Exists        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1323881;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code_Detail);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?Send message if to item is not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Item not found'
ERROR(USR0374);
MSGPARM(DTL.Item_Code_Detail);

ENDIF;

//?E00367 will now delete and then copy
//?USER: User defined action

//?T896 9/28/01   Only show bom types C and P
//?E00367 Slm 4/3/2009 Changes on BOM Cpy function
//?R9547 DN 03/15/17-Changed Copy Function to Process by Company/ItemCode.
//?  And changed call to PPGIETR to use To Company.
// Call program Cpy Bom Dlt&Cpy       XF.
CALL PROGRAM(Cpy Bom Dlt&Cpy       XF) ('PNG9XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Item_Code_Detail);
PARAMETER(DTL.BOM_Type);
PARAMETER(DTL.To_Company);

// Call program Edt Bill of Material  ET.
CALL PROGRAM(Edt Bill of Material  ET) ('PPGIETR');
PARAMETER(DTL.To_Company);
PARAMETER(DTL.Item_Code_Detail);
PARAMETER(WRK.Blank_for_4_USR);

