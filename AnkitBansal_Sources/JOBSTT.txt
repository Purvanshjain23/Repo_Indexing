       //----------------------------------------------------------------------
       // Program To Check the status of the job sent in the parm. D means done
       //
       //
       // Create using: CRTRPGMOD MODULE(E1Idevgen/jobstt)
       //                         SRCFILE(E1idevgen/QRPGLESRC)
       //                         SRCMBR(jobstt)
       //                         REPLACE(*yes)
       //                           INCDIR('/e1int/jbs')
       //
       //               CRTPGM PGM(e1devgen/JOBSTT)
       //                      BNDSRVPGM((E1iplib  /JOBSTS) (QSYSDIR/QAXIS10CC))
       //
       //
       //  CH01 05/31/20 Change the SOAP Header Based on environemnt
       //  RMC  09/24/20 Copied to e1idevgen
       //
       //
     FF55CONFIG IF   E           K DISK
     FF55CONFIG3IF   E           K DISK
       //----------------------------------------------------------------------
     d MainRoutine     PR                  Extpgm('JOBSTT')
     d                                8A
     d                               10A
     d                                1A
     d                                1A
     d                                1n
     d MainRoutine     PI
     d $job                           8A
     d $version                      10A
     d $flag2                         1A
     d $sts                           1A
     d $bssv                          1n
       // The include members below are created by WSDL2RPG
      /copy /e1int/jbs/GetServerJobStatusManager.rpgleinc
      /copy /e1int/jbs/GetServerJobStatusManager_util.rpgleinc
      /copy /QIBM/ProdData/OS/WebServices/V1/client/include/Axis.rpgleinc
     d ws_ds           ds                  likeds(This_t) inz
     d m1              ds                  likeds(InputGetJobStatus_t)
     d m2              ds                  likeds(OutputGetJobStatus_t)
     d m3              ds                  likeds(xsd_int)
     d m4              ds                  likeds(xsd_string)
     d X_A1            S             10I 0 inz
     d X_A2            S             10A   inz
     d X_A3            S              6A   inz
     d X_A4            S              1A   inz
     d X_A7            S             80A   inz
     d X_ENDPOINT      S            100A   inz
     d X_USER          S             10A   inz
 CH01d X_EV01          S              1A   inz
 CH01d X_ENV           S             10A   inz
 CH01d X_CSTR          S             40A   inz
     d X_PASS          S             30A   inz
     d NULLSTR         s              1

     d rtnInd          s              1n
     D phb             S               *
     D BNode1          S               *
     D BNode2          S               *
     D BNode3          S               *
     D uriWSSE         C                   'http://docs.oasis-open.org/wss-
     D                                     /2004/01/oasis-200401-wss-wssec-
     D                                     urity-secext-1.0.xsd'
     D uriWSU          C                   'http://docs.oasis-open.org/wss-
     D                                     /2004/01/oasis-200401-wss-wssec-
     D                                     urity-utility-1.0.xsd'
     D uriToken        C                   'http://docs.oasis-open.org/wss-
     D                                     /2004/01/oasis-200401-wss-usern-
     D                                     ame-token-profile-1.0#PasswordT-
     D                                     ext'
     D uriEncry        C                   'http://docs.oasis-open.org/wss-
     D                                     /2004/01/oasis-200401-wss-soap-
     D                                     message-security-1.0#Base64Bina-
     D                                     ry'
     C     S2KY01        KLIST
     C                   KFLD                    S2EV01
      /free
       // Get EndPoint For Environment
           setll *start F55CONFIG;
           READ F55CONFIG;
           Dow Not %EOF(F55CONFIG);
           X_A7=S1DS01;
           X_USER=S1USER;
           X_PASS=S1DL01;
           X_ENV=S1ENVD;
           READ F55CONFIG;
           EndDo;
       // Get Profile Submission Details
           S2EV01=$flag2;
           chain S2KY01 F55CONFIG3;
           if %found(F55CONFIG3);
           X_USER=S2USER;
           X_PASS=S2DL01;
           endIf;
       //
       X_ENDPOINT=%TRIML(%TRIMR(X_A7)) +'/GetServerJobStatusManager';
       X_CSTR='DN='+ %TRIML(%TRIMR(X_USER)) + ',ENV=' +
               %TRIML(%TRIMR(X_ENV)) + ',ROLE=*ALL';
       ws_ds.endpoint = %TRIML(%TRIMR(X_ENDPOINT));
       // Create a connection to the web service
       if stub_create_GetServerJobStatusManager(ws_ds);
       m1.isNil_InputGetJobStatus_t='0';
       if $job <> *blanks;
       m1.serverJobNumber.value=%int($job);
       else;
       m1.serverJobNumber.value=0;
       endif;
       m1.versionHistory.value=$version;
       axiscStubSetSecure(ws_ds.handle:
       '/QIBM/UserData/ICSS/Cert/Server/DEFAULT.KDB':
       '':'':'NONE':'NONE':'':'':'true');
         phb = axiscStubCreateSOAPHeaderBlock(
         ws_ds.handle:'Security':uriWSSE:'wsse');
         axiscHeaderBlockCreateNamespaceDeclINamespace(
         phb:'wsu':uriWSU);
         axiscHeaderBlockCreateStdAttribute(phb:
         AXISC_ATTR_MUST_UNDERSTAND_TRUE:AXISC_SOAP_VER_1_1);
         Bnode1=axiscHeaderBlockCreateChildBasicNode(phb:
         AXISC_ELEMENT_NODE:'UsernameToken':'wsse':*NULL:*NULL);
         axiscHeaderBlockAddChild(phb:Bnode1);
         Bnode2=axiscHeaderBlockCreateChildBasicNode(phb:
         AXISC_ELEMENT_NODE:'Username':'wsse':*NULL:*NULL);
         axiscBasicNodeAddChild(Bnode1:Bnode2);
         Bnode3=axiscHeaderBlockCreateChildBasicNode(phb:
         AXISC_CHARACTER_NODE:*NULL:*NULL:*NULL:%TRIML(%TRIMR(X_CSTR)));
         axiscBasicNodeAddChild(Bnode2:Bnode3);
         Bnode2=axiscHeaderBlockCreateChildBasicNode(phb:
         AXISC_ELEMENT_NODE:'Password':'wsse':*NULL:*NULL);
         axiscBasicNodeCreateAttribute(Bnode2:
         'Type':*NULL:*NULL:uriToken);
         axiscBasicNodeAddChild(Bnode1:Bnode2);
         Bnode3=axiscHeaderBlockCreateChildBasicNode(phb:
         AXISC_CHARACTER_NODE:*NULL:*NULL:*NULL:%TRIML(%TRIMR(X_PASS)));
         axiscBasicNodeAddChild(Bnode2:Bnode3);
          // Call the web service TO Submit UBE
          rtnInd = stub_op_GetServerJobStatus(ws_ds:m1:m2);

          $bssv=rtnInd;
          // Display The Returned Value
             m4.value=m2.jobStatus.value;
             $sts=m4.value;
          // Close the web service connection
          stub_destroy_GetServerJobStatusManager(ws_ds);
       else;
          dsply %subst(ws_ds.excString:1:50);
       endif;

       return;
      /end-free

