// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDSVE1R
// ?Date: 14.08.2025 Time: 03:29:37
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Next Program Name = CON.PDSVE1R
PAR.Next_Program_Name = 'PDSVE1R';

// LCL.Pricing Event Called From = CND.Order Entry
LCL.Pricing_Event_Called_From = 'OE';

// Call program EXC Rtv Status        XF.
CALL PROGRAM(EXC Rtv Status        XF) ('PBXNXFR');
PARAMETER(PAR.Company_Number);
PARAMETER('TMSLDP');
PARAMETER(PAR.Live_with_TPM);

//?USER: Initialize key screen

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(KEY.Company_Number);
PARAMETER(KEY.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize detail screen (existing record)

//?**************************
//?Get # orders on load (Used to allow change to Load Type)
CASE;

// IF DB1.Load ID NE WRK.ZERO
IF DB1.Load_ID <> WRK.ZERO;

EXECUTE FUNCTION(RTV Nbr of Orders/Load RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2116566;
PARAMETER(DB1.Load_ID);
PARAMETER(PAR.Number_of_Orders_on_Load);
{
 //?USER: Initialize routine

 // PAR.Number of Orders = CON.*ZERO
 PAR.Number_of_Orders = *ZERO;

 //?USER: Process Data record

 // PAR.Number of Orders = PAR.Number of Orders + CON.1
 PAR.Number_of_Orders = PAR.Number_of_Orders + 1;

}


//?Get # orders on load (Used to allow change to Load Type)
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Number of Orders on Load = CON.*ZERO
PAR.Number_of_Orders_on_Load = *ZERO;

ENDIF;

//?Get load status, if on a load
CASE;

// IF DB1.Load ID is NE Blank
IF DB1.Load_ID <> *ZERO;

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
EXECUTE FUNCTION(RTV ld Accpt/Load Status) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1591499;
PARAMETER(DB1.Load_ID);
PARAMETER(WRK.Load_Status);
PARAMETER(WRK.Load_Acceptance_Flag);
PARAMETER(PAR.MG_Created_Load);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?**************************
//?If Buyers Truck or Rail zero out absorbed freight rate
CASE;

// IF DTL.Shipping Method is Collect Rail
IF DTL.Shipping_Method = 'CR';

// OR DTL.Shipping Method is Collect Truck
OR DTL.Shipping_Method = 'CT';

// DTL.Absorbed Freight Rate = CON.*ZERO
DTL.Absorbed_Freight_Rate_CWT = *ZERO;

//?R12926 DN 05/11/18-Set Abs Frt Override Reason to Blank.
// DTL.Abs Frt Override Reason = CND.Not Entered
DTL.Abs_Frt_Override_Reason = *BLANK;

//?If Buyers Truck or Rail zero out absorbed freight rate
// IF *OTHERWISE
IF *OTHERWISE;

//?R12926 DN 05/02/18-Commented Out. At Order level, use AFR from OH.
//?R12926 DN 05/08/18-Populate Customer ABS Freight Rate.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.USR Display 13 = CND.No
LCL.USR_Display_13 = 'N';

EXECUTE FUNCTION(RTV Abs Freight Rate   RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1391554;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Absorbed_Freight_Rate_1);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Org ABS & Reason   RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2149963;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DTL.Abs_Frt_Override_Reason);
PARAMETER(LCL.OHE_Orig_ABS_Freight_Rate);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Save ABS Freight Rate CWT & ABS Freight Override Reason.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Save AFR from Order to LCL ctxt to Create Load Order Change Log.
// LCL.Absorbed Freight Rate CWT = DB1.Absorbed Freight Rate CWT
LCL.Absorbed_Freight_Rate_CWT = DB1.Absorbed_Freight_Rate_CWT;

//?Save Orig Reason from Order to LCL ctxt to Create Load Order Change Log.
// LCL.Abs Frt Override Reason = DTL.Abs Frt Override Reason
LCL.Abs_Frt_Override_Reason = DTL.Abs_Frt_Override_Reason;

ENDIF;

//?To Display 'Prior Order ABS Freight Rate' when ABS Frt Rate Changes.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Save Original AFR Value from Order Header.
// LCL.Absorbed Freight Rate 2 = LCL.OHE Orig ABS Freight Rate
LCL.Absorbed_Freight_Rate_2 = LCL.OHE_Orig_ABS_Freight_Rate;

//?If ABS Freight Rate Changes, Show Original ABS Frt Rate from OHE.
CASE;

// IF DB1.Absorbed Freight Rate CWT NE LCL.OHE Orig ABS Freight Rate
IF DB1.Absorbed_Freight_Rate_CWT <> LCL.OHE_Orig_ABS_Freight_Rate;

// AND LCL.OHE Orig ABS Freight Rate is Entered
AND LCL.OHE_Orig_ABS_Freight_Rate <> *ZERO;

// DTL.Absorbed Freight Rate 2 = LCL.OHE Orig ABS Freight Rate
DTL.Absorbed_Freight_Rate_2 = LCL.OHE_Orig_ABS_Freight_Rate;

//?If ABS Freight Rate Changes, Show Original ABS Frt Rate from OHE.
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Absorbed Freight Rate 2 = CON.*ZERO
DTL.Absorbed_Freight_Rate_2 = *ZERO;

ENDIF;

ENDIF;

CASE;

// IF DTL.Absorbed Freight Rate CWT NE DTL.Absorbed Freight Rate 2
IF DTL.Absorbed_Freight_Rate_CWT <> DTL.Absorbed_Freight_Rate_2;

// LCL.USR Display 13 = CND.Yes
LCL.USR_Display_13 = 'Y';

ENDIF;

ENDIF;

ENDIF;

// LCL.Crt Load Order Chg Log = CND.Yes
LCL.Crt_Load_Order_Chg_Log = 'Y';

EXECUTE FUNCTION(RTV Salesman Code      RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1284971;
PARAMETER(DB1.Sales_Route_Code);
PARAMETER(DTL.Salesperson_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Salesperson Name   RT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1111501;
PARAMETER(DTL.Salesperson_Code);
PARAMETER(DTL.Salesperson_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV P.O. Required Flag RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1443517;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(PAR.P_O_Required_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Miles to cust from comp/cust will normally be zeros.
EXECUTE FUNCTION(Rtv Miles to Customer  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1291286;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Mileage_To_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(VAL Active Dtl exists  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426699;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?Determine if Load Type should be output only
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?(active detail exists)
// PAR.USR Output Only Status = CND.yes
PAR.USR_Output_Only_Status = 'Y';

//?Determine if Load Type should be output only
// IF DB1.Load ID NE WRK.ZERO
IF DB1.Load_ID <> WRK.ZERO;

//?Allow input if only 1 order on load
CASE;

// IF PAR.Number of Orders on Load is Greater Than 1
IF PAR.Number_of_Orders_on_Load > 1;

// PAR.USR Output Only Status = CND.yes
PAR.USR_Output_Only_Status = 'Y';

//?Allow input if only 1 order on load
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Output Only Status = CND.no
PAR.USR_Output_Only_Status = 'N';

ENDIF;

//?Determine if Load Type should be output only
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Output Only Status = CND.no
PAR.USR_Output_Only_Status = 'N';

ENDIF;

//?Determine if Ship to Customer should be output only      E00102
CASE;

// IF PAR.Number of Orders on Load is Greater Than 1
IF PAR.Number_of_Orders_on_Load > 1;

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
EXECUTE FUNCTION(RTV Number Orders/Stop RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1443653;
PARAMETER(DB1.Load_ID);
PARAMETER(DB1.Order_Number);
PARAMETER(PAR.Number_of_Orders_on_Stop);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Sum Orders on Stop RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1443654;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Stop_Drop);
 PARAMETER(PAR.Number_of_Orders_on_Stop);
 {
  //?USER: Initialize routine

  // PAR.Number of Orders on Stop = CON.*ZERO
  PAR.Number_of_Orders_on_Stop = *ZERO;

  //?USER: Process Data record

  // PAR.Number of Orders on Stop = PAR.Number of Orders on Stop + CON.1
  PAR.Number_of_Orders_on_Stop = PAR.Number_of_Orders_on_Stop + 1;

 }

}


//?Output only if >1 order on stop
CASE;

// IF PAR.Number of Orders on Stop is Greater Than 1
IF PAR.Number_of_Orders_on_Stop > 1;

// PAR.USR Output Only Status 3 = CND.yes
PAR.USR_Output_Only_Status_3 = 'Y';

//?Output only if >1 order on stop
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Output Only Status 3 = CND.no
PAR.USR_Output_Only_Status_3 = 'N';

ENDIF;

//?Determine if Ship to Customer should be output only      E00102
// IF WRK.Load Status is Locked thru Invoiced
IF WRK.Load_Status = 'I'/'L'/'S';

//?** Don't allow Cust# change if on a load and locked
// PAR.USR Output Only Status 3 = CND.yes
PAR.USR_Output_Only_Status_3 = 'Y';

//?Determine if Ship to Customer should be output only      E00102
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Output Only Status 3 = CND.no
PAR.USR_Output_Only_Status_3 = 'N';

ENDIF;

// PAR.Load Type = DB1.Load Type
PAR.Load_Type = DB1.Load_Type;

// PAR.USR Ship To Customer = DB1.Ship To Customer
PAR.USR_Ship_To_Customer = DB1.Ship_To_Customer;

// PAR.A/R Customer Number = DB1.A/R Customer Number
PAR.AR_Customer_Number = DB1.AR_Customer_Number;

EXECUTE FUNCTION(Rtv Customer TFEx     RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1747887;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Customer_TF_Exempt_Code);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Process Data record

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

}


EXECUTE FUNCTION(RTV Country Code       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1395144;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(WRK.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Format letter of credit for the screen
CASE;

// IF LCL.Letter of Credit Number is Entered
IF LCL.Letter_of_Credit_Number <> *BLANK;

// DTL.String 30 = LCL.Letter of Credit Number
DTL.String_30 = LCL.Letter_of_Credit_Number;

ENDIF;

EXECUTE FUNCTION(RTV Booking # f/ord   RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2069357;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.OHE_Booking_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Save PO# in case it is changed.     6/09/2008 LJB E00139
// PAR.Customer Purchase Order # = DTL.Customer Purchase Order #
PAR.Customer_Purchase_Order_# = DTL.Customer_Purchase_Order_#;

// PAR.Load ID = DTL.Load ID
PAR.Load_ID = DTL.Load_ID;

//?DEFAULT: Load Plan Order
CASE;

// IF PAR.Live with TPM is Yes
IF PAR.Live_with_TPM = 'Y';

// PAR.USR Output Only Status 2 = CND.yes
PAR.USR_Output_Only_Status_2 = 'Y';

ENDIF;

//?Save Existing Data.
DO;

// LCL.Ship To Customer SavUsr = DB1.Ship To Customer
LCL.Ship_To_Customer_SavUsr = DB1.Ship_To_Customer;

// LCL.Ship To Address Line 1 = DB1.Ship To Address Line 1
LCL.Ship_To_Address_Line_1 = DB1.Ship_To_Address_Line_1;

// LCL.Ship To Address Line 2 = DB1.Ship To Address Line 2
LCL.Ship_To_Address_Line_2 = DB1.Ship_To_Address_Line_2;

// LCL.Ship To Address Line 3 = DB1.Ship To Address Line 3
LCL.Ship_To_Address_Line_3 = DB1.Ship_To_Address_Line_3;

// LCL.Ship To City = DB1.Ship To City
LCL.Ship_To_City = DB1.Ship_To_City;

// LCL.Ship To State Code = DB1.Ship To State Code
LCL.Ship_To_State_Code = DB1.Ship_To_State_Code;

// LCL.Ship To Zip/Postal Code = DB1.Ship To Zip/Postal Code
LCL.Ship_To_Zip_Postal_Code = DB1.Ship_To_Zip_Postal_Code;

// LCL.Customer Purchase Order # = DB1.Customer Purchase Order #
LCL.Customer_Purchase_Order_# = DB1.Customer_Purchase_Order_#;

// LCL.Air Freight Order = DB1.Air Freight Order
LCL.Air_Freight_Order = DB1.Air_Freight_Order;

// LCL.Block Order Flag = DB1.Block Order Flag
LCL.Block_Order_Flag = DB1.Block_Order_Flag;

ENDDO;

//?USER: Validate detail screen fields

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
//?Prompt on Ship to Customer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Ship To Customer
AND PGM.*Cursor_field = DTL.Ship_To_Customer;

//?Error if F4 on output only field/Else process F4
CASE;

// IF PAR.USR Output Only Status 3 is yes
IF PAR.USR_Output_Only_Status_3 = 'Y';

// Send error message - 'Function not available for this entry'
ERROR(USR1942);

//?Error if F4 on output only field/Else process F4
// IF *OTHERWISE
IF *OTHERWISE;

// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(DTL.Ship_To_Customer);

ENDIF;

ENDIF;

//?If Buyers Truck or Rail do not allow absorbed freight rate
CASE;

// IF DTL.Shipping Method is Collect Rail
IF ( DTL.Shipping_Method = 'CR';

// OR DTL.Shipping Method is Collect Truck
OR DTL.Shipping_Method = 'CT' );

// AND DTL.Absorbed Freight Rate is Entered
AND DTL.Absorbed_Freight_Rate_CWT <> *ZERO;

// Send information message - 'Freight rate not allowed if Buyers Truck.  Rate will be changed to Ze
MESSAGE(USR2256 *INFO);

// DTL.Absorbed Freight Rate = CON.*ZERO
DTL.Absorbed_Freight_Rate_CWT = *ZERO;

ENDIF;

//?If not Buyers Truck/Rail & AFR=0 or Block Order Changed, Get AFR Default.
CASE;

// IF DTL.Shipping Method is Prepaid Rail
IF ( DTL.Shipping_Method = 'PR';

// OR DTL.Shipping Method is Prepaid Truck
OR DTL.Shipping_Method = 'PT' );

//?R12926 DN 6/21/18-Use Co Cust AFR when AFR=0.
CASE;

// IF DTL.Absorbed Freight Rate CWT is EQ Zeros
IF DTL.Absorbed_Freight_Rate_CWT = *ZERO;

//?Must get AFR from Co Cust. Leave as is.
EXECUTE FUNCTION(RTV Abs Freight Rate   RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1391554;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Send information message - 'Freight required if not a Buyers Truck. Default may be changed.'
MESSAGE(USR1281 *INFO);

ENDIF;

//?R12926 DN 6/21/18-Use Co Cust AFR when Block Order Chg from B to F.
CASE;

// IF LCL.Block Order Flag is Block Order
IF LCL.Block_Order_Flag = 'B';

// AND DTL.Block Order Flag is Firm Order
AND DTL.Block_Order_Flag = 'F';

//?Do NOT Create Load Order Change Log for ABSRTE & ABSRSN.
// LCL.Crt Load Order Chg Log = CND.No
LCL.Crt_Load_Order_Chg_Log = 'N';

//?Must get AFR from Co Cust. Leave as is.
EXECUTE FUNCTION(RTV Abs Freight Rate   RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1391554;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Abs Frt Override Reason = CND.Not Entered
DTL.Abs_Frt_Override_Reason = *BLANK;

// Send information message - 'Freight required if not a Buyers Truck. Default may be changed.'
MESSAGE(USR1281 *INFO);

ENDIF;

ENDIF;

//?Ship to customer changed
CASE;

// IF DTL.Ship To Customer NE PAR.USR Ship To Customer
IF DTL.Ship_To_Customer <> PAR.USR_Ship_To_Customer;

// OR DTL.Ship To Customer NE PAR.Ship To Customer
OR DTL.Ship_To_Customer <> PAR.Ship_To_Customer;

//?* change the saved field if it changes. 10.27.09 rmc
// PAR.USR Ship To Customer = DTL.Ship To Customer
PAR.USR_Ship_To_Customer = DTL.Ship_To_Customer;

EXECUTE FUNCTION(RTV P.O. Required Flag RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1443517;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(PAR.P_O_Required_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Validate company/customer
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Error Status = CND.no
WRK.Error_Status = 'N';

// LCL.Must Ship Error = CND.No Error
LCL.Must_Ship_Error = *BLANK;

// PAR.Requested Delivery Date = CON.*ZERO
PAR.Requested_Delivery_Date = *ZERO;

// PAR.Requested Delivery Time = CON.*ZERO
PAR.Requested_Delivery_Time = *ZERO;

EXECUTE FUNCTION(RTV OE Hold/ShipTo FlagRT) TYPE(RTVOBJ) FILE(CABBREP)          AC1306629;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(WRK.Order_Entry_Hold);
PARAMETER(WRK.Ship_To_Customer_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Error if customer on OE hold
CASE;

// IF WRK.Order Entry Hold is New Order Hold
IF WRK.Order_Entry_Hold = 'Y';

// Send error message - 'Customer is held for new orders. Cannot process transaction.'
ERROR(USR1025);

QUIT;

ENDIF;

//?Error if ship to customer is not a Ship to Type of cust.
CASE;

// IF WRK.Ship To Customer Flag is No Use as Ship to Cust
IF WRK.Ship_To_Customer_Flag = 'N';

// Send error message - 'Invalid Ship To entered - Ship to Customer Flag is 'N'o.'
ERROR(USR2482);
MSGPARM(DTL.Ship_To_Customer);

QUIT;

ENDIF;

//?Ensure P.O Required not = blank
CASE;

// IF PAR.P.O. Required Flag EQ WRK.BLANK
IF PAR.P_O_Required_Flag = WRK.BLANK;

// PAR.P.O. Required Flag = CND.no
PAR.P_O_Required_Flag = 'N';

ENDIF;

//?Error if Cust TF Exempt code changes from EC to NE and mixed orders
CASE;

// IF DTL.OH TF Exempt Code is Blank or Pre Comm
IF DTL.OH_TF_Exempt_Code = *BLANK/'PC';

//?     no line items exist yet or pre commencement from startup
//?Error if Cust TF Exempt code changes from EC to NE and mixed orders
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Customer TFEx     RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1747887;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(WRK.Customer_TF_Exempt_Code);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Process Data record

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

}


// WRK.Error Flag            USR = CND.Blank
WRK.Error_Flag_USR = *BLANK;

CASE;

// IF DTL.Customer TF Exempt Code NE WRK.Customer TF Exempt Code
IF DTL.Customer_TF_Exempt_Code <> WRK.Customer_TF_Exempt_Code;

//?Error Status 2 = Yes, test for error condition
// Call program Exc Calc Ord ExemptCd XF.
CALL PROGRAM(Exc Calc Ord ExemptCd XF) ('PPSLXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.OH_TF_Exempt_Code);
PARAMETER(WRK.Error_Flag_USR);
PARAMETER('Y');

CASE;

// IF WRK.Error Flag            USR is Yes
IF WRK.Error_Flag_USR = 'Y';

// Send error message - 'Tf Exempt error-cant change to non-exempt cust. Itms mixed exmpt & non-exmp
ERROR(USR3589);
MSGPARM(DTL.Ship_To_Customer);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?** If no order detail recs, get cust default warehouse
CASE;

// IF WRK.Warehouse Code is Warehouse Code Blank
IF WRK.Warehouse_Code = *BLANK;

EXECUTE FUNCTION(RTV 1st Warehouse      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1575817;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.Warehouse_Code);
{
 //?USER: Process Data record

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

}


CASE;

// IF WRK.Warehouse Code is Warehouse Code Blank
IF WRK.Warehouse_Code = *BLANK;

EXECUTE FUNCTION(RTV Cust Ordering Dflt2RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1981275;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.P_O_Required_Flag);
PARAMETER(NLL.Deliver_after_time);
PARAMETER(NLL.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Mileage_To_Customer);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(NLL.Outside_Warehouse_Flag);
PARAMETER(NLL.Customer_Group_Code);
PARAMETER(NLL.Customer_Group_Code_2);
PARAMETER(NLL.Ord_Ent_Default_Sls_Rte);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

// DTL.Warehouse Code = WRK.Warehouse Code
DTL.Warehouse_Code = WRK.Warehouse_Code;

//?** Rtv address
EXECUTE FUNCTION(RTV Cust Add,Ct-A/R CstRT) TYPE(RTVOBJ) FILE(CABBREP)          AC1470402;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(WRK.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Check for Must Ship date error, skip Hi Plns, Dailys, Collect
//?** Change to use the XF so changes are encorporated properly E00452
//?** Change to use the XF without SSD test, cannot change here E00447
//?E01523 5/02/2011 RMC USE Req delv dt/time always for ddt calc
// WRK.USR Date - ATR = DTL.Requested Delivery Date
WRK.USR_Date_ATR = DTL.Requested_Delivery_Date;

// WRK.USR To Time 4.0 = DTL.Requested Delivery Time
WRK.USR_To_Time_4_0 = DTL.Requested_Delivery_Time;

// Call program CLC Must Ship-Reqd Dlv XF.
CALL PROGRAM(CLC Must Ship-Reqd Dlv XF) ('PNK0XFR');
PARAMETER(LCL.Must_Ship_Error);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(WRK.USR_Date_ATR);
PARAMETER(WRK.USR_To_Time_4_0);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(LCL.Must_Ship_Date_USR);
PARAMETER(LCL.Must_Ship_Time_USR);
PARAMETER(*ZERO);

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(PAR.Company_Organization);

//?** No Miles error if international customer     E00452
CASE;

// IF DTL.Ship To State Code is International Accounts
IF DTL.Ship_To_State_Code = '.';

// LCL.Must Ship Error = CND.No Error
LCL.Must_Ship_Error = *BLANK;

ENDIF;

//?** No Miles error if TMSLDP is Yes             E4119        8.08.16
CASE;

// IF PAR.Live with TPM is Yes
IF PAR.Live_with_TPM = 'Y';

// LCL.Must Ship Error = CND.No Error
LCL.Must_Ship_Error = *BLANK;

ENDIF;

//?Process date error or no "Miles Betw Cities" for must ship
CASE;

// IF LCL.Must Ship Error is No Error
IF LCL.Must_Ship_Error = *BLANK;

// OR PAR.Company Organization is Not Seaboard
OR PAR.Company_Organization = 'D'/'H';

// OR DTL.Shipping Method is Collect
OR DTL.Shipping_Method = 'CR'/'CT';

// OR LCL.Must Ship Error is Req Ship should =Must Shp
OR LCL.Must_Ship_Error = 'RSD';

// OR DTL.Export Status is yes
OR ( DTL.Export_Status = 'Y';

// AND DTL.Load ID is Blank
AND DTL.Load_ID = *ZERO );

//?**  Do nothing if no error or if High Plains, Dailys, or Collect
//?**  Clear the error flag for HP, Dailys, and CT and CR
// LCL.Must Ship Error = CND.No Error
LCL.Must_Ship_Error = *BLANK;

//?Process date error or no "Miles Betw Cities" for must ship
// IF *OTHERWISE
IF *OTHERWISE;

//?deleted
CASE;

// IF LCL.Must Ship Error is Miles to Next=Zeros
IF LCL.Must_Ship_Error = 'MTN';

//?** Error if the Miles Between Cities does not exist
// Send error message - 'No Miles Between Cities record or City misspelled. Call Traffic or F4 to se
ERROR(USR3853);
MSGPARM(DTL.Ship_To_City);

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?deleted
// IF DTL.Load ID is NE Blank
IF DTL.Load_ID <> *ZERO;

// AND LCL.Must Ship Error is Must Ship before NOW
AND ( LCL.Must_Ship_Error = 'NOW';

// OR LCL.Must Ship Error is Schd Shp not bef Must Shp
OR LCL.Must_Ship_Error = 'SSD' );

//?** Cannot deliver on time to new cust#, Scheduling must chg dates first
// Send error message - 'Cannot deliver on time to new customer. Scheduling must change dates first.
ERROR(USR4184);
MSGPARM(DTL.Ship_To_Customer);

//?deleted
//?deleted
// IF *OTHERWISE
IF *OTHERWISE;

//?** Error if assigned to a load and has an invalid date
// Call program Zzz Must Ship Dt NotifyPV.
CALL PROGRAM(Zzz Must Ship Dt NotifyPV) ('PDKLPVR');
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(LCL.Must_Ship_Date_USR);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(LCL.Must_Ship_Time_USR);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(LCL.Must_Ship_Error);

// Send error message - 'Cannot arrive on time-Change Delivery Date or Customer'
ERROR(USR3934);
MSGPARM(DTL.Requested_Delivery_Date);

ENDIF;

// LCL.Must Ship Error = CND.No Error
LCL.Must_Ship_Error = *BLANK;

ENDIF;

//?R12926 DN 05/11/18-Ship To Cust Changed, use AFR from Co Cust. Leave as is
EXECUTE FUNCTION(RTV Cust Ordering Dflt2RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1981275;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Terms_Code);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Special_Instructions);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.P_O_Required_Flag);
PARAMETER(NLL.Deliver_after_time);
PARAMETER(NLL.Type_Code);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Mileage_To_Customer);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Outside_Warehouse_Flag);
PARAMETER(NLL.Customer_Group_Code);
PARAMETER(NLL.Customer_Group_Code_2);
PARAMETER(NLL.Ord_Ent_Default_Sls_Rte);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R12926 DN 06/27/18-Do NOT Update AFR if Shipping Method is NOT Prepaid.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Do NOT Create Load Order Change Log (Type=ABSRTE) if Ship To Cust Changes.
// LCL.Crt Load Order Chg Log = CND.No
LCL.Crt_Load_Order_Chg_Log = 'N';

//?Blank Out Abs Frt Overrride Reason.
// DTL.Abs Frt Override Reason = CND.Not Entered
DTL.Abs_Frt_Override_Reason = *BLANK;

CASE;

// IF DTL.Shipping Method is Collect Rail
IF DTL.Shipping_Method = 'CR';

// OR DTL.Shipping Method is Collect Truck
OR DTL.Shipping_Method = 'CT';

// DTL.Absorbed Freight Rate CWT = CON.*ZERO
DTL.Absorbed_Freight_Rate_CWT = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

//?R12926 DN 06/13/18-Display New Customer ABS Freight Rate &
//?  Save Orig ABS Freight Rate on Screen.
// DTL.Absorbed Freight Rate 1 = DTL.Absorbed Freight Rate CWT
DTL.Absorbed_Freight_Rate_1 = DTL.Absorbed_Freight_Rate_CWT;

// LCL.Absorbed Freight Rate 2 = DTL.Absorbed Freight Rate CWT
LCL.Absorbed_Freight_Rate_2 = DTL.Absorbed_Freight_Rate_CWT;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Customer Air Frt  RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1789821;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Air_Freight_Order);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?*----------------------------------------------------------------*
EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Bill to Customer = DTL.A/R Customer Number
DTL.Bill_to_Customer = DTL.AR_Customer_Number;

// PAR.Status - Y or N = CND.yes
PAR.Status_Y_or_N = 'Y';

//?Validate company/customer
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Customer not found.'
ERROR(USR1007);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

ENDIF;

//?Move addr lines up if ship to addr fields are blank
CASE;

// IF DTL.Ship To Address Line 3 is Blank
IF DTL.Ship_To_Address_Line_3 = *BLANK;

// AND DTL.Ship To Address Line 2 is Blank
AND DTL.Ship_To_Address_Line_2 = *BLANK;

// AND DTL.Ship To City is Blank
AND DTL.Ship_To_City = *BLANK;

// DTL.Ship To Address Line 2 = DTL.TPM Address 2
DTL.Ship_To_Address_Line_2 = DTL.TPM_Address_2;

// DTL.Ship To Address Line 1 = DTL.TPM Address 1
DTL.Ship_To_Address_Line_1 = DTL.TPM_Address_1;

// DTL.Ship To City = DTL.TPM City
DTL.Ship_To_City = DTL.TPM_City;

// DTL.Ship To State Code = DTL.TPM Region/State Code
DTL.Ship_To_State_Code = DTL.TPM_Region_State_Code;

// DTL.Ship To Zip/Postal Code = DTL.TPM Zip Code
DTL.Ship_To_Zip_Postal_Code = DTL.TPM_Zip_Code;

//?if usa --> format zip
CASE;

// IF DTL.TPM Country Code is United States
IF DTL.TPM_Country_Code = 'USA';

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(LCL.Text_USR_4);
PARAMETER(DTL.TPM_Zip_Code);
{
 C                     MOVE #IPANA    #OO9NA
}


CASE;

// IF LCL.Text USR 4 is Entered
IF LCL.Text_USR_4 <> *BLANK;

// LCL.Text USR 6 = CONCAT(DTL.TPM Zip Code,CON.-,CON.*ZERO)
LCL.Text_USR_6 = DTL.TPM_Zip_Code + '-' (*ZERO);

// DTL.Ship To Zip/Postal Code = CON.*BLANK
DTL.Ship_To_Zip_Postal_Code = *BLANK;

// DTL.Ship To Zip/Postal Code = CONCAT(LCL.Text USR 6,LCL.Text USR 4,CON.*ZERO)
DTL.Ship_To_Zip_Postal_Code = LCL.Text_USR_6 + LCL.Text_USR_4 (*ZERO);

ENDIF;

ENDIF;

ENDIF;

//?** Test the city if not International and not on a load   E00228
CASE;

// IF DTL.Ship To City is Blank
IF DTL.Ship_To_City = *BLANK;

CASE;

// IF DTL.Export Status is yes
IF DTL.Export_Status = 'Y';

// AND DTL.Load ID is Blank
AND DTL.Load_ID = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'City required if country is USA or Canada.'
ERROR(USR2336);
MSGPARM(DTL.Ship_To_City);

ENDIF;

ENDIF;

// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(DTL.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(PAR.Company_Organization);

//?** Prompt on Ship to City                      FP1251 11/27/2007
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Ship To City
AND PGM.*Cursor_field = DTL.Ship_To_City;

// LCL.Ship To City = DTL.Ship To City
LCL.Ship_To_City = DTL.Ship_To_City;

// LCL.Ship To State Code = DTL.Ship To State Code
LCL.Ship_To_State_Code = DTL.Ship_To_State_Code;

// Call program SEL Milge Ship To City SR.
CALL PROGRAM(SEL Milge Ship To City SR) ('PDWMSRR');
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);

// DTL.Ship To City = LCL.Ship To City
DTL.Ship_To_City = LCL.Ship_To_City;

// DTL.Ship To State Code = LCL.Ship To State Code
DTL.Ship_To_State_Code = LCL.Ship_To_State_Code;

// Send information message - 'Zipcode is not available - Verify and change if necessary'
MESSAGE(USR4180 *INFO);
MSGPARM(DTL.Ship_To_Zip_Postal_Code);

ENDIF;

//?** Only test Must Ship Error if previously existed
CASE;

// IF LCL.Must Ship Error NE WRK.Blank for 4           USR
IF LCL.Must_Ship_Error <> WRK.Blank_for_4_USR;

// LCL.Must Ship Error = CND.No Error
LCL.Must_Ship_Error = *BLANK;

//?** Use wrk context for the warehouse code
// WRK.Warehouse Code = DTL.Warehouse Code
WRK.Warehouse_Code = DTL.Warehouse_Code;

//?** Rtv warehouse from order detail, if none, get defaults
CASE;

// IF WRK.Warehouse Code is Warehouse Code Blank
IF WRK.Warehouse_Code = *BLANK;

EXECUTE FUNCTION(RTV 1st Warehouse      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1575817;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.Warehouse_Code);
{
 //?USER: Process Data record

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

}


CASE;

// IF WRK.Warehouse Code is Warehouse Code Blank
IF WRK.Warehouse_Code = *BLANK;

EXECUTE FUNCTION(RTV Cust Ordering Dflt2RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1981275;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.P_O_Required_Flag);
PARAMETER(NLL.Deliver_after_time);
PARAMETER(NLL.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Mileage_To_Customer);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(NLL.Outside_Warehouse_Flag);
PARAMETER(NLL.Customer_Group_Code);
PARAMETER(NLL.Customer_Group_Code_2);
PARAMETER(NLL.Ord_Ent_Default_Sls_Rte);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

//?** Use clc function with no ship date, not available here    E00447
// Call program CLC Must Ship-Reqd Dlv XF.
CALL PROGRAM(CLC Must Ship-Reqd Dlv XF) ('PNK0XFR');
PARAMETER(LCL.Must_Ship_Error);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(LCL.Must_Ship_Date_USR);
PARAMETER(LCL.Must_Ship_Time_USR);
PARAMETER(*ZERO);

//?Process date order error for must ship
CASE;

// IF LCL.Must Ship Error is No Error
IF LCL.Must_Ship_Error = *BLANK;

// OR PAR.Company Organization is Not Seaboard
OR PAR.Company_Organization = 'D'/'H';

// OR DTL.Shipping Method is Collect
OR DTL.Shipping_Method = 'CR'/'CT';

// OR LCL.Must Ship Error is Req Ship should =Must Shp
OR LCL.Must_Ship_Error = 'RSD';

//?**  Do nothing if no error or if High Plains, Dailys, or Collect
//?**  Clear the error flag for HP, Dailys, and CT and CR
// LCL.Must Ship Error = CND.No Error
LCL.Must_Ship_Error = *BLANK;

//?Process date order error for must ship
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Must Ship Error is Miles to Next=Zeros
IF LCL.Must_Ship_Error = 'MTN';

//?** Info Error if the Miles Between Cities does not exist
// Send information message - 'No Miles Between Cities record or City misspelled. F4 to select.'
MESSAGE(USR3854 *INFO);
MSGPARM(DTL.Ship_To_City);
MSGPARM(DTL.Ship_To_State_Code);

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

// LCL.Must Ship Error = CND.No Error
LCL.Must_Ship_Error = *BLANK;

// IF DTL.Load ID is NE Blank
IF DTL.Load_ID <> *ZERO;

// AND LCL.Must Ship Error is Error List
AND LCL.Must_Ship_Error = 'DDD'/'MTN'/'NOW'/'MSD'/'RSD'/'SSD';

//?** Change the Customer Number. Dates cannot be changed here
// Send error message - 'Cannot deliver on time to new customer. Scheduling must change dates first.
ERROR(USR4184);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

ENDIF;

ENDIF;

// LCL.Letter of Credit Number = DTL.String 30
LCL.Letter_of_Credit_Number = DTL.String_30;

//?** Dates cannot be changed here so tests had to be changed E00447
//?USER: Validate detail screen relations

//?** Get country code-skip miles between cities test if international
EXECUTE FUNCTION(RTV Country Code       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1395144;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(WRK.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Validate, skip if Collect or not Seaboard or International
CASE;

// IF DTL.Shipping Method is Collect Truck
IF DTL.Shipping_Method = 'CT';

// OR DTL.Shipping Method is Collect Rail
OR DTL.Shipping_Method = 'CR';

// OR PAR.Company Organization is Not Seaboard
OR PAR.Company_Organization = 'D'/'H';

// OR WRK.Country Code is Entered
OR ( WRK.Country_Code <> *BLANK;

// AND WRK.Country Code is Not USA
AND WRK.Country_Code <> 'USA' );

// OR DTL.Ship To State Code is International Accounts
OR DTL.Ship_To_State_Code = '.';

//?** Validate, skip if Collect or not Seaboard or International
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF WRK.Country Code is USA
IF WRK.Country_Code = 'USA';

// OR WRK.Country Code is Blank
OR WRK.Country_Code = *BLANK;

//?** Validate city and spelling of city          FP1251 11/27/2007
CASE;

// IF DTL.Ship To City is NE Blanks
IF DTL.Ship_To_City <> *BLANK;

//?** Convert City and State to caps before testing existance
//?** skip periods and commas when converting (none in miles btwn cities)
// Call program CVT to Upper Alpha 2   XF.
CALL PROGRAM(CVT to Upper Alpha 2   XF) ('PNK2XFR');
PARAMETER(DTL.Ship_To_City);
PARAMETER(WRK.Ship_To_City);

// Call program CVT to Upper w/SpclChr XF.
CALL PROGRAM(CVT to Upper w/SpclChr XF) ('PMREXFR');
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(WRK.Ship_To_State_Code);

//?** Only test intern'l orders if port city is entered   E00452
CASE;

// IF WRK.Ship To State Code is International Accounts
IF WRK.Ship_To_State_Code = '.';

EXECUTE FUNCTION(RTV OHE Ship fields    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC1814635;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(WRK.Shipping_Line);
PARAMETER(WRK.Port_Delv_Terminal);
PARAMETER(WRK.OHE_City);
PARAMETER(NLL.OHE_Vessel_Airline);
PARAMETER(NLL.OHE_Voyage_Flight);
PARAMETER(NLL.OHE_Booking_Number);
PARAMETER(NLL.OHE_Discharge_Port_Airprt);
PARAMETER(NLL.OHE_Sail_Flight_Date);
PARAMETER(NLL.OHE_Port_Cut_Date);
PARAMETER(NLL.OHE_Arrival_Date);
PARAMETER(NLL.OHE_Late_Delivery_Code);
PARAMETER(NLL.OHE_Ship_Status);
PARAMETER(NLL.OHE_Container_Number);
PARAMETER(NLL.OHE_Comment_1);
PARAMETER(NLL.OHE_Comment_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Shipping Line is entered
IF WRK.Shipping_Line <> *BLANK;

EXECUTE FUNCTION(RTV Shipping Line/PortsRT) TYPE(RTVOBJ) FILE(PDLCREP)          AC1447742;
PARAMETER(WRK.Shipping_Line);
PARAMETER(WRK.Port_Delv_Terminal);
PARAMETER(WRK.Ship_To_City);
PARAMETER(NLL.Port_Address_Line_1);
PARAMETER(NLL.Port_Address_Line_2);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(NLL.Port_Zip_Postal_Code);
PARAMETER(NLL.Port_Phone_Number);
PARAMETER(NLL.Port_Fax_Number);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


EXECUTE FUNCTION(Val Mileage Existance RT) TYPE(RTVOBJ) FILE(PDLFREP)           AC1557065;
PARAMETER(WRK.Ship_To_City);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


// IF *OTHERWISE
IF *OTHERWISE;

//?** If intern'l and no port entered yet, force to normal condition
// WRK.Record Found USR = CND.Record Found
WRK.Record_Found_USR = 'Y';

ENDIF;

//?** Only test intern'l orders if port city is entered   E00452
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Mileage Existance RT) TYPE(RTVOBJ) FILE(PDLFREP)           AC1557065;
PARAMETER(WRK.Ship_To_City);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


ENDIF;

//?** Check spelling of entered city against Miles Between Cities file
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

//?** Send info message for now, maybe change to error message
//?** later if this problem isn't corrected.
//?Skip Miles betw cities test if Live with TPM          E004119
CASE;

// IF PAR.Live with TPM is Yes
IF PAR.Live_with_TPM = 'Y';

// LCL.USR Count = LCL.USR Count + CON.1
LCL.USR_Count = LCL.USR_Count + 1;

ENDIF;

//?** Only send error message once                       FP1251 LJB
CASE;

// IF LCL.USR Count is EQ 0
IF LCL.USR_Count = *ZERO;

// Send information message - 'No Miles Between Cities record or City misspelled. F4 to select.'
MESSAGE(USR3854 *INFO);
MSGPARM(DTL.Ship_To_City);
MSGPARM(DTL.Ship_To_State_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// LCL.USR Count = LCL.USR Count + CON.1
LCL.USR_Count = LCL.USR_Count + 1;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?Purchase order may be required
CASE;

// IF PAR.P.O. Required Flag is yes
IF PAR.P_O_Required_Flag = 'Y';

// AND DTL.Customer Purchase Order # EQ WRK.BLANK
AND DTL.Customer_Purchase_Order_# = WRK.BLANK;

CASE;

// IF DTL.Block Order Flag is Block Order
IF DTL.Block_Order_Flag = 'B';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Customer Default File requires P.O. to be entered for this customer.'
ERROR(USR1243);
MSGPARM(DTL.Customer_Purchase_Order_#);

ENDIF;

ENDIF;

//?If country is CAN or US, zip code is required
CASE;

// IF WRK.Country Code is Blank
IF WRK.Country_Code = *BLANK;

// OR WRK.Country Code is USA
OR WRK.Country_Code = 'USA';

// OR WRK.Country Code is Canada
OR WRK.Country_Code = 'CAN';

CASE;

// IF DTL.Ship To Zip/Postal Code EQ WRK.BLANK
IF DTL.Ship_To_Zip_Postal_Code = WRK.BLANK;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(DTL.Ship_To_Zip_Postal_Code);

ENDIF;

ENDIF;

//?If Buyers Truck or Rail don't allow ABS Frt Override Rsn-R12926 DN 6/08/18
CASE;

// IF DTL.Shipping Method is Collect Rail
IF ( DTL.Shipping_Method = 'CR';

// OR DTL.Shipping Method is Collect Truck
OR DTL.Shipping_Method = 'CT' );

// AND NOT DTL.Abs Frt Override Reason is Not Entered
AND ! DTL.Abs_Frt_Override_Reason = *BLANK;

// LCL.Generic Message 80 USR = CONCAT(CON.Abs Frt Override Rsn not,CON.allowed if Buyers Truck.,CON
LCL.Generic_Message_80_USR = 'Abs Frt Override Rsn not' + 'allowed if Buyers Truck.' (1);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM(LCL.Generic_Message_80_USR);

// DTL.Abs Frt Override Reason = CND.Not Entered
DTL.Abs_Frt_Override_Reason = *BLANK;

ENDIF;

//?If not Buyers Truck or Rail, Validate ABS Frt O/R Rsn-R12926 DN 6/08/18
CASE;

// IF DTL.Shipping Method is Prepaid Rail
IF ( DTL.Shipping_Method = 'PR';

// OR DTL.Shipping Method is Prepaid Truck
OR DTL.Shipping_Method = 'PT' );

// AND DTL.Abs Frt Override Reason is Not Entered
AND DTL.Abs_Frt_Override_Reason = *BLANK;

// AND DTL.Absorbed Freight Rate CWT NE LCL.Absorbed Freight Rate 2
AND DTL.Absorbed_Freight_Rate_CWT <> LCL.Absorbed_Freight_Rate_2;

// AND DTL.Absorbed Freight Rate 1 NE DTL.Absorbed Freight Rate CWT
AND DTL.Absorbed_Freight_Rate_1 <> DTL.Absorbed_Freight_Rate_CWT;

//?If Order ABS Freight Rate was changed, then ABS Frt Override Reason
//?is required. (Compared to Orig. ABS Freight Rate)
// Send error message - 'ABS Freight Rate was changed, must select ABS Frt Override Reason.'
ERROR(USR5084);
MSGPARM(DTL.Abs_Frt_Override_Reason);

QUIT;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Order Header & Ext CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2114145;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Order_Type_Sales);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Ship_To_Address_Line_1);
PARAMETER(DTL.Ship_To_Address_Line_2);
PARAMETER(DTL.Ship_To_Address_Line_3);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Ship_To_Zip_Postal_Code);
PARAMETER(DTL.Bill_to_Customer);
PARAMETER(DTL.Bill_to_Name);
PARAMETER(DTL.Bill_to_Address_Line_1);
PARAMETER(DTL.Bill_to_Address_Line_2);
PARAMETER(DTL.Bill_to_Address_Line_3);
PARAMETER(DTL.Bill_to_City);
PARAMETER(DTL.Bill_to_State_Code);
PARAMETER(DTL.Bill_to_Zip_Postal_Code);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(DTL.Order_Date);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Actual_Shipped_Date);
PARAMETER(DTL.Cancel_Date);
PARAMETER(DTL.Terms_Code);
PARAMETER(DTL.Special_Instructions);
PARAMETER(DTL.Special_Instructions_2);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Comment_Print_Acknowledge);
PARAMETER(DTL.Comment_Print_Inv_Cr_Memo);
PARAMETER(DTL.Comment_Print_Pick_Slip);
PARAMETER(DTL.Comment_Print_Ship_Doc);
PARAMETER(DTL.Reason_Code);
PARAMETER(DTL.Order_in_Use);
PARAMETER(DTL.Header_Status);
PARAMETER(DTL.Header_Status_Last);
PARAMETER(DTL.Order_Type_Print_Status);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.User_Original_Entry);
PARAMETER(DTL.Date_of_Original_Entry);
PARAMETER(DTL.Order_Value_Total);
PARAMETER(DTL.Order_Weight_Total);
PARAMETER(DTL.Credit_Hold);
PARAMETER(DTL.Production_Hold);
PARAMETER(DTL.New_Customer_Hold);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(DTL.Accounts_Receiv_Ent_1);
PARAMETER(DTL.Accounts_Receiv_Ent_2);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Absorbed_Freight_Rate_CWT);
PARAMETER(DTL.Rated_Freight);
PARAMETER(DTL.LTL_Flag);
PARAMETER(DTL.Price_Audit);
PARAMETER(DTL.Price_Status);
PARAMETER(DTL.Shipping_Method);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.Palletize);
PARAMETER(DTL.Shrink_Wrap);
PARAMETER(DTL.Slip_Sheet);
PARAMETER(DTL.Age_Code);
PARAMETER(DTL.Reefer_Temperature);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Attach_to_Invoice_Number);
PARAMETER(DTL.Load_Plan_Order);
PARAMETER(DTL.Print_Pick_Slip);
PARAMETER(DTL.Resell_Reference_Number);
PARAMETER(DTL.Special_Comment_1);
PARAMETER(DTL.Special_Comment_2);
PARAMETER(DTL.Affect_Auto_Accruals);
PARAMETER(DTL.Sales_Route_Code);
PARAMETER(DTL.Manager_Level_Code);
PARAMETER(DTL.VP_Level_Code);
PARAMETER(DTL.Attach_to_Order_Number);
PARAMETER(DTL.Reason_for_Price_Audit);
PARAMETER(DTL.Invoice_Number);
PARAMETER(DTL.Invoice_Suffix);
PARAMETER(DTL.Invoice_Date);
PARAMETER(DTL.Event_Code);
PARAMETER(DTL.Trans_Contol_AS400_Plant);
PARAMETER(DTL.Modified_Flag);
PARAMETER(DTL.A_R_order_Value_Total);
PARAMETER(DTL.Billing_Activity_Type);
PARAMETER(DTL.Block_Order_Flag);
PARAMETER(DTL.Order_Certification_Flag);
PARAMETER(DTL.Invoice_Order_Value_Tot);
PARAMETER(DTL.Process_Sts_for_3C);
PARAMETER(DTL.Order_Conf_Fax_Sts);
PARAMETER(DTL.Manifest_Fax_Sts);
PARAMETER(DTL.Invoice_Fax_Sts);
PARAMETER(DTL.Transfer_in_Storage_Ind);
PARAMETER(DTL.Email_Cust_On_Order_Ship);
PARAMETER(DTL.Order_Emailed);
PARAMETER(DTL.Export_Docs_Go_w_Driver);
PARAMETER(DTL.Shipping_Temp_Code_C_F);
PARAMETER(DTL.Broker_Order_Status);
PARAMETER(DTL.Air_Freight_Order);
PARAMETER(DTL.Order_Requires_Review);
PARAMETER(DTL.OH_Load_Plan_Ready);
PARAMETER(DTL.Export_USDA_Approved);
PARAMETER(DTL.HPB_Ship_to_Warehouse);
PARAMETER(DTL.OH_TF_Exempt_Code);
PARAMETER(DTL.OH_Appt_Confirmation_Dt);
PARAMETER(DTL.JPN_Invoice_Issuance_Date);
PARAMETER(DTL.Load_Actual_Shipped_Date);
PARAMETER(DTL.Load_BOL_Complete_Date);
PARAMETER(DTL.Load_Truck_Departure_Date);
PARAMETER(DTL.Maximum_Gross_Weight);
PARAMETER(DTL.Time_of_Original_Entry);
PARAMETER(DTL.OH_Appt_Confirmation_Tm);
PARAMETER(DTL.Load_BOL_Complete_Time);
PARAMETER(DTL.Load_Truck_Departure_Time);
PARAMETER(DTL.Act_Frt_Reference_Amount);
PARAMETER(DTL.Act_Non_Ref_Frt_Amount);
PARAMETER(DTL.OH_Fuel_Surcharge_Amount);
PARAMETER(DTL.OH_Total_Non_Ref_Frt_Amt);
PARAMETER(DTL.OH_Total_Ref_Frt_Amt);
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.OHE_Booking_Number);
PARAMETER(DTL.Abs_Frt_Override_Reason);
PARAMETER(LCL.Letter_of_Credit_Number);
PARAMETER(LCL.Pricing_Event_Called_From);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Processing after Data read

 //?01/22/09 RMC  move here from "before Data update" spot
 //?06/23/00 PKD Added the update of the Export Status on the Load
 //?             if the Export Status on the Order is changed to Y,
 //?Change the Export Status.
 CASE;

 // IF PAR.Export Status NE DB1.Export Status
 IF PAR.Export_Status <> DB1.Export_Status;

 // AND PAR.Export Status is yes
 AND PAR.Export_Status = 'Y';

 CASE;

 // IF DB1.Load ID is NE Blank
 IF DB1.Load_ID <> *ZERO;

 EXECUTE FUNCTION(Chg Export Status     CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC1540180;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Export_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 // LCL.Status Flag 1  Y/N = CND.No
 LCL.Status_Flag_1_Y_N = 'N';

 //?Email Requested Delv Change msg is changed and Appt exists.
 CASE;

 // IF PAR.Requested Delivery Date NE DB1.Requested Delivery Date
 IF ( PAR.Requested_Delivery_Date <> DB1.Requested_Delivery_Date;

 // OR PAR.Requested Delivery Time NE DB1.Requested Delivery Time
 OR PAR.Requested_Delivery_Time <> DB1.Requested_Delivery_Time );

 // AND DB1.OH Appt Confirmation Dt is Entered
 AND DB1.OH_Appt_Confirmation_Dt > *ZERO;

 // LCL.Status Flag 1  Y/N = CND.Yes
 LCL.Status_Flag_1_Y_N = 'Y';

 ENDIF;

 //?R12926 DN 06/11/18-Update Orig ABS Freight Rate in OHE file.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Org ABS & Reason   RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2149963;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(NLL.OHE_Abs_Rate_Override_Rsn);
 PARAMETER(LCL.OHE_Orig_ABS_Freight_Rate);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Ship To Customer Changed.
 CASE;

 // IF PAR.Ship To Customer NE DB1.Ship To Customer
 IF PAR.Ship_To_Customer <> DB1.Ship_To_Customer;

 // LCL.OHE Orig ABS Freight Rate = PAR.Absorbed Freight Rate CWT
 LCL.OHE_Orig_ABS_Freight_Rate = PAR.Absorbed_Freight_Rate_CWT;

 ENDIF;

 //?Block Order Changed from Block (B) to Firm (F).
 CASE;

 // IF DB1.Block Order Flag is Block Order
 IF DB1.Block_Order_Flag = 'B';

 // AND PAR.Block Order Flag is Firm Order
 AND PAR.Block_Order_Flag = 'F';

 // LCL.OHE Orig ABS Freight Rate = PAR.Absorbed Freight Rate CWT
 LCL.OHE_Orig_ABS_Freight_Rate = PAR.Absorbed_Freight_Rate_CWT;

 ENDIF;

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

 //?------------------------------------------------------------------
 //?------------------------------------------------------------------
 //?USER: Processing after Data update

 //?Email Requested Delv Change msg is changed and Appt exists.
 CASE;

 // IF LCL.Status Flag 1  Y/N is Yes
 IF LCL.Status_Flag_1_Y_N = 'Y';

 // Call program Exc Email Ord RqDtChg XF.
 CALL PROGRAM(Exc Email Ord RqDtChg XF) ('PBEPXFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Sales_Route_Code);

 ENDIF;

 //?R12926 DN 05/10/18-Replaced to Update Abs Rate Override Rsn &
 //?  Orig AFR if Ship To Customer Changed.
 EXECUTE FUNCTION(CHG OHE fm OH More Scr CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2149972;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.OHE_Booking_Number);
 PARAMETER(PAR.OHE_Abs_Rate_Override_Rsn);
 PARAMETER(PAR.Letter_of_Credit_Number);
 PARAMETER(LCL.OHE_Orig_ABS_Freight_Rate);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 //?CRT: TMS Order Header Trigger
 CASE;

 // IF PAR.Pricing Event Called From is TMS Update for Select
 IF PAR.Pricing_Event_Called_From = 'OE'/'SWP'/'CEO'/'UWT';

 CASE;

 // IF PAR.OH Load Plan Ready is Yes
 IF PAR.OH_Load_Plan_Ready = 'Y';

 // Call program Rtv Crt OH Trigger    XF.
 CALL PROGRAM(Rtv Crt OH Trigger    XF) ('PBWVXFR');
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Company_Number);

 ENDIF;

 ENDIF;

}


//?USER: Process command keys

//?Customer change
CASE;

// IF PAR.Ship To Customer NE DTL.Ship To Customer
IF PAR.Ship_To_Customer <> DTL.Ship_To_Customer;

//?* above was comparing to usr ship to customer  10.27.09 rmc
//?Update A/R Summary if A/R Customer changed
CASE;

// IF DTL.A/R Customer Number NE PAR.A/R Customer Number
IF DTL.AR_Customer_Number <> PAR.AR_Customer_Number;

//?subtract order's A/R value (old customer) from OLD customer's Value
// WRK.A/R order Value Total = CON.*ZERO - DTL.A/R order Value Total
WRK.A_R_order_Value_Total = *ZERO - DTL.A_R_order_Value_Total;

//?12/07/06 PKD PK0040 Use Accounting Company.  if there
EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(LCL.Shipping_Company);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Shipping_Company);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Accounting Company is Equal to zero
IF LCL.Accounting_Company = *ZERO;

EXECUTE FUNCTION(UPD Chg Val Open Ord   RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1349778;
PARAMETER(DTL.Company_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(WRK.A_R_order_Value_Total);
{
 //?USER: Processing if Data record not found

 //?This shouldn't be used here--A/R Summary is created when an order
 //?is created
 EXECUTE FUNCTION(CRT A/R Summary        CR) TYPE(CRTOBJ) FILE(ARBCREP)          AC1109013;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.A_R_order_Value_Total);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(1);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Process Data record

 // PAR.Value of Open Orders = DB1.Value of Open Orders + PAR.A/R order Value Total
 PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders + PAR.A_R_order_Value_Total;

 EXECUTE FUNCTION(CHG Value Open Orders  CH) TYPE(CHGOBJ) FILE(ARBCREP)          AC1351678;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(PAR.Value_of_Open_Orders);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(UPD Chg Val Open Ord   RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1349778;
PARAMETER(LCL.Accounting_Company);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(WRK.A_R_order_Value_Total);
{
 //?USER: Processing if Data record not found

 //?This shouldn't be used here--A/R Summary is created when an order
 //?is created
 EXECUTE FUNCTION(CRT A/R Summary        CR) TYPE(CRTOBJ) FILE(ARBCREP)          AC1109013;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.A_R_order_Value_Total);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(1);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?USER: Process Data record

 // PAR.Value of Open Orders = DB1.Value of Open Orders + PAR.A/R order Value Total
 PAR.Value_of_Open_Orders = DB1.Value_of_Open_Orders + PAR.A_R_order_Value_Total;

 EXECUTE FUNCTION(CHG Value Open Orders  CH) TYPE(CHGOBJ) FILE(ARBCREP)          AC1351678;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(PAR.Value_of_Open_Orders);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

//?subtract order value from value of open orders in A/R Summ; then
//?   make order A/R value = 0
EXECUTE FUNCTION(CHG A/R Order Value    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1408783;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


ENDIF;

//?R12926 DN 05/11/18-Absorbed Freight Rate is now input. Commented Out.
// PAR.USR Ship To Customer = DTL.Ship To Customer
PAR.USR_Ship_To_Customer = DTL.Ship_To_Customer;

// PAR.A/R Customer Number = DTL.A/R Customer Number
PAR.AR_Customer_Number = DTL.AR_Customer_Number;

//?update detail ship to customer         ALSO 8/25/05 Ord TF Exempt
EXECUTE FUNCTION(CHG All Ship Customer  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1443466;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.OH_TF_Exempt_Code);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Cancelled
 IF DB1.Detail_Line_Status = 'X';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.Ord TF Exempt Code is Pre Commencement
 IF DB1.Ord_TF_Exempt_Code = 'PC';

 // LCL.Ord TF Exempt Code = DB1.Ord TF Exempt Code
 LCL.Ord_TF_Exempt_Code = DB1.Ord_TF_Exempt_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv Item Def/TFExp    RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1747888;
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Ord_TF_Exempt_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?* 8/25/05   Determine Ord Tf Exempt code
 CASE;

 // IF PAR.OH TF Exempt Code is Not Exempt
 IF PAR.OH_TF_Exempt_Code = 'NE';

 //?* 8/25/05   Determine Ord Tf Exempt code
 // IF PAR.OH TF Exempt Code is Exempt Customer
 IF PAR.OH_TF_Exempt_Code = 'EC';

 CASE;

 // IF LCL.Ord TF Exempt Code is Not Exempt
 IF LCL.Ord_TF_Exempt_Code = 'NE';

 // LCL.Ord TF Exempt Code = CND.Exempt Customer
 LCL.Ord_TF_Exempt_Code = 'EC';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Ord TF Exempt Code = CND.Exempt Product
 LCL.Ord_TF_Exempt_Code = 'EP';

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CHG Ship to Customer   CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1443467;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(LCL.Ord_TF_Exempt_Code);
 ENDIF;

}


//?Update Load/Order Change Log if in change mode
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// WRK.Load Change Type = CND.Ship to Customer
WRK.Load_Change_Type = 'SHPCST';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// WRK.Change Log Prior Value = CVTVAR(PAR.Ship To Customer)
WRK.Change_Log_Prior_Value = CVTVAR(PAR.Ship_To_Customer);

// WRK.Change Log New Value = CVTVAR(DTL.Ship To Customer)
WRK.Change_Log_New_Value = CVTVAR(DTL.Ship_To_Customer);

CASE;

// IF DTL.Load ID is NE Blank
IF DTL.Load_ID <> *ZERO;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CRT Load/OrderChg n/ld XF.
CALL PROGRAM(CRT Load/OrderChg n/ld XF) ('PBFLXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

ENDIF;

ENDIF;

ENDIF;

// PAR.Ship To Customer = DTL.Ship To Customer
PAR.Ship_To_Customer = DTL.Ship_To_Customer;

//?Upd load header if load type has changed.
CASE;

// IF PAR.Load Type NE DTL.Load Type
IF PAR.Load_Type <> DTL.Load_Type;

//?E4119 RMC 5/23/2016 Remove Live with tpm checks
//?OMS132:  Dflt Bulk Loads to Pounds, regular loads to Miles
CASE;

// IF DTL.Load Type is Regular
IF DTL.Load_Type = 'R';

// PAR.Allocate Pounds/Miles = CND.Miles
PAR.Allocate_Pounds_Miles = 'M';

//?OMS132:  Dflt Bulk Loads to Pounds, regular loads to Miles
// IF DTL.Load Type is Bulk
IF DTL.Load_Type = 'B';

// PAR.Allocate Pounds/Miles = CND.Ton
PAR.Allocate_Pounds_Miles = 'T';

//?OMS132:  Dflt Bulk Loads to Pounds, regular loads to Miles
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Allocate Pounds/Miles = CND.Pounds
PAR.Allocate_Pounds_Miles = 'P';

ENDIF;

EXECUTE FUNCTION(CHG Ld Typ/Shp Mth/Alc CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1418759;
PARAMETER(DTL.Load_ID);
PARAMETER(PAR.Allocate_Pounds_Miles);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.Shipping_Method);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?Update Load/Order Change Log if in change mode
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

// WRK.Load Change Type = CND.Load Type
WRK.Load_Change_Type = 'LODTYP';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(PAR.Load_Type);
PARAMETER(DTL.Load_Type);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

ENDIF;

// PAR.Load Type = DTL.Load Type
PAR.Load_Type = DTL.Load_Type;

ENDIF;

//?** PO# chgd, order is on a load, write log and unaccept  E00139
CASE;

// IF DTL.Customer Purchase Order # NE PAR.Customer Purchase Order #
IF DTL.Customer_Purchase_Order_# <> PAR.Customer_Purchase_Order_#;

// AND PAR.Load ID is NE Blank
AND PAR.Load_ID <> *ZERO;

//?** Always write a log record if the PO# changes    E00139
// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// LCL.Load Change Type = CND.PO Number Changed
LCL.Load_Change_Type = 'PO#CHG';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(PAR.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(DTL.Customer_Purchase_Order_#);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

EXECUTE FUNCTION(RTV Load Acceptance Sw RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1476499;
PARAMETER(PAR.Load_ID);
PARAMETER(LCL.Load_Acceptance_Flag);
PARAMETER(PAR.MG_Created_Load);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Only unaccept if load has already been accepted.
CASE;

// IF LCL.Load Acceptance Flag is Load Accepted
IF LCL.Load_Acceptance_Flag = 'A';

// AND PAR.MG Created Load is Not MG Created Load
AND PAR.MG_Created_Load = *BLANK;

//?** Unaccept load if PO# chg on any of the orders
EXECUTE FUNCTION(CHG Load Acceptance Sw CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1475345;
PARAMETER(PAR.Load_ID);
PARAMETER('U');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

ENDIF;

// PAR.Customer Purchase Order # = DTL.Customer Purchase Order #
PAR.Customer_Purchase_Order_# = DTL.Customer_Purchase_Order_#;

//?R12926 DN 05/10/18-Create Load Order Change Log for Chg Type=ABSRTE.
CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

//?Absorbed Freight Rate Changed & Crt Load Order Chg Log=Yes.
CASE;

// IF DTL.Absorbed Freight Rate CWT NE LCL.Absorbed Freight Rate CWT
IF DTL.Absorbed_Freight_Rate_CWT <> LCL.Absorbed_Freight_Rate_CWT;

// AND LCL.Crt Load Order Chg Log is Yes
AND LCL.Crt_Load_Order_Chg_Log = 'Y';

// WRK.Load Change Type = CND.Absorbed Freight Rate
WRK.Load_Change_Type = 'ABSRTE';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

//?Format Prior Absorbed Freight Rate with Decimal.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Text USR 5 = CVTVAR(LCL.Absorbed Freight Rate CWT)
LCL.Text_USR_5 = CVTVAR(LCL.Absorbed_Freight_Rate_CWT);

// LCL.USR Text 3  3a = SUBSTRING(LCL.Text USR 5,CON.1,CON.3)
LCL.USR_Text_3_3a = SUBSTRING(LCL.Text_USR_5:1:3);

// LCL.Text 2 = SUBSTRING(LCL.Text USR 5,CON.4,CON.2)
LCL.Text_2 = SUBSTRING(LCL.Text_USR_5:4:2);

// LCL.Absorbed Freight 6A USR = CONCAT(LCL.USR Text 3  3a,CON..,CON.*ZERO)
LCL.Absorbed_Freight_6A_USR = LCL.USR_Text_3_3a + '.' (*ZERO);

// LCL.Absorbed Freight 6A USR = CONCAT(LCL.Absorbed Freight 6A USR,LCL.Text 2,CON.*ZERO)
LCL.Absorbed_Freight_6A_USR = LCL.Absorbed_Freight_6A_USR + LCL.Text_2 (*ZERO);

// WRK.Change Log Prior Value = LCL.Absorbed Freight 6A USR
WRK.Change_Log_Prior_Value = LCL.Absorbed_Freight_6A_USR;

ENDIF;

//?Format New Absorbed Freight Rate with Decimal.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Text USR 5 = CVTVAR(DTL.Absorbed Freight Rate CWT)
LCL.Text_USR_5 = CVTVAR(DTL.Absorbed_Freight_Rate_CWT);

// LCL.USR Text 3  3a = SUBSTRING(LCL.Text USR 5,CON.1,CON.3)
LCL.USR_Text_3_3a = SUBSTRING(LCL.Text_USR_5:1:3);

// LCL.Text 2 = SUBSTRING(LCL.Text USR 5,CON.4,CON.2)
LCL.Text_2 = SUBSTRING(LCL.Text_USR_5:4:2);

// LCL.Absorbed Freight 6A USR = CONCAT(LCL.USR Text 3  3a,CON..,CON.*ZERO)
LCL.Absorbed_Freight_6A_USR = LCL.USR_Text_3_3a + '.' (*ZERO);

// LCL.Absorbed Freight 6A USR = CONCAT(LCL.Absorbed Freight 6A USR,LCL.Text 2,CON.*ZERO)
LCL.Absorbed_Freight_6A_USR = LCL.Absorbed_Freight_6A_USR + LCL.Text_2 (*ZERO);

// WRK.Change Log New Value = CON.*BLANK
WRK.Change_Log_New_Value = *BLANK;

// WRK.Change Log New Value = LCL.Absorbed Freight 6A USR
WRK.Change_Log_New_Value = LCL.Absorbed_Freight_6A_USR;

ENDIF;

//?Append Abs Frt Override Reason to Last 2 Pos. for Change Log New Value.
CASE;

// IF NOT DTL.Abs Frt Override Reason is Not Entered
IF ! DTL.Abs_Frt_Override_Reason = *BLANK;

// Execute function SET Abs Frt Ovr Rsn    US.
EXECUTE FUNCTION(SET Abs Frt Ovr Rsn    US) TYPE(EXCUSRSRC) ('PUIBUFR');
PARAMETER(DTL.Abs_Frt_Override_Reason);
PARAMETER(WRK.Change_Log_New_Value);
{
 ** APPEND ABS FRT OVERRIDE REASON TO LAST 2 POS.
 C                     MOVE #IHSSC    #OMOTX
}


ENDIF;

CASE;

// IF DTL.Load ID is NE Blank
IF DTL.Load_ID <> *ZERO;

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CRT Load/OrderChg n/ld2XF.
CALL PROGRAM(CRT Load/OrderChg n/ld2XF) ('PUIAXFR');
PARAMETER(DTL.Load_ID);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Change_Log_Prior_Value);
PARAMETER(WRK.Change_Log_New_Value);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);

ENDIF;

ENDIF;

ENDIF;

//?Edit Header
CASE;

// IF DTL.*CMD key is *Order Header
IF DTL.*CMD_key = '15';

// PAR.Next Program Name = CON.PMGFE2R
PAR.Next_Program_Name = 'PMGFE2R';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

//?Details
CASE;

// IF DTL.*CMD key is *Order Details
IF DTL.*CMD_key = '18';

// PAR.Next Program Name = CON.PDN9EFR
PAR.Next_Program_Name = 'PDN9EFR';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

//?USER: Exit program processing

CASE;

// IF KEY.*CMD key is *Exit
IF KEY.*CMD_key = '03';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

QUIT;

ENDIF;

