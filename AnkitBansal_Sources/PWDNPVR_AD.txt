// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWDNPVR
// ?Date: 14.08.2025 Time: 02:56:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E7519 JJH 06/27/17 - This program is used to CALL the Payment
//?  Producer Edit.  Therefore we can use this program to debug.
//?E7519  JJH 06/26/17 - Trucker/Producer Address
//?- Only Prt Trucker Validation Error's report if there is 1 or
//?  more Trucker Error.
//?- Only Prt Pre-Chk Producer Missing Supplier report if there is
//?  1 or more Producer Errors
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?08/29/2007 FT379 Gate Security - Remove validation on IN/OUT/R
//?08/29/2007 slm see validation
// LCL.Valadate Wgt IN/OUT/R USR = CND.No
LCL.Valadate_Wgt_IN_OUT_R_USR = 'N';

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPEWGTVLD');
PARAMETER(LCL.Valadate_Wgt_IN_OUT_R_USR);

//?04/11/2017 slm M3 LIVE or parallel
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('M3VEND');
PARAMETER(LCL.System_Value_Alpha_USR);

// WRK.System Value Alpha    USR = LCL.System Value Alpha    USR
WRK.System_Value_Alpha_USR = LCL.System_Value_Alpha_USR;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.CC Company Number = PAR.CC Company Number
DTL.CC_Company_Number = PAR.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// Call program Rtv Dflt Cut Mtx 2 OMS XF.
CALL PROGRAM(Rtv Dflt Cut Mtx 2 OMS XF) ('PDKHXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);

// Call program Val Cutout Matrix     XF.
CALL PROGRAM(Val Cutout Matrix     XF) ('PDLGXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);
PARAMETER(DTL.Description_30_USR);
PARAMETER(WRK.Record_Found_USR);

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(DTL.Pmt_Current_Payment_Step);
PARAMETER(DTL.PP_Commission_Paym_Error);
PARAMETER(DTL.Pmt_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E7519 JJH 06/26/17 - Only print Trucker/Producer Error reports
//?  when there are errors.
//?E7519 Val Trk & also the Producer for a Missing m3 supplier
DO;

//?Trucker validated for missing M3 Supplier
EXECUTE FUNCTION(Val Trucker M3/E1 Vnd RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1337695;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(DTL.PP_Trucker_Error);
{
 //?USER: Initialize routine

 //?SDN440 RMC 5/20/21  if E1 is live , validate VND
 // PAR.PP Trucker Error = CND.No Errors
 PAR.PP_Trucker_Error = 'N';

 //?get live with M3
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('M3LIVE');
 PARAMETER(WRK.Live_with_M3_USR);

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('E1LIVE');
 PARAMETER(WRK.Live_with_E1);

 //?USER: Process Data record

 CASE;

 // IF DB1.BOL Kill Date LE PAR.Pmt Current Payment Date
 IF DB1.BOL_Kill_Date <= PAR.Pmt_Current_Payment_Date;

 EXECUTE FUNCTION(Rtv Trucker Vnd Add#M3RT) TYPE(RTVOBJ) FILE(PKBAREP)           AB1332333;
 PARAMETER(DB1.TRK_Trucker_Code);
 PARAMETER(NLL.TRK_Name);
 PARAMETER(LCL.TRK_VND_Address_Number);
 PARAMETER(LCL.TRK_M3_Supplier_Id);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.Record Found
  PGM.*Return_code = 999;

 }

 //?Check for  M3
 CASE;

 // IF LCL.TRK M3 Supplier Id is Not Entered
 IF LCL.TRK_M3_Supplier_Id = *BLANK;

 // AND WRK.Live with M3   USR is Live or Parallel
 AND WRK.Live_with_M3_USR = 'P'/'Y';

 // PAR.PP Trucker Error = CND.Errors
 PAR.PP_Trucker_Error = 'E';

 ENDIF;

 //?Check E1 Vendor -- added for SDN440
 CASE;

 // IF LCL.TRK VND Address Number is Zero
 IF LCL.TRK_VND_Address_Number = *ZERO;

 // AND WRK.Live with E1 is Yes
 AND WRK.Live_with_E1 = 'Y';

 // PAR.PP Trucker Error = CND.Errors
 PAR.PP_Trucker_Error = 'E';

 ENDIF;

 ENDIF;

}


CASE;

// IF DTL.PP Trucker Error is Errors
IF DTL.PP_Trucker_Error = 'E';

// Call program Prt Trucker PaymentVal CL.
CALL PROGRAM(Prt Trucker PaymentVal CL) ('PWBKUPC');
PARAMETER('QPRINT2');
PARAMETER(*YES);
PARAMETER(*YES);
PARAMETER(01);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.PP_Trucker_Error);

ENDIF;

//?Producer validated for missing M3 Supplier
EXECUTE FUNCTION(Val Producer M3/E1 Vnd RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1337685;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(DTL.PP_Producer_Error);
{
 //?USER: Initialize routine

 //?Initialize Errros
 // PAR.PP Producer Error = CND.No Errors
 PAR.PP_Producer_Error = 'N';

 //?USER: Process Data record

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER('M3LIVE');
 PARAMETER(LCL.Live_with_M3_USR);

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER('E1LIVE');
 PARAMETER(LCL.Live_with_E1);

 //?Get Producer M3 Supplier ID
 EXECUTE FUNCTION(Rtv Prdcr Vendor#,M3  RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1330021;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(LCL.PD_VND_Address_Number);
 PARAMETER(LCL.M3_Supplier_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  EXECUTE FUNCTION(Rtv Producer EXT2     RT) TYPE(RTVOBJ) FILE(PLB4REP)           AB1322079;
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(PAR.M3_Supplier_ID);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 CASE;

 // IF LCL.M3 Supplier ID is Not found
 IF LCL.M3_Supplier_ID = *BLANK;

 // AND LCL.Live with M3   USR is Live or Parallel
 AND LCL.Live_with_M3_USR = 'P'/'Y';

 // PAR.PP Producer Error = CND.Errors
 PAR.PP_Producer_Error = 'E';

 ENDIF;

 //?SDN 440 -- added for E1
 CASE;

 // IF LCL.Live with E1 is Yes
 IF LCL.Live_with_E1 = 'Y';

 // AND LCL.PD VND Address Number is Zero
 AND LCL.PD_VND_Address_Number = *ZERO;

 // PAR.PP Producer Error = CND.Errors
 PAR.PP_Producer_Error = 'E';

 ENDIF;

}


CASE;

// IF DTL.PP Producer Error is Errors
IF DTL.PP_Producer_Error = 'E';

// Call program Prt Pre-Chk EditPrdM3EdPF.
CALL PROGRAM(Prt Pre-Chk EditPrdM3EdPF) ('PWCQPFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER('E');
PARAMETER('E');
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER('U');
PARAMETER(WRK.Pmt_Payment_Error);
PARAMETER(DTL.PP_Producer_Error);

ENDIF;

ENDDO;

//?USER: Validate fields

//?F4 = Prompt for Cutout Matrix
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?SEL: Cutout Matrix
CASE;

// IF PGM.*Cursor field <IS> DTL.Cutout Matrix Code USR
IF PGM.*Cursor_field = DTL.Cutout_Matrix_Code_USR;

// OR PGM.*Cursor field <IS> DTL.Effective Month/Day USR
OR PGM.*Cursor_field = DTL.Effective_Month_Day_USR;

// Call program Sel Cutout Matrix     SR.
CALL PROGRAM(Sel Cutout Matrix     SR) ('PDAZSRR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);
PARAMETER(DTL.Description_30_USR);

ENDIF;

//?F4 = Prompt for Cutout Matrix
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Val Cutout Matrix     XF.
CALL PROGRAM(Val Cutout Matrix     XF) ('PDLGXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Cutout_Matrix_Code_USR);
PARAMETER(DTL.Effective_Month_Day_USR);
PARAMETER(DTL.Description_30_USR);
PARAMETER(WRK.Record_Found_USR);

ENDIF;

//?F5 = Display Market Prices for WCB or HOG CUTOUT
CASE;

// IF DTL.*CMD key is CF05
IF DTL.*CMD_key = '05';

// Call program Dsp Market PricesWCB/HOGC.
CALL PROGRAM(Dsp Market PricesWCB/HOGC) ('PPV6DFR');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.Pmt_Current_Payment_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

CASE;

// IF DTL.Payment Sel Prcssng Usr is Payment Edit
IF DTL.Payment_Sel_Prcssng_Usr = '1';

//?8/29/2007 slm
//?Get this validation out of the way for TF and will come back
//?to not hard code -- Gate Security system does not need this validation
//?8/29/2007 slm This is the 2nd time to get the company value loaded
//?The Buy Order Load information with IN/OUT/R  on the Gate Security
//?does not need the following validation - due to no OUT nor Weight
//?This is not hard coded for company 360
// WRK.@Status (Yes/No) = CND.Blank
WRK.@Status_Yes_No = *BLANK;

CASE;

// IF LCL.Valadate Wgt IN/OUT/R USR is Yes
IF LCL.Valadate_Wgt_IN_OUT_R_USR = 'Y';

EXECUTE FUNCTION(Rtv BOL Scale Sts Err RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1215210;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(WRK.@Status_Yes_No);
{
 //?USER: Initialize routine

 // PAR.@Status (Yes/No) = CND.No
 PAR.@Status_Yes_No = 'N';

 //?USER: Process Data record

 // PAR.@Status (Yes/No) = CND.Yes
 PAR.@Status_Yes_No = 'Y';

 QUIT;

}


CASE;

// IF WRK.@Status (Yes/No) is Yes
IF WRK.@Status_Yes_No = 'Y';

// Send error message - 'A Buy Order Load Weight is IN, OUT, or RESPREAD. Cannot run payment edit.'
ERROR(PRK0867);

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val EvalTrnUplComProc RT) TYPE(RTVOBJ) FILE(PLBAREP)           AB1300185;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Current_Kill_Date);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Event Process is Completed
 IF DB1.EV_Event_Process = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'Eval Trans Upload Comment records found.  These records should becompleted
ERROR(PRK1243);

QUIT;

ENDIF;

//?USER: User defined action

// DTL.Text Hdr 1 Usr = WRK.Blank USR
DTL.Text_Hdr_1_Usr = WRK.Blank_USR;

CASE;

// IF DTL.Payment Sel Prcssng Usr is Payment Edit
IF DTL.Payment_Sel_Prcssng_Usr = '1';

//?Payment Edit
CASE;

// IF DTL.Pmt Current Payment Step is Less or Equal to Step 5
IF DTL.Pmt_Current_Payment_Step <= 00005;

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Payment Edit');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(2);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Execute command - 'Call Payment Producer Edit'
EXECUTE COMMAND(PRK1449);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Oms_System_Value_Alpha);
PARAMETER(DTL.PRT_Night_Queue);

RETURN;

ENDIF;

//?Payment Edit
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Payment Process not Allow'
ERROR(PRK0453);
MSGPARM(DTL.Payment_Sel_Prcssng_Usr);

ENDIF;

// IF DTL.Payment Sel Prcssng Usr is Payment Posting
IF DTL.Payment_Sel_Prcssng_Usr = '2';

//?Payment Post
CASE;

// IF DTL.Pmt Current Payment Step is Greater then or Equal 5
IF DTL.Pmt_Current_Payment_Step >= 00005;

//?Post if No errors were found during the Payment Edit
CASE;

// IF DTL.Pmt Payment Error is No Errors
IF DTL.Pmt_Payment_Error = 'N';

// AND DTL.PP Commission Paym Error is No Errors
AND DTL.PP_Commission_Paym_Error = 'N';

// AND DTL.PP Trucker Error is No Errors
AND DTL.PP_Trucker_Error = 'N';

// AND DTL.PP Producer Error is No Errors
AND DTL.PP_Producer_Error = 'N';

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Post: Crc Sum/Crc Dtl');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('N');
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(1);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Execute command - 'SBM Payment Producer Posting'
EXECUTE COMMAND(PRK0457);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Oms_System_Value_Alpha);

// WRK.Date Alpha USR = CVTVAR(DTL.Pmt Current Payment Date)
WRK.Date_Alpha_USR = CVTVAR(DTL.Pmt_Current_Payment_Date);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER('HPECMPRPT');
PARAMETER(PAR.System_Value_Alpha_USR);

// PAR.PRT Printer Device = PAR.System Value Alpha    USR
PAR.PRT_Printer_Device = PAR.System_Value_Alpha_USR;

// Execute command - 'SBM Payment Competitor Processing'
EXECUTE COMMAND(PRK0732);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER('GUYNIGHTQ');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(DTL.Oms_System_Value_Alpha);

// Call program Bld Exp Rate HPE Sum  XF.
SBMJOB;
CALL PROGRAM(Bld Exp Rate HPE Sum  XF) ('PKX5XFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
PARAMETER(*BLANK);
SBMJOBOVR JOB(EXPRTHPESM);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

// Call program Bld Head Kill/Cut Wk  XF.
SBMJOB;
CALL PROGRAM(Bld Head Kill/Cut Wk  XF) ('PLAIXFR');
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.Pmt_Current_Payment_Date);
SBMJOBOVR JOB(HEADKILLSM);
SBMJOBOVR LOG(4;
SBMJOBOVR 00;
SBMJOBOVR *SECLVL);
SBMJOBEND;

RETURN;

ENDIF;

//?Post if No errors were found during the Payment Edit
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Must run Payment Edit First'
ERROR(PRK0465);
MSGPARM(DTL.Payment_Sel_Prcssng_Usr);

ENDIF;

//?Payment Post
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Payment Process not Allow'
ERROR(PRK0453);
MSGPARM(DTL.Payment_Sel_Prcssng_Usr);

ENDIF;

ENDIF;

