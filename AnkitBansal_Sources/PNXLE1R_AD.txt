// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNXLE1R
// ?Date: 14.08.2025 Time: 03:46:59
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.Update Exception Status = CND.no
WRK.Update_Exception_Status = 'N';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?** Rtv the Delivery P.O. from OHE file
EXECUTE FUNCTION(RTV OHE for Ord Entry RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1914702;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Delivery_P_O_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.USR 15 Text           USR = WRK.Delivery P.O. Number
DTL.USR_15_Text_USR = WRK.Delivery_P_O_Number;

EXECUTE FUNCTION(Rtv Customer Appt ExstRT) TYPE(RTVOBJ) FILE(PNGZREP)           AC2020832;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER('D');
PARAMETER(LCL.Record_Found_OrdDtlUSR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


EXECUTE FUNCTION(Rtv Customer Appt ExstRT) TYPE(RTVOBJ) FILE(PNGZREP)           AC2020832;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER('S');
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


EXECUTE FUNCTION(Rtv Deadline Dt/Tm    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1920316;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DTL.Deadline_Depart_Date_LH);
PARAMETER(DTL.Deadline_Depart_Time_LH);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(RTV 1st Warehouse      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1575817;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(DTL.Warehouse_Code);
{
 //?USER: Process Data record

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

}


EXECUTE FUNCTION(RTV Qty & Wght Ordered RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1455362;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DTL.Quantity_Ordered);
PARAMETER(LCL.Weight_Ordered);
{
 //?USER: Initialize routine

 // PAR.Quantity Ordered = CON.*ZERO
 PAR.Quantity_Ordered = *ZERO;

 // PAR.Weight Ordered = CON.*ZERO
 PAR.Weight_Ordered = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // PAR.Quantity Ordered = PAR.Quantity Ordered + DB1.Quantity Ordered
 PAR.Quantity_Ordered = PAR.Quantity_Ordered + DB1.Quantity_Ordered;

 // PAR.Weight Ordered = PAR.Weight Ordered + DB1.Weight Ordered
 PAR.Weight_Ordered = PAR.Weight_Ordered + DB1.Weight_Ordered;

 ENDIF;

}


EXECUTE FUNCTION(RTV Day of Week No.   RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1658821;
PARAMETER(DB1.Company_Number);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(LCL.Day_of_Week);
{
 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Day of the Week USR = Condition name of LCL.Day of Week
DTL.Day_of_the_Week_USR = RTVCND(LCL.Day_of_Week);

EXECUTE FUNCTION(RTV OHE Appt Cnfrm fld RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2018604;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DTL.OHE_Appt_Confirmation_#);
PARAMETER(DTL.OHE_Appt_Confirmation_Nm);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DB1.OH Appt Confirmation Dt is Not Entered
IF DB1.OH_Appt_Confirmation_Dt = *ZERO;

// DTL.OH Appt Confirmation Dt = JOB.*Job date
DTL.OH_Appt_Confirmation_Dt = JOB.*Job_date;

// DTL.OH Appt Confirmation Tm = JOB.*Job time
DTL.OH_Appt_Confirmation_Tm = JOB.*Job_time;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.USR Requested Deliver Dte = DB1.Requested Delivery Date
DTL.USR_Requested_Deliver_Dte = DB1.Requested_Delivery_Date;

// DTL.Usr Request Delivery Time = DB1.Requested Delivery Time
DTL.Usr_Request_Delivery_Time = DB1.Requested_Delivery_Time;

ENDIF;

EXECUTE FUNCTION(Rtv Comment to Dsp    RT) TYPE(RTVOBJ) FILE(POAVCPP)           AC2021526;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER('DL');
PARAMETER(*ZERO);
PARAMETER(DTL.Customer_Comment_Line);
PARAMETER(DTL.Comment);
PARAMETER(DTL.FCD_Comment);
PARAMETER(DTL.PFS_Comment);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?send back 1st 3 comment lines
 CASE;

 // IF PAR.Comment 60 USR is Not Entered
 IF PAR.Comment_60_USR = *BLANK;

 // PAR.Comment 60 USR = DB1.Customer Comment Line
 PAR.Comment_60_USR = DB1.Customer_Comment_Line;

 // IF PAR.Comment is Not Entered
 IF PAR.Comment = *BLANK;

 // PAR.Comment = DB1.Customer Comment Line
 PAR.Comment = DB1.Customer_Comment_Line;

 // IF PAR.FCD Comment is Not Entered
 IF PAR.FCD_Comment = *BLANK;

 // PAR.FCD Comment = DB1.Customer Comment Line
 PAR.FCD_Comment = DB1.Customer_Comment_Line;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PFS Comment = DB1.Customer Comment Line
 PAR.PFS_Comment = DB1.Customer_Comment_Line;

 ENDIF;

}


EXECUTE FUNCTION(RTV Telephone Number   RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1333192;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Telephone_Number_FF);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate detail screen fields

CASE;

// IF DTL.*CMD key is CF07
IF DTL.*CMD_key = '07';

// LCL.CA Appt Sequence = CON.*ZERO
LCL.CA_Appt_Sequence = 0;

// Call program Dsp Customer Appt     DF.
CALL PROGRAM(Dsp Customer Appt     DF) ('PNXMDFR');
PARAMETER(DTL.Ship_To_Customer);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.*CMD key is CF08
IF DTL.*CMD_key = '08';

// Call program Dsp Customer Comment  DF.
CALL PROGRAM(Dsp Customer Comment  DF) ('PMH6DFR');
PARAMETER(DTL.Ship_To_Customer);
PARAMETER('DL');
PARAMETER(DTL.Customer_Name);

ENDIF;

//?Validate all fields entered
CASE;

// IF DTL.USR Requested Deliver Dte is entered
IF DTL.USR_Requested_Deliver_Dte <> *ZERO;

//?dft appt confirm date
CASE;

// IF DTL.OH Appt Confirmation Dt is Not Entered
IF DTL.OH_Appt_Confirmation_Dt = *ZERO;

// DTL.OH Appt Confirmation Dt = JOB.*Job date
DTL.OH_Appt_Confirmation_Dt = JOB.*Job_date;

ENDIF;

//?Dft appt confirm time
CASE;

// IF DTL.OH Appt Confirmation Tm is Not Entered
IF DTL.OH_Appt_Confirmation_Tm = *ZERO;

// DTL.OH Appt Confirmation Tm = JOB.*Job time
DTL.OH_Appt_Confirmation_Tm = JOB.*Job_time;

ENDIF;

CASE;

// IF DTL.Usr Request Delivery Time is Zero
IF DTL.Usr_Request_Delivery_Time = *ZERO;

// OR DTL.OHE Appt Confirmation # is NOT ENTERED
OR DTL.OHE_Appt_Confirmation_# = *BLANK;

// OR DTL.OHE Appt Confirmation Nm is eq blank
OR DTL.OHE_Appt_Confirmation_Nm = *BLANK;

// Send error message - 'All appointment confirmation info must be entered.'
ERROR(USR4407);
MSGPARM(DTL.OHE_Appt_Confirmation_#);
MSGPARM(DTL.OHE_Appt_Confirmation_Nm);
MSGPARM(DTL.Usr_Request_Delivery_Time);

ENDIF;

//?Validate all fields entered
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Requested Delv Date is required'
ERROR(USR4329);
MSGPARM(DTL.USR_Requested_Deliver_Dte);

ENDIF;

CASE;

// IF DTL.Usr Request Delivery Time is Zero
IF DTL.Usr_Request_Delivery_Time = *ZERO;

// Send error message - 'Time is required.'
ERROR(USR2333);
MSGPARM(DTL.Usr_Request_Delivery_Time);

ENDIF;

//?Validate Req Delv > Sched Ship
CASE;

// IF DTL.USR Requested Deliver Dte LT DTL.Scheduled Ship Date
IF DTL.USR_Requested_Deliver_Dte < DTL.Scheduled_Ship_Date;

// AND DTL.USR Requested Deliver Dte is entered
AND DTL.USR_Requested_Deliver_Dte <> *ZERO;

// Send error message - 'Requested Delivery Date is before Scheduled Ship Date'
ERROR(USR3980);
MSGPARM(DTL.USR_Requested_Deliver_Dte);

ENDIF;

// Call program CLC Must Ship 4 Req DlvXF.
CALL PROGRAM(CLC Must Ship 4 Req DlvXF) ('PMUSXFR');
PARAMETER(WRK.Must_Ship_Error);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Requested_Ship_Date);
PARAMETER(DTL.Scheduled_Ship_Date);
PARAMETER(DTL.USR_Requested_Deliver_Dte);
PARAMETER(DTL.Usr_Request_Delivery_Time);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(LCL.Must_Ship_Date_USR);
PARAMETER(LCL.Must_Ship_Time_USR);
PARAMETER(WRK.USR_Order_Number);

CASE;

// IF WRK.Must Ship Error is Error List
IF WRK.Must_Ship_Error = 'DDD'/'MTN'/'NOW'/'MSD'/'RSD'/'SSD';

// Send information message - 'Requested Delivery Date Warning: Cant deliver on time.'
MESSAGE(USR4408 *INFO);
MSGPARM(DTL.USR_Requested_Deliver_Dte);

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(DTL.Company_Name_DRV);
PARAMETER(DTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Appt Cnf & ReqDlv IF) TYPE(EXCINTFUN) FILE(OPBFCPP)        AC2018863;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.Ship_To_City);
PARAMETER(DTL.Ship_To_State_Code);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Requested_Delivery_Date);
PARAMETER(DTL.Requested_Delivery_Time);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.OH_Appt_Confirmation_Dt);
PARAMETER(DTL.OH_Appt_Confirmation_Tm);
PARAMETER(DTL.OHE_Appt_Confirmation_#);
PARAMETER(DTL.OHE_Appt_Confirmation_Nm);
PARAMETER(DTL.USR_Requested_Deliver_Dte);
PARAMETER(DTL.Usr_Request_Delivery_Time);
{
 //?Execute internal function

 CASE;

 // IF PAR.Requested Delivery Date NE PAR.USR Requested Deliver Dte
 IF PAR.Requested_Delivery_Date <> PAR.USR_Requested_Deliver_Dte;

 // OR PAR.Requested Delivery Time NE PAR.Usr Request Delivery Time
 OR PAR.Requested_Delivery_Time <> PAR.Usr_Request_Delivery_Time;

 //?recalc deadl for order thats NOT on a load
 // Call program CLC Deadln Depart Dt  XF.
 CALL PROGRAM(CLC Deadln Depart Dt  XF) ('POSCXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.USR_Requested_Deliver_Dte);
 PARAMETER(PAR.Usr_Request_Delivery_Time);
 PARAMETER(LCL.Deadline_Depart_Date_LH);
 PARAMETER(LCL.Deadline_Depart_Time_LH);

 EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(LCL.Deadline_Depart_Date_LH);
 PARAMETER(LCL.Deadline_Depart_Time_LH);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Deadline_Depart_Date_LH);
  PARAMETER(PAR.Deadline_Depart_Time_LH);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 CASE;

 // IF PAR.Load ID is GT Zero
 IF PAR.Load_ID > *ZERO;

 //?** If Req Dt changed write log record
 CASE;

 // IF PAR.Requested Delivery Date NE PAR.USR Requested Deliver Dte
 IF PAR.Requested_Delivery_Date <> PAR.USR_Requested_Deliver_Dte;

 // LCL.Department Control Code = CND.Sales Dept
 LCL.Department_Control_Code = 'SLS';

 // LCL.Load Change Type = CND.Requested Delivery Date
 LCL.Load_Change_Type = 'RQSDLV';

 // LCL.Date To Alpha         USR = CVTVAR(PAR.USR Requested Deliver Dte)
 LCL.Date_To_Alpha_USR = CVTVAR(PAR.USR_Requested_Deliver_Dte);

 // LCL.Date From Alpha       USR = CVTVAR(PAR.Requested Delivery Date)
 LCL.Date_From_Alpha_USR = CVTVAR(PAR.Requested_Delivery_Date);

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Load_Change_Type);
 PARAMETER(LCL.Department_Control_Code);
 PARAMETER(LCL.Date_From_Alpha_USR);
 PARAMETER(LCL.Date_To_Alpha_USR);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);

 ENDIF;

 //?** If Req Tm changed write log record
 CASE;

 // IF PAR.Requested Delivery Time NE PAR.Usr Request Delivery Time
 IF PAR.Requested_Delivery_Time <> PAR.Usr_Request_Delivery_Time;

 // LCL.Department Control Code = CND.Sales Dept
 LCL.Department_Control_Code = 'SLS';

 // LCL.Load Change Type = CND.Requested Delivery Date
 LCL.Load_Change_Type = 'RQSDLV';

 // LCL.Date To Alpha         USR = CVTVAR(PAR.Usr Request Delivery Time)
 LCL.Date_To_Alpha_USR = CVTVAR(PAR.Usr_Request_Delivery_Time);

 // LCL.Date From Alpha       USR = CVTVAR(PAR.Requested Delivery Time)
 LCL.Date_From_Alpha_USR = CVTVAR(PAR.Requested_Delivery_Time);

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Load_Change_Type);
 PARAMETER(LCL.Department_Control_Code);
 PARAMETER(LCL.Date_From_Alpha_USR);
 PARAMETER(LCL.Date_To_Alpha_USR);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CHG Appt Cnf & ReqDlv CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2018645;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.USR_Requested_Deliver_Dte);
 PARAMETER(PAR.Usr_Request_Delivery_Time);
 PARAMETER(PAR.OH_Appt_Confirmation_Dt);
 PARAMETER(PAR.OH_Appt_Confirmation_Tm);
 PARAMETER(PAR.OHE_Appt_Confirmation_#);
 PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

  //?USER: Processing after Data update

  //?** Upd App Conf name and number
  EXECUTE FUNCTION(RTV OHE for Ord Entry RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC1914702;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(WRK.Delivery_P_O_Number);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  //?R15161 DN 07/31/19-Replaced OHE CRTOBJ to Not Call CHGOBJ.
  EXECUTE FUNCTION(CRT Order Header Extsn CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC2173922;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(LCL.OHE_Ship_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.OHE_Carrier_SCAC_Code);
  PARAMETER(LCL.OHE_Spot_Buy);
  PARAMETER(LCL.OHE_PO_ACK_Flag);
  PARAMETER(LCL.OHE_Override_Type_Code);
  PARAMETER(LCL.OHE_Backhaul_Status);
  PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
  PARAMETER(LCL.OHE_Load_Haul_Type);
  PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
  PARAMETER(LCL.OHE_Bookings_Confirmed);
  PARAMETER(LCL.OHE_EDI_Error_Reasons);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Delivery_P_O_Number);
  PARAMETER(*BLANK);
  PARAMETER(LCL.OHE_EDI_943_Action);
  PARAMETER(LCL.OHE_EDI_944_Action);
  PARAMETER(LCL.OHE_EDI_940_Action);
  PARAMETER(LCL.OHE_EDI_945_Action);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.OHE_Appt_Confirmation_#);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(LCL.Blank_1_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(JOB.*Job_time);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(JOB.*Job_date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp 2 IF) TYPE(EXCINTFUN)                      AC2165057;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing if Data update error

   RETURN;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?* Orig Carr Appt fields are now being used so don't zero them out.
  ENDIF;

 }

}


