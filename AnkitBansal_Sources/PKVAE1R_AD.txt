// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKVAE1R
// ?Date: 14.08.2025 Time: 02:53:03
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E4006 JJH 03/09/15 - Modified the "Crt Tattoo Scl Ticket CR" to
//? update the "Current Pen Head" when a new transaction is entered.
//?E4154 JJH 07/28/15 - Pen and Tattoo Scale Ticket Modifications
//?- This function is not updated and is not currently used in
//?  Production.
//?H16853 ISE 01/23/2021 - Increased the length from 5 to 7 and
//?                        corrected the alignment of Buy Order Number field
ENDDO;

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize key screen

CASE;

// IF KEY.TST Sequence Number EQ WRK.Zero USR
IF KEY.TST_Sequence_Number = WRK.Zero_USR;

EXECUTE FUNCTION(Rtv Last Seq Nbr      RT) TYPE(RTVOBJ) FILE(PKB3CPP)           AB1128234;
PARAMETER(KEY.BOH_Company_Number);
PARAMETER(KEY.BOH_Buy_Order_Number);
PARAMETER(KEY.BOL_Load_Number);
PARAMETER(KEY.TH_Tattoo_Number);
PARAMETER(KEY.TH_Kill_Date);
PARAMETER(KEY.TST_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.TST_Sequence_Number = *ZERO;

 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.TST_Sequence_Number = DB1.TST_Sequence_Number;

 QUIT;

}


// KEY.TST Sequence Number = KEY.TST Sequence Number + CON.1
KEY.TST_Sequence_Number = KEY.TST_Sequence_Number + 1;

ENDIF;

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Rtv Hog Class Desc    RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127790;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.HC_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate detail screen relations

EXECUTE FUNCTION(Rtv Hog Class         RT) TYPE(RTVOBJ) FILE(PKA8REP)           AB1127629;
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.HC_Description);
PARAMETER(WRK.HC_Defect_Required);
PARAMETER(WRK.HC_Price_Required);
PARAMETER(WRK.HC_Resolution);
PARAMETER(WRK.HC_Qualification);
PARAMETER(WRK.HC_Class_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Hog Defect Desc   RT) TYPE(RTVOBJ) FILE(PKA7REP)           AB1127787;
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.DF_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.DF_Description = WRK.Blank_USR;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Weight is required for External hogs.
CASE;

// IF DTL.TST Wgt is Zeros
IF DTL.TST_Wgt = *ZERO;

EXECUTE FUNCTION(Rtv Pay/Src/Cls/ClcWt RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1206963;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(WRK.TH_Recalc_Live_Wgt);
PARAMETER(WRK.TH_Source_Type);
PARAMETER(WRK.TH_Payment_Type);
PARAMETER(WRK.TH_Hog_Class_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.TH Source Type is External
IF WRK.TH_Source_Type = 'E';

// Send error message - 'Weight is Required'
ERROR(PRK0362);
MSGPARM(DTL.TST_Wgt);

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Tatto Scl Tkt SUP CH) TYPE(CHGOBJ) FILE(PKB3CPP)           AB1233070;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TST_Sequence_Number);
PARAMETER(DTL.TST_Head);
PARAMETER(DTL.TST_Wgt);
PARAMETER(DTL.TST_Wgt_Date);
PARAMETER(DTL.TST_Wgt_Time);
PARAMETER(DTL.TST_Wgt_Hour);
PARAMETER(DTL.TST_Last_Zero_Date);
PARAMETER(DTL.TST_Last_Zero_Time);
PARAMETER(DTL.TST_Record_Created_Status);
PARAMETER(DTL.Pen_Company_Number);
PARAMETER(DTL.Pen_Number);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing after Data read

 CASE;

 // IF PAR.TST Head NE DB1.TST Head
 IF PAR.TST_Head <> DB1.TST_Head;

 EXECUTE FUNCTION(Upd Trk Scl Weigh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214077;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER('R');
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  // AND DB1.BOL Truck Scale Weigh Sts is Not Spread
  AND DB1.BOL_Truck_Scale_Weigh_Sts = 'I'/'N'/*BLANK/'O'/'R'/'A'/'C';

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Chg Trk Scl Weigh Sts CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1214078;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
  PARAMETER(DB1.BOL_Shipped_Head);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

  CASE;

  // IF PAR.BOL Truck Scale Weigh Sts is Respread
  IF PAR.BOL_Truck_Scale_Weigh_Sts = 'R';

  EXECUTE FUNCTION(Upd Hdr/Bal Status    RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230832;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('E');
  PARAMETER('E');
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Not Resale
   IF DB1.TH_Hog_Class_Type = 'M'/'S';

   EXECUTE FUNCTION(Chg Hdr/Bal Status    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1230833;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(PAR.TH_Header_Error_Sts);
   PARAMETER(PAR.TH_Kill_Balancing_Sts);
   ENDIF;

  }

  ENDIF;

 }

 ENDIF;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 // Call program Chg BOL/THDR Rec/Wgt  XF.
 CALL PROGRAM(Chg BOL/THDR Rec/Wgt  XF) ('PKHFXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);

 EXECUTE FUNCTION(Upd Dtl Hd/Wgt SUP    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1233072;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.Pen_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Scl Tkt Totals/Pen Rt) TYPE(RTVOBJ) FILE(PKB3CPP)          AB1178680;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(LCL.Head_Total_USR);
  PARAMETER(LCL.Weight_Tot_USR);
  {
   //?USER: Initialize routine

   // PAR.Head Total USR = CON.*ZERO
   PAR.Head_Total_USR = *ZERO;

   // PAR.Weight Tot USR = CON.*ZERO
   PAR.Weight_Tot_USR = *ZERO;

   //?USER: Processing if Data record not found

   // PAR.Head Total USR = CON.*ZERO
   PAR.Head_Total_USR = *ZERO;

   // PAR.Weight Tot USR = CON.*ZERO
   PAR.Weight_Tot_USR = *ZERO;

   //?USER: Process Data record

   // PAR.Head Total USR = PAR.Head Total USR + DB1.TST Head
   PAR.Head_Total_USR = PAR.Head_Total_USR + DB1.TST_Head;

   // PAR.Weight Tot USR = PAR.Weight Tot USR + DB1.TST Wgt
   PAR.Weight_Tot_USR = PAR.Weight_Tot_USR + DB1.TST_Wgt;

  }

  // LCL.TD Avg Live Wgt = LCL.Weight Tot USR / LCL.Head Total USR *
  LCL.TD_Avg_Live_Wgt = LCL.Weight_Tot_USR / LCL.Head_Total_USR;

  EXECUTE FUNCTION(Chg Dtl Hd/Wgt SUP    CH) TYPE(CHGOBJ) FILE(PKA2CPP)           AB1233073;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(LCL.Weight_Tot_USR);
  PARAMETER(LCL.Head_Total_USR);
  PARAMETER(LCL.TD_Avg_Live_Wgt);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


//?USER: Process command keys

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

