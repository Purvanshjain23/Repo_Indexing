// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PVIZXFR
// ?Date: 14.08.2025 Time: 03:52:16
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// Execute function EUS EDI 945 Data Dfn  US.
EXECUTE FUNCTION(EUS EDI 945 Data Dfn  US) TYPE(EXCUSRSRC) ('PUESUFR');
{
 * Declare EDI 945 Data Definitions
 D digits          C                   '0123456789'
}


// LCL.USR Counter = CON.1
LCL.USR_Counter = 1;

//?Create Missing Manifest Detail Record & Update O.D. Record.
// DOW LCL.USR Counter is LE 31
DOW LCL.USR_Counter <= 31;

//?Initialize per each count.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.USR Counter is EQ 1
IF LCL.USR_Counter = 1;

// LCL.EDI SURROGATE NUMBER = CON.702978
LCL.EDI_SURROGATE_NUMBER = 702978;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2718821
LCL.Order_Number = 2718821;

// IF LCL.USR Counter is EQ 2
IF LCL.USR_Counter = 2;

// LCL.EDI SURROGATE NUMBER = CON.702537
LCL.EDI_SURROGATE_NUMBER = 702537;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2748562
LCL.Order_Number = 2748562;

// IF LCL.USR Counter is EQ 3
IF LCL.USR_Counter = 3;

// LCL.EDI SURROGATE NUMBER = CON.702562
LCL.EDI_SURROGATE_NUMBER = 702562;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2749006
LCL.Order_Number = 2749006;

// IF LCL.USR Counter is 4
IF LCL.USR_Counter = 4;

// LCL.EDI SURROGATE NUMBER = CON.702544
LCL.EDI_SURROGATE_NUMBER = 702544;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2749170
LCL.Order_Number = 2749170;

// IF LCL.USR Counter is EQ 5
IF LCL.USR_Counter = 5;

// LCL.EDI SURROGATE NUMBER = CON.702566
LCL.EDI_SURROGATE_NUMBER = 702566;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2749187
LCL.Order_Number = 2749187;

// IF LCL.USR Counter is EQ 6
IF LCL.USR_Counter = 6;

// LCL.EDI SURROGATE NUMBER = CON.702826
LCL.EDI_SURROGATE_NUMBER = 702826;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2749238
LCL.Order_Number = 2749238;

// IF LCL.USR Counter is EQ 7
IF LCL.USR_Counter = 7;

// LCL.EDI SURROGATE NUMBER = CON.702977
LCL.EDI_SURROGATE_NUMBER = 702977;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2750918
LCL.Order_Number = 2750918;

// IF LCL.USR Counter is EQ 8
IF LCL.USR_Counter = 8;

// LCL.EDI SURROGATE NUMBER = CON.702831
LCL.EDI_SURROGATE_NUMBER = 702831;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2755164
LCL.Order_Number = 2755164;

// IF LCL.USR Counter is EQ 9
IF LCL.USR_Counter = 9;

// LCL.EDI SURROGATE NUMBER = CON.703059
LCL.EDI_SURROGATE_NUMBER = 703059;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2766095
LCL.Order_Number = 2766095;

// IF LCL.USR Counter is EQ 10
IF LCL.USR_Counter = 10;

// LCL.EDI SURROGATE NUMBER = CON.703060
LCL.EDI_SURROGATE_NUMBER = 703060;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2766241
LCL.Order_Number = 2766241;

// IF LCL.USR Counter is EQ 11
IF LCL.USR_Counter = 11;

// LCL.EDI SURROGATE NUMBER = CON.702827
LCL.EDI_SURROGATE_NUMBER = 702827;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2766375
LCL.Order_Number = 2766375;

// IF LCL.USR Counter is EQ 12
IF LCL.USR_Counter = 12;

// LCL.EDI SURROGATE NUMBER = CON.703076
LCL.EDI_SURROGATE_NUMBER = 703076;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2766416
LCL.Order_Number = 2766416;

// IF LCL.USR Counter is EQ 13
IF LCL.USR_Counter = 13;

// LCL.Order Number = CON.*ZERO
LCL.Order_Number = *ZERO;

// IF LCL.USR Counter is EQ 14
IF LCL.USR_Counter = 14;

// LCL.EDI SURROGATE NUMBER = CON.703075
LCL.EDI_SURROGATE_NUMBER = 703075;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2766483
LCL.Order_Number = 2766483;

// IF LCL.USR Counter is EQ 15
IF LCL.USR_Counter = 15;

// LCL.EDI SURROGATE NUMBER = CON.702828
LCL.EDI_SURROGATE_NUMBER = 702828;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2766488
LCL.Order_Number = 2766488;

// IF LCL.USR Counter is EQ 16
IF LCL.USR_Counter = 16;

// LCL.EDI SURROGATE NUMBER = CON.703009
LCL.EDI_SURROGATE_NUMBER = 703009;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2767050
LCL.Order_Number = 2767050;

// IF LCL.USR Counter is EQ 17
IF LCL.USR_Counter = 17;

// LCL.EDI SURROGATE NUMBER = CON.703063
LCL.EDI_SURROGATE_NUMBER = 703063;

// LCL.Company Number = CON.960
LCL.Company_Number = 960;

// LCL.Order Number = CON.2767178
LCL.Order_Number = 2767178;

// IF LCL.USR Counter is EQ 18
IF LCL.USR_Counter = 18;

// LCL.EDI SURROGATE NUMBER = CON.703004
LCL.EDI_SURROGATE_NUMBER = 703004;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2767191
LCL.Order_Number = 2767191;

// IF LCL.USR Counter is EQ 19
IF LCL.USR_Counter = 19;

// LCL.EDI SURROGATE NUMBER = CON.702825
LCL.EDI_SURROGATE_NUMBER = 702825;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2771151
LCL.Order_Number = 2771151;

// IF LCL.USR Counter is EQ 20
IF LCL.USR_Counter = 20;

// LCL.EDI SURROGATE NUMBER = CON.702982
LCL.EDI_SURROGATE_NUMBER = 702982;

// LCL.Company Number = CON.360
LCL.Company_Number = 360;

// LCL.Order Number = CON.2771235
LCL.Order_Number = 2771235;

// IF LCL.USR Counter is EQ 21
IF LCL.USR_Counter = 21;

// LCL.Order Number = CON.*ZERO
LCL.Order_Number = *ZERO;

// IF LCL.USR Counter is EQ 22
IF LCL.USR_Counter = 22;

// LCL.EDI SURROGATE NUMBER = CON.702218
LCL.EDI_SURROGATE_NUMBER = 702218;

// LCL.Company Number = CON.960
LCL.Company_Number = 960;

// LCL.Order Number = CON.2782640
LCL.Order_Number = 2782640;

// IF LCL.USR Counter is EQ 23
IF LCL.USR_Counter = 23;

// LCL.EDI SURROGATE NUMBER = CON.702219
LCL.EDI_SURROGATE_NUMBER = 702219;

// LCL.Company Number = CON.960
LCL.Company_Number = 960;

// LCL.Order Number = CON.2782644
LCL.Order_Number = 2782644;

// IF LCL.USR Counter is EQ 24
IF LCL.USR_Counter = 24;

// LCL.EDI SURROGATE NUMBER = CON.702818
LCL.EDI_SURROGATE_NUMBER = 702818;

// LCL.Company Number = CON.960
LCL.Company_Number = 960;

// LCL.Order Number = CON.2786299
LCL.Order_Number = 2786299;

// IF LCL.USR Counter is EQ 25
IF LCL.USR_Counter = 25;

// LCL.EDI SURROGATE NUMBER = CON.702824
LCL.EDI_SURROGATE_NUMBER = 702824;

// LCL.Company Number = CON.960
LCL.Company_Number = 960;

// LCL.Order Number = CON.2786305
LCL.Order_Number = 2786305;

// IF LCL.USR Counter is EQ 26
IF LCL.USR_Counter = 26;

// LCL.EDI SURROGATE NUMBER = CON.702814
LCL.EDI_SURROGATE_NUMBER = 702814;

// LCL.Company Number = CON.960
LCL.Company_Number = 960;

// LCL.Order Number = CON.2786307
LCL.Order_Number = 2786307;

// IF LCL.USR Counter is EQ 27
IF LCL.USR_Counter = 27;

// LCL.EDI SURROGATE NUMBER = CON.702823
LCL.EDI_SURROGATE_NUMBER = 702823;

// LCL.Company Number = CON.960
LCL.Company_Number = 960;

// LCL.Order Number = CON.2786333
LCL.Order_Number = 2786333;

// IF LCL.USR Counter is EQ 28
IF LCL.USR_Counter = 28;

// LCL.EDI SURROGATE NUMBER = CON.702815
LCL.EDI_SURROGATE_NUMBER = 702815;

// LCL.Company Number = CON.960
LCL.Company_Number = 960;

// LCL.Order Number = CON.2786345
LCL.Order_Number = 2786345;

// IF LCL.USR Counter is EQ 29
IF LCL.USR_Counter = 29;

// LCL.EDI SURROGATE NUMBER = CON.702816
LCL.EDI_SURROGATE_NUMBER = 702816;

// LCL.Company Number = CON.960
LCL.Company_Number = 960;

// LCL.Order Number = CON.2786370
LCL.Order_Number = 2786370;

// IF LCL.USR Counter is EQ 30
IF LCL.USR_Counter = 30;

// LCL.EDI SURROGATE NUMBER = CON.702819
LCL.EDI_SURROGATE_NUMBER = 702819;

// LCL.Company Number = CON.960
LCL.Company_Number = 960;

// LCL.Order Number = CON.2789507
LCL.Order_Number = 2789507;

// IF LCL.USR Counter is EQ 31
IF LCL.USR_Counter = 31;

// LCL.EDI SURROGATE NUMBER = CON.702813
LCL.EDI_SURROGATE_NUMBER = 702813;

// LCL.Company Number = CON.960
LCL.Company_Number = 960;

// LCL.Order Number = CON.2789764
LCL.Order_Number = 2789764;

ENDIF;

ENDIF;

CASE;

// IF LCL.Order Number is Not equal to zeros
IF LCL.Order_Number <> *ZERO;

EXECUTE FUNCTION(Cnv Crt Manif Dtl f/EDIRT) TYPE(RTVOBJ) FILE(ECP058)           AC2238557;
PARAMETER(LCL.EDI_SURROGATE_NUMBER);
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Order_Number);
{
 //?USER: Initialize routine

 // LCL.Case Sequence Number = CON.*ZERO
 LCL.Case_Sequence_Number = 0;

 //?USER: Process Data record

 CASE;

 // IF DB1.W1208 Prod ID Code is Entered
 IF DB1.W1208_Prod_ID_Code <> *BLANK;

 // AND DB1.W1218 Ord Line Num is Entered
 AND DB1.W1218_Ord_Line_Num <> *BLANK;

 // AND DB1.W1203 Quantity Shipped is Greater than/equal 1
 AND DB1.W1203_Quantity_Shipped >= 1;

 //?also check quantity shipped>0
 //?Format / Populate Data.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function EUS TrimL Order Line#  US.
 EXECUTE FUNCTION(EUS TrimL Order Line#  US) TYPE(EXCUSRSRC) ('PUEPUFR');
 PARAMETER(DB1.W1218_Ord_Line_Num);
 PARAMETER(LCL.Order_Sequence_Nbr_TXT);
 {
  * Trim Left Order Line Number.
  c                   eval      #OH5U1 = %triml(#IUCNY)
  *
 }

 // Execute function Cvt Order Line to Nbr  US.
 EXECUTE FUNCTION(Cvt Order Line to Nbr  US) TYPE(EXCUSRSRC) ('PUEUUFR');
 PARAMETER(LCL.Order_Sequence_Nbr_TXT);
 PARAMETER(PAR.Order_Sequence_Number);
 {
  * Trim Order Line # and Convert to Numeric.
  c                   eval      #ODPNB = %dec(%trim(#IH5U1) : 3:0)
  *
 }

 // PAR.Order Secondary Line Seq = CON.1
 PAR.Order_Secondary_Line_Seq = 1;

 // Execute function EUS TrimL Prod ID Code US.
 EXECUTE FUNCTION(EUS TrimL Prod ID Code US) TYPE(EXCUSRSRC) ('PUEOUFR');
 PARAMETER(DB1.W1208_Prod_ID_Code);
 PARAMETER(LCL.Item_Code_Txt);
 {
  * Trim Left Product ID.
  c                   eval      #OFYTX = %triml(#IFIC7)
  *
 }

 // Execute function Cvt Item Code to Nbr   US.
 EXECUTE FUNCTION(Cvt Item Code to Nbr   US) TYPE(EXCUSRSRC) ('PUETUFR');
 PARAMETER(LCL.Item_Code_Txt);
 PARAMETER(LCL.Item_Code);
 {
  * Trim Item Code and Convert to Numeric.
  c                   eval      #OHGCD = %dec(%trim(#IFYTX) : 7:0)
  *
 }

 //?Extract Pallet Number
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Get Pallet Number from EDI WHS Shipping Adv MAN (ECP055) file.
 //? qlfr = GM
 //?Pallet # will be set to 0 if Pallet is blank or non-numeric.
 // LCL.Manifest Pallet Number = CON.*ZERO
 LCL.Manifest_Pallet_Number = *ZERO;

 // LCL.Pallet ID USR = CON.*BLANK
 LCL.Pallet_ID_USR = *BLANK;

 EXECUTE FUNCTION(Rtv Pallet Number     RT) TYPE(RTVOBJ) FILE(ECP055)            AC2149230;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.LX01_Sequence_Number);
 PARAMETER(LCL.MAN02_Pallet_Nb_Container);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // LCL.W0407 Pallet Number Txt U = LCL.MAN02 Pallet Nb/Container
 LCL.W0407_Pallet_Number_Txt_U = LCL.MAN02_Pallet_Nb_Container;

 CASE;

 // IF LCL.W0407 Pallet Number Txt U is Entered
 IF LCL.W0407_Pallet_Number_Txt_U <> *BLANK;

 // Execute function EUS TrimL Pallet ID    US.
 EXECUTE FUNCTION(EUS TrimL Pallet ID    US) TYPE(EXCUSRSRC) ('PUG4UFR');
 PARAMETER(LCL.W0407_Pallet_Number_Txt_U);
 PARAMETER(LCL.Pallet_ID_USR);
 {
  * Trim Left & Substring Out the Pallet ID.
  c                   eval      #OH3U1 = %subst(%triml(#IJHU1):11:9)
  *
 }

 ENDIF;

 CASE;

 // IF LCL.Pallet ID USR is NE Blanks
 IF LCL.Pallet_ID_USR <> *BLANK;

 // Execute function Val Numeric Digit     US.
 EXECUTE FUNCTION(Val Numeric Digit     US) TYPE(EXCUSRSRC) ('PUD6UFR');
 PARAMETER(LCL.Pallet_ID_USR);
 PARAMETER(LCL.Validation_Pass_USR);
 {
  *
  c                   Monitor
  *
  c                   If        %check(digits : %trim(#IA2T1)) = 0
  * All Digit, Validation Pass.
  c                   eval      #OFASC = 'Y'
  c                   else
  * Non-Digit Found, Validation Fail.
  c                   eval      #OFASC = 'N'
  c                   endif
  *
  * Monitor Message RNX0105 - 'A character representation of a numeric value is in error.
  c                   On-Error  00105                                        Do Nothing
  *
  c                   EndMon
  *
 }

 CASE;

 // IF LCL.Validation Pass USR is Yes
 IF LCL.Validation_Pass_USR = 'Y';

 // Execute function Cvt Pallet ID to Nbr   US.
 EXECUTE FUNCTION(Cvt Pallet ID to Nbr   US) TYPE(EXCUSRSRC) ('PUFBUFR');
 PARAMETER(LCL.Pallet_ID_USR);
 PARAMETER(LCL.Manifest_Pallet_Number);
 {
  * Trim Pallet ID and Convert to Numeric.
  c                   eval      #OH7NY = %dec(%trim(#IH3U1) : 9:0)
  *
 }

 ENDIF;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(RTV Whse/Non Cancelled RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428700;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(LCL.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?C2748:  Changed RTV Warehouse Code RT to exclude Cancelled lines.
  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Last Ord/Case Seq  RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1368391;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Case Sequence Number = CON.*ZERO
  PAR.Case_Sequence_Number = 0;

  //?USER: Process Data record

  // PAR.Case Sequence Number = DB1.Case Sequence Number
  PAR.Case_Sequence_Number = DB1.Case_Sequence_Number;

  QUIT;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Crt Manif Dtl 945  RT) TYPE(RTVOBJ) FILE(ECP056)           AC2154177;
 PARAMETER(DB1.EDI_SURROGATE_NUMBER);
 PARAMETER(DB1.LX01_Sequence_Number);
 PARAMETER(DB1.EDI_Pallet_Sequence_Nbr);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Manifest_Pallet_Number);
 PARAMETER(*ZERO);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.N0901 Reference ID Qlfr is SERIAL NUMBER  (Seal nbr)
  IF ( DB1.N0901_Reference_ID_Qlfr = 'SN';

  // OR DB1.N0901 Reference ID Qlfr is Serial Number  SE
  OR DB1.N0901_Reference_ID_Qlfr = 'SE' );

  // AND DB1.N0902 Reference ID is Entered
  AND DB1.N0902_Reference_ID <> *BLANK;

  //?RMC Use SE for Noram, CP sends SN, but it should be SE
  // Execute function Val Numeric Digit     US.
  EXECUTE FUNCTION(Val Numeric Digit     US) TYPE(EXCUSRSRC) ('PUD6UFR');
  PARAMETER(DB1.N0902_Reference_ID);
  PARAMETER(LCL.Validation_Pass_USR);
  {
   *
   c                   Monitor
   *
   c                   If        %check(digits : %trim(#IA2T1)) = 0
   * All Digit, Validation Pass.
   c                   eval      #OFASC = 'Y'
   c                   else
   * Non-Digit Found, Validation Fail.
   c                   eval      #OFASC = 'N'
   c                   endif
   *
   * Monitor Message RNX0105 - 'A character representation of a numeric value is in error.
   c                   On-Error  00105                                        Do Nothing
   *
   c                   EndMon
   *
  }

  //?R11331 DN 09/27/18-Set Serial# to 0 if Non-Numeric.
  CASE;

  // IF LCL.Validation Pass USR is Yes
  IF LCL.Validation_Pass_USR = 'Y';

  // Execute function EUS TrimL Serial Nbr   US.
  EXECUTE FUNCTION(EUS TrimL Serial Nbr   US) TYPE(EXCUSRSRC) ('PUERUFR');
  PARAMETER(DB1.N0902_Reference_ID);
  PARAMETER(LCL.PT_Serial_Number_Txt_USR);
  {
   * Trim Left Serial Number.
   c                   eval      #OH6U1 = %triml(#IHGU1)
   *
  }

  // LCL.PT Serial Number = CVTVAR(LCL.PT Serial Number Txt USR)
  LCL.PT_Serial_Number = CVTVAR(LCL.PT_Serial_Number_Txt_USR);

  //?R11331 DN 09/27/18-Set Serial# to 0 if Non-Numeric.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.PT Serial Number = CON.*ZERO
  LCL.PT_Serial_Number = *ZERO;

  ENDIF;

  // PAR.Case Sequence Number = PAR.Case Sequence Number + CON.1
  PAR.Case_Sequence_Number = PAR.Case_Sequence_Number + 1;

  // LCL.Production Date USR D8# = DB1.N904 Production Date
  LCL.Production_Date_USR_D8# = DB1.N904_Production_Date;

  // LCL.Production Date = LCL.Production Date USR D8#
  LCL.Production_Date = LCL.Production_Date_USR_D8#;

  EXECUTE FUNCTION(Crt Manifest Dtl fm EDICR) TYPE(CRTOBJ) FILE(OMFNCPP)          AC2142920;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Case_Sequence_Number);
  PARAMETER(1);
  PARAMETER(DB1.N903_Reference_ID_Wgt);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Production_Date);
  PARAMETER(LCL.PT_Serial_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Production_Date);
  PARAMETER(DB1.N903_Reference_ID_Wgt);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Manifest_Pallet_Number);
  PARAMETER(PAR.Manifest_Pallet_Nbr_3PL);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

 }

 //?If REF doesnt exist, then it isnt a Catch Weight item, create manifest
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.Case Sequence Number = PAR.Case Sequence Number + CON.1
 PAR.Case_Sequence_Number = PAR.Case_Sequence_Number + 1;

 // LCL.Date (Char-6) USR = DB1.W1209 Warehouse Lot Nbr
 LCL.Date_Char_6_USR = DB1.W1209_Warehouse_Lot_Nbr;

 // Execute function *Move-Right RP4.
 EXECUTE FUNCTION(*Move-Right RP4) TYPE(EXCUSRSRC) ('PUI6UFR');
 PARAMETER(LCL.Text_1_Length_USR);
 PARAMETER(LCL.Date_Char_6_USR);
 {
  C                   MOVE      #IPANA        #OO9NA
 }

 CASE;

 // IF LCL.Text 1 Length USR is *Blank
 IF LCL.Text_1_Length_USR = *BLANK;

 // LCL.Text USR 5 = DB1.W1209 Warehouse Lot Nbr
 LCL.Text_USR_5 = DB1.W1209_Warehouse_Lot_Nbr;

 // LCL.Date (Char-6) USR = CONCAT(CON.0,LCL.Text USR 5,CON.*ZERO)
 LCL.Date_Char_6_USR = '0' + LCL.Text_USR_5 (*ZERO);

 ENDIF;

 // LCL.Month/Day Alpha MMDD = LCL.Date (Char-6) USR
 LCL.Month_Day_Alpha_MMDD = LCL.Date_Char_6_USR;

 // LCL.Year  (Char) USR = SUBSTRING(LCL.Date (Char-6) USR,CON.5,CON.2)
 LCL.Year_Char_USR = SUBSTRING(LCL.Date_Char_6_USR:5:2);

 // LCL.Text 3 Length USR = CONCAT(CON.1,LCL.Year  (Char) USR,CON.*ZERO)
 LCL.Text_3_Length_USR = '1' + LCL.Year_Char_USR (*ZERO);

 // LCL.Date (Alpha) USR = CONCAT(LCL.Text 3 Length USR,LCL.Month/Day Alpha MMDD,CON.*ZERO)
 LCL.Date_Alpha_USR = LCL.Text_3_Length_USR + LCL.Month_Day_Alpha_MMDD (*ZERO);

 // LCL.Production Date = CVTVAR(LCL.Date (Alpha) USR)
 LCL.Production_Date = CVTVAR(LCL.Date_Alpha_USR);

 EXECUTE FUNCTION(Crt Manifest Dtl fm EDICR) TYPE(CRTOBJ) FILE(OMFNCPP)          AC2142920;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.Case_Sequence_Number);
 PARAMETER(DB1.W1203_Quantity_Shipped);
 PARAMETER(DB1.W1210_Weight_Net);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Production_Date);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Production_Date);
 PARAMETER(DB1.W1213_Weight_Gross);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Manifest_Pallet_Number);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

}


EXECUTE FUNCTION(Cnv Proc for Confirm   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2238691;
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Order_Number);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(Cnv Chg for Confirm    RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2238692;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.USR_Case_Quantity);
 PARAMETER(LCL.USR_Case_Weight);
 PARAMETER(LCL.USR_Under_Min);
 PARAMETER(LCL.USR_Over_Max);
 PARAMETER(LCL.USR_Exit_Program);
 {
  //?USER: Initialize routine

  // PAR.USR Exit Program = CND.yes
  PAR.USR_Exit_Program = 'Y';

  // PAR.USR Over Max = CND.no
  PAR.USR_Over_Max = 'N';

  // PAR.USR Under Min = CND.no
  PAR.USR_Under_Min = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Total Confirmed    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1310317;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(*ZERO);
  PARAMETER(PAR.USR_Case_Quantity);
  PARAMETER(PAR.USR_Case_Weight);
  PARAMETER(PAR.HPB_Meter_Net_Gallon);
  PARAMETER(PAR.HPB_Meter_Net_Weight);
  {
   //?USER: Initialize routine

   // PAR.USR Case Quantity = CND.EQ *ZERO
   PAR.USR_Case_Quantity = *ZERO;

   // PAR.USR Case Weight = CND.EQ *ZERO
   PAR.USR_Case_Weight = *ZERO;

   // PAR.HPB Meter Net Gallon = CND.Equal to zero
   PAR.HPB_Meter_Net_Gallon = *ZERO;

   // PAR.HPB Meter Net Weight = CND.Not Entered
   PAR.HPB_Meter_Net_Weight = *ZERO;

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PAR.USR Case Quantity = DB1.Case Quantity + PAR.USR Case Quantity
   PAR.USR_Case_Quantity = DB1.Case_Quantity + PAR.USR_Case_Quantity;

   // PAR.USR Case Weight = DB1.Case Weight + PAR.USR Case Weight
   PAR.USR_Case_Weight = DB1.Case_Weight + PAR.USR_Case_Weight;

   //?Only HPB will have these   4/14/08
   // PAR.HPB Meter Net Gallon = DB1.HPB Meter Net Gallon + PAR.HPB Meter Net Gallon
   PAR.HPB_Meter_Net_Gallon = DB1.HPB_Meter_Net_Gallon + PAR.HPB_Meter_Net_Gallon;

   // PAR.HPB Meter Net Weight = DB1.HPB Meter Net Weight + PAR.HPB Meter Net Weight
   PAR.HPB_Meter_Net_Weight = DB1.HPB_Meter_Net_Weight + PAR.HPB_Meter_Net_Weight;

  }

  //?Check min/max from the item master
  // PAR.USR Min Weight = CND.Not Entered
  PAR.USR_Min_Weight = *ZERO;

  // PAR.USR Max Weight = CND.Not Entered
  PAR.USR_Max_Weight = *ZERO;

  EXECUTE FUNCTION(RTV Qty Min/Max        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1402211;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Minimum_Weight_Per_Case);
  PARAMETER(PAR.Maximum_Weight_Per_Case);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.USR Min Weight = PAR.Minimum Weight Per Case * PAR.USR Case Quantity *Rounde
  PAR.USR_Min_Weight = PAR.Minimum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

  // PAR.USR Max Weight = PAR.Maximum Weight Per Case * PAR.USR Case Quantity *Rounde
  PAR.USR_Max_Weight = PAR.Maximum_Weight_Per_Case * PAR.USR_Case_Quantity 'H';

  //?Weight entered as shipped is less than Minimum
  CASE;

  // IF PAR.USR Case Weight LT PAR.USR Min Weight
  IF PAR.USR_Case_Weight < PAR.USR_Min_Weight;

  // PAR.USR Under Min = CND.yes
  PAR.USR_Under_Min = 'Y';

  // PAR.USR Exit Program = CND.no
  PAR.USR_Exit_Program = 'N';

  //?Exit Prog. No  will set the program back to beginning
  ENDIF;

  //?Weight entered is greater than the maxiumum
  CASE;

  // IF PAR.USR Case Weight GT PAR.USR Max Weight
  IF PAR.USR_Case_Weight > PAR.USR_Max_Weight;

  // PAR.USR Over Max = CND.yes
  PAR.USR_Over_Max = 'Y';

  // PAR.USR Exit Program = CND.no
  PAR.USR_Exit_Program = 'N';

  //?Exit prog. no will set program back to beginning
  ENDIF;

  CASE;

  // IF PAR.USR Case Quantity GT DB1.Quantity Allocated
  IF PAR.USR_Case_Quantity > DB1.Quantity_Scheduled;

  // WRK.Work Over/Short Status = CND.Overage
  WRK.Work_Over_Short_Status = 'O';

  ENDIF;

  CASE;

  // IF PAR.USR Case Quantity LT DB1.Quantity Allocated
  IF PAR.USR_Case_Quantity < DB1.Quantity_Scheduled;

  // WRK.Work Over/Short Status = CND.Short
  WRK.Work_Over_Short_Status = 'S';

  ENDIF;

  //?12/4/24 DN - Commented Out 2 lines.
  //?FP1110 HPB ONLY 4/14/08 Output net gallons and net weight to Ord Dtl
  //?  if Warehouse is Req Meter Readings is YES.
  //?  Every other warehouse puts out the gross from manifest dtl
  EXECUTE FUNCTION(Rtv HPB fields        RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1855470;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(LCL.Production_Warehouse_Code);
  PARAMETER(LCL.Warehouse_Location);
  PARAMETER(LCL.WHS_Req_Meter_Reading_Shp);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.WHS Req Meter Reading Shp is Yes
  IF LCL.WHS_Req_Meter_Reading_Shp = 'Y';

  //?12/4/24 DN - Only update 3 fields.
  EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Detail_Line_Status);
  PARAMETER(DB1.Detail_Line_Status_Last);
  PARAMETER(DB1.Work_Confirm_Status);
  PARAMETER(WRK.Work_Over_Short_Status);
  PARAMETER(PAR.HPB_Meter_Net_Gallon);
  PARAMETER(PAR.HPB_Meter_Net_Weight);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.Substituted_Flag);
  PARAMETER(DB1.OD_Schedule_Override_Sts);
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?12/4/24 DN - Only update 3 fields.
  EXECUTE FUNCTION(CHG Confirmed Qty      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1314641;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Detail_Line_Status);
  PARAMETER(DB1.Detail_Line_Status_Last);
  PARAMETER(DB1.Work_Confirm_Status);
  PARAMETER(WRK.Work_Over_Short_Status);
  PARAMETER(PAR.USR_Case_Quantity);
  PARAMETER(PAR.USR_Case_Weight);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.Substituted_Flag);
  PARAMETER(DB1.OD_Schedule_Override_Sts);
  ENDIF;

 }

 ENDIF;

}


ENDIF;

// LCL.USR Counter = LCL.USR Counter + CON.1
LCL.USR_Counter = LCL.USR_Counter + 1;

ENDDO;

