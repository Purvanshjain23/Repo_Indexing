// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMUFXFR
// ?Date: 14.08.2025 Time: 03:44:07
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV Brkr trading part RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1880337;
PARAMETER(PAR.Broker_EDI_Trade_Partner);
PARAMETER(PAR.Date_From_USR);
PARAMETER(PAR.Date_To_USR);
PARAMETER(PAR.Broker_Code);
PARAMETER(PAR.Total_Amount);
{
 //?USER: Initialize routine

 // PAR.Total Amount = CON.*ZERO
 PAR.Total_Amount = *ZERO;

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Broker/Accrcde    RT) TYPE(RTVOBJ) FILE(PDICCPP)           AC1880593;
 PARAMETER(DB1.Broker_Code);
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Date_From_USR);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(DB1.Broker_EDI_Trade_Partner);
 PARAMETER(PAR.Total_Amount);
 {
  //?USER: Initialize routine

  //?Modifications:
  //?SAZ 10/05/16 added missing code in last record processing to get the
  //?EXTOL control Flag.
  //?SAZ 06/02/11 Moved the Sales hist routine out so that it is read for every
  //?detail rcd. Unit price routine was not getting the right price & U/M
  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  //?USER: Process Data record

  //?First time process.
  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  EXECUTE FUNCTION(Rtv Qty/Inv/Prc/Add   RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1881017;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(LCL.A_R_City);
  PARAMETER(LCL.A_R_State);
  PARAMETER(LCL.A_R_County_Code);
  PARAMETER(LCL.A_R_Zip_Postal_Code);
  PARAMETER(LCL.Parent_Customer);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.AR_Customer_Name);
  PARAMETER(LCL.Ship_to_Customer_Ship_To);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Ship_To_City);
  PARAMETER(LCL.Ship_To_State_Code);
  PARAMETER(LCL.Ship_To_Zip_Postal_Code);
  PARAMETER(LCL.Customer_Purchase_Order_#);
  PARAMETER(LCL.Weight_Ordered_SUM);
  PARAMETER(LCL.Unit_Price);
  PARAMETER(LCL.Unit_Price_Ordered_U_M);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(LCL.Invoice_Date);
  PARAMETER(LCL.Unit_Cost_Per_Pound);
  PARAMETER(LCL.Unit_Cost_Pricing_U_M);
  PARAMETER(LCL.Unit_Weight_Ordered_U_M);
  PARAMETER(LCL.Extended_Amount);
  PARAMETER(LCL.Accounting_Year_Code);
  PARAMETER(LCL.Accounting_Period_Code);
  PARAMETER(LCL.OM_Week);
  PARAMETER(LCL.Quantity_Billed);
  PARAMETER(LCL.Weight_Billed);
  PARAMETER(LCL.Shipped_Item_Code);
  PARAMETER(LCL.Shipping_Company_Number);
  PARAMETER(LCL.Order_Detail_Reason);
  PARAMETER(LCL.Invoice_Number);
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(LCL.Order_Desc_Line_One);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.USR Ship To Customer = LCL.Ship to Customer Ship To
  LCL.USR_Ship_To_Customer = LCL.Ship_to_Customer_Ship_To;

  // LCL.USR Invoice Number = LCL.Invoice Number
  LCL.USR_Invoice_Number = LCL.Invoice_Number;

  // LCL.Order Number Saved USR = DB1.Order Number
  LCL.Order_Number_Saved_USR = DB1.Order_Number;

  // LCL.Order Sequence Number = DB1.Order Sequence Number
  LCL.Order_Sequence_Number = DB1.Order_Sequence_Number;

  // LCL.Order Secondary Line Seq = DB1.Order Secondary Line Seq
  LCL.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

  // LCL.Sequence Number = DB1.Sequence Number
  LCL.Sequence_Number = DB1.Sequence_Number;

  // LCL.Company Number = DB1.Company Number
  LCL.Company_Number = DB1.Company_Number;

  // LCL.USR Company Number = LCL.Shipping Company Number
  LCL.USR_Company_Number = LCL.Shipping_Company_Number;

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  // LCL.Accrual Code = DB1.Accrual Code
  LCL.Accrual_Code = DB1.Accrual_Code;

  // LCL.Broker Code = DB1.Broker Code
  LCL.Broker_Code = DB1.Broker_Code;

  ENDIF;

  //?Quit when actual ship date greater than TO date.
  CASE;

  // IF DB1.HDA Actual Ship Date GT PAR.Date To               USR
  IF DB1.HDA_Actual_Ship_Date > PAR.Date_To_USR;

  //?Write header rcd or update
  EXECUTE FUNCTION(RTV Trade Partner Ctrl RT) TYPE(RTVOBJ) FILE(PBB8REP)          AC2111434;
  PARAMETER(PAR.Broker_EDI_Trade_Partner);
  PARAMETER(LCL.Extol_Control_Flag);
  PARAMETER(LCL.Live_with_ERP);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  EXECUTE FUNCTION(RTV/CHG/CRT Dist Allo RT) TYPE(RTVOBJ) FILE(ECP017)            AC1914780;
  PARAMETER(LCL.Company_Number);
  PARAMETER(LCL.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Broker_EDI_Trade_Partner);
  PARAMETER(LCL.Invoice_Number);
  PARAMETER(LCL.Invoice_Date);
  PARAMETER('PO');
  PARAMETER(LCL.Customer_Purchase_Order_#);
  PARAMETER(LCL.Count_Records_USR);
  PARAMETER(LCL.Weight_Billed_Actual_SUM);
  PARAMETER(5);
  PARAMETER(LCL.Invoiced_Amount);
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(LCL.D_Unused_amount);
  PARAMETER(LCL.D_Unused_code);
  PARAMETER(LCL.D_Unused_text);
  PARAMETER(LCL.Extol_Control_Flag);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT DIST Allow Header CR) TYPE(CRTOBJ) FILE(ECP017)            AC1880332;
   PARAMETER(PAR.Company);
   PARAMETER(PAR.Broker_Code);
   PARAMETER(PAR.D_BPT02_INV_SURROGATE_NBR);
   PARAMETER(PAR.D_EDI_INV_PROC_FLAG);
   PARAMETER(PAR.D_TRADE_PARTNER_CODE);
   PARAMETER(PAR.D_INVOICE_NUMBER);
   PARAMETER(PAR.D_BPT03_INVOICE_DATE);
   PARAMETER(PAR.D_REF01_REF_NBR_QUALI_PO);
   PARAMETER(PAR.D_REF02_PO_NUMBER);
   PARAMETER(PAR.D_CTT01_LIN_SEG_COUNT);
   PARAMETER(PAR.D_CTT02_TOT_QTY_SHIPPED);
   PARAMETER(PAR.D_AMT01_AMT_QUALIFIER_5);
   PARAMETER(PAR.D_AMT02_INVOICE_TOTAL);
   PARAMETER(PAR.D_Actual_Ship_Date);
   PARAMETER(PAR.D_Unused_amount);
   PARAMETER(PAR.D_Unused_code);
   PARAMETER(PAR.D_Unused_text);
   PARAMETER(PAR.D_Unused_code_2);
   //?USER: Process Data record

   // LCL.D-AMT02-INVOICE TOTAL = DB1.D-AMT02-INVOICE TOTAL + PAR.D-AMT02-INVOICE TOTAL
   LCL.D_AMT02_INVOICE_TOTAL = DB1.D_AMT02_INVOICE_TOTAL + PAR.D_AMT02_INVOICE_TOTAL;

   // LCL.D-CTT02-TOT QTY SHIPPED = DB1.D-CTT02-TOT QTY SHIPPED + PAR.D-CTT02-TOT QTY SHIPPED
   LCL.D_CTT02_TOT_QTY_SHIPPED = DB1.D_CTT02_TOT_QTY_SHIPPED + PAR.D_CTT02_TOT_QTY_SHIPPED;

   // LCL.D-CTT01 LIN SEG COUNT = DB1.D-CTT01 LIN SEG COUNT + PAR.D-CTT01 LIN SEG COUNT
   LCL.D_CTT01_LIN_SEG_COUNT = DB1.D_CTT01_LIN_SEG_COUNT + PAR.D_CTT01_LIN_SEG_COUNT;

   EXECUTE FUNCTION(CHG DIST Allow Header CH) TYPE(CHGOBJ) FILE(ECP017)            AC1880333;
   PARAMETER(DB1.Company);
   PARAMETER(DB1.Broker_Code);
  }

  // PAR.Total Amount = PAR.Total Amount + LCL.Invoiced Amount
  PAR.Total_Amount = PAR.Total_Amount + LCL.Invoiced_Amount;

  // LCL.Count Records        USR = CON.*ZERO
  LCL.Count_Records_USR = *ZERO;

  // LCL.Weight Billed Actual  SUM = CON.*ZERO
  LCL.Weight_Billed_Actual_SUM = *ZERO;

  // LCL.Invoiced Amount = CON.*ZERO
  LCL.Invoiced_Amount = *ZERO;

  //?Write Bill To Name/Address record
  // LCL.USR Address Qualifier = CON.BT
  LCL.USR_Address_Qualifier = 'BT';

  EXECUTE FUNCTION(RTV Cust A/r,Sls Rte  RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1680258;
  PARAMETER(LCL.USR_Ship_To_Customer);
  PARAMETER(NLL.Customer_Name);
  PARAMETER(LCL.AR_Customer_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(NLL.Address_Line_3);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(NLL.Internet_Password);
  PARAMETER(NLL.Email_Address);
  PARAMETER(NLL.Email_User_ID);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(NLL.EDI_Warehouse_Store_No);
  PARAMETER(NLL.State_Tax_ID);
  PARAMETER(NLL.Cust_Shipping_Temp_C_F);
  PARAMETER(NLL.One_Invoice_Per_PO);
  PARAMETER(NLL.EDI_Advanced_Ship_Notice);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(CRT Dist Allow Cus    CR) TYPE(CRTOBJ) FILE(ECP019)            AC1880323;
  PARAMETER(LCL.Company_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(LCL.USR_Address_Qualifier);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER('9');
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  //?Ship to address
  // LCL.USR Address Qualifier = CON.ST
  LCL.USR_Address_Qualifier = 'ST';

  EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
  PARAMETER(LCL.USR_Ship_To_Customer);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(NLL.Address_Line_3);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
  PARAMETER(LCL.USR_Ship_To_Customer);
  PARAMETER(NLL.Internet_Password);
  PARAMETER(NLL.Email_Address);
  PARAMETER(NLL.Email_User_ID);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(NLL.EDI_Warehouse_Store_No);
  PARAMETER(NLL.State_Tax_ID);
  PARAMETER(NLL.Cust_Shipping_Temp_C_F);
  PARAMETER(NLL.One_Invoice_Per_PO);
  PARAMETER(NLL.EDI_Advanced_Ship_Notice);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(CRT Dist Allow Cus    CR) TYPE(CRTOBJ) FILE(ECP019)            AC1880323;
  PARAMETER(LCL.Company_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(LCL.USR_Address_Qualifier);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER('9');
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  //?Ship From Address
  // LCL.USR Address Qualifier = CON.SF
  LCL.USR_Address_Qualifier = 'SF';

  EXECUTE FUNCTION(RTV Company Address    RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1113470;
  PARAMETER(LCL.USR_Company_Number);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(NLL.Address_Line_3);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  PARAMETER(LCL.D_N402_STATE);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(LCL.USR_Company_Number);
  PARAMETER('DUNSNUM');
  PARAMETER(LCL.D_N104_DUNS_NBR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Move company to a 4 position numeric
  // LCL.Calc 4 = LCL.Shipping Company Number
  LCL.Calc_4 = LCL.Shipping_Company_Number;

  //?Move company to a 4 position numeric to a alpha 4 field
  // LCL.Amount Right 4 position = LCL.Calc 4
  LCL.Amount_Right_4_position = LCL.Calc_4;

  // LCL.Text USR 9 = LCL.D-N104-DUNS NBR
  LCL.Text_USR_9 = LCL.D_N104_DUNS_NBR;

  // LCL.D-N104-ID CODE = CONCAT(LCL.Text USR 9,LCL.Amount Right 4 position,CON.*ZERO)
  LCL.D_N104_ID_CODE = LCL.Text_USR_9 + LCL.Amount_Right_4_position (*ZERO);

  EXECUTE FUNCTION(CRT Dist Allow Cus    CR) TYPE(CRTOBJ) FILE(ECP019)            AC1880323;
  PARAMETER(LCL.Company_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(LCL.USR_Address_Qualifier);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER('9');
  PARAMETER(LCL.D_N104_ID_CODE);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  QUIT;

  ENDIF;

  //?Write Header and Cust records when key changes.
  CASE;

  // IF DB1.Company Number NE LCL.Company Number
  IF DB1.Company_Number <> LCL.Company_Number;

  // OR DB1.Order Number NE LCL.Order Number Saved USR
  OR DB1.Order_Number <> LCL.Order_Number_Saved_USR;

  //?Create or update header rcd
  EXECUTE FUNCTION(RTV Trade Partner Ctrl RT) TYPE(RTVOBJ) FILE(PBB8REP)          AC2111434;
  PARAMETER(PAR.Broker_EDI_Trade_Partner);
  PARAMETER(LCL.Extol_Control_Flag);
  PARAMETER(LCL.Live_with_ERP);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  EXECUTE FUNCTION(RTV/CHG/CRT Dist Allo RT) TYPE(RTVOBJ) FILE(ECP017)            AC1914780;
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Broker_EDI_Trade_Partner);
  PARAMETER(LCL.Invoice_Number);
  PARAMETER(LCL.Invoice_Date);
  PARAMETER('PO');
  PARAMETER(LCL.Customer_Purchase_Order_#);
  PARAMETER(LCL.Count_Records_USR);
  PARAMETER(LCL.Weight_Billed_Actual_SUM);
  PARAMETER(5);
  PARAMETER(LCL.Invoiced_Amount);
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(LCL.D_Unused_amount);
  PARAMETER(LCL.D_Unused_code);
  PARAMETER(LCL.D_Unused_text);
  PARAMETER(LCL.Extol_Control_Flag);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT DIST Allow Header CR) TYPE(CRTOBJ) FILE(ECP017)            AC1880332;
   PARAMETER(PAR.Company);
   PARAMETER(PAR.Broker_Code);
   PARAMETER(PAR.D_BPT02_INV_SURROGATE_NBR);
   PARAMETER(PAR.D_EDI_INV_PROC_FLAG);
   PARAMETER(PAR.D_TRADE_PARTNER_CODE);
   PARAMETER(PAR.D_INVOICE_NUMBER);
   PARAMETER(PAR.D_BPT03_INVOICE_DATE);
   PARAMETER(PAR.D_REF01_REF_NBR_QUALI_PO);
   PARAMETER(PAR.D_REF02_PO_NUMBER);
   PARAMETER(PAR.D_CTT01_LIN_SEG_COUNT);
   PARAMETER(PAR.D_CTT02_TOT_QTY_SHIPPED);
   PARAMETER(PAR.D_AMT01_AMT_QUALIFIER_5);
   PARAMETER(PAR.D_AMT02_INVOICE_TOTAL);
   PARAMETER(PAR.D_Actual_Ship_Date);
   PARAMETER(PAR.D_Unused_amount);
   PARAMETER(PAR.D_Unused_code);
   PARAMETER(PAR.D_Unused_text);
   PARAMETER(PAR.D_Unused_code_2);
   //?USER: Process Data record

   // LCL.D-AMT02-INVOICE TOTAL = DB1.D-AMT02-INVOICE TOTAL + PAR.D-AMT02-INVOICE TOTAL
   LCL.D_AMT02_INVOICE_TOTAL = DB1.D_AMT02_INVOICE_TOTAL + PAR.D_AMT02_INVOICE_TOTAL;

   // LCL.D-CTT02-TOT QTY SHIPPED = DB1.D-CTT02-TOT QTY SHIPPED + PAR.D-CTT02-TOT QTY SHIPPED
   LCL.D_CTT02_TOT_QTY_SHIPPED = DB1.D_CTT02_TOT_QTY_SHIPPED + PAR.D_CTT02_TOT_QTY_SHIPPED;

   // LCL.D-CTT01 LIN SEG COUNT = DB1.D-CTT01 LIN SEG COUNT + PAR.D-CTT01 LIN SEG COUNT
   LCL.D_CTT01_LIN_SEG_COUNT = DB1.D_CTT01_LIN_SEG_COUNT + PAR.D_CTT01_LIN_SEG_COUNT;

   EXECUTE FUNCTION(CHG DIST Allow Header CH) TYPE(CHGOBJ) FILE(ECP017)            AC1880333;
   PARAMETER(DB1.Company);
   PARAMETER(DB1.Broker_Code);
  }

  // PAR.Total Amount = PAR.Total Amount + LCL.Invoiced Amount
  PAR.Total_Amount = PAR.Total_Amount + LCL.Invoiced_Amount;

  //?Initialize accumulators.
  // LCL.Count Records        USR = CON.*ZERO
  LCL.Count_Records_USR = *ZERO;

  // LCL.Weight Billed Actual  SUM = CON.*ZERO
  LCL.Weight_Billed_Actual_SUM = *ZERO;

  // LCL.Invoiced Amount = CON.*ZERO
  LCL.Invoiced_Amount = *ZERO;

  //?Write Customer Addy records.
  //?Bill to address
  // LCL.USR Address Qualifier = CON.BT
  LCL.USR_Address_Qualifier = 'BT';

  EXECUTE FUNCTION(RTV Cust A/r,Sls Rte  RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1680258;
  PARAMETER(LCL.USR_Ship_To_Customer);
  PARAMETER(NLL.Customer_Name);
  PARAMETER(LCL.AR_Customer_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(NLL.Address_Line_3);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(NLL.Internet_Password);
  PARAMETER(NLL.Email_Address);
  PARAMETER(NLL.Email_User_ID);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(NLL.EDI_Warehouse_Store_No);
  PARAMETER(NLL.State_Tax_ID);
  PARAMETER(NLL.Cust_Shipping_Temp_C_F);
  PARAMETER(NLL.One_Invoice_Per_PO);
  PARAMETER(NLL.EDI_Advanced_Ship_Notice);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(CRT Dist Allow Cus    CR) TYPE(CRTOBJ) FILE(ECP019)            AC1880323;
  PARAMETER(LCL.Company_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(LCL.USR_Address_Qualifier);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER('9');
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  //?Ship to address
  // LCL.USR Address Qualifier = CON.ST
  LCL.USR_Address_Qualifier = 'ST';

  EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
  PARAMETER(LCL.USR_Ship_To_Customer);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(NLL.Address_Line_3);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
  PARAMETER(LCL.USR_Ship_To_Customer);
  PARAMETER(NLL.Internet_Password);
  PARAMETER(NLL.Email_Address);
  PARAMETER(NLL.Email_User_ID);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(NLL.EDI_Warehouse_Store_No);
  PARAMETER(NLL.State_Tax_ID);
  PARAMETER(NLL.Cust_Shipping_Temp_C_F);
  PARAMETER(NLL.One_Invoice_Per_PO);
  PARAMETER(NLL.EDI_Advanced_Ship_Notice);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(CRT Dist Allow Cus    CR) TYPE(CRTOBJ) FILE(ECP019)            AC1880323;
  PARAMETER(LCL.Company_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(LCL.USR_Address_Qualifier);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER('9');
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  //?Ship From Address
  // LCL.USR Address Qualifier = CON.SF
  LCL.USR_Address_Qualifier = 'SF';

  EXECUTE FUNCTION(RTV Company Address    RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1113470;
  PARAMETER(LCL.USR_Company_Number);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(NLL.Address_Line_3);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  PARAMETER(LCL.D_N402_STATE);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(LCL.USR_Company_Number);
  PARAMETER('DUNSNUM');
  PARAMETER(LCL.D_N104_DUNS_NBR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.Text USR 4 = CON.0000
  LCL.Text_USR_4 = 0000;

  // LCL.Text USR 9 = LCL.D-N104-DUNS NBR
  LCL.Text_USR_9 = LCL.D_N104_DUNS_NBR;

  // LCL.D-N104-DUNS NBR = CONCAT(LCL.Text USR 9,LCL.Text USR 4,CON.*ZERO)
  LCL.D_N104_DUNS_NBR = LCL.Text_USR_9 + LCL.Text_USR_4 (*ZERO);

  EXECUTE FUNCTION(CRT Dist Allow Cus    CR) TYPE(CRTOBJ) FILE(ECP019)            AC1880323;
  PARAMETER(LCL.Company_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(LCL.USR_Address_Qualifier);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER('9');
  PARAMETER(LCL.D_N104_DUNS_NBR);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  ENDIF;

  EXECUTE FUNCTION(Rtv Qty/Inv/Prc/Add   RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1881017;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(LCL.A_R_City);
  PARAMETER(LCL.A_R_State);
  PARAMETER(LCL.A_R_County_Code);
  PARAMETER(LCL.A_R_Zip_Postal_Code);
  PARAMETER(LCL.Parent_Customer);
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.AR_Customer_Name);
  PARAMETER(LCL.Ship_to_Customer_Ship_To);
  PARAMETER(LCL.Ship_To_Name);
  PARAMETER(LCL.Ship_To_City);
  PARAMETER(LCL.Ship_To_State_Code);
  PARAMETER(LCL.Ship_To_Zip_Postal_Code);
  PARAMETER(LCL.Customer_Purchase_Order_#);
  PARAMETER(LCL.Weight_Ordered_SUM);
  PARAMETER(LCL.Unit_Price);
  PARAMETER(LCL.Unit_Price_Ordered_U_M);
  PARAMETER(LCL.U_M_Base_Price);
  PARAMETER(LCL.Invoice_Date);
  PARAMETER(LCL.Unit_Cost_Per_Pound);
  PARAMETER(LCL.Unit_Cost_Pricing_U_M);
  PARAMETER(LCL.Unit_Weight_Ordered_U_M);
  PARAMETER(LCL.Extended_Amount);
  PARAMETER(LCL.Accounting_Year_Code);
  PARAMETER(LCL.Accounting_Period_Code);
  PARAMETER(LCL.OM_Week);
  PARAMETER(LCL.Quantity_Billed);
  PARAMETER(LCL.Weight_Billed);
  PARAMETER(LCL.Shipped_Item_Code);
  PARAMETER(LCL.Shipping_Company_Number);
  PARAMETER(LCL.Order_Detail_Reason);
  PARAMETER(LCL.Invoice_Number);
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(LCL.Order_Desc_Line_One);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Save new order stuff
  CASE;

  // IF DB1.Company Number NE LCL.Company Number
  IF DB1.Company_Number <> LCL.Company_Number;

  // OR DB1.Order Number NE LCL.Order Number Saved USR
  OR DB1.Order_Number <> LCL.Order_Number_Saved_USR;

  // LCL.USR Ship To Customer = LCL.Ship to Customer Ship To
  LCL.USR_Ship_To_Customer = LCL.Ship_to_Customer_Ship_To;

  // LCL.USR Invoice Number = LCL.Invoice Number
  LCL.USR_Invoice_Number = LCL.Invoice_Number;

  // LCL.Order Number Saved USR = DB1.Order Number
  LCL.Order_Number_Saved_USR = DB1.Order_Number;

  // LCL.Order Sequence Number = DB1.Order Sequence Number
  LCL.Order_Sequence_Number = DB1.Order_Sequence_Number;

  // LCL.Order Secondary Line Seq = DB1.Order Secondary Line Seq
  LCL.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

  // LCL.Sequence Number = DB1.Sequence Number
  LCL.Sequence_Number = DB1.Sequence_Number;

  // LCL.Company Number = DB1.Company Number
  LCL.Company_Number = DB1.Company_Number;

  // LCL.USR Company Number = LCL.Shipping Company Number
  LCL.USR_Company_Number = LCL.Shipping_Company_Number;

  // LCL.Broker Code = DB1.Broker Code
  LCL.Broker_Code = DB1.Broker_Code;

  // LCL.Accrual Code = DB1.Accrual Code
  LCL.Accrual_Code = DB1.Accrual_Code;

  ENDIF;

  //?A rcd is written to ECP018 for every Accrual record
  // LCL.Count Records        USR = LCL.Count Records        USR + CON.1
  LCL.Count_Records_USR = LCL.Count_Records_USR + 1;

  EXECUTE FUNCTION(RTV Federal ID         RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1379325;
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Federal_Tax_Id);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?-----------
  //?07/08/08 PKD Using the System Value for the name
  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('ORGNAM');
  PARAMETER(LCL.D_N102_ITEM_MANUFACT_NAME);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('ORGDUNS');
  PARAMETER(LCL.D_N104_DUNS_NBR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?-----------
  EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.D_PID02_ITEM_DESC);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Cat Federal ID with the item code to make UPC
  // LCL.USR Text 7            USR = LCL.Federal Tax Id.
  LCL.USR_Text_7_USR = LCL.Federal_Tax_Id;

  // LCL.Item Code 5.0 = DB1.Item Code
  LCL.Item_Code_5_0 = DB1.Item_Code;

  // LCL.Item Code 5A = CVTVAR(LCL.Item Code 5.0)
  LCL.Item_Code_5A = CVTVAR(LCL.Item_Code_5_0);

  // LCL.D-ITA06-ALLW DOL AMT/UNIT = DB1.Accrual Rate
  LCL.D_ITA06_ALLW_DOL_AMT_UNIT = DB1.Accrual_Rate;

  // LCL.D-ITA07-TOT DOL AMT/LINE = DB1.Extended Amount
  LCL.D_ITA07_TOT_DOL_AMT_LINE = DB1.Extended_Amount;

  // LCL.D-ITA09-Allow %/Unit = DB1.Accrual Rate * CON.100 *
  LCL.D_ITA09_Allow_Unit = DB1.Accrual_Rate * 100;

  // LCL.Item Meat Cost Group Code = CONCAT(LCL.USR Text 7            USR,LCL.Item Code 5A,CON.*ZERO
  LCL.Item_Meat_Cost_Group_Code = LCL.USR_Text_7_USR + LCL.Item_Code_5A (*ZERO);

  //?Calculate net price per unit
  CASE;

  // IF LCL.U/M - Base Price is Carcass Hundred Weight
  IF LCL.U_M_Base_Price = 'CW';

  // LCL.D-UIT02-NET PRICE PER UNT = LCL.Unit Price / CON.100 *
  LCL.D_UIT02_NET_PRICE_PER_UNT = LCL.Unit_Price / 100;

  // LCL.D-QTY ORDERED = DB1.Weight Billed
  LCL.D_QTY_ORDERED = DB1.Weight_Billed;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.D-UIT02-NET PRICE PER UNT = LCL.Unit Price
  LCL.D_UIT02_NET_PRICE_PER_UNT = LCL.Unit_Price;

  // LCL.D-QTY ORDERED = LCL.Quantity Billed
  LCL.D_QTY_ORDERED = LCL.Quantity_Billed;

  ENDIF;

  EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(NLL.Internet_Password);
  PARAMETER(NLL.Email_Address);
  PARAMETER(NLL.Email_User_ID);
  PARAMETER(LCL.EDI_Trading_Partner_No);
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(NLL.EDI_Warehouse_Store_No);
  PARAMETER(NLL.State_Tax_ID);
  PARAMETER(NLL.Cust_Shipping_Temp_C_F);
  PARAMETER(NLL.One_Invoice_Per_PO);
  PARAMETER(NLL.EDI_Advanced_Ship_Notice);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF DB1.Accrual Rate is Negative
  IF DB1.Accrual_Rate < 0;

  //?Sending blank until we know what they want here.
  // LCL.D-1TA13-DESC ITA06 NEG = CON.*BLANK
  LCL.D_1TA13_DESC_ITA06_NEG = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.D-1TA13-DESC ITA06 NEG = CON.*BLANK
  LCL.D_1TA13_DESC_ITA06_NEG = *BLANK;

  ENDIF;

  EXECUTE FUNCTION(CRT Dist Allow Dtl    CR) TYPE(CRTOBJ) FILE(ECP018)            AC1880314;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Sequence_Number);
  PARAMETER(LCL.D_1TA13_DESC_ITA06_NEG);
  PARAMETER('F');
  PARAMETER(LCL.D_PID02_ITEM_DESC);
  PARAMETER(32);
  PARAMETER(DB1.HDA_Actual_Ship_Date);
  PARAMETER(LCL.Company_Number);
  PARAMETER(LCL.D_QTY_ORDERED);
  PARAMETER(DB1.Weight_Billed);
  PARAMETER('UA');
  PARAMETER(LCL.Item_Meat_Cost_Group_Code);
  PARAMETER('VN');
  PARAMETER(LCL.D_LIN05_SKU_FOR_TRDE_PTNR);
  PARAMETER('VN');
  PARAMETER('UN');
  PARAMETER(LCL.D_UIT02_NET_PRICE_PER_UNT);
  PARAMETER(LCL.D_N102_ITEM_MANUFACT_NAME);
  PARAMETER('PE');
  PARAMETER(1);
  PARAMETER('A');
  PARAMETER('EDA');
  PARAMETER(9);
  PARAMETER(LCL.D_ITA06_ALLW_DOL_AMT_UNIT);
  PARAMETER(LCL.D_ITA07_TOT_DOL_AMT_LINE);
  PARAMETER(LCL.D_N104_DUNS_NBR);
  PARAMETER(LCL.D_ITA09_Allow_Unit);
  PARAMETER(DB1.Accrual_Code);
  //?Accumulate totals for Header Rcd.
  // LCL.Invoiced Amount = LCL.Invoiced Amount + DB1.Extended Amount
  LCL.Invoiced_Amount = LCL.Invoiced_Amount + DB1.Extended_Amount;

  // LCL.Weight Billed Actual  SUM = DB1.Weight Billed + LCL.Weight Billed Actual  SUM
  LCL.Weight_Billed_Actual_SUM = DB1.Weight_Billed + LCL.Weight_Billed_Actual_SUM;

  // LCL.USR Invoice Number = LCL.Invoice Number
  LCL.USR_Invoice_Number = LCL.Invoice_Number;

  // LCL.Order Number Saved USR = DB1.Order Number
  LCL.Order_Number_Saved_USR = DB1.Order_Number;

  // LCL.Order Sequence Number = DB1.Order Sequence Number
  LCL.Order_Sequence_Number = DB1.Order_Sequence_Number;

  // LCL.Order Secondary Line Seq = DB1.Order Secondary Line Seq
  LCL.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

  // LCL.Sequence Number = DB1.Sequence Number
  LCL.Sequence_Number = DB1.Sequence_Number;

  // LCL.Company Number = DB1.Company Number
  LCL.Company_Number = DB1.Company_Number;

  //?USER: Exit processing

  //?Create or update header record
  EXECUTE FUNCTION(RTV Trade Partner Ctrl RT) TYPE(RTVOBJ) FILE(PBB8REP)          AC2111434;
  PARAMETER(PAR.Broker_EDI_Trade_Partner);
  PARAMETER(LCL.Extol_Control_Flag);
  PARAMETER(LCL.Live_with_ERP);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  EXECUTE FUNCTION(RTV/CHG/CRT Dist Allo RT) TYPE(RTVOBJ) FILE(ECP017)            AC1914780;
  PARAMETER(LCL.Company_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Broker_EDI_Trade_Partner);
  PARAMETER(LCL.Invoice_Number);
  PARAMETER(LCL.Invoice_Date);
  PARAMETER('PO');
  PARAMETER(LCL.Customer_Purchase_Order_#);
  PARAMETER(LCL.Count_Records_USR);
  PARAMETER(LCL.Weight_Billed_Actual_SUM);
  PARAMETER(5);
  PARAMETER(LCL.Invoiced_Amount);
  PARAMETER(PAR.HDA_Actual_Ship_Date);
  PARAMETER(LCL.D_Unused_amount);
  PARAMETER(LCL.D_Unused_code);
  PARAMETER(LCL.D_Unused_text);
  PARAMETER(LCL.Extol_Control_Flag);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(CRT DIST Allow Header CR) TYPE(CRTOBJ) FILE(ECP017)            AC1880332;
   PARAMETER(PAR.Company);
   PARAMETER(PAR.Broker_Code);
   PARAMETER(PAR.D_BPT02_INV_SURROGATE_NBR);
   PARAMETER(PAR.D_EDI_INV_PROC_FLAG);
   PARAMETER(PAR.D_TRADE_PARTNER_CODE);
   PARAMETER(PAR.D_INVOICE_NUMBER);
   PARAMETER(PAR.D_BPT03_INVOICE_DATE);
   PARAMETER(PAR.D_REF01_REF_NBR_QUALI_PO);
   PARAMETER(PAR.D_REF02_PO_NUMBER);
   PARAMETER(PAR.D_CTT01_LIN_SEG_COUNT);
   PARAMETER(PAR.D_CTT02_TOT_QTY_SHIPPED);
   PARAMETER(PAR.D_AMT01_AMT_QUALIFIER_5);
   PARAMETER(PAR.D_AMT02_INVOICE_TOTAL);
   PARAMETER(PAR.D_Actual_Ship_Date);
   PARAMETER(PAR.D_Unused_amount);
   PARAMETER(PAR.D_Unused_code);
   PARAMETER(PAR.D_Unused_text);
   PARAMETER(PAR.D_Unused_code_2);
   //?USER: Process Data record

   // LCL.D-AMT02-INVOICE TOTAL = DB1.D-AMT02-INVOICE TOTAL + PAR.D-AMT02-INVOICE TOTAL
   LCL.D_AMT02_INVOICE_TOTAL = DB1.D_AMT02_INVOICE_TOTAL + PAR.D_AMT02_INVOICE_TOTAL;

   // LCL.D-CTT02-TOT QTY SHIPPED = DB1.D-CTT02-TOT QTY SHIPPED + PAR.D-CTT02-TOT QTY SHIPPED
   LCL.D_CTT02_TOT_QTY_SHIPPED = DB1.D_CTT02_TOT_QTY_SHIPPED + PAR.D_CTT02_TOT_QTY_SHIPPED;

   // LCL.D-CTT01 LIN SEG COUNT = DB1.D-CTT01 LIN SEG COUNT + PAR.D-CTT01 LIN SEG COUNT
   LCL.D_CTT01_LIN_SEG_COUNT = DB1.D_CTT01_LIN_SEG_COUNT + PAR.D_CTT01_LIN_SEG_COUNT;

   EXECUTE FUNCTION(CHG DIST Allow Header CH) TYPE(CHGOBJ) FILE(ECP017)            AC1880333;
   PARAMETER(DB1.Company);
   PARAMETER(DB1.Broker_Code);
  }

  // PAR.Total Amount = PAR.Total Amount + LCL.Invoiced Amount
  PAR.Total_Amount = PAR.Total_Amount + LCL.Invoiced_Amount;

  // LCL.Count Records        USR = CON.*ZERO
  LCL.Count_Records_USR = *ZERO;

  // LCL.Weight Billed Actual  SUM = CON.*ZERO
  LCL.Weight_Billed_Actual_SUM = *ZERO;

  // LCL.Invoiced Amount = CON.*ZERO
  LCL.Invoiced_Amount = *ZERO;

  //?Write Customer Addy records.
  // LCL.USR Address Qualifier = CON.BT
  LCL.USR_Address_Qualifier = 'BT';

  EXECUTE FUNCTION(RTV Cust A/r,Sls Rte  RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1680258;
  PARAMETER(LCL.USR_Ship_To_Customer);
  PARAMETER(NLL.Customer_Name);
  PARAMETER(LCL.AR_Customer_Number);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(NLL.Address_Line_3);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
  PARAMETER(LCL.AR_Customer_Number);
  PARAMETER(NLL.Internet_Password);
  PARAMETER(NLL.Email_Address);
  PARAMETER(NLL.Email_User_ID);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(NLL.EDI_Warehouse_Store_No);
  PARAMETER(NLL.State_Tax_ID);
  PARAMETER(NLL.Cust_Shipping_Temp_C_F);
  PARAMETER(NLL.One_Invoice_Per_PO);
  PARAMETER(NLL.EDI_Advanced_Ship_Notice);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(CRT Dist Allow Cus    CR) TYPE(CRTOBJ) FILE(ECP019)            AC1880323;
  PARAMETER(LCL.Company_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(LCL.USR_Address_Qualifier);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER(9);
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  //?Ship to address
  // LCL.USR Address Qualifier = CON.ST
  LCL.USR_Address_Qualifier = 'ST';

  EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
  PARAMETER(LCL.USR_Ship_To_Customer);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(NLL.Address_Line_3);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
  PARAMETER(LCL.USR_Ship_To_Customer);
  PARAMETER(NLL.Internet_Password);
  PARAMETER(NLL.Email_Address);
  PARAMETER(NLL.Email_User_ID);
  PARAMETER(NLL.EDI_Trading_Partner_No);
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(NLL.EDI_Warehouse_Store_No);
  PARAMETER(NLL.State_Tax_ID);
  PARAMETER(NLL.Cust_Shipping_Temp_C_F);
  PARAMETER(NLL.One_Invoice_Per_PO);
  PARAMETER(NLL.EDI_Advanced_Ship_Notice);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(CRT Dist Allow Cus    CR) TYPE(CRTOBJ) FILE(ECP019)            AC1880323;
  PARAMETER(LCL.Company_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(LCL.USR_Address_Qualifier);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER(9);
  PARAMETER(LCL.EDI_Cust_Duns_Number);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  //?Ship From Address
  // LCL.USR Address Qualifier = CON.SF
  LCL.USR_Address_Qualifier = 'SF';

  EXECUTE FUNCTION(RTV Company Address    RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1113470;
  PARAMETER(LCL.USR_Company_Number);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(NLL.Address_Line_3);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
  PARAMETER(LCL.D_N402_STATE);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(LCL.USR_Company_Number);
  PARAMETER('DUNSNUM');
  PARAMETER(LCL.D_N104_DUNS_NBR);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Move company to a 4 position numeric
  // LCL.Calc 4 = LCL.Shipping Company Number
  LCL.Calc_4 = LCL.Shipping_Company_Number;

  //?Move company to a 4 position numeric to a alpha 4 field
  // LCL.Amount Right 4 position = LCL.Calc 4
  LCL.Amount_Right_4_position = LCL.Calc_4;

  // LCL.Text USR 9 = LCL.D-N104-DUNS NBR
  LCL.Text_USR_9 = LCL.D_N104_DUNS_NBR;

  // LCL.D-N104-ID CODE = CONCAT(LCL.Text USR 9,LCL.Amount Right 4 position,CON.*ZERO)
  LCL.D_N104_ID_CODE = LCL.Text_USR_9 + LCL.Amount_Right_4_position (*ZERO);

  EXECUTE FUNCTION(CRT Dist Allow Cus    CR) TYPE(CRTOBJ) FILE(ECP019)            AC1880323;
  PARAMETER(LCL.Company_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(LCL.USR_Invoice_Number);
  PARAMETER(LCL.USR_Address_Qualifier);
  PARAMETER(LCL.D_N102_NAME);
  PARAMETER(9);
  PARAMETER(LCL.D_N104_ID_CODE);
  PARAMETER(LCL.D_N301_ADDRESS_1);
  PARAMETER(LCL.D_N302_ADDRESS_2);
  PARAMETER(LCL.D_N401_CITY);
  PARAMETER(LCL.D_N402_STATE);
  PARAMETER(LCL.D_N403_POSTAL_CODE);
 }

}


