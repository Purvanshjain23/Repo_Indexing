// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKTNPVR
// ?Date: 14.08.2025 Time: 02:52:45
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


// LCL.Display Field Usr = CND.*Yes
LCL.Display_Field_Usr = *YES;

EXECUTE FUNCTION(Rtv Payment Info      RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1121507;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(LCL.BOH_Quote_Price_Type);
PARAMETER(LCL.PC_Contract_Code);
PARAMETER(LCL.PSC_Sub_Contract_Code);
PARAMETER(LCL.CMP_Program_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv CMP Info          RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1116767;
PARAMETER(LCL.CMP_Program_Code);
PARAMETER(LCL.CMP_Description);
PARAMETER(LCL.CMP_Grading_Type);
PARAMETER(LCL.CMP_Sort_Basis);
PARAMETER(LCL.CMP_Carc_Wgt_Type);
PARAMETER(LCL.CMP_Std_Lean_Percent);
PARAMETER(LCL.CMP_Lean_Factor);
PARAMETER(LCL.CMP_Optimal_Row_Nbr_f_srt);
PARAMETER(LCL.CMP_Type);
PARAMETER(LCL.CMP_Market_Add_Deduct);
PARAMETER(LCL.RS_Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Load screen

// Compute: Net head
DTL.Net_Head_Usr = ( DTL.TH_Head_Received - DTL.TH_Yard_Deads ) - DTL.TH_Head_Condemned;

CASE;

// IF DTL.TH PHA Add Type is None
IF DTL.TH_PHA_Add_Type = *BLANK;

// AND DTL.TH PHA Add Reason is *None
AND DTL.TH_PHA_Add_Reason = *BLANK;

// AND DTL.TH PHA Average Type is None
AND DTL.TH_PHA_Average_Type = *BLANK;

EXECUTE FUNCTION(Rtv GA Prod Hist Avgs RT) TYPE(RTVOBJ) FILE(PKCGCPP)           AB1226508;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.TH_Purchase_Date);
PARAMETER(DTL.TH_PHA_Average_Type);
PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
PARAMETER(DTL.Adj_Actual_Yield_USR);
PARAMETER(DTL.Lean_percent_USR);
PARAMETER(DTL.Backfat_USR);
PARAMETER(DTL.Loin_Eye_USR);
PARAMETER(DTL.Light_Reflectance_USR);
PARAMETER(DTL.CM_Lean_Prem_Carc_CWT_USR);
PARAMETER(DTL.PH_GA_Avg_Srt_Disc_Fctr);
PARAMETER(WRK.History_Avail_STS_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // PAR.History Avail STS USR = CND.No
 PAR.History_Avail_STS_USR = 'N';

 // LCL.First Time Flag Usr = CND.Yes
 LCL.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 //?First Time Processing
 CASE;

 // IF LCL.First Time Flag Usr is Yes
 IF LCL.First_Time_Flag_Usr = 'Y';

 // LCL.PH Week Ending Date = DB1.PH Week Ending Date
 LCL.PH_Week_Ending_Date = DB1.PH_Week_Ending_Date;

 // LCL.First Time Flag Usr = CND.No
 LCL.First_Time_Flag_Usr = 'N';

 ENDIF;

 CASE;

 // IF DB1.PH Week Ending Date NE LCL.PH Week Ending Date
 IF DB1.PH_Week_Ending_Date <> LCL.PH_Week_Ending_Date;

 QUIT;

 ENDIF;

 CASE;

 // IF DB1.PH Summary Type is 2 Week
 IF DB1.PH_Summary_Type = '2WK';

 CASE;

 // IF DB1.PH GA Head Killed is GE 600
 IF DB1.PH_GA_Head_Killed >= 600;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 // IF DB1.PH Summary Type is 4 Week
 IF DB1.PH_Summary_Type = '4WK';

 CASE;

 // IF DB1.PH GA Head Killed is GT Zero
 IF DB1.PH_GA_Head_Killed > *ZERO;

 MOVE *ALL (To: PAR From: DB1);

 // PAR.History Avail STS USR = CND.Yes
 PAR.History_Avail_STS_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


SET CURSOR;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Display Field Usr = CND.*No
LCL.Display_Field_Usr = *NO;

SET CURSOR;

ENDIF;

// DTL.Condition Name 1 USR = Condition name of DTL.TH PHA Add Type
DTL.Condition_Name_1_USR = RTVCND(DTL.TH_PHA_Add_Type);

// DTL.Condition Name 2 USR = Condition name of DTL.TH PHA Add Reason
DTL.Condition_Name_2_USR = RTVCND(DTL.TH_PHA_Add_Reason);

// DTL.Condition Name 3 USR = Condition name of DTL.TH PHA Average Type
DTL.Condition_Name_3_USR = RTVCND(DTL.TH_PHA_Average_Type);

EXECUTE FUNCTION(Rtv THC Comment H typ RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1257832;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(LCL.THC_Comment);
PARAMETER('H');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Text description = LCL.THC Comment
DTL.Text_description = LCL.THC_Comment;

//?USER: Validate fields

CASE;

// IF LCL.CMP Grading Type is Sort Discount Factor
IF LCL.CMP_Grading_Type = 'S';

CASE;

// IF DTL.PH GA Avg Srt Disc Fctr is eq 0
IF DTL.PH_GA_Avg_Srt_Disc_Fctr = *ZERO;

// Send error message - 'Sort Discount Factor is required.'
ERROR(PRK0960);
MSGPARM(DTL.PH_GA_Avg_Srt_Disc_Fctr);

ENDIF;

ENDIF;

//?USER: User defined action

CASE;

// IF DTL.Text description NE LCL.THC Comment
IF DTL.Text_description <> LCL.THC_Comment;

EXECUTE FUNCTION(Rtv Chg Crt Comment H RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1257834;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(LCL.THC_Comment_Line);
PARAMETER(DTL.Text_description);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   IF) TYPE(EXCINTFUN)                      AB1115260;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.THC_Comment_Line);
 PARAMETER(PAR.Text_description);
 PARAMETER('H');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Line Nbr     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1115261;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  {
   //?USER: Processing if Data record not found

   // PAR.THC Comment Line = CON.1
   PAR.THC_Comment_Line = 1;

   //?USER: Process Data record

   // PAR.THC Comment Line = DB1.THC Comment Line + CON.1
   PAR.THC_Comment_Line = DB1.THC_Comment_Line + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Tattoo Hdr Cmnt   CR) TYPE(CRTOBJ) FILE(PKA4CPP)           AB1113201;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(PAR.TH_Kill_Date);
  PARAMETER(PAR.THC_Comment_Line);
  PARAMETER(PAR.THC_Comment);
  PARAMETER(PAR.THC_Comment_Type);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

 }

 //?USER: Process Data record

 CASE;

 // IF PAR.Text description is Not Entered
 IF PAR.Text_description = *BLANK;

 EXECUTE FUNCTION(Delete Tattoo Header Comm) TYPE(DLTOBJ) FILE(PKA4CPP)          AB1113203;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.THC_Comment_Line);
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg Tattoo Hdr Cmnt   CH) TYPE(CHGOBJ) FILE(PKA4CPP)           AB1113202;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.THC_Comment_Line);
 PARAMETER(PAR.Text_description);
 PARAMETER(DB1.THC_Comment_Type);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


ENDIF;

// Call program Prc Pay w/Hist Avgs   XF.
CALL PROGRAM(Prc Pay w/Hist Avgs   XF) ('PKTYXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TH_PHA_Add_Type);
PARAMETER(DTL.TH_PHA_Average_Type);
PARAMETER(DTL.TH_PHA_Add_Reason);
PARAMETER(DTL.Adj_Actual_Yield_USR);
PARAMETER(DTL.Lean_percent_USR);
PARAMETER(DTL.Backfat_USR);
PARAMETER(DTL.Loin_Eye_USR);
PARAMETER(DTL.Light_Reflectance_USR);
PARAMETER(DTL.CM_Lean_Prem_Carc_CWT_USR);
PARAMETER(DTL.PH_GA_Avg_Srt_Disc_Fctr);

