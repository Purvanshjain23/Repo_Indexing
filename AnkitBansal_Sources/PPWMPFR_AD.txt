// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPWMPFR
// ?Date: 14.08.2025 Time: 12:06:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

CASE;

// IF DB1.Item Type Code is Not Finished Good
IF DB1.Item_Type_Code <> 'FG';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: On print of first page format

MOVE *ALL (To: 1PG From: PAR);

// 1PG.Condition Name USR = Condition name of 1PG.Update Unit Weight    USR
X1PG_Condition_Name_USR = RTVCND(X1PG_Update_Unit_Weight_USR);

//?Company Name
CASE;

// IF 1PG.Company Number is greater than zero
IF X1PG_Company_Number > *ZERO;

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(X1PG_Company_Name_DRV);
PARAMETER(X1PG_Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Company Name
// IF *OTHERWISE
IF *OTHERWISE;

// 1PG.Company Name DRV = CON.*ALL
X1PG_Company_Name_DRV = *ALL;

ENDIF;

//?USER: On print of detail format

CASE;

// IF CUR.Catch Weight Status is yes
IF CUR.Catch_Weight_Status = 'Y';

EXECUTE FUNCTION(Rtv Qty/Wgt Billed    RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1770972;
PARAMETER(CUR.Item_Code);
PARAMETER(PAR.To_Date_USR);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.From_Date_USR);
PARAMETER(PAR.To_Date_USR);
PARAMETER(CUR.Quantity_Billed);
PARAMETER(CUR.Weight_Billed);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Actual Shipped Date LT PAR.From Date             USR
 IF DB1.Actual_Shipped_Date < PAR.From_Date_USR;

 QUIT;

 ENDIF;

 //?SEL:  Company Number
 CASE;

 // IF PAR.Company Number is greater than zero
 IF PAR.Company_Number > *ZERO;

 CASE;

 // IF DB1.Company Number NE PAR.Company Number
 IF DB1.Company_Number <> PAR.Company_Number;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDIF;

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // PAR.Quantity Billed = PAR.Quantity Billed + DB1.Quantity Billed
 PAR.Quantity_Billed = PAR.Quantity_Billed + DB1.Quantity_Billed;

 // PAR.Weight Billed = PAR.Weight Billed + DB1.Weight Billed
 PAR.Weight_Billed = PAR.Weight_Billed + DB1.Weight_Billed;

 ENDIF;

}


CASE;

// IF CUR.Quantity Billed is Greater than zero
IF CUR.Quantity_Billed > *ZERO;

// Average Net Sales
CUR.Average_Net_Sales = CUR.Weight_Billed / CUR.Quantity_Billed 'H';

// CUR.Weight 9.2 USR = CUR.Average Net Sales
CUR.Weight_9_2_USR = CUR.Average_Net_Sales;

// IF *OTHERWISE
IF *OTHERWISE;

//?Calc new unit weight from curr unit weight(s)
EXECUTE FUNCTION(RTV Unit Weight Avg   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1771394;
PARAMETER(PAR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Weight_9_2_USR);
{
 //?USER: Initialize routine

 //?JRB 05/29/07 Changed from hard coded Co Num to chk Plant Co Sts
 // PAR.Unit Weight = CON.*ZERO
 PAR.Unit_Weight = *ZERO;

 // WRK.Unit Weight = CON.*ZERO
 WRK.Unit_Weight = *ZERO;

 // WRK.Count USR = CON.*ZERO
 WRK.Count_USR = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.Plant_Company_Sts);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If par.company is 000, then avg both company's unit wgt
 CASE;

 // IF PAR.Company Number is Equal to zero
 IF PAR.Company_Number = *ZERO;

 CASE;

 // IF LCL.Plant Company Sts is Plant Company
 IF LCL.Plant_Company_Sts = 'P';

 // WRK.Unit Weight = WRK.Unit Weight + DB1.Unit Weight
 WRK.Unit_Weight = WRK.Unit_Weight + DB1.Unit_Weight;

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 ENDIF;

 ENDIF;

 //?If par isnt 000, use that company's unit wgt
 CASE;

 // IF PAR.Company Number is not equal to zero
 IF PAR.Company_Number <> *ZERO;

 // AND DB1.Company Number EQ PAR.Company Number
 AND DB1.Company_Number = PAR.Company_Number;

 // PAR.Unit Weight = DB1.Unit Weight
 PAR.Unit_Weight = DB1.Unit_Weight;

 QUIT;

 ENDIF;

 //?USER: Exit processing

 CASE;

 // IF PAR.Company Number is Equal to zero
 IF PAR.Company_Number = *ZERO;

 CASE;

 // IF WRK.Count USR is GT 0
 IF WRK.Count_USR > *ZERO;

 // PAR.Unit Weight = WRK.Unit Weight / WRK.Count USR *Rounded
 PAR.Unit_Weight = WRK.Unit_Weight / WRK.Count_USR 'H';

 ENDIF;

 ENDIF;

}


ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Weight 9.2 USR = CUR.Unit Weight
CUR.Weight_9_2_USR = CUR.Unit_Weight;

ENDIF;

//?USER: Process after print of detail format

CASE;

// IF PAR.Update Unit Weight    USR is Yes
IF PAR.Update_Unit_Weight_USR = 'Y';

CASE;

// IF CUR.Weight 9.2 USR is NE Zero
IF CUR.Weight_9_2_USR <> *ZERO;

EXECUTE FUNCTION(Upd Std Cost Unit Wgt CH) TYPE(CHGOBJ) FILE(OMBYREP)           AC1770973;
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Weight_9_2_USR);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time_1);
 PARAMETER(DB1.User_Id_1);
 PARAMETER(DB1.Job_Name_1);
 PARAMETER(DB1.Job_Date_1);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 //?Always update both companies
 EXECUTE FUNCTION(Upd Std Cost Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1770974;
 PARAMETER(DB1.Item_Code);
 PARAMETER(PAR.Std_Costing_Unit_Weight);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Std Cost Unit Wgt CH) TYPE(CHGOBJ) FILE(CABZREP)           AC1770975;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Std_Costing_Unit_Weight);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


ENDIF;

ENDIF;

