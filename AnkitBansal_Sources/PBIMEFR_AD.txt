// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBIMEFR
// ?Date: 14.08.2025 Time: 03:48:08
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// WRK.USR Update Flag = CND.No
WRK.USR_Update_Flag = *BLANK;

//?USER: Initialize subfile header

//?First time calcs
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

MOVE *ALL (To: CTL From: PAR);

CASE;

// IF CTL.TPM Shipment Process Sts is Error
IF CTL.TPM_Shipment_Process_Sts = 2;

// CTL.Description 21A Usr = CON.Errors Only
CTL.Description_21A_Usr = 'Errors Only';

// IF CTL.TPM Shipment Process Sts is Not Processed
IF CTL.TPM_Shipment_Process_Sts = 0;

// CTL.Description 21A Usr = CON.Not Processed
CTL.Description_21A_Usr = 'Not Processed';

// IF CTL.TPM Shipment Process Sts is Processed
IF CTL.TPM_Shipment_Process_Sts = 1;

// CTL.Description 21A Usr = CON.Processed
CTL.Description_21A_Usr = 'Processed';

ENDIF;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?USER: Initialize subfile record (existing record)

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// WRK.Number 1.0 USR = PAR.TPM Shipment Process Sts
WRK.Number_1_0_USR = PAR.TPM_Shipment_Process_Sts;

//?Restrict to passed in Access Code
CASE;

// IF DB1.TPM Ship Access Code NE CTL.TPM Ship Access Code
IF DB1.TPM_Ship_Access_Code <> CTL.TPM_Ship_Access_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Process Status, if entered
CASE;

// IF CTL.TPM Shipment Process Sts is Error
IF CTL.TPM_Shipment_Process_Sts = 2;

// AND DB1.TPM Shipment Process Sts NE CTL.TPM Shipment Process Sts
AND DB1.TPM_Shipment_Process_Sts <> CTL.TPM_Shipment_Process_Sts;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Select Process Status, if entered
// IF CTL.TPM Shipment Process Sts is Processed
IF CTL.TPM_Shipment_Process_Sts = 1;

// AND DB1.TPM Shipment Process Sts NE CTL.TPM Shipment Process Sts
AND DB1.TPM_Shipment_Process_Sts <> CTL.TPM_Shipment_Process_Sts;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Select Process Status, if entered
// IF CTL.TPM Shipment Process Sts is Not Processed
IF CTL.TPM_Shipment_Process_Sts = 0;

// AND DB1.TPM Shipment Process Sts NE CTL.TPM Shipment Process Sts
AND DB1.TPM_Shipment_Process_Sts <> CTL.TPM_Shipment_Process_Sts;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Test date if entered
CASE;

// IF CTL.TPM Transaction Date is Entered
IF CTL.TPM_Transaction_Date <> *ZERO;

CASE;

// IF DB1.TPM Transaction Date NE CTL.TPM Transaction Date
IF DB1.TPM_Transaction_Date <> CTL.TPM_Transaction_Date;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Test time if entered
CASE;

// IF CTL.TPM Transaction Time is Entered
IF CTL.TPM_Transaction_Time <> *ZERO;

CASE;

// IF DB1.TPM Transaction Time NE CTL.TPM Transaction Time
IF DB1.TPM_Transaction_Time <> CTL.TPM_Transaction_Time;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Test sequence if entered
CASE;

// IF CTL.TPM Transaction Sequence is Entered
IF CTL.TPM_Transaction_Sequence <> *ZERO;

CASE;

// IF DB1.TPM Transaction Sequence NE CTL.TPM Transaction Sequence
IF DB1.TPM_Transaction_Sequence <> CTL.TPM_Transaction_Sequence;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Test Shipment Number if entered
CASE;

// IF CTL.TPM Shipment Number Code is Entered
IF CTL.TPM_Shipment_Number_Code <> *BLANK;

CASE;

// IF DB1.TPM Shipment Number Code NE CTL.TPM Shipment Number Code
IF DB1.TPM_Shipment_Number_Code <> CTL.TPM_Shipment_Number_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Test TPM Status if entered
CASE;

// IF CTL.TPM Status Code NE WRK.Blank 6 USR
IF CTL.TPM_Status_Code <> WRK.Blank_6_USR;

CASE;

// IF DB1.TPM Status Code NE CTL.TPM Status Code
IF DB1.TPM_Status_Code <> CTL.TPM_Status_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?CALC: Subfile control function fields

// CTL.Description 14A      USR = Condition name of CTL.TPM Ship Access Code
CTL.Description_14A_USR = RTVCND(CTL.TPM_Ship_Access_Code);

CASE;

// IF CTL.TPM Shipment Process Sts is Error
IF CTL.TPM_Shipment_Process_Sts = 2;

// CTL.Description 21A Usr = CON.Errors Only
CTL.Description_21A_Usr = 'Errors Only';

// IF CTL.TPM Shipment Process Sts is Not Processed
IF CTL.TPM_Shipment_Process_Sts = 0;

// CTL.Description 21A Usr = CON.Not Processed
CTL.Description_21A_Usr = 'Not Processed';

// IF CTL.TPM Shipment Process Sts is Processed
IF CTL.TPM_Shipment_Process_Sts = 1;

// CTL.Description 21A Usr = CON.Processed
CTL.Description_21A_Usr = 'Processed';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Description 21A Usr = CON.*All
CTL.Description_21A_Usr = *All;

ENDIF;

//?USER: Validate subfile record fields

//?* Enter reason if 2=Error
CASE;

// IF RCD.TPM Shipment Error Reason is Not Entered
IF RCD.TPM_Shipment_Error_Reason = *BLANK;

// AND RCD.TPM Shipment Process Sts is Error
AND RCD.TPM_Shipment_Process_Sts = 2;

// Send error message - 'Error reason is required with Process Status = 2'
ERROR(USR4662);
MSGPARM(RCD.TPM_Shipment_Error_Reason);

ENDIF;

//?* Process Status description
CASE;

// IF CTL.TPM Shipment Process Sts is Error
IF CTL.TPM_Shipment_Process_Sts = 2;

// CTL.Description 21A Usr = CON.Errors Only
CTL.Description_21A_Usr = 'Errors Only';

//?* Process Status description
// IF CTL.TPM Shipment Process Sts is Not Processed
IF CTL.TPM_Shipment_Process_Sts = 0;

// CTL.Description 21A Usr = CON.Not Processed
CTL.Description_21A_Usr = 'Not Processed';

//?* Process Status description
// IF CTL.TPM Shipment Process Sts is Processed
IF CTL.TPM_Shipment_Process_Sts = 1;

// CTL.Description 21A Usr = CON.Processed
CTL.Description_21A_Usr = 'Processed';

ENDIF;

//?* Reload if Date filter is changed
CASE;

// IF CTL.TPM Transaction Date is Entered
IF CTL.TPM_Transaction_Date <> *ZERO;

CASE;

// IF RCD.TPM Transaction Date NE CTL.TPM Transaction Date
IF RCD.TPM_Transaction_Date <> CTL.TPM_Transaction_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?* Reload if Time filter is changed
CASE;

// IF CTL.TPM Transaction Time is Entered
IF CTL.TPM_Transaction_Time <> *ZERO;

CASE;

// IF RCD.TPM Transaction Time NE CTL.TPM Transaction Time
IF RCD.TPM_Transaction_Time <> CTL.TPM_Transaction_Time;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?* Reload if Sequence filter is changed
CASE;

// IF CTL.TPM Transaction Sequence is Entered
IF CTL.TPM_Transaction_Sequence <> *ZERO;

CASE;

// IF RCD.TPM Transaction Sequence NE CTL.TPM Transaction Sequence
IF RCD.TPM_Transaction_Sequence <> CTL.TPM_Transaction_Sequence;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?* Reload if Shipment Number filter is changed
CASE;

// IF CTL.TPM Shipment Number Code is Entered
IF CTL.TPM_Shipment_Number_Code <> *BLANK;

CASE;

// IF RCD.TPM Shipment Number Code NE CTL.TPM Shipment Number Code
IF RCD.TPM_Shipment_Number_Code <> CTL.TPM_Shipment_Number_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?* Reload if Status Code filter is changed
CASE;

// IF CTL.TPM Status Code NE WRK.Blank for 3          USR
IF CTL.TPM_Status_Code <> WRK.Blank_for_3_USR;

CASE;

// IF RCD.TPM Status Code NE CTL.TPM Status Code
IF RCD.TPM_Status_Code <> CTL.TPM_Status_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?7=Unlock OMS Load
CASE;

// IF RCD.*SFLSEL is *Unlock Load
IF RCD.*SFLSEL = '7'/'7';

//?* Convert 20 char Shipment# to 7.0 Load ID
// WRK.Text USR 20 = RCD.TPM Shipment Number Code
WRK.Text_USR_20 = RCD.TPM_Shipment_Number_Code;

// Execute function CLC Rmv Trail blnks-20 US.
EXECUTE FUNCTION(CLC Rmv Trail blnks-20 US) TYPE(EXCUSRSRC) ('PBJXUFR');
PARAMETER(WRK.Text_USR_20);
PARAMETER(WRK.USR_Work_Field_7A);
{
 ** INPUT FIELD MUST BE 20 CHAR TPM SHIPMENT NUMBER FIELD
 ** OUTPUT FIELD MUST BE 7.0 LOAD ID WORK FIELD
 ** BOTH FIELDS MUST BE RECEIVED IN WORK CONTEXT
 ** START AT THE END OF THE SHIPMENT NUMBER AND WORK FORWARD
 ** TO FIND THE FIRST NON-BLANK NUMBER AND MOVE THAT TO THE
 ** LOAD ID FIELD, ALSO STARTING AT THE END.
 E                    ARR1       20  1               ARRAY 1
 E                    ARR2        7  1               ARRAY 2
 C                     MOVEAWUSLTX    ARR1             LOAD SHIP# ARRY
 C                     Z-ADD20        X       20       SET ARR1 CNTR
 C                     Z-ADD7         Y       20       SET ARR2 CNTR
 C*
 C           X         DOWGT0
 C           ARR1,X    IFEQ ' '
 C                     SUB  1         X
 C                     ELSE
 C           Y         IFGT 0
 C                     MOVE ARR1,X    ARR2,Y
 C                     SUB  1         Y
 C                     SUB  1         X
 C                     ENDIF
 C                     ENDIF
 C*
 C                     ENDDO
 C*
 C                     MOVEAARR2      WUE2TX           LOAD OUTPUT
}


// WRK.Load ID = CVTVAR(WRK.USR Work Field 7A)
WRK.Load_ID = CVTVAR(WRK.USR_Work_Field_7A);

EXECUTE FUNCTION(RTV Load Info for TPM  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2076137;
PARAMETER(WRK.Load_ID);
PARAMETER(WRK.Company_Number);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.LTL_Flag);
PARAMETER(WRK.Load_Status);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Seal_1);
PARAMETER(NLL.Seal_2);
PARAMETER(NLL.Seal_3);
PARAMETER(NLL.Seal_4);
PARAMETER(NLL.Seal_2_Unused);
PARAMETER(NLL.Total_Load_Order_Weight);
PARAMETER(NLL.Flat_Amount);
PARAMETER(NLL.Allocate_Pounds_Miles);
PARAMETER(NLL.Total_Stops);
PARAMETER(NLL.Trailer_Id);
PARAMETER(NLL.Transloader_Carrier_Code);
PARAMETER(NLL.BOL_Time);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Truck_Size);
PARAMETER(NLL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.Ship_Status);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Number_Pallets_Received);
PARAMETER(NLL.Number_Pallets_Loaded);
PARAMETER(NLL.Load_Carrier_Pay_Amt);
PARAMETER(NLL.Estimated_Arrival_Time);
PARAMETER(NLL.Actual_Arrival_Date);
PARAMETER(NLL.Actual_Arrival_Time);
PARAMETER(NLL.Trailer_IN_Weight);
PARAMETER(NLL.Trailer_OUT_Weight);
PARAMETER(NLL.Actual_Departure_Date);
PARAMETER(NLL.Departure_Time);
PARAMETER(NLL.Schedule_Sequence_Number);
PARAMETER(NLL.Product_Temperature);
PARAMETER(NLL.Number_Spacers_Loaded);
PARAMETER(NLL.Car_Veh_Initials);
PARAMETER(NLL.Total_Load_Miles);
PARAMETER(NLL.Recorder_ID);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Ship_From_Warehouse);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Gross_Weight);
PARAMETER(NLL.Carrier_Broker);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Actual_Ship_Date);
PARAMETER(NLL.On_Time_Y_N);
PARAMETER(NLL.Truck_Ready_Date);
PARAMETER(NLL.Truck_Ready_Time);
PARAMETER(NLL.Spotted_Date);
PARAMETER(NLL.Spotted_Time);
PARAMETER(NLL.Load_Finished_Date);
PARAMETER(NLL.Load_Finished_Time);
PARAMETER(NLL.BOL_Complete_Date);
PARAMETER(NLL.BOL_Complete_Time);
PARAMETER(NLL.BOL_Received_Date);
PARAMETER(NLL.BOL_Received_Time);
PARAMETER(NLL.Truck_Departure_Date);
PARAMETER(NLL.Truck_Departure_Time);
PARAMETER(NLL.Adjusted_Departure_Date);
PARAMETER(NLL.Adjusted_Departure_Time);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.Vessel_Name);
PARAMETER(NLL.Voyage);
PARAMETER(NLL.Sail_Date);
PARAMETER(NLL.Booking_Number);
PARAMETER(NLL.Discharge_Port);
PARAMETER(NLL.Arrival_Date);
PARAMETER(NLL.Container_Number);
PARAMETER(NLL.Date_In);
PARAMETER(NLL.Time_In);
PARAMETER(NLL.Date_Out);
PARAMETER(NLL.Time_Out);
PARAMETER(NLL.Load_Total_Freight);
PARAMETER(NLL.Scheduled_Delivery_Date);
PARAMETER(NLL.Scheduled_Delivery_Time);
PARAMETER(NLL.LH_Unused_Sts);
PARAMETER(NLL.LH_Carrier_Payment_Sts);
PARAMETER(NLL.Bring_Back_Miles);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Load_Acceptance_Flag);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.On_Yard_Date);
PARAMETER(NLL.On_Yard_Time);
PARAMETER(NLL.Deadline_Departure_Date);
PARAMETER(NLL.Deadline_Departure_Time);
PARAMETER(NLL.Load_Held_Over);
PARAMETER(NLL.Load_Held_Over_Reason);
PARAMETER(NLL.Load_Held_Over_Rsn_Cmt);
PARAMETER(NLL.Ocean_BOL_Number);
PARAMETER(NLL.Express_Mail_Number);
PARAMETER(NLL.Express_Mail_Date);
PARAMETER(NLL.Load_Shag_Flag);
PARAMETER(NLL.Load_Wash_Flag);
PARAMETER(NLL.Product_Complete_Date);
PARAMETER(NLL.Product_Complete_Time);
PARAMETER(NLL.Pallets_Loaded);
PARAMETER(NLL.Avg_Pallet_Tare);
PARAMETER(NLL.Tot_Pallet_Tare);
PARAMETER(NLL.Load_Confirmed_Sts);
PARAMETER(NLL.Load_Confirmed_Contact);
PARAMETER(NLL.Load_Confirmation_Time);
PARAMETER(NLL.Load_Door_1);
PARAMETER(NLL.Override_Total_Load_Miles);
PARAMETER(NLL.Load_Door_2);
PARAMETER(NLL.Partial_Load);
PARAMETER(NLL.Load_Confirmation_Fax_Sts);
PARAMETER(NLL.Export_Load_USDA_OK);
PARAMETER(NLL.Late_Delivery_Email_Flag);
PARAMETER(NLL.Load_Actual_Freight);
PARAMETER(NLL.Hide_on_WW_Load_Sts);
PARAMETER(NLL.Late_Billing_Email_Flag);
PARAMETER(NLL.Shipping_Temp_C_F_txt);
PARAMETER(NLL.LH_Held_Over_Rsn_Cmt);
PARAMETER(NLL.Multi_Company_Load);
PARAMETER(NLL.Fax_Sent_to_SSI_Carrier);
PARAMETER(NLL.Schedule_Pos_Load_Grade);
PARAMETER(NLL.LH_Power_Only_Load);
PARAMETER(NLL.MG_Created_Load);
PARAMETER(NLL.LH_Unused_Sts_5);
PARAMETER(NLL.Load_U_M);
PARAMETER(NLL.TPM_Shipment_Status);
PARAMETER(NLL.LH_Unused_Sts_8);
PARAMETER(NLL.LH_On_Time_Reason_Code);
PARAMETER(NLL.LH_Held_Over_Reason);
PARAMETER(NLL.LH_Carrier_Paid_Dte);
PARAMETER(NLL.LH_Carrier_Paid_Time);
PARAMETER(NLL.LH_Last_Combo_Prod_Date);
PARAMETER(NLL.LH_Last_Combo_Prod_Time);
PARAMETER(NLL.LPT_Load_Plan_Start_Dt);
PARAMETER(NLL.LPT_Load_Plan_Start_Tm);
PARAMETER(RCD.TPM_Planned_Ship_Date);
PARAMETER(NLL.LH_Unused_Time_4);
PARAMETER(NLL.LH_Unused_Date_5);
PARAMETER(NLL.LH_Unused_Time_5);
PARAMETER(NLL.LH_Unused_Date_6);
PARAMETER(NLL.LH_Unused_Time_6);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(LCL.Status_Y_or_N);
{
 //?USER: Processing if Data record not found

 // PAR.Status - Y or N = CND.no
 PAR.Status_Y_or_N = 'N';

 //?USER: Process Data record

 // PAR.Status - Y or N = CND.yes
 PAR.Status_Y_or_N = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(EDT Unlock Load Edits  IF) TYPE(EXCINTFUN)                     AC1419437;
PARAMETER(WRK.Load_ID);
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Load_Status);
PARAMETER(RCD.*SFLSEL);
PARAMETER(WRK.Error_Status);
PARAMETER('F');
PARAMETER('N');
{
 //?Execute internal function

 //?assume will have error
 // PAR.Error Status = CND.yes
 PAR.Error_Status = 'Y';

 EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
 PARAMETER('LOCKLD');
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Access_Denied_Y_N);
 {
  //?Execute internal function

  // PAR.User Profile Name = JOB.*USER
  PAR.User_Profile_Name = JOB.*USER;

  EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(WRK.Access_Denied_Y_N);
  {
   //?Execute internal function

   //?RMC 5/11/09 Rtv default company from user profile --
   //?  Override user code model company if it exists
   EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(LCL.Company_Number);
   PARAMETER(PAR.User_Code_Model);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?User Profile Record Not found
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   //?User Profile Record Not found
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   ENDIF;

   CASE;

   // IF PAR.User Code Model is equal to blank
   IF PAR.User_Code_Model = *BLANK;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
   PARAMETER(PAR.User_Code_Model);
   PARAMETER(PAR.Application_Code);
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Warehouse_Code);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   // PAR.Warehouse Code = LCL.Warehouse Code
   PAR.Warehouse_Code = LCL.Warehouse_Code;

   //?Return code when not normal for Application Profile
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // PAR.Access Denied (Y/N) = CND.no
   PAR.Access_Denied_Y_N = 'N';

   //?Return code when not normal for Application Profile
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Access Denied (Y/N) = CND.yes
   PAR.Access_Denied_Y_N = 'Y';

   ENDIF;

   CASE;

   // IF LCL.Company Number is greater than zero
   IF LCL.Company_Number > *ZERO;

   // PAR.Company Number = LCL.Company Number
   PAR.Company_Number = LCL.Company_Number;

   CASE;

   // IF LCL.Warehouse Code is Not Blanks
   IF LCL.Warehouse_Code <> *BLANK;

   EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(LCL.Shipping_Company);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    CASE;

    // IF DB1.Production Warehouse Code is Warehouse Code not Blank
    IF DB1.Production_Warehouse_Code <> *BLANK;

    // PAR.Warehouse Code = DB1.Production Warehouse Code
    PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

    QUIT;

    ENDIF;

    ENDIF;

   }

   ENDIF;

   ENDIF;

  }

  // PAR.Company Number = WRK.Company Number
  PAR.Company_Number = WRK.Company_Number;

  // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
  PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

  //?If access denied is no, rtv co. name
  CASE;

  // IF WRK.Access Denied (Y/N) is no
  IF WRK.Access_Denied_Y_N = 'N';

  EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
  PARAMETER(WRK.Company_Number);
  PARAMETER(PAR.Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 //?check the entry control field too.  4/28/05 so christa can do.
 EXECUTE FUNCTION(Rtv Unlock Load Authr RT) TYPE(RTVOBJ) FILE(OPC0REP)           AC1736002;
 PARAMETER(JOB.*USER);
 PARAMETER('O/P');
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Unlock_Load_Authority);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Access Denied (Y/N) is yes
 IF PAR.Access_Denied_Y_N = 'Y';

 // AND WRK.Unlock Load Authority is Blank
 AND WRK.Unlock_Load_Authority = *BLANK;

 // Send error message - 'User not allowed to  Lock/Unlock Loads.'
 ERROR(USR2468);

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
 CASE;

 // IF PAR.Block Order Flag is Block Order
 IF PAR.Block_Order_Flag = 'B';

 //?  (load contains a block order)
 // Send error message - 'Load &2 contains Block Orders--no update allowed.'
 ERROR(USR2441);
 MSGPARM(PAR.*SFLSEL);
 MSGPARM(PAR.Load_ID);

 //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 // Send error message - 'Load has been shipped can not unlock it'
 ERROR(USR1272);
 MSGPARM(PAR.Load_Status);

 //?If load has been shipped, can't unlock. RMC Chg for picked 5/31/06
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?**** Determine if Load has been picked, if yes do not allow unlock
 //?**** This function checks OP Order Events & AS Picked Acknowledgment
 CASE;

 // IF PAR.Allow Unlock if Picked St is No
 IF PAR.Allow_Unlock_if_Picked_St = 'N';

 //?Do this one if par is NO. We dont want an UNLOCK if there are XOx
 //?  and it isnt shipping doing it.
 // Call program RTV Load Order Picked  XF.
 CALL PROGRAM(RTV Load Order Picked  XF) ('PDQVXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Pick_Status_USR);

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(PFS Val Order Picked  RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1754282;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Pick_Status_USR);
 {
  //?USER: Processing if Data record not found

  // PAR.Pick Status USR = CND.Not Picked
  PAR.Pick_Status_USR = 'N';

  //?USER: Process Data record

  // PAR.Pick Status USR = CND.Picked
  PAR.Pick_Status_USR = 'Y';

  QUIT;

 }

 ENDIF;

 //?Allow if picked but not Close Order or Close Truck  5/31/06
 CASE;

 // IF WRK.Pick Status USR is Picked
 IF WRK.Pick_Status_USR = 'Y';

 CASE;

 // IF PAR.Allow Unlock if Picked St is No
 IF PAR.Allow_Unlock_if_Picked_St = 'N';

 // Send error message - 'Unlocking of Load is not allowed for a Load which has been picked.'
 ERROR(USR1999);
 MSGPARM(PAR.Load_Status);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Call program PFS Val Close Ord/Trk XF.
 CALL PROGRAM(PFS Val Close Ord/Trk XF) ('PPYIXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Status_Y_or_N);

 CASE;

 // IF WRK.Status - Y or N is yes
 IF WRK.Status_Y_or_N = 'Y';

 // Send error message - 'Unlock Load not allowed for Load with a Closed Order or Closed Truck.'
 ERROR(USR3629);
 MSGPARM(PAR.*SFLSEL);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Unlock Load Pending'
 MESSAGE(USR1274 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 ENDIF;

 ENDIF;

 //?Allow if picked but not Close Order or Close Truck  5/31/06
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Unlock Load Pending'
 MESSAGE(USR1274 *INFO);

 // PAR.Error Status = CND.no
 PAR.Error_Status = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// Send error message - 'Load cannot be unlocked'
ERROR(USR4664);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Update Flag = CND.Yes
WRK.USR_Update_Flag = 'Y';

EXECUTE FUNCTION(UPD Unlock Load Update IF) TYPE(EXCINTFUN)                     AC1454814;
PARAMETER(WRK.Load_ID);
PARAMETER(WRK.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(CHG Ld Sts,Rated Frts  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1371002;
 PARAMETER(PAR.Load_ID);
 PARAMETER('U');
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 EXECUTE FUNCTION(EDT Unlock Load        IF) TYPE(EXCINTFUN)                     AC1419468;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
  PARAMETER('PLTFLRSYS');
  PARAMETER(LCL.Plant_Floor_System_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?Notify Accusort if locked load
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program DEL AS Order Hdr/Dtl   XF.
  CALL PROGRAM(DEL AS Order Hdr/Dtl   XF) ('PDQ0XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Unlock Load/Order XF.
  CALL PROGRAM(PFS Unlock Load/Order XF) ('PPNQXFR');
  PARAMETER(PAR.Load_ID);

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 09/23/2011 RMC E1607  if load had a whs with edi wso interchange, then
  //?   delete it if Unproc, else change it to "D"elete/and reprocess
  // Call program Exc ChgDel EDI f/UnlckXF.
  CALL PROGRAM(Exc ChgDel EDI f/UnlckXF) ('PBAEXFR');
  PARAMETER(PAR.Load_ID);

 }

 EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1399763;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
  PARAMETER(DB1.Miles_to_next_stop);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1399729;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Order_Number);
  {
   //?USER: Initialize routine

   //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
   //?                                    to remove Company RST or Pos
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

   //?05/13/04 slm Multi-Company - Order Header lv remove co must use db1
   //?                              was using the par replace with db1
   EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Weight_Total);
   PARAMETER(*ZERO);
   {
    //?USER: Initialize routine

    //?par.@rated freight is the sum of all the detail rated frt, for adjusting
    // PAR.@Rated Freight = CON.*ZERO
    PAR.@Rated_Freight = *ZERO;

    //?par.usr process status is used to indicate if there are detail present
    // PAR.USR Process status = CND.no
    PAR.USR_Process_status = 'N';

    //?USER: Process Data record

    CASE;

    // IF DB1.Detail Line Status is Cancelled
    IF DB1.Detail_Line_Status = 'X';

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.USR Process status = CND.yes
    PAR.USR_Process_status = 'Y';

    CASE;

    // IF PAR.Order Weight Total is Equal to zero
    IF PAR.Order_Weight_Total = *ZERO;

    // OR PAR.Total Rated Freight is Zero
    OR PAR.Total_Rated_Freight = *ZERO;

    // PAR.Rated Freight = CON.*ZERO
    PAR.Rated_Freight = *ZERO;

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Detail Line Status is Confirmed & Complete
    IF DB1.Detail_Line_Status = 'C'/'R';

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
    * PAR.Total_Rated_Freight 'H';

    // IF *OTHERWISE
    IF *OTHERWISE;

    // Synon (17,9) work field =       * Compute Dtl Rated Freight
    PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
    / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

    ENDIF;

    // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
    PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

    ENDIF;

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Sequence_Number);
    PARAMETER(DB1.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
    PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

    // PAR.Order Sequence Number = DB1.Order Sequence Number
    PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

    // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
    PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

    ENDIF;

    //?USER: Exit processing

    //?Adjust totals
    CASE;

    // IF PAR.@Rated Freight NE PAR.Total Rated Freight
    IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

    // AND PAR.USR Process status is yes
    AND PAR.USR_Process_status = 'Y';

    // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
    WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

    // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
    PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

    //?Update last detail line processed
    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Order_Sequence_Number);
    PARAMETER(PAR.Order_Secondary_Line_Seq);
    PARAMETER(PAR.Rated_Freight);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    ENDIF;

   }

  }

 }

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

}


// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(WRK.Load_ID);
PARAMETER(*ZERO);
PARAMETER('UNLOCK');
PARAMETER('TRF');
PARAMETER('L');
PARAMETER('U');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(*BLANK);
PARAMETER(WRK.Company_Number);
PARAMETER(*ZERO);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(CHG TPM Ship Header    CO) TYPE(CHGOBJ) FILE(PBAZREP)          AC2065322;
PARAMETER(RCD.TPM_Transaction_Date);
PARAMETER(RCD.TPM_Transaction_Time);
PARAMETER(RCD.TPM_Transaction_Sequence);
PARAMETER(RCD.TPM_Ship_Access_Code);
PARAMETER(RCD.TPM_Shipment_Number_Code);
PARAMETER(RCD.TPM_Status_Code);
PARAMETER(RCD.TPM_Quantity);
PARAMETER(RCD.TPM_Weight);
PARAMETER(RCD.TPM_Actual_Ship_Date);
PARAMETER(*MISSING);
PARAMETER(RCD.TPM_Total_Load_Miles);
PARAMETER(RCD.TPM_Cube);
PARAMETER(RCD.TPM_Cube_UOM);
PARAMETER(RCD.TPM_Weight_UOM);
PARAMETER(RCD.TPM_Quantity_UOM);
PARAMETER(RCD.TPM_Length_UOM);
PARAMETER(RCD.TPM_Distance_UOM);
PARAMETER(RCD.TPM_Condition_Code_1);
PARAMETER(RCD.TPM_Condition_Quantity_1);
PARAMETER(RCD.TPM_Condition_Code_2);
PARAMETER(RCD.TPM_Condition_Quantity_2);
PARAMETER(RCD.TPM_Condition_Code_3);
PARAMETER(RCD.TPM_Condition_Quantity_3);
PARAMETER(RCD.TPM_Condition_Code_4);
PARAMETER(RCD.TPM_Condition_Quantity_4);
PARAMETER(RCD.TPM_Condition_Code_5);
PARAMETER(RCD.TPM_Condition_Quantity_5);
PARAMETER(RCD.TPM_Route_Code);
PARAMETER(RCD.TPM_Service);
PARAMETER(RCD.TPM_Equipment_Code);
PARAMETER(RCD.TPM_Carrier_SCAC);
PARAMETER(RCD.TPM_Number_of_Cars);
PARAMETER(RCD.TPM_Equipment_Max_Weight);
PARAMETER(RCD.TPM_Equipment_Max_Cube);
PARAMETER(RCD.TPM_Equipment_Max_Qty);
PARAMETER(RCD.TPM_Equipment_Max_Wgt_UOM);
PARAMETER(RCD.TPM_Equipment_Max_CubeUOM);
PARAMETER(RCD.TPM_Equipment_Max_Qty_UOM);
PARAMETER(RCD.TPM_BOL_Number);
PARAMETER(RCD.TPM_Carrier_Freight_Cost);
PARAMETER(RCD.TPM_Length);
PARAMETER(RCD.TPM_Number_of_Pallets);
PARAMETER(RCD.TPM_Shipment_Process_Sts);
PARAMETER(RCD.TPM_Shipment_Error_Reason);

//?USER: Extra processing after DBF update

CASE;

// IF WRK.USR Update Flag is Yes
IF WRK.USR_Update_Flag = 'Y';

// WRK.USR Update Flag = CND.No
WRK.USR_Update_Flag = *BLANK;

// Send information message - 'Load has been unlocked'
MESSAGE(USR4663 *INFO);

ENDIF;

