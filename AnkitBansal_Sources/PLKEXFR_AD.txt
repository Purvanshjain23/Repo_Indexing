// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLKEXFR
// ?Date: 14.08.2025 Time: 02:54:32
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modificaitons and Comments
DO;

//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

EXECUTE FUNCTION(Prt Crc Sum (Hld Ovr) IF) TYPE(EXCINTFUN)                      AB1147033;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(LCL.TH_Kill_Date);
PARAMETER(PAR.TH_Dead_On_Arrival);
PARAMETER(PAR.TH_Head_Received);
PARAMETER(PAR.TH_Yard_Deads);
PARAMETER(PAR.TH_Head_Condemned);
PARAMETER(PAR.TH_Head_Killed);
PARAMETER(LCL.TH_Head_Adds);
PARAMETER(PAR.TH_Live_Wgt);
PARAMETER(LCL.TH_Adj_Live_Wgt);
PARAMETER(LCL.TH_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Live_Wgt);
PARAMETER(LCL.TH_Avg_Hot_Wgt);
PARAMETER(LCL.TH_Avg_Lean_Percent);
PARAMETER(LCL.TH_Avg_Loin_Eye_Depth);
PARAMETER(LCL.TH_Avg_Backfat);
PARAMETER(LCL.TH_Actual_Yield);
PARAMETER(LCL.TH_Adj_Actual_Yield);
PARAMETER(LCL.TH_CM_Base_Mkt_Price);
PARAMETER(LCL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(LCL.TH_CM_Sort_Discount_Amt);
PARAMETER(LCL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(LCL.TH_CM_Base_Carcass_Value);
PARAMETER(LCL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(LCL.TH_CM_Carcass_Gross_Amt);
PARAMETER(LCL.TH_Deduction_Amt);
PARAMETER(LCL.TH_Carcass_Net_Amt);
PARAMETER(LCL.TH_Additions_Amt);
PARAMETER(LCL.TH_Payment_Gross);
PARAMETER(PAR.Th_Payment_Net_Amt);
PARAMETER(LCL.TH_Fixed_Cost_Amount);
PARAMETER(LCL.TH_Shipped_Weight);
PARAMETER(LCL.TH_FFLI);
PARAMETER(LCL.TH_Head_Excluded);
PARAMETER(LCL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(LCL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(LCL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(LCL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(LCL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(LCL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(LCL.TH_CM_Gross_Live_CWT);
PARAMETER(LCL.TH_CM_Gross_Carc_CWT);
PARAMETER(LCL.TH_Head_Adjusted_LN);
PARAMETER(LCL.TH_PHA_Head_Adds);
PARAMETER(LCL.TH_Excluded_Gross_Value);
PARAMETER(LCL.TH_Excluded_Carc_Val);
PARAMETER(LCL.TH_Excluded_Premium);
PARAMETER(LCL.TH_Meat_Value_Factor_Amt);
PARAMETER(LCL.TH_Avg_Loin_Eye_2_dec);
PARAMETER(LCL.TH_Avg_Backfat_2_Dec);
PARAMETER(LCL.TH_Head_LFT);
PARAMETER(LCL.TH_Head_EUT_KOA);
PARAMETER(LCL.Print_Carcass_Analysis_Us);
PARAMETER(LCL.Status_3);
PARAMETER(LCL.CMP_Grading_Type);
{
 //?Execute internal function

 //?Modification History Created Str slm 061208
 DO;

 //?9/24/02 RMC Calc 2 dec backfat and loin eye
 //?050108 slm e00216 need additional fields on ho for meat
 //?061208 SLM E00144 LFT Head and Uat/Koa Head
 ENDDO;

 MOVE *ALL (To: PAR From: CON);

 EXECUTE FUNCTION(Prt Crc Sum (Hld Ovr) RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1147407;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Head_Adds);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Adj_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
 PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(PAR.TH_CM_Base_Carcass_Value);
 PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
 PARAMETER(PAR.TH_Deduction_Amt);
 PARAMETER(PAR.TH_Carcass_Net_Amt);
 PARAMETER(PAR.TH_Additions_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.Th_Payment_Net_Amt);
 PARAMETER(PAR.TH_Fixed_Cost_Amount);
 PARAMETER(PAR.TH_Head_Excluded);
 PARAMETER(PAR.TH_Head_Adjusted_LN);
 PARAMETER(PAR.TH_PHA_Head_Adds);
 PARAMETER(PAR.TH_Excluded_Gross_Value);
 PARAMETER(PAR.TH_Excluded_Carc_Val);
 PARAMETER(PAR.TH_Excluded_Premium);
 PARAMETER(PAR.TH_Meat_Value_Factor_Amt);
 PARAMETER(PAR.TH_Head_LFT);
 PARAMETER(PAR.TH_Head_EUT_KOA);
 PARAMETER(PAR.Lean_Wgt_USR);
 PARAMETER(PAR.Backfat_Wgt_USR);
 PARAMETER(PAR.Loin_Eye_Wgt_USR);
 PARAMETER(PAR.Print_Carcass_Analysis_Us);
 PARAMETER(PAR.Backfat_Wgt_USR_2);
 PARAMETER(PAR.Loin_Eye_Wgt_USR_2);
 PARAMETER(PAR.Status_3);
 PARAMETER(PAR.CMP_Grading_Type);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag Usr = CND.Yes
  WRK.First_Time_Flag_Usr = 'Y';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?061208 slm E00144 LFT and eut/koa
  //?050108 slm get TH Fixed Cost Amount
  //?               TH Meat Value Factor Amt
  //?First Kill Date
  CASE;

  // IF WRK.First Time Flag Usr is Yes
  IF WRK.First_Time_Flag_Usr = 'Y';

  // WRK.First Time Flag Usr = CND.No
  WRK.First_Time_Flag_Usr = 'N';

  ENDIF;

  // PAR.TH Kill Date = DB1.TH Kill Date
  PAR.TH_Kill_Date = DB1.TH_Kill_Date;

  // PAR.TH Dead On Arrival = PAR.TH Dead On Arrival + DB1.TH Dead On Arrival
  PAR.TH_Dead_On_Arrival = PAR.TH_Dead_On_Arrival + DB1.TH_Dead_On_Arrival;

  // PAR.TH Head LFT = PAR.TH Head LFT + DB1.TH Head LFT
  PAR.TH_Head_LFT = PAR.TH_Head_LFT + DB1.TH_Head_LFT;

  // PAR.TH Head EUT/KOA = PAR.TH Head EUT/KOA + DB1.TH Head EUT/KOA
  PAR.TH_Head_EUT_KOA = PAR.TH_Head_EUT_KOA + DB1.TH_Head_EUT_KOA;

  // PAR.TH Head Received = PAR.TH Head Received + DB1.TH Head Received
  PAR.TH_Head_Received = PAR.TH_Head_Received + DB1.TH_Head_Received;

  // PAR.TH Yard Deads = PAR.TH Yard Deads + DB1.TH Yard Deads
  PAR.TH_Yard_Deads = PAR.TH_Yard_Deads + DB1.TH_Yard_Deads;

  // PAR.TH Head Condemned = PAR.TH Head Condemned + DB1.TH Head Condemned
  PAR.TH_Head_Condemned = PAR.TH_Head_Condemned + DB1.TH_Head_Condemned;

  // PAR.TH Head Killed = PAR.TH Head Killed + DB1.TH Head Killed
  PAR.TH_Head_Killed = PAR.TH_Head_Killed + DB1.TH_Head_Killed;

  // PAR.TH Head Adds = PAR.TH Head Adds + DB1.TH Head Adds
  PAR.TH_Head_Adds = PAR.TH_Head_Adds + DB1.TH_Head_Adds;

  // PAR.TH Live Wgt = PAR.TH Live Wgt + DB1.TH Live Wgt
  PAR.TH_Live_Wgt = PAR.TH_Live_Wgt + DB1.TH_Live_Wgt;

  // PAR.TH Adj Live Wgt = PAR.TH Adj Live Wgt + DB1.TH Adj Live Wgt
  PAR.TH_Adj_Live_Wgt = PAR.TH_Adj_Live_Wgt + DB1.TH_Adj_Live_Wgt;

  // PAR.TH Hot Wgt = PAR.TH Hot Wgt + DB1.TH Hot Wgt
  PAR.TH_Hot_Wgt = PAR.TH_Hot_Wgt + DB1.TH_Hot_Wgt;

  // PAR.TH CM Base Mkt Price Amt = PAR.TH CM Base Mkt Price Amt + DB1.TH CM Base Mkt
  PAR.TH_CM_Base_Mkt_Price_Amt = PAR.TH_CM_Base_Mkt_Price_Amt
  + DB1.TH_CM_Base_Mkt_Price_Amt;

  //?5/29/03 new for sort loss print
  CASE;

  // IF PAR.Status 3 is Yes
  IF PAR.Status_3 = 'Y';

  // PAR.TH CM Sort Discount Amt = PAR.TH CM Sort Discount Amt + DB1.TH MPR Sort Loss
  PAR.TH_CM_Sort_Discount_Amt = PAR.TH_CM_Sort_Discount_Amt + DB1.TH_MPR_Sort_Loss;

  //?5/29/03 new for sort loss print
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH CM Sort Discount Amt = PAR.TH CM Sort Discount Amt + DB1.TH CM Sort Discount Amt
  PAR.TH_CM_Sort_Discount_Amt = PAR.TH_CM_Sort_Discount_Amt + DB1.TH_CM_Sort_Discount_Amt;

  ENDIF;

  // PAR.TH CM Yield Gain/Loss Amt = PAR.TH CM Yield Gain/Loss Amt + DB1.TH CM Yield
  PAR.TH_CM_Yield_Gain_Loss_Amt = PAR.TH_CM_Yield_Gain_Loss_Amt
  + DB1.TH_CM_Yield_Gain_Loss_Amt;

  CASE;

  // IF PAR.CMP Grading Type is Meat Value
  IF PAR.CMP_Grading_Type = 'M';

  // PAR.TH CM Base Carcass Value = PAR.TH CM Base Carcass Value + DB1.TH Fixed Cost Amount
  PAR.TH_CM_Base_Carcass_Value = PAR.TH_CM_Base_Carcass_Value + DB1.TH_Fixed_Cost_Amount;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH CM Base Carcass Value = PAR.TH CM Base Carcass Value + DB1.TH CM Base Car
  PAR.TH_CM_Base_Carcass_Value = PAR.TH_CM_Base_Carcass_Value
  + DB1.TH_CM_Base_Carcass_Value;

  ENDIF;

  // PAR.TH CM LN AddOn/Deduct Amt = PAR.TH CM LN AddOn/Deduct Amt + DB1.TH CM LN Add
  PAR.TH_CM_LN_AddOn_Deduct_Amt = PAR.TH_CM_LN_AddOn_Deduct_Amt
  + DB1.TH_CM_LN_AddOn_Deduct_Amt;

  // PAR.TH CM Carcass Gross Amt = PAR.TH CM Carcass Gross Amt + DB1.TH CM Carcass Gross Amt
  PAR.TH_CM_Carcass_Gross_Amt = PAR.TH_CM_Carcass_Gross_Amt + DB1.TH_CM_Carcass_Gross_Amt;

  // PAR.TH Carcass Net Amt = PAR.TH Carcass Net Amt + DB1.TH Carcass Net Amt
  PAR.TH_Carcass_Net_Amt = PAR.TH_Carcass_Net_Amt + DB1.TH_Carcass_Net_Amt;

  // PAR.TH Payment Gross = PAR.TH Payment Gross + DB1.TH Payment Gross
  PAR.TH_Payment_Gross = PAR.TH_Payment_Gross + DB1.TH_Payment_Gross;

  // PAR.Th Payment Net Amt = PAR.Th Payment Net Amt + DB1.Th Payment Net Amt
  PAR.Th_Payment_Net_Amt = PAR.Th_Payment_Net_Amt + DB1.Th_Payment_Net_Amt;

  // Wgt USR =       * Lean % * Wgt USR
  PAR.Lean_Wgt_USR = PAR.Lean_Wgt_USR + ( DB1.TH_Avg_Lean_Percent * DB1.TH_Hot_Wgt 'H' );

  // Wgt USR =       * Backfat * Wgt USR
  PAR.Backfat_Wgt_USR = PAR.Backfat_Wgt_USR + ( DB1.TH_Avg_Backfat * DB1.TH_Hot_Wgt 'H' );

  // Wgt USR =       * Loin-Eye * Wgt USR
  PAR.Loin_Eye_Wgt_USR = PAR.Loin_Eye_Wgt_USR + ( DB1.TH_Avg_Loin_Eye_Depth
  * DB1.TH_Hot_Wgt 'H' );

  // Wgt USR 2 =       * Backfat2 * Wgt USR
  PAR.Backfat_Wgt_USR_2 = PAR.Backfat_Wgt_USR_2 + ( DB1.TH_Avg_Backfat_2_Dec
  * DB1.TH_Hot_Wgt 'H' );

  // Wgt USR 2 =       * Loin-Eye2 * Wgt USR
  PAR.Loin_Eye_Wgt_USR_2 = PAR.Loin_Eye_Wgt_USR_2 + ( DB1.TH_Avg_Loin_Eye_2_dec
  * DB1.TH_Hot_Wgt 'H' );

  // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.TH Deduction Amt
  PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.TH_Deduction_Amt;

  // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.TH Additions Amt
  PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.TH_Additions_Amt;

  //?Analysis to Payments
  CASE;

  // IF PAR.Print Carcass Analysis Us is Yes
  IF PAR.Print_Carcass_Analysis_Us = 'Y';

  EXECUTE FUNCTION(Prt Crc Sum (Hld Ovr) RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1177503;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(WRK.TH_CA_Base_Mkt_Price_Amt);
  PARAMETER(WRK.TH_CA_Sort_Discount_Amt);
  PARAMETER(WRK.TH_CA_Yield_Gain_Loss_Amt);
  PARAMETER(WRK.TH_CA_Base_Carcass_Value);
  PARAMETER(WRK.TH_CA_Lean_Premium_Amt);
  PARAMETER(WRK.TH_CA_Carcass_Gross_Amt);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.TH CA Base Mkt Price Amt = PAR.TH CA Base Mkt Price Amt + WRK.TH CA Base Mkt
  PAR.TH_CA_Base_Mkt_Price_Amt = PAR.TH_CA_Base_Mkt_Price_Amt
  + WRK.TH_CA_Base_Mkt_Price_Amt;

  // PAR.TH CA Sort Discount Amt = PAR.TH CA Sort Discount Amt + WRK.TH CA Sort Disco
  PAR.TH_CA_Sort_Discount_Amt = PAR.TH_CA_Sort_Discount_Amt + WRK.TH_CA_Sort_Discount_Amt;

  // PAR.TH CA Yield Gain/Loss Amt = PAR.TH CA Yield Gain/Loss Amt + WRK.TH CA Yield
  PAR.TH_CA_Yield_Gain_Loss_Amt = PAR.TH_CA_Yield_Gain_Loss_Amt
  + WRK.TH_CA_Yield_Gain_Loss_Amt;

  // PAR.TH CA Base Carcass Value = PAR.TH CA Base Carcass Value + WRK.TH CA Base Car
  PAR.TH_CA_Base_Carcass_Value = PAR.TH_CA_Base_Carcass_Value
  + WRK.TH_CA_Base_Carcass_Value;

  // PAR.TH CA Lean Premium Amt = PAR.TH CA Lean Premium Amt + WRK.TH CA Lean Premium
  PAR.TH_CA_Lean_Premium_Amt = PAR.TH_CA_Lean_Premium_Amt + WRK.TH_CA_Lean_Premium_Amt;

  // PAR.TH CA Carcass Gross Amt = PAR.TH CA Carcass Gross Amt + WRK.TH CA Carcass Gr
  PAR.TH_CA_Carcass_Gross_Amt = PAR.TH_CA_Carcass_Gross_Amt + WRK.TH_CA_Carcass_Gross_Amt;

  ENDIF;

  //?PK0166 - New fields
  // PAR.TH Head Excluded = PAR.TH Head Excluded + DB1.TH Head Excluded
  PAR.TH_Head_Excluded = PAR.TH_Head_Excluded + DB1.TH_Head_Excluded;

  // PAR.TH Excluded Gross Value = PAR.TH Excluded Gross Value + DB1.TH Excluded Gross Value
  PAR.TH_Excluded_Gross_Value = PAR.TH_Excluded_Gross_Value + DB1.TH_Excluded_Gross_Value;

  // PAR.TH Excluded Carc Val = PAR.TH Excluded Carc Val + DB1.TH Excluded Carc Val
  PAR.TH_Excluded_Carc_Val = PAR.TH_Excluded_Carc_Val + DB1.TH_Excluded_Carc_Val;

  // PAR.TH Excluded Premium = PAR.TH Excluded Premium + DB1.TH Excluded Premium
  PAR.TH_Excluded_Premium = PAR.TH_Excluded_Premium + DB1.TH_Excluded_Premium;

  // PAR.TH Head Adjusted-LN% = PAR.TH Head Adjusted-LN% + DB1.TH Head Adjusted-LN%
  PAR.TH_Head_Adjusted_LN = PAR.TH_Head_Adjusted_LN + DB1.TH_Head_Adjusted_LN;

  // PAR.TH PHA Head Adds = PAR.TH PHA Head Adds + DB1.TH PHA Head Adds
  PAR.TH_PHA_Head_Adds = PAR.TH_PHA_Head_Adds + DB1.TH_PHA_Head_Adds;

  //?050108 slm get TH Fixed Cost Amount
  // PAR.TH Fixed Cost Amount = PAR.TH Fixed Cost Amount + DB1.TH Fixed Cost Amount
  PAR.TH_Fixed_Cost_Amount = PAR.TH_Fixed_Cost_Amount + DB1.TH_Fixed_Cost_Amount;

  // PAR.TH Meat Value Factor Amt = PAR.TH Meat Value Factor Amt + DB1.TH Meat Value Factor Amt
  PAR.TH_Meat_Value_Factor_Amt = PAR.TH_Meat_Value_Factor_Amt
  + DB1.TH_Meat_Value_Factor_Amt;

  //?USER: Exit processing

  //?Analysis to Payments
  CASE;

  // IF PAR.Print Carcass Analysis Us is Yes
  IF PAR.Print_Carcass_Analysis_Us = 'Y';

  // PAR.TH CM Base Mkt Price Amt = PAR.TH CA Base Mkt Price Amt
  PAR.TH_CM_Base_Mkt_Price_Amt = PAR.TH_CA_Base_Mkt_Price_Amt;

  // PAR.TH CM Sort Discount Amt = PAR.TH CA Sort Discount Amt
  PAR.TH_CM_Sort_Discount_Amt = PAR.TH_CA_Sort_Discount_Amt;

  // PAR.TH CM Yield Gain/Loss Amt = PAR.TH CA Yield Gain/Loss Amt
  PAR.TH_CM_Yield_Gain_Loss_Amt = PAR.TH_CA_Yield_Gain_Loss_Amt;

  // PAR.TH CM Base Carcass Value = PAR.TH CA Base Carcass Value
  PAR.TH_CM_Base_Carcass_Value = PAR.TH_CA_Base_Carcass_Value;

  // PAR.TH CM LN AddOn/Deduct Amt = PAR.TH CA Lean Premium Amt
  PAR.TH_CM_LN_AddOn_Deduct_Amt = PAR.TH_CA_Lean_Premium_Amt;

  // PAR.TH CM Carcass Gross Amt = PAR.TH CA Carcass Gross Amt
  PAR.TH_CM_Carcass_Gross_Amt = PAR.TH_CA_Carcass_Gross_Amt;

  ENDIF;

 }

 //?Calculate Live /CWT and Carc /CWT
 CASE;

 // IF WRK.#Sequence Block is NULL
 IF WRK.#Sequence_Block = *BLANK;

 //?Calculate Carc/CWT if Par.Th Hot Wt is n= 0
 CASE;

 // IF PAR.TH Hot Wgt NE WRK.Zero USR
 IF PAR.TH_Hot_Wgt <> WRK.Zero_USR;

 // TH CM Bse Mkt Carc /CWT
 PAR.TH_CM_Bse_Mkt_Carc_CWT = PAR.TH_CM_Base_Mkt_Price_Amt / ( PAR.TH_Hot_Wgt / 100 'H' )
 'H';

 // TH CM Srt Dsc Carc /CWT
 PAR.TH_CM_Srt_Dsc_Carc_CWT = PAR.TH_CM_Sort_Discount_Amt / ( PAR.TH_Hot_Wgt / 100 'H' )
 'H';

 // TH CM Crc Val Carc /CWT
 WRK.TH_CM_Crc_Val_Carc_CWT = PAR.TH_CM_Base_Carcass_Value / ( PAR.TH_Hot_Wgt / 100 'H' )
 'H';

 // PAR.TH CM Crc Val Carc /CWT = WRK.TH CM Crc Val Carc /CWT
 PAR.TH_CM_Crc_Val_Carc_CWT = WRK.TH_CM_Crc_Val_Carc_CWT;

 // TH CM Lean Prem Carc /CWT
 PAR.TH_CM_Lean_Prem_Carc_CWT = PAR.TH_CM_LN_AddOn_Deduct_Amt / ( PAR.TH_Hot_Wgt / 100
 'H' ) 'H';

 // TH CM Gross Carc /CWT
 PAR.TH_CM_Gross_Carc_CWT = PAR.TH_CM_Carcass_Gross_Amt / ( PAR.TH_Hot_Wgt / 100 'H' )
 'H';

 //?Calculate Carc/CWT if Par.Th Hot Wt is n= 0
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH CM Bse Mkt Carc /CWT = CON.*ZERO
 PAR.TH_CM_Bse_Mkt_Carc_CWT = *ZERO;

 // PAR.TH CM Srt Dsc Carc /CWT = CON.*ZERO
 PAR.TH_CM_Srt_Dsc_Carc_CWT = *ZERO;

 // PAR.TH CM Yld G/L Carc /CWT = CON.*ZERO
 PAR.TH_CM_Yld_G_L_Carc_CWT = *ZERO;

 // PAR.TH CM Crc Val Carc /CWT = CON.*ZERO
 PAR.TH_CM_Crc_Val_Carc_CWT = *ZERO;

 // PAR.TH CM Lean Prem Carc /CWT = CON.*ZERO
 PAR.TH_CM_Lean_Prem_Carc_CWT = *ZERO;

 // PAR.TH CM Gross Carc /CWT = CON.*ZERO
 PAR.TH_CM_Gross_Carc_CWT = *ZERO;

 ENDIF;

 //?Calculate Live/CWT if Par.Th live wt is n= 0
 CASE;

 // IF PAR.TH Live Wgt NE WRK.Zero USR
 IF PAR.TH_Live_Wgt <> WRK.Zero_USR;

 // TH CM Bse Mkt Live /CWT
 PAR.TH_CM_Bse_Mkt_Live_CWT = PAR.TH_CM_Base_Mkt_Price_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
 'H';

 // TH CM Srt Dsc Live /CWT
 PAR.TH_CM_Srt_Dsc_Live_CWT = PAR.TH_CM_Sort_Discount_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
 'H';

 // TH CM Yld G/L live /CWT
 PAR.TH_CM_Yld_G_L_Live_CWT = PAR.TH_CM_Yield_Gain_Loss_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
 'H';

 // TH CM Crc Val Live /CWT
 PAR.TH_CM_Crc_Val_Live_CWT = PAR.TH_CM_Base_Carcass_Value / ( PAR.TH_Live_Wgt / 100 'H' )
 'H';

 // TH CM Lean Prem Live /CWT
 PAR.TH_CM_Lean_Prem_Live_CWT = PAR.TH_CM_LN_AddOn_Deduct_Amt / ( PAR.TH_Live_Wgt / 100
 'H' ) 'H';

 // TH CM Gross Live /CWT
 PAR.TH_CM_Gross_Live_CWT = PAR.TH_CM_Carcass_Gross_Amt / ( PAR.TH_Live_Wgt / 100 'H' )
 'H';

 //?Calculate Live/CWT if Par.Th live wt is n= 0
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH CM Bse Mkt Live /CWT = CON.*ZERO
 PAR.TH_CM_Bse_Mkt_Live_CWT = *ZERO;

 // PAR.TH CM Srt Dsc Live /CWT = CON.*ZERO
 PAR.TH_CM_Srt_Dsc_Live_CWT = *ZERO;

 // PAR.TH CM Yld G/L Live /CWT = CON.*ZERO
 PAR.TH_CM_Yld_G_L_Live_CWT = *ZERO;

 // PAR.TH CM Crc Val Live /CWT = CON.*ZERO
 PAR.TH_CM_Crc_Val_Live_CWT = *ZERO;

 // PAR.TH CM Lean Prem Live /CWT = CON.*ZERO
 PAR.TH_CM_Lean_Prem_Live_CWT = *ZERO;

 // PAR.TH CM Gross Live /CWT = CON.*ZERO
 PAR.TH_CM_Gross_Live_CWT = *ZERO;

 ENDIF;

 ENDIF;

 //?Calc Avg Live Wt
 CASE;

 // IF PAR.TH Head Received is *Zeros
 IF PAR.TH_Head_Received = *ZERO;

 // WRK.TH Avg Live Wgt = CON.*ZERO
 WRK.TH_Avg_Live_Wgt = *ZERO;

 //?Calc Avg Live Wt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Avg Live Wgt = PAR.TH Live Wgt / PAR.TH Head Received *
 WRK.TH_Avg_Live_Wgt = PAR.TH_Live_Wgt / PAR.TH_Head_Received;

 ENDIF;

 //?Calc Adj Live Weight
 CASE;

 // IF PAR.TH Head Received EQ PAR.TH Head Killed
 IF PAR.TH_Head_Received = PAR.TH_Head_Killed;

 // WRK.TH Adj Live Wgt = PAR.TH Live Wgt
 WRK.TH_Adj_Live_Wgt = PAR.TH_Live_Wgt;

 //?Calc Adj Live Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Adj Live Wgt = PAR.TH Head Killed * WRK.TH Avg Live Wgt *
 WRK.TH_Adj_Live_Wgt = PAR.TH_Head_Killed * WRK.TH_Avg_Live_Wgt;

 ENDIF;

 // PAR.TH Avg Live Wgt = WRK.TH Avg Live Wgt
 PAR.TH_Avg_Live_Wgt = WRK.TH_Avg_Live_Wgt;

 // PAR.TH Adj Live Wgt = WRK.TH Adj Live Wgt
 PAR.TH_Adj_Live_Wgt = WRK.TH_Adj_Live_Wgt;

 //?Calc Actual Yield %
 CASE;

 // IF PAR.TH Live Wgt NE WRK.Zero USR
 IF PAR.TH_Live_Wgt <> WRK.Zero_USR;

 // TH Actual Yield %
 PAR.TH_Actual_Yield = ( PAR.TH_Hot_Wgt / PAR.TH_Live_Wgt 'H' ) * 100 'H';

 //?Calc Actual Yield %
 // IF *OTHERWISE
 IF *OTHERWISE;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.TH_Actual_Yield = *ZERO;

 ENDIF;

 //?Calc Adj Actual Yield %
 CASE;

 // IF PAR.TH Adj Live Wgt NE WRK.Zero USR
 IF PAR.TH_Adj_Live_Wgt <> WRK.Zero_USR;

 // TH Adj Actual Yield %
 PAR.TH_Adj_Actual_Yield = ( PAR.TH_Hot_Wgt / PAR.TH_Adj_Live_Wgt 'H' ) * 100 'H';

 //?Calc Adj Actual Yield %
 // IF *OTHERWISE
 IF *OTHERWISE;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.TH_Adj_Actual_Yield = *ZERO;

 ENDIF;

 //?Calc Avg Hot Wt
 CASE;

 // IF PAR.TH Head Killed NE WRK.Zero USR
 IF PAR.TH_Head_Killed <> WRK.Zero_USR;

 // PAR.TH Avg Hot Wgt = PAR.TH Hot Wgt / PAR.TH Head Killed *Rounded
 PAR.TH_Avg_Hot_Wgt = PAR.TH_Hot_Wgt / PAR.TH_Head_Killed 'H';

 //?Calc Avg Hot Wt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Avg Hot Wgt = CON.*ZERO
 PAR.TH_Avg_Hot_Wgt = *ZERO;

 ENDIF;

 //?Calc Avg Lean %, Loin eye, & Backfat
 CASE;

 // IF PAR.TH Hot Wgt NE WRK.Zero USR
 IF PAR.TH_Hot_Wgt <> WRK.Zero_USR;

 // PAR.TH Avg Lean Percent = PAR.Lean % * Wgt USR / PAR.TH Hot Wgt *Rounded
 PAR.TH_Avg_Lean_Percent = PAR.Lean_Wgt_USR / PAR.TH_Hot_Wgt 'H';

 // PAR.TH Avg Loin Eye Depth = PAR.Loin-Eye * Wgt USR / PAR.TH Hot Wgt *Rounded
 PAR.TH_Avg_Loin_Eye_Depth = PAR.Loin_Eye_Wgt_USR / PAR.TH_Hot_Wgt 'H';

 // PAR.TH Avg Backfat = PAR.Backfat * Wgt USR / PAR.TH Hot Wgt *Rounded
 PAR.TH_Avg_Backfat = PAR.Backfat_Wgt_USR / PAR.TH_Hot_Wgt 'H';

 // PAR.TH Avg Loin Eye - 2 dec = PAR.Loin-Eye * Wgt USR 2 / PAR.TH Hot Wgt *Rounded
 PAR.TH_Avg_Loin_Eye_2_dec = PAR.Loin_Eye_Wgt_USR_2 / PAR.TH_Hot_Wgt 'H';

 // PAR.TH Avg Backfat - 2 Dec = PAR.Backfat * Wgt USR 2 / PAR.TH Hot Wgt *Rounded
 PAR.TH_Avg_Backfat_2_Dec = PAR.Backfat_Wgt_USR_2 / PAR.TH_Hot_Wgt 'H';

 //?Calc Avg Lean %, Loin eye, & Backfat
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Avg Lean Percent = CON.*ZERO
 PAR.TH_Avg_Lean_Percent = *ZERO;

 // PAR.TH Avg Loin Eye Depth = CON.*ZERO
 PAR.TH_Avg_Loin_Eye_Depth = *ZERO;

 // PAR.TH Avg Backfat = CON.*ZERO
 PAR.TH_Avg_Backfat = *ZERO;

 // PAR.TH Avg Loin Eye - 2 dec = CON.*ZERO
 PAR.TH_Avg_Loin_Eye_2_dec = *ZERO;

 // PAR.TH Avg Backfat - 2 Dec = CON.*ZERO
 PAR.TH_Avg_Backfat_2_Dec = *ZERO;

 ENDIF;

 // TH FFLI
 PAR.TH_FFLI = ( 51.537 + ( .035 * PAR.TH_Hot_Wgt ) ) - ( 12.26 * PAR.TH_Avg_Backfat );

}


