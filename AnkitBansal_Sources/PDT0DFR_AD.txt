// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDT0DFR
// ?Date: 14.08.2025 Time: 03:29:57
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?C3977  RMC 2/25/2015  Pass orig inv to 6=Edit pgm
//?FP1322 RMC 2/10/2010  HPB ONLY - get bank's company
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// CTL.A/R Customer Number = PAR.A/R Customer Number
CTL.AR_Customer_Number = PAR.AR_Customer_Number;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?F2=Fold/Unfold
// Execute function SFL Fold/Drop  RPG    US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG    US) TYPE(EXCUSRSRC) ('POBHUFU');
PARAMETER(6);
{
 ) find text=#SFLCTL
 ) insert
 A                                      SFLDROP(CF07)
 A* 07                                  SFLFOLD(CF07)
}


//?USER: Initialize subfile control

// CTL.Bank Code = PAR.Bank Code
CTL.Bank_Code = PAR.Bank_Code;

// CTL.Deposit Date = PAR.Deposit Date
CTL.Deposit_Date = PAR.Deposit_Date;

// CTL.Deposit Time = PAR.Deposit Time
CTL.Deposit_Time = PAR.Deposit_Time;

EXECUTE FUNCTION(RTV Bank Desc/Company RT) TYPE(RTVOBJ) FILE(CAEBREP)           AC1972422;
PARAMETER(CTL.Bank_Code);
PARAMETER(CTL.Description);
PARAMETER(LCL.Bank_Default_Company);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?FP1322 RMC 2/10/2010  HPB ONLY - get bank's company
CASE;

// IF LCL.Bank Default Company is Entered
IF LCL.Bank_Default_Company > *ZERO;

// CTL.Company Number = CVTVAR(LCL.Bank Default Company)
CTL.Company_Number = CVTVAR(LCL.Bank_Default_Company);

ENDIF;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Deposit Amounts    RT) TYPE(RTVOBJ) FILE(PDJ2CPP)          AC1334003;
PARAMETER(CTL.Bank_Code);
PARAMETER(CTL.Deposit_Date);
PARAMETER(CTL.Deposit_Time);
PARAMETER(PAR.Deposit_Amount);
PARAMETER(PAR.Total_Cash_Applied);
PARAMETER(PAR.Number_of_Deposit_Checks);
PARAMETER(PAR.Number_of_Applied_Checks);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Deposit Amount = PAR.Deposit Amount
CTL.Deposit_Amount = PAR.Deposit_Amount;

// CTL.Total Cash Applied = PAR.Total Cash Applied
CTL.Total_Cash_Applied = PAR.Total_Cash_Applied;

// CTL.Remaining to Apply = PAR.Deposit Amount - PAR.Total Cash Applied
CTL.Remaining_to_Apply = PAR.Deposit_Amount - PAR.Total_Cash_Applied;

// CTL.USR Check Amount = PAR.USR Check Amount
CTL.USR_Check_Amount = PAR.USR_Check_Amount;

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.USR Cust Remain = CTL.USR Check Amount
CTL.USR_Cust_Remain = CTL.USR_Check_Amount;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv One Invoice /PO   RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1802061;
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.One_Invoice_Per_PO);
{
 //?USER: Initialize routine

 // PAR.One Invoice Per PO = CND.No
 PAR.One_Invoice_Per_PO = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv One Invoice /PO   RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1801817;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.One_Invoice_Per_PO);
 {
  //?USER: Processing if Data record not found

  // PAR.One Invoice Per PO = CND.No
  PAR.One_Invoice_Per_PO = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.One Invoice Per PO is Yes
 IF LCL.One_Invoice_Per_PO = 'Y';

 // PAR.One Invoice Per PO = CND.Yes
 PAR.One_Invoice_Per_PO = 'Y';

 QUIT;

 ENDIF;

}


//?USER: Initialize subfile record from DBF record

//?Select Records
CASE;

// IF CTL.A/R Customer Number EQ DB1.A/R Customer Number
IF CTL.AR_Customer_Number = DB1.AR_Customer_Number;

// AND DB1.Purge Status is Open
AND DB1.Purge_Status = 'O';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// RCD.USR Cash Appl Amt   9.2 = DB1.Adjustment Amount + DB1.Amount Paid
RCD.USR_Cash_Appl_Amt_9_2 = DB1.Adjustment_Amount + DB1.Amount_Paid;

// RCD.USR Transaction Qty 9.2 = RCD.Transaction Amount
RCD.USR_Transaction_Qty_9_2 = RCD.Transaction_Amount;

//?Select Records
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Note Exists       RT) TYPE(RTVOBJ) FILE(PMEDCPP)           AC1899753;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// RCD.Text 1 Length USR = CON.*
RCD.Text_1_Length_USR = *;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Text 1 Length USR = CON.*BLANK
RCD.Text_1_Length_USR = *BLANK;

ENDIF;

//?F2=Fold/Unfold
// Execute function SFL Fold/Drop  RPG 2  US.
EXECUTE FUNCTION(SFL Fold/Drop  RPG 2  US) TYPE(EXCUSRSRC) ('POBKUFR');
{
 C     MODE          IFEQ      '0'
 C                   SETON                                        89
 C                   ELSE
 C                   SETOFF                                       89
 C                   ENDIF
}


EXECUTE FUNCTION(RTV Customer PO#      RT) TYPE(RTVOBJ) FILE(OMHSTPP)           AC1660476;
PARAMETER(RCD.Company_Number);
PARAMETER(DB1.Order_Number_Ref);
PARAMETER(RCD.Customer_Purchase_Order_#);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?USER: Process subfile control (Pre-confirm)

//?Prompt on Customer
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.USR Customer Number
AND PGM.*Cursor_field = CTL.USR_Customer_Number;

// Call program SEL A/R Customer       SR.
CALL PROGRAM(SEL A/R Customer       SR) ('PDXESRR');
PARAMETER(CTL.USR_Customer_Number);

ENDIF;

//?Validate Next Customer Number
CASE;

// IF CTL.USR Customer Number is not equal 0
IF CTL.USR_Customer_Number <> *ZERO;

EXECUTE FUNCTION(VAL A/R Customer       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1452402;
PARAMETER(CTL.USR_Customer_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// WRK.A/R Customer Number = CTL.USR Customer Number
WRK.AR_Customer_Number = CTL.USR_Customer_Number;

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(WRK.AR_Customer_Number);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Cust Name/Addr     RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1129143;
PARAMETER(CTL.USR_Customer_Number);
PARAMETER(CTL.Customer_Name);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(WRK.City);
PARAMETER(WRK.State_Code);
PARAMETER(WRK.Zip_Postal_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.A/R Customer Number = CTL.USR Customer Number
CTL.AR_Customer_Number = CTL.USR_Customer_Number;

// CTL.USR Customer Number = CND.equal 0
CTL.USR_Customer_Number = *ZERO;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?F6=Create on Account Cash
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PAR.USR Cash Appl Amt Total = CTL.Total Cash Applied
PAR.USR_Cash_Appl_Amt_Total = CTL.Total_Cash_Applied;

//?FP1322 RMC 2/10/2010  HPB ONLY - use bank's company
CASE;

// IF LCL.Bank Default Company is Entered
IF LCL.Bank_Default_Company > *ZERO;

// WRK.Company Number = CVTVAR(LCL.Bank Default Company)
WRK.Company_Number = CVTVAR(LCL.Bank_Default_Company);

ENDIF;

// Call program EDT On Account Cash    E1.
CALL PROGRAM(EDT On Account Cash    E1) ('PDTME1R');
PARAMETER(WRK.Company_Number);
PARAMETER(CTL.Invoice_Number);
PARAMETER(CTL.USR_Cust_Remain);
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.Bank_Code);
PARAMETER(CTL.Deposit_Date);
PARAMETER(CTL.Deposit_Time);
PARAMETER(PAR.USR_Cash_Appl_Amt_Total);
PARAMETER(CTL.USR_Cust_Apply);

// CTL.Total Cash Applied = PAR.USR Cash Appl Amt Total + CTL.Total Cash Applied
CTL.Total_Cash_Applied = PAR.USR_Cash_Appl_Amt_Total + CTL.Total_Cash_Applied;

// CTL.Remaining to Apply = CTL.Deposit Amount - CTL.Total Cash Applied
CTL.Remaining_to_Apply = CTL.Deposit_Amount - CTL.Total_Cash_Applied;

// CTL.USR Cust Remain = PAR.USR Check Amount - CTL.USR Cust Apply
CTL.USR_Cust_Remain = PAR.USR_Check_Amount - CTL.USR_Cust_Apply;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F8=Full screen mode
CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

// Call program Dsp A/R Cash Full ScrnDF.
CALL PROGRAM(Dsp A/R Cash Full ScrnDF) ('POTXDFR');
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.Invoice_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Amount Applied is greater than check amount
CASE;

// IF CTL.USR Cust Apply GT CTL.USR Check Amount
IF CTL.USR_Cust_Apply > CTL.USR_Check_Amount;

// Send information message - 'Amount Applied is greater than Check Amount.'
MESSAGE(USR2060 *INFO);

ENDIF;

//?Accum total to be applied before confirm
CASE;

// IF RCD.*SFLSEL is *A/R Adjustments
IF RCD.*SFLSEL = '6'/'6';

// OR RCD.*SFLSEL is *Regular Payments
OR RCD.*SFLSEL = '7'/'7';

CASE;

// IF RCD.USR Cash application amt is equal to zero
IF RCD.USR_Cash_application_amt = *ZERO;

// RCD.USR Cash application amt = RCD.Remaining Balance Due
RCD.USR_Cash_application_amt = RCD.Remaining_Balance_Due;

ENDIF;

// CTL.USR Adjustments Total = CTL.USR Adjustments Total - RCD.USR amount 1  11.2
CTL.USR_Adjustments_Total = CTL.USR_Adjustments_Total - RCD.USR_amount_1_11_2;

// CTL.USR Adjustments Total = CTL.USR Adjustments Total + RCD.USR Cash application amt
CTL.USR_Adjustments_Total = CTL.USR_Adjustments_Total + RCD.USR_Cash_application_amt;

// RCD.USR amount 1  11.2 = RCD.USR Cash application amt
RCD.USR_amount_1_11_2 = RCD.USR_Cash_application_amt;

//?Accum total to be applied before confirm
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.USR Cash application amt NE RCD.USR amount 1  11.2
IF RCD.USR_Cash_application_amt <> RCD.USR_amount_1_11_2;

// CTL.USR Adjustments Total = CTL.USR Adjustments Total - RCD.USR amount 1  11.2
CTL.USR_Adjustments_Total = CTL.USR_Adjustments_Total - RCD.USR_amount_1_11_2;

ENDIF;

CASE;

// IF RCD.USR Cash application amt is equal to zero
IF RCD.USR_Cash_application_amt = *ZERO;

// RCD.USR amount 1  11.2 = CON.*ZERO
RCD.USR_amount_1_11_2 = *ZERO;

ENDIF;

ENDIF;

//?5=Display Payments
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program DSP Detail for Header  DF.
CALL PROGRAM(DSP Detail for Header  DF) ('PDT2DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(*ZERO);
PARAMETER(RCD.Bank_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?8=WW Cust/Inv Notes
CASE;

// IF RCD.*SFLSEL is *8
IF RCD.*SFLSEL = '8';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program WW Invoice Notes      DF.
CALL PROGRAM(WW Invoice Notes      DF) ('PMX6DFR');
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Sales_Route_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?08/03/2016 JBB E5262 - Chargeback and Rebill modifications
//?           For options 6 and 7, RB added to conditions list
//?6=A/R adjustments program
CASE;

// IF RCD.*SFLSEL is *A/R Adjustments
IF RCD.*SFLSEL = '6'/'6';

//?Applied to Invoice or Debit Memos only
CASE;

// IF RCD.Invoice Suffix is IN, DM, CB or RB
IF RCD.Invoice_Suffix = 'CB'/'DM'/'IN'/'RB';

CASE;

// IF RCD.USR Cash application amt is equal to zero
IF RCD.USR_Cash_application_amt = *ZERO;

// RCD.USR Cash application amt = RCD.Remaining Balance Due
RCD.USR_Cash_application_amt = RCD.Remaining_Balance_Due;

ENDIF;

// LCL.Sequence Number = CON.*ZERO
LCL.Sequence_Number = 0;

// Call program EDT Cash Appl. Adjust. E1.
CALL PROGRAM(EDT Cash Appl. Adjust. E1) ('PDTXE1R');
PARAMETER(PAR.Bank_Code);
PARAMETER(PAR.Deposit_Date);
PARAMETER(PAR.Deposit_Time);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(LCL.Sequence_Number);
PARAMETER(*BLANK);
PARAMETER(RCD.USR_Cash_application_amt);
PARAMETER(PAR.A_R_Check_Number);
PARAMETER(RCD.Remaining_Balance_Due);
PARAMETER(RCD.Original_Inv_for_CB);
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.USR_Cust_Apply);
PARAMETER(CTL.USR_Check_Amount);
PARAMETER(CTL.USR_Cust_Remain);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Applied to Invoice or Debit Memos only
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cash applied to IN or DM only.'
ERROR(USR2065);
MSGPARM(RCD.Invoice_Suffix);

ENDIF;

ENDIF;

//?7=Regular Payments
CASE;

// IF RCD.*SFLSEL is *Regular Payments
IF RCD.*SFLSEL = '7'/'7';

//?Applied to Invoice or Debit Memos only
CASE;

// IF RCD.Invoice Suffix is IN, DM, CB or RB
IF RCD.Invoice_Suffix = 'CB'/'DM'/'IN'/'RB';

CASE;

// IF RCD.USR Cash application amt is equal to zero
IF RCD.USR_Cash_application_amt = *ZERO;

// RCD.USR Cash application amt = RCD.Remaining Balance Due
RCD.USR_Cash_application_amt = RCD.Remaining_Balance_Due;

ENDIF;

// LCL.Sequence Number = CON.*ZERO
LCL.Sequence_Number = *ZERO;

// Call program EDT Cash Appl. Adjust. E1.
CALL PROGRAM(EDT Cash Appl. Adjust. E1) ('PDTXE1R');
PARAMETER(PAR.Bank_Code);
PARAMETER(CTL.Deposit_Date);
PARAMETER(CTL.Deposit_Time);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(LCL.Sequence_Number);
PARAMETER('PAY');
PARAMETER(RCD.USR_Cash_application_amt);
PARAMETER(PAR.A_R_Check_Number);
PARAMETER(RCD.Remaining_Balance_Due);
PARAMETER(RCD.Original_Inv_for_CB);
PARAMETER(CTL.AR_Customer_Number);
PARAMETER(CTL.USR_Cust_Apply);
PARAMETER(CTL.USR_Check_Amount);
PARAMETER(CTL.USR_Cust_Remain);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Applied to Invoice or Debit Memos only
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Cash applied to IN or DM only.'
ERROR(USR2065);
MSGPARM(RCD.Invoice_Suffix);

ENDIF;

ENDIF;

// CTL.USR Adjustments Total = CON.*ZERO
CTL.USR_Adjustments_Total = *ZERO;

// CTL.USR Cust Remain = PAR.USR Check Amount - CTL.USR Cust Apply
CTL.USR_Cust_Remain = PAR.USR_Check_Amount - CTL.USR_Cust_Apply;

//?USER: Exit program processing

//?Amount applied is less than Check Amount.
CASE;

// IF CTL.USR Cust Apply LT CTL.USR Check Amount
IF CTL.USR_Cust_Apply < CTL.USR_Check_Amount;

// Send information message - 'Amount applied is less than Check Amount.'
MESSAGE(USR2061 *INFO);

ENDIF;

