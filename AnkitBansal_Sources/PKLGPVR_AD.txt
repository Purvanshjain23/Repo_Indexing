// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKLGPVR
// ?Date: 14.08.2025 Time: 02:49:52
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?H16853 - ISE - 02/03/21 - Increased Buy Order Number length from 5 to 7.
//?                          Recompilation only.
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.PPWS_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.CC Company Number = WRK.PPWS Company Number
DTL.CC_Company_Number = WRK.PPWS_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(PAR.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


EXECUTE FUNCTION(Rtv Payment Processing RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1147409;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(WRK.Pmt_Current_Payment_Date);
PARAMETER(WRK.Pmt_Current_Payment_Step);
PARAMETER(WRK.PP_Commission_Paym_Error);
PARAMETER(WRK.Pmt_Payment_Error);
PARAMETER(WRK.PP_Unused_Nbr_1);
PARAMETER(WRK.PP_Repayment_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Kill Date Usr EQ WRK.Zero USR
IF DTL.Kill_Date_Usr = WRK.Zero_USR;

// DTL.Kill Date Usr = JOB.*Job date
DTL.Kill_Date_Usr = JOB.*Job_date;

ENDIF;

//?USER: Validate relations

//?Check Payment Date greater then Current kill date Hard Error
CASE;

// IF DTL.Kill Date Usr GE WRK.Pmt Current Payment Date
IF DTL.Kill_Date_Usr >= WRK.Pmt_Current_Payment_Date;

//?Check Payment Date greater then Current kill date Hard Error
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Payment Date is greater'
ERROR(PRK0437);

ENDIF;

CASE;

// IF DTL.TH Schedule Kill Shift is Shift 1 or Shift 2
IF DTL.TH_Schedule_Kill_Shift = '1'/'2';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Shift is required'
ERROR(PRK0722);
MSGPARM(DTL.TH_Schedule_Kill_Shift);

ENDIF;

//?USER: User defined action

CASE;

// IF DTL.Current Kill Date LT WRK.Pmt Current Payment Date
IF DTL.Current_Kill_Date < WRK.Pmt_Current_Payment_Date;

// OR WRK.Pmt Current Payment Step is Less or Equal to Step 1
OR ( WRK.Pmt_Current_Payment_Step <= 00001 );

// Call program Pmt Print Options Size XF.
CALL PROGRAM(Pmt Print Options Size XF) ('PDV8PVR');
PARAMETER('Balance to Kill Edit');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');
PARAMETER(1);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Date Alpha USR = CVTVAR(DTL.Kill Date Usr)
WRK.Date_Alpha_USR = CVTVAR(DTL.Kill_Date_Usr);

// Execute command - 'SBM Bal to Kill Edit'
EXECUTE COMMAND(PRK0351);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(DTL.CC_Company_Number);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(DTL.Oms_System_Value_Alpha);
PARAMETER('P');
PARAMETER(DTL.TH_Schedule_Kill_Shift);

RETURN;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Balance to Kill Edit not Allowed'
ERROR(PRK0466);
MSGPARM(WRK.Sel_Processing);

ENDIF;

