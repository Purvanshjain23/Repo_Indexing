// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPN7XFR
// ?Date: 14.08.2025 Time: 03:41:20
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(PFS Validate Ord Dtl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1735851;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?Create Order Detail
CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

EXECUTE FUNCTION(Rtv for Itm Dtl Intrf2 RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1956161;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(WRK.Order_Desc_Line_One);
PARAMETER(WRK.Order_Desc_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(WRK.Unit_Weight);
PARAMETER(PAR.Item_Level);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(WRK.Default_Commod_Mark_basis);
PARAMETER(WRK.Transportation_Temp);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(WRK.Default_Warehouse);
PARAMETER(WRK.Price_Method_Default);
PARAMETER(WRK.Fresh_Chilling_Time);
PARAMETER(WRK.Variety_Rendered_Cut);
PARAMETER(WRK.Item_Target_Price);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?comment 4/30/03
//?R12926 DN 05/04/18-At Order level, use Absorbed Freight Rate from OH.
EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.Order_Type_Sales);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(WRK.Ship_To_Address_Line_1);
PARAMETER(WRK.Ship_To_Address_Line_2);
PARAMETER(WRK.Ship_To_Address_Line_3);
PARAMETER(WRK.Ship_To_City);
PARAMETER(WRK.Ship_To_State_Code);
PARAMETER(WRK.Ship_To_Zip_Postal_Code);
PARAMETER(WRK.Bill_to_Customer);
PARAMETER(WRK.Bill_to_Name);
PARAMETER(WRK.Bill_to_Address_Line_1);
PARAMETER(WRK.Bill_to_Address_Line_2);
PARAMETER(WRK.Bill_to_Address_Line_3);
PARAMETER(WRK.Bill_to_City);
PARAMETER(WRK.Bill_to_State_Code);
PARAMETER(WRK.Bill_to_Zip_Postal_Code);
PARAMETER(WRK.Customer_Purchase_Order_#);
PARAMETER(WRK.Order_Date);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(WRK.Actual_Shipped_Date);
PARAMETER(WRK.Cancel_Date);
PARAMETER(WRK.Terms_Code);
PARAMETER(WRK.Special_Instructions);
PARAMETER(WRK.Special_Instructions_2);
PARAMETER(WRK.Carrier_Code);
PARAMETER(PAR.Comment_Print_Acknowledge);
PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
PARAMETER(PAR.Comment_Print_Pick_Slip);
PARAMETER(PAR.Comment_Print_Ship_Doc);
PARAMETER(PAR.Reason_Code);
PARAMETER(WRK.Order_in_Use);
PARAMETER(WRK.Header_Status);
PARAMETER(WRK.Header_Status_Last);
PARAMETER(WRK.Order_Type_Print_Status);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(WRK.User_Original_Entry);
PARAMETER(WRK.Date_of_Original_Entry);
PARAMETER(WRK.Unused_Parm_Value_USR);
PARAMETER(WRK.Order_Weight_Total);
PARAMETER(WRK.Credit_Hold);
PARAMETER(WRK.Production_Hold);
PARAMETER(WRK.New_Customer_Hold);
PARAMETER(WRK.Requested_Delivery_Date);
PARAMETER(WRK.Requested_Delivery_Time);
PARAMETER(WRK.Accounts_Receiv_Ent_1);
PARAMETER(WRK.Accounts_Receiv_Ent_2);
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
PARAMETER(WRK.Rated_Freight);
PARAMETER(WRK.LTL_Flag);
PARAMETER(WRK.Price_Audit);
PARAMETER(WRK.Price_Status);
PARAMETER(WRK.Shipping_Method);
PARAMETER(WRK.Export_Status);
PARAMETER(PAR.Palletize);
PARAMETER(WRK.Shrink_Wrap);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(PAR.Age_Code);
PARAMETER(WRK.Reefer_Temperature);
PARAMETER(WRK.Load_Type);
PARAMETER(WRK.Attach_to_Invoice_Number);
PARAMETER(WRK.Load_Plan_Order);
PARAMETER(WRK.Print_Pick_Slip);
PARAMETER(WRK.Resell_Reference_Number);
PARAMETER(WRK.Special_Comment_1);
PARAMETER(WRK.Special_Comment_2);
PARAMETER(WRK.Affect_Auto_Accruals);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(WRK.Manager_Level_Code);
PARAMETER(WRK.VP_Level_Code);
PARAMETER(WRK.Attach_to_Order_Number);
PARAMETER(WRK.Reason_for_Price_Audit);
PARAMETER(WRK.Invoice_Number);
PARAMETER(WRK.Invoice_Suffix);
PARAMETER(WRK.Invoice_Date);
PARAMETER(PAR.Event_Code);
PARAMETER(WRK.Trans_Contol_AS400_Plant);
PARAMETER(PAR.Modified_Flag);
PARAMETER(WRK.A_R_order_Value_Total);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(WRK.Block_Order_Flag);
PARAMETER(WRK.Order_Certification_Flag);
PARAMETER(PAR.EDI_Status_1);
PARAMETER(PAR.EDI_Status_2);
PARAMETER(PAR.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Broker Order Sts   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1679352;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Broker_Order_Status);
PARAMETER(PAR.OH_TF_Exempt_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Country/DDD/DDT   RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC2116740;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Country_Code);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


//?Override with Load Header DDD/DDT
EXECUTE FUNCTION(RTV Deadln DepartDT/TM RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1497302;
PARAMETER(LCL.Load_ID);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(LCL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Affect Fields      RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1264364;
PARAMETER(WRK.Order_Type_Sales);
PARAMETER(PAR.Affect_Inventory_Status);
PARAMETER(PAR.Affect_Sales_Doll_Status);
PARAMETER(PAR.Affect_Sales_Pnds_Status);
PARAMETER(WRK.Affect_Brokerage_Default);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Broker status
CASE;

// IF PAR.Broker Order Status is yes
IF PAR.Broker_Order_Status = 'Y';

// LCL.Affect Commission = CND.yes
LCL.Affect_Commission = 'Y';

//?Broker status
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Affect Commission = CND.no
LCL.Affect_Commission = 'N';

ENDIF;

//?RMC 5/1/6 PFS014 Rtv Pricing Info if Item exists on the order already
//?RMC 5/1/6   only if the new item is not a substitution item
//?RMC 6/12/6  If Subst, get ham group number
//?RMC 4/11/7  Get ham group number if not subst line item too
//?RMC 6/13/8  get signal demand fields also
//?RMC 3/17/9  S00714 for Exp Doc upd -> get gross wgt from manifest dtl
//?LJB 6/11/9  E00430 Upd u/m prim from existing line item, if exists
// WRK.Default Status = CND.No
WRK.Default_Status = 'N';

//?Get pricing: If not Subst item, and item is on order already
CASE;

// IF PAR.Substitution Line Number is Entered
IF PAR.Substitution_Line_Number > 0;

//?E2781 do here too  9/16/13
//?** Add U/M Base Price=Pricing & U/M Ordered=Primary  E00430
//?R17029 DN 01/19/21-Added OD Spot Buy as Output Parm.
EXECUTE FUNCTION(Rtv Ord/Itm Prc Info  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1780383;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Market_Pricing_Date);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(PAR.Date_Method_Code);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(PAR.Contract_Number);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Pricing_Date_Used);
PARAMETER(LCL.UOM_Pricing);
PARAMETER(LCL.UOM_Primary);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Audit_Reason_Code);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(PAR.Unit_Price);
PARAMETER(PAR.Unit_Price_Credit);
PARAMETER(PAR.Ham_Group_Number);
PARAMETER(PAR.Released_by_User_Sts_Y_N);
PARAMETER(PAR.Ord_TF_Exempt_Code);
PARAMETER(PAR.OD_Price_Type);
PARAMETER(PAR.Price_Code);
PARAMETER(PAR.OD_Spot_Buy);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?If Subst line item code matches another item on the order
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?04/28/10 PKD Retrieve the Market Price for Credit Checking.
//?Unit Price -Credit
CASE;

// IF WRK.Order Type - Sales is Regular Order
IF WRK.Order_Type_Sales = 'OR';

EXECUTE FUNCTION(Val Manual Price      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1581694;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R12926 DN 05/04/18-At Order level, use Absorbed Freight Rate from OH.
EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Primal Group Code is NE Samples or Cut Loss
IF LCL.Primal_Group_Code <> 'UNID';

// AND LCL.Type Code is Not Promotional/Samples
AND LCL.Type_Code <> 'PS';

EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Projected_Market_Price);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Error_Status_3);
PARAMETER(LCL.Minimum_Price_USR);
PARAMETER(LCL.Maximum_Price_USR);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
{
 //?Execute internal function

 //?*---------------------------------------------------------------*
 //?Documentation:
 //?This internal function will determine if a manual price entered
 //?on an order detail line is within the Manual Pricing Acceptance
 //?Percentage from the Company Control file. If it does not fall
 //?within the percentage range then the market price will be used.
 //?If no market price is found then it is a manual price error
 //?*---------------------------------------------------------------*
 // PAR.Projected Market Price = CON.*ZERO
 PAR.Projected_Market_Price = *ZERO;

 // PAR.Minimum Price   USR = CON.*ZERO
 PAR.Minimum_Price_USR = *ZERO;

 // PAR.Maximum Price  USR = CON.*ZERO
 PAR.Maximum_Price_USR = *ZERO;

 // PAR.Error Status  3 = CND.Yes
 PAR.Error_Status_3 = 'Y';

 EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Manual_Price_Accept_Prcnt);
 PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Food Service and Co-Pack Items
 CASE;

 // IF PAR.Default Commod Mark basis is Food Service
 IF PAR.Default_Commod_Mark_basis = 'FSV';

 // OR PAR.Default Commod Mark basis is Co-Pack
 OR PAR.Default_Commod_Mark_basis = 'CPK';

 // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
 PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

 ENDIF;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(9999999);
 PARAMETER(PAR.Projected_Market_Price);
 PARAMETER(WRK.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 // Projected Market Price
 PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
 + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

 //?If a market price is found for co/cust market code default
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Minimum price allowed
 PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
 * PAR.Projected_Market_Price 'H';

 // Maximum price allowed
 PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
 * PAR.Projected_Market_Price 'H';

 //?If the Price Override is within the range then error status is no
 CASE;

 // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
 IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

 // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
 AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

 // PAR.Error Status  3 = CND.No
 PAR.Error_Status_3 = 'N';

 ENDIF;

 //?If a market price is found for co/cust market code default
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If no price for co/cust market code then use co/item market code
 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(9999999);
 PARAMETER(PAR.Projected_Market_Price);
 PARAMETER(WRK.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Minimum price allowed
 PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
 * PAR.Projected_Market_Price 'H';

 // Maximum price allowed
 PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
 * PAR.Projected_Market_Price 'H';

 //?If the Price Override is within the range then error status is no
 CASE;

 // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
 IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

 // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
 AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

 // PAR.Error Status  3 = CND.No
 PAR.Error_Status_3 = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Projected Market Price = CON.*ZERO
 PAR.Projected_Market_Price = *ZERO;

 ENDIF;

 ENDIF;

}


// PAR.Unit Price - Credit = LCL.Projected Market Price
PAR.Unit_Price_Credit = LCL.Projected_Market_Price;

ENDIF;

ENDIF;

//?If Subst line item code matches another item on the order
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.U/M - Pricing = LCL.U/M - Pricing
WRK.UOM_Pricing = LCL.UOM_Pricing;

// WRK.U/M - Primary = LCL.U/M - Primary
WRK.UOM_Primary = LCL.UOM_Primary;

// WRK.Default Status = CND.Yes
WRK.Default_Status = 'Y';

ENDIF;

//?R17029 DN 01/19/21-If PAR.OD Spot Buy=Blank, Set to 'Y'.
CASE;

// IF PAR.OD Spot Buy is No-blank
IF PAR.OD_Spot_Buy = *BLANK;

//?W77844 DN 07/27/21-Changed to Use New Value 'S'pot.
// PAR.OD Spot Buy = CND.Spot
PAR.OD_Spot_Buy = 'S';

ENDIF;

//?RMC 6/12/06 get ham group if subst
EXECUTE FUNCTION(Rtv Ham Group Nmbr    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1783210;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Substitution_Line_Number);
PARAMETER(PAR.Ham_Group_Number);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?Get pricing: If not Subst item, and item is on order already
// IF *OTHERWISE
IF *OTHERWISE;

//?** Add U/M Base Price=Pricing & U/M Ordered=Primary  E00430
//?R17029 DN 01/19/21-Added OD Spot Buy as Output Parm.
EXECUTE FUNCTION(Rtv Ord/Itm Prc Info  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1780383;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Market_Pricing_Date);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(PAR.Date_Method_Code);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(PAR.Contract_Number);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Pricing_Date_Used);
PARAMETER(LCL.UOM_Pricing);
PARAMETER(LCL.UOM_Primary);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Audit_Reason_Code);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(PAR.Unit_Price);
PARAMETER(PAR.Unit_Price_Credit);
PARAMETER(PAR.Ham_Group_Number);
PARAMETER(PAR.Released_by_User_Sts_Y_N);
PARAMETER(PAR.Ord_TF_Exempt_Code);
PARAMETER(PAR.OD_Price_Type);
PARAMETER(PAR.Price_Code);
PARAMETER(PAR.OD_Spot_Buy);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?If New line item code matches another item on the order
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

//?04/28/10 PKD Retrieve the Market Price for Credit Checking.
//?Unit Price -Credit
CASE;

// IF WRK.Order Type - Sales is Regular Order
IF WRK.Order_Type_Sales = 'OR';

EXECUTE FUNCTION(Val Manual Price      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1581694;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Description_Line_One);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?R12926 DN 05/04/18-At Order level, use Absorbed Freight Rate from OH.
EXECUTE FUNCTION(RTV AbsFrtRt/Type Cde  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1582615;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Primal Group Code is NE Samples or Cut Loss
IF LCL.Primal_Group_Code <> 'UNID';

// AND LCL.Type Code is Not Promotional/Samples
AND LCL.Type_Code <> 'PS';

EXECUTE FUNCTION(VAL Manual Price Range IF) TYPE(EXCINTFUN)                     AC1414607;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Projected_Market_Price);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Error_Status_3);
PARAMETER(LCL.Minimum_Price_USR);
PARAMETER(LCL.Maximum_Price_USR);
PARAMETER(LCL.Absorbed_Freight_Rate_CWT);
{
 //?Execute internal function

 //?*---------------------------------------------------------------*
 //?Documentation:
 //?This internal function will determine if a manual price entered
 //?on an order detail line is within the Manual Pricing Acceptance
 //?Percentage from the Company Control file. If it does not fall
 //?within the percentage range then the market price will be used.
 //?If no market price is found then it is a manual price error
 //?*---------------------------------------------------------------*
 // PAR.Projected Market Price = CON.*ZERO
 PAR.Projected_Market_Price = *ZERO;

 // PAR.Minimum Price   USR = CON.*ZERO
 PAR.Minimum_Price_USR = *ZERO;

 // PAR.Maximum Price  USR = CON.*ZERO
 PAR.Maximum_Price_USR = *ZERO;

 // PAR.Error Status  3 = CND.Yes
 PAR.Error_Status_3 = 'Y';

 EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Manual_Price_Accept_Prcnt);
 PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Food Service and Co-Pack Items
 CASE;

 // IF PAR.Default Commod Mark basis is Food Service
 IF PAR.Default_Commod_Mark_basis = 'FSV';

 // OR PAR.Default Commod Mark basis is Co-Pack
 OR PAR.Default_Commod_Mark_basis = 'CPK';

 // PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
 PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

 ENDIF;

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Commodity_Market_Code);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(9999999);
 PARAMETER(PAR.Projected_Market_Price);
 PARAMETER(WRK.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 // Projected Market Price
 PAR.Projected_Market_Price = ( PAR.Projected_Market_Price
 + PAR.Standard_Overage_Underage ) + ( PAR.Absorbed_Freight_Rate_CWT / 100 'H' );

 //?If a market price is found for co/cust market code default
 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Minimum price allowed
 PAR.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )
 * PAR.Projected_Market_Price 'H';

 // Maximum price allowed
 PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
 * PAR.Projected_Market_Price 'H';

 //?If the Price Override is within the range then error status is no
 CASE;

 // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
 IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

 // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
 AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

 // PAR.Error Status  3 = CND.No
 PAR.Error_Status_3 = 'N';

 ENDIF;

 //?If a market price is found for co/cust market code default
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If no price for co/cust market code then use co/item market code
 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(9999999);
 PARAMETER(PAR.Projected_Market_Price);
 PARAMETER(WRK.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // Minimum price allowed
 PAR.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )
 * PAR.Projected_Market_Price 'H';

 // Maximum price allowed
 PAR.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )
 * PAR.Projected_Market_Price 'H';

 //?If the Price Override is within the range then error status is no
 CASE;

 // IF PAR.Price Overage Override GE PAR.Minimum Price   USR
 IF PAR.Price_Overage_Override >= PAR.Minimum_Price_USR;

 // AND PAR.Price Overage Override LE PAR.Maximum Price  USR
 AND PAR.Price_Overage_Override <= PAR.Maximum_Price_USR;

 // PAR.Error Status  3 = CND.No
 PAR.Error_Status_3 = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Projected Market Price = CON.*ZERO
 PAR.Projected_Market_Price = *ZERO;

 ENDIF;

 ENDIF;

}


// PAR.Unit Price - Credit = LCL.Projected Market Price
PAR.Unit_Price_Credit = LCL.Projected_Market_Price;

ENDIF;

ENDIF;

//?If New line item code matches another item on the order
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.U/M - Pricing = LCL.U/M - Pricing
WRK.UOM_Pricing = LCL.UOM_Pricing;

// WRK.U/M - Primary = LCL.U/M - Primary
WRK.UOM_Primary = LCL.UOM_Primary;

// WRK.Default Status = CND.Yes
WRK.Default_Status = 'Y';

ENDIF;

//?R17029 DN 01/19/21-If PAR.OD Spot Buy=Blank, Set to 'Y'.
CASE;

// IF PAR.OD Spot Buy is No-blank
IF PAR.OD_Spot_Buy = *BLANK;

//?W77844 DN 07/27/21-Changed to Use New Value 'S'pot.
// PAR.OD Spot Buy = CND.Spot
PAR.OD_Spot_Buy = 'S';

ENDIF;

ENDIF;

//?Default pricing info if new item for order (this is the orig code 5/1/6)
CASE;

// IF WRK.Default Status is No
IF WRK.Default_Status = 'N';

CASE;

// IF PAR.Billing Activity Type is Warehouse Transfer
IF PAR.Billing_Activity_Type = '4';

// PAR.Price Status = CND.Priced
PAR.Price_Status = 'P';

// PAR.Price Audit = CND.No Audit
PAR.Price_Audit = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Price Status = CND.Unpriced
PAR.Price_Status = 'U';

// PAR.Price Audit = CND.Needs Price Audit
PAR.Price_Audit = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv Item Def/TFExp    RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1747888;
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Ord_TF_Exempt_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Price Method Code = CND.Manual
PAR.Price_Method_Code = 'MAN';

ENDIF;

//?If not Pre-Commencement, set Tf exempt code   8/31/05
CASE;

// IF PAR.OH TF Exempt Code is Not Pre-Commencement
IF PAR.OH_TF_Exempt_Code = 'EC'/'EP'/'NE';

CASE;

// IF PAR.OH TF Exempt Code is Exempt Customer
IF PAR.OH_TF_Exempt_Code = 'EC';

CASE;

// IF PAR.Ord TF Exempt Code is Not Exempt
IF PAR.Ord_TF_Exempt_Code = 'NE';

// OR PAR.Ord TF Exempt Code is Exempt Customer
OR PAR.Ord_TF_Exempt_Code = 'EC';

//?RMC 5/21/08 Added OR condition-item on OD may be EC,so make new one same
// PAR.Ord TF Exempt Code = CND.Exempt Customer
PAR.Ord_TF_Exempt_Code = 'EC';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Ord TF Exempt Code = CND.Exempt Product
PAR.Ord_TF_Exempt_Code = 'EP';

ENDIF;

ENDIF;

CASE;

// IF PAR.OH TF Exempt Code is Not Exempt
IF PAR.OH_TF_Exempt_Code = 'NE';

// AND PAR.Ord TF Exempt Code is Exempt Product
AND PAR.Ord_TF_Exempt_Code = 'EP';

// PAR.OH TF Exempt Code = CND.Exempt Product
PAR.OH_TF_Exempt_Code = 'EP';

EXECUTE FUNCTION(Chg TF Exempt         CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC1750711;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.OH_TF_Exempt_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


ENDIF;

//?If not Pre-Commencement, set Tf exempt code   8/31/05
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Ord TF Exempt Code = CND.Pre Commencement
PAR.Ord_TF_Exempt_Code = 'PC';

ENDIF;

//?R17029 DN 01/19/21-Set OD Spot Buy.
EXECUTE FUNCTION(CRT Ship Dtl f/Accusrt CR) TYPE(CRTOBJ) FILE(OPBGWKP)          AC1331575;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Order_Group_Code);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(PAR.Billing_Detail_Cost_Dol);
PARAMETER(PAR.Billing_Detail_Gross_Dol);
PARAMETER(PAR.Billing_Detail_Net_Dol);
PARAMETER(PAR.Quantity_to_Substitute);
PARAMETER(PAR.Comment_Print_Acknowledge);
PARAMETER(PAR.Comment_Print_Inv_Cr_Memo);
PARAMETER(PAR.Comment_Print_Pick_Slip);
PARAMETER(PAR.Comment_Print_Ship_Doc);
PARAMETER(PAR.Extended_Amount);
PARAMETER(PAR.Market_Pricing_Date);
PARAMETER(PAR.Commodity_Market_Code);
PARAMETER(PAR.Date_Method_Code);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(PAR.Contract_Number);
PARAMETER(PAR.Price_Status);
PARAMETER(PAR.Pricing_Date_Used);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(WRK.UOM_Primary);
PARAMETER('P');
PARAMETER(PAR.Work_Over_Short_Status);
PARAMETER(PAR.OD_Production_Plan_Sts);
PARAMETER(WRK.Order_Desc_Line_One);
PARAMETER(WRK.Order_Desc_Line_Two);
PARAMETER(PAR.Age_Code);
PARAMETER(PAR.Palletize);
PARAMETER(PAR.Slip_Sheet);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(PAR.Price_Audit);
PARAMETER(PAR.Price_Audit_Reason_Code);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Rated_Freight);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Quantity_Scheduled);
PARAMETER(PAR.Weight_Scheduled);
PARAMETER(PAR.Quantity_Shipped_Total);
PARAMETER(PAR.Weight_Shipped_Total);
PARAMETER(PAR.Unit_Cost_Pricing_U_M);
PARAMETER(PAR.Unit_Cost_Per_Pound);
PARAMETER(PAR.Unit_Price);
PARAMETER(PAR.Unit_Price_Credit);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Tare_Weight_Total);
PARAMETER(PAR.Requested_Ship_Date);
PARAMETER(PAR.Scheduled_Ship_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Affect_Inventory_Status);
PARAMETER(PAR.Affect_Sales_Doll_Status);
PARAMETER(PAR.Affect_Sales_Pnds_Status);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Level);
PARAMETER(PAR.Quality_Level);
PARAMETER(PAR.Pricing_Product_Class_Rep);
PARAMETER(PAR.Season_Product_Class_Repo);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.User_Profile_Name);
PARAMETER(PAR.Country_Code);
PARAMETER('03');
PARAMETER(PAR.Reason_Code);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Modified_Flag);
PARAMETER(PAR.Substituted_Flag);
PARAMETER(PAR.OD_Schedule_Override_Sts);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Ham_Group_Number);
PARAMETER(WRK.OD_Adj_Type_Override);
PARAMETER('Y');
PARAMETER(LCL.Affect_Commission);
PARAMETER('Y');
PARAMETER(PAR.Released_by_User_Sts_Y_N);
PARAMETER(PAR.Ord_TF_Exempt_Code);
PARAMETER(WRK.OD_Pallet_Type);
PARAMETER(WRK.Production_Warehouse);
PARAMETER(PAR.OD_Price_Type);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Deadline_Departure_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Deadline_Departure_Time);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.Substitution_Line_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.Item_Target_Price);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.OD_Spot_Buy);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(PAR.EDI_Status_1);
PARAMETER(PAR.EDI_Status_2);
PARAMETER(PAR.EDI_Status_3);
{
 //?USER: Processing before Data update

 // DB1.Age Code = CND.Blank
 DB1.Age_Code = *BLANK;

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program Rtv First Consumed Itm XF.
 CALL PROGRAM(Rtv First Consumed Itm XF) ('POP1XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Consumed_Item_Code);

 EXECUTE FUNCTION(Rtv Productin Whs     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1498428;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Production_Warehouse);
 PARAMETER(NLL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF WRK.Export Status is yes
IF WRK.Export_Status = 'Y';

//?12/20/18 DN R13944-Changed to Update the 'Translate Item Desc' Lang.
EXECUTE FUNCTION(Rtv/Crt Dflt f/Ord AS  RT) TYPE(RTVOBJ) FILE(PDMMREP)          AC1612216;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Event_Code);
PARAMETER(PAR.ED_Xlate_Desc_to_Country);
{
 //?USER: Initialize routine

 // PAR.ED Xlate Desc to Country = CND.Not Selected
 PAR.ED_Xlate_Desc_to_Country = *BLANK;

 //?DO2642 DN 11/15/22-Initialize.
 // LCL.First Time Through USR = CND.Yes
 LCL.First_Time_Through_USR = 'Y';

 //?USER: Process Data record

 //?11/15/22 DN DO2642-Get/Save Live with PHIS Flag from Doc Type 'A'.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // AND LCL.First Time Through USR is Yes
 AND LCL.First_Time_Through_USR = 'Y';

 // LCL.First Time Through USR = CND.No
 LCL.First_Time_Through_USR = 'N';

 // LCL.ED Live with PHIS = DB1.ED Live with PHIS
 LCL.ED_Live_with_PHIS = DB1.ED_Live_with_PHIS;

 ENDIF;

 //?12/20/18 DN R13944-Save 'Translate Desc' Flag from Doc Type A.
 CASE;

 // IF DB1.ED Export Document Type is Application for Export
 IF DB1.ED_Export_Document_Type = 'A';

 // AND NOT DB1.ED Xlate Desc to Country is Not Entered
 AND ! DB1.ED_Xlate_Desc_to_Country = *BLANK;

 // PAR.ED Xlate Desc to Country = DB1.ED Xlate Desc to Country
 PAR.ED_Xlate_Desc_to_Country = DB1.ED_Xlate_Desc_to_Country;

 ENDIF;

 EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(WRK.Order_Type_Sales);
 PARAMETER(WRK.AR_Customer_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.Ship_To_Address_Line_1);
 PARAMETER(PAR.Ship_To_Address_Line_2);
 PARAMETER(PAR.Ship_To_Address_Line_3);
 PARAMETER(PAR.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Ship_To_Zip_Postal_Code);
 PARAMETER(WRK.Bill_to_Customer);
 PARAMETER(WRK.Bill_to_Name);
 PARAMETER(WRK.Bill_to_Address_Line_1);
 PARAMETER(WRK.Bill_to_Address_Line_2);
 PARAMETER(WRK.Bill_to_Address_Line_3);
 PARAMETER(WRK.Bill_to_City);
 PARAMETER(WRK.Bill_to_State_Code);
 PARAMETER(WRK.Bill_to_Zip_Postal_Code);
 PARAMETER(PAR.Customer_Purchase_Order_#);
 PARAMETER(WRK.Order_Date);
 PARAMETER(WRK.Requested_Ship_Date);
 PARAMETER(WRK.Actual_Shipped_Date);
 PARAMETER(WRK.Cancel_Date);
 PARAMETER(WRK.Terms_Code);
 PARAMETER(WRK.Special_Instructions);
 PARAMETER(WRK.Special_Instructions_2);
 PARAMETER(WRK.Carrier_Code);
 PARAMETER(WRK.Comment_Print_Acknowledge);
 PARAMETER(WRK.Comment_Print_Inv_Cr_Memo);
 PARAMETER(WRK.Comment_Print_Pick_Slip);
 PARAMETER(WRK.Comment_Print_Ship_Doc);
 PARAMETER(WRK.Reason_Code);
 PARAMETER(WRK.Order_in_Use);
 PARAMETER(PAR.Header_Status);
 PARAMETER(WRK.Header_Status_Last);
 PARAMETER(WRK.Order_Type_Print_Status);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(WRK.User_Original_Entry);
 PARAMETER(WRK.Date_of_Original_Entry);
 PARAMETER(WRK.Order_Value_Total);
 PARAMETER(PAR.Order_Weight_Total);
 PARAMETER(WRK.Credit_Hold);
 PARAMETER(WRK.Production_Hold);
 PARAMETER(WRK.New_Customer_Hold);
 PARAMETER(WRK.Requested_Delivery_Date);
 PARAMETER(WRK.Requested_Delivery_Time);
 PARAMETER(WRK.Accounts_Receiv_Ent_1);
 PARAMETER(WRK.Accounts_Receiv_Ent_2);
 PARAMETER(WRK.Load_ID);
 PARAMETER(WRK.Absorbed_Freight_Rate_CWT);
 PARAMETER(WRK.Rated_Freight);
 PARAMETER(WRK.LTL_Flag);
 PARAMETER(WRK.Price_Audit);
 PARAMETER(WRK.Price_Status);
 PARAMETER(WRK.Shipping_Method);
 PARAMETER(WRK.Export_Status);
 PARAMETER(WRK.Palletize);
 PARAMETER(WRK.Shrink_Wrap);
 PARAMETER(WRK.Slip_Sheet);
 PARAMETER(WRK.Age_Code);
 PARAMETER(WRK.Reefer_Temperature);
 PARAMETER(WRK.Load_Type);
 PARAMETER(WRK.Attach_to_Invoice_Number);
 PARAMETER(WRK.Load_Plan_Order);
 PARAMETER(WRK.Print_Pick_Slip);
 PARAMETER(WRK.Resell_Reference_Number);
 PARAMETER(WRK.Special_Comment_1);
 PARAMETER(WRK.Special_Comment_2);
 PARAMETER(WRK.Affect_Auto_Accruals);
 PARAMETER(WRK.Sales_Route_Code);
 PARAMETER(WRK.Manager_Level_Code);
 PARAMETER(WRK.VP_Level_Code);
 PARAMETER(WRK.Attach_to_Order_Number);
 PARAMETER(WRK.Reason_for_Price_Audit);
 PARAMETER(WRK.Invoice_Number);
 PARAMETER(WRK.Invoice_Suffix);
 PARAMETER(WRK.Invoice_Date);
 PARAMETER(WRK.Event_Code);
 PARAMETER(WRK.Trans_Contol_AS400_Plant);
 PARAMETER(WRK.Modified_Flag);
 PARAMETER(PAR.A_R_order_Value_Total);
 PARAMETER(WRK.Billing_Activity_Type);
 PARAMETER(WRK.Block_Order_Flag);
 PARAMETER(WRK.Order_Certification_Flag);
 PARAMETER(WRK.EDI_Status_1);
 PARAMETER(WRK.EDI_Status_2);
 PARAMETER(WRK.EDI_Status_3);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Format Ship to into Consignee
 // PAR.ED Consignee Name = PAR.Ship To Name
 PAR.ED_Consignee_Name = PAR.Ship_To_Name;

 // PAR.ED Consignee Addr 1 = PAR.Ship To Address Line 1
 PAR.ED_Consignee_Addr_1 = PAR.Ship_To_Address_Line_1;

 // PAR.ED Consignee Addr 2 = PAR.Ship To Address Line 2
 PAR.ED_Consignee_Addr_2 = PAR.Ship_To_Address_Line_2;

 // PAR.ED Consignee Addr 3 = PAR.Ship To Address Line 3
 PAR.ED_Consignee_Addr_3 = PAR.Ship_To_Address_Line_3;

 // WRK.Text USR 23 = CONCAT(PAR.Ship To City,PAR.Ship To State Code,CON.1)
 WRK.Text_USR_23 = PAR.Ship_To_City + PAR.Ship_To_State_Code (1);

 // WRK.Text 35 USR = CONCAT(WRK.Text USR 23,PAR.Ship To Zip/Postal Code,CON.1)
 WRK.Text_35_USR = WRK.Text_USR_23 + PAR.Ship_To_Zip_Postal_Code (1);

 //?Consignee address line 2,3
 CASE;

 // IF PAR.ED Consignee Addr 2 is Blank
 IF PAR.ED_Consignee_Addr_2 = *BLANK;

 // PAR.ED Consignee Addr 2 = WRK.Text 35 USR
 PAR.ED_Consignee_Addr_2 = WRK.Text_35_USR;

 CASE;

 // IF PAR.Ship To State Code is Not International
 IF PAR.Ship_To_State_Code <> '.';

 // PAR.ED Consignee Addr 3 = CON.USA
 PAR.ED_Consignee_Addr_3 = 'USA';

 ENDIF;

 //?Consignee address line 2,3
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.ED Consignee Addr 3 EQ WRK.BLANK
 IF PAR.ED_Consignee_Addr_3 = WRK.BLANK;

 CASE;

 // IF PAR.Ship To State Code is Not International
 IF PAR.Ship_To_State_Code <> '.';

 // PAR.ED Consignee Addr 3 = CONCAT(WRK.Text 35 USR,CON.USA,CON.2)
 PAR.ED_Consignee_Addr_3 = WRK.Text_35_USR + 'USA' (2);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.ED Consignee Addr 3 = WRK.Text 35 USR
 PAR.ED_Consignee_Addr_3 = WRK.Text_35_USR;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 ENDIF;

 // PAR.ED Customer PO # = PAR.Customer Purchase Order #
 PAR.ED_Customer_PO_# = PAR.Customer_Purchase_Order_#;

 // PAR.ED Total Net Weight lbs = PAR.Order Weight Total
 PAR.ED_Total_Net_Weight_lbs = PAR.Order_Weight_Total;

 // PAR.ED Invoice Total = PAR.A/R order Value Total
 PAR.ED_Invoice_Total = PAR.A_R_order_Value_Total;

 CASE;

 // IF PAR.Order Weight Total is Not equal zero
 IF PAR.Order_Weight_Total <> *ZERO;

 // PAR.ED Total Unit Price = PAR.A/R order Value Total / PAR.Order Weight Total *
 PAR.ED_Total_Unit_Price = PAR.A_R_order_Value_Total / PAR.Order_Weight_Total;

 ENDIF;

 //?Read the Order Detail and calc/output required fields
 // PAR.ED Nbr of Packages = CON.*ZERO
 PAR.ED_Nbr_of_Packages = *ZERO;

 //?12/20/18 DN R13944-Pass in ED Xlate Desc to Country.
 //?11/15/22 DN DO2642-Pass in ED Live with PHIS.
 EXECUTE FUNCTION(Rtv/Crt/Chg ExpDoc@OE  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1612101;
 PARAMETER(DB1.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(DB1.ED_Shipping_Marks_Txt);
 PARAMETER(PAR.Header_Status);
 PARAMETER(PAR.ED_Total_Gross_Weight_lbs);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(PAR.ED_Xlate_Desc_to_Country);
 PARAMETER(PAR.ED_Invoice_Total);
 PARAMETER(LCL.ED_Live_with_PHIS);
 PARAMETER(PAR.ED_Total_Net_Weight_lbs);
 PARAMETER(PAR.ED_Total_Net_Weight_MT);
 PARAMETER(PAR.ED_Nbr_of_Packages);
 PARAMETER(DB1.ED_Slg_Proc_Date_Format);
 PARAMETER(WRK.Warehouse_Type);
 {
  //?USER: Initialize routine

  //?R13074 RMC 5/24/18 Determine HACCP code for FSIS V2
  //?RMC 08/14/07 RTV COMPANY value to determine if item desc on form
  //?            is the item description or item label+item code
  //?RMC 12/24/09 S00607 - accum total net wt MT for header
  //?N = Not special -- use item description
  //?Y = Yes Special -- use item label+item code
  // Call program Rtv Alpha Value       XF.
  CALL PROGRAM(Rtv Alpha Value       XF) ('POMTXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER('MPGITEM');
  PARAMETER(LCL.Status_Flag_1_Y_N);

  // PAR.ED Nbr of Packages = CON.*ZERO
  PAR.ED_Nbr_of_Packages = *ZERO;

  // PAR.Gross Weight USR 9.1 = CON.*ZERO
  PAR.Gross_Weight_USR_9_1 = *ZERO;

  // PAR.ED Total Net Weight MT = CON.*ZERO
  PAR.ED_Total_Net_Weight_MT = *ZERO;

  // PAR.ED Total Net Weight lbs = CON.*ZERO
  PAR.ED_Total_Net_Weight_lbs = *ZERO;

  // LCL.ED Language Xlate Desc = CND.Not Entered
  LCL.ED_Language_Xlate_Desc = *BLANK;

  //?Print max std qty and weight if not shipped, and comp value=Y
  CASE;

  // IF PAR.Header Status is Confirmed & Complete
  IF PAR.Header_Status = 'C'/'R';

  //?Print max std qty and weight if not shipped, and comp value=Y
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(PAR.Company_Number);
  PARAMETER('EXPPRTOQT');
  PARAMETER(LCL.Status_Flag_13_Y_N);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Status Flag 13 Y/N is Yes
  IF LCL.Status_Flag_13_Y_N = 'Y';

  // LCL.Status Flag 14 Y/N = CND.Yes
  LCL.Status_Flag_14_Y_N = 'Y';

  ENDIF;

  ENDIF;

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
  PARAMETER(DB1.Warehouse_Code);
  PARAMETER(PAR.Warehouse_Type);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PLTESTNO');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.ED Product UOM = CON.lbs
  PAR.ED_Product_UOM = 'lbs';

  //?DO2416 DN 03/18/22-Added Country Codes ISO 3 Standard.
  //?Create Detail if required for the document.
  CASE;

  // IF PAR.ED Export Document Type is Health Certificate 9060-5
  IF PAR.ED_Export_Document_Type = 'H';

  // OR PAR.ED Export Document Type is Customs Invoice
  OR PAR.ED_Export_Document_Type = 'C';

  // OR PAR.ED Export Document Type is Certificate of Origin
  OR PAR.ED_Export_Document_Type = 'O';

  // OR PAR.ED Export Document Type is Application for Export
  OR PAR.ED_Export_Document_Type = 'A';

  // OR PAR.ED Export Document Type is Form 9060-7 (Casings)
  OR PAR.ED_Export_Document_Type = 'G';

  // OR PAR.ED Export Document Type is Customs Invoice-Willson
  OR PAR.ED_Export_Document_Type = 'W';

  // OR PAR.ED Export Document Type is 9290/9285/9295/9115/9450
  OR ( PAR.ED_Export_Document_Type = 'E';

  // AND DB1.Country Code is China
  AND DB1.Country_Code = 'CHN' );

  // OR PAR.ED Export Document Type is 9290/9285/9295/9115/9450
  OR ( PAR.ED_Export_Document_Type = 'E';

  // AND DB1.Country Code is Taiwan
  AND DB1.Country_Code = 'TAI' );

  // OR PAR.ED Export Document Type is 9290/9285/9295/9115/9450
  OR ( PAR.ED_Export_Document_Type = 'E';

  // AND DB1.Country Code is Australia
  AND DB1.Country_Code = 'AUS' );

  // OR PAR.ED Export Document Type is Letterhead-Pork to Export
  OR ( PAR.ED_Export_Document_Type = 'L';

  // AND DB1.Country Code is Chile
  AND DB1.Country_Code = 'CHI' );

  // OR PAR.ED Export Document Type is 9290/9285/9295/9115/9450
  OR PAR.ED_Export_Document_Type = 'E';

  // AND DB1.Country Code is Taiwan - ISO 3
  AND DB1.Country_Code = 'TWN' );

  // OR PAR.ED Export Document Type is Letterhead-Pork to Export
  OR ( PAR.ED_Export_Document_Type = 'L';

  // AND DB1.Country Code is Chile - ISO 3
  AND DB1.Country_Code = 'CHL' );

  EXECUTE FUNCTION(RTV for Exp Document   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1529231;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Variety_Rendered_Cut);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?DO2642 DN 08/12/22-Commented Out Old Method Item Label Format. Move Below.
  //?DO2642 DN 08/12/22-New Method of Item Label Desc Formatting.
  CASE;

  // IF LCL.Status Flag 1  Y/N is Yes
  IF LCL.Status_Flag_1_Y_N = 'Y';

  //?DO2642 DN 11/15/22-Pass in ED Live with PHIS.
  EXECUTE FUNCTION(Fmt Item Label Line1&2 IF) TYPE(EXCINTFUN)                     AC2205984;
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.ED_Item_Label_Line_1);
  PARAMETER(WRK.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Live_with_PHIS);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  {
   //?Execute internal function

   //?Initialize.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 1 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_1_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CND.Not Entered
   PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Item Label Line Info USR = CND.Not Entered
   LCL.Item_Label_Line_Info_USR = *BLANK;

   // LCL.Position 33 Text USR = CND.Not Entered
   LCL.Position_33_Text_USR = *BLANK;

   // LCL.Last 6 Bytes USR = CND.Not Entered
   LCL.Last_6_Bytes_USR = *BLANK;

   ENDIF;

   //?Format Item Label Line 1 & 2 with Item Code at the End if Spaces Avail.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?DO2642 DN 11/14/22-Removed 'Chilled/Frozen' Text if Exist.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Item Label Line 1 = PAR.ED Item Label Line 1
   LCL.ED_Item_Label_Line_1 = PAR.ED_Item_Label_Line_1;

   // LCL.ED Chilled/Frozen Text = SUBSTRING(PAR.ED Item Label Line 1,CON.1,CON.7)
   LCL.ED_Chilled_Frozen_Text = SUBSTRING(PAR.ED_Item_Label_Line_1:1:7);

   //?Chilled Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Chilled
   IF LCL.ED_Chilled_Frozen_Text = 'Chilled';

   // OR LCL.ED Chilled/Frozen Text is CHILLED All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'CHILLED';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.9,CON.24)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:9:24);

   ENDIF;

   //?Frozen Text Exist?
   CASE;

   // IF LCL.ED Chilled/Frozen Text is Frozen
   IF LCL.ED_Chilled_Frozen_Text = 'Frozen';

   // OR LCL.ED Chilled/Frozen Text is FROZEN All Caps
   OR LCL.ED_Chilled_Frozen_Text = 'FROZEN';

   // LCL.ED Item Label Line 1 = SUBSTRING(LCL.ED Item Label Line 1,CON.8,CON.25)
   LCL.ED_Item_Label_Line_1 = SUBSTRING(LCL.ED_Item_Label_Line_1:8:25);

   ENDIF;

   ENDIF;

   //?Concat Item Label Line 1 & 2 and append the Item Code at the end if
   //?there is 6 available spaces left. If no space avail for Item Code,
   //?Business must manually update this info in PHIS.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?Values with more than 64 characters will be truncated. Business agrees.
   //?W116174 DN 12/12/22-Undo word wrapping & word splitting. Commented out.
   //?W116174 DN 12/12/22-Populate Item Label Lines as is.
   // PAR.ED Item Label Line 1 USR = LCL.ED Item Label Line 1
   PAR.ED_Item_Label_Line_1_USR = LCL.ED_Item_Label_Line_1;

   // PAR.ED Item Label Line 2 USR = PAR.ED Item Label Line 2
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2;

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   CASE;

   // IF PAR.ED Live with PHIS is yes
   IF PAR.ED_Live_with_PHIS = 'Y';

   //?DO2642 DN 11/15/22-Do Not Concat Item Code if Country is Live with PHIS=Y.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Convert Item Code to Alpha.
   // LCL.Item Code 5.0 = PAR.ED Item Code
   LCL.Item_Code_5_0 = PAR.ED_Item_Code;

   // LCL.Item Code 5A = CVTVAR(LCL.Item Code 5.0)
   LCL.Item_Code_5A = CVTVAR(LCL.Item_Code_5_0);

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   CASE;

   // IF PAR.ED Item Label Line 2 USR is Not Entered
   IF PAR.ED_Item_Label_Line_2_USR = *BLANK;

   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 1 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_1_USR:27:6);

   //?Append Item Code to Label Line 1 Else Line 2.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 1 USR = CONCAT(PAR.ED Item Label Line 1 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_1_USR = PAR.ED_Item_Label_Line_1_USR + LCL.Item_Code_5A (1);

   //?Append Item Code to Label Line 1 Else Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.ED Item Label Line 2 USR = LCL.Item Code 5A
   PAR.ED_Item_Label_Line_2_USR = LCL.Item_Code_5A;

   ENDIF;

   //?Check Label Line 1 Last 6 Bytes is Blank Else Check Label Line 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Check Label Line 2 Last 6 Bytes.
   // LCL.Last 6 Bytes USR = SUBSTRING(PAR.ED Item Label Line 2 USR,CON.27,CON.6)
   LCL.Last_6_Bytes_USR = SUBSTRING(PAR.ED_Item_Label_Line_2_USR:27:6);

   //?Append Item Code to Label Line 2 Else Truncate Item Code.
   CASE;

   // IF LCL.Last 6 Bytes USR is Not Entered
   IF LCL.Last_6_Bytes_USR = *BLANK;

   // PAR.ED Item Label Line 2 USR = CONCAT(PAR.ED Item Label Line 2 USR,LCL.Item Code 5A,CON.1)
   PAR.ED_Item_Label_Line_2_USR = PAR.ED_Item_Label_Line_2_USR + LCL.Item_Code_5A (1);

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  // PAR.ED Product UOM = CON.Lbs
  PAR.ED_Product_UOM = 'Lbs';

  // PAR.ED Product Pkg Type = CON.BOXES
  PAR.ED_Product_Pkg_Type = 'BOXES';

  // PAR.ED Product Net Weight lbs = DB1.Weight Shipped Total * CON.1 *Rounded
  PAR.ED_Product_Net_Weight_lbs = DB1.Weight_Shipped_Total * 1 'H';

  // PAR.ED Product Net Weight MT = DB1.Weight Shipped Total / CON.2204.6 *
  PAR.ED_Product_Net_Weight_MT = DB1.Weight_Shipped_Total / 2204.6;

  // PAR.ED Product Nbr of Pkgs = DB1.Quantity Shipped Total
  PAR.ED_Product_Nbr_of_Pkgs = DB1.Quantity_Shipped_Total;

  // Compute: Total Nbr Pieces
  PAR.ED_Total_Nbr_of_Pieces = DB1.Quantity_Shipped_Total * ( PAR.ED_Pieces_per_Bag
  * PAR.ED_Bags_per_Unit );

  // PAR.ED Product Unit Price = DB1.Unit Price
  PAR.ED_Product_Unit_Price = DB1.Unit_Price;

  // PAR.ED Producet Extended Amt = DB1.Extended Amount
  PAR.ED_Producet_Extended_Amt = DB1.Extended_Amount;

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PLTESTNO');
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?* Item Str Class validation - use group
  CASE;

  // IF PAR.Item Structure Group Code is Edible Rendering
  IF PAR.Item_Structure_Group_Code = 755;

  // OR PAR.Item Structure Class Code is EQ 772
  OR PAR.Item_Structure_Class_Code = 772;

  // PAR.ED Chilled/Frozen Text = CON.*BLANK
  PAR.ED_Chilled_Frozen_Text = *BLANK;

  // IF PAR.Warehouse Type is Fresh
  IF PAR.Warehouse_Type = 'FR';

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.CHILLED
  PAR.ED_Chilled_Frozen_Text = 'CHILLED';

  // IF PAR.Warehouse Type is Frozen
  IF PAR.Warehouse_Type = 'FZ';

  //?DO2642 DN 10/13/22-Use Uppercase.
  // PAR.ED Chilled/Frozen Text = CON.FROZEN
  PAR.ED_Chilled_Frozen_Text = 'FROZEN';

  ENDIF;

  // PAR.ED Unmarked Txt = CON.Unmarked
  PAR.ED_Unmarked_Txt = 'Unmarked';

  CASE;

  // IF DB1.Country Code is Canada
  IF DB1.Country_Code = 'CAN';

  // PAR.ED Unmarked Txt = CON.Unstamped
  PAR.ED_Unmarked_Txt = 'Unstamped';

  ENDIF;

  //?NEW Package type for FSIS V2
  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  // PAR.ED Product Pkg Type = CND.COMBO
  PAR.ED_Product_Pkg_Type = 'COM';

  //?NEW Package type for FSIS V2
  // IF DB1.U/M - Ordered is Cases
  IF DB1.U_M_Ordered = 'CS';

  // PAR.ED Product Pkg Type = CND.CASE
  PAR.ED_Product_Pkg_Type = 'CS';

  //?NEW Package type for FSIS V2
  // IF DB1.U/M - Ordered is EQ Boxes
  IF DB1.U_M_Ordered = 'BX';

  // PAR.ED Product Pkg Type = CND.Box
  PAR.ED_Product_Pkg_Type = 'BX';

  //?NEW Package type for FSIS V2
  // IF DB1.U/M - Ordered is Each
  IF DB1.U_M_Ordered = 'EA';

  // PAR.ED Product Pkg Type = CND.Box
  PAR.ED_Product_Pkg_Type = 'BX';

  //?NEW Package type for FSIS V2
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.ED Product Pkg Type = CND.Box
  PAR.ED_Product_Pkg_Type = 'BX';

  ENDIF;

  //?*** Calc Gross Weight - if weight shipped total ne -0-
  //?Gross Weight
  CASE;

  // IF DB1.Weight Shipped Total is Not equal zero
  IF DB1.Weight_Shipped_Total <> *ZERO;

  EXECUTE FUNCTION(RTV Sum Gross Wt Ord RT) TYPE(RTVOBJ) FILE(OMFNCPP)            AC1927401;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(WRK.Gross_Weight_USR_9_1);
  {
   //?USER: Initialize routine

   //?RMC 3/17/09  new for exp docs
   MOVE *ALL (To: PAR From: CON);

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PAR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR + DB1.Manifest Gross Weight
   PAR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR + DB1.Manifest_Gross_Weight;

  }

  CASE;

  // IF WRK.Gross Weight USR 9.1 is not entered
  IF WRK.Gross_Weight_USR_9_1 = *ZERO;

  // WRK.Gross Weight USR 9.1 = DB1.Weight Shipped Total * CON.1 *Rounded
  WRK.Gross_Weight_USR_9_1 = DB1.Weight_Shipped_Total * 1 'H';

  //?misc tare weight
  EXECUTE FUNCTION(Rtv Tare Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1228249;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.Misc_Tare_Weight);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  // WRK.Misc Tare Weight = WRK.Misc Tare Weight * DB1.Quantity Scheduled *Rounded
  WRK.Misc_Tare_Weight = WRK.Misc_Tare_Weight * DB1.Quantity_Scheduled 'H';

  // WRK.Gross Weight USR 9.1 = WRK.Gross Weight USR 9.1 + WRK.Misc Tare Weight
  WRK.Gross_Weight_USR_9_1 = WRK.Gross_Weight_USR_9_1 + WRK.Misc_Tare_Weight;

  //?box tare weight
  EXECUTE FUNCTION(RTV Item Box Tare Wgt  RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1379982;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(WRK.Unit_Weight);
  {
   //?USER: Initialize routine

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   //?USER: Process Data record

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   EXECUTE FUNCTION(RTV Type/Pack/Unit Wgt RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1379988;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Component_Item_Code);
   PARAMETER(PAR.Unit_Weight);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Package_Type_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.Item Type Code is Packaging and Supplies
   IF PAR.Item_Type_Code = 'PS';

   // AND PAR.Package Type Code is Box
   AND PAR.Package_Type_Code = 'B';

   QUIT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Unit Weight = CON.*ZERO
   PAR.Unit_Weight = *ZERO;

   ENDIF;

   //?USER: Exit processing

   // PAR.Unit Weight = PAR.Unit Weight USR
   PAR.Unit_Weight = PAR.Unit_Weight_USR;

  }

  // WRK.Unit Weight = DB1.Quantity Scheduled * WRK.Unit Weight *Rounded
  WRK.Unit_Weight = DB1.Quantity_Scheduled * WRK.Unit_Weight 'H';

  // WRK.Gross Weight USR 9.1 = WRK.Gross Weight USR 9.1 + WRK.Unit Weight
  WRK.Gross_Weight_USR_9_1 = WRK.Gross_Weight_USR_9_1 + WRK.Unit_Weight;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + WRK.Gross Weight USR 9.1
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + WRK.Gross_Weight_USR_9_1;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Gross Weight USR 9.1 = PAR.Gross Weight USR 9.1 + WRK.Gross Weight USR 9.1
  PAR.Gross_Weight_USR_9_1 = PAR.Gross_Weight_USR_9_1 + WRK.Gross_Weight_USR_9_1;

  ENDIF;

  ENDIF;

  //?***
  //? Load default MAX qty and weight if  NOT shipped
  CASE;

  // IF LCL.Status Flag 14 Y/N is Yes
  IF LCL.Status_Flag_14_Y_N = 'Y';

  // AND PAR.ED Export Document Type is Application for Export
  AND PAR.ED_Export_Document_Type = 'A';

  CASE;

  // IF DB1.U/M - Ordered is Combos
  IF DB1.U_M_Ordered = 'CB';

  //?S14759 DN 04/08/19-Externalize Combos Wgt/Qty in the Company Values File.
  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPCBWT');
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPCBQT');
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?S14759 DN 04/08/19-Externalize Box Wgt/Qty in the Company Values File.
  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPBXWT');
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(RTV Numeric Value 2    RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC2169947;
  PARAMETER(DB1.Company_Number);
  PARAMETER('MPGAPPBXQT');
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  ENDIF;

  //?***
  //?***  ACCUM PACKAGES AND WEIGHT HERE - SO IT GETS THE DEFAULT MAX
  // PAR.ED Total Net Weight MT = PAR.ED Total Net Weight MT + PAR.ED Product Net Weight MT
  PAR.ED_Total_Net_Weight_MT = PAR.ED_Total_Net_Weight_MT + PAR.ED_Product_Net_Weight_MT;

  // PAR.ED Nbr of Packages = PAR.ED Nbr of Packages + PAR.ED Product Nbr of Pkgs
  PAR.ED_Nbr_of_Packages = PAR.ED_Nbr_of_Packages + PAR.ED_Product_Nbr_of_Pkgs;

  // PAR.ED Invoice Total = PAR.ED Invoice Total + DB1.Extended Amount
  PAR.ED_Invoice_Total = PAR.ED_Invoice_Total + DB1.Extended_Amount;

  // PAR.ED Total Net Weight lbs = PAR.ED Total Net Weight lbs + PAR.ED Product Net Weight lbs
  PAR.ED_Total_Net_Weight_lbs = PAR.ED_Total_Net_Weight_lbs
  + PAR.ED_Product_Net_Weight_lbs;

  //?***
  //?Date of Slaughter from processing date
  DO;

  //?Get oldest and most recent production dates for the order's items
  EXECUTE FUNCTION(Rtv Prod Dt Rn f/Or/It RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1629217;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER('Y');
  {
   //?USER: Process Data record

   //?dont adjust if getting production date par.status is NO
   CASE;

   // IF PAR.Status Flag 4  Y/N is no
   IF PAR.Status_Flag_4_Y_N = 'N';

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Variety_Rendered_Cut);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Variety/Rendered/Cut is Cut
   IF LCL.Variety_Rendered_Cut = 'C';

   EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Production_Date);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag = CND.Yes
    WRK.First_Time_Flag = 'Y';

    //?USER: Process Data record

    CASE;

    // IF WRK.First Time Flag is Yes
    IF WRK.First_Time_Flag = 'Y';

    // WRK.First Time Flag = CND.NO
    WRK.First_Time_Flag = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Kill Day Status is yes
    IF DB1.Kill_Day_Status = 'Y';

    // PAR.Kill Date = DB1.Plant Date of Last Order
    PAR.Kill_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?Save earliest date
   CASE;

   // IF PAR.Date From             USR EQ WRK.ZERO
   IF PAR.Date_From_USR = WRK.ZERO;

   // OR LCL.Production Date LT PAR.Date From             USR
   OR LCL.Production_Date < PAR.Date_From_USR;

   // PAR.Date From             USR = LCL.Production Date
   PAR.Date_From_USR = LCL.Production_Date;

   ENDIF;

   //?Save latest date
   CASE;

   // IF LCL.Production Date GT PAR.Date To               USR
   IF LCL.Production_Date > PAR.Date_To_USR;

   // PAR.Date To               USR = LCL.Production Date
   PAR.Date_To_USR = LCL.Production_Date;

   ENDIF;

  }

  //?* format dates
  CASE;

  // IF LCL.Date From             USR is Entered
  IF LCL.Date_From_USR <> *ZERO;

  // Call program CLC Format Date Range  XF.
  CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER(LCL.Text_USR_40);
  PARAMETER(PAR.ED_Slg_Proc_Date_Format);

  //?* format dates
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text USR 40 = CON.*BLANK
  LCL.Text_USR_40 = *BLANK;

  ENDIF;

  // PAR.ED Date of Slaughter Dtl = LCL.Text USR 40
  PAR.ED_Date_of_Slaughter_Dtl = LCL.Text_USR_40;

  //?* AUS form 9115-2
  // WRK.Date From Alpha       USR = CVTVAR(LCL.Date From             USR)
  WRK.Date_From_Alpha_USR = CVTVAR(LCL.Date_From_USR);

  // WRK.Date To Alpha         USR = CVTVAR(LCL.Date To               USR)
  WRK.Date_To_Alpha_USR = CVTVAR(LCL.Date_To_USR);

  //?* format dates
  CASE;

  // IF WRK.Date From Alpha       USR NE WRK.Date To Alpha         USR
  IF WRK.Date_From_Alpha_USR <> WRK.Date_To_Alpha_USR;

  // WRK.Text USR 12 = CONCAT(WRK.Date From Alpha       USR,CON.To,CON.1)
  WRK.Text_USR_12 = WRK.Date_From_Alpha_USR + 'To' (1);

  // PAR.ED Slaughter Date Range = CONCAT(WRK.Text USR 12,WRK.Date To Alpha         USR,CON.1)
  PAR.ED_Slaughter_Date_Range = WRK.Text_USR_12 + WRK.Date_To_Alpha_USR (1);

  //?* format dates
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?* Don't format TO date if same as FROM date
  // PAR.ED Slaughter Date Range = WRK.Date From Alpha       USR
  PAR.ED_Slaughter_Date_Range = WRK.Date_From_Alpha_USR;

  ENDIF;

  ENDDO;

  //?Date of Production from processing date   RMC 5/3/6 added for russia
  DO;

  //?* Update prod date range for russian 9450
  //?* Get oldest and most recent production dates for the order's items
  EXECUTE FUNCTION(Rtv Prod Dt Rn f/Or/It RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1629217;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER('N');
  {
   //?USER: Process Data record

   //?dont adjust if getting production date par.status is NO
   CASE;

   // IF PAR.Status Flag 4  Y/N is no
   IF PAR.Status_Flag_4_Y_N = 'N';

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Variety/Rend/Cut  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1682116;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Variety_Rendered_Cut);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Variety/Rendered/Cut is Cut
   IF LCL.Variety_Rendered_Cut = 'C';

   EXECUTE FUNCTION(RTV Kill Dt w/Prd Dt   RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1301549;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Production_Date);
   PARAMETER(LCL.Production_Date);
   {
    //?USER: Initialize routine

    // WRK.First Time Flag = CND.Yes
    WRK.First_Time_Flag = 'Y';

    //?USER: Process Data record

    CASE;

    // IF WRK.First Time Flag is Yes
    IF WRK.First_Time_Flag = 'Y';

    // WRK.First Time Flag = CND.NO
    WRK.First_Time_Flag = 'N';

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF DB1.Kill Day Status is yes
    IF DB1.Kill_Day_Status = 'Y';

    // PAR.Kill Date = DB1.Plant Date of Last Order
    PAR.Kill_Date = DB1.Post_to_G_L_Date;

    QUIT;

    ENDIF;

    ENDIF;

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Production Date = DB1.Production Date
   LCL.Production_Date = DB1.Production_Date;

   ENDIF;

   ENDIF;

   //?Save earliest date
   CASE;

   // IF PAR.Date From             USR EQ WRK.ZERO
   IF PAR.Date_From_USR = WRK.ZERO;

   // OR LCL.Production Date LT PAR.Date From             USR
   OR LCL.Production_Date < PAR.Date_From_USR;

   // PAR.Date From             USR = LCL.Production Date
   PAR.Date_From_USR = LCL.Production_Date;

   ENDIF;

   //?Save latest date
   CASE;

   // IF LCL.Production Date GT PAR.Date To               USR
   IF LCL.Production_Date > PAR.Date_To_USR;

   // PAR.Date To               USR = LCL.Production Date
   PAR.Date_To_USR = LCL.Production_Date;

   ENDIF;

  }

  //?* format dates
  CASE;

  // IF LCL.Date From             USR is Entered
  IF LCL.Date_From_USR <> *ZERO;

  // Call program CLC Format Date Range  XF.
  CALL PROGRAM(CLC Format Date Range  XF) ('PDP4XFR');
  PARAMETER(LCL.Date_From_USR);
  PARAMETER(LCL.Date_To_USR);
  PARAMETER(LCL.Text_USR_40);
  PARAMETER(PAR.ED_Slg_Proc_Date_Format);

  //?* format dates
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Text USR 40 = CON.*BLANK
  LCL.Text_USR_40 = *BLANK;

  ENDIF;

  //?* RUS form 9450-3
  // WRK.Date From Alpha       USR = CVTVAR(LCL.Date From             USR)
  WRK.Date_From_Alpha_USR = CVTVAR(LCL.Date_From_USR);

  // WRK.Date To Alpha         USR = CVTVAR(LCL.Date To               USR)
  WRK.Date_To_Alpha_USR = CVTVAR(LCL.Date_To_USR);

  //?*format dates
  CASE;

  // IF WRK.Date From Alpha       USR NE WRK.Date To Alpha         USR
  IF WRK.Date_From_Alpha_USR <> WRK.Date_To_Alpha_USR;

  // WRK.Text USR 12 = CONCAT(WRK.Date From Alpha       USR,CON.To,CON.1)
  WRK.Text_USR_12 = WRK.Date_From_Alpha_USR + 'To' (1);

  // PAR.ED Production Date Range = LCL.Text USR 40
  PAR.ED_Production_Date_Range = LCL.Text_USR_40;

  //?*format dates
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?* Don't format TO date if same as FROM date
  // PAR.ED Production Date Range = WRK.Date From Alpha       USR
  PAR.ED_Production_Date_Range = WRK.Date_From_Alpha_USR;

  ENDIF;

  ENDDO;

  EXECUTE FUNCTION(Rtv Shipping Marks    RT) TYPE(RTVOBJ) FILE(PDMRREP)           AC1633493;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.ED_Shipping_Marks_Txt);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?* Default if shipping marks are blanks (rec not found)
  CASE;

  // IF LCL.ED Shipping Marks Txt is Blank
  IF LCL.ED_Shipping_Marks_Txt = *BLANK;

  // LCL.ED Shipping Marks Txt = PAR.ED Shipping Marks Txt
  LCL.ED_Shipping_Marks_Txt = PAR.ED_Shipping_Marks_Txt;

  ENDIF;

  //?RMC 5/24/18 for FSIS V2 - Set HACCP Code
  DO;

  // LCL.Position = CON.*ZERO
  LCL.Position = *ZERO;

  // LCL.Position USR = CON.*ZERO
  LCL.Position_USR = *ZERO;

  EXECUTE FUNCTION(Rtv Class             RT) TYPE(RTVOBJ) FILE(PBBNREP)           AC2151832;
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.DP_Product_Class);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.Search Text USR = LCL.DP Product Class
  LCL.Search_Text_USR = LCL.DP_Product_Class;

  // LCL.Search Pattern USR = CON.Ground
  LCL.Search_Pattern_USR = 'Ground';

  // LCL.Scan Length USR = CON.6
  LCL.Scan_Length_USR = 6;

  // LCL.Start Position USR = CON.1
  LCL.Start_Position_USR = 1;

  // Execute function Scn Text              US.
  EXECUTE FUNCTION(Scn Text              US) TYPE(EXCUSRSRC) ('PPB8UFR');
  PARAMETER(LCL.Scan_Length_USR);
  PARAMETER(LCL.Start_Position_USR);
  PARAMETER(LCL.Search_Pattern_USR);
  PARAMETER(LCL.Search_Text_USR);
  PARAMETER(LCL.Position_USR);
  {
   C                     Z-ADD*ZEROS    POS     50
   C                     MOVE #ILN      LEN     50
   C                     MOVE #IST      ST      50
   C           #IPTN:LEN SCAN #IDTA:ST  POS
   C                     MOVE POS       #OU3NX
  }

  // LCL.Search Pattern USR = CON.Diced
  LCL.Search_Pattern_USR = 'Diced';

  // LCL.Scan Length USR = CON.5
  LCL.Scan_Length_USR = 5;

  // LCL.Start Position USR = CON.1
  LCL.Start_Position_USR = 1;

  // Execute function Scn Text              US.
  EXECUTE FUNCTION(Scn Text              US) TYPE(EXCUSRSRC) ('PPB8UFR');
  PARAMETER(LCL.Scan_Length_USR);
  PARAMETER(LCL.Start_Position_USR);
  PARAMETER(LCL.Search_Pattern_USR);
  PARAMETER(LCL.Search_Text_USR);
  PARAMETER(LCL.Position);
  {
   C                     Z-ADD*ZEROS    POS     50
   C                     MOVE #ILN      LEN     50
   C                     MOVE #IST      ST      50
   C           #IPTN:LEN SCAN #IDTA:ST  POS
   C                     MOVE POS       #OU3NX
  }

  CASE;

  // IF LCL.Position USR is Greater than zero
  IF LCL.Position_USR > *ZERO;

  // OR LCL.Position is Greater than zero
  OR LCL.Position > *ZERO;

  // LCL.ED HACCP Category = CND.Raw Product-Ground (03B)
  LCL.ED_HACCP_Category = '03B';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.ED HACCP Category = CND.Raw Product-Nt Grnd(03C)
  LCL.ED_HACCP_Category = '03C';

  ENDIF;

  ENDDO;

  //?12/20/18 DN R13944-Get 'Translated Item Desc' Language if Present.
  CASE;

  // IF NOT PAR.ED Xlate Desc to Country is Not Entered
  IF ! PAR.ED_Xlate_Desc_to_Country = *BLANK;

  //?DO2642 DN 04/19/22-Added ED Language Xlate Desc 2 as Output Parm.
  // Call program RTV Translated Item DscXF.
  CALL PROGRAM(RTV Translated Item DscXF) ('PUKLXFR');
  PARAMETER(PAR.ED_Xlate_Desc_to_Country);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(LCL.ED_Language_Xlate_Desc);

  ENDIF;

  //?Create Detail if not C of O (JPN Cert of Origin doesnt need detail)
  CASE;

  // IF PAR.ED Export Document Type is Certificate of Origin
  IF PAR.ED_Export_Document_Type = 'O';

  //?Create Detail if not C of O (JPN Cert of Origin doesnt need detail)
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?12/20/18 DN R13944-Pass in ED Language Xlate Desc.
  //?05/01/19 DN R14822-Change Access Path to Read by PDMSREL1 instead PDMSREL2
  //?04/19/22 DN DO2642-Pass in ED Language Xlate Desc 2.
  EXECUTE FUNCTION(Rtv/Chg/Crt ExpOrdDtls RT) TYPE(RTVOBJ) FILE(PDMSREP)          AC1612206;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.ED_Item_Label_Line_1);
  PARAMETER(PAR.ED_Item_Label_Line_2);
  PARAMETER(PAR.ED_Chilled_Frozen_Text);
  PARAMETER(PAR.ED_Unmarked_Txt);
  PARAMETER(PAR.ED_Product_Net_Weight_lbs);
  PARAMETER(PAR.ED_Product_Net_Weight_MT);
  PARAMETER(PAR.ED_Product_UOM);
  PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
  PARAMETER(PAR.ED_Product_Pkg_Type);
  PARAMETER(LCL.ED_Shipping_Marks_Txt);
  PARAMETER(PAR.ED_Pieces_per_Bag);
  PARAMETER(PAR.ED_Bags_per_Unit);
  PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
  PARAMETER(PAR.ED_Product_Unit_Price);
  PARAMETER(PAR.ED_Producet_Extended_Amt);
  PARAMETER(PAR.ED_Print_Status);
  PARAMETER(PAR.ED_Plant_Number_Dtl);
  PARAMETER(LCL.ED_Language_Xlate_Desc_2);
  PARAMETER(PAR.ED_Consignee_Address_Nbr);
  PARAMETER(PAR.ED_Date_of_Slaughter_Dtl);
  PARAMETER(LCL.ED_HACCP_Category);
  PARAMETER(PAR.ED_Slaughter_Date_Range);
  PARAMETER(PAR.ED_Production_Date_Range);
  PARAMETER(LCL.ED_Language_Xlate_Desc);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing if Data record not found

   //?12/20/18 DN R13944-Update ED Language Xlate Desc.
   //?04/19/22 DN DO2642-Update ED Language Xlate Desc 2.
   EXECUTE FUNCTION(Crt Exp Doc Order Dtl  CR) TYPE(CRTOBJ) FILE(PDMSREP)          AC1524035;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.ED_Item_Code);
   PARAMETER(PAR.ED_Item_Label_Line_1);
   PARAMETER(PAR.ED_Item_Label_Line_2);
   PARAMETER(PAR.ED_Chilled_Frozen_Text);
   PARAMETER(PAR.ED_Unmarked_Txt);
   PARAMETER(PAR.ED_Product_Net_Weight_lbs);
   PARAMETER(PAR.ED_Product_Net_Weight_MT);
   PARAMETER(PAR.ED_Product_UOM);
   PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
   PARAMETER(PAR.ED_Product_Pkg_Type);
   PARAMETER(PAR.ED_Shipping_Marks_Txt);
   PARAMETER(PAR.ED_Pieces_per_Bag);
   PARAMETER(PAR.ED_Bags_per_Unit);
   PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
   PARAMETER(PAR.ED_Product_Unit_Price);
   PARAMETER(PAR.ED_Producet_Extended_Amt);
   PARAMETER('N');
   PARAMETER(PAR.ED_Plant_Number_Dtl);
   PARAMETER(PAR.ED_Language_Xlate_Desc_2);
   PARAMETER(*ZERO);
   PARAMETER(PAR.ED_Date_of_Slaughter_Dtl);
   PARAMETER(PAR.ED_HACCP_Category);
   PARAMETER(PAR.ED_Slaughter_Date_Range);
   PARAMETER(PAR.ED_Production_Date_Range);
   PARAMETER(LCL.ED_Product_UID);
   PARAMETER(PAR.ED_Language_Xlate_Desc);
   PARAMETER(LCL.ED_Unused_Status_1);
   PARAMETER(LCL.ED_Unused_Status_2);
   PARAMETER(LCL.ED_Harmonized_Tariff_Cde);
   PARAMETER(LCL.ED_Nbr_of_Packing_Units);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER('A');
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // DB1.Record Status = CND.Active
    DB1.Record_Status = 'A';

    //?USER: Processing after Data update

    // Call program Rtv/Chg Hdr Shpd Amts XF.
    CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.ED_Export_Document_Type);
    PARAMETER(DB1.Country_Code);

   }

   //?USER: Process Data record

   //?05/01/19 DN R14822-Update Only. Do NOT Create Dtl Record Here.
   CASE;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?Date of Slaughter.
   CASE;

   // IF PAR.ED Date of Slaughter Dtl is Not Entered
   IF PAR.ED_Date_of_Slaughter_Dtl = *BLANK;

   // LCL.ED Date of Slaughter Dtl = DB1.ED Date of Slaughter Dtl
   LCL.ED_Date_of_Slaughter_Dtl = DB1.ED_Date_of_Slaughter_Dtl;

   //?Date of Slaughter.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Date of Slaughter Dtl = PAR.ED Date of Slaughter Dtl
   LCL.ED_Date_of_Slaughter_Dtl = PAR.ED_Date_of_Slaughter_Dtl;

   ENDIF;

   //?Production Date Range.
   CASE;

   // IF PAR.ED Production Date Range is Not Entered
   IF PAR.ED_Production_Date_Range = *BLANK;

   // LCL.ED Production Date Range = DB1.ED Production Date Range
   LCL.ED_Production_Date_Range = DB1.ED_Production_Date_Range;

   //?Production Date Range.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Production Date Range = PAR.ED Production Date Range
   LCL.ED_Production_Date_Range = PAR.ED_Production_Date_Range;

   ENDIF;

   //?Language Xlate Desc.   12/21/18 DN R13944-Maintain Xlate Desc.
   CASE;

   // IF DB1.ED Language Xlate Desc is Entered
   IF DB1.ED_Language_Xlate_Desc <> *BLANK;

   // LCL.ED Language Xlate Desc = DB1.ED Language Xlate Desc
   LCL.ED_Language_Xlate_Desc = DB1.ED_Language_Xlate_Desc;

   //?Language Xlate Desc.   12/21/18 DN R13944-Maintain Xlate Desc.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Language Xlate Desc = PAR.ED Language Xlate Desc
   LCL.ED_Language_Xlate_Desc = PAR.ED_Language_Xlate_Desc;

   ENDIF;

   //?Language Xlate Desc 2. 04/19/22 DN DO2642-Maintain Xlate Desc 2.
   CASE;

   // IF DB1.ED Language Xlate Desc 2 is Entered
   IF DB1.ED_Language_Xlate_Desc_2 <> *BLANK;

   // LCL.ED Language Xlate Desc 2 = DB1.ED Language Xlate Desc 2
   LCL.ED_Language_Xlate_Desc_2 = DB1.ED_Language_Xlate_Desc_2;

   //?Language Xlate Desc 2. 04/19/22 DN DO2642-Maintain Xlate Desc 2.
   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Language Xlate Desc 2 = PAR.ED Language Xlate Desc 2
   LCL.ED_Language_Xlate_Desc_2 = PAR.ED_Language_Xlate_Desc_2;

   ENDIF;

   CASE;

   // IF DB1.ED Export Document Type is Form 9060-7 (Casings)
   IF DB1.ED_Export_Document_Type = 'G';

   // LCL.ED Product Nbr of Pkgs = DB1.ED Product Nbr of Pkgs
   LCL.ED_Product_Nbr_of_Pkgs = DB1.ED_Product_Nbr_of_Pkgs;

   // LCL.ED Product Net Weight MT = DB1.ED Product Net Weight MT
   LCL.ED_Product_Net_Weight_MT = DB1.ED_Product_Net_Weight_MT;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.ED Product Nbr of Pkgs = PAR.ED Product Nbr of Pkgs
   LCL.ED_Product_Nbr_of_Pkgs = PAR.ED_Product_Nbr_of_Pkgs;

   // LCL.ED Product Net Weight MT = PAR.ED Product Net Weight MT
   LCL.ED_Product_Net_Weight_MT = PAR.ED_Product_Net_Weight_MT;

   ENDIF;

   //?05/25/18 DN R13074-Change to not update Item Label Line 1/2,
   //?  Chilled/Frozen Text, Pkg Type & HACCP Category.
   //?04/20/22 DN DO2642-Change to Update ED Language Xlate Desc 2.
   EXECUTE FUNCTION(Chg Exp Doc Order Dtl  CH) TYPE(CHGOBJ) FILE(PDMSREP)          AC1524036;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.ED_Export_Document_Type);
   PARAMETER(PAR.Country_Code);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.ED_Item_Code);
   PARAMETER(DB1.ED_Item_Label_Line_1);
   PARAMETER(DB1.ED_Item_Label_Line_2);
   PARAMETER(DB1.ED_Chilled_Frozen_Text);
   PARAMETER(PAR.ED_Unmarked_Txt);
   PARAMETER(PAR.ED_Product_Net_Weight_lbs);
   PARAMETER(LCL.ED_Product_Net_Weight_MT);
   PARAMETER(PAR.ED_Product_UOM);
   PARAMETER(LCL.ED_Product_Nbr_of_Pkgs);
   PARAMETER(PAR.ED_Product_Pkg_Type);
   PARAMETER(PAR.ED_Shipping_Marks_Txt);
   PARAMETER(PAR.ED_Pieces_per_Bag);
   PARAMETER(PAR.ED_Bags_per_Unit);
   PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
   PARAMETER(PAR.ED_Product_Unit_Price);
   PARAMETER(PAR.ED_Producet_Extended_Amt);
   PARAMETER(PAR.ED_Print_Status);
   PARAMETER(DB1.ED_Plant_Number_Dtl);
   PARAMETER(LCL.ED_Language_Xlate_Desc_2);
   PARAMETER(PAR.ED_Consignee_Address_Nbr);
   PARAMETER(LCL.ED_Date_of_Slaughter_Dtl);
   PARAMETER(PAR.ED_HACCP_Category);
   PARAMETER(PAR.ED_Slaughter_Date_Range);
   PARAMETER(LCL.ED_Production_Date_Range);
   PARAMETER(DB1.ED_Product_UID);
   PARAMETER(LCL.ED_Language_Xlate_Desc);
   PARAMETER(DB1.ED_Unused_Status_1);
   PARAMETER(DB1.ED_Unused_Status_2);
   PARAMETER(DB1.ED_Harmonized_Tariff_Cde);
   PARAMETER(DB1.ED_Nbr_of_Packing_Units);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    //?USER: Processing after Data update

    // Call program Rtv/Chg Hdr Shpd Amts XF.
    CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.ED_Export_Document_Type);
    PARAMETER(DB1.Country_Code);

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

}


//?12/20/18 DN R13944-Get 'Translated Item Desc' Language if Present.
CASE;

// IF NOT PAR.ED Xlate Desc to Country is Not Entered
IF ! PAR.ED_Xlate_Desc_to_Country = *BLANK;

//?DO2642 DN 06/10/22-Added ED Language Xlate Desc 2 as Output Parm.
// Call program RTV Translated Item DscXF.
CALL PROGRAM(RTV Translated Item DscXF) ('PUKLXFR');
PARAMETER(PAR.ED_Xlate_Desc_to_Country);
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.ED_Language_Xlate_Desc_2);
PARAMETER(LCL.ED_Language_Xlate_Desc);

ENDIF;

//?05/02/19 DN R14822-Change Access Path to Read by PDMSREL1 instead PDMSREL2
//?06/10/22 DN DO2642-Pass in ED Language Xlate Desc 2.
EXECUTE FUNCTION(Rtv/Chg/Crt ExpOrdDtls RT) TYPE(RTVOBJ) FILE(PDMSREP)          AC1612206;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('E');
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Item_Code);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(PAR.Weight_Shipped_Total);
PARAMETER(*ZERO);
PARAMETER(PAR.U_M_Ordered);
PARAMETER(PAR.Quantity_Shipped_Total);
PARAMETER(LCL.USR_Blank_10);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(WRK.ED_Print_Status);
PARAMETER(*BLANK);
PARAMETER(LCL.ED_Language_Xlate_Desc_2);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(LCL.USR_Blank_10);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(LCL.ED_Language_Xlate_Desc);
PARAMETER(PAR.EDI_Status_1);
PARAMETER(PAR.EDI_Status_2);
PARAMETER(PAR.EDI_Status_3);
PARAMETER('A');
PARAMETER(PAR.Job_Time);
PARAMETER(PAR.User_Id);
PARAMETER(PAR.Job_Name);
PARAMETER(PAR.Job_Date);
{
 //?USER: Processing if Data record not found

 //?12/20/18 DN R13944-Update ED Language Xlate Desc.
 //?04/19/22 DN DO2642-Update ED Language Xlate Desc 2.
 EXECUTE FUNCTION(Crt Exp Doc Order Dtl  CR) TYPE(CRTOBJ) FILE(PDMSREP)          AC1524035;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.ED_Export_Document_Type);
 PARAMETER(PAR.Country_Code);
 PARAMETER(PAR.Order_Sequence_Number);
 PARAMETER(PAR.Order_Secondary_Line_Seq);
 PARAMETER(PAR.ED_Item_Code);
 PARAMETER(PAR.ED_Item_Label_Line_1);
 PARAMETER(PAR.ED_Item_Label_Line_2);
 PARAMETER(PAR.ED_Chilled_Frozen_Text);
 PARAMETER(PAR.ED_Unmarked_Txt);
 PARAMETER(PAR.ED_Product_Net_Weight_lbs);
 PARAMETER(PAR.ED_Product_Net_Weight_MT);
 PARAMETER(PAR.ED_Product_UOM);
 PARAMETER(PAR.ED_Product_Nbr_of_Pkgs);
 PARAMETER(PAR.ED_Product_Pkg_Type);
 PARAMETER(PAR.ED_Shipping_Marks_Txt);
 PARAMETER(PAR.ED_Pieces_per_Bag);
 PARAMETER(PAR.ED_Bags_per_Unit);
 PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
 PARAMETER(PAR.ED_Product_Unit_Price);
 PARAMETER(PAR.ED_Producet_Extended_Amt);
 PARAMETER('N');
 PARAMETER(PAR.ED_Plant_Number_Dtl);
 PARAMETER(PAR.ED_Language_Xlate_Desc_2);
 PARAMETER(*ZERO);
 PARAMETER(PAR.ED_Date_of_Slaughter_Dtl);
 PARAMETER(PAR.ED_HACCP_Category);
 PARAMETER(PAR.ED_Slaughter_Date_Range);
 PARAMETER(PAR.ED_Production_Date_Range);
 PARAMETER(LCL.ED_Product_UID);
 PARAMETER(PAR.ED_Language_Xlate_Desc);
 PARAMETER(LCL.ED_Unused_Status_1);
 PARAMETER(LCL.ED_Unused_Status_2);
 PARAMETER(LCL.ED_Harmonized_Tariff_Cde);
 PARAMETER(LCL.ED_Nbr_of_Packing_Units);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER('A');
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Record Status = CND.Active
  DB1.Record_Status = 'A';

  //?USER: Processing after Data update

  // Call program Rtv/Chg Hdr Shpd Amts XF.
  CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);

 }

 //?USER: Process Data record

 //?05/01/19 DN R14822-Update Only. Do NOT Create Dtl Record Here.
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Date of Slaughter.
 CASE;

 // IF PAR.ED Date of Slaughter Dtl is Not Entered
 IF PAR.ED_Date_of_Slaughter_Dtl = *BLANK;

 // LCL.ED Date of Slaughter Dtl = DB1.ED Date of Slaughter Dtl
 LCL.ED_Date_of_Slaughter_Dtl = DB1.ED_Date_of_Slaughter_Dtl;

 //?Date of Slaughter.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Date of Slaughter Dtl = PAR.ED Date of Slaughter Dtl
 LCL.ED_Date_of_Slaughter_Dtl = PAR.ED_Date_of_Slaughter_Dtl;

 ENDIF;

 //?Production Date Range.
 CASE;

 // IF PAR.ED Production Date Range is Not Entered
 IF PAR.ED_Production_Date_Range = *BLANK;

 // LCL.ED Production Date Range = DB1.ED Production Date Range
 LCL.ED_Production_Date_Range = DB1.ED_Production_Date_Range;

 //?Production Date Range.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Production Date Range = PAR.ED Production Date Range
 LCL.ED_Production_Date_Range = PAR.ED_Production_Date_Range;

 ENDIF;

 //?Language Xlate Desc.   12/21/18 DN R13944-Maintain Xlate Desc.
 CASE;

 // IF DB1.ED Language Xlate Desc is Entered
 IF DB1.ED_Language_Xlate_Desc <> *BLANK;

 // LCL.ED Language Xlate Desc = DB1.ED Language Xlate Desc
 LCL.ED_Language_Xlate_Desc = DB1.ED_Language_Xlate_Desc;

 //?Language Xlate Desc.   12/21/18 DN R13944-Maintain Xlate Desc.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Language Xlate Desc = PAR.ED Language Xlate Desc
 LCL.ED_Language_Xlate_Desc = PAR.ED_Language_Xlate_Desc;

 ENDIF;

 //?Language Xlate Desc 2. 04/19/22 DN DO2642-Maintain Xlate Desc 2.
 CASE;

 // IF DB1.ED Language Xlate Desc 2 is Entered
 IF DB1.ED_Language_Xlate_Desc_2 <> *BLANK;

 // LCL.ED Language Xlate Desc 2 = DB1.ED Language Xlate Desc 2
 LCL.ED_Language_Xlate_Desc_2 = DB1.ED_Language_Xlate_Desc_2;

 //?Language Xlate Desc 2. 04/19/22 DN DO2642-Maintain Xlate Desc 2.
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Language Xlate Desc 2 = PAR.ED Language Xlate Desc 2
 LCL.ED_Language_Xlate_Desc_2 = PAR.ED_Language_Xlate_Desc_2;

 ENDIF;

 CASE;

 // IF DB1.ED Export Document Type is Form 9060-7 (Casings)
 IF DB1.ED_Export_Document_Type = 'G';

 // LCL.ED Product Nbr of Pkgs = DB1.ED Product Nbr of Pkgs
 LCL.ED_Product_Nbr_of_Pkgs = DB1.ED_Product_Nbr_of_Pkgs;

 // LCL.ED Product Net Weight MT = DB1.ED Product Net Weight MT
 LCL.ED_Product_Net_Weight_MT = DB1.ED_Product_Net_Weight_MT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.ED Product Nbr of Pkgs = PAR.ED Product Nbr of Pkgs
 LCL.ED_Product_Nbr_of_Pkgs = PAR.ED_Product_Nbr_of_Pkgs;

 // LCL.ED Product Net Weight MT = PAR.ED Product Net Weight MT
 LCL.ED_Product_Net_Weight_MT = PAR.ED_Product_Net_Weight_MT;

 ENDIF;

 //?05/25/18 DN R13074-Change to not update Item Label Line 1/2,
 //?  Chilled/Frozen Text, Pkg Type & HACCP Category.
 //?04/20/22 DN DO2642-Change to Update ED Language Xlate Desc 2.
 EXECUTE FUNCTION(Chg Exp Doc Order Dtl  CH) TYPE(CHGOBJ) FILE(PDMSREP)          AC1524036;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(PAR.Country_Code);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(PAR.ED_Item_Code);
 PARAMETER(DB1.ED_Item_Label_Line_1);
 PARAMETER(DB1.ED_Item_Label_Line_2);
 PARAMETER(DB1.ED_Chilled_Frozen_Text);
 PARAMETER(PAR.ED_Unmarked_Txt);
 PARAMETER(PAR.ED_Product_Net_Weight_lbs);
 PARAMETER(LCL.ED_Product_Net_Weight_MT);
 PARAMETER(PAR.ED_Product_UOM);
 PARAMETER(LCL.ED_Product_Nbr_of_Pkgs);
 PARAMETER(PAR.ED_Product_Pkg_Type);
 PARAMETER(PAR.ED_Shipping_Marks_Txt);
 PARAMETER(PAR.ED_Pieces_per_Bag);
 PARAMETER(PAR.ED_Bags_per_Unit);
 PARAMETER(PAR.ED_Total_Nbr_of_Pieces);
 PARAMETER(PAR.ED_Product_Unit_Price);
 PARAMETER(PAR.ED_Producet_Extended_Amt);
 PARAMETER(PAR.ED_Print_Status);
 PARAMETER(DB1.ED_Plant_Number_Dtl);
 PARAMETER(LCL.ED_Language_Xlate_Desc_2);
 PARAMETER(PAR.ED_Consignee_Address_Nbr);
 PARAMETER(LCL.ED_Date_of_Slaughter_Dtl);
 PARAMETER(PAR.ED_HACCP_Category);
 PARAMETER(PAR.ED_Slaughter_Date_Range);
 PARAMETER(LCL.ED_Production_Date_Range);
 PARAMETER(DB1.ED_Product_UID);
 PARAMETER(LCL.ED_Language_Xlate_Desc);
 PARAMETER(DB1.ED_Unused_Status_1);
 PARAMETER(DB1.ED_Unused_Status_2);
 PARAMETER(DB1.ED_Harmonized_Tariff_Cde);
 PARAMETER(DB1.ED_Nbr_of_Packing_Units);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 PARAMETER(PAR.Job_Time);
 PARAMETER(PAR.User_Id);
 PARAMETER(PAR.Job_Name);
 PARAMETER(PAR.Job_Date);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  // Call program Rtv/Chg Hdr Shpd Amts XF.
  CALL PROGRAM(Rtv/Chg Hdr Shpd Amts XF) ('POIYXFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.ED_Export_Document_Type);
  PARAMETER(DB1.Country_Code);

 }

 ENDIF;

}


ENDIF;

ENDIF;

