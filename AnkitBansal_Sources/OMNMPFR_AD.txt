// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for OMNMPFR
// ?Date: 14.08.2025 Time: 12:03:13
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?USER: Record selection processing

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Omit Debit and Credit Memos
EXECUTE FUNCTION(RTV Order Types        RT) TYPE(RTVOBJ) FILE(OPEXREP)          AC1168350;
PARAMETER(DB1.Order_Type_Sales);
PARAMETER(WRK.Order_Type_Description);
PARAMETER(WRK.Processing_Cycle_Type);
PARAMETER(WRK.Billing_Activity_Type);
PARAMETER(WRK.Affect_Inventory_Default);
PARAMETER(WRK.Affect_Sales_Doll_Default);
PARAMETER(WRK.Affect_Sales_Pnds_Default);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Billing Activity Type is Credit or Debit Memo
IF WRK.Billing_Activity_Type = '2'/'3';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Confirm Status (Y/N) is Yes
IF PAR.USR_Confirm_Status_Y_N = 'Y';

CASE;

// IF DB1.Quantity Scheduled EQ DB1.Quantity Billed
IF DB1.Quantity_Scheduled = DB1.Quantity_Billed;

// AND DB1.Weight Scheduled EQ DB1.Weight Billed
AND DB1.Weight_Scheduled = DB1.Weight_Billed;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?SEL:  Item Structure Type Code
CASE;

// IF PAR.Item Structure Type Code is Entered
IF PAR.Item_Structure_Type_Code <> *ZERO;

CASE;

// IF PAR.Item Structure Type Code NE DB1.Item Structure Type Code
IF PAR.Item_Structure_Type_Code <> DB1.Item_Structure_Type_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process top of page

// TOP.Company Number = PAR.Company Number Pass   USR
TOP_Company_Number = PAR.Company_Number_Pass_USR;

CASE;

// IF TOP.Company Number is not equal to zero
IF TOP_Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Name = CON.*All
TOP_Company_Name = *All;

ENDIF;

// TOP.Name = TOP.Company Name
TOP_Name = TOP_Company_Name;

// TOP.Company Number     041743 = PAR.Company Number Pass   USR
TOP_Company_Number_041743 = PAR.Company_Number_Pass_USR;

// TOP.USR From Date = PAR.USR From Date
TOP_USR_From_Date = PAR.USR_From_Date;

// TOP.USR To Date = PAR.USR To Date
TOP_USR_To_Date = PAR.USR_To_Date;

// TOP.USR Confirm Status (Y/N) = PAR.USR Confirm Status (Y/N)
TOP_USR_Confirm_Status_Y_N = PAR.USR_Confirm_Status_Y_N;

// TOP.Ship To Customer = PAR.Ship To Customer
TOP_Ship_To_Customer = PAR.Ship_To_Customer;

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(TOP_Ship_To_Name_DRV);
PARAMETER(TOP_Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// TOP.Item Structure Type Code = PAR.Item Structure Type Code
TOP_Item_Structure_Type_Code = PAR.Item_Structure_Type_Code;

EXECUTE FUNCTION(Item Str Type Desc DRV) TYPE(DRVFLD)                           AC1705175;
PARAMETER(TOP_Item_Str_Type_Desc_DRV);
PARAMETER(TOP_Item_Structure_Type_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Str_Type_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF PAR.Item Structure Type Code is Not Entered
IF PAR.Item_Structure_Type_Code = *ZERO;

// TOP.Item Str Type Desc DRV = CON.*ALL
TOP_Item_Str_Type_Desc_DRV = *ALL;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT Prod Structure Type Code header format

// SUPPRESSED PRINT Prod Structure Group Code header format

// SUPPRESSED PRINT Product Structure Class header format

// SUPPRESSED PRINT Shipped Item Code header format

// SUPPRESSED PRINT Accounting Company Number header format

//?USER: On print of detail format

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// WRK.USR Quantity Accumulated = WRK.USR Quantity Accumulated + DB1.Quantity Order
WRK.USR_Quantity_Accumulated = WRK.USR_Quantity_Accumulated + DB1.Quantity_Ordered;

// WRK.USR Weight 9 = DB1.Weight Ordered / CON.1 *Rounded
WRK.USR_Weight_9 = DB1.Weight_Ordered / 1 'H';

// WRK.USR Weight, 9.0 = WRK.USR Weight, 9.0 + WRK.USR Weight 9
WRK.USR_Weight_9_0 = WRK.USR_Weight_9_0 + WRK.USR_Weight_9;

// WRK.USR Quantity Subeded = WRK.USR Quantity Subeded + DB1.Quantity Scheduled
WRK.USR_Quantity_Subeded = WRK.USR_Quantity_Subeded + DB1.Quantity_Scheduled;

// WRK.USR Weight 9 = DB1.Weight Scheduled / CON.1 *Rounded
WRK.USR_Weight_9 = DB1.Weight_Scheduled / 1 'H';

// WRK.USR Weight Subed = WRK.USR Weight Subed + WRK.USR Weight 9
WRK.USR_Weight_Subed = WRK.USR_Weight_Subed + WRK.USR_Weight_9;

// WRK.USR Quantity Shipped = WRK.USR Quantity Shipped + DB1.Quantity Billed
WRK.USR_Quantity_Shipped = WRK.USR_Quantity_Shipped + DB1.Quantity_Billed;

// WRK.USR Weight 9 = DB1.Weight Billed / CON.1 *Rounded
WRK.USR_Weight_9 = DB1.Weight_Billed / 1 'H';

// WRK.USR Weight Shipped = WRK.USR Weight Shipped + WRK.USR Weight 9
WRK.USR_Weight_Shipped = WRK.USR_Weight_Shipped + WRK.USR_Weight_9;

CASE;

// IF DB1.Quantity Scheduled NE DB1.Quantity Billed
IF DB1.Quantity_Scheduled <> DB1.Quantity_Billed;

// WRK.USR Counter = WRK.USR Counter + CON.1
WRK.USR_Counter = WRK.USR_Counter + 1;

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Accounting Company Number totals format

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// SUPPRESSED PRINT Shipped Item Code totals format

CASE;

IF NEW Item_Structure_Class_Code;
EXECUTE FUNCTION(Rtv Item Class Desc    RT) TYPE(RTVOBJ) FILE(OMFAREP)          AC1205440;
PARAMETER(CUR.Item_Structure_Class_Code);
PARAMETER(CUR.USR_Description_New);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.USR Quantity Shorted = WRK.USR Quantity Subeded - WRK.USR Quantity Shipped
WRK.USR_Quantity_Shorted = WRK.USR_Quantity_Subeded - WRK.USR_Quantity_Shipped;

// WRK.USR Weight Shorted = WRK.USR Weight Subed - WRK.USR Weight Shipped
WRK.USR_Weight_Shorted = WRK.USR_Weight_Subed - WRK.USR_Weight_Shipped;

// CUR.USR Quantity Accumulated = WRK.USR Quantity Accumulated
CUR.USR_Quantity_Accumulated = WRK.USR_Quantity_Accumulated;

// CUR.USR Weight, 9.0 = WRK.USR Weight, 9.0
CUR.USR_Weight_9_0 = WRK.USR_Weight_9_0;

// CUR.USR Quantity Shipped = WRK.USR Quantity Shipped
CUR.USR_Quantity_Shipped = WRK.USR_Quantity_Shipped;

// CUR.USR Weight Shipped = WRK.USR Weight Shipped
CUR.USR_Weight_Shipped = WRK.USR_Weight_Shipped;

// CUR.USR Quantity Subeded = WRK.USR Quantity Subeded
CUR.USR_Quantity_Subeded = WRK.USR_Quantity_Subeded;

// CUR.USR Weight Subed = WRK.USR Weight Subed
CUR.USR_Weight_Subed = WRK.USR_Weight_Subed;

// CUR.USR Quantity Shorted = WRK.USR Quantity Shorted
CUR.USR_Quantity_Shorted = WRK.USR_Quantity_Shorted;

// CUR.USR Weight Shorted = WRK.USR Weight Shorted
CUR.USR_Weight_Shorted = WRK.USR_Weight_Shorted;

// CUR.USR Counter = WRK.USR Counter
CUR.USR_Counter = WRK.USR_Counter;

// Print Product Structure Class totals format
PRINT Product Structure Class totals format;

// NXT.USR Quantity Accumulated = NXT.USR Quantity Accumulated + CUR.USR Quantity A
NXT.USR_Quantity_Accumulated = NXT.USR_Quantity_Accumulated                                        +
+ CUR.USR_Quantity_Accumulated;

// NXT.USR Weight, 9.0 = NXT.USR Weight, 9.0 + CUR.USR Weight, 9.0
NXT.USR_Weight_9_0 = NXT.USR_Weight_9_0 + CUR.USR_Weight_9_0;

// NXT.USR Quantity Shipped = NXT.USR Quantity Shipped + CUR.USR Quantity Shipped
NXT.USR_Quantity_Shipped = NXT.USR_Quantity_Shipped + CUR.USR_Quantity_Shipped;

// NXT.USR Weight Shipped = NXT.USR Weight Shipped + CUR.USR Weight Shipped
NXT.USR_Weight_Shipped = NXT.USR_Weight_Shipped + CUR.USR_Weight_Shipped;

// NXT.USR Quantity Subeded = NXT.USR Quantity Subeded + CUR.USR Quantity Subeded
NXT.USR_Quantity_Subeded = NXT.USR_Quantity_Subeded + CUR.USR_Quantity_Subeded;

// NXT.USR Weight Subed = NXT.USR Weight Subed + CUR.USR Weight Subed
NXT.USR_Weight_Subed = NXT.USR_Weight_Subed + CUR.USR_Weight_Subed;

// NXT.USR Quantity Shorted = NXT.USR Quantity Shorted + CUR.USR Quantity Shorted
NXT.USR_Quantity_Shorted = NXT.USR_Quantity_Shorted + CUR.USR_Quantity_Shorted;

// NXT.USR Weight Shorted = NXT.USR Weight Shorted + CUR.USR Weight Shorted
NXT.USR_Weight_Shorted = NXT.USR_Weight_Shorted + CUR.USR_Weight_Shorted;

// NXT.USR Counter = NXT.USR Counter + CUR.USR Counter
NXT.USR_Counter = NXT.USR_Counter + CUR.USR_Counter;

// WRK.USR Counter = CON.*ZERO
WRK.USR_Counter = *ZERO;

// WRK.USR Quantity Accumulated = CON.*ZERO
WRK.USR_Quantity_Accumulated = *ZERO;

// WRK.USR Weight, 9.0 = CON.*ZERO
WRK.USR_Weight_9_0 = *ZERO;

// WRK.USR Quantity Shipped = CON.*ZERO
WRK.USR_Quantity_Shipped = *ZERO;

// WRK.USR Weight Shipped = CON.*ZERO
WRK.USR_Weight_Shipped = *ZERO;

// WRK.USR Quantity Subeded = CON.*ZERO
WRK.USR_Quantity_Subeded = *ZERO;

// WRK.USR Weight Subed = CON.*ZERO
WRK.USR_Weight_Subed = *ZERO;

// WRK.USR Quantity Shorted = CON.*ZERO
WRK.USR_Quantity_Shorted = *ZERO;

// WRK.USR Weight Shorted = CON.*ZERO
WRK.USR_Weight_Shorted = *ZERO;

ENDIF;

CASE;

IF NEW Item_Structure_Group_Code;
EXECUTE FUNCTION(Rtv Group Description  RT) TYPE(RTVOBJ) FILE(OME9REP)          AC1202656;
PARAMETER(CUR.Item_Structure_Group_Code);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(CUR.USR_Prod_Struct_Group_Des);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Prod Structure Group Code totals format
PRINT Prod Structure Group Code totals format;

// NXT.USR Quantity Accumulated = NXT.USR Quantity Accumulated + CUR.USR Quantity A
NXT.USR_Quantity_Accumulated = NXT.USR_Quantity_Accumulated                                        +
+ CUR.USR_Quantity_Accumulated;

// NXT.USR Weight, 9.0 = NXT.USR Weight, 9.0 + CUR.USR Weight, 9.0
NXT.USR_Weight_9_0 = NXT.USR_Weight_9_0 + CUR.USR_Weight_9_0;

// NXT.USR Quantity Shipped = NXT.USR Quantity Shipped + CUR.USR Quantity Shipped
NXT.USR_Quantity_Shipped = NXT.USR_Quantity_Shipped + CUR.USR_Quantity_Shipped;

// NXT.USR Weight Shipped = NXT.USR Weight Shipped + CUR.USR Weight Shipped
NXT.USR_Weight_Shipped = NXT.USR_Weight_Shipped + CUR.USR_Weight_Shipped;

// NXT.USR Quantity Subeded = NXT.USR Quantity Subeded + CUR.USR Quantity Subeded
NXT.USR_Quantity_Subeded = NXT.USR_Quantity_Subeded + CUR.USR_Quantity_Subeded;

// NXT.USR Weight Subed = NXT.USR Weight Subed + CUR.USR Weight Subed
NXT.USR_Weight_Subed = NXT.USR_Weight_Subed + CUR.USR_Weight_Subed;

// NXT.USR Quantity Shorted = NXT.USR Quantity Shorted + CUR.USR Quantity Shorted
NXT.USR_Quantity_Shorted = NXT.USR_Quantity_Shorted + CUR.USR_Quantity_Shorted;

// NXT.USR Weight Shorted = NXT.USR Weight Shorted + CUR.USR Weight Shorted
NXT.USR_Weight_Shorted = NXT.USR_Weight_Shorted + CUR.USR_Weight_Shorted;

// NXT.USR Counter = NXT.USR Counter + CUR.USR Counter
NXT.USR_Counter = NXT.USR_Counter + CUR.USR_Counter;

ENDIF;

CASE;

IF NEW Item_Structure_Type_Code;
EXECUTE FUNCTION(Rtv Type Description   RT) TYPE(RTVOBJ) FILE(OME8REP)          AC1229616;
PARAMETER(CUR.Item_Structure_Type_Code);
PARAMETER(CUR.USR_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Prod Structure Type Code totals format
PRINT Prod Structure Type Code totals format;

// NXT.USR Quantity Accumulated = NXT.USR Quantity Accumulated + CUR.USR Quantity A
NXT.USR_Quantity_Accumulated = NXT.USR_Quantity_Accumulated                                        +
+ CUR.USR_Quantity_Accumulated;

// NXT.USR Weight, 9.0 = NXT.USR Weight, 9.0 + CUR.USR Weight, 9.0
NXT.USR_Weight_9_0 = NXT.USR_Weight_9_0 + CUR.USR_Weight_9_0;

// NXT.USR Quantity Shipped = NXT.USR Quantity Shipped + CUR.USR Quantity Shipped
NXT.USR_Quantity_Shipped = NXT.USR_Quantity_Shipped + CUR.USR_Quantity_Shipped;

// NXT.USR Weight Shipped = NXT.USR Weight Shipped + CUR.USR Weight Shipped
NXT.USR_Weight_Shipped = NXT.USR_Weight_Shipped + CUR.USR_Weight_Shipped;

// NXT.USR Quantity Subeded = NXT.USR Quantity Subeded + CUR.USR Quantity Subeded
NXT.USR_Quantity_Subeded = NXT.USR_Quantity_Subeded + CUR.USR_Quantity_Subeded;

// NXT.USR Weight Subed = NXT.USR Weight Subed + CUR.USR Weight Subed
NXT.USR_Weight_Subed = NXT.USR_Weight_Subed + CUR.USR_Weight_Subed;

// NXT.USR Quantity Shorted = NXT.USR Quantity Shorted + CUR.USR Quantity Shorted
NXT.USR_Quantity_Shorted = NXT.USR_Quantity_Shorted + CUR.USR_Quantity_Shorted;

// NXT.USR Weight Shorted = NXT.USR Weight Shorted + CUR.USR Weight Shorted
NXT.USR_Weight_Shorted = NXT.USR_Weight_Shorted + CUR.USR_Weight_Shorted;

// NXT.USR Counter = NXT.USR Counter + CUR.USR Counter
NXT.USR_Counter = NXT.USR_Counter + CUR.USR_Counter;

ENDIF;

