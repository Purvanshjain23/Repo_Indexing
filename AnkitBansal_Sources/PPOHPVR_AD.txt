// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPOHPVR
// ?Date: 14.08.2025 Time: 03:41:23
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?***** Change Log and Comments
DO;

//?** 03/03/2008 LJB E00094
//?** Set status flag to no (not new claim) so claim will be emailed
//?** to St Joe
//?E3387 JJH 09/10/14 - Display Shipping Method
ENDDO;

//?USER: Load screen

EXECUTE FUNCTION(RTV Claim Record       RT) TYPE(RTVOBJ) FILE(PDMKCPP)          AC1535328;
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Claim_Type);
PARAMETER(DTL.Claim_Status);
PARAMETER(DTL.Claim_Amount);
PARAMETER(DTL.Claim_Net_Loss);
PARAMETER(DTL.Claim_Approved_Amount);
PARAMETER(DTL.Claim_Contact_Name);
PARAMETER(DTL.Product_Inspection_Avail);
PARAMETER(DTL.Product_Inspection_Desc);
PARAMETER(DTL.Rep_Inspection_Required);
PARAMETER(DTL.Rep_Inspection_Req_Desc);
PARAMETER(DTL.Lab_Fee_Involved);
PARAMETER(DTL.Lab_Fee);
PARAMETER(DTL.Driver_Name);
PARAMETER(DTL.Lab_Name);
PARAMETER(DTL.Resolve_Claim_by_Date);
PARAMETER(DTL.Actual_Delivery_Date);
PARAMETER(DTL.Claim_Called_in_by);
PARAMETER(DTL.Claim_Called_in_by_Desc);
PARAMETER(DTL.Claim_Called_in_by_Date);
PARAMETER(DTL.Claim_Entry_Date);
PARAMETER(DTL.Claim_Entry_Time);
PARAMETER(DTL.Claim_Entry_User);
PARAMETER(DTL.Resale_Ship_to_Customer);
PARAMETER(DTL.Resale_Purchase_Order_Nbr);
PARAMETER(DTL.Sales_Approved_Date);
PARAMETER(DTL.Sales_Approved_Time);
PARAMETER(DTL.Sales_Approved_User);
PARAMETER(DTL.Approved_Denied_Date);
PARAMETER(DTL.Approved_Denied_Time);
PARAMETER(DTL.Approved_Denied_User);
PARAMETER(DTL.Memo_Created);
PARAMETER(DTL.Memo_Created_Date);
PARAMETER(DTL.Memo_Created_Time);
PARAMETER(DTL.Memo_Created_User);
PARAMETER(DTL.Claim_Resolution_Explan);
PARAMETER(DTL.AC_Shipping_Method);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(DTL.ACR_Shipping_Method_DRV);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?CALC: Screen function fields

EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(DTL.ACR_Shipping_Method_DRV);
PARAMETER(DTL.AC_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: User defined action

CASE;

// IF DTL.Yes/No Selection      USR is Yes
IF DTL.Yes_No_Selection_USR = 'Y';

// Call program Crt A/R Claim Apprl   XF.
CALL PROGRAM(Crt A/R Claim Apprl   XF) ('PPMIXFR');
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Claim_Type);
PARAMETER(DTL.Claim_Status);

// Call program Crt A/R Claim Pend FlowXF.
CALL PROGRAM(Crt A/R Claim Pend FlowXF) ('PPNTXFR');
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.Salesperson_to_Rvw_Claim);
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(DTL.Claim_Order_Number);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.Claim_Ship_to_Customer);
PARAMETER(DTL.Claim_Customer_Name);
PARAMETER(DTL.Claim_Type);
PARAMETER(DTL.Claim_Status);

EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(DTL.Claim_Company_Number);
PARAMETER('CLMDIST');
PARAMETER(LCL.System_Value_Alpha);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.System Value Alpha is *NONE
IF LCL.System_Value_Alpha = *NONE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Select the Report.
DO;

//?Dynamically override the SBMJOB command
//?with the job queue from the Print Options screen.
// PGM.*Sbmjob override string = CONCAT(CON.JOBQ(,CON.*JOBD,CND.*None)
PGM.*Sbmjob_override_string = 'JOBQ(' + '*JOBD' (*ZERO);

// PGM.*Sbmjob override string = CONCAT(PGM.*Sbmjob override string,CON.),CND.*None)
PGM.*Sbmjob_override_string = PGM.*Sbmjob_override_string + ')' (*ZERO);

//?** Send report to all on the distribution list   2/22/06 LJB
//?** Set status flag to No so the report will be emailed   3/3/08 E00094
// WRK.Approval Person Email = LCL.System Value Alpha
WRK.Approval_Person_Email = LCL.System_Value_Alpha;

// LCL.Status - Y or N = CND.no
LCL.Status_Y_or_N = 'N';

//?Submit the Report.
//?Pend process do not want to print any audit records
// Call program Prt Claim-Claim All   XF.
SBMJOB;
CALL PROGRAM(Prt Claim-Claim All   XF) ('PPL7XFR');
PARAMETER(DTL.Claim_Number);
PARAMETER(DTL.Claim_Company_Number);
PARAMETER(*JOB);
PARAMETER(*YES);
PARAMETER(*NO);
PARAMETER(1);
PARAMETER(LCL.Status_Y_or_N);
PARAMETER('N');
PARAMETER('E');
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(WRK.Approval_Person_Email);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('R');
SBMJOBOVR JOB(PRTCLAIMFM);
SBMJOBEND;

//?Send system message that a pend claim was printed
// Call program Crt A/R Claim ExpComSG XF.
CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
PARAMETER(DTL.Claim_Number);
PARAMETER('Pending Process Prt Claim');
PARAMETER('S');
PARAMETER('CLMPENDING');
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER('CAR');

ENDDO;

ENDIF;

// Send information message - 'Claim &1 is now pending'
MESSAGE(USR3518 *INFO);
MSGPARM(DTL.Claim_Number);

RETURN;

QUIT;

// IF DTL.Yes/No Selection      USR is No
IF DTL.Yes_No_Selection_USR = 'N';

RETURN;

QUIT;

ENDIF;

//?USER: Exit program processing

//?Purge out the Claim Exp System records not need at this point
DO;

//?Claims Exp System records are created when changes occur
//?If pending or new purge these records.
//?as records are created after pending and new status then these will
//?will trigger to send emails to the distr list if this
//?feature was requested
EXECUTE FUNCTION(Dlt Claim ExpSysPrToPndRT) TYPE(RTVOBJ) FILE(PDMNCPP)          AC1878354;
PARAMETER(PAR.Claim_Number);
PARAMETER('CLMPRINT');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT A/R Claim Explan   DL) TYPE(DLTOBJ) FILE(PDMNCPP)          AC1523482;
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.Claim_Explanation_Line_No);
}


ENDDO;

