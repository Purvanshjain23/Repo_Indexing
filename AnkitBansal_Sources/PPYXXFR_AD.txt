// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPYXXFR
// ?Date: 14.08.2025 Time: 03:42:23
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?RMC 9/11/13 Set MX to BX if box qty > min from comp value BOXLOAD
//?RMC 6/16/06 New Function - Used to get Load U/M like the KPI
EXECUTE FUNCTION(RTV Dft Co/Whs No App IF) TYPE(EXCINTFUN)                      AC1793064;
PARAMETER(LCL.Company_Number);
PARAMETER(NLL.Warehouse_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV First Dft Co/Whs  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1793065;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV First Dft Co/Whs  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1793065;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

}


EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(LCL.Company_Number);
PARAMETER('BOXLOAD');
PARAMETER(LCL.Box_Load_Min_Box_Qty_USR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.Boxes Total Quantity = CON.*ZERO
PAR.Boxes_Total_Quantity = *ZERO;

EXECUTE FUNCTION(RTV UM/Whs Code,BX KPI RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1785050;
PARAMETER(*ZERO);
PARAMETER(PAR.Load_ID);
PARAMETER(WRK.U_M_Ordered);
PARAMETER(PAR.Boxes_Total_Quantity);
{
 //?USER: Initialize routine

 //?05/13/04 SLM PKTR01 Multi-Company - Funt chg to rmv Co RST or Pos
 // PAR.USR Unit of Measure = CON.*BLANK
 PAR.USR_Unit_of_Measure = *BLANK;

 // WRK.First Time Flag = CND.Yes
 WRK.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV UM/Whs Code,BX KPI RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1785051;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(1);
 PARAMETER(PAR.USR_Unit_of_Measure);
 PARAMETER(PAR.Boxes_Total_Quantity);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag = CND.Yes
  WRK.First_Time_Flag = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  //?6/22/06     New function for KPI calc:
  //?   Consider CS as BX
  //?   Consider HS and TN as CB
  // LCL.U/M - Ordered = DB1.U/M - Ordered
  LCL.U_M_Ordered = DB1.U_M_Ordered;

  //?If CS
  CASE;

  // IF DB1.U/M - Ordered is Cases
  IF DB1.U_M_Ordered = 'CS';

  // LCL.U/M - Ordered = CND.EQ Boxes
  LCL.U_M_Ordered = 'BX';

  ENDIF;

  //?If HS or TN
  CASE;

  // IF DB1.U/M - Ordered is Head Set
  IF DB1.U_M_Ordered = 'HS';

  // OR DB1.U/M - Ordered is Tons
  OR DB1.U_M_Ordered = 'TN';

  // LCL.U/M - Ordered = CND.Combos
  LCL.U_M_Ordered = 'CB';

  ENDIF;

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Accumulate the Box Quantity for slotting consideration  6/12/01
  CASE;

  // IF DB1.U/M - Ordered is EQ Boxes
  IF DB1.U_M_Ordered = 'BX';

  // OR DB1.U/M - Ordered is Cases
  OR DB1.U_M_Ordered = 'CS';

  // PAR.Boxes Total Quantity = PAR.Boxes Total Quantity + DB1.Quantity Ordered
  PAR.Boxes_Total_Quantity = PAR.Boxes_Total_Quantity + DB1.Quantity_Ordered;

  ENDIF;

  CASE;

  // IF PAR.USR Unit of Measure is *Blank
  IF PAR.USR_Unit_of_Measure = *BLANK;

  // PAR.USR Unit of Measure = LCL.U/M - Ordered
  PAR.USR_Unit_of_Measure = LCL.U_M_Ordered;

  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF LCL.U/M - Ordered EQ PAR.USR Unit of Measure
  IF LCL.U_M_Ordered = PAR.USR_Unit_of_Measure;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.USR Unit of Measure = CND.Mixed
  PAR.USR_Unit_of_Measure = 'MX';

  ENDIF;

  ENDIF;

  ENDIF;

 }

}


//?** All boxes=BX, all combos=CB, any mix of the 2=MX     E00239 11/12/08
// PAR.Load U/M = WRK.U/M - Ordered
PAR.Load_U_M = WRK.U_M_Ordered;

//?set mixed w/more than 200 boxes to BX, less than 200 to CB
CASE;

// IF WRK.U/M - Ordered is Mixed
IF WRK.U_M_Ordered = 'MX';

CASE;

// IF PAR.Boxes Total Quantity LT LCL.Box Load Min Box Qty USR
IF PAR.Boxes_Total_Quantity < LCL.Box_Load_Min_Box_Qty_USR;

// PAR.Load U/M = CND.Combo
PAR.Load_U_M = 'CB';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Load U/M = CND.Box
PAR.Load_U_M = 'BX';

ENDIF;

//?set mixed w/more than 200 boxes to BX, less than 200 to CB
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Load U/M = WRK.U/M - Ordered
PAR.Load_U_M = WRK.U_M_Ordered;

ENDIF;

