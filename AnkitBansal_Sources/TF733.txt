     *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF733
      * TITLE:       View Invoice
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/10/05
      *
      *
      * FUNCTION: This is a View that displays the Invoice Header record and all
      *           Invoice Charges that may be assigned to the Invoice.
      *
      *           Restrictors:
      *               Invoice Number
      *
      *           Positioners:
      *               None
      *
      *           Selectors:
      *               Include in invoice total flag
      *               Invoice charge number
      *               Invoice charge date
      *               Charge code
      *               User-controlled flag
      *               System module
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd733    cf   e             workstn sfile(tf733s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Ftfp005    if   e           k disk
      *  Charge codes
      *
      *
     Ftfp020    if   e           k disk
      *  Invoice header
      *
      *
     Ftfl021c   if   e           k disk
      *  Invoice charges
      *
      *
     Ftfp097    if   e           k disk
      *    Status codes
      *
      *
     Ftfp098    if   e           k disk
      *    Charge frequencies
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
     D upper           c                   'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
     D lower           c                   'abcdefghijklmnopqrstuvwxyz'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2
     D svrrn1          s                   like(hdrrn1)
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Save fields for restrictors/positioners/selectors
      *
     D svinfl          s                   like(c1infl)
     D svicsn          s                   like(c1icsn)
     D svicdtmdy       s                   like(c1icdtmdy)
     D svcccd          s                   like(c1cccd)
     D svucfl          s                   like(c1ucfl)
     D svsmcd          s                   like(c1smcd)
      *
      *
      * Workfields for date manipulation
      *
     D wkisodate       s               D   datfmt(*iso)
      *
      *
      * Parms
      *
     D xxaist          s              1
     D xxynfl          s              1
     D xxucfl          s                   like(c1ucfl)
      *
     D xxcccd          s                   like(c1cccd)
     D xxccds          s                   like(ccccds)
      *
     D xxsmcd          s                   like(c1smcd)
     D xxsmds          s             20
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     tf733k1
     C                   write     tf733ec
     C                   exfmt     tf733c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   if        error = 0
     C                   exsr      $chksv
     C                   else
     C                   eval      routne = scrn1
     C                   endif
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      c1icsn <> svicsn or
     C                             c1icdtmdy <> svicdtmdy or
     C                             c1cccd <> svcccd or
     C                             c1ucfl <> svucfl or
     C                             c1smcd  <> svsmcd or
     C                             c1infl  <> svinfl
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-ROLLUP
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   eval      routne = set1
     C                   move      yes           reset
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   z-add     c1icsn        svicsn
     C                   z-add     c1icdtmdy     svicdtmdy
     C                   move      c1cccd        svcccd
     C                   move      c1ucfl        svucfl
     C                   move      c1smcd        svsmcd
     C                   move      c1infl        svinfl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      * Charge code
     C                   select
     C                   when      fld = 'C1CCCD'
     C                   call      'TF513'
     C                   parm      ' '           xxaist
     C                   parm      ' '           xxucfl
     C                   parm      *blank        xxcccd
     C                   parm      *blank        xxccds
     C                   seton                                        53
     C                   if        xxcccd <> *blank
     C                   move      xxcccd        c1cccd
     C                   endif
      *
      * User controlled flag
      *
     C                   when      fld = 'C1UCFL'
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
     C                   seton                                        54
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1ucfl
     C                   endif
      *
      * System module
     C                   when      fld = 'C1SMCD'
     C                   call      'TF509'
     C                   parm      *blank        xxsmcd
     C                   parm      *blank        xxsmds
     C                   seton                                        55
     C                   if        xxsmcd <> *blank
     C                   movel     xxsmcd        c1smcd
     C                   endif
      *
      * Include in invoice total flag
      *
     C                   when      fld = 'C1INFL'
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
     C                   seton                                        58
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1infl
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   tf733s1
     C                   seton                                        83        sflclr
     C                   write     tf733c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C     c1insn        setll     tfl021c
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedback
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   z-add     0             count
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C     c1insn        reade     tfl021c                                82
     C                   if        *in82 = *off                                 If read
      *
     C                   z-add     icicsn        d1icsn
     C                   z-add     icicam        d1icam
     C                   z-add     icunit        d1unit
     C                   move      iccccd        d1cccd
     C                   move      iciccom       d1iccom
      *
      * If there is a "comment" move the text "COM:" to a subfile field.
      * (I was just trying to make the screen look better; so, tried this
      * instead of hardcoding the 'text' in the DSPF.
      *
     C                   if        iciccom <> *blank
     C                   move      'Com:'        d1comtext
     C                   else
     C                   move      *blank        d1comtext
     C                   endif
      *
      * Retrieve Charge Code values
      *
     C     d1cccd        chain     tfp005                             92
     C                   if        *in92 = *off                                 If hit
     C                   move      ccucfl        d1ucfl
     C                   move      ccsmcd        d1smcd
     C                   move      ccinfl        d1infl
     C                   move      ccsmcd        d1smcd
     C                   move      ccgldbcd      d1gldbcd
     C                   move      ccglcrcd      d1glcrcd
     C                   else
     C                   move      *blank        d1ucfl
     C                   move      *blank        d1smcd
     C                   move      *blank        d1infl
     C                   move      *blank        d1smcd
     C                   move      *blank        d1gldbcd
     C                   move      *blank        d1glcrcd
     C                   endif                                                  If hit
      *
      *
      * Flip Invoice Charge Date from CCYYMMDD to MMDDYY for display
      *
     C     *iso          test(d)                 icicdt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      icicdt        wkisodate
     C     *mdy          move      wkisodate     d1icdtmdy
     C                   endif                                                  If OK date
      *
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1icsn <> 0 and                              If charge nbr
     C                             c1icsn <> d1icsn
     C                   else
      *
     C                   if        c1icdtmdy <> 0 and                           If charge date
     C                             c1icdtmdy <> d1icdtmdy
     C                   else
      *
     C                   if        c1cccd <> *blank and                         If charge code
     C                             c1cccd <> d1cccd
     C                   else
      *
     C                   if        c1ucfl <> *blank and                         If user control
     C                             c1ucfl <> d1ucfl
     C                   else
      *
     C                   if        c1smcd <> *blank and                         If system module
     C                             c1smcd <> d1smcd
     C                   else
      *
     C                   if        c1infl <> *blank and                         If include
     C                             c1infl <> d1infl
     C                   else
      *
      *
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   write     tf733s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   eval      hdpag1 = hdrrn1
      *
      *
     C                   endif                                                  If include
     C                   endif                                                  If system module
     C                   endif                                                  If user control
     C                   endif                                                  If charge code
     C                   endif                                                  If charge date
     C                   endif                                                  If charge nbr
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *
     C     *entry        plist
     C                   parm                    c1insn
     C                   parm                    rtncd
      *
      *
      * Retrieve Invoice values from Invoice Header record
      *
     C     c1insn        chain     tfp020                             92
     C                   if        *in92 = *off                                 If hit
      *
      * Flip Invoice Date from CCYYMMDD to MMDDYY for display
      *
     C     *iso          test(d)                 ihindt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      ihindt        wkisodate
     C     *mdy          move      wkisodate     c1indtmdy
     C                   endif                                                  If OK date
      *
      * Flip Invoice Due Date from CCYYMMDD to MMDDYY for display
      *
     C     *iso          test(d)                 ihdudt                 92
     C                   if        *in92 = *off                                 If OK date
     C                   move      ihdudt        wkisodate
     C     *mdy          move      wkisodate     c1dudtmdy
     C                   endif                                                  If OK date
      *
      * Revtieve description for Charge Frequency Code
      *
     C     ihcfqcd       chain     tfp098                             92
     C                   if        *in92 = *off
     C                   move      cfcfqds       c1cfqds
     C                   endif
      *
      * Revtieve description for Invoice charge status
      *
     C     ihinstcd      chain     tfp097                             92
     C                   if        *in92 = *off
     C                   move      ststds        c1stds
     C                   endif
      *
     C                   endif                                                  If hit
      *
      * Retrieve Invoice Amounts
      *
     C                   call      'TF806'
     C                   parm                    c1insn
     C                   parm      0             c1inam
     C                   parm      0             c1memoam
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     10            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /eject
