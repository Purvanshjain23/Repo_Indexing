// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLWUEFR
// ?Date: 14.08.2025 Time: 02:55:38
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?H16853 - ISE - 02/03/21 - Increased Buy Order length from 5 to 7.
//?                          Recompilation only.
//?S14983 RMC 05/15/19 - if jde cc/obj/sub changes, get new acctId, desc
//?S13558 RMC 08/06/18 - allow input to fields matching pkcwrep
//?R12636 DN  02/23/18 - Freight Variance Load ID
//?- Change 'MCR Sub-Account Type' screen field to be input capable &
//?  added condition 'F' Freight to it.
//?R9083  RMC 06/15/17 - allow blank cc/obj/sub, but if blank, req CGL
//?  code,gl acct id
EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('C/S');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

// Call program Rtv User Code Model   XF.
CALL PROGRAM(Rtv User Code Model   XF) ('POYBXFR');
PARAMETER(JOB.*USER);
PARAMETER(LCL.User_Code_Model_USR);

CASE;

// IF LCL.User Code Model USR is Accounting 6
IF LCL.User_Code_Model_USR = 'PORKACCT6';

// OR LCL.User Code Model USR is TF Accounting Model
OR LCL.User_Code_Model_USR = 'TFMODACC';

// PAR.Oms Allow Multi-Company = CND.Yes
PAR.Oms_Allow_Multi_Company = 'Y';

ENDIF;

// LCL.First Time Flag Usr = CND.Yes
LCL.First_Time_Flag_Usr = 'Y';

// PGM.*Subfile mode = CND.Truncated
PGM.*Subfile_mode = 1;

//?USER: Initialize subfile header

CASE;

// IF LCL.First Time Flag Usr is Yes
IF LCL.First_Time_Flag_Usr = 'Y';

// CTL.Company Number USR = PAR.CC Company Number
CTL.Company_Number_USR = PAR.CC_Company_Number;

// CTL.CC Company Number = PAR.CC Company Number
CTL.CC_Company_Number = PAR.CC_Company_Number;

// LCL.First Time Flag Usr = CND.No
LCL.First_Time_Flag_Usr = 'N';

ENDIF;

//?USER: Initialize subfile record (existing record)

CASE;

// IF LCL.User Code Model USR is IS
IF LCL.User_Code_Model_USR = 'ISBGUTI';

// OR LCL.User Code Model USR EQ WRK.Blank USR
OR LCL.User_Code_Model_USR = WRK.Blank_USR;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Oms Allow Multi-Company is Yes
IF ( PAR.Oms_Allow_Multi_Company = 'Y';

// AND CTL.Company Number USR is *ZERO
AND ( CTL.Company_Number_USR = *ZERO;

// OR DB1.CC Company Number EQ CTL.Company Number USR
OR DB1.CC_Company_Number = CTL.Company_Number_USR ) );

// OR PAR.Oms Allow Multi-Company is No
OR ( PAR.Oms_Allow_Multi_Company = 'N';

// AND DB1.CC Company Number EQ CTL.Company Number USR
AND DB1.CC_Company_Number = CTL.Company_Number_USR );

//?360 cant see 960
CASE;

// IF PAR.CC Company Number is SBD Farms of Guymon, Ok
IF PAR.CC_Company_Number = 360;

CASE;

// IF CTL.Company Number USR is Triumph Foods Market
IF CTL.Company_Number_USR = 960;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?960 cannot see 360   ; can see 440/970/980
CASE;

// IF PAR.CC Company Number is Triumph Foods Market
IF PAR.CC_Company_Number = 960;

// WRK.Company = CON.970
WRK.Company = 970;

// WRK.Company Control HPE = CON.980
WRK.Company_Control_HPE = 980;

CASE;

// IF CTL.Company Number USR is Triumph Foods Market
IF CTL.Company_Number_USR = 960;

// IF CTL.Company Number USR is Sioux City
IF CTL.Company_Number_USR = 440;

// IF CTL.CC Company Number EQ WRK.Company
IF CTL.CC_Company_Number = WRK.Company;

// IF CTL.CC Company Number EQ WRK.Company Control HPE
IF CTL.CC_Company_Number = WRK.Company_Control_HPE;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?440 cant see anything but 440
CASE;

// IF PAR.CC Company Number is Sioux City
IF PAR.CC_Company_Number = 440;

CASE;

// IF CTL.Company Number USR is Sioux City
IF CTL.Company_Number_USR = 440;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF CTL.CGL Code is Entered
IF CTL.CGL_Code > *BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.MCR_CGL_Code);
PARAMETER(8);
PARAMETER(1);
PARAMETER(CTL.CGL_Code);
PARAMETER(8);
PARAMETER(*BLANK);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF CTL.MCR System Reference Code is Not Entered
IF CTL.MCR_System_Reference_Code = *BLANK;

// OR DB1.MCR System Reference Code EQ CTL.MCR System Reference Code
OR DB1.MCR_System_Reference_Code = CTL.MCR_System_Reference_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF CTL.MCR JDE Cost Center is Not Entered
IF CTL.MCR_JDE_Cost_Center = *BLANK;

// OR DB1.MCR JDE Cost Center EQ CTL.MCR JDE Cost Center
OR DB1.MCR_JDE_Cost_Center = CTL.MCR_JDE_Cost_Center;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF CTL.MCR JDE Object is Not entered
IF CTL.MCR_JDE_Object = *BLANK;

// OR DB1.MCR JDE Object EQ CTL.MCR JDE Object
OR DB1.MCR_JDE_Object = CTL.MCR_JDE_Object;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// RCD.Cost Center USR = DB1.MCR JDE Cost Center
RCD.Cost_Center_USR = DB1.MCR_JDE_Cost_Center;

// RCD.JDE Object Save = DB1.MCR JDE Object
RCD.JDE_Object_Save = DB1.MCR_JDE_Object;

// RCD.JDE Sub Save = DB1.MCR JDE Subsidiary
RCD.JDE_Sub_Save = DB1.MCR_JDE_Subsidiary;

//?USER: Initialize subfile record (new record)

// RCD.CC Company Number = CTL.Company Number USR
RCD.CC_Company_Number = CTL.Company_Number_USR;

//?USER: Validate subfile control

//?F21=Email list in xls
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.EMail_Address);

CASE;

// IF LCL.EMail Address is Entered
IF LCL.EMail_Address <> *BLANK;

// Execute command - 'Execute Sequel JDE to M3 cross ref'
EXECUTE COMMAND(PRK1360);
PARAMETER(LCL.EMail_Address);
PARAMETER(CTL.Company_Number_USR);

ENDIF;

ENDIF;

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.Company Number USR
IF PGM.*Cursor_field = CTL.Company_Number_USR;

// Call program Sel Company Control   SR.
CALL PROGRAM(Sel Company Control   SR) ('PKLFSRR');
PARAMETER(CTL.Company_Number_USR);
PARAMETER(WRK.Next_Buy_Order_Number);
PARAMETER(WRK.Current_Kill_Date);
PARAMETER(WRK.Next_Kill_Date);
PARAMETER(WRK.Last_Drive_Card_Number);

ENDIF;

ENDIF;

//?F5=refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF LCL.CGL Code NE CTL.CGL Code
IF LCL.CGL_Code <> CTL.CGL_Code;

// LCL.CGL Code = CTL.CGL Code
LCL.CGL_Code = CTL.CGL_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF LCL.MCR System Reference Code NE CTL.MCR System Reference Code
IF LCL.MCR_System_Reference_Code <> CTL.MCR_System_Reference_Code;

// LCL.MCR System Reference Code = CTL.MCR System Reference Code
LCL.MCR_System_Reference_Code = CTL.MCR_System_Reference_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.Company Number USR NE CTL.CC Company Number
IF CTL.Company_Number_USR <> CTL.CC_Company_Number;

// CTL.CC Company Number = CTL.Company Number USR
CTL.CC_Company_Number = CTL.Company_Number_USR;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.MCR JDE Cost Center NE LCL.MCR JDE Cost Center
IF CTL.MCR_JDE_Cost_Center <> LCL.MCR_JDE_Cost_Center;

// LCL.MCR JDE Cost Center = CTL.MCR JDE Cost Center
LCL.MCR_JDE_Cost_Center = CTL.MCR_JDE_Cost_Center;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.MCR JDE Object NE LCL.MCR JDE Object
IF CTL.MCR_JDE_Object <> LCL.MCR_JDE_Object;

// LCL.MCR JDE Object = CTL.MCR JDE Object
LCL.MCR_JDE_Object = CTL.MCR_JDE_Object;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record fields

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

ENDIF;

CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.MCR Account Category Code
IF PGM.*Cursor_field = RCD.MCR_Account_Category_Code;

// Call program Sel Account Cat   OMS SR.
CALL PROGRAM(Sel Account Cat   OMS SR) ('PLRSSRR');
PARAMETER(RCD.MCR_Account_Category_Code);

ENDIF;

ENDIF;

CASE;

// IF RCD.MCR M3 Account Desc is Blank
IF RCD.MCR_M3_Account_Desc = *BLANK;

// OR RCD.MCR GL Acct ID is Not entered
OR RCD.MCR_GL_Acct_ID = *BLANK;

// OR RCD.MCR JDE Cost Center NE RCD.Cost Center USR
OR RCD.MCR_JDE_Cost_Center <> RCD.Cost_Center_USR;

// OR RCD.MCR JDE Object NE RCD.JDE Object Save
OR RCD.MCR_JDE_Object <> RCD.JDE_Object_Save;

// OR RCD.MCR JDE Subsidiary NE RCD.JDE Sub Save
OR RCD.MCR_JDE_Subsidiary <> RCD.JDE_Sub_Save;

// LCL.JDE Company = CON.00000
LCL.JDE_Company = 00000;

// LCL.Company Number Alpha Usr = CVTVAR(CTL.CC Company Number)
LCL.Company_Number_Alpha_Usr = CVTVAR(CTL.CC_Company_Number);

// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PLECUFR');
PARAMETER(LCL.JDE_Company);
PARAMETER(LCL.Company_Number_Alpha_Usr);
{
 C                     MOVE #IAVNA    #OAUNA
}


// LCL.MCR GL Acct ID = CON.*BLANK
LCL.MCR_GL_Acct_ID = *BLANK;

// LCL.MCR M3 Account Desc = CON.*BLANK
LCL.MCR_M3_Account_Desc = *BLANK;

// Call program Rtv CC/OBJ/Sub DesALL UP.
CALL PROGRAM(Rtv CC/OBJ/Sub DesALL UP) ('ARACTRTV');
PARAMETER(LCL.JDE_Company);
PARAMETER(RCD.MCR_JDE_Cost_Center);
PARAMETER(RCD.MCR_JDE_Object);
PARAMETER(RCD.MCR_JDE_Subsidiary);
PARAMETER(LCL.MCR_GL_Acct_ID);
PARAMETER(LCL.Status_1);
PARAMETER(LCL.MCR_M3_Account_Desc);
PARAMETER(LCL.Return_Code_USR);

CASE;

// IF RCD.MCR M3 Account Desc is Blank
IF RCD.MCR_M3_Account_Desc = *BLANK;

// OR LCL.MCR M3 Account Desc is Not Blank
OR ( LCL.MCR_M3_Account_Desc > *BLANK;

// AND LCL.MCR M3 Account Desc NE RCD.MCR M3 Account Desc
AND LCL.MCR_M3_Account_Desc <> RCD.MCR_M3_Account_Desc );

// RCD.MCR M3 Account Desc = LCL.MCR M3 Account Desc
RCD.MCR_M3_Account_Desc = LCL.MCR_M3_Account_Desc;

ENDIF;

CASE;

// IF RCD.MCR GL Acct ID is Not entered
IF RCD.MCR_GL_Acct_ID = *BLANK;

// OR LCL.MCR GL Acct ID is Not Blanks
OR ( LCL.MCR_GL_Acct_ID <> *BLANK;

// AND RCD.MCR GL Acct ID NE LCL.MCR GL Acct ID
AND RCD.MCR_GL_Acct_ID <> LCL.MCR_GL_Acct_ID );

// RCD.MCR GL Acct ID = LCL.MCR GL Acct ID
RCD.MCR_GL_Acct_ID = LCL.MCR_GL_Acct_ID;

ENDIF;

ENDIF;

CASE;

// IF RCD.MCR JDE Cost Center is Not Entered
IF RCD.MCR_JDE_Cost_Center = *BLANK;

// AND RCD.MCR JDE Object is Not entered
AND RCD.MCR_JDE_Object = *BLANK;

// AND RCD.MCR JDE Subsidiary is Not Entered
AND RCD.MCR_JDE_Subsidiary = *BLANK;

CASE;

// IF RCD.MCR CGL Code is Not Entered
IF RCD.MCR_CGL_Code = *BLANK;

// OR RCD.MCR GL Acct ID is Not entered
OR RCD.MCR_GL_Acct_ID = *BLANK;

// Send error message - 'CGL Code & GL Acct Id required when JDE CC/Obj/Sub not entered.'
ERROR(PRK1446);
MSGPARM(RCD.MCR_CGL_Code);
MSGPARM(RCD.MCR_GL_Acct_ID);

ENDIF;

ENDIF;

//?Copy
CASE;

// IF RCD.*SFLSEL is *Option 3 request
IF RCD.*SFLSEL = '3'/'3';

EXECUTE FUNCTION(Crt G/L JDE to M3 Crs IF) TYPE(EXCINTFUN)                      AB1324084;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.MCR_Sequence_Number);
PARAMETER(RCD.MCR_CGL_Code);
PARAMETER(RCD.MCR_JDE_Cost_Center);
PARAMETER(RCD.MCR_JDE_Object);
PARAMETER(RCD.MCR_JDE_Subsidiary);
PARAMETER(RCD.MCR_GL_Acct_ID);
PARAMETER(RCD.MCR_M3_Dimension_1);
PARAMETER(RCD.MCR_M3_Dimension_2);
PARAMETER(RCD.MCR_M3_Dimension_3);
PARAMETER(RCD.MCR_M3_Dimension_4);
PARAMETER(RCD.MCR_M3_Dimension_5);
PARAMETER(RCD.MCR_M3_Dimension_6);
PARAMETER(RCD.MCR_M3_Dimension_7);
PARAMETER(RCD.MCR_System_Reference_Code);
PARAMETER(RCD.MCR_M3_Account_Desc);
PARAMETER(RCD.MCR_Account_Category_Code);
PARAMETER(RCD.MCR_Control_Sts);
PARAMETER(RCD.MCR_Sub_Account_Type);
PARAMETER(RCD.MCR_Balance_Sheet_Act_Sts);
PARAMETER(RCD.MCR_Account_Company);
PARAMETER(RCD.MCR_Sub_Ledger_Req);
PARAMETER(RCD.MCR_Debit_Credit);
{
 //?Execute internal function

 // LCL.MCR Sequence Number = CON.99999
 LCL.MCR_Sequence_Number = 99999;

 EXECUTE FUNCTION(Rtv Last Seqence#     RT) TYPE(RTVOBJ) FILE(PLB8REP)           AB1324087;
 PARAMETER(LCL.MCR_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // LCL.MCR Sequence Number = LCL.MCR Sequence Number + CON.1
 LCL.MCR_Sequence_Number = LCL.MCR_Sequence_Number + 1;

 EXECUTE FUNCTION(Crt G/L JDE to M3 Crs CR) TYPE(CRTOBJ) FILE(PLB8REP)           AB1324064;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(LCL.MCR_Sequence_Number);
 PARAMETER(PAR.MCR_CGL_Code);
 PARAMETER(PAR.MCR_JDE_Cost_Center);
 PARAMETER(PAR.MCR_JDE_Object);
 PARAMETER(PAR.MCR_JDE_Subsidiary);
 PARAMETER(PAR.MCR_GL_Acct_ID);
 PARAMETER(PAR.MCR_M3_Dimension_1);
 PARAMETER(PAR.MCR_M3_Dimension_2);
 PARAMETER(PAR.MCR_M3_Dimension_3);
 PARAMETER(PAR.MCR_M3_Dimension_4);
 PARAMETER(PAR.MCR_M3_Dimension_5);
 PARAMETER(PAR.MCR_M3_Dimension_6);
 PARAMETER(PAR.MCR_M3_Dimension_7);
 PARAMETER(PAR.MCR_System_Reference_Code);
 PARAMETER(PAR.MCR_M3_Account_Desc);
 PARAMETER(PAR.MCR_Account_Category_Code);
 PARAMETER(PAR.MCR_Control_Sts);
 PARAMETER(PAR.MCR_Sub_Account_Type);
 PARAMETER(PAR.MCR_Balance_Sheet_Act_Sts);
 PARAMETER(PAR.MCR_Account_Company);
 PARAMETER(PAR.MCR_Sub_Ledger_Req);
 PARAMETER(PAR.MCR_Debit_Credit);
 PARAMETER(WRK.MCR_Unused_sts_1);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt G/L JDE to M3 Crs IF) TYPE(EXCINTFUN) FILE(PLB8REP)        AB1324084;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(RCD.MCR_Sequence_Number);
PARAMETER(RCD.MCR_CGL_Code);
PARAMETER(RCD.MCR_JDE_Cost_Center);
PARAMETER(RCD.MCR_JDE_Object);
PARAMETER(RCD.MCR_JDE_Subsidiary);
PARAMETER(RCD.MCR_GL_Acct_ID);
PARAMETER(RCD.MCR_M3_Dimension_1);
PARAMETER(RCD.MCR_M3_Dimension_2);
PARAMETER(RCD.MCR_M3_Dimension_3);
PARAMETER(RCD.MCR_M3_Dimension_4);
PARAMETER(RCD.MCR_M3_Dimension_5);
PARAMETER(RCD.MCR_M3_Dimension_6);
PARAMETER(RCD.MCR_M3_Dimension_7);
PARAMETER(RCD.MCR_System_Reference_Code);
PARAMETER(RCD.MCR_M3_Account_Desc);
PARAMETER(RCD.MCR_Account_Category_Code);
PARAMETER(RCD.MCR_Control_Sts);
PARAMETER(RCD.MCR_Sub_Account_Type);
PARAMETER(RCD.MCR_Balance_Sheet_Act_Sts);
PARAMETER(RCD.MCR_Account_Company);
PARAMETER(RCD.MCR_Sub_Ledger_Req);
PARAMETER(RCD.MCR_Debit_Credit);
{
 //?Execute internal function

 // LCL.MCR Sequence Number = CON.99999
 LCL.MCR_Sequence_Number = 99999;

 EXECUTE FUNCTION(Rtv Last Seqence#     RT) TYPE(RTVOBJ) FILE(PLB8REP)           AB1324087;
 PARAMETER(LCL.MCR_Sequence_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // LCL.MCR Sequence Number = LCL.MCR Sequence Number + CON.1
 LCL.MCR_Sequence_Number = LCL.MCR_Sequence_Number + 1;

 EXECUTE FUNCTION(Crt G/L JDE to M3 Crs CR) TYPE(CRTOBJ) FILE(PLB8REP)           AB1324064;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(LCL.MCR_Sequence_Number);
 PARAMETER(PAR.MCR_CGL_Code);
 PARAMETER(PAR.MCR_JDE_Cost_Center);
 PARAMETER(PAR.MCR_JDE_Object);
 PARAMETER(PAR.MCR_JDE_Subsidiary);
 PARAMETER(PAR.MCR_GL_Acct_ID);
 PARAMETER(PAR.MCR_M3_Dimension_1);
 PARAMETER(PAR.MCR_M3_Dimension_2);
 PARAMETER(PAR.MCR_M3_Dimension_3);
 PARAMETER(PAR.MCR_M3_Dimension_4);
 PARAMETER(PAR.MCR_M3_Dimension_5);
 PARAMETER(PAR.MCR_M3_Dimension_6);
 PARAMETER(PAR.MCR_M3_Dimension_7);
 PARAMETER(PAR.MCR_System_Reference_Code);
 PARAMETER(PAR.MCR_M3_Account_Desc);
 PARAMETER(PAR.MCR_Account_Category_Code);
 PARAMETER(PAR.MCR_Control_Sts);
 PARAMETER(PAR.MCR_Sub_Account_Type);
 PARAMETER(PAR.MCR_Balance_Sheet_Act_Sts);
 PARAMETER(PAR.MCR_Account_Company);
 PARAMETER(PAR.MCR_Sub_Ledger_Req);
 PARAMETER(PAR.MCR_Debit_Credit);
 PARAMETER(WRK.MCR_Unused_sts_1);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Delete G/L JDE to M3 Cros) TYPE(DLTOBJ) FILE(PLB8REP)          AB1324066;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.MCR_Sequence_Number);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg G/L JDE to M3 Crs CH) TYPE(CHGOBJ) FILE(PLB8REP)           AB1324065;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.MCR_Sequence_Number);
PARAMETER(RCD.MCR_CGL_Code);
PARAMETER(RCD.MCR_JDE_Cost_Center);
PARAMETER(RCD.MCR_JDE_Object);
PARAMETER(RCD.MCR_JDE_Subsidiary);
PARAMETER(RCD.MCR_GL_Acct_ID);
PARAMETER(RCD.MCR_M3_Dimension_1);
PARAMETER(RCD.MCR_M3_Dimension_2);
PARAMETER(RCD.MCR_M3_Dimension_3);
PARAMETER(RCD.MCR_M3_Dimension_4);
PARAMETER(RCD.MCR_M3_Dimension_5);
PARAMETER(RCD.MCR_M3_Dimension_6);
PARAMETER(RCD.MCR_M3_Dimension_7);
PARAMETER(RCD.MCR_System_Reference_Code);
PARAMETER(RCD.MCR_M3_Account_Desc);
PARAMETER(RCD.MCR_Account_Category_Code);
PARAMETER(RCD.MCR_Control_Sts);
PARAMETER(RCD.MCR_Sub_Account_Type);
PARAMETER(RCD.MCR_Balance_Sheet_Act_Sts);
PARAMETER(RCD.MCR_Account_Company);
PARAMETER(RCD.MCR_Sub_Ledger_Req);
PARAMETER(RCD.MCR_Debit_Credit);
PARAMETER(RCD.MCR_Unused_sts_1);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

