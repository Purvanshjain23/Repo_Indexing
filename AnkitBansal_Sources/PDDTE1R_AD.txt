// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDDTE1R
// ?Date: 14.08.2025 Time: 03:31:27
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?DLY029 RMC Box id chg to 6 long
//?E3160  JJH 07/14/14 - Recompiled for change in CRTOBJ.
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DB1.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DB1.Default_Warehouse);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


EXECUTE FUNCTION(RTV BOX ID FOR ITEM    RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1396535;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Box_iD);
PARAMETER(DTL.Unit_Weight_USR);
PARAMETER(WRK.Item_Description);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // WRK.Unit Weight = CON.*ZERO
 WRK.Unit_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Item Type & PckCD  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1396536;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.Unit_Weight);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(PAR.Package_Type_Code);
 PARAMETER(WRK.Pallet_Tare_Weight);
 PARAMETER(WRK.Misc_Tare_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Package Type Code is Box
 IF PAR.Package_Type_Code = 'B';

 // PAR.Box Description = WRK.Description Line One
 PAR.Box_Description = WRK.Description_Line_One;

 // PAR.Unit Weight = WRK.Unit Weight
 PAR.Unit_Weight = WRK.Unit_Weight;

 // PAR.Box iD = DB1.Component Item Code * CON.1 *
 PAR.Box_iD = DB1.Component_Item_Code * 1;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Department_Code);
PARAMETER(DTL.Department_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Item Description = WRK.Item Description
DTL.Item_Description = WRK.Item_Description;

//?Load Nominal Weight - Equals Unit weight if C/W=N, Equals 0 if C/W = Y
CASE;

// IF DTL.Catch Weight Status is yes
IF DTL.Catch_Weight_Status = 'Y';

// DTL.Nominal Weight = CON.*ZERO
DTL.Nominal_Weight = *ZERO;

//?Load Nominal Weight - Equals Unit weight if C/W=N, Equals 0 if C/W = Y
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Nominal Weight = DTL.Unit Weight
DTL.Nominal_Weight = DTL.Unit_Weight;

ENDIF;

//?Save Accu-Sort/Plant Floor values
// PAR.Item Label Line 1 = DB1.Item Label Line 1
PAR.Item_Label_Line_1 = DB1.Item_Label_Line_1;

// PAR.Item Label Line 2 = DB1.Item Label Line 2
PAR.Item_Label_Line_2 = DB1.Item_Label_Line_2;

// PAR.Item Label Line 3 = DB1.Item Label Line 3
PAR.Item_Label_Line_3 = DB1.Item_Label_Line_3;

// PAR.Unit Weight = DB1.Unit Weight
PAR.Unit_Weight = DB1.Unit_Weight;

// PAR.Minimum Weight Per Case = DB1.Minimum Weight Per Case
PAR.Minimum_Weight_Per_Case = DB1.Minimum_Weight_Per_Case;

// PAR.Maximum Weight Per Case = DB1.Maximum Weight Per Case
PAR.Maximum_Weight_Per_Case = DB1.Maximum_Weight_Per_Case;

// PAR.Number Cases On A Pallet = DB1.Number Cases On A Pallet
PAR.Number_Cases_On_A_Pallet = DB1.Number_Cases_On_A_Pallet;

// PAR.Misc Tare Weight = DB1.Misc Tare Weight
PAR.Misc_Tare_Weight = DB1.Misc_Tare_Weight;

// PAR.Chilling Time = DB1.Chilling Time
PAR.Fresh_Chilling_Time = DB1.Fresh_Chilling_Time;

//?INF Msg for BOX ID
CASE;

// IF DTL.Box iD EQ WRK.ZERO
IF DTL.Box_iD = WRK.ZERO;

// Send information message - 'Box Id is not entered.  Item will not be sent to AccuSort.'
MESSAGE(USR2319 *INFO);
MSGPARM(DTL.Box_iD);

ENDIF;

//?USER: Validate detail screen fields

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Edit Bill of Material
CASE;

// IF DTL.*CMD key is CF07
IF DTL.*CMD_key = '07';

//?T896 9/28/01   Only show bom types Supplies
//?T896 12/6/01   DONT RESTRICT THIS ANY MORE
//?07/22/08 PKD S00360 Replaced Edit BOM with Display BOM.
// Call program DSP Bill of Material   ET.
CALL PROGRAM(DSP Bill of Material   ET) ('PPVMETR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);

EXECUTE FUNCTION(RTV BOX ID FOR ITEM    RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1396535;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Box_iD);
PARAMETER(DTL.Unit_Weight_USR);
PARAMETER(WRK.Item_Description);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // WRK.Unit Weight = CON.*ZERO
 WRK.Unit_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Item Type & PckCD  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1396536;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.Unit_Weight);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(PAR.Package_Type_Code);
 PARAMETER(WRK.Pallet_Tare_Weight);
 PARAMETER(WRK.Misc_Tare_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Package Type Code is Box
 IF PAR.Package_Type_Code = 'B';

 // PAR.Box Description = WRK.Description Line One
 PAR.Box_Description = WRK.Description_Line_One;

 // PAR.Unit Weight = WRK.Unit Weight
 PAR.Unit_Weight = WRK.Unit_Weight;

 // PAR.Box iD = DB1.Component Item Code * CON.1 *
 PAR.Box_iD = DB1.Component_Item_Code * 1;

 QUIT;

 ENDIF;

}


//?INF Msg for BOX ID
CASE;

// IF DTL.Box iD EQ WRK.ZERO
IF DTL.Box_iD = WRK.ZERO;

// Send information message - 'Box Id is not entered.  Item will not be sent to AccuSort.'
MESSAGE(USR2319 *INFO);
MSGPARM(DTL.Box_iD);

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

EXECUTE FUNCTION(RTV BOX ID FOR ITEM    RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1396535;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Box_iD);
PARAMETER(DTL.Unit_Weight_USR);
PARAMETER(WRK.Item_Description);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // WRK.Unit Weight = CON.*ZERO
 WRK.Unit_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Item Type & PckCD  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1396536;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.Unit_Weight);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(PAR.Package_Type_Code);
 PARAMETER(WRK.Pallet_Tare_Weight);
 PARAMETER(WRK.Misc_Tare_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Package Type Code is Box
 IF PAR.Package_Type_Code = 'B';

 // PAR.Box Description = WRK.Description Line One
 PAR.Box_Description = WRK.Description_Line_One;

 // PAR.Unit Weight = WRK.Unit Weight
 PAR.Unit_Weight = WRK.Unit_Weight;

 // PAR.Box iD = DB1.Component Item Code * CON.1 *
 PAR.Box_iD = DB1.Component_Item_Code * 1;

 QUIT;

 ENDIF;

}


//?INF Msg for BOX ID
CASE;

// IF DTL.Box iD EQ WRK.ZERO
IF DTL.Box_iD = WRK.ZERO;

// Send information message - 'Box Id is not entered.  Item will not be sent to AccuSort.'
MESSAGE(USR2319 *INFO);
MSGPARM(DTL.Box_iD);

ENDIF;

//?Validate Min/Max Weight Per Case
CASE;

// IF DTL.Maximum Weight Per Case LT DTL.Minimum Weight Per Case
IF DTL.Maximum_Weight_Per_Case < DTL.Minimum_Weight_Per_Case;

// Send error message - 'Minimum Case Wgt cannot be greater than Maximum Case Wgt'
ERROR(USR2274);

ENDIF;

//?Validate Zero Unit Weight if Active Item
CASE;

// IF DTL.Unit Weight is Equal to zero
IF DTL.Unit_Weight = *ZERO;

CASE;

// IF DTL.Record Status is Active
IF DTL.Record_Status = 'A';

// Send error message - 'Weight entry required for this item.'
ERROR(USR0514);
MSGPARM(DTL.Unit_Weight);

ENDIF;

ENDIF;

//?Validate Minimum Weight Per Case w/Unit Weight
CASE;

// IF DTL.Minimum Weight Per Case GT DTL.Unit Weight
IF DTL.Minimum_Weight_Per_Case > DTL.Unit_Weight;

// Send error message - 'Minimum Weight Per Case is greater than the Unit Weight.'
ERROR(USR2285);
MSGPARM(DTL.Minimum_Weight_Per_Case);

ENDIF;

//?Validate Maximum Weight Per Case w/Unit Weight
CASE;

// IF DTL.Maximum Weight Per Case LT DTL.Unit Weight
IF DTL.Maximum_Weight_Per_Case < DTL.Unit_Weight;

// Send error message - 'Maximum Weight Per Case is less than the Unit Weight.'
ERROR(USR2286);
MSGPARM(DTL.Maximum_Weight_Per_Case);

ENDIF;

// PAR.Change Plant Floor USR = WRK.BLANK
PAR.Change_Plant_Floor_USR = WRK.BLANK;

//?Check for AS Product field changes = Accu-Sort Plant Floor
CASE;

// IF PAR.Item Label Line 1 NE DTL.Item Label Line 1
IF PAR.Item_Label_Line_1 <> DTL.Item_Label_Line_1;

// OR PAR.Item Label Line 2 NE DTL.Item Label Line 2
OR PAR.Item_Label_Line_2 <> DTL.Item_Label_Line_2;

// OR PAR.Unit Weight NE DTL.Unit Weight
OR PAR.Unit_Weight <> DTL.Unit_Weight;

// OR PAR.Minimum Weight Per Case NE DTL.Minimum Weight Per Case
OR PAR.Minimum_Weight_Per_Case <> DTL.Minimum_Weight_Per_Case;

// OR PAR.Maximum Weight Per Case NE DTL.Maximum Weight Per Case
OR PAR.Maximum_Weight_Per_Case <> DTL.Maximum_Weight_Per_Case;

// OR PAR.Number Cases On A Pallet NE DTL.Number Cases On A Pallet
OR PAR.Number_Cases_On_A_Pallet <> DTL.Number_Cases_On_A_Pallet;

// OR PAR.Item Label Line 3 NE DTL.Item Label Line 3
OR PAR.Item_Label_Line_3 <> DTL.Item_Label_Line_3;

// OR PAR.Chilling Time NE DTL.Chilling Time
OR PAR.Fresh_Chilling_Time <> DTL.Fresh_Chilling_Time;

// OR PAR.Misc Tare Weight NE DTL.Misc Tare Weight
OR PAR.Misc_Tare_Weight <> DTL.Misc_Tare_Weight;

// PAR.Change Plant Floor USR = CND.Change Product Only
PAR.Change_Plant_Floor_USR = 'P';

ENDIF;

// WRK.Change Code = CND.No
WRK.Change_Code = 'N';

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


EXECUTE FUNCTION(RTV BOX ID FOR ITEM    RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1396535;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Box_iD);
PARAMETER(DTL.Unit_Weight_USR);
PARAMETER(WRK.Item_Description);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // WRK.Unit Weight = CON.*ZERO
 WRK.Unit_Weight = *ZERO;

 EXECUTE FUNCTION(RTV Item Type & PckCD  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1396536;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Component_Item_Code);
 PARAMETER(WRK.Description_Line_One);
 PARAMETER(WRK.Unit_Weight);
 PARAMETER(WRK.Item_Type_Code);
 PARAMETER(PAR.Package_Type_Code);
 PARAMETER(WRK.Pallet_Tare_Weight);
 PARAMETER(WRK.Misc_Tare_Weight);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.Package Type Code is Box
 IF PAR.Package_Type_Code = 'B';

 // PAR.Box Description = WRK.Description Line One
 PAR.Box_Description = WRK.Description_Line_One;

 // PAR.Unit Weight = WRK.Unit Weight
 PAR.Unit_Weight = WRK.Unit_Weight;

 // PAR.Box iD = DB1.Component Item Code * CON.1 *
 PAR.Box_iD = DB1.Component_Item_Code * 1;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Department_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Item Description = WRK.Item Description
DTL.Item_Description = WRK.Item_Description;

//?Load Nominal Weight - Equals Unit weight if C/W=N, Equals 0 if C/W = Y
CASE;

// IF DTL.Catch Weight Status is yes
IF DTL.Catch_Weight_Status = 'Y';

// DTL.Nominal Weight = CON.*ZERO
DTL.Nominal_Weight = *ZERO;

//?Load Nominal Weight - Equals Unit weight if C/W=N, Equals 0 if C/W = Y
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Nominal Weight = DTL.Unit Weight
DTL.Nominal_Weight = DTL.Unit_Weight;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Item/Rtrn Chg Cod  CH) TYPE(CHGOBJ) FILE(CABZREP)          AC1398467;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third);
PARAMETER(DTL.UOM_Pricing);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Quality_Level);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Minimum_Weight_Per_Case);
PARAMETER(DTL.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Vendor_Item_Default);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(DTL.Transportation_Temp);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(DTL.Package_Type_Code);
PARAMETER(DTL.Maximum_Audit_Value);
PARAMETER(DTL.Minimum_Audit_Value);
PARAMETER(DTL.Market_Overage);
PARAMETER(DTL.Standard_Overage_Underage);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(DTL.Item_Pricing_Operation);
PARAMETER(DTL.Item_Pricing_Constant);
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Price_Method_Default);
PARAMETER(DTL.Fresh_Chilling_Time);
PARAMETER(DTL.Base_Conv_Loss_Item);
PARAMETER(DTL.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(DTL.Std_Weight_Head_Var_Ren);
PARAMETER(DTL.Pieces_Per_Head);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Group_for_Packaging);
PARAMETER(DTL.Item_Category_Number_1);
PARAMETER(DTL.Made_to_Order_Code);
PARAMETER(DTL.Item_Category_Number_2);
PARAMETER(DTL.Transportation_Equip_Type);
PARAMETER(DTL.Item_Category_Number_3);
PARAMETER(DTL.Item_Category_Code_3);
PARAMETER(DTL.Item_Category_Number_4);
PARAMETER(DTL.GL_Sub_Code);
PARAMETER(DTL.Item_Category_Number_5);
PARAMETER(DTL.Item_Structure_Sub_Class);
PARAMETER(DTL.Item_Category_Number_6);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(DTL.Item_Category_Number_7);
PARAMETER(DTL.Item_Exc_Man_Prc_Excp);
PARAMETER(DTL.Item_Category_Number_8);
PARAMETER(DTL.Item_Prod_Sched_Send_PFS);
PARAMETER(DTL.Item_Category_Number_9);
PARAMETER(DTL.Item_Category_Code_9);
PARAMETER(DTL.Item_Category_Number_10);
PARAMETER(DTL.Item_Category_Code_10);
PARAMETER(DTL.Pallet_Tare_Weight);
PARAMETER(DTL.Misc_Tare_Weight);
PARAMETER(DTL.Production_Lead_Days);
PARAMETER(DTL.Packaging_Code);
PARAMETER(DTL.Item_Market_Code);
PARAMETER(DTL.TF_Co_Ownership_Sts);
PARAMETER(DTL.Agrimetrics_group);
PARAMETER(DTL.Agrimetrics_pack);
PARAMETER(DTL.Agrimetrics_grade);
PARAMETER(DTL.PA_Base_Avail_Rpt_Include);
PARAMETER(DTL.PM_Pounds_per_Hour);
PARAMETER(DTL.Item_Frt_Overage_Prc_UOM);
PARAMETER(DTL.Packages_per_case);
PARAMETER(DTL.Use_Freeze_Sell_By_Days);
PARAMETER(DTL.PM_Batch_Size);
PARAMETER(DTL.Package_Level_size);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
PARAMETER(DTL.Std_Costing_Unit_Weight);
PARAMETER(DTL.FP_Std_Green_Weight);
PARAMETER(DTL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(DTL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(DTL.PM_Formula_LBS_Per_Hour);
PARAMETER(DTL.PM_Finished_LBS_Per_Hour);
PARAMETER(DTL.SH_Unused_was_broker);
PARAMETER(DTL.PM_Raw_Material_Type_Code);
PARAMETER(DTL.PM_Line_Number);
PARAMETER(DTL.Seconds_Item);
PARAMETER(DTL.Print_on_Realization_Rpt);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(WRK.Change_Code);
{
 //?USER: Processing after Data read

 CASE;

 // IF DB1.Unit Weight Change Sts is Yes
 IF DB1.Unit_Weight_Change_Sts = 'YES';

 // PAR.Unit Weight Change Sts = CND.Yes
 PAR.Unit_Weight_Change_Sts = 'YES';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.Unit Weight NE DB1.Unit Weight
 IF PAR.Unit_Weight <> DB1.Unit_Weight;

 // PAR.Unit Weight Change Sts = CND.Yes
 PAR.Unit_Weight_Change_Sts = 'YES';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Unit Weight Change Sts = CND.No
 PAR.Unit_Weight_Change_Sts = 'NO';

 ENDIF;

 ENDIF;

 //?Notification of change    12/20/01
 DO;

 // LCL.Item Code Txt = CVTVAR(DB1.Item Code)
 LCL.Item_Code_Txt = CVTVAR(DB1.Item_Code);

 // LCL.Description 14A      USR = CONCAT(CON.Item:,LCL.Item Code Txt,CON.1)
 LCL.Description_14A_USR = 'Item:' + LCL.Item_Code_Txt (1);

 // LCL.Text USR 8 = CONCAT(CON.Type:,DB1.Item Type Code,CON.1)
 LCL.Text_USR_8 = 'Type:' + DB1.Item_Type_Code (1);

 // LCL.Text USR 23 = CONCAT(LCL.Description 14A      USR,LCL.Text USR 8,CON.1)
 LCL.Text_USR_23 = LCL.Description_14A_USR + LCL.Text_USR_8 (1);

 // LCL.Text USR 20 = CONCAT(CON.Changed By:,JOB.*USER,CON.1)
 LCL.Text_USR_20 = 'Changed By:' + JOB.*USER (1);

 // LCL.Text USR 43 = CONCAT(LCL.Text USR 23,LCL.Text USR 20,CON.1)
 LCL.Text_USR_43 = LCL.Text_USR_23 + LCL.Text_USR_20 (1);

 //?Packaging & Supply
 CASE;

 // IF DB1.Item Type Code is Packaging and Supplies
 IF DB1.Item_Type_Code = 'PS';

 //?Box Unit Weight
 CASE;

 // IF DB1.Unit Weight NE PAR.Unit Weight
 IF DB1.Unit_Weight <> PAR.Unit_Weight;

 // LCL.Change Flag USR = CND.Yes
 LCL.Change_Flag_USR = 'Y';

 // Retrieve message - '&1 &2 &3'
 LCL.Office_Message_USR_1 = RTVMSG(USR3138);
 PARAMETER('Unit Weight:');
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(*BLANK);

 ENDIF;

 ENDIF;

 //?Finished Goods        4/29/02--also if Pieces or Bags change
 CASE;

 // IF DB1.Item Type Code is Finished Goods
 IF DB1.Item_Type_Code = 'FG';

 //?Misc Tare Weight
 CASE;

 // IF PAR.Misc Tare Weight NE DB1.Misc Tare Weight
 IF PAR.Misc_Tare_Weight <> DB1.Misc_Tare_Weight;

 // LCL.Change Flag USR = CND.Yes
 LCL.Change_Flag_USR = 'Y';

 // Retrieve message - '&1 &2 &3'
 LCL.Office_Message_USR_1 = RTVMSG(USR3138);
 PARAMETER('Misc Tare Weight:');
 PARAMETER(PAR.Misc_Tare_Weight);
 PARAMETER(',');

 ENDIF;

 //?Minimum Weight Per Case
 CASE;

 // IF PAR.Minimum Weight Per Case NE DB1.Minimum Weight Per Case
 IF PAR.Minimum_Weight_Per_Case <> DB1.Minimum_Weight_Per_Case;

 // LCL.Change Flag USR = CND.Yes
 LCL.Change_Flag_USR = 'Y';

 // Retrieve message - '&1 &2 &3'
 LCL.Office_Message_USR_2 = RTVMSG(USR3138);
 PARAMETER('Min Wt per Case:');
 PARAMETER(PAR.Minimum_Weight_Per_Case);
 PARAMETER(',');

 ENDIF;

 //?Maximum Weight Per Case
 CASE;

 // IF PAR.Maximum Weight Per Case NE DB1.Maximum Weight Per Case
 IF PAR.Maximum_Weight_Per_Case <> DB1.Maximum_Weight_Per_Case;

 // LCL.Change Flag USR = CND.Yes
 LCL.Change_Flag_USR = 'Y';

 // Retrieve message - '&1 &2 &3'
 LCL.Office_Message_USR_3 = RTVMSG(USR3138);
 PARAMETER('Max Wt per Case:');
 PARAMETER(PAR.Maximum_Weight_Per_Case);
 PARAMETER(',');

 ENDIF;

 ENDIF;

 CASE;

 // IF LCL.Change Flag USR is Yes
 IF LCL.Change_Flag_USR = 'Y';

 EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
 PARAMETER(DB1.Company_Number);
 PARAMETER('PRKSCHED');
 PARAMETER(WRK.DL_List_ID);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // Call program SND Pager Msg-Long    UP.
 CALL PROGRAM(SND Pager Msg-Long    UP) ('POPMUPC');
 PARAMETER(WRK.DL_List_ID);
 PARAMETER(LCL.Text_USR_43);
 PARAMETER(LCL.Office_Message_USR_1);
 PARAMETER(LCL.Office_Message_USR_2);
 PARAMETER(LCL.Office_Message_USR_3);
 PARAMETER(LCL.Office_Message_USR_4);
 PARAMETER(LCL.Office_Message_USR_5);

 ENDIF;

 ENDDO;

 //?USER: Processing before Data update

 // DB1.Unit Weight Change Sts = PAR.Unit Weight Change Sts
 DB1.Unit_Weight_Change_Sts = PAR.Unit_Weight_Change_Sts;

 // PAR.Change Code = CND.Yes
 PAR.Change_Code = 'Y';

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(CHG Item Default f/QA  CH) TYPE(CHGOBJ) FILE(OMBYREP)          AC1401611;
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Item_Label_Line_1);
 PARAMETER(DB1.Item_Label_Line_2);
 PARAMETER(DB1.Item_Label_Line_3);
 PARAMETER(DB1.Item_Label_Line_4);
 PARAMETER(DB1.Unit_Weight);
 PARAMETER(DB1.Catch_Weight_Status);
 PARAMETER(DB1.Minimum_Weight_Per_Case);
 PARAMETER(DB1.Maximum_Weight_Per_Case);
 PARAMETER(DB1.Number_Cases_On_A_Pallet);
 PARAMETER(DB1.Fresh_Chilling_Time);
 PARAMETER(DB1.Misc_Tare_Weight);
}


//?USER: Process command keys

CASE;

// IF WRK.Change Code is Yes
IF WRK.Change_Code = 'Y';

// WRK.Alpha Zeros = CON.00
WRK.Alpha_Zeros_2 = 00;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?Change AS Product code if change status is yes = Accu-Sort
CASE;

// IF PAR.Change Plant Floor USR is Change Product Only
IF PAR.Change_Plant_Floor_USR = 'P';

//?If record status is not active then flag accu-sort record for delete
CASE;

// IF DTL.Record Status is Active
IF DTL.Record_Status = 'A';

// PAR.AS Add/Change/Delete = CND.Add
PAR.AS_Add_Change_Delete = 'A';

//?If record status is not active then flag accu-sort record for delete
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.AS Add/Change/Delete = CND.Delete
PAR.AS_Add_Change_Delete = 'D';

ENDIF;

// Call program PFS One Prod/Box Rec  XF.
CALL PROGRAM(PFS One Prod/Box Rec  XF) ('PDK1XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Minimum_Weight_Per_Case);
PARAMETER(DTL.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(DTL.Package_Type_Code);
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Fresh_Chilling_Time);
PARAMETER(DTL.Misc_Tare_Weight);
PARAMETER(PAR.AS_Add_Change_Delete);

ENDIF;

ENDIF;

