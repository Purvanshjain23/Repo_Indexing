// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDEJEFR
// ?Date: 14.08.2025 Time: 03:31:33
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.PRT Night Queue Run Sts = CND.no
WRK.PRT_Night_Queue_Run_Sts = 'N';

// WRK.PRT Printer Device = CON.*BLANK
WRK.PRT_Printer_Device = *BLANK;

// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Company Number CDE = PAR.Company Number
CTL.Company_Number_CDE = PAR.Company_Number;

// CTL.Company Value Code = CTL.Company Value Code Usr
CTL.Company_Value_Code = CTL.Company_Value_Code_Usr;

//?USER: Initialize subfile record (existing record)

//?Only display if company matches selected company
CASE;

// IF CTL.Company Number CDE is not equal to zero
IF CTL.Company_Number_CDE <> *ZERO;

CASE;

// IF RCD.Company Number NE CTL.Company Number CDE
IF RCD.Company_Number <> CTL.Company_Number_CDE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Only display if company value code matches record company value
CASE;

// IF CTL.Company Value Code NE WRK.BLANK
IF CTL.Company_Value_Code <> WRK.BLANK;

CASE;

// IF RCD.Company Value Code LT CTL.Company Value Code
IF RCD.Company_Value_Code < CTL.Company_Value_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Company Address    RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1113470;
PARAMETER(RCD.Company_Number);
PARAMETER(WRK.Name);
PARAMETER(WRK.Address_Line_1);
PARAMETER(WRK.Address_Line_2);
PARAMETER(WRK.Address_Line_3);
PARAMETER(RCD.Condition_Name_10_USR);
PARAMETER(WRK.Zip_Postal_Code);
PARAMETER(WRK.State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Val Existance         RT) TYPE(RTVOBJ) FILE(PPB2REP)           AC1809167;
PARAMETER(RCD.Company_Value_Code);
PARAMETER(RCD.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


//?CALC: Subfile control function fields

CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Company Number CDE
AND PGM.*Cursor_field = CTL.Company_Number_CDE;

// Call program SEL Co By Number       SR.
CALL PROGRAM(SEL Co By Number       SR) ('PDMESRR');
PARAMETER(CTL.Company_Number_CDE);
PARAMETER(NLL.Name);

// PAR.Company Number = CTL.Company Number CDE
PAR.Company_Number = CTL.Company_Number_CDE;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile control

CASE;

// IF CTL.Company Number CDE NE CTL.Company Number
IF CTL.Company_Number_CDE <> CTL.Company_Number;

// PAR.Company Number = CTL.Company Number CDE
PAR.Company_Number = CTL.Company_Number_CDE;

// CTL.Company Number = CTL.Company Number CDE
CTL.Company_Number = CTL.Company_Number_CDE;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF CTL.Company Value Code Usr NE CTL.Company Value Code
IF CTL.Company_Value_Code_Usr <> CTL.Company_Value_Code;

// CTL.Company Value Code = CTL.Company Value Code Usr
CTL.Company_Value_Code = CTL.Company_Value_Code_Usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record fields

//?  Validate system values based on code entered
//?REQ:  Alpha
CASE;

// IF RCD.System Value Type is Alpha Value Type
IF RCD.System_Value_Type = 'A';

// AND RCD.System Value Alpha is Equal to Blank
AND RCD.System_Value_Alpha = *BLANK;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

//?REQ:  Numeric
CASE;

// IF RCD.System Value Type is Numeric Value Type
IF RCD.System_Value_Type = 'N';

// AND RCD.System Value Numeric is Equal to zero
AND RCD.System_Value_Numeric = *ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(RCD.System_Value_Numeric);

ENDIF;

//?   Edit Default Carrier
CASE;

// IF RCD.Company Value Code is Default Carrier
IF RCD.Company_Value_Code = 'DFTCARRIER';

// WRK.Carrier Code = RCD.System Value Alpha
WRK.Carrier_Code = RCD.System_Value_Alpha;

CASE;

// IF PGM.*Cursor field <IS> RCD.Company Value Code
IF PGM.*Cursor_field = RCD.Company_Value_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(WRK.Carrier_Code);

ENDIF;

EXECUTE FUNCTION(Val Carrier           RT) TYPE(RTVOBJ) FILE(OMFFREP)           AC1197583;
PARAMETER(WRK.Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(WRK.Carrier_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.System Value Alpha = CON.*BLANK
RCD.System_Value_Alpha = *BLANK;

// RCD.System Value Alpha = WRK.Carrier Code
RCD.System_Value_Alpha = WRK.Carrier_Code;

ENDIF;

ENDIF;

//?   Edit Default Truck
CASE;

// IF RCD.Company Value Code is Default Truck
IF RCD.Company_Value_Code = 'DFTTRUCK';

// WRK.Truck Size = RCD.System Value Alpha
WRK.Truck_Size = RCD.System_Value_Alpha;

CASE;

// IF PGM.*Cursor field <IS> RCD.Company Value Code
IF PGM.*Cursor_field = RCD.Company_Value_Code;

// Call program SEL Truck Size Active  SR.
CALL PROGRAM(SEL Truck Size Active  SR) ('PDEPSRR');
PARAMETER(WRK.Truck_Size);

ENDIF;

EXECUTE FUNCTION(Val Truck Size        RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197603;
PARAMETER(WRK.Truck_Size);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Truck size doesn't exists'
ERROR(USR1254);
MSGPARM(WRK.Truck_Size);

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.System Value Alpha = CON.*BLANK
RCD.System_Value_Alpha = *BLANK;

// RCD.System Value Alpha = WRK.Truck Size
RCD.System_Value_Alpha = WRK.Truck_Size;

ENDIF;

ENDIF;

//?   Edit Warehouse Transfer warehouse
CASE;

// IF RCD.Company Value Code is Warehouse Xfer Whse
IF RCD.Company_Value_Code = 'WHSEXFER';

// WRK.Warehouse Code = RCD.System Value Alpha
WRK.Warehouse_Code = RCD.System_Value_Alpha;

CASE;

// IF PGM.*Cursor field <IS> RCD.Company Value Code
IF PGM.*Cursor_field = RCD.Company_Value_Code;

// Call program SEL Non-Prod Whse      SR.
CALL PROGRAM(SEL Non-Prod Whse      SR) ('PDL4SRR');
PARAMETER(WRK.Warehouse_Code);

ENDIF;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(WRK.Warehouse_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(RCD.System_Value_Alpha);

ENDIF;

ENDIF;

//?7=Edit Comment
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Edt CoVal Comment     EF.
CALL PROGRAM(Edt CoVal Comment     EF) ('PPU5EFR');
PARAMETER(RCD.Company_Value_Code);
PARAMETER(RCD.Description);
PARAMETER(RCD.System_Value_Type);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Company Values     CR) TYPE(CRTOBJ) FILE(PDKMREP)          AC1381500;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Company_Value_Code);
PARAMETER(RCD.Description);
PARAMETER(RCD.System_Value_Type);
PARAMETER(RCD.System_Value_Alpha);
PARAMETER(RCD.System_Value_Numeric);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);

//?USER: Change DBF record

EXECUTE FUNCTION(CHG Company Values     CH) TYPE(CHGOBJ) FILE(PDKMREP)          AC1381501;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Company_Value_Code);
PARAMETER(RCD.Description);
PARAMETER(RCD.System_Value_Type);
PARAMETER(RCD.System_Value_Alpha);
PARAMETER(RCD.System_Value_Numeric);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp 2 IF) TYPE(EXCINTFUN)                      AC2165057;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Process command keys

//?Print Listing request
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Prt Company Values');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('C/A');
PARAMETER(*MISSING);
PARAMETER(1);

// WRK.Company Number Pass   USR = CTL.Company Number CDE
WRK.Company_Number_Pass_USR = CTL.Company_Number_CDE;

// WRK.System Value Numeric = PAR.PRT Number of Copies
WRK.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// Call program PRT Company Values    UP.
SBMJOB;
CALL PROGRAM(PRT Company Values    UP) ('PPVIUPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(WRK.System_Value_Numeric);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(WRK.Company_Number_Pass_USR);
SBMJOBEND;

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print List has been submitted'
MESSAGE(USR1742 *INFO);

ENDIF;

ENDIF;

