// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMDSPVR
// ?Date: 14.08.2025 Time: 03:44:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(RTV default Company    IF) TYPE(EXCINTFUN)                     AC1592222;
PARAMETER(LCL.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
 PARAMETER(JOB.*USER);
 PARAMETER('P/S');
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER('P/S');
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Validate fields

EXECUTE FUNCTION(Rtv Period Start/End  RT) TYPE(RTVOBJ) FILE(CAATREP)           AC1666753;
PARAMETER(LCL.Company_Number);
PARAMETER(DTL.Accounting_Year_Code);
PARAMETER(DTL.Accounting_Period_Code);
PARAMETER(DTL.USR_From_Date);
PARAMETER(DTL.USR_To_Date);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // PAR.Period Beginning Date = DB1.Period Beginning Date
 PAR.Period_Beginning_Date = DB1.Period_Beginning_Date;

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 ENDIF;

 // PAR.Period Ending Date = DB1.Period Ending Date
 PAR.Period_Ending_Date = DB1.Period_Ending_Date;

}


//?Validate that the TP entered is valid in the Broker file.  Only
//?TP in the Broker file are valid for this program.
EXECUTE FUNCTION(RTV Brokr by TP       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC2067429;
PARAMETER(DTL.D_TRADE_PARTNER_CODE);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Trade Partner not valid'
ERROR(USR4614);
MSGPARM(DTL.D_TRADE_PARTNER_CODE);

ENDIF;

//?If option one, validate the dates
CASE;

// IF DTL.USR Detail or Summary is Report Selection 1
IF DTL.USR_Detail_or_Summary = '1';

//?Validate From Date Entered
CASE;

// IF DTL.USR From Date is not equal zero
IF DTL.USR_From_Date <> *ZERO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(363);
PARAMETER(DTL.USR_From_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Validate From Date Entered
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date entered is not found in the Calendar file'
ERROR(USR0567);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//?Validate to date entered
CASE;

// IF DTL.USR To Date is not equal zero
IF DTL.USR_To_Date <> *ZERO;

EXECUTE FUNCTION(RTV Calendar           RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1102049;
PARAMETER(363);
PARAMETER(DTL.USR_To_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.Calendar not found
 PGM.*Return_code = 'USR0018';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Validate to date entered
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Date entered is not found in the Calendar file'
ERROR(USR0567);
MSGPARM(DTL.USR_To_Date);

ENDIF;

//?Validate From Date not Greater than To date
CASE;

// IF DTL.USR From Date GT DTL.USR To Date
IF DTL.USR_From_Date > DTL.USR_To_Date;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.USR_From_Date);

ENDIF;

EXECUTE FUNCTION(RTV Header Record     RT) TYPE(RTVOBJ) FILE(ECP017)            AC1918863;
PARAMETER(DTL.D_TRADE_PARTNER_CODE);
PARAMETER(DTL.USR_From_Date);
PARAMETER(DTL.USR_To_Date);
PARAMETER(LCL.Record_Found_USR);
PARAMETER(LCL.D_EDI_INV_PROC_FLAG);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.D-Actual Ship Date GE PAR.D-Actual Ship Date
 IF DB1.D_Actual_Ship_Date >= PAR.D_Actual_Ship_Date;

 // AND DB1.D-Actual Ship Date LE PAR.USR To Date
 AND DB1.D_Actual_Ship_Date <= PAR.USR_To_Date;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

CASE;

// IF LCL.D-EDI INV PROC FLAG is *Yes
IF LCL.D_EDI_INV_PROC_FLAG = 'Y';

// Send error message - 'Date range already sent via EDI.'
ERROR(USR4109);
MSGPARM(DTL.USR_From_Date);
MSGPARM(DTL.USR_To_Date);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'File already Built for this date range.'
ERROR(USR4615);
MSGPARM(DTL.USR_From_Date);
MSGPARM(DTL.USR_To_Date);

ENDIF;

ENDIF;

ENDIF;

//?USER: Validate relations

//?View or Delete the Build
CASE;

// IF DTL.USR Detail or Summary is Report Selection 2
IF DTL.USR_Detail_or_Summary = '2';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program ZzzDist Allow Header  DF.
CALL PROGRAM(ZzzDist Allow Header  DF) ('PMEEDFR');
PARAMETER(DTL.D_TRADE_PARTNER_CODE);
PARAMETER(DTL.USR_From_Date);
PARAMETER(DTL.USR_To_Date);

ENDIF;

//?USER: User defined action

//?Build file and Retrieve the total amt of Allowance
CASE;

// IF DTL.USR Detail or Summary is Report Selection 1
IF DTL.USR_Detail_or_Summary = '1';

// Call program Zzz EDI DistAllowance XF.
CALL PROGRAM(Zzz EDI DistAllowance XF) ('PMUFXFR');
PARAMETER(DTL.D_TRADE_PARTNER_CODE);
PARAMETER(DTL.USR_From_Date);
PARAMETER(DTL.USR_To_Date);
PARAMETER('BLANK');
PARAMETER(DTL.Total_Amount);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?EDI the Discount Allow file
CASE;

// IF DTL.USR Detail or Summary is Report Selection 3
IF DTL.USR_Detail_or_Summary = '3';

// Call program Zzz Dist Allowance    CL.
SBMJOB;
CALL PROGRAM(Zzz Dist Allowance    CL) ('PMUXUPC');
PARAMETER(PGM.*Return_code);
PARAMETER(DTL.D_TRADE_PARTNER_CODE);
SBMJOBOVR JOB(EDIDPRO);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBOVR LOG(4;
SBMJOBOVR 0;
SBMJOBOVR *SECLVL);
SBMJOBEND;

ENDIF;

