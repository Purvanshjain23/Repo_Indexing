// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDG9XFR
// ?Date: 14.08.2025 Time: 03:28:21
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?RMC 11/3/16 IF HPB and Str Type=800 then allow price =.00
EXECUTE FUNCTION(RTV Meth Type/Audit    RT) TYPE(RTVOBJ) FILE(PDIHREP)          AC1319765;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(WRK.Price_Audit);
PARAMETER(PAR.Price_Method_Type);
PARAMETER(PAR.Decimal_Places_Rounded);
PARAMETER(PAR.PMH_Price_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Event is Pre update Invoicing then use Invoice qtemp files
CASE;

// IF PAR.Event Called From is Pre-Update Invoice
IF PAR.Event_Called_From = **;

//?Build files in Library: Qtemp
// Call program UPD Pricing Files Inv  UP.
CALL PROGRAM(UPD Pricing Files Inv  UP) ('PDPRINCL');
PARAMETER(WRK.Error_Status);
PARAMETER(PAR.Event_Called_From);

EXECUTE FUNCTION(DEL Shp Dtl Price Wrk  RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1310852;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Dtl Price Wrk DL) TYPE(DLTOBJ) FILE(PDIMCPP)          AC1310854;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
}


EXECUTE FUNCTION(DEL Ship Formula Work  RT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1310855;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Dtl Form Work DL) TYPE(DLTOBJ) FILE(PDJKCPP)          AC1310856;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Pricing_Sequence_Number);
}


CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

// PAR.Error Return = CND.Formula Price Error
PAR.Error_Return = 'FPE';

QUIT;

ENDIF;

ENDIF;

//?Delete Rcds from Ord Dtl & Ship Pricing File for this line only
CASE;

// IF PAR.Event Called From is Not Price Only
IF PAR.Event_Called_From = '02'/**/'AO'/'AI';

//?Delete Order Line Price for Work File for Invoice
CASE;

// IF PAR.Event Called From is Pre-Update Invoice
IF PAR.Event_Called_From = **;

EXECUTE FUNCTION(DEL Shp Dtl Price Wrk  RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1310852;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Dtl Price Wrk DL) TYPE(DLTOBJ) FILE(PDIMCPP)          AC1310854;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
}


EXECUTE FUNCTION(DEL Ship Formula Work  RT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1310855;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Dtl Form Work DL) TYPE(DLTOBJ) FILE(PDJKCPP)          AC1310856;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Pricing_Sequence_Number);
}


ENDIF;

//?Delete Order Line Pricing for AutoCalc Order Entry
CASE;

// IF PAR.Event Called From is AutoCalc O/E
IF PAR.Event_Called_From = 'AO';

EXECUTE FUNCTION(DEL Ship Detail Pricng RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1299816;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Detail Pricng DL) TYPE(DLTOBJ) FILE(PDIMCPP)          AC1299817;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
}


EXECUTE FUNCTION(DEL Ship Dtl Formula   RT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1300026;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Dtl Formula   DL) TYPE(DLTOBJ) FILE(PDJKCPP)          AC1300025;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Pricing_Sequence_Number);
}


ENDIF;

//?Delete Order Line Pricing for AutoCalc Invoice
CASE;

// IF PAR.Event Called From is AutoCalc Inv
IF PAR.Event_Called_From = 'AI';

EXECUTE FUNCTION(DEL Ship Detail Pricng RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1299816;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Detail Pricng DL) TYPE(DLTOBJ) FILE(PDIMCPP)          AC1299817;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
}


EXECUTE FUNCTION(DEL Ship Dtl Formula   RT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1300026;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Dtl Formula   DL) TYPE(DLTOBJ) FILE(PDJKCPP)          AC1300025;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Pricing_Sequence_Number);
}


ENDIF;

//?Copy Order Line Pricing for Regular file Inv
CASE;

// IF PAR.Event Called From is Invoice Update
IF PAR.Event_Called_From = '02';

EXECUTE FUNCTION(DEL Ship Detail Pricng RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1299816;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Detail Pricng DL) TYPE(DLTOBJ) FILE(PDIMCPP)          AC1299817;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
}


EXECUTE FUNCTION(DEL Ship Dtl Formula   RT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1300026;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Dtl Formula   DL) TYPE(DLTOBJ) FILE(PDJKCPP)          AC1300025;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Pricing_Sequence_Number);
}


EXECUTE FUNCTION(CPY Ship Prc f/Qtmp    RT) TYPE(RTVOBJ) FILE(PDIMCPP)          AC1310881;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CRT Ship Price Detail  CR) TYPE(CRTOBJ) FILE(PDIMCPP)          AC1296392;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Price_Detail_Sequence);
 PARAMETER(DB1.Componant_Price);
 PARAMETER(DB1.PD_Status);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CPY Shp Dtl Form f/QtmpRT) TYPE(RTVOBJ) FILE(PDJKCPP)          AC1310884;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CRT Ship Dtl Formula   CR) TYPE(CRTOBJ) FILE(PDJKCPP)          AC1296159;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Price_Method_Componant);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Pricing_Sequence_Number);
 PARAMETER(DB1.Sales_Yield);
 PARAMETER(DB1.Market_Value);
 PARAMETER(DB1.Credit_Value);
 PARAMETER(DB1.PD_Status);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1255766;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

ENDIF;

//?Exit Bypass pricing if Entry Code is 01 or 02 (Update), OR Process
CASE;

// IF PAR.Event Called From is Invoice Update
IF PAR.Event_Called_From = '02';

//?***** Price has already been performed in this case, records
//?***** were copied from Qtemp.
PGM.*Return_code = *BLANK;

RETURN;

//?Exit Bypass pricing if Entry Code is 01 or 02 (Update), OR Process
// IF *OTHERWISE
IF *OTHERWISE;

//?*** Process pricing per PD Price Method Detail
// Call program CLC Read/Proc. Detail  XF.
CALL PROGRAM(CLC Read/Proc. Detail  XF) ('PDPBXFR');
PARAMETER(PAR.Price_Method_Type);
PARAMETER(PAR.Decimal_Places_Rounded);
PARAMETER(PAR.PMH_Price_Type);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Price_Method_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Requested_Delivery_Date);
PARAMETER(PAR.Pricing_Retrieved_Amount);
PARAMETER(PAR.Event_Called_From);
PARAMETER(PAR.OD_Ceiling_Price);
PARAMETER(PAR.OD_Market_Begin_Date);
PARAMETER(PAR.OD_Market_Ending_Date);
PARAMETER(PAR.Error_Return);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Price_Overage_Override);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Price_based_on_U_M1_S);
PARAMETER(PAR.Price_based_on_U_M2_S);
PARAMETER(PAR.Price_based_on_U_M3_S);
PARAMETER(PAR.Price_Type_Status);

//?If Extended Method=for Price, use Pricing U/M & Load Unit Price
CASE;

// IF PAR.Price Method Type is Extended Pricing
IF PAR.Price_Method_Type = 'X';

//?If U/M Priced = Primary then execute
CASE;

// IF PAR.U/M - Pricing EQ PAR.U/M - Primary
IF PAR.UOM_Pricing = PAR.UOM_Primary;

// PAR.Unit Price = PAR.Price based on U/M1 S
PAR.Unit_Price = PAR.Price_based_on_U_M1_S;

ENDIF;

//?If U/M Priced = Secondary then execute
CASE;

// IF PAR.U/M - Pricing EQ PAR.U/M - Second
IF PAR.UOM_Pricing = PAR.UOM_Second;

// PAR.Unit Price = PAR.Price based on U/M2 S
PAR.Unit_Price = PAR.Price_based_on_U_M2_S;

ENDIF;

//?If U/M Priced = Third then execute
CASE;

// IF PAR.U/M - Pricing EQ PAR.U/M - Third
IF PAR.UOM_Pricing = PAR.UOM_Third;

// PAR.Unit Price = PAR.Price based on U/M3 S
PAR.Unit_Price = PAR.Price_based_on_U_M3_S;

ENDIF;

ENDIF;

//?Made the checking an OR condition so the price will not get
//?overridden if the second UM or the third UM is also the same
//?as the Primary UM.  -Purva 10/13/98
//?PAR.Unit Price Ordered U/M  -Purva 10/13/98
CASE;

// IF PAR.U/M - Ordered EQ PAR.U/M - Primary
IF PAR.U_M_Ordered = PAR.UOM_Primary;

// PAR.Unit Price Ordered U/M = PAR.Price based on U/M1 S
PAR.Unit_Price_Ordered_U_M = PAR.Price_based_on_U_M1_S;

//?PAR.Unit Price Ordered U/M  -Purva 10/13/98
// IF PAR.U/M - Ordered EQ PAR.U/M - Second
IF PAR.U_M_Ordered = PAR.UOM_Second;

// PAR.Unit Price Ordered U/M = PAR.Price based on U/M2 S
PAR.Unit_Price_Ordered_U_M = PAR.Price_based_on_U_M2_S;

//?PAR.Unit Price Ordered U/M  -Purva 10/13/98
// IF PAR.U/M - Ordered EQ PAR.U/M - Third
IF PAR.U_M_Ordered = PAR.UOM_Third;

// PAR.Unit Price Ordered U/M = PAR.Price based on U/M3 S
PAR.Unit_Price_Ordered_U_M = PAR.Price_based_on_U_M3_S;

ENDIF;

ENDIF;

//?If Priced, check for 0 Price, if yes then Item setup Error
CASE;

// IF PAR.Price Status is Priced
IF PAR.Price_Status = 'P';

// AND PAR.Unit Price Ordered U/M is Equal zero
AND PAR.Unit_Price_Ordered_U_M = *ZERO;

EXECUTE FUNCTION(Val Manual Price      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1581694;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(NLL.Description_Line_One);
PARAMETER(NLL.Default_Commod_Mark_basis);
PARAMETER(NLL.Market_Overage);
PARAMETER(NLL.Standard_Overage_Underage);
PARAMETER(NLL.Commodity_Price_Group);
PARAMETER(NLL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Primal_Group_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Item Str Type     RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC2118069;
PARAMETER(PAR.Item_Code);
PARAMETER(LCL.Item_Structure_Type_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program Rtv Plant Co/Org      XF.
CALL PROGRAM(Rtv Plant Co/Org      XF) ('PMOVXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);

EXECUTE FUNCTION(RTV Type Code          RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1441836;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(LCL.Type_Code);
PARAMETER(NLL.Customer_Group_Code);
PARAMETER(NLL.Customer_Group_Code_2);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Sample or Cut Loss Product Code   OR HPB OUT OF SPEC
CASE;

// IF LCL.Company Organization is Daily's
IF LCL.Company_Organization = 'D';

// AND LCL.Type Code is Is Promotional/Samples
AND LCL.Type_Code = 'PS';

//?Sample or Cut Loss Product Code   OR HPB OUT OF SPEC
// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

// AND LCL.Item Structure Type Code is Out of Spec   (HPB)
AND LCL.Item_Structure_Type_Code = 800;

//?Sample or Cut Loss Product Code   OR HPB OUT OF SPEC
// IF LCL.Primal Group Code is NE Samples or Cut Loss
IF LCL.Primal_Group_Code <> 'UNID';

// PAR.Price Status = CND.Unpriced
PAR.Price_Status = 'U';

// PAR.Error Return = CND.Item Setup Error
PAR.Error_Return = 'ITERR';

ENDIF;

ENDIF;

