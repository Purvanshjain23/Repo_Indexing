// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDXLXFR
// ?Date: 14.08.2025 Time: 03:36:28
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV/CNT Ham Grp/Order  RT) TYPE(RTVOBJ) FILE(PDNDCPP)          AC1572086;
PARAMETER(PAR.Ham_Group_Production_Date);
PARAMETER(PAR.Ham_Group_Processing_Seq);
PARAMETER(PAR.Deadline_Departure_Date);
PARAMETER(PAR.Deadline_Departure_Time);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Count_Ahead_USR);
{
 //?USER: Initialize routine

 //?Count Dashed Line.
 DO;

 // PAR.Count Ahead USR = CON.1
 PAR.Count_Ahead_USR = 1;

 ENDDO;

 //?USER: Process Data record

 CASE;

 // IF DB1.Order Number EQ PAR.Order Number
 IF DB1.Order_Number = PAR.Order_Number;

 //?Detail Line.
 DO;

 CASE;

 // IF DB1.Ham Group Sched Comment is not equal to blank
 IF DB1.Ham_Group_Sched_Comment <> *BLANK;

 // PAR.Count Ahead USR = PAR.Count Ahead USR + CON.2
 PAR.Count_Ahead_USR = PAR.Count_Ahead_USR + 2;

 ENDIF;

 // PAR.Count Ahead USR = PAR.Count Ahead USR + CON.3
 PAR.Count_Ahead_USR = PAR.Count_Ahead_USR + 3;

 ENDDO;

 //?Items & Comments.
 DO;

 EXECUTE FUNCTION(RTV/CNT Ham Group/Item RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1572056;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Ham_Group_Number);
 PARAMETER(PAR.Count_Records_USR);
 {
  //?USER: Initialize routine

  // PAR.Count Records         USR = CON.*ZERO
  PAR.Count_Records_USR = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF DB1.Ham Group Number EQ PAR.Ham Group Number
  IF DB1.Ham_Group_Number = PAR.Ham_Group_Number;

  CASE;

  // IF DB1.Detail Line Status is Cancelled
  IF DB1.Detail_Line_Status = 'X';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?(Same Ham Group) & (Order Detail not cancelled).
  DO;

  // PAR.Count Records         USR = PAR.Count Records         USR + CON.1
  PAR.Count_Records_USR = PAR.Count_Records_USR + 1;

  EXECUTE FUNCTION(RTV/CNT Ord Dtl Cmnts  RT) TYPE(RTVOBJ) FILE(OPCPCPP)          AC1572057;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Count_Records_USR);
  {
   //?USER: Process Data record

   // PAR.Count Records         USR = PAR.Count Records         USR + CON.1
   PAR.Count_Records_USR = PAR.Count_Records_USR + 1;

  }

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  ENDDO;

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // PAR.Count Ahead USR = PAR.Count Ahead USR + CON.1
 PAR.Count_Ahead_USR = PAR.Count_Ahead_USR + 1;

 // PAR.Count Ahead USR = PAR.Count Ahead USR + PAR.Count Records         USR
 PAR.Count_Ahead_USR = PAR.Count_Ahead_USR + PAR.Count_Records_USR;

 ENDIF;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 ENDDO;

 //?Footer & Comment.
 DO;

 // PAR.Count Ahead USR = PAR.Count Ahead USR + CON.2
 PAR.Count_Ahead_USR = PAR.Count_Ahead_USR + 2;

 //?Count Order Comments.
 DO;

 EXECUTE FUNCTION(RTV First 70char       RT) TYPE(RTVOBJ) FILE(OPCOCPP)          AC1571026;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER('IN');
 PARAMETER(PAR.USR_Text_70);
 {
  //?USER: Initialize routine

  // PAR.USR Text 70 = CON.*BLANK
  PAR.USR_Text_70 = *BLANK;

  // PAR.Count USR = CON.*ZERO
  PAR.Count_USR = *ZERO;

  //?USER: Process Data record

  // PAR.Count USR = PAR.Count USR + CON.1
  PAR.Count_USR = PAR.Count_USR + 1;

  CASE;

  // IF PAR.Count USR is One
  IF PAR.Count_USR = 1;

  // PAR.USR Text 70 = DB1.Comment Text
  PAR.USR_Text_70 = DB1.Comment_Text;

  // IF PAR.Count USR is LE 3
  IF PAR.Count_USR <= 3;

  // PAR.USR Text 70 = CONCAT(PAR.USR Text 70,DB1.Comment Text,CON.1)
  PAR.USR_Text_70 = PAR.USR_Text_70 + DB1.Comment_Text (1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  QUIT;

  ENDIF;

 }

 CASE;

 // IF PAR.USR Text 70 is Blank
 IF PAR.USR_Text_70 = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Count Ahead USR = PAR.Count Ahead USR + CON.1
 PAR.Count_Ahead_USR = PAR.Count_Ahead_USR + 1;

 ENDIF;

 ENDDO;

 ENDDO;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


