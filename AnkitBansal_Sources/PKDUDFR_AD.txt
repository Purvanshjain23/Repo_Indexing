// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKDUDFR
// ?Date: 14.08.2025 Time: 02:49:06
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(HPE073) TYPE(EXCINTFUN)                                        AB1188852;
{
 //?Execute internal function

 //?NEW Balance to Kill Report
 //?  PKDUDTR -- WW Bal to kill
 //?  PKGMPFR -- Prt Report
}


EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.TH Schedule Kill Shift = CND.Shift 1
CTL.TH_Schedule_Kill_Shift = 1;

// CTL.BOH Company Number = WRK.CC Company Number
CTL.BOH_Company_Number = WRK.CC_Company_Number;

// CTL.CC Company Number = CTL.BOH Company Number
CTL.CC_Company_Number = CTL.BOH_Company_Number;

// CTL.TH Kill Balancing Sts = CND.Error
CTL.TH_Kill_Balancing_Sts = 'E';

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


CASE;

// IF CTL.TH Kill Date EQ WRK.Zero USR
IF CTL.TH_Kill_Date = WRK.Zero_USR;

// CTL.TH Kill Date = JOB.*Job date
CTL.TH_Kill_Date = JOB.*Job_date;

ENDIF;

//?USER: Initialize subfile record from DBF record

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Record_selected = 'Y';

//?only for specify kill date
CASE;

// IF DB1.TH Kill Date EQ CTL.TH Kill Date
IF DB1.TH_Kill_Date = CTL.TH_Kill_Date;

//?only for specify kill date
// IF *OTHERWISE
IF *OTHERWISE;

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Record_selected = 'N';

ENDIF;

//?ONLY FOR SELECTED BALANCE OR ERROR RECORD, OR ALL
CASE;

// IF DB1.TH Kill Balancing Sts EQ CTL.TH Kill Balancing Sts
IF DB1.TH_Kill_Balancing_Sts = CTL.TH_Kill_Balancing_Sts;

//?ONLY FOR SELECTED BALANCE OR ERROR RECORD, OR ALL
// IF CTL.TH Kill Balancing Sts EQ WRK.Blank Usr 1 fld Usr
IF CTL.TH_Kill_Balancing_Sts = WRK.Blank_Usr_1_fld_Usr;

//?ONLY FOR SELECTED BALANCE OR ERROR RECORD, OR ALL
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Only select Market, or subject
//?Do not select any resale hogs,
//?No resale hogs
CASE;

// IF DB1.TH Hog Class Type is Resale
IF DB1.TH_Hog_Class_Type = 'R';

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Check if there are any error for this tattoo, If so this routine
//?will check which error and flag field in reverse image.
EXECUTE FUNCTION(RTV Check for Error   RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1111032;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER(RCD.Error_Type_1_Usr);
PARAMETER(RCD.Error_Type_2_Usr);
PARAMETER(RCD.Error_Type_3_Usr);
PARAMETER(RCD.Error_Type_4_Usr);
PARAMETER(RCD.Error_Type_5_Usr);
PARAMETER(WRK.Error_Type_Found);
PARAMETER(WRK.Error_Type_6_Usr);
PARAMETER(WRK.Error_Type_7_Usr);
{
 //?USER: Initialize routine

 // PAR.Error Type 1 Usr = CND.No
 PAR.Error_Type_1_Usr = 'N';

 // PAR.Error Type 2 Usr = CND.No
 PAR.Error_Type_2_Usr = 'N';

 // PAR.Error Type 3 Usr = CND.No
 PAR.Error_Type_3_Usr = 'N';

 // PAR.Error Type 4 Usr = CND.No
 PAR.Error_Type_4_Usr = 'N';

 // PAR.Error Type 5 Usr = CND.No
 PAR.Error_Type_5_Usr = 'N';

 // PAR.Error Type Found = CND.No
 PAR.Error_Type_Found = 'N';

 // PAR.Error Type 6 Usr = CND.No
 PAR.Error_Type_6_Usr = 'N';

 // PAR.Error Type 7 Usr = CND.No
 PAR.Error_Type_7_Usr = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Eval Val Error    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1111051;
 PARAMETER(DB1.KV_Error_Code);
 PARAMETER(WRK.EV_Description);
 PARAMETER(WRK.EV_Minimum);
 PARAMETER(WRK.EV_Maximum);
 PARAMETER(WRK.EV_Type);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Description = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Minimum = *ZERO;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Maximum = *ZERO;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Type = *BLANK;

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Check for Type of Error to Send back Flag
 CASE;

 // IF WRK.EV Type is Carcass Weights
 IF WRK.EV_Type = 'C';

 // PAR.Error Type 1 Usr = CND.Critical Error
 PAR.Error_Type_1_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is % Rule for Head Killed
 IF WRK.EV_Type = 'P';

 // PAR.Error Type 5 Usr = CND.Critical Error
 PAR.Error_Type_5_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is % Lean
 IF WRK.EV_Type = 'L';

 // PAR.Error Type 2 Usr = CND.Critical Error
 PAR.Error_Type_2_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Yield
 IF WRK.EV_Type = 'Y';

 // OR DB1.KV Error Code is Yield Parameter Error
 OR DB1.KV_Error_Code = 'YLD';

 // PAR.Error Type 3 Usr = CND.Critical Error
 PAR.Error_Type_3_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Missing Transaction
 IF WRK.EV_Type = 'B';

 // PAR.Error Type 4 Usr = CND.Critical Error
 PAR.Error_Type_4_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Backfat
 IF WRK.EV_Type = 'F';

 // PAR.Error Type 6 Usr = CND.Critical Error
 PAR.Error_Type_6_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Loin Eye
 IF WRK.EV_Type = 'E';

 // PAR.Error Type 7 Usr = CND.Critical Error
 PAR.Error_Type_7_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 ENDIF;

}


CASE;

// IF RCD.Net Head Usr NE RCD.TH Head Killed
IF RCD.Net_Head_Usr <> RCD.TH_Head_Killed;

// RCD.Error Type 5 Usr = CND.Critical Error
RCD.Error_Type_5_Usr = 'Y';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


CASE;

// IF CTL.TH Kill Date EQ WRK.Zero USR
IF CTL.TH_Kill_Date = WRK.Zero_USR;

// CTL.TH Kill Date = JOB.*Job date
CTL.TH_Kill_Date = JOB.*Job_date;

ENDIF;

//?F21-Print Bal to Kill Report
CASE;

// IF CTL.*CMD key is Print List
IF CTL.*CMD_key = '21';

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Print Balance to Kill');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Date Alpha USR = CVTVAR(CTL.TH Kill Date)
WRK.Date_Alpha_USR = CVTVAR(CTL.TH_Kill_Date);

// Execute command - 'SBM Prt Balance to Kill Report'
EXECUTE COMMAND(PRK0686);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(CTL.TH_Schedule_Kill_Shift);

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

//?Get Producer name
//?Calculate Net Head
// RCD.Net Head Usr = RCD.TH Head Received - RCD.TH Yard Deads
RCD.Net_Head_Usr = RCD.TH_Head_Received - RCD.TH_Yard_Deads;

// RCD.Net Head Usr = RCD.Net Head Usr - RCD.TH Head Condemned
RCD.Net_Head_Usr = RCD.Net_Head_Usr - RCD.TH_Head_Condemned;

//?USER: Process subfile record (Pre-confirm)

//?Subfile selection User
DO;

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

CASE;

// IF RCD.*SFLSEL NE WRK.Blank USR
IF RCD.*SFLSEL <> WRK.Blank_USR;

CASE;

// IF RCD.THP Process Code is Receiving
IF RCD.THP_Process_Code = 'RECV';

// OR RCD.THP Process Code is Slaughter
OR RCD.THP_Process_Code = 'SLG';

CASE;

// IF RCD.*SFLSEL is WW Evaluation
IF RCD.*SFLSEL = '5'/'5';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// WRK.ET Tattoo Number = CVTVAR(RCD.TH Tattoo Number)
WRK.ET_Tattoo_Number = CVTVAR(RCD.TH_Tattoo_Number);

// Call program WW Evaluation Trans   DF.
CALL PROGRAM(WW Evaluation Trans   DF) ('PKOSDFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Live_Wgt);
PARAMETER(RCD.TH_Avg_Hot_Wgt);
PARAMETER(RCD.TH_Avg_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Lean_Percent);
PARAMETER(RCD.TH_Avg_Loin_Eye_Depth);
PARAMETER(RCD.TH_Avg_Backfat);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_Yield_Difference);
PARAMETER(RCD.TH_Recalc_Live_Wgt);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Sort_Discount_Amt);
PARAMETER(RCD.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Header_Error_Sts);
PARAMETER(RCD.TH_Detail_Error_Sts);
PARAMETER(RCD.TH_Kill_Balancing_Sts);
PARAMETER(RCD.TH_Bal_to_Kill_Gen);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(RCD.Net_Head_Usr);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is WW Loss
IF RCD.*SFLSEL = '10';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// WRK.ET Tattoo Number = CVTVAR(RCD.TH Tattoo Number)
WRK.ET_Tattoo_Number = CVTVAR(RCD.TH_Tattoo_Number);

// Call program ZzzLoss Transaction   DF.
CALL PROGRAM(ZzzLoss Transaction   DF) ('PKPMDFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Carcass_Net_Amt);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Kill_Balancing_Sts);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is Pay Live
IF RCD.*SFLSEL = '9'/'9';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Edt Live Price        E1.
CALL PROGRAM(Edt Live Price        E1) ('PKGBE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

// IF RCD.*SFLSEL is Select Option 8
IF RCD.*SFLSEL = '8'/'8';

//?Display Error
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Dsp Error             DF.
CALL PROGRAM(Dsp Error             DF) ('PKEUDFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(*ZERO);
PARAMETER('H');

// IF RCD.*SFLSEL is Balance to Kill
IF RCD.*SFLSEL = '7'/'7';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

CASE;

// IF RCD.TH Head Killed EQ WRK.Zero USR
IF RCD.TH_Head_Killed = WRK.Zero_USR;

// Send error message - 'No Records for Averages'
ERROR(PRK0355);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// IF RCD.*SFLSEL is *Option 11 (Reusable)
IF RCD.*SFLSEL = '11';

//?Override Error
CASE;

// IF RCD.TH Header Error Sts is No Header Error
IF RCD.TH_Header_Error_Sts = *BLANK;

// Send error message - 'No Error To Override, select another option'
ERROR(PRK0407);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

// IF RCD.TH Detail Error Sts is Yes
IF RCD.TH_Detail_Error_Sts = 'Y';

// Send error message - 'Detail records have errors.  Must correct them first.'
ERROR(PRK0402);
MSGPARM(RCD.*SFLSEL);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

// IF RCD.*SFLSEL is *Option 12 (Reusable)
IF RCD.*SFLSEL = '12';

//?Remove Override Error
CASE;

// IF RCD.TH User Error Override is No
IF RCD.TH_User_Error_Override = 'N';

// OR RCD.TH User Error Override is Blank
OR RCD.TH_User_Error_Override = *BLANK;

// Send error message - 'No Override Exist'
ERROR(PRK0408);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

// IF RCD.*SFLSEL is *Option 13 (Reusable)
IF RCD.*SFLSEL = '13';

//?Display Additional Tattoo Info
EXECUTE FUNCTION(Rtv Prdcr Name, Sts   RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1165413;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(WRK.PD_Name);
PARAMETER(RCD.RS_Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Dsp Add Tattoo Info   D1.
CALL PROGRAM(Dsp Add Tattoo Info   D1) ('PKRXD1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.PD_Name);

// IF RCD.*SFLSEL is *Option 14 (Resuable)
IF RCD.*SFLSEL = '14';

//?Edit Comments
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Edt Tattoo Comment    EF.
CALL PROGRAM(Edt Tattoo Comment    EF) ('PKIVEFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('U');
PARAMETER(CTL.Oms_System_Value_Alpha);

// IF RCD.*SFLSEL is *Option 15 (Resuable)
IF RCD.*SFLSEL = '15';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Zzz 2 Week Avg Flag   E1.
CALL PROGRAM(Zzz 2 Week Avg Flag   E1) ('PKSQE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.*SFLSEL is *Option 14 (Resuable)
IF RCD.*SFLSEL = '14';

//?Edit Comments
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Edt Tattoo Comment    EF.
CALL PROGRAM(Edt Tattoo Comment    EF) ('PKIVEFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('U');
PARAMETER(CTL.Oms_System_Value_Alpha);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Send error message - 'Invalid Processed Code for this function'
ERROR(PRK0405);
MSGPARM(RCD.TH_Tattoo_Number);
MSGPARM(RCD.THP_Process_Code);

QUIT;

ENDIF;

ENDIF;

ENDIF;

ENDDO;

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.*SFLSEL is Balance to Kill
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF RCD.TH Head Killed EQ WRK.Zero USR
IF RCD.TH_Head_Killed = WRK.Zero_USR;

// Send error message - 'No Records for Averages'
ERROR(PRK0355);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

//?User request to balance Kill, set User flag to Yes
// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// Call program Bal Tattoo W/Kill Edt  XF.
CALL PROGRAM(Bal Tattoo W/Kill Edt  XF) ('PKLHXFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('E');
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(WRK.Requested_by_User_to_Bal);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(*BLANK);

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Held_Over);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Head_Adds);
PARAMETER(RCD.TH_Head_Accepted);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Live_Wgt);
PARAMETER(RCD.TH_Avg_Hot_Wgt);
PARAMETER(RCD.TH_Avg_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Lean_Percent);
PARAMETER(RCD.TH_Avg_Loin_Eye_Depth);
PARAMETER(RCD.TH_Avg_Backfat);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_Yield_Difference);
PARAMETER(RCD.TH_Recalc_Live_Wgt);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Sort_Discount_Amt);
PARAMETER(RCD.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Total_Net_WO_Adds);
PARAMETER(RCD.TH_Carcass_Net_Amt);
PARAMETER(RCD.TH_Additions_Amt);
PARAMETER(RCD.TH_Accrual_Amount);
PARAMETER(RCD.TH_Fixed_Cost_Amount);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Header_Error_Sts);
PARAMETER(RCD.TH_Detail_Error_Sts);
PARAMETER(RCD.TH_Kill_Balancing_Sts);
PARAMETER(RCD.TH_Bal_to_Kill_Gen);
PARAMETER(RCD.TH_Commission_A_P_Voucher);
PARAMETER(RCD.TH_Voucher_Payment_Date);
PARAMETER(RCD.TH_User_Error_Override);
PARAMETER(RCD.TH_Held_Over_Record);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_Held_Ovr_Completed_Dte);
PARAMETER(RCD.TH_Commission_Paid_Date);
PARAMETER(RCD.TH_Actual_Check_Date);
PARAMETER(RCD.TH_Shipped_Weight);
PARAMETER(RCD.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(RCD.TH_FFLI);
PARAMETER(RCD.TH_Kill_Product_Value);
PARAMETER(RCD.TH_Cut_Product_Value);
PARAMETER(RCD.TH_Render_Product_Value);
PARAMETER(RCD.TH_Shift_Held_Over_Head);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.HB_Buyer_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// IF RCD.*SFLSEL is *Option 11 (Reusable)
IF RCD.*SFLSEL = '11';

//?User request to Override Tattoo header
EXECUTE FUNCTION(Chg Override Error    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1144190;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('Y');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// Call program Bal Tattoo W/Kill Edt  XF.
CALL PROGRAM(Bal Tattoo W/Kill Edt  XF) ('PKLHXFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('E');
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(WRK.Requested_by_User_to_Bal);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(*BLANK);

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Held_Over);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Head_Adds);
PARAMETER(RCD.TH_Head_Accepted);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Live_Wgt);
PARAMETER(RCD.TH_Avg_Hot_Wgt);
PARAMETER(RCD.TH_Avg_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Lean_Percent);
PARAMETER(RCD.TH_Avg_Loin_Eye_Depth);
PARAMETER(RCD.TH_Avg_Backfat);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_Yield_Difference);
PARAMETER(RCD.TH_Recalc_Live_Wgt);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Sort_Discount_Amt);
PARAMETER(RCD.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Total_Net_WO_Adds);
PARAMETER(RCD.TH_Carcass_Net_Amt);
PARAMETER(RCD.TH_Additions_Amt);
PARAMETER(RCD.TH_Accrual_Amount);
PARAMETER(RCD.TH_Fixed_Cost_Amount);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Header_Error_Sts);
PARAMETER(RCD.TH_Detail_Error_Sts);
PARAMETER(RCD.TH_Kill_Balancing_Sts);
PARAMETER(RCD.TH_Bal_to_Kill_Gen);
PARAMETER(RCD.TH_Commission_A_P_Voucher);
PARAMETER(RCD.TH_Voucher_Payment_Date);
PARAMETER(RCD.TH_User_Error_Override);
PARAMETER(RCD.TH_Held_Over_Record);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_Held_Ovr_Completed_Dte);
PARAMETER(RCD.TH_Commission_Paid_Date);
PARAMETER(RCD.TH_Actual_Check_Date);
PARAMETER(RCD.TH_Shipped_Weight);
PARAMETER(RCD.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(RCD.TH_FFLI);
PARAMETER(RCD.TH_Kill_Product_Value);
PARAMETER(RCD.TH_Cut_Product_Value);
PARAMETER(RCD.TH_Render_Product_Value);
PARAMETER(RCD.TH_Shift_Held_Over_Head);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.HB_Buyer_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is *Option 12 (Reusable)
IF RCD.*SFLSEL = '12';

//?User request to Remove Override error
EXECUTE FUNCTION(Chg Override Error    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1144190;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('N');
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

// Call program Bal Tattoo W/Kill Edt  XF.
CALL PROGRAM(Bal Tattoo W/Kill Edt  XF) ('PKLHXFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('E');
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(WRK.Requested_by_User_to_Bal);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(*BLANK);

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Held_Over);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Head_Adds);
PARAMETER(RCD.TH_Head_Accepted);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Live_Wgt);
PARAMETER(RCD.TH_Avg_Hot_Wgt);
PARAMETER(RCD.TH_Avg_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Lean_Percent);
PARAMETER(RCD.TH_Avg_Loin_Eye_Depth);
PARAMETER(RCD.TH_Avg_Backfat);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_Yield_Difference);
PARAMETER(RCD.TH_Recalc_Live_Wgt);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Sort_Discount_Amt);
PARAMETER(RCD.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Total_Net_WO_Adds);
PARAMETER(RCD.TH_Carcass_Net_Amt);
PARAMETER(RCD.TH_Additions_Amt);
PARAMETER(RCD.TH_Accrual_Amount);
PARAMETER(RCD.TH_Fixed_Cost_Amount);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Header_Error_Sts);
PARAMETER(RCD.TH_Detail_Error_Sts);
PARAMETER(RCD.TH_Kill_Balancing_Sts);
PARAMETER(RCD.TH_Bal_to_Kill_Gen);
PARAMETER(RCD.TH_Commission_A_P_Voucher);
PARAMETER(RCD.TH_Voucher_Payment_Date);
PARAMETER(RCD.TH_User_Error_Override);
PARAMETER(RCD.TH_Held_Over_Record);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_Held_Ovr_Completed_Dte);
PARAMETER(RCD.TH_Commission_Paid_Date);
PARAMETER(RCD.TH_Actual_Check_Date);
PARAMETER(RCD.TH_Shipped_Weight);
PARAMETER(RCD.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(RCD.TH_FFLI);
PARAMETER(RCD.TH_Kill_Product_Value);
PARAMETER(RCD.TH_Cut_Product_Value);
PARAMETER(RCD.TH_Render_Product_Value);
PARAMETER(RCD.TH_Shift_Held_Over_Head);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.HB_Buyer_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

