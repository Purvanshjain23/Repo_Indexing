// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLBFE1R
// ?Date: 14.08.2025 Time: 02:53:38
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//?WI572 EricL 5/31/23 - Added below Prop 12 cond values to PKVLLSP
//?PP Prop 12 pen gestated
//?PT Prop 12 pen gestated top
//?P2 Prop 12 2nd top
//?P3 Prop 12 3rd top
//?CA California Prop 12
//?MA Massachusetts Question 3
//?04/10/2017 JBB C9426 - Add Ref fields to Delivery Schedule
//?                       Add Ref 1, Ref 2, and Ref Status fields to
//?                       screen and protect all three fields when
//?                       the company is excluded from the fields
//?                       based on the Company Number and the
//?                       Producer Source Code is Triumph Owned.
//?                       Also added SR Source Code field to screen.
//?04/20/2017 JBB C9426 - Add Ref fields to Delivery Schedule
//?                       Not part of this project, but needed to fix
//?                       an error discovered during testing.  The
//?                       Producer Code and Location Code fields were
//?                       promptable even when they were protected
//?                       from input.  Changed program to not allow
//?                       prompting when the two fields are protected.
//?05/22/2017 JBB C9426 - Add Ref fields to Delivery Schedule
//?                       A design change due to discussions with the
//?                       business.  No validation will be done on any
//?                       of the REF fields.  They will be treated as
//?                       optional text.  Removing conditional display
//?                       of the fields.
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?USER: Initialize key screen

// KEY.DSH Kill Date = PAR.DSH Kill Date
KEY.DSH_Kill_Date = PAR.DSH_Kill_Date;

// KEY.CC Company Number = PAR.CC Company Number
KEY.CC_Company_Number = PAR.CC_Company_Number;

//?USER: Initialize detail screen (new record)

// DTL.DSD Full/Split Load = CND.Full
DTL.DSD_Full_Split_Load = 'F';

// DTL.DSD Movement Printed = CND.Not Printed
DTL.DSD_Movement_Printed = 'N';

//? 4/12/2017 JBB C9426 - Validate Ref fields when Producer <> blanks
//? 5/22/2017 JBB C9426 - Removed REF field validation.
//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Display Output Only Usr = CND.No
WRK.Display_Output_Only_Usr = 'N';

CASE;

// IF DB1.DSD Farm Site Code is Entered
IF DB1.DSD_Farm_Site_Code > *ZERO;

// OR DB1.PD Producer Code is Entered
OR DB1.PD_Producer_Code <> *BLANK;

// OR DB1.PL Location Code is Entered
OR DB1.PL_Location_Code <> *BLANK;

// WRK.Display Output Only Usr = CND.Yes
WRK.Display_Output_Only_Usr = 'Y';

ENDIF;

CASE;

// IF DB1.DSD Source Type is Internal
IF DB1.DSD_Source_Type = 'I';

// WRK.Display Output Only 2 USR = CND.Yes
WRK.Display_Output_Only_2_USR = 'Y';

ENDIF;

//? 4/12/2017 JBB C9426 - Validate Ref fields when Producer <> blanks
//? 5/22/2017 JBB C9426 - Removed REF field validation.
//?USER: Validate detail screen fields

//?F4=Prompts
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

CASE;

// IF PGM.*Cursor field <IS> DTL.PD Producer Code
IF PGM.*Cursor_field = DTL.PD_Producer_Code;

// OR PGM.*Cursor field <IS> DTL.PL Location Code
OR PGM.*Cursor_field = DTL.PL_Location_Code;

//?Prompt only allowed if fields are not protected
CASE;

// IF WRK.Display Output Only Usr is Yes
IF WRK.Display_Output_Only_Usr = 'Y';

// Send error message - 'Prompt not valid for this field'
ERROR(PRK1425);
MSGPARM(DTL.PD_Producer_Code);
MSGPARM(DTL.PL_Location_Code);

//?Prompt only allowed if fields are not protected
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Sel Producer Loc      SR.
CALL PROGRAM(Sel Producer Loc      SR) ('PKKMSRR');
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);

ENDIF;

ENDIF;

//?e2423 022013
//?Load type is now a condition
//?Remove Sel HPS Load Type     UP
ENDIF;

EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Prod,Nm,TrkSz,Src RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1247321;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PD_Name);
PARAMETER(WRK.PD_Std_Truck_Size);
PARAMETER(WRK.PD_Freight_Exp_Paid_By);
PARAMETER(DTL.SR_Source_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.DSD_Source_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.DSD Full/Split Load EQ WRK.Blank Usr 2
IF DTL.DSD_Full_Split_Load = WRK.Blank_Usr_2;

// DTL.DSD Full/Split Load = CND.Full
DTL.DSD_Full_Split_Load = 'F';

ENDIF;

CASE;

// IF WRK.PD Std Truck Size is GT Zero
IF WRK.PD_Std_Truck_Size > *ZERO;

// AND DTL.DSD Scheduled Delv Head GT WRK.PD Std Truck Size
AND DTL.DSD_Scheduled_Delv_Head > WRK.PD_Std_Truck_Size;

// Send error message - 'Delivery Head &1 exceeds standard truck size &2'
ERROR(PRK1069);
MSGPARM(WRK.PD_Std_Truck_Size);
MSGPARM(DTL.DSD_Scheduled_Delv_Head);

ENDIF;

//? 4/12/2017 JBB C9426 - Validate Ref fields when Producer <> blanks
//? 5/22/2017 JBB C9426 - Removed REF field validation.
//?CALC: Detail screen function fields

//?e2423 2/20/2013 SLM
//?Load type (do not check for Mtech live or not)
//?Load type regardless of phase will be a condition
// DTL.Condition Name USR = Condition name of DTL.DSD Load Type
DTL.Condition_Name_USR = RTVCND(DTL.DSD_Load_Type);

// DTL.DSD Scheduled Hour = DTL.DSD Delivery Time / CON.100 *
DTL.DSD_Scheduled_Hour = DTL.DSD_Delivery_Time / 100;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Delv Sched Dtl    CR) TYPE(CRTOBJ) FILE(PLAECPP)           AB1244727;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DSD_Delivery_Date);
PARAMETER(DTL.DSD_Delivery_Time);
PARAMETER(DTL.DSD_Delivery_Time_Seq);
PARAMETER(DTL.DSD_Scheduled_Hour);
PARAMETER(DTL.DSD_Farm_Site_Code);
PARAMETER(DTL.DSD_Building);
PARAMETER(DTL.DSD_Room);
PARAMETER(DTL.DSD_Sire_Line_Code);
PARAMETER(DTL.DSD_Hog_Group_Code);
PARAMETER(DTL.DSD_Unused_Head);
PARAMETER(DTL.DSD_Scheduled_Delv_Head);
PARAMETER(DTL.DSD_Scheduled_Kill_Head);
PARAMETER(DTL.DSD_Transportation_Office);
PARAMETER(DTL.DSD_Trucker_Code_HPS);
PARAMETER(DTL.DSD_Driver);
PARAMETER(DTL.DSD_Loading_Crew);
PARAMETER(DTL.CHR_Code);
PARAMETER(DTL.DSD_Load_Type);
PARAMETER('F');
PARAMETER(DTL.DSD_Movement_Number);
PARAMETER(DTL.DSD_Truck_ID);
PARAMETER(DTL.DSD_Trailer_ID);
PARAMETER(DTL.DSD_Movement_Printed);
PARAMETER(DTL.DSD_Sched_Route_Start_Pnt);
PARAMETER(DTL.DSD_Sched_Route_Start_Dte);
PARAMETER(DTL.DSD_Sched_Route_Start_Tim);
PARAMETER(DTL.DSD_Sch_Farm_Arrival_Date);
PARAMETER(DTL.DSD_Sch_Farm_Arrival_Time);
PARAMETER(DTL.DSD_Sch_Start_Load_Date);
PARAMETER(DTL.DSD_Sch_Start_Load_Time);
PARAMETER(DTL.DSD_Receiving_Shift);
PARAMETER(DTL.DSD_Kill_Shift);
PARAMETER(DTL.DSD_BOL_Kill_Shift);
PARAMETER('N');
PARAMETER('N');
PARAMETER('O');
PARAMETER(DTL.DSD_Source_Type);
PARAMETER(DTL.DSD_Transfer_Sts);
PARAMETER(DTL.DSD_Unused_Date);
PARAMETER(DTL.DSD_Unused_Time);
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.DSD_PRD_Srv_Batch_ID);
PARAMETER(DTL.DSD_PRD_Srv_Sched_ID);
PARAMETER(DTL.DSD_Ref_1);
PARAMETER(DTL.DSD_Ref_2);
PARAMETER(DTL.DSD_Ref_Status);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER('A');
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Delv Sched Dtl    CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1244728;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DSD_Delivery_Date);
PARAMETER(DTL.DSD_Delivery_Time);
PARAMETER(DTL.DSD_Delivery_Time_Seq);
PARAMETER(DTL.DSD_Scheduled_Hour);
PARAMETER(DTL.DSD_Farm_Site_Code);
PARAMETER(DTL.DSD_Building);
PARAMETER(DTL.DSD_Room);
PARAMETER(DTL.DSD_Sire_Line_Code);
PARAMETER(DTL.DSD_Hog_Group_Code);
PARAMETER(DTL.DSD_Unused_Head);
PARAMETER(DTL.DSD_Scheduled_Delv_Head);
PARAMETER(DTL.DSD_Scheduled_Kill_Head);
PARAMETER(DTL.DSD_Transportation_Office);
PARAMETER(DTL.DSD_Trucker_Code_HPS);
PARAMETER(DTL.DSD_Driver);
PARAMETER(DTL.DSD_Loading_Crew);
PARAMETER(DTL.CHR_Code);
PARAMETER(DTL.DSD_Load_Type);
PARAMETER(DTL.DSD_Full_Split_Load);
PARAMETER(DTL.DSD_Movement_Number);
PARAMETER(DTL.DSD_Truck_ID);
PARAMETER(DTL.DSD_Trailer_ID);
PARAMETER(DTL.DSD_Movement_Printed);
PARAMETER(DTL.DSD_Sched_Route_Start_Pnt);
PARAMETER(DTL.DSD_Sched_Route_Start_Dte);
PARAMETER(DTL.DSD_Sched_Route_Start_Tim);
PARAMETER(DTL.DSD_Sch_Farm_Arrival_Date);
PARAMETER(DTL.DSD_Sch_Farm_Arrival_Time);
PARAMETER(DTL.DSD_Sch_Start_Load_Date);
PARAMETER(DTL.DSD_Sch_Start_Load_Time);
PARAMETER(DTL.DSD_Receiving_Shift);
PARAMETER(DTL.DSD_Kill_Shift);
PARAMETER(DTL.DSD_BOL_Kill_Shift);
PARAMETER(DTL.DSD_HPS_Post_Status);
PARAMETER(DTL.DSD_HPE_Post_Status);
PARAMETER(DTL.DSD_Lock_Status);
PARAMETER(DTL.DSD_Source_Type);
PARAMETER(DTL.DSD_Transfer_Sts);
PARAMETER(DTL.DSD_Unused_Date);
PARAMETER(DTL.DSD_Unused_Time);
PARAMETER(DTL.SR_Source_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.DSD_PRD_Srv_Batch_ID);
PARAMETER(DTL.DSD_PRD_Srv_Sched_ID);
PARAMETER(DTL.DSD_Ref_1);
PARAMETER(DTL.DSD_Ref_2);
PARAMETER(DTL.DSD_Ref_Status);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Process command keys

//?If Ref fields <> blanks, update values in Buy Order Header Reference
CASE;

// IF DTL.BOH Buy Order Number is NE Zero
IF DTL.BOH_Buy_Order_Number <> *ZERO;

// AND DTL.BOL Load Number is Entered
AND DTL.BOL_Load_Number <> *ZERO;

EXECUTE FUNCTION(Crt/Upd BO Load Ref   IF) TYPE(EXCINTFUN)                      AB1331981;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.DSD_Ref_1);
PARAMETER(DTL.DSD_Ref_2);
PARAMETER(DTL.DSD_Ref_Status);
{
 //?Execute internal function

 //?C9426 032217 slm
 //?C9426 use the BOL Referene to store the Ref1,Ref2 and Ref Status
 EXECUTE FUNCTION(Crt/Chg BO Load Ref   RT) TYPE(RTVOBJ) FILE(PWACCPP)           AB1331982;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.BOL_Ref_1);
 PARAMETER(PAR.BOL_Ref_2);
 PARAMETER(PAR.BOL_Ref_Status);
 {
  //?USER: Processing if Data record not found

  EXECUTE FUNCTION(Crt Buy Order Load Ref CR) TYPE(CRTOBJ) FILE(PWACCPP)          AB1331978;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.BOL_Ref_1);
  PARAMETER(PAR.BOL_Ref_2);
  PARAMETER(PAR.BOL_Ref_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Added);
    PARAMETER(PAR.RS_Time_Added);

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Buy Order Load Ref CH) TYPE(CHGOBJ) FILE(PWACCPP)          AB1331979;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(PAR.BOL_Ref_1);
  PARAMETER(PAR.BOL_Ref_2);
  PARAMETER(PAR.BOL_Ref_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


ENDIF;

