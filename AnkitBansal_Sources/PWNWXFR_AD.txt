// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWNWXFR
// ?Date: 14.08.2025 Time: 02:57:08
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(Rtv/Crt/Chg TRD-Xref  RT) TYPE(RTVOBJ) FILE(PWAXCPP)           AB1369819;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.Buy_Order_New_Usr);
PARAMETER(PAR.Buy_Order_Load_New_Usr);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.Site_Id_New);
PARAMETER(PAR.Transfer_Site_Id_Usr);
PARAMETER(PAR.Prod_Subsidiary_New_Usr);
PARAMETER(PAR.Th_State_code_New);
PARAMETER(PAR.Transfer_State_User);
{
 //?USER: Initialize routine

 //?Convert numeric parms to alpha for Tattoo Repayment Comment
 // LCL.Buy Order Number Alpha = CVTVAR(PAR.BOH Buy Order Number)
 LCL.Buy_Order_Number_Alpha = CVTVAR(PAR.BOH_Buy_Order_Number);

 // LCL.Buy Order Load Alpha = CVTVAR(PAR.BOL Load Number)
 LCL.Buy_Order_Load_Alpha = CVTVAR(PAR.BOL_Load_Number);

 // LCL.Tattoo Number Alpha = CVTVAR(PAR.TH Tattoo Number)
 LCL.Tattoo_Number_Alpha = CVTVAR(PAR.TH_Tattoo_Number);

 // Call program Cvt cyymmdd to mm/dd/yyUP.
 CALL PROGRAM(Cvt cyymmdd to mm/dd/yyUP) ('PWMZUPR');
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(LCL.Kill_Date_MM_DD_YY_USR);

 // LCL.Buy Order Number New Txt = CVTVAR(PAR.Buy Order New Usr)
 LCL.Buy_Order_Number_New_Txt = CVTVAR(PAR.Buy_Order_New_Usr);

 // LCL.Buy Order Load New Txt = CVTVAR(PAR.Buy Order Load New Usr)
 LCL.Buy_Order_Load_New_Txt = CVTVAR(PAR.Buy_Order_Load_New_Usr);

 // LCL.Tattoo Number New Txt = CVTVAR(PAR.Tattoo Number New User)
 LCL.Tattoo_Number_New_Txt = CVTVAR(PAR.Tattoo_Number_New_User);

 // Call program Cvt cyymmdd to mm/dd/yyUP.
 CALL PROGRAM(Cvt cyymmdd to mm/dd/yyUP) ('PWMZUPR');
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(LCL.Kill_Date_New_Txt_8);

 //?USER: Process Data record

 //?1. Create new transfer record from current record.
 EXECUTE FUNCTION(Rtv Producer          RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1146757;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(LCL.PL_Location_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Crt Tattoo Repay Dtl  CR) TYPE(CRTOBJ) FILE(PWAXCPP)           AB1364795;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.TRH_Repayment_ID);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('E');
 PARAMETER(DB1.TRD_Pen_Head);
 PARAMETER(DB1.TRD_Payment_Sts);
 PARAMETER(DB1.TRD_Process_Code);
 PARAMETER(LCL.PD_Producer_Code);
 PARAMETER(DB1.PS_Site_ID);
 PARAMETER(DB1.TRD_Trucker_Payment_Sts);
 PARAMETER(DB1.SR_Source_Code);
 PARAMETER(LCL.PL_Location_Code);
 PARAMETER(DB1.PC_Contract_Code);
 PARAMETER(DB1.PSC_Sub_Contract_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?Create a  comment for the new Tattoo
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TRC Comment = CONCAT(CON.Tattoo,LCL.Tattoo Number New Txt,CND.*One)
 LCL.TRC_Comment = 'Tattoo' + LCL.Tattoo_Number_New_Txt (1);

 // LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.for Market Hogs created b,CND.*One)
 LCL.TRC_Comment = LCL.TRC_Comment + 'for Market Hogs created b' (1);

 // LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.y transfer.,CND.*None)
 LCL.TRC_Comment = LCL.TRC_Comment + 'y transfer.' (*ZERO);

 EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.TRH_Repayment_ID);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(LCL.TRC_Comment);
 PARAMETER('S');
 {
  //?USER: Processing before Data update

  //?Make sure BOH Company Number is populated
  CASE;

  // IF PAR.BOH Company Number is *ZERO
  IF PAR.BOH_Company_Number = *ZERO;

  // DB1.BOH Company Number = PAR.CC Company Number
  DB1.BOH_Company_Number = PAR.CC_Company_Number;

  ENDIF;

  EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.TRH_Repayment_ID);
  PARAMETER(DB1.TRC_Sequence);
  {
   //?USER: Processing if Data record not found

   // PAR.TRC Sequence = CON.1
   PAR.TRC_Sequence = 1;

   //?USER: Process Data record

   // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
   PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 //?2. Update original Tattoo to Transfered and write a comment record
 // Call program Chg Tatt Repay Dtl-XferXF.
 CALL PROGRAM(Chg Tatt Repay Dtl-XferXF) ('PWNXXFR');
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.TRH_Repayment_ID);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.Buy_Order_New_Usr);
 PARAMETER(PAR.Buy_Order_Load_New_Usr);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(PAR.Site_Id_New);
 PARAMETER(PAR.Prod_Subsidiary_New_Usr);
 PARAMETER(PAR.Th_State_code_New);
 PARAMETER('T');

 //?Create a 3-line comment for from and to transfer
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.TRC Comment = CONCAT(CON.BO/Load/Tattoo/Kill Date,CON.transfered from:,CND.*One)
 LCL.TRC_Comment = 'BO/Load/Tattoo/Kill Date' + 'transfered from:' (1);

 EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.TRH_Repayment_ID);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.TRC_Comment);
 PARAMETER('S');
 {
  //?USER: Processing before Data update

  //?Make sure BOH Company Number is populated
  CASE;

  // IF PAR.BOH Company Number is *ZERO
  IF PAR.BOH_Company_Number = *ZERO;

  // DB1.BOH Company Number = PAR.CC Company Number
  DB1.BOH_Company_Number = PAR.CC_Company_Number;

  ENDIF;

  EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.TRH_Repayment_ID);
  PARAMETER(DB1.TRC_Sequence);
  {
   //?USER: Processing if Data record not found

   // PAR.TRC Sequence = CON.1
   PAR.TRC_Sequence = 1;

   //?USER: Process Data record

   // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
   PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 // LCL.TRC Comment = CONCAT(LCL.Text 3,LCL.Buy Order Number Alpha,CND.*None)
 LCL.TRC_Comment = LCL.Text_3 + LCL.Buy_Order_Number_Alpha (*ZERO);

 // LCL.TRC Comment = CONCAT(LCL.TRC Comment,LCL.Buy Order Load Alpha,CND.*One)
 LCL.TRC_Comment = LCL.TRC_Comment + LCL.Buy_Order_Load_Alpha (1);

 // LCL.TRC Comment = CONCAT(LCL.TRC Comment,LCL.Tattoo Number Alpha,CND.*One)
 LCL.TRC_Comment = LCL.TRC_Comment + LCL.Tattoo_Number_Alpha (1);

 // LCL.TRC Comment = CONCAT(LCL.TRC Comment,LCL.Kill Date MM/DD/YY USR,CND.*One)
 LCL.TRC_Comment = LCL.TRC_Comment + LCL.Kill_Date_MM_DD_YY_USR (1);

 // LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.to,CND.*One)
 LCL.TRC_Comment = LCL.TRC_Comment + 'to' (1);

 EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.TRH_Repayment_ID);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.TRC_Comment);
 PARAMETER('S');
 {
  //?USER: Processing before Data update

  //?Make sure BOH Company Number is populated
  CASE;

  // IF PAR.BOH Company Number is *ZERO
  IF PAR.BOH_Company_Number = *ZERO;

  // DB1.BOH Company Number = PAR.CC Company Number
  DB1.BOH_Company_Number = PAR.CC_Company_Number;

  ENDIF;

  EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.TRH_Repayment_ID);
  PARAMETER(DB1.TRC_Sequence);
  {
   //?USER: Processing if Data record not found

   // PAR.TRC Sequence = CON.1
   PAR.TRC_Sequence = 1;

   //?USER: Process Data record

   // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
   PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 // LCL.TRC Comment = CONCAT(LCL.Text 3,LCL.Buy Order Number New Txt,CND.*None)
 LCL.TRC_Comment = LCL.Text_3 + LCL.Buy_Order_Number_New_Txt (*ZERO);

 // LCL.TRC Comment = CONCAT(LCL.TRC Comment,LCL.Buy Order Load New Txt,CND.*One)
 LCL.TRC_Comment = LCL.TRC_Comment + LCL.Buy_Order_Load_New_Txt (1);

 // LCL.TRC Comment = CONCAT(LCL.TRC Comment,LCL.Tattoo Number New Txt,CND.*One)
 LCL.TRC_Comment = LCL.TRC_Comment + LCL.Tattoo_Number_New_Txt (1);

 // LCL.TRC Comment = CONCAT(LCL.TRC Comment,LCL.Kill Date New Txt 8,CND.*One)
 LCL.TRC_Comment = LCL.TRC_Comment + LCL.Kill_Date_New_Txt_8 (1);

 EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.TRH_Repayment_ID);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.TRC_Comment);
 PARAMETER('S');
 {
  //?USER: Processing before Data update

  //?Make sure BOH Company Number is populated
  CASE;

  // IF PAR.BOH Company Number is *ZERO
  IF PAR.BOH_Company_Number = *ZERO;

  // DB1.BOH Company Number = PAR.CC Company Number
  DB1.BOH_Company_Number = PAR.CC_Company_Number;

  ENDIF;

  EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.TRH_Repayment_ID);
  PARAMETER(DB1.TRC_Sequence);
  {
   //?USER: Processing if Data record not found

   // PAR.TRC Sequence = CON.1
   PAR.TRC_Sequence = 1;

   //?USER: Process Data record

   // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
   PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


