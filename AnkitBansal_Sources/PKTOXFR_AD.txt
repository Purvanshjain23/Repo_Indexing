// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKTOXFR
// ?Date: 14.08.2025 Time: 02:50:27
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
EXECUTE FUNCTION(ZZRtv/Chg D/A-HldOvr,SbjR) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1149197;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(PAR.TH_Dead_On_Arrival);
PARAMETER(PAR.TH_Head_Received);
PARAMETER(PAR.TH_Yard_Deads);
PARAMETER(PAR.TH_Held_Over);
PARAMETER(PAR.TH_Head_Condemned);
PARAMETER(PAR.TH_Head_Killed);
PARAMETER(PAR.TH_Live_Wgt);
PARAMETER(PAR.TH_Hot_Wgt);
PARAMETER(PAR.TH_Avg_Live_Wgt);
PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(PAR.TH_Payment_Gross);
PARAMETER(PAR.TH_Shipped_Weight);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(PAR.TD_Held_Over);
PARAMETER(PAR.Live_Weight_USR);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Clc UOM Extension     IF) TYPE(EXCINTFUN)                      AB1143053;
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Dead_On_Arrival);
 PARAMETER(PAR.TH_Head_Received);
 PARAMETER(PAR.TH_Yard_Deads);
 PARAMETER(PAR.TH_Held_Over);
 PARAMETER(PAR.TH_Head_Condemned);
 PARAMETER(PAR.TH_Head_Killed);
 PARAMETER(PAR.TH_Live_Wgt);
 PARAMETER(PAR.TH_Hot_Wgt);
 PARAMETER(PAR.TH_Avg_Live_Wgt);
 PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(*MISSING);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.Trans_Extended_Amt_Usr);
 PARAMETER(DB1.DED_D_A_Code);
 {
  //?Execute internal function

  //?Extension
  CASE;

  // IF PAR.Trans UOM USR is Flat
  IF PAR.Trans_UOM_USR = 'FL';

  //?* * * * *   FLAT    * * * * *
  //?FLAT
  CASE;

  // IF PAR.Trans UOM USR is Flat
  IF PAR.Trans_UOM_USR = 'FL';

  // PAR.Trans Extended Amt Usr = PAR.Trans Unit Amt Usr * CON.1 *Rounded
  PAR.Trans_Extended_Amt_Usr = PAR.Trans_Unit_Amt_Usr * 1 'H';

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Head UOM
  IF PAR.Trans_UOM_USR = 'DH'/'RH'/'YH'/'CH'/'KH'/'NH'/'DY'/'RX'/'HM'/'DE';

  //?* * * * *    HEAD   * * * * *
  //?HEAD
  CASE;

  // IF PAR.Trans UOM USR is Received Head
  IF PAR.Trans_UOM_USR = 'RH';

  // PAR.Trans Extended Amt Usr = PAR.TH Head Received * PAR.Trans Unit Amt Usr *Roun
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Received * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Received Hd less Yard Dd
  IF PAR.Trans_UOM_USR = 'RX';

  // WRK.Net Head Usr = PAR.TH Head Received - PAR.TH Yard Deads
  WRK.Net_Head_Usr = PAR.TH_Head_Received - PAR.TH_Yard_Deads;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Killed Head
  IF PAR.Trans_UOM_USR = 'KH';

  // PAR.Trans Extended Amt Usr = PAR.TH Head Killed * PAR.Trans Unit Amt Usr *Rounde
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Killed * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Condemned Head
  IF PAR.Trans_UOM_USR = 'CH';

  // PAR.Trans Extended Amt Usr = PAR.TH Head Condemned * PAR.Trans Unit Amt Usr *Rou
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Condemned * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Yard Deads Head
  IF PAR.Trans_UOM_USR = 'YH';

  // PAR.Trans Extended Amt Usr = PAR.TH Yard Deads * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Yard_Deads * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is DOA Head
  IF PAR.Trans_UOM_USR = 'DH';

  // PAR.Trans Extended Amt Usr = PAR.TH Dead On Arrival * PAR.Trans Unit Amt Usr *Ro
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Dead_On_Arrival * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Net Head
  IF PAR.Trans_UOM_USR = 'NH';

  // WRK.Net Head Usr = PAR.TH Head Received
  WRK.Net_Head_Usr = PAR.TH_Head_Received;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is DOA Head + Yard Dead Head
  IF PAR.Trans_UOM_USR = 'DY';

  // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
  WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is DOA HD + Yard Dead + EUT
  IF PAR.Trans_UOM_USR = 'DE';

  // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
  WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

  // WRK.Net Head Usr = WRK.Net Head Usr + PAR.TH Head EUT/KOA
  WRK.Net_Head_Usr = WRK.Net_Head_Usr + PAR.TH_Head_EUT_KOA;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Received Head /100 Miles
  IF PAR.Trans_UOM_USR = 'HM';

  // PAR.Trans Extended Amt Usr =       *
  PAR.Trans_Extended_Amt_Usr = ( PAR.PSM_Miles_to_Company * PAR.TH_Head_Killed 'H' ) * (
  PAR.Trans_Unit_Amt_Usr / 100 'H' ) 'H';

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Weight UOM
  IF PAR.Trans_UOM_USR = 'CW'/'LW'/'NL'/'SW'/'LX'/'SX';

  //?* * * * *    WEIGHT   * * * * *
  //?WEIGHT
  CASE;

  // IF PAR.Trans UOM USR is Live Hundred Weight
  IF PAR.Trans_UOM_USR = 'LW';

  // Live hundred wgt
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Live_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is LW less Yard Dead Wgt
  IF PAR.Trans_UOM_USR = 'LX';

  //? Calc wgt of yard dead based on Th avg live wgt
  // WRK.Yard dead weight      USR = PAR.TH Avg Live Wgt * PAR.TH Yard Deads *
  WRK.Yard_dead_weight_USR = PAR.TH_Avg_Live_Wgt * PAR.TH_Yard_Deads;

  //?  Subtract Yard Dead wgt from Live Wgt
  // WRK.Live Weight           USR = PAR.TH Live Wgt - WRK.Yard dead weight      USR
  WRK.Live_Weight_USR = PAR.TH_Live_Wgt - WRK.Yard_dead_weight_USR;

  // Live hundred wgt less Yd
  PAR.Trans_Extended_Amt_Usr = ( WRK.Live_Weight_USR / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is Carcass Hundred Weight
  IF PAR.Trans_UOM_USR = 'CW';

  // Carcass Hundred Wgt
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is Net Live Weight
  IF PAR.Trans_UOM_USR = 'NL';

  // WRK.Net Head Usr = PAR.TH Head Received
  WRK.Net_Head_Usr = PAR.TH_Head_Received;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

  //?* Insert avg live weight
  // WRK.Net Live Weight Usr = WRK.Net Head Usr * PAR.TH Avg Live Wgt *
  WRK.Net_Live_Weight_Usr = WRK.Net_Head_Usr * PAR.TH_Avg_Live_Wgt;

  // Net Live Weight
  PAR.Trans_Extended_Amt_Usr = ( WRK.Net_Live_Weight_Usr / 100 'H' )
  * PAR.Trans_Unit_Amt_Usr 'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is Shipped Weight - Doa's
  IF PAR.Trans_UOM_USR = 'SW';

  //?  Calc Avg shipped wgt, then calc wgt of DOA'S
  //?This rule was defined on 01/14/97
  //?The Calculations for Avg Shipped Weights are
  //?Head Received should be the live hogs that walk across the scale
  //?Doa's should be the hogs that died either after we collected
  //?      or before we weighed them
  //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
  // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
  WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

  CASE;

  // IF WRK.Hd Cnt Org Ship Usr is *Zeros
  IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

  // WRK.Avg Weight USR = CON.*ZERO
  WRK.Avg_Weight_USR = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
  WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

  ENDIF;

  // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
  WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

  //?  Subtract doa's from Shipped Wgt
  // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
  WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

  // Shipped Weight Total Ext
  PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is SW - Doa's WT - Yrd Dd WT
  IF PAR.Trans_UOM_USR = 'SX';

  //?  Calc Avg shipped wgt, then calc wgt of DOA'S and Yard Deads
  //?This rule was defined on 01/14/97
  //?The Calculations for Avg Shipped Weights are
  //?Head Received should be the live hogs that walk across the scale
  //?Doa's should be the hogs that died either after we collected
  //?      or before we weighed them
  //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
  // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
  WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

  CASE;

  // IF WRK.Hd Cnt Org Ship Usr is *Zeros
  IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

  // WRK.Avg Weight USR = CON.*ZERO
  WRK.Avg_Weight_USR = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
  WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

  ENDIF;

  // WRK.Yard dead weight      USR = WRK.Avg Weight USR * PAR.TH Yard Deads *
  WRK.Yard_dead_weight_USR = WRK.Avg_Weight_USR * PAR.TH_Yard_Deads;

  // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
  WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

  //?  Subtract Doa's and Subtract Yard Dead wgt from Shipped Wgt
  // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
  WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

  // WRK.Ship Wgt Tot Usr = WRK.Ship Wgt Tot Usr - WRK.Yard dead weight      USR
  WRK.Ship_Wgt_Tot_Usr = WRK.Ship_Wgt_Tot_Usr - WRK.Yard_dead_weight_USR;

  // Shipped wgt less Yd
  PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Value UOM
  IF PAR.Trans_UOM_USR = 'GV'/'BD';

  //?* * * * *    VALUE    * * * * *
  //?VALUE
  CASE;

  // IF PAR.Trans UOM USR is Gross Hundred Value
  IF PAR.Trans_UOM_USR = 'GV';

  // Gross Hundred Value
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Payment_Gross / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  //?VALUE
  // IF PAR.Trans UOM USR is Carcass Hundred Weight
  IF PAR.Trans_UOM_USR = 'CW';

  // Carcass Hundred Value
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

  //?VALUE
  // IF PAR.Trans UOM USR is Base Market Dollars
  IF PAR.Trans_UOM_USR = 'BD';

  // Call program Clc Base Mkt Dollars  XF.
  CALL PROGRAM(Clc Base Mkt Dollars  XF) ('PKBSE01');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.DED_D_A_Code);
  PARAMETER(WRK.Base_Mkt_Prc_Amt_Tot_USR);

  CASE;

  // IF WRK.Base Mkt Prc Amt Tot USR GE WRK.Zero USR
  IF WRK.Base_Mkt_Prc_Amt_Tot_USR >= WRK.Zero_USR;

  // Base Market Dollars
  PAR.Trans_Extended_Amt_Usr = ( WRK.Base_Mkt_Prc_Amt_Tot_USR / 100 'H' )
  * PAR.Trans_Unit_Amt_Usr 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Trans Extended Amt Usr = CON.*ZERO
  PAR.Trans_Extended_Amt_Usr = *ZERO;

  ENDIF;

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Percent UOM
  IF PAR.Trans_UOM_USR = *BLANK;

  //?* * * * *    PERCENT   * * * * *
  //?PERCENT
  CASE;

  // IF PAR.Trans UOM USR is Percent of Gross Value
  IF PAR.Trans_UOM_USR = *BLANK;

  // Percent of Gross Value
  PAR.Trans_Extended_Amt_Usr = ( PAR.Trans_Unit_Amt_Usr / 100 'H' ) * PAR.TH_Payment_Gross
  'H';

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.Trans_Extended_Amt_Usr);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 //?Calc and create TH D/A for held over/subject TH record
 EXECUTE FUNCTION(Clc UOM Extension     IF) TYPE(EXCINTFUN)                      AB1143053;
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TD_Held_Over);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Live_Weight_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TH_Payment_Gross);
 PARAMETER(PAR.TH_Shipped_Weight);
 PARAMETER(*MISSING);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.Trans_Extended_Amt_Usr);
 PARAMETER(DB1.DED_D_A_Code);
 {
  //?Execute internal function

  //?Extension
  CASE;

  // IF PAR.Trans UOM USR is Flat
  IF PAR.Trans_UOM_USR = 'FL';

  //?* * * * *   FLAT    * * * * *
  //?FLAT
  CASE;

  // IF PAR.Trans UOM USR is Flat
  IF PAR.Trans_UOM_USR = 'FL';

  // PAR.Trans Extended Amt Usr = PAR.Trans Unit Amt Usr * CON.1 *Rounded
  PAR.Trans_Extended_Amt_Usr = PAR.Trans_Unit_Amt_Usr * 1 'H';

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Head UOM
  IF PAR.Trans_UOM_USR = 'DH'/'RH'/'YH'/'CH'/'KH'/'NH'/'DY'/'RX'/'HM'/'DE';

  //?* * * * *    HEAD   * * * * *
  //?HEAD
  CASE;

  // IF PAR.Trans UOM USR is Received Head
  IF PAR.Trans_UOM_USR = 'RH';

  // PAR.Trans Extended Amt Usr = PAR.TH Head Received * PAR.Trans Unit Amt Usr *Roun
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Received * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Received Hd less Yard Dd
  IF PAR.Trans_UOM_USR = 'RX';

  // WRK.Net Head Usr = PAR.TH Head Received - PAR.TH Yard Deads
  WRK.Net_Head_Usr = PAR.TH_Head_Received - PAR.TH_Yard_Deads;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Killed Head
  IF PAR.Trans_UOM_USR = 'KH';

  // PAR.Trans Extended Amt Usr = PAR.TH Head Killed * PAR.Trans Unit Amt Usr *Rounde
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Killed * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Condemned Head
  IF PAR.Trans_UOM_USR = 'CH';

  // PAR.Trans Extended Amt Usr = PAR.TH Head Condemned * PAR.Trans Unit Amt Usr *Rou
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Head_Condemned * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Yard Deads Head
  IF PAR.Trans_UOM_USR = 'YH';

  // PAR.Trans Extended Amt Usr = PAR.TH Yard Deads * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Yard_Deads * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is DOA Head
  IF PAR.Trans_UOM_USR = 'DH';

  // PAR.Trans Extended Amt Usr = PAR.TH Dead On Arrival * PAR.Trans Unit Amt Usr *Ro
  PAR.Trans_Extended_Amt_Usr = PAR.TH_Dead_On_Arrival * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Net Head
  IF PAR.Trans_UOM_USR = 'NH';

  // WRK.Net Head Usr = PAR.TH Head Received
  WRK.Net_Head_Usr = PAR.TH_Head_Received;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is DOA Head + Yard Dead Head
  IF PAR.Trans_UOM_USR = 'DY';

  // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
  WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is DOA HD + Yard Dead + EUT
  IF PAR.Trans_UOM_USR = 'DE';

  // WRK.Net Head Usr = PAR.TH Dead On Arrival + PAR.TH Yard Deads
  WRK.Net_Head_Usr = PAR.TH_Dead_On_Arrival + PAR.TH_Yard_Deads;

  // WRK.Net Head Usr = WRK.Net Head Usr + PAR.TH Head EUT/KOA
  WRK.Net_Head_Usr = WRK.Net_Head_Usr + PAR.TH_Head_EUT_KOA;

  // PAR.Trans Extended Amt Usr = WRK.Net Head Usr * PAR.Trans Unit Amt Usr *Rounded
  PAR.Trans_Extended_Amt_Usr = WRK.Net_Head_Usr * PAR.Trans_Unit_Amt_Usr 'H';

  //?HEAD
  // IF PAR.Trans UOM USR is Received Head /100 Miles
  IF PAR.Trans_UOM_USR = 'HM';

  // PAR.Trans Extended Amt Usr =       *
  PAR.Trans_Extended_Amt_Usr = ( PAR.PSM_Miles_to_Company * PAR.TH_Head_Killed 'H' ) * (
  PAR.Trans_Unit_Amt_Usr / 100 'H' ) 'H';

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Weight UOM
  IF PAR.Trans_UOM_USR = 'CW'/'LW'/'NL'/'SW'/'LX'/'SX';

  //?* * * * *    WEIGHT   * * * * *
  //?WEIGHT
  CASE;

  // IF PAR.Trans UOM USR is Live Hundred Weight
  IF PAR.Trans_UOM_USR = 'LW';

  // Live hundred wgt
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Live_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is LW less Yard Dead Wgt
  IF PAR.Trans_UOM_USR = 'LX';

  //? Calc wgt of yard dead based on Th avg live wgt
  // WRK.Yard dead weight      USR = PAR.TH Avg Live Wgt * PAR.TH Yard Deads *
  WRK.Yard_dead_weight_USR = PAR.TH_Avg_Live_Wgt * PAR.TH_Yard_Deads;

  //?  Subtract Yard Dead wgt from Live Wgt
  // WRK.Live Weight           USR = PAR.TH Live Wgt - WRK.Yard dead weight      USR
  WRK.Live_Weight_USR = PAR.TH_Live_Wgt - WRK.Yard_dead_weight_USR;

  // Live hundred wgt less Yd
  PAR.Trans_Extended_Amt_Usr = ( WRK.Live_Weight_USR / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is Carcass Hundred Weight
  IF PAR.Trans_UOM_USR = 'CW';

  // Carcass Hundred Wgt
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is Net Live Weight
  IF PAR.Trans_UOM_USR = 'NL';

  // WRK.Net Head Usr = PAR.TH Head Received
  WRK.Net_Head_Usr = PAR.TH_Head_Received;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Yard Deads
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Yard_Deads;

  // WRK.Net Head Usr = WRK.Net Head Usr - PAR.TH Head Condemned
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - PAR.TH_Head_Condemned;

  //?* Insert avg live weight
  // WRK.Net Live Weight Usr = WRK.Net Head Usr * PAR.TH Avg Live Wgt *
  WRK.Net_Live_Weight_Usr = WRK.Net_Head_Usr * PAR.TH_Avg_Live_Wgt;

  // Net Live Weight
  PAR.Trans_Extended_Amt_Usr = ( WRK.Net_Live_Weight_Usr / 100 'H' )
  * PAR.Trans_Unit_Amt_Usr 'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is Shipped Weight - Doa's
  IF PAR.Trans_UOM_USR = 'SW';

  //?  Calc Avg shipped wgt, then calc wgt of DOA'S
  //?This rule was defined on 01/14/97
  //?The Calculations for Avg Shipped Weights are
  //?Head Received should be the live hogs that walk across the scale
  //?Doa's should be the hogs that died either after we collected
  //?      or before we weighed them
  //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
  // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
  WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

  CASE;

  // IF WRK.Hd Cnt Org Ship Usr is *Zeros
  IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

  // WRK.Avg Weight USR = CON.*ZERO
  WRK.Avg_Weight_USR = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
  WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

  ENDIF;

  // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
  WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

  //?  Subtract doa's from Shipped Wgt
  // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
  WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

  // Shipped Weight Total Ext
  PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  //?WEIGHT
  // IF PAR.Trans UOM USR is SW - Doa's WT - Yrd Dd WT
  IF PAR.Trans_UOM_USR = 'SX';

  //?  Calc Avg shipped wgt, then calc wgt of DOA'S and Yard Deads
  //?This rule was defined on 01/14/97
  //?The Calculations for Avg Shipped Weights are
  //?Head Received should be the live hogs that walk across the scale
  //?Doa's should be the hogs that died either after we collected
  //?      or before we weighed them
  //?Avg Shipped Weight : Shipped Weight /(Head Received + Doa's)
  // WRK.Hd Cnt Org Ship Usr = PAR.TH Head Received + PAR.TH Dead On Arrival
  WRK.Hd_Cnt_Org_Ship_Usr = PAR.TH_Head_Received + PAR.TH_Dead_On_Arrival;

  CASE;

  // IF WRK.Hd Cnt Org Ship Usr is *Zeros
  IF WRK.Hd_Cnt_Org_Ship_Usr = *ZERO;

  // WRK.Avg Weight USR = CON.*ZERO
  WRK.Avg_Weight_USR = *ZERO;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Avg Weight USR = PAR.TH Shipped Weight / WRK.Hd Cnt Org Ship Usr *
  WRK.Avg_Weight_USR = PAR.TH_Shipped_Weight / WRK.Hd_Cnt_Org_Ship_Usr;

  ENDIF;

  // WRK.Yard dead weight      USR = WRK.Avg Weight USR * PAR.TH Yard Deads *
  WRK.Yard_dead_weight_USR = WRK.Avg_Weight_USR * PAR.TH_Yard_Deads;

  // WRK.Doa's Avg Weight Usr = WRK.Avg Weight USR * PAR.TH Dead On Arrival *
  WRK.Doa_s_Avg_Weight_Usr = WRK.Avg_Weight_USR * PAR.TH_Dead_On_Arrival;

  //?  Subtract Doa's and Subtract Yard Dead wgt from Shipped Wgt
  // WRK.Ship Wgt Tot Usr = PAR.TH Shipped Weight - WRK.Doa's Avg Weight Usr
  WRK.Ship_Wgt_Tot_Usr = PAR.TH_Shipped_Weight - WRK.Doa_s_Avg_Weight_Usr;

  // WRK.Ship Wgt Tot Usr = WRK.Ship Wgt Tot Usr - WRK.Yard dead weight      USR
  WRK.Ship_Wgt_Tot_Usr = WRK.Ship_Wgt_Tot_Usr - WRK.Yard_dead_weight_USR;

  // Shipped wgt less Yd
  PAR.Trans_Extended_Amt_Usr = ( WRK.Ship_Wgt_Tot_Usr / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Value UOM
  IF PAR.Trans_UOM_USR = 'GV'/'BD';

  //?* * * * *    VALUE    * * * * *
  //?VALUE
  CASE;

  // IF PAR.Trans UOM USR is Gross Hundred Value
  IF PAR.Trans_UOM_USR = 'GV';

  // Gross Hundred Value
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Payment_Gross / 100 'H' ) * PAR.Trans_Unit_Amt_Usr
  'H';

  //?VALUE
  // IF PAR.Trans UOM USR is Carcass Hundred Weight
  IF PAR.Trans_UOM_USR = 'CW';

  // Carcass Hundred Value
  PAR.Trans_Extended_Amt_Usr = ( PAR.TH_Hot_Wgt / 100 'H' ) * PAR.Trans_Unit_Amt_Usr 'H';

  //?VALUE
  // IF PAR.Trans UOM USR is Base Market Dollars
  IF PAR.Trans_UOM_USR = 'BD';

  // Call program Clc Base Mkt Dollars  XF.
  CALL PROGRAM(Clc Base Mkt Dollars  XF) ('PKBSE01');
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.DED_D_A_Code);
  PARAMETER(WRK.Base_Mkt_Prc_Amt_Tot_USR);

  CASE;

  // IF WRK.Base Mkt Prc Amt Tot USR GE WRK.Zero USR
  IF WRK.Base_Mkt_Prc_Amt_Tot_USR >= WRK.Zero_USR;

  // Base Market Dollars
  PAR.Trans_Extended_Amt_Usr = ( WRK.Base_Mkt_Prc_Amt_Tot_USR / 100 'H' )
  * PAR.Trans_Unit_Amt_Usr 'H';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Trans Extended Amt Usr = CON.*ZERO
  PAR.Trans_Extended_Amt_Usr = *ZERO;

  ENDIF;

  ENDIF;

  //?Extension
  // IF PAR.Trans UOM USR is Percent UOM
  IF PAR.Trans_UOM_USR = *BLANK;

  //?* * * * *    PERCENT   * * * * *
  //?PERCENT
  CASE;

  // IF PAR.Trans UOM USR is Percent of Gross Value
  IF PAR.Trans_UOM_USR = *BLANK;

  // Percent of Gross Value
  PAR.Trans_Extended_Amt_Usr = ( PAR.Trans_Unit_Amt_Usr / 100 'H' ) * PAR.TH_Payment_Gross
  'H';

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(Create Tattoo Deduction) TYPE(CRTOBJ) FILE(PKCDCPP)            AB1107817;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(PAR.Tattoo_Number_New_User);
 PARAMETER(PAR.Kill_Date_Usr);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.Trans_Extended_Amt_Usr);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*BLANK);
 PARAMETER('RS PROGRAM');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

}


//?Total the orig TH's D/A to compare to the original TH ded,add amts.
//?Add any difference to the 1st corresponding TH's D/A.
// WRK.TH Deduction Amt = CON.*ZERO
WRK.TH_Deduction_Amt = *ZERO;

// WRK.TH Additions Amt = CON.*ZERO
WRK.TH_Additions_Amt = *ZERO;

EXECUTE FUNCTION(Rtv Tattoo Hdr Totls RT) TYPE(RTVOBJ) FILE(PKCDCPP)            AB1143322;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TH_Deduction_Amt);
PARAMETER(WRK.TH_Additions_Amt);
{
 //?USER: Initialize routine

 // PAR.TH Deduction Amt = CON.*ZERO
 PAR.TH_Deduction_Amt = *ZERO;

 // PAR.TH Additions Amt = CON.*ZERO
 PAR.TH_Additions_Amt = *ZERO;

 // PAR.TH Accrual Amount = CON.*ZERO
 PAR.TH_Accrual_Amount = *ZERO;

 // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
 PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.@Status Include Dead Hd is No, dont include Dead Hd
 IF PAR.@Status_Include_Dead_Hd = 'N';

 // AND DB1.THD UOM is Dead Head UOM
 AND DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.THD Expense Paid by is Producer
 IF DB1.THD_Expense_Paid_by = 'P';

 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.THD Ded/Add Amount
 PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.THD Ded/Add Amount
 PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.THD_Ded_Add_Amount;

 ENDIF;

 // IF DB1.THD Expense Paid by is Seaboard
 IF DB1.THD_Expense_Paid_by = 'S';

 CASE;

 // IF DB1.THD Expense Type is Freight
 IF DB1.THD_Expense_Type = 'F';

 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp + DB1.THD Ded/Add Amou
 PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp - DB1.THD Ded/Add Amou
 PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp - DB1.THD_Ded_Add_Amount;

 ENDIF;

 // IF DB1.THD Expense Type is Other
 IF DB1.THD_Expense_Type = 'O';

 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount + DB1.THD Ded/Add Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount - DB1.THD Ded/Add Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount - DB1.THD_Ded_Add_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.TH Deduction Amt NE PAR.TH Deduction Amt
IF WRK.TH_Deduction_Amt <> PAR.TH_Deduction_Amt;

// WRK.THD Ded/Add Amount = PAR.TH Deduction Amt - WRK.Deduction Amt         USR
WRK.THD_Ded_Add_Amount = PAR.TH_Deduction_Amt - WRK.Deduction_Amt_USR;

EXECUTE FUNCTION(ZZRtv/Chg TH D/A-AdjustRT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1149250;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.THD_Ded_Add_Amount);
PARAMETER('+');
{
 //?USER: Process Data record

 //?Adjust an Additions D/A if the sign sent in is +
 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 CASE;

 // IF PAR.THD Unit Amt Sign is Add
 IF PAR.THD_Unit_Amt_Sign = '+';

 // WRK.THD Ded/Add Amount = PAR.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = PAR.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 //?Adjust an Additions D/A if the sign sent in is +
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Adjust a Deduction D/A if the sign sent in is -
 CASE;

 // IF PAR.THD Unit Amt Sign is Subtract
 IF PAR.THD_Unit_Amt_Sign = '-';

 // WRK.THD Ded/Add Amount = PAR.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = PAR.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 ENDIF;

}


ENDIF;

CASE;

// IF WRK.TH Additions Amt NE PAR.TH Additions Amt
IF WRK.TH_Additions_Amt <> PAR.TH_Additions_Amt;

// WRK.THD Ded/Add Amount = PAR.TH Additions Amt - WRK.Additions Amt         USR
WRK.THD_Ded_Add_Amount = PAR.TH_Additions_Amt - WRK.Additions_Amt_USR;

EXECUTE FUNCTION(ZZRtv/Chg TH D/A-AdjustRT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1149250;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.THD_Ded_Add_Amount);
PARAMETER('-');
{
 //?USER: Process Data record

 //?Adjust an Additions D/A if the sign sent in is +
 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 CASE;

 // IF PAR.THD Unit Amt Sign is Add
 IF PAR.THD_Unit_Amt_Sign = '+';

 // WRK.THD Ded/Add Amount = PAR.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = PAR.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 //?Adjust an Additions D/A if the sign sent in is +
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Adjust a Deduction D/A if the sign sent in is -
 CASE;

 // IF PAR.THD Unit Amt Sign is Subtract
 IF PAR.THD_Unit_Amt_Sign = '-';

 // WRK.THD Ded/Add Amount = PAR.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = PAR.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 ENDIF;

}


ENDIF;

//?Total the new TH's D/A to compare to the new TH ded,add amts.
//?Add any difference to the 1st corresponding new TH's D/A.
// WRK.TH Deduction Amt = CON.*ZERO
WRK.TH_Deduction_Amt = *ZERO;

// WRK.TH Additions Amt = CON.*ZERO
WRK.TH_Additions_Amt = *ZERO;

EXECUTE FUNCTION(Rtv Tattoo Hdr Totls RT) TYPE(RTVOBJ) FILE(PKCDCPP)            AB1143322;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(WRK.TH_Deduction_Amt);
PARAMETER(WRK.TH_Additions_Amt);
{
 //?USER: Initialize routine

 // PAR.TH Deduction Amt = CON.*ZERO
 PAR.TH_Deduction_Amt = *ZERO;

 // PAR.TH Additions Amt = CON.*ZERO
 PAR.TH_Additions_Amt = *ZERO;

 // PAR.TH Accrual Amount = CON.*ZERO
 PAR.TH_Accrual_Amount = *ZERO;

 // PAR.Freight Tot Ded/Add Exp = CON.*ZERO
 PAR.Freight_Tot_Ded_Add_Exp = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF PAR.@Status Include Dead Hd is No, dont include Dead Hd
 IF PAR.@Status_Include_Dead_Hd = 'N';

 // AND DB1.THD UOM is Dead Head UOM
 AND DB1.THD_UOM = 'CH'/'DH'/'DY'/'YH'/'KH';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF DB1.THD Expense Paid by is Producer
 IF DB1.THD_Expense_Paid_by = 'P';

 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.TH Additions Amt = PAR.TH Additions Amt + DB1.THD Ded/Add Amount
 PAR.TH_Additions_Amt = PAR.TH_Additions_Amt + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Deduction Amt = PAR.TH Deduction Amt + DB1.THD Ded/Add Amount
 PAR.TH_Deduction_Amt = PAR.TH_Deduction_Amt + DB1.THD_Ded_Add_Amount;

 ENDIF;

 // IF DB1.THD Expense Paid by is Seaboard
 IF DB1.THD_Expense_Paid_by = 'S';

 CASE;

 // IF DB1.THD Expense Type is Freight
 IF DB1.THD_Expense_Type = 'F';

 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp + DB1.THD Ded/Add Amou
 PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Freight Tot Ded/Add Exp = PAR.Freight Tot Ded/Add Exp - DB1.THD Ded/Add Amou
 PAR.Freight_Tot_Ded_Add_Exp = PAR.Freight_Tot_Ded_Add_Exp - DB1.THD_Ded_Add_Amount;

 ENDIF;

 // IF DB1.THD Expense Type is Other
 IF DB1.THD_Expense_Type = 'O';

 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount + DB1.THD Ded/Add Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount + DB1.THD_Ded_Add_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.TH Accrual Amount = PAR.TH Accrual Amount - DB1.THD Ded/Add Amount
 PAR.TH_Accrual_Amount = PAR.TH_Accrual_Amount - DB1.THD_Ded_Add_Amount;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.TH Deduction Amt NE PAR.Deduction Amt         USR
IF WRK.TH_Deduction_Amt <> PAR.Deduction_Amt_USR;

// WRK.THD Ded/Add Amount = PAR.Deduction Amt         USR - WRK.Deduction Amt
WRK.THD_Ded_Add_Amount = PAR.Deduction_Amt_USR - WRK.Deduction_Amt_USR;

EXECUTE FUNCTION(ZZRtv/Chg TH D/A-AdjustRT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1149250;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(WRK.THD_Ded_Add_Amount);
PARAMETER('+');
{
 //?USER: Process Data record

 //?Adjust an Additions D/A if the sign sent in is +
 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 CASE;

 // IF PAR.THD Unit Amt Sign is Add
 IF PAR.THD_Unit_Amt_Sign = '+';

 // WRK.THD Ded/Add Amount = PAR.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = PAR.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 //?Adjust an Additions D/A if the sign sent in is +
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Adjust a Deduction D/A if the sign sent in is -
 CASE;

 // IF PAR.THD Unit Amt Sign is Subtract
 IF PAR.THD_Unit_Amt_Sign = '-';

 // WRK.THD Ded/Add Amount = PAR.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = PAR.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 ENDIF;

}


ENDIF;

CASE;

// IF WRK.TH Additions Amt NE PAR.Additions Amt         USR
IF WRK.TH_Additions_Amt <> PAR.Additions_Amt_USR;

// WRK.THD Ded/Add Amount = PAR.Additions Amt         USR - WRK.Additions Amt
WRK.THD_Ded_Add_Amount = PAR.Additions_Amt_USR - WRK.Additions_Amt_USR;

EXECUTE FUNCTION(ZZRtv/Chg TH D/A-AdjustRT) TYPE(RTVOBJ) FILE(PKCDCPP)          AB1149250;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.Tattoo_Number_New_User);
PARAMETER(PAR.Kill_Date_Usr);
PARAMETER(WRK.THD_Ded_Add_Amount);
PARAMETER('-');
{
 //?USER: Process Data record

 //?Adjust an Additions D/A if the sign sent in is +
 CASE;

 // IF DB1.THD Unit Amt Sign is Add
 IF DB1.THD_Unit_Amt_Sign = '+';

 CASE;

 // IF PAR.THD Unit Amt Sign is Add
 IF PAR.THD_Unit_Amt_Sign = '+';

 // WRK.THD Ded/Add Amount = PAR.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = PAR.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 //?Adjust an Additions D/A if the sign sent in is +
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Adjust a Deduction D/A if the sign sent in is -
 CASE;

 // IF PAR.THD Unit Amt Sign is Subtract
 IF PAR.THD_Unit_Amt_Sign = '-';

 // WRK.THD Ded/Add Amount = PAR.THD Ded/Add Amount + DB1.THD Ded/Add Amount
 WRK.THD_Ded_Add_Amount = PAR.THD_Ded_Add_Amount + DB1.THD_Ded_Add_Amount;

 EXECUTE FUNCTION(Change Tattoo Deduction) TYPE(CHGOBJ) FILE(PKCDCPP)            AB1107818;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.DED_D_A_Code);
 PARAMETER(DB1.THD_Unit_Amt);
 PARAMETER(WRK.THD_Ded_Add_Amount);
 PARAMETER(DB1.THD_Unit_Amt_Sign);
 PARAMETER(DB1.THD_UOM);
 PARAMETER(DB1.THD_Transaction_Created);
 PARAMETER(DB1.THD_GL_Code);
 PARAMETER(DB1.THD_Contra_Gl_Code);
 PARAMETER(DB1.THD_Re_imbursement_Head);
 PARAMETER(DB1.THD_Payment_Sts);
 PARAMETER(DB1.THD_Expense_Paid_by);
 PARAMETER(DB1.THD_Expense_Type);
 PARAMETER(DB1.THD_Reserve_Account_Upd);
 PARAMETER(DB1.THD_Commission_Deduction);
 PARAMETER(DB1.THD_Deferred_Payment);
 PARAMETER(DB1.THD_Status_4);
 PARAMETER(DB1.THD_Status_5);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 QUIT;

 ENDIF;

 ENDIF;

}


ENDIF;

