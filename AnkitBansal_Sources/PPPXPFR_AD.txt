// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPPXPFR
// ?Date: 14.08.2025 Time: 12:06:37
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(PAR.Company_Number);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.Allow_Multi_Company);
PARAMETER(NLL.Default_Printer);
PARAMETER(NLL.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?USER: Record selection processing

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// WRK.Text 1 Length USR = CON.*BLANK
WRK.Text_1_Length_USR = *BLANK;

//?Sel: Unapproved Inventory Values
CASE;

// IF PAR.Status - Y or N is yes
IF PAR.Status_Y_or_N = 'Y';

CASE;

// IF DB1.IVF Curr Wk Prod Status is Unapproved
IF DB1.IVF_Curr_Wk_Prod_Status = 'U';

// OR DB1.IVF Cur Wk Inv Val Status is Unapproved
OR DB1.IVF_Cur_Wk_Inv_Val_Status = 'U';

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

ENDIF;

//?Sel: If Sales Date older than nn days
CASE;

// IF PAR.Days is GT Zero
IF PAR.Days > *ZERO;

CASE;

// IF DB1.IVF Sales Price/Pound Dt is Entered
IF DB1.IVF_Sales_Price_Per_LB_Dt > *ZERO;

//?R9083 06/14/17 DN-Update date conversion due to Synon version difference.
// WRK.Date                  USR = DB1.IVF Sales Price/Pound Dt
WRK.Date_USR = DB1.IVF_Sales_Price_Per_LB_Dt;

// WRK.Days = JOB.*Job date - WRK.Date                  USR *DAYS
WRK.Days = DURATION(JOB.*Job_date WRK.Date_USR 'DY' 1111111 'NONE' 'N' 1);

CASE;

// IF WRK.Days GT PAR.Days
IF WRK.Days > PAR.Days;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Manual Price Accpt RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1414604;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Manual_Price_Accept_Prcnt);
PARAMETER(PAR.CoPk_FdSrv_ManPrc_Acpt_PT);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Food Service and Co-Pack Items
CASE;

// IF DB1.IVF Item Dft Cmdty Mkt Bs is Food Service
IF DB1.IVF_Item_Dft_Cmdty_Mkt_Bs = 'FSV';

// OR DB1.IVF Item Dft Cmdty Mkt Bs is Co-Pack
OR DB1.IVF_Item_Dft_Cmdty_Mkt_Bs = 'CPK';

// PAR.Manual Price Accept Prcnt = PAR.CoPk/FdSrv ManPrc Acpt%
PAR.Manual_Price_Accept_Prcnt = PAR.CoPk_FdSrv_ManPrc_Acpt_PT;

ENDIF;

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(DB1.IVF_Item_Dft_Cmdty_Mkt_Bs);
PARAMETER(DB1.IVF_Item_Cmdty_Price_Grp);
PARAMETER(9999999);
PARAMETER(PAR.Projected_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


//?Absorbed freight rate is by by customer so we dont have it here.
// WRK.Absorbed Freight Rate = CON.*ZERO
WRK.Absorbed_Freight_Rate_CWT = 0;

// Projected Market Price
PAR.Projected_Market_Price = ( PAR.Projected_Market_Price + DB1.IVF_Item_Market_Overage ) +        +
( WRK.Absorbed_Freight_Rate_CWT / 100 'H' );

//?If a market price is found for co/cust market code default
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Minimum price allowed
WRK.Minimum_Price_USR = ( 1 - ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) )                        +
* PAR.Projected_Market_Price 'H';

// WRK.Minimum Price   USR = WRK.Minimum Price   USR * CON.100 *
WRK.Minimum_Price_USR = WRK.Minimum_Price_USR * 100;

// Maximum price allowed
WRK.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )                        +
* PAR.Projected_Market_Price 'H';

// WRK.Maximum Price  USR = WRK.Maximum Price  USR * CON.100 *
WRK.Maximum_Price_USR = WRK.Maximum_Price_USR * 100;

//?If the Price Override is within the range then error status is no
CASE;

// IF DB1.IVF Sales Price/CWT GE WRK.Minimum Price   USR
IF DB1.IVF_Sales_Price_Per_CWT >= WRK.Minimum_Price_USR;

// AND DB1.IVF Sales Price/CWT LE WRK.Maximum Price  USR
AND DB1.IVF_Sales_Price_Per_CWT <= WRK.Maximum_Price_USR;

//?If the Price Override is within the range then error status is no
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Text 1 Length USR = CON.*
WRK.Text_1_Length_USR = *;

ENDIF;

//?If a market price is found for co/cust market code default
// IF *OTHERWISE
IF *OTHERWISE;

//?If no price for co/cust market code then use co/item market code
EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(DB1.IVF_Item_Dft_Cmdty_Mkt_Bs);
PARAMETER(DB1.IVF_Item_Cmdty_Price_Grp);
PARAMETER(9999999);
PARAMETER(PAR.Projected_Market_Price);
PARAMETER(WRK.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Minimum price allowed
WRK.Minimum_Price_USR = ( PAR.Manual_Price_Accept_Prcnt / 100 'H' )                                +
* PAR.Projected_Market_Price 'H';

// WRK.Minimum Price   USR = WRK.Minimum Price   USR * CON.100 *
WRK.Minimum_Price_USR = WRK.Minimum_Price_USR * 100;

// Maximum price allowed
WRK.Maximum_Price_USR = ( ( PAR.Manual_Price_Accept_Prcnt / 100 'H' ) + 1 )                        +
* PAR.Projected_Market_Price 'H';

// WRK.Maximum Price  USR = WRK.Maximum Price  USR * CON.100 *
WRK.Maximum_Price_USR = WRK.Maximum_Price_USR * 100;

//?If the Price Override is within the range then error status is no
CASE;

// IF DB1.IVF Sales Price/CWT GE WRK.Minimum Price   USR
IF DB1.IVF_Sales_Price_Per_CWT >= WRK.Minimum_Price_USR;

// AND DB1.IVF Sales Price/CWT LE WRK.Maximum Price  USR
AND DB1.IVF_Sales_Price_Per_CWT <= WRK.Maximum_Price_USR;

//?If the Price Override is within the range then error status is no
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Text 1 Length USR = CON.*
WRK.Text_1_Length_USR = *;

ENDIF;

ENDIF;

ENDIF;

//?Print * on report if out of Range
CASE;

// IF DB1.IVF Sales Price/Pound LT WRK.Minimum Price   USR
IF DB1.IVF_Sales_Price_Per_CWT < WRK.Minimum_Price_USR;

// OR DB1.IVF Sales Price/Pound GT WRK.Maximum Price  USR
OR DB1.IVF_Sales_Price_Per_CWT > WRK.Maximum_Price_USR;

// WRK.Text 1 Length USR = CON.*
WRK.Text_1_Length_USR = *;

ENDIF;

//?Sel: Out of min max audit range
CASE;

// IF PAR.Status Flag 2  Y/N is Yes
IF PAR.Status_Flag_2_Y_N = 'Y';

CASE;

// IF DB1.IVF Sales Price/CWT LT WRK.Minimum Price   USR
IF DB1.IVF_Sales_Price_Per_CWT < WRK.Minimum_Price_USR;

// OR DB1.IVF Sales Price/CWT GT WRK.Maximum Price  USR
OR DB1.IVF_Sales_Price_Per_CWT > WRK.Maximum_Price_USR;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

ENDIF;

//?USER: On print of first page format

//?R9083 02/16/17 DN-Move All PAR to 1PG Format.
MOVE *ALL (To: 1PG From: PAR);

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT IVF Valuation Grouping header format

CASE;

IF NEW IVF_Week_Ending_Date;
// Print IVF Week Ending Date header format
PRINT IVF Week Ending Date header format;

ENDIF;

//?USER: On print of detail format

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(CUR.Item_Desc_DRV);
PARAMETER(CUR.IVF_Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// CUR.Text 1 Length USR = WRK.Text 1 Length USR
CUR.Text_1_Length_USR = WRK.Text_1_Length_USR;

//?USER: Print required level totals

CASE;

IF NEW IVF_Week_Ending_Date;
// Print IVF Week Ending Date totals format
PRINT IVF Week Ending Date totals format;

ENDIF;

// SUPPRESSED PRINT IVF Valuation Grouping totals format

