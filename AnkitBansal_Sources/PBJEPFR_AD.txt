// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBJEPFR
// ?Date: 14.08.2025 Time: 12:03:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// LCL.USR Display 1 = CND.No
LCL.USR_Display_1 = 'N';

// LCL.Job Date Usr = JOB.*Job date
LCL.Job_Date_Usr = JOB.*Job_date;

// LCL.Ageing Days Usr = PAR.Ageing Days Usr * CON.-1 *
LCL.Ageing_Days_Usr = PAR.Ageing_Days_Usr * -1;

//?USER: On print of first page format

// 1PG.Ageing Days Usr = PAR.Ageing Days Usr
X1PG_Ageing_Days_Usr = PAR.Ageing_Days_Usr;

// 1PG.Company Number = PAR.Company Number
X1PG_Company_Number = PAR.Company_Number;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(X1PG_Company_Number);
PARAMETER(X1PG_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// 1PG.Warehouse Code = PAR.Warehouse Code
X1PG_Warehouse_Code = PAR.Warehouse_Code;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(X1PG_Warehouse_Code);
PARAMETER(X1PG_Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


//?USER: Print required level headings

CASE;

IF NEW Company_Number;
EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CUR.Company_Name_DRV);
PARAMETER(CUR.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?Go Back from current date to start aging rpt
// PAR.USR Day 1 = LCL.Job Date Usr
PAR.USR_Day_1 = LCL.Job_Date_Usr;

// PAR.USR Day 1 = PAR.USR Day 1 + LCL.Ageing Days Usr *DAYS
PAR.USR_Day_1 = DATEINCR(PAR.USR_Day_1 LCL.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

//?Set to -1 now ....
// WRK.Ageing Days Usr = CON.-1
WRK.Ageing_Days_Usr = -1;

// PAR.USR Day 2 = PAR.USR Day 1 + WRK.Ageing Days Usr *DAYS
PAR.USR_Day_2 = DATEINCR(PAR.USR_Day_1 WRK.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 3 = PAR.USR Day 2 + WRK.Ageing Days Usr *DAYS
PAR.USR_Day_3 = DATEINCR(PAR.USR_Day_2 WRK.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 4 = PAR.USR Day 3 + WRK.Ageing Days Usr *DAYS
PAR.USR_Day_4 = DATEINCR(PAR.USR_Day_3 WRK.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 5 = PAR.USR Day 4 + WRK.Ageing Days Usr *DAYS
PAR.USR_Day_5 = DATEINCR(PAR.USR_Day_4 WRK.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 6 = PAR.USR Day 5 + WRK.Ageing Days Usr *DAYS
PAR.USR_Day_6 = DATEINCR(PAR.USR_Day_5 WRK.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 7 = PAR.USR Day 6 + WRK.Ageing Days Usr *DAYS
PAR.USR_Day_7 = DATEINCR(PAR.USR_Day_6 WRK.Ageing_Days_Usr 'DY' 1111111 'NONE' 'N' 1);

// PAR.USR Day 8 = PAR.USR Day 7 + CON.-1 *DAYS
PAR.USR_Day_8 = DATEINCR(PAR.USR_Day_7 '-1' 'DY' 1111111 'NONE' 'N' 1);

// CUR.USR Day 1 = PAR.USR Day 1
CUR.USR_Day_1 = PAR.USR_Day_1;

// CUR.USR Day 2 = PAR.USR Day 2
CUR.USR_Day_2 = PAR.USR_Day_2;

// CUR.USR Day 3 = PAR.USR Day 3
CUR.USR_Day_3 = PAR.USR_Day_3;

// CUR.USR Day 4 = PAR.USR Day 4
CUR.USR_Day_4 = PAR.USR_Day_4;

// CUR.USR Day 5 = PAR.USR Day 5
CUR.USR_Day_5 = PAR.USR_Day_5;

// CUR.USR Day 6 = PAR.USR Day 6
CUR.USR_Day_6 = PAR.USR_Day_6;

// CUR.USR Day 7 = PAR.USR Day 7
CUR.USR_Day_7 = PAR.USR_Day_7;

// CUR.USR Day 8 = PAR.USR Day 8
CUR.USR_Day_8 = PAR.USR_Day_8;

//?set to 1 always  so use wrk. instead of lcl.
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

// SUPPRESSED PRINT Warehouse Code header format

CASE;

IF NEW Order_Number;
// LCL.Print (Yes/No) USR = CND.No
LCL.Print_Yes_No_USR = 'N';

// LCL.Print Blank Line Usr = CND.no
LCL.Print_Blank_Line_Usr = 'N';

// LCL.Break = CND.Yes
LCL.Break = 'Y';

// SUPPRESSED PRINT Order Number header format

ENDIF;

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(RTV Order Status       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1131568;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(LCL.Header_Status);
PARAMETER(LCL.Header_Status_Last);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Header Status is Confirmed & Complete
IF LCL.Header_Status = 'C'/'R';

// IF *OTHERWISE
IF *OTHERWISE;

//?Put allocated into correct day
CASE;

// IF DB1.OD Production Date LE PAR.USR Day 1
IF DB1.OD_Production_Date <= PAR.USR_Day_1;

// AND DB1.OD Production Date GT PAR.USR Day 2
AND DB1.OD_Production_Date > PAR.USR_Day_2;

// NXT.Day 1 Sales 5,0  USR = NXT.Day 1 Sales 5,0  USR + DB1.OD Quantity Inv Sched
NXT.Day_1_Sales_50_USR = NXT.Day_1_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

// LCL.Print (Yes/No) USR = CND.Yes
LCL.Print_Yes_No_USR = 'Y';

//?Put allocated into correct day
// IF DB1.OD Production Date LE PAR.USR Day 2
IF DB1.OD_Production_Date <= PAR.USR_Day_2;

// AND DB1.OD Production Date GT PAR.USR Day 3
AND DB1.OD_Production_Date > PAR.USR_Day_3;

// NXT.Day 2 Sales 5,0  USR = NXT.Day 2 Sales 5,0  USR + DB1.OD Quantity Inv Sched
NXT.Day_2_Sales_50_USR = NXT.Day_2_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

// LCL.Print (Yes/No) USR = CND.Yes
LCL.Print_Yes_No_USR = 'Y';

//?Put allocated into correct day
// IF DB1.OD Production Date LE PAR.USR Day 3
IF DB1.OD_Production_Date <= PAR.USR_Day_3;

// AND DB1.OD Production Date GT PAR.USR Day 4
AND DB1.OD_Production_Date > PAR.USR_Day_4;

// NXT.Day 3 Sales 5,0  USR = NXT.Day 3 Sales 5,0  USR + DB1.OD Quantity Inv Sched
NXT.Day_3_Sales_50_USR = NXT.Day_3_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

// LCL.Print (Yes/No) USR = CND.Yes
LCL.Print_Yes_No_USR = 'Y';

//?Put allocated into correct day
// IF DB1.OD Production Date LE PAR.USR Day 4
IF DB1.OD_Production_Date <= PAR.USR_Day_4;

// AND DB1.OD Production Date GT PAR.USR Day 5
AND DB1.OD_Production_Date > PAR.USR_Day_5;

// NXT.Day 4 Sales 5,0  USR = NXT.Day 4 Sales 5,0  USR + DB1.OD Quantity Inv Sched
NXT.Day_4_Sales_50_USR = NXT.Day_4_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

// LCL.Print (Yes/No) USR = CND.Yes
LCL.Print_Yes_No_USR = 'Y';

//?Put allocated into correct day
// IF DB1.OD Production Date LE PAR.USR Day 5
IF DB1.OD_Production_Date <= PAR.USR_Day_5;

// AND DB1.OD Production Date GT PAR.USR Day 6
AND DB1.OD_Production_Date > PAR.USR_Day_6;

// NXT.Day 5 Sales 5,0  USR = NXT.Day 5 Sales 5,0  USR + DB1.OD Quantity Inv Sched
NXT.Day_5_Sales_50_USR = NXT.Day_5_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

// LCL.Print (Yes/No) USR = CND.Yes
LCL.Print_Yes_No_USR = 'Y';

//?Put allocated into correct day
// IF DB1.OD Production Date LE PAR.USR Day 6
IF DB1.OD_Production_Date <= PAR.USR_Day_6;

// AND DB1.OD Production Date GT PAR.USR Day 7
AND DB1.OD_Production_Date > PAR.USR_Day_7;

// NXT.Day 6 Sales 5,0  USR = NXT.Day 6 Sales 5,0  USR + DB1.OD Quantity Inv Sched
NXT.Day_6_Sales_50_USR = NXT.Day_6_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

// LCL.Print (Yes/No) USR = CND.Yes
LCL.Print_Yes_No_USR = 'Y';

//?Put allocated into correct day
// IF DB1.OD Production Date LE PAR.USR Day 7
IF DB1.OD_Production_Date <= PAR.USR_Day_7;

// AND DB1.OD Production Date GT PAR.USR Day 8
AND DB1.OD_Production_Date > PAR.USR_Day_8;

// NXT.Day 7 Sales 5,0  USR = NXT.Day 7 Sales 5,0  USR + DB1.OD Quantity Inv Sched
NXT.Day_7_Sales_50_USR = NXT.Day_7_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

// LCL.Print (Yes/No) USR = CND.Yes
LCL.Print_Yes_No_USR = 'Y';

//?Put allocated into correct day
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DB1.OD Production Date LE PAR.USR Day 8
IF DB1.OD_Production_Date <= PAR.USR_Day_8;

// NXT.Day 8 Sales 5,0  USR = NXT.Day 8 Sales 5,0  USR + DB1.OD Quantity Inv Sched
NXT.Day_8_Sales_50_USR = NXT.Day_8_Sales_50_USR + DB1.OD_Quantity_Inv_Sched;

// LCL.Print (Yes/No) USR = CND.Yes
LCL.Print_Yes_No_USR = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?USER: Print required level totals

CASE;

IF NEW Item_Code;
CASE;

// IF LCL.Print (Yes/No) USR is Yes
IF LCL.Print_Yes_No_USR = 'Y';

EXECUTE FUNCTION(RTV Load ID            RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1384375;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(CUR.Load_ID);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Print Blank Line Usr = CND.yes
LCL.Print_Blank_Line_Usr = 'Y';

EXECUTE FUNCTION(Item Description DRV) TYPE(DRVFLD)                             AC1633414;
PARAMETER(CUR.Item_Description_DRV);
PARAMETER(CUR.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Description   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1325690;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// LCL.Print (Yes/No) USR = CND.No
LCL.Print_Yes_No_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Item Code totals format
PRINT Item Code totals format;

CASE;

// IF LCL.Print Blank Line Usr is yes
IF LCL.Print_Blank_Line_Usr = 'Y';

// LCL.Break = CND.No
LCL.Break = 'N';

ENDIF;

ENDIF;

// SUPPRESSED PRINT Order Number totals format

// SUPPRESSED PRINT Warehouse Code totals format

// SUPPRESSED PRINT Company Number totals format

