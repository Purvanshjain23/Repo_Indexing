// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKVDPVR
// ?Date: 14.08.2025 Time: 02:50:34
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification History
DO;

//? 6/30/2021 JBB SDN619 - Repayment by Business User
//?               P17058   Added logic for the new Tattoo Repayment
//?                        process.  This will update the new files
//?                        Tattoo Repayment Detail and Tattoo
//?                        Repayment Comment.
//? 2/01/2019 JBB E14234 - Repayment Enhancements Phase 2
//?                        Added a new message field at the bottom
//?                        of the screen that will display message
//?                        'Transfer Selected for Repayment' when
//?                        a record for the Tattoo Header exists in
//?                        the Tattoo Header Job Sel file.
//?R9771 RMC 03/24/17 - when chk for producer subs, chk active only
//?E3814 JJH 10/07/15 - Recompile because PS Premises ID added to
//?  Producer Site. - No logic changes.
//?along with e00150 correct issue with the site id
//?This was causing the tattoo header to have site that did not belong
//?with that producer.
//?allow the user to pick the site id if going to another producer.
//?since the subsidiary is by producer, then process the subidiary
//?the same way.
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


EXECUTE FUNCTION(E00150 Prod/Subsidiary) TYPE(EXCINTFUN)                        AB1291893;
{
 //?Execute internal function

 //?09/19/08 SLM E00150 Add the Producer Subsidiary to the
 //?Tattoo Header Ext  -- Only on non Resale hogs
 //?Allow the user to inter the Producer Subsidiary for this
 //?tattoo if the Producer Subsidiary has records for any subsidiary
 //?then the Producer Subsidiary code will be required for this tattoo
}


//?Check if this Transfer is for a Repayment
// Call program Chk Repay in Progress XF.
CALL PROGRAM(Chk Repay in Progress XF) ('PWNVXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(LCL.TRD_Repayment_Status);
PARAMETER(LCL.Repayment_in_Progress_Y_N);

//?USER: Load screen

//?9/25/2008 Get Producer and Location
EXECUTE FUNCTION(Val Buy Order Dtl&Inf RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1292327;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(PGM.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Normal
 PAR.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?9/25/2008 Get Tattoo Header Ext for the Site Id & Subsidiary
EXECUTE FUNCTION(Rtv Site ID/Prod Subs RT) TYPE(RTVOBJ) FILE(PKDNCPP)           AB1291789;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(NLL.PD_Producer_Code);
PARAMETER(DTL.PS_Site_ID);
PARAMETER(DTL.Producer_Subsidiary_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Producer Code New = DTL.PD Producer Code
DTL.Producer_Code_New = DTL.PD_Producer_Code;

// DTL.Location Code New = DTL.PL Location Code
DTL.Location_Code_New = DTL.PL_Location_Code;

// DTL.Site Id New = DTL.PS Site ID
DTL.Site_Id_New = DTL.PS_Site_ID;

// DTL.Prod Subsidiary New Usr = DTL.Producer Subsidiary Code
DTL.Prod_Subsidiary_New_Usr = DTL.Producer_Subsidiary_Code;

//?9/25/2008 Get Tattoo Header State Code
// Call program Rtv TattooHdr Fields  XF.
CALL PROGRAM(Rtv TattooHdr Fields  XF) ('PLNBXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(DTL.TH_State);

// DTL.Movement number new usr = DTL.TH HPS Movement Ref #
DTL.Movement_number_new_usr = DTL.TH_HPS_Movement_Ref_#;

// WRK.Movement# Compared = CND.Yes
WRK.Movement#_Compared = 'Y';

// DTL.Text 1 41 Usr = CON.*BLANK
DTL.Text_1_41_Usr = *BLANK;

// DTL.Text 2 41 Usr = CON.*BLANK
DTL.Text_2_41_Usr = *BLANK;

EXECUTE FUNCTION(Rtv PL Vnd Nbr, state RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1207995;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Location_Code_New);
PARAMETER(NLL.PL_Name);
PARAMETER(NLL.Pl_VND_Address_Number);
PARAMETER(NLL.PL_State_Code);
PARAMETER(LCL.PL_Site_ID_Required);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Th State code New = DTL.TH State
DTL.Th_State_code_New = DTL.TH_State;

// WRK.Allow Change Usr Y/N ST = CND.Yes
WRK.Allow_Change_Usr_Y_N_ST = 'Y';

// WRK.Allow Change Usr Y/N Site = CND.No
WRK.Allow_Change_Usr_Y_N_Site = 'N';

// WRK.Allow Change Usr Y/N Subs = CND.No
WRK.Allow_Change_Usr_Y_N_Subs = 'N';

//?Using the new fields
//?Site is required or not if not then blank out the site
CASE;

// IF PAR.TH Hog Class Type is Not Resale
IF PAR.TH_Hog_Class_Type = 'M'/'S';

CASE;

// IF LCL.PL Site ID Required is Yes
IF LCL.PL_Site_ID_Required = 'Y';

// WRK.Allow Change Usr Y/N Site = CND.Yes
WRK.Allow_Change_Usr_Y_N_Site = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Site Id New = CON.*BLANK
DTL.Site_Id_New = *BLANK;

// WRK.Allow Change Usr Y/N Site = CND.No
WRK.Allow_Change_Usr_Y_N_Site = 'N';

ENDIF;

//?Site is required or not if not then blank out the site
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Site Id New = CON.*BLANK
DTL.Site_Id_New = *BLANK;

// WRK.Allow Change Usr Y/N Site = CND.No
WRK.Allow_Change_Usr_Y_N_Site = 'N';

ENDIF;

//?Subsidiary is required or not - if not  blank out subsidiary
DO;

CASE;

// IF PAR.TH Hog Class Type is Not Resale
IF PAR.TH_Hog_Class_Type = 'M'/'S';

EXECUTE FUNCTION(Rtv ProdSubsidiaryPrc RT) TYPE(RTVOBJ) FILE(PLA8REP)           AB1291791;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(WRK.Producer_Subsidiary_SUSR);
{
 //?USER: Initialize routine

 //?RMC R9771  3/24/17 check for active only
 // PAR.Producer Subsidiary SUSR = CND.No Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'N';

 //?USER: Processing if Data record not found

 // PAR.Producer Subsidiary SUSR = CND.No Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.Producer Subsidiary SUSR = CND.Allow Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Producer Subsidiary SUSR is Allow Producer Subsidiary
IF WRK.Producer_Subsidiary_SUSR = 'Y';

// WRK.Allow Change Usr Y/N Subs = CND.Yes
WRK.Allow_Change_Usr_Y_N_Subs = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Prod Subsidiary New Usr = CON.*BLANK
DTL.Prod_Subsidiary_New_Usr = *BLANK;

// WRK.Allow Change Usr Y/N Subs = CND.No
WRK.Allow_Change_Usr_Y_N_Subs = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Prod Subsidiary New Usr = CON.*BLANK
DTL.Prod_Subsidiary_New_Usr = *BLANK;

// WRK.Allow Change Usr Y/N Subs = CND.No
WRK.Allow_Change_Usr_Y_N_Subs = 'N';

ENDIF;

ENDDO;

// DTL.HC Class Type Desc Usr = Condition name of PAR.TH Hog Class Type
DTL.HC_Class_Type_Desc_Usr = RTVCND(PAR.TH_Hog_Class_Type);

// DTL.Status 1 = CND.Yes
DTL.Status_1 = 'Y';

// DTL.Condition Name USR = Condition name of DTL.Status 1
DTL.Condition_Name_USR = RTVCND(DTL.Status_1);

CASE;

// IF PAR.TH Hog Class Type is Resale
IF PAR.TH_Hog_Class_Type = 'R';

// AND PAR.TH Source Type is Internal
AND PAR.TH_Source_Type = 'I';

// WRK.@Status Internal (Y/N) = CND.Yes
WRK.@Status_Internal_Y_N = 'Y';

// DTL.Print Scale Tkt       USR = CND.No
DTL.Print_Scale_Tkt_USR = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.@Status Internal (Y/N) = CND.No
WRK.@Status_Internal_Y_N = *BLANK;

// DTL.Print Scale Tkt       USR = CND.Yes
DTL.Print_Scale_Tkt_USR = 'Y';

// DTL.Text 10 1 USR = Condition name of DTL.Print Scale Tkt       USR
DTL.Text_10_1_USR = RTVCND(DTL.Print_Scale_Tkt_USR);

ENDIF;

// DTL.Buy Order New Usr = DTL.BOH Buy Order Number
DTL.Buy_Order_New_Usr = DTL.BOH_Buy_Order_Number;

// DTL.Buy Order Load New Usr = DTL.BOL Load Number
DTL.Buy_Order_Load_New_Usr = DTL.BOL_Load_Number;

// DTL.Kill Date Usr = DTL.TH Kill Date
DTL.Kill_Date_Usr = DTL.TH_Kill_Date;

// DTL.Message Special Usr = CON.*BLANK
DTL.Message_Special_Usr = *BLANK;

// WRK.@Status (Yes/No) = CND.No
WRK.@Status_Yes_No = 'N';

EXECUTE FUNCTION(Vry Held Over Record  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1196384;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(WRK.@Status_Yes_No);
PARAMETER(WRK.Kill_Date_1_Usr);
PARAMETER(WRK.Kill_Date_2_USR);
PARAMETER(WRK.Freight_Amount_Usr);
{
 //?USER: Initialize routine

 // PAR.@Status (Yes/No) = CND.No
 PAR.@Status_Yes_No = 'N';

 // PAR.Kill Date 1 Usr = CON.*ZERO
 PAR.Kill_Date_1_Usr = *ZERO;

 // PAR.Kill Date 2 USR = CON.*ZERO
 PAR.Kill_Date_2_USR = *ZERO;

 // PAR.Freight Amount Usr = CON.*ZERO
 PAR.Freight_Amount_Usr = *ZERO;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.TH Held Over Record is Yes
 IF DB1.TH_Held_Over_Record = 'Y';

 // PAR.Kill Date 2 USR = DB1.TH Kill Date
 PAR.Kill_Date_2_USR = DB1.TH_Kill_Date;

 // PAR.@Status (Yes/No) = CND.Yes
 PAR.@Status_Yes_No = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Kill Date 1 Usr = DB1.TH Kill Date
 PAR.Kill_Date_1_Usr = DB1.TH_Kill_Date;

 ENDIF;

 // PAR.Freight Amount Usr = PAR.Freight Amount Usr + DB1.TH Freight Amount
 PAR.Freight_Amount_Usr = PAR.Freight_Amount_Usr + DB1.TH_Freight_Amount;

}


CASE;

// IF WRK.@Status (Yes/No) is Yes
IF WRK.@Status_Yes_No = 'Y';

// Retrieve message - 'This Tattoo was Held Over from &1 to &2'
DTL.Message_Special_Usr = RTVMSG(PRK0725);
PARAMETER(WRK.Kill_Date_1_Usr);
PARAMETER(WRK.Kill_Date_2_USR);

ENDIF;

//?If new Tattoo Repayment process is In Progress
CASE;

// IF LCL.Repayment in Progress Y/N is Yes
IF LCL.Repayment_in_Progress_Y_N = 'Y';

// WRK.@Status Internal (Y/N) = CND.Yes
WRK.@Status_Internal_Y_N = 'Y';

// DTL.Print Scale Tkt       USR = CND.No
DTL.Print_Scale_Tkt_USR = 'N';

// DTL.Message Special Usr 2 = CONCAT(CON.Transfer Selected for Rep,CON.ayment,CND.*None)
DTL.Message_Special_Usr_2 = 'Transfer Selected for Rep' + 'ayment' (*ZERO);

//?If new Tattoo Repayment process is In Progress
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chk Exists            RT) TYPE(RTVOBJ) FILE(PKDOREP)           AB1347884;
PARAMETER('REPAY');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(PGM.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.*Return code = CND.*Record already exists
 PAR.*Return_code = 'Y2U0003';

}


//?If Tattoo Header Job Sel record exists, display Repayment text
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// DTL.Message Special Usr 2 = CONCAT(CON.Transfer Selected for Rep,CON.ayment,CND.*None)
DTL.Message_Special_Usr_2 = 'Transfer Selected for Rep' + 'ayment' (*ZERO);

ENDIF;

ENDIF;

//?USER: Validate fields

//?Select record
CASE;

// IF PGM.*Cursor field <IS> DTL.Buy Order New Usr
IF PGM.*Cursor_field = DTL.Buy_Order_New_Usr;

// AND DTL.*CMD key is CF04
AND DTL.*CMD_key = '04';

// Call program Sel Buy Order Load    SR.
CALL PROGRAM(Sel Buy Order Load    SR) ('PKJBSRR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Buy_Order_New_Usr);
PARAMETER(DTL.Buy_Order_Load_New_Usr);
PARAMETER(DTL.Kill_Date_Usr);

//?Select record
// IF PGM.*Cursor field <IS> DTL.Buy Order Load New Usr
IF PGM.*Cursor_field = DTL.Buy_Order_Load_New_Usr;

// AND DTL.*CMD key is CF04
AND DTL.*CMD_key = '04';

// Call program Sel Buy Order Load    SR.
CALL PROGRAM(Sel Buy Order Load    SR) ('PKJBSRR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Buy_Order_New_Usr);
PARAMETER(DTL.Buy_Order_Load_New_Usr);
PARAMETER(DTL.Kill_Date_Usr);

ENDIF;

//?If the buy order is changing check if frt if frt error
CASE;

// IF DTL.BOH Buy Order Number NE DTL.Buy Order New Usr
IF DTL.BOH_Buy_Order_Number <> DTL.Buy_Order_New_Usr;

// OR DTL.BOL Load Number NE DTL.Buy Order Load New Usr
OR DTL.BOL_Load_Number <> DTL.Buy_Order_Load_New_Usr;

CASE;

// IF WRK.Freight Amount Usr NE WRK.Zero USR
IF WRK.Freight_Amount_Usr <> WRK.Zero_USR;

EXECUTE FUNCTION(RTV Payment Prc        RT) TYPE(RTVOBJ) FILE(PKC4REP)          AB1146809;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.Pmt_Current_Payment_Date);
PARAMETER(LCL.Pmt_Current_Payment_Step);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Allow Transfer if paym date is kill date & paym step is 1. PK0254
CASE;

// IF LCL.Pmt Current Payment Date EQ DTL.TH Kill Date
IF LCL.Pmt_Current_Payment_Date = DTL.TH_Kill_Date;

// AND LCL.Pmt Current Payment Step is Less or Equal to Step 1
AND LCL.Pmt_Current_Payment_Step <= 00001;

//?Allow Transfer if paym date is kill date & paym step is 1. PK0254
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid selection. Freight has been allocated.'
ERROR(PRK0390);

QUIT;

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Buy Order Dtl&Inf RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1292327;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Buy_Order_New_Usr);
PARAMETER(DTL.Buy_Order_Load_New_Usr);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Location_Code_New);
PARAMETER(PGM.*Return_code);
{
 //?USER: Processing if Data record not found

 // PAR.*Return code = CND.*Normal
 PAR.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.*Return code = CND.Record Found
 PAR.*Return_code = 999;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is Record Found
IF PGM.*Return_code = '999';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Buy Order Load not found.'
ERROR(PRK0051);

ENDIF;

EXECUTE FUNCTION(Rtv Movement NumberNF RT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1292759;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Buy_Order_New_Usr);
PARAMETER(DTL.Buy_Order_Load_New_Usr);
PARAMETER(DTL.Movement_number_new_usr);
PARAMETER(PGM.*Return_code);
{
 //?USER: Initialize routine

 // PAR.*Return code = CND.*Normal
 PAR.*Return_code = *BLANK;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.*Return code = CND.*Record does not exist
 PAR.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Movement# Compared = CND.Yes
WRK.Movement#_Compared = 'Y';

// DTL.Text 1 41 Usr = CON.*BLANK
DTL.Text_1_41_Usr = *BLANK;

// DTL.Text 2 41 Usr = CON.*BLANK
DTL.Text_2_41_Usr = *BLANK;

CASE;

// IF DTL.Movement number new usr EQ DTL.TH HPS Movement Ref #
IF DTL.Movement_number_new_usr = DTL.TH_HPS_Movement_Ref_#;

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Movement# Compared = CND.No
WRK.Movement#_Compared = 'N';

// DTL.Text 1 41 Usr = CON.Movement# change,
DTL.Text_1_41_Usr = 'Movement# change,';

// DTL.Text 1 41 Usr = CONCAT(DTL.Text 1 41 Usr,CON.Review Tattoo,CON.1)
DTL.Text_1_41_Usr = DTL.Text_1_41_Usr + 'Review Tattoo' (1);

// DTL.Text 2 41 Usr = CON.Using
DTL.Text_2_41_Usr = 'Using';

// DTL.Text 2 41 Usr = CONCAT(DTL.Text 2 41 Usr,CON.Edit TattooHdr/Defect,CON.1)
DTL.Text_2_41_Usr = DTL.Text_2_41_Usr + 'Edit TattooHdr/Defect' (1);

ENDIF;

//?Make sure the New info isnt the same as the original info
CASE;

// IF DTL.BOH Buy Order Number EQ DTL.Buy Order New Usr
IF DTL.BOH_Buy_Order_Number = DTL.Buy_Order_New_Usr;

// AND DTL.BOL Load Number EQ DTL.Buy Order Load New Usr
AND DTL.BOL_Load_Number = DTL.Buy_Order_Load_New_Usr;

// AND DTL.TH Tattoo Number EQ DTL.Tattoo Number New User
AND DTL.TH_Tattoo_Number = DTL.Tattoo_Number_New_User;

// AND DTL.TH Kill Date EQ DTL.Kill Date Usr
AND DTL.TH_Kill_Date = DTL.Kill_Date_Usr;

// Send error message - 'Cannot transfer to same buy order, load, kill dt, and tattoo.'
ERROR(PRK0919);
MSGPARM(DTL.Buy_Order_New_Usr);
MSGPARM(DTL.Buy_Order_Load_New_Usr);
MSGPARM(DTL.Kill_Date_Usr);
MSGPARM(DTL.Tattoo_Number_New_User);

QUIT;

ENDIF;

EXECUTE FUNCTION(Rtv PL Vnd Nbr, state RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1207995;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Location_Code_New);
PARAMETER(NLL.PL_Name);
PARAMETER(NLL.Pl_VND_Address_Number);
PARAMETER(LCL.PL_State_Code);
PARAMETER(LCL.PL_Site_ID_Required);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Producer Subsidiary SUSR = CND.No Producer Subsidiary
WRK.Producer_Subsidiary_SUSR = 'N';

// WRK.Allow Change Usr Y/N Site = CND.No
WRK.Allow_Change_Usr_Y_N_Site = 'N';

// WRK.Allow Change Usr Y/N Subs = CND.No
WRK.Allow_Change_Usr_Y_N_Subs = 'N';

// WRK.Allow Change Usr Y/N ST = CND.No
WRK.Allow_Change_Usr_Y_N_ST = 'N';

CASE;

// IF PAR.TH Hog Class Type is Resale
IF PAR.TH_Hog_Class_Type = 'R';

// WRK.Allow Change Usr Y/N ST = CND.Yes
WRK.Allow_Change_Usr_Y_N_ST = 'Y';

ENDIF;

//?Change in producer or location
CASE;

// IF DTL.PD Producer Code NE DTL.Producer Code New
IF DTL.PD_Producer_Code <> DTL.Producer_Code_New;

// DTL.Th State code New = LCL.PL State Code
DTL.Th_State_code_New = LCL.PL_State_Code;

//?Site is required or not if not then blank out the site
CASE;

// IF PAR.TH Hog Class Type is Not Resale
IF PAR.TH_Hog_Class_Type = 'M'/'S';

CASE;

// IF LCL.PL Site ID Required is Yes
IF LCL.PL_Site_ID_Required = 'Y';

// WRK.Allow Change Usr Y/N Site = CND.Yes
WRK.Allow_Change_Usr_Y_N_Site = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Site Id New = CON.*BLANK
DTL.Site_Id_New = *BLANK;

// WRK.Allow Change Usr Y/N Site = CND.No
WRK.Allow_Change_Usr_Y_N_Site = 'N';

ENDIF;

//?Site is required or not if not then blank out the site
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Site Id New = CON.*BLANK
DTL.Site_Id_New = *BLANK;

// WRK.Allow Change Usr Y/N Site = CND.No
WRK.Allow_Change_Usr_Y_N_Site = 'N';

ENDIF;

//?Subsidiary is required or not - if not  blank out subsidiary
DO;

CASE;

// IF PAR.TH Hog Class Type is Not Resale
IF PAR.TH_Hog_Class_Type = 'M'/'S';

EXECUTE FUNCTION(Rtv ProdSubsidiaryPrc RT) TYPE(RTVOBJ) FILE(PLA8REP)           AB1291791;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(WRK.Producer_Subsidiary_SUSR);
{
 //?USER: Initialize routine

 //?RMC R9771  3/24/17 check for active only
 // PAR.Producer Subsidiary SUSR = CND.No Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'N';

 //?USER: Processing if Data record not found

 // PAR.Producer Subsidiary SUSR = CND.No Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.Producer Subsidiary SUSR = CND.Allow Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Producer Subsidiary SUSR is Allow Producer Subsidiary
IF WRK.Producer_Subsidiary_SUSR = 'Y';

// WRK.Allow Change Usr Y/N Subs = CND.Yes
WRK.Allow_Change_Usr_Y_N_Subs = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Prod Subsidiary New Usr = CON.*BLANK
DTL.Prod_Subsidiary_New_Usr = *BLANK;

// WRK.Allow Change Usr Y/N Subs = CND.No
WRK.Allow_Change_Usr_Y_N_Subs = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Prod Subsidiary New Usr = CON.*BLANK
DTL.Prod_Subsidiary_New_Usr = *BLANK;

// WRK.Allow Change Usr Y/N Subs = CND.No
WRK.Allow_Change_Usr_Y_N_Subs = 'N';

ENDIF;

ENDDO;

// WRK.Allow Change Usr Y/N ST = CND.Yes
WRK.Allow_Change_Usr_Y_N_ST = 'Y';

//?Change in producer or location
// IF DTL.PL Location Code NE DTL.Location Code New
IF DTL.PL_Location_Code <> DTL.Location_Code_New;

// DTL.Th State code New = LCL.PL State Code
DTL.Th_State_code_New = LCL.PL_State_Code;

//?Site is required or not if not then blank out the site
CASE;

// IF PAR.TH Hog Class Type is Not Resale
IF PAR.TH_Hog_Class_Type = 'M'/'S';

CASE;

// IF LCL.PL Site ID Required is Yes
IF LCL.PL_Site_ID_Required = 'Y';

// WRK.Allow Change Usr Y/N Site = CND.Yes
WRK.Allow_Change_Usr_Y_N_Site = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Site Id New = CON.*BLANK
DTL.Site_Id_New = *BLANK;

// WRK.Allow Change Usr Y/N Site = CND.No
WRK.Allow_Change_Usr_Y_N_Site = 'N';

ENDIF;

//?Site is required or not if not then blank out the site
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Site Id New = CON.*BLANK
DTL.Site_Id_New = *BLANK;

// WRK.Allow Change Usr Y/N Site = CND.No
WRK.Allow_Change_Usr_Y_N_Site = 'N';

ENDIF;

// WRK.Allow Change Usr Y/N ST = CND.Yes
WRK.Allow_Change_Usr_Y_N_ST = 'Y';

ENDIF;

CASE;

// IF LCL.PL Site ID Required is Yes
IF LCL.PL_Site_ID_Required = 'Y';

// AND DTL.TH Hog Class Type is Not Resale
AND DTL.TH_Hog_Class_Type = 'M'/'S';

//?Validate New Site Id for new producer
DO;

//?** F4 = Select Producer Site ID to get mileage and or state code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Site Id New
AND PGM.*Cursor_field = DTL.Site_Id_New;

// Call program Sel Prod Site Mileage SR.
CALL PROGRAM(Sel Prod Site Mileage SR) ('PLFQSRR');
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Site_Id_New);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(LCL.PSM_Miles_to_Company);

EXECUTE FUNCTION(Rtv Site State ActOnlyRT) TYPE(RTVOBJ) FILE(PLATREP)           AB1273369;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Site_Id_New);
PARAMETER(DTL.Th_State_code_New);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: CON);

 ENDIF;

}


ENDIF;

//?Not a Contract, No Rsl Hogs, then Site Id is req, pull th state
CASE;

// IF PAR.TH Hog Class Type is Not Resale
IF PAR.TH_Hog_Class_Type = 'M'/'S';

//?Site ID will not be required on Resale Hogs
//?** Error if Site ID is blank
CASE;

// IF DTL.Site Id New is *Blank
IF DTL.Site_Id_New = *BLANK;

// Send error message - 'Producer Site ID Required'
ERROR(PRK1140);
MSGPARM(DTL.Site_Id_New);

ENDIF;

EXECUTE FUNCTION(Rtv PrdSiteMil CoMilStRT) TYPE(RTVOBJ) FILE(PLASREP)           AB1273532;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Site_Id_New);
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(LCL.PSM_Miles_to_Company);
PARAMETER(DTL.Th_State_code_New);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Site State ActOnlyRT) TYPE(RTVOBJ) FILE(PLATREP)           AB1273369;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PS_Site_ID);
 PARAMETER(PAR.PS_State);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  MOVE *ALL (To: PAR From: DB1);

  // IF *OTHERWISE
  IF *OTHERWISE;

  MOVE *ALL (To: PAR From: CON);

  ENDIF;

 }

 MOVE *ALL (To: PAR From: DB1);

}


//?** Error if no matching record in Producer Site Mileage
CASE;

// IF LCL.PSM Miles to Company is No Miles
IF LCL.PSM_Miles_to_Company = *ZERO;

// Send error message - 'Producer Site/Mileage NF'
ERROR(PRK1153);
MSGPARM(DTL.Site_Id_New);

//?** Error if no matching record in Producer Site Mileage
// IF DTL.Th State code New EQ WRK.Blank USR
IF DTL.Th_State_code_New = WRK.Blank_USR;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.Th_State_code_New);

ENDIF;

ENDIF;

ENDDO;

// IF LCL.PL Site ID Required is No
IF LCL.PL_Site_ID_Required = 'N';

// AND DTL.TH Hog Class Type is Not Resale
AND DTL.TH_Hog_Class_Type = 'M'/'S';

// WRK.Allow Change Usr Y/N ST = CND.Yes
WRK.Allow_Change_Usr_Y_N_ST = 'Y';

ENDIF;

EXECUTE FUNCTION(Rtv ProdSubsidiaryPrc RT) TYPE(RTVOBJ) FILE(PLA8REP)           AB1291791;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(WRK.Producer_Subsidiary_SUSR);
{
 //?USER: Initialize routine

 //?RMC R9771  3/24/17 check for active only
 // PAR.Producer Subsidiary SUSR = CND.No Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'N';

 //?USER: Processing if Data record not found

 // PAR.Producer Subsidiary SUSR = CND.No Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PAR.Producer Subsidiary SUSR = CND.Allow Producer Subsidiary
 PAR.Producer_Subsidiary_SUSR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF WRK.Producer Subsidiary SUSR is Allow Producer Subsidiary
IF WRK.Producer_Subsidiary_SUSR = 'Y';

// AND PAR.TH Hog Class Type is Not Resale
AND PAR.TH_Hog_Class_Type = 'M'/'S';

//?Select on Producer Subsidiary
CASE;

// IF WRK.Producer Subsidiary SUSR is Allow Producer Subsidiary
IF WRK.Producer_Subsidiary_SUSR = 'Y';

//?** F4 = Select Producer subsidiary
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Prod Subsidiary New Usr
AND PGM.*Cursor_field = DTL.Prod_Subsidiary_New_Usr;

// Call program Zzz ProdSubsidiary    SR.
CALL PROGRAM(Zzz ProdSubsidiary    SR) ('PLM2SRR');
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Prod_Subsidiary_New_Usr);

ENDIF;

ENDIF;

//?Validation on Producer subsidiary
CASE;

// IF DTL.Prod Subsidiary New Usr is Blank
IF DTL.Prod_Subsidiary_New_Usr = *BLANK;

// AND WRK.Producer Subsidiary SUSR is Allow Producer Subsidiary
AND WRK.Producer_Subsidiary_SUSR = 'Y';

// Send error message - 'Producer Subsidiary is required'
ERROR(PRK1215);
MSGPARM(DTL.Prod_Subsidiary_New_Usr);

//?Validation on Producer subsidiary
// IF DTL.Prod Subsidiary New Usr is Entered
IF DTL.Prod_Subsidiary_New_Usr <> *BLANK;

// AND WRK.Producer Subsidiary SUSR is Allow Producer Subsidiary
AND WRK.Producer_Subsidiary_SUSR = 'Y';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Val ProdSubsidiary    RT) TYPE(RTVOBJ) FILE(PLA8REP)           AB1291790;
PARAMETER(DTL.Producer_Code_New);
PARAMETER(DTL.Prod_Subsidiary_New_Usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.RS Record Status is Active
 IF DB1.RS_Record_Status = 'A';

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Producer Subsidiary NotFn'
ERROR(PRK1216);
MSGPARM(DTL.Prod_Subsidiary_New_Usr);

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Prod Subsidiary New Usr = CON.*BLANK
DTL.Prod_Subsidiary_New_Usr = *BLANK;

// WRK.Allow Change Usr Y/N Subs = CND.No
WRK.Allow_Change_Usr_Y_N_Subs = 'N';

ENDIF;

//?** Validate state code
CASE;

// IF DTL.Th State code New EQ WRK.Blank USR
IF DTL.Th_State_code_New = WRK.Blank_USR;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.Th_State_code_New);

//?** Validate state code
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv State Description UP.
CALL PROGRAM(Rtv State Description UP) ('STATERET');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(DTL.Th_State_code_New);
PARAMETER(NLL.State_Desc_30_USR);

//?Invalid state code send message
CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

//?Invalid state code send message
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'State Code is Invalid'
ERROR(PRK0308);
MSGPARM(DTL.Th_State_code_New);

ENDIF;

ENDIF;

//?Send a warning message instead of an error message.
//?Added 9/22/99 -Purva
//?12/21/99 Send a HARD ERRMSG instead of a warning message.
EXECUTE FUNCTION(Val Tto/KlDt Exst Wrn RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1223951;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Tattoo_Number_New_User);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(DTL.TH_Source_Type);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Kill_Date);
{
 //?USER: Process Data record

 //?New 12/21/99
 CASE;

 // IF DB1.TH Source Type is Internal
 IF DB1.TH_Source_Type = 'I';

 // AND PAR.TH Source Type is Internal
 AND PAR.TH_Source_Type = 'I';

 // AND PAR.TH Tattoo Number is Pre Number Tattoos
 AND PAR.TH_Tattoo_Number >= 9000;
 AND PAR.TH_Tattoo_Number <= 9999;

 // Send information message - 'Tattoo &1 already exists for kill date.'
 MESSAGE(PRK0232 *INFO);
 MSGPARM(PAR.TH_Tattoo_Number);

 //?New 12/21/99
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Tattoo Header already exists.'
 ERROR(PRK0062);

 ENDIF;

}


EXECUTE FUNCTION(Val Tattoo Existance  RT) TYPE(RTVOBJ) FILE(PKFJCPP)           AB1243996;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(DTL.Tattoo_Number_New_User);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Tattoo Pending already exists.'
ERROR(PRK1013);

ENDIF;

//?If a repayment, validate the repayment status
CASE;

// IF LCL.Repayment in Progress Y/N is Yes
IF LCL.Repayment_in_Progress_Y_N = 'Y';

//?Check Repayment Detail status if valid for transfer
CASE;

// IF LCL.TRD Repayment Status is Valid for Transfer
IF LCL.TRD_Repayment_Status = 'E'/'P'/'Q'/'X'/'I'/'U'/'D';

//?Check Repayment Detail status if valid for transfer
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Repayment Tattoo is not in a valid status to be transfered.'
ERROR(PRK1608);

ENDIF;

ENDIF;

//?CALC: Screen function fields

// DTL.Text 10 1 USR = Condition name of DTL.Print Scale Tkt       USR
DTL.Text_10_1_USR = RTVCND(DTL.Print_Scale_Tkt_USR);

//?USER: User defined action

//?9/26/2008 Pass in the Site & Subsidiary if they need to change
//?then transfer site id and transfer subsidiary = Y will then
//?direct the next function to change the site id or the subsidary
//?Pass in the status fields and the site id new, and subsidiary new
// LCL.Transfer Site Id Usr = CND.No
LCL.Transfer_Site_Id_Usr = 'N';

// LCL.Transfer Subsidiary Usr = CND.No
LCL.Transfer_Subsidiary_Usr = 'N';

// LCL.Transfer State User = CND.No
LCL.Transfer_State_User = 'N';

CASE;

// IF DTL.PS Site ID NE DTL.Site Id New
IF DTL.PS_Site_ID <> DTL.Site_Id_New;

// LCL.Transfer Site Id Usr = CND.Yes
LCL.Transfer_Site_Id_Usr = 'Y';

ENDIF;

CASE;

// IF DTL.Producer Subsidiary Code NE DTL.Prod Subsidiary New Usr
IF DTL.Producer_Subsidiary_Code <> DTL.Prod_Subsidiary_New_Usr;

// LCL.Transfer Subsidiary Usr = CND.Yes
LCL.Transfer_Subsidiary_Usr = 'Y';

ENDIF;

CASE;

// IF DTL.TH State NE DTL.Th State code New
IF DTL.TH_State <> DTL.Th_State_code_New;

// LCL.Transfer State User = CND.Yes
LCL.Transfer_State_User = 'Y';

ENDIF;

CASE;

// IF WRK.@Status (Yes/No) is Yes
IF WRK.@Status_Yes_No = 'Y';

//?Held over process the first and then the second kill date
//? Kill date 1   *note: heldover cant be transferred to a diff kill dt.
// Call program Exc TrnsfrTtt-AllFiles XF.
CALL PROGRAM(Exc TrnsfrTtt-AllFiles XF) ('PKVFXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(WRK.Kill_Date_1_Usr);
PARAMETER(DTL.Tattoo_Number_New_User);
PARAMETER(DTL.Print_Scale_Tkt_USR);
PARAMETER(DTL.Buy_Order_New_Usr);
PARAMETER(DTL.Buy_Order_Load_New_Usr);
PARAMETER(WRK.Kill_Date_1_Usr);
PARAMETER(DTL.Status_1);
PARAMETER(DTL.Site_Id_New);
PARAMETER(LCL.Transfer_Site_Id_Usr);
PARAMETER(DTL.Prod_Subsidiary_New_Usr);
PARAMETER(LCL.Transfer_Subsidiary_Usr);
PARAMETER(DTL.Th_State_code_New);
PARAMETER(LCL.Transfer_State_User);
PARAMETER(WRK.Process_EditTattooHdr_USR);

//? Kill date 2
// Call program Exc TrnsfrTtt-AllFiles XF.
CALL PROGRAM(Exc TrnsfrTtt-AllFiles XF) ('PKVFXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(WRK.Kill_Date_2_USR);
PARAMETER(DTL.Tattoo_Number_New_User);
PARAMETER(DTL.Print_Scale_Tkt_USR);
PARAMETER(DTL.Buy_Order_New_Usr);
PARAMETER(DTL.Buy_Order_Load_New_Usr);
PARAMETER(WRK.Kill_Date_2_USR);
PARAMETER(DTL.Status_1);
PARAMETER(DTL.Site_Id_New);
PARAMETER(LCL.Transfer_Site_Id_Usr);
PARAMETER(DTL.Prod_Subsidiary_New_Usr);
PARAMETER(LCL.Transfer_Subsidiary_Usr);
PARAMETER(DTL.Th_State_code_New);
PARAMETER(LCL.Transfer_State_User);
PARAMETER(WRK.Process_EditTattooHdr_USR);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Exc TrnsfrTtt-AllFiles XF.
CALL PROGRAM(Exc TrnsfrTtt-AllFiles XF) ('PKVFXFR');
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.Tattoo_Number_New_User);
PARAMETER(DTL.Print_Scale_Tkt_USR);
PARAMETER(DTL.Buy_Order_New_Usr);
PARAMETER(DTL.Buy_Order_Load_New_Usr);
PARAMETER(DTL.Kill_Date_Usr);
PARAMETER(DTL.Status_1);
PARAMETER(DTL.Site_Id_New);
PARAMETER(LCL.Transfer_Site_Id_Usr);
PARAMETER(DTL.Prod_Subsidiary_New_Usr);
PARAMETER(LCL.Transfer_Subsidiary_Usr);
PARAMETER(DTL.Th_State_code_New);
PARAMETER(LCL.Transfer_State_User);
PARAMETER(WRK.Process_EditTattooHdr_USR);

ENDIF;

RETURN;

