/********************************************************************/
/*                                                                  */
/* Program . . : PWBNUPC                                            */
/* Date  . . . : 4/25/17                                            */
/* Programmer  : Brad Baden                                         */
/* Project . . : E9044                                              */
/* Description : Push Company and Producer to TF2 Environment.      */
/*               This driver program uses the incoming From         */
/*               Company and To Company to push Triumph Owned       */
/*               records from one Company to another Company.       */
/*               Overrides on the files for the To Company are      */
/*               over the update indexes.  So the called program    */
/*               reads records from a file in the from library,     */
/*               and creates or updates records in another          */
/*               library.  Company Values record for HPETOPUSHL     */
/*               to determine the override library.                 */
/*               A report is run prior to the push of the data to   */
/*               verify the Ref 1 and Ref 2 fields on the           */
/*               associated Buy Order Load Reference file are a     */
/*               valid Producer Code and Producer Location Code.    */
/*                                                                  */
/*               This CL program is called in an execute message    */
/*               from the Payment Post and from program PWEGPVR.    */
/*                                                                  */
/********************************************************************/
/* Modification History                                             */
/*                                                                  */
/*  6/09/2017 JBB E9904 - Push Seaboard Triumph Payments to Triumph */
/*                        Added a report to print what was pushed.  */
/*                                                                  */
/*  6/13/2017 JBB E9904 - Push Seaboard Triumph Payments to Triumph */
/*                        Added new overrides to files that will be */
/*                        used to populate values for Triumph Foods */
/*                        files.                                    */
/*                                                                  */
/*  7/06/2017 JBB E9904 - Push Seaboard Triumph Payments to Triumph */
/*                        No longer push Tattoo Ded/Add records.    */
/*                        Changed the override for file PKCDCPP     */
/*                        to point to the To Library so that        */
/*                        Tattoo Ded/Add records in the To Library  */
/*                        can be deleted.                           */
/*                                                                  */
/*  7/12/2017 JBB E9904 - Push Seaboard Triumph Payments to Triumph */
/*                        Added a Kill Date parameter to this       */
/*                        program.  It is a temporary addition for  */
/*                        testing only.  After testing, it will be  */
/*                        removed.                                  */
/*                                                                  */
/*  7/13/2017 JBB E9904 - Push Seaboard Triumph Payments to Triumph */
/*                        Added the Tattoo Header EXT file to the   */
/*                        push process for the Site ID.             */
/*                                                                  */
/*  7/27/2017 JBB E9904 - Added code to send emails using the ESEND */
/*                        command.  Emails will be sent when the    */
/*                        process starts, and when the process      */
/*                        ends.  The ending email will state        */
/*                        whether no records were pushed, if the    */
/*                        process ends with errors and no push, or  */
/*                        if the process ends with a successful     */
/*                        push.                                     */
/*                                                                  */
/*  8/14/2017 JBB E9904 - Push Seaboard Triumph Payments to Triumph */
/*                        Fixed input parameter types to all be     */
/*                        character values so that it can be called */
/*                        using an executable message in the prompt */
/*                        screen.                                   */
/*                                                                  */
/*  9/06/2017 JBB E9904 - Push Seaboard Triumph Payments to Triumph */
/*                        Remove Kill Date parameter.               */
/*                                                                  */
/*                        different distribution list that includes */
/*  9/15/2017 JBB E9904 - Push Seaboard Triumph Payments to Triumph */
/*                        Send reports PWC0PFR and PWBRPFR to       */
/*                        distribution list persons.                */
/*                                                                  */
/*  1/26/2018 JBB E11951- Create Development Distribution List      */
/*                        Add development distribution list so as   */
/*                        to not send emails to production users    */
/*                        during testing. Also add "TEST" to email  */
/*                        messages when the user is a developer.    */
/*                                                                  */
/*  1/26/2018 JBB E13291- Add overrides to the Carcass Detail file  */
/*                        to the To Library so that all records     */
/*                        associated to the Hog Voucher Detail      */
/*                        record being processed are deleted.       */
/*                                                                  */
/*  7/06/2018 JBB E13291- Add new parameter &PSHTYP.  This will     */
/*                        control distribution lists for automatic  */
/*                        and manual repayments.  When the Push to  */
/*                        Pay is manual, the email from will be     */
/*                        the user running the manual Push to Pay.  */
/*                        Also, when the Push Type is manual, a     */
/*                        different distribution list that includes */
/*                        Jerry, Brad K, Susan, Julius, and Brad B  */
/*                        will be used for emails being sent out.   */
/*                                                                  */
/*  7/06/2018 JBB E13494- Fixed missing '&' from variable names.    */
/*                                                                  */
/* 11/05/2020 ISE H16853- Recompiled due to change in Buy Order     */
/*                        Number.                                   */
/********************************************************************/
             PGM        PARM(&PDEV &HOLD &SAVE &XCOPIES &XCOMP &APP +
                          &PSHTYP)

/* PRINT OPTION PARMS                                             */
             DCL        VAR(&PDEV)      TYPE(*CHAR) LEN(10)
             DCL        VAR(&HOLD)      TYPE(*CHAR) LEN(4)
             DCL        VAR(&SAVE)      TYPE(*CHAR) LEN(4)
             DCL        VAR(&XCOPIES)   TYPE(*CHAR) LEN(15)

/* FUNCTION SPECIFIC PARMS                                        */
             DCL        VAR(&PSHTYP)    TYPE(*CHAR) LEN(1)
             DCL        VAR(&XCOMP)     TYPE(*CHAR) LEN(15)
             DCL        VAR(&USER)      TYPE(*CHAR) LEN(10)
             DCL        VAR(&APP)       TYPE(*CHAR) LEN(33)
             DCL        VAR(&LPP)       TYPE(*CHAR) LEN(40)

/* NUMERIC VARIABLES                                             */
             DCL        VAR(&COPIES)    TYPE(*DEC)  LEN(2 0)
             DCL        VAR(&FROMCOMP)  TYPE(*DEC)  LEN(3 0)
             DCL        VAR(&TOCOMP)    TYPE(*DEC)  LEN(3 0)
             DCL        VAR(&DISTCOMP)  TYPE(*DEC) LEN(3 0)

             DCL        VAR(&FROMLIB)   TYPE(*CHAR) LEN(10)
             DCL        VAR(&TOLIB)     TYPE(*CHAR) LEN(10)
             DCL        VAR(&RETURN)    TYPE(*CHAR) LEN(7)
             DCL        VAR(&CONTINUE)  TYPE(*CHAR) LEN(1)
             DCL        VAR(&ERRORS)    TYPE(*DEC)  LEN(5 0)
             DCL        VAR(&WRKNBR)    TYPE(*DEC)  LEN(15 5)
             DCL        VAR(&FROMCOMPA) TYPE(*CHAR) LEN(3)
             DCL        VAR(&TOCOMPA)   TYPE(*CHAR) LEN(3)
             DCL        VAR(&GRPPRFL)   TYPE(*CHAR) LEN(10)
             DCL        VAR(&COMPVALU)  TYPE(*CHAR) LEN(10)
             DCL        VAR(&DISTLIST)  TYPE(*CHAR) LEN(40)
             DCL        VAR(&SUBJECT)   TYPE(*CHAR) LEN(80)
             DCL        VAR(&DISTMSG)   TYPE(*CHAR) LEN(140)
             DCL        VAR(&QDATEA)    TYPE(*CHAR) LEN(6)
             DCL        VAR(&DATEA)     TYPE(*CHAR) LEN(8)
             DCL        VAR(&TIMEA)     TYPE(*CHAR) LEN(8)
             DCL        VAR(&USERFROM)  TYPE(*CHAR) LEN(10)

             /* SBDPRTOVR VARIABLE */
             DCL        VAR(&CMD)       TYPE(*CHAR) LEN(512)

             /* Global Monitor Message */
             MONMSG     MSGID(CPF0000) EXEC(GOTO CMDLBL(ERROR))

        /*   RTVJOBA    USER(&USER)                          */
             CHGJOB     LOG(4 99 *SECLVL) LOGCLPGM(*YES)

/* CHANGE ALPHA PARMS TO NUMERIC VARIABLES                       */
             CHGVAR     VAR(&LPP) VALUE(&APP)
             CHGVAR     VAR(&FROMCOMP) VALUE(&XCOMP)
             CHGVAR     VAR(&COPIES) VALUE(&XCOPIES)

/*********************************************************************/
/*  Retrieve the user's Group Profile.  Determine the email          */
/*  distribution list based on the Group Profile.  If the Group      */
/*  Profile is SBDPGMR, then send emails to the development group,   */
/*  otherwise the emails are sent to development and production      */
/*  users.  Emails sent to the Development Distribution list will    */
/*  have "TEST:" in the subject and the message areas of the email.  */
/*********************************************************************/

             RTVUSRPRF  GRPPRF(&GRPPRFL)
             SELECT
               WHEN       COND(&GRPPRFL = 'SBDPGMR ') THEN(CHGVAR +
                            VAR(&COMPVALU) VALUE('HPEPUSHDEV'))
               WHEN       COND(&PSHTYP = 'M') THEN(CHGVAR +
                            VAR(&COMPVALU) VALUE('HPEPUSHMNL'))

               WHEN       COND(&PSHTYP = 'A') THEN(CHGVAR +
                            VAR(&COMPVALU) VALUE('HPEPUSHCMP'))
             ENDSELECT

/*********************************************************************/
/* Get Email distribution list.  Make the Distribution List Company  */
/* the same as the From Company.  If the From Company = 000, make it */
/* 440 to retrieve the Distribution List from the Company Values     */
/* file.                                                             */
/*********************************************************************/
             CHGVAR     VAR(&DISTCOMP) VALUE(&FROMCOMP)

             IF         COND(&DISTCOMP = 0) THEN(CHGVAR +
                          VAR(&DISTCOMP) VALUE(440))

             CALL       PGM(PDGKXFR) PARM(&RETURN &DISTCOMP +
                          &COMPVALU  &DISTLIST)
             IF         COND(&DISTLIST *EQ ' ') THEN(CHGVAR +
                          VAR(&DISTLIST) VALUE('hpe_pymt_push_manual'))

             /* Get default sending user name */
             SELECT
               WHEN     COND(&PSHTYP = 'M' *OR &GRPPRFL = 'SBDPGMR +
                          ') THEN(CHGVAR VAR(&USERFROM) +
                          VALUE('*CURRENT '))
               WHEN     COND(&PSHTYP = 'A') THEN(CALL PGM(PDGKXFR) +
                          PARM(&RETURN &DISTCOMP 'PAYPSHFROM' +
                          &USERFROM))
             ENDSELECT

/*********************************************************************/
/* Get date and time for Push Process start emails                   */
/*********************************************************************/
             CALLSUBR   SUBR(DATE_TIME)

 FROMCOMP:   CHGVAR     VAR(&FROMCOMPA) VALUE(&FROMCOMP)
/*********************************************************************/
/* If FROMCOMP = 0, send error email and exit                        */
/*********************************************************************/
 FROMERROR:  IF         COND(&FROMCOMP = 0) THEN(DO)

             SELECT
             WHEN       COND(&GRPPRFL = 'SBDPGMR ') THEN(DO)
             CHGVAR     VAR(&SUBJECT) VALUE('TEST: Payment Push from +
                          company xxx error.')
             CHGVAR     VAR(%SST(&SUBJECT 33 3)) VALUE(&FROMCOMPA)

             CHGVAR     VAR(&DISTMSG) VALUE('TEST: The From Company +
                          for the Payment Push that started on +
                          xx/xx/xx at xx:xx:xx is 000 or not setup +
                          to perform a payment push.')
             CHGVAR     VAR(%SST(&DISTMSG 61 8)) VALUE(&DATEA)
             CHGVAR     VAR(%SST(&DISTMSG 73 8)) VALUE(&TIMEA)
             ENDDO

             OTHERWISE  CMD(DO)
             CHGVAR     VAR(&SUBJECT) VALUE('Payment Push from +
                          company xxx error.')
             CHGVAR     VAR(%SST(&SUBJECT 27 3)) VALUE(&FROMCOMPA)

             CHGVAR     VAR(&DISTMSG) VALUE('The From Company for the +
                          Payment Push that started on xx/xx/xx at +
                          xx:xx:xx is 000 or not setup to perform a +
                          payment push.')
             CHGVAR     VAR(%SST(&DISTMSG 55 8)) VALUE(&DATEA)
             CHGVAR     VAR(%SST(&DISTMSG 67 8)) VALUE(&TIMEA)
             ENDDO
             ENDSELECT


             ESEND/ESNDMAIL RECIPIENT(&DISTLIST) SUBJECT(&SUBJECT) +
                          MSG(&DISTMSG) OVRUSROPT(&USERFROM)
             GOTO       CMDLBL(ENDIT)
             ENDDO

/*********************************************************************/
/* Get To Company Number from the Company Values file                */
/*********************************************************************/
 TOCOMP:     CHGVAR     VAR(&WRKNBR) VALUE(0)
             CALL       PGM(PDHGXFR) PARM(&RETURN &FROMCOMP +
                          'HPEPSHTOCO' &WRKNBR)
             CHGVAR     VAR(&TOCOMP) VALUE(&WRKNBR)
             CHGVAR     VAR(&TOCOMPA) VALUE(&TOCOMP)
/*********************************************************************/
/* If TOCOMP = 0, send error email and exit                          */
/*********************************************************************/
 TOERROR:    IF         COND(&TOCOMP *EQ 0) THEN(DO)

             SELECT
             WHEN       COND(&GRPPRFL = 'SBDPGMR ') THEN(DO)
             CHGVAR     VAR(&SUBJECT) VALUE('TEST: Payment Push to +
                          company xxx error.')
             CHGVAR     VAR(%SST(&SUBJECT 31 3)) VALUE(&TOCOMPA)

             CHGVAR     VAR(&DISTMSG) VALUE('TEST: The To Company +
                          for the Payment Push that started on +
                          xx/xx/xx at xx:xx:xx is 000 or not setup +
                          to receive a payment push.')
             CHGVAR     VAR(%SST(&DISTMSG 59 8)) VALUE(&DATEA)
             CHGVAR     VAR(%SST(&DISTMSG 71 8)) VALUE(&TIMEA)
             ENDDO

             OTHERWISE  CMD(DO)
             CHGVAR     VAR(&SUBJECT) VALUE('Payment Push to +
                          company xxx error.')
             CHGVAR     VAR(%SST(&SUBJECT 25 3)) VALUE(&TOCOMPA)

             CHGVAR     VAR(&DISTMSG) VALUE('The To Company for the +
                          Payment Push that started on xx/xx/xx at +
                          xx:xx:xx is 000 or not setup to receive a +
                          payment push.')
             CHGVAR     VAR(%SST(&DISTMSG 53 8)) VALUE(&DATEA)
             CHGVAR     VAR(%SST(&DISTMSG 65 8)) VALUE(&TIMEA)
             ENDDO
             ENDSELECT

             ESEND/ESNDMAIL RECIPIENT(&DISTLIST) SUBJECT(&SUBJECT) +
                          MSG(&DISTMSG) OVRUSROPT(&USERFROM)
             GOTO       CMDLBL(ENDIT)
             ENDDO

/*********************************************************************/
/* Get From Library name for overrides                               */
/*********************************************************************/
 FROMLIB:    CALL       PGM(PDGKXFR) PARM(&RETURN &FROMCOMP +
                          'HPETOPUSHL' &FROMLIB)
/*********************************************************************/
/* If FROMLIB = BLANKS, send error email and exit                    */
/*********************************************************************/
             IF         COND(&FROMLIB *EQ '          ') THEN(DO)

             SELECT
             WHEN       COND(&GRPPRFL = 'SBDPGMR ') THEN(DO)
             CHGVAR     VAR(&SUBJECT) VALUE('TEST: Payment Push from +
                          library for company xxx error.')
             CHGVAR     VAR(%SST(&SUBJECT 45 3)) VALUE(&FROMCOMPA)

             CHGVAR     VAR(&DISTMSG) VALUE('TEST: The From Company +
                          data library for the Payment Push that +
                          started on xx/xx/xx at xx:xx:xx is not +
                          found in the Company Values file.')
             CHGVAR     VAR(%SST(&DISTMSG 74 8)) VALUE(&DATEA)
             CHGVAR     VAR(%SST(&DISTMSG 86 8)) VALUE(&TIMEA)
             ENDDO

             OTHERWISE  CMD(DO)
             CHGVAR     VAR(&SUBJECT) VALUE('Payment Push from +
                          library for company xxx error.')
             CHGVAR     VAR(%SST(&SUBJECT 39 3)) VALUE(&FROMCOMPA)

             CHGVAR     VAR(&DISTMSG) VALUE('The From Company data +
                          library for the Payment Push that started +
                          on xx/xx/xx at xx:xx:xx is not found in +
                          the Company Values file.')
             CHGVAR     VAR(%SST(&DISTMSG 68 8)) VALUE(&DATEA)
             CHGVAR     VAR(%SST(&DISTMSG 80 8)) VALUE(&TIMEA)
             ENDDO
             ENDSELECT

             ESEND/ESNDMAIL RECIPIENT(&DISTLIST) SUBJECT(&SUBJECT) +
                          MSG(&DISTMSG) OVRUSROPT(&USERFROM)
             GOTO       CMDLBL(ENDIT)
             ENDDO

/*********************************************************************/
/* Get To Library name for overrides                                 */
/*********************************************************************/
 TOLIB:      CALL       PGM(PDGKXFR) PARM(&RETURN &TOCOMP +
                          'HPETOPUSHL' &TOLIB)
/*********************************************************************/
/* If TOLIB = BLANKS, send error email and exit                      */
/*********************************************************************/
             IF         COND(&TOLIB *EQ '          ') THEN(DO)

             SELECT
             WHEN       COND(&GRPPRFL = 'SBDPGMR ') THEN(DO)
             CHGVAR     VAR(&SUBJECT) VALUE('TEST: Payment Push to +
                          library for company xxx error.')
             CHGVAR     VAR(%SST(&SUBJECT 43 3)) VALUE(&FROMCOMPA)

             CHGVAR     VAR(&DISTMSG) VALUE('TEST: The To Company +
                          data library for the Payment Push that +
                          started on xx/xx/xx at xx:xx:xx is not +
                          found in the Company Values file.')
             CHGVAR     VAR(%SST(&DISTMSG 72 8)) VALUE(&DATEA)
             CHGVAR     VAR(%SST(&DISTMSG 84 8)) VALUE(&TIMEA)
             ENDDO

             OTHERWISE  CMD(DO)
             CHGVAR     VAR(&SUBJECT) VALUE('Payment Push to +
                          library for company xxx error.')
             CHGVAR     VAR(%SST(&SUBJECT 37 3)) VALUE(&FROMCOMPA)

             CHGVAR     VAR(&DISTMSG) VALUE('The To Company data +
                          library for the Payment Push that started +
                          on xx/xx/xx at xx:xx:xx is not found in +
                          the Company Values file.')
             CHGVAR     VAR(%SST(&DISTMSG 66 8)) VALUE(&DATEA)
             CHGVAR     VAR(%SST(&DISTMSG 78 8)) VALUE(&TIMEA)
             ENDDO
             ENDSELECT

             ESEND/ESNDMAIL RECIPIENT(&DISTLIST) SUBJECT(&SUBJECT) +
                          MSG(&DISTMSG) OVRUSROPT(&USERFROM)
             GOTO       CMDLBL(ENDIT)
             ENDDO

/*********************************************************************/
/* Printer File overrides for Payment Push Error report              */
/*********************************************************************/
             CHGVAR     VAR(&HOLD) VALUE('*YES')
             CHGVAR     VAR(&SAVE) VALUE('*YES')

             SBDPRTOVR  CMDVAR(&CMD) FILE(PWC0PFR$) OUTQ(&PDEV) +
                          COPIES(&COPIES) HOLD(&HOLD) SAVE(&SAVE)
             CALL       PGM(QCMDEXC) PARM(&CMD 512)

             SBDPRTOVR  CMDVAR(&CMD) FILE(PWBRPFR$) OUTQ(&PDEV) +
                          COPIES(&COPIES) HOLD(&HOLD) SAVE(&SAVE)
             CALL       PGM(QCMDEXC) PARM(&CMD 512)


/*********************************************************************/
/* Override From and To library values                               */
/*********************************************************************/

                        /* Producer Location for error report */
 OVERRIDE:   OVRDBF     FILE(PKAFREL0) TOFILE(&TOLIB/PKAFREL0)    /*  To  */

                        /* Producer */
             OVRDBF     FILE(PKACREL1) TOFILE(&TOLIB/PKACREL1)    /*  To  */

                        /* Producer Contract */
             OVRDBF     FILE(PKAPCPL3) TOFILE(&TOLIB/PKAPCPL3)    /*  To  */

                        /* Buy Order Load Reference */
             OVRDBF     FILE(PWACCPL1) TOFILE(&FROMLIB/PWACCPL1)  /* From */

                        /* Hog Voucher Detail */
             OVRDBF     FILE(PKBLCPL3) TOFILE(&FROMLIB/PKBLCPL3)  /* From */
             OVRDBF     FILE(PKBLCPL0) TOFILE(&FROMLIB/PKBLCPL0)  /*  To  */

                        /* Buy Order Header */
             OVRDBF     FILE(PKAWCPL1) TOFILE(&FROMLIB/PKAWCPL1)  /* From */
             OVRDBF     FILE(PKAWCPL0) TOFILE(&TOLIB/PKAWCPL0)    /*  To  */

                        /* Buy Order Load */
             OVRDBF     FILE(PKAXCPL0) TOFILE(&FROMLIB/PKAXCPL0)  /* From */
             OVRDBF     FILE(PKAXCPL1) TOFILE(&TOLIB/PKAXCPL1)    /*  To  */

                        /* Buy Order Load Weight */
             OVRDBF     FILE(PKEJCPL2) TOFILE(&FROMLIB/PKEJCPL2)  /* From */
             OVRDBF     FILE(PKEJCPL0) TOFILE(&TOLIB/PKEJCPL0)    /*  To  */

                        /* Eval Trans */
             OVRDBF     FILE(PKBVCPL9) TOFILE(&FROMLIB/PKBVCPL9)  /* From */
             OVRDBF     FILE(PKBVCPLH) TOFILE(&TOLIB/PKBVCPLH)    /*  To  */
             OVRDBF     FILE(PKBVCPL0) TOFILE(&TOLIB/PKBVCPL0)    /*  To  */

                        /* Loss Trans */
             OVRDBF     FILE(PKBSCPL7) TOFILE(&FROMLIB/PKBSCPL7)  /* From */
             OVRDBF     FILE(PKBSCPLE) TOFILE(&TOLIB/PKBSCPLE)    /*  To  */
             OVRDBF     FILE(PKBSCPL0) TOFILE(&TOLIB/PKBSCPL0)    /*  To  */

                        /* Source */
             OVRDBF     FILE(PKAAREL0) TOFILE(&FROMLIB/PKAAREL0)  /* From */

                        /* Tattoo Header */
             OVRDBF     FILE(PKA1CPL0) TOFILE(&FROMLIB/PKA1CPL0)  /* From */
             OVRDBF     FILE(PKA1CPL1) TOFILE(&TOLIB/PKA1CPL1)    /*  To  */

                        /* Tattoo Header EXT */
             OVRDBF     FILE(PKDNCPL1) TOFILE(&FROMLIB/PKDNCPL1)  /* From */
             OVRDBF     FILE(PKDNCPL0) TOFILE(&TOLIB/PKDNCPL0)    /*  To  */

                        /*Tattoo Ded/Add */
             OVRDBF     FILE(PKCDCPL1) TOFILE(&TOLIB/PKCDCPL1)    /*  To  */
             OVRDBF     FILE(PKCDCPL0) TOFILE(&TOLIB/PKCDCPL0)    /*  To  */

                        /* Tattoo Defect */
             OVRDBF     FILE(PKDZREL1) TOFILE(&FROMLIB/PKDZREL1)  /* From */
             OVRDBF     FILE(PKDZREL0) TOFILE(&TOLIB/PKDZREL0)    /*  To  */

                        /* Tattoo Detail */
             OVRDBF     FILE(PKA2CPL1) TOFILE(&FROMLIB/PKA2CPL1)  /* From */
             OVRDBF     FILE(PKA2CPL0) TOFILE(&TOLIB/PKA2CPL0)    /*  To  */

                        /* Tattoo Scale Ticket */
             OVRDBF     FILE(PKB3CPL1) TOFILE(&FROMLIB/PKB3CPL1)  /* From */
             OVRDBF     FILE(PKB3CPL0) TOFILE(&TOLIB/PKB3CPL0)    /*  To  */

                        /* Carcass Detail */
             OVRDBF     FILE(PKB1CPL1) TOFILE(&TOLIB/PKB1CPL1)    /*  To  */
             OVRDBF     FILE(PKB1CPL0) TOFILE(&TOLIB/PKB1CPL0)    /*  To  */

                        /* Producer Site */
             OVRDBF     FILE(PLATREL1) TOFILE(&TOLIB/PLATREL1)    /*  To  */

                        /* Producer Sub-Contract */
             OVRDBF     FILE(PKAQCPLA) TOFILE(&TOLIB/PKAQCPLA)    /*  To  */

/*********************************************************************/
/* Run Producer Location Error Report                                */
/*********************************************************************/
             CHGVAR     VAR(&ERRORS) VALUE(0)
 ERRORRPT:   CALL       PGM(PWC0PFR) PARM(&RETURN &FROMCOMP &TOCOMP +
                          &CONTINUE &ERRORS &PSHTYP)

/*********************************************************************/
/* Get date and time for no records or errors emails                 */
/*********************************************************************/
             CALLSUBR   SUBR(DATE_TIME)

/*********************************************************************/
/* If errors encountered during error report, send email message     */
/*********************************************************************/
 IFERRORS:   IF         COND(&ERRORS *GT 0) THEN(DO)

             SELECT
               WHEN     COND(&GRPPRFL = 'SBDPGMR ') THEN(DO)
                 CHGVAR VAR(&SUBJECT) VALUE('TEST: The Payment Push +
                          encountered one or more errors.')

                 CHGVAR VAR(&DISTMSG) VALUE('TEST: The Payment Push +
                          from Company xxx to Company xxx ended +
                          with errors on xx/xx/xx at xx:xx:xx.  See +
                          report PWC0PFR for error details.')
                 CHGVAR     VAR(%SST(&DISTMSG 37 3)) VALUE(&FROMCOMPA)
                 CHGVAR     VAR(%SST(&DISTMSG 52 3)) VALUE(&TOCOMPA)
                 CHGVAR     VAR(%SST(&DISTMSG 77 8)) VALUE(&DATEA)
                 CHGVAR     VAR(%SST(&DISTMSG 89 8)) VALUE(&TIMEA)
               ENDDO

               OTHERWISE  CMD(DO)
                 CHGVAR VAR(&SUBJECT) VALUE('The Payment Push +
                          encountered one or more errors.')

                 CHGVAR VAR(&DISTMSG) VALUE('The Payment Push from +
                          Company xxx to Company xxx ended with +
                          errors on xx/xx/xx at xx:xx:xx.  See +
                          report PWC0PFR for error details.')
                 CHGVAR     VAR(%SST(&DISTMSG 31 3)) VALUE(&FROMCOMPA)
                 CHGVAR     VAR(%SST(&DISTMSG 46 3)) VALUE(&TOCOMPA)
                 CHGVAR     VAR(%SST(&DISTMSG 71 8)) VALUE(&DATEA)
                 CHGVAR     VAR(%SST(&DISTMSG 83 8)) VALUE(&TIMEA)
               ENDDO
             ENDSELECT

             ESEND/ESNDMAIL RECIPIENT(&DISTLIST) SUBJECT(&SUBJECT) +
                          MSG(&DISTMSG) MSGTYPE(*TEXT) +
                          OVRUSROPT(&USERFROM) ATTLIST((* *PDF *N +
                          PWC0PFR$))

                 GOTO       CMDLBL(ENDIT)
             ENDDO

/*********************************************************************/
/* If no record found during error report, send email message        */
/*********************************************************************/
 IFNORCDS:   IF         COND(&CONTINUE *EQ 'N') THEN(DO)

             SELECT
               WHEN     COND(&GRPPRFL = 'SBDPGMR ') THEN(DO)
                 CHGVAR VAR(&SUBJECT) VALUE('TEST: The Payment Push +
                          found NO records to push.')

                 CHGVAR VAR(&DISTMSG) VALUE('TEST: The Payment Push +
                          from Company xxx to Company xxx ended +
                          with NO records to push on xx/xx/xx at +
                          xx:xx:xx.')
                 CHGVAR     VAR(%SST(&DISTMSG 37 3)) VALUE(&FROMCOMPA)
                 CHGVAR     VAR(%SST(&DISTMSG 52 3)) VALUE(&TOCOMPA)
                 CHGVAR     VAR(%SST(&DISTMSG 89 8)) VALUE(&DATEA)
                 CHGVAR     VAR(%SST(&DISTMSG 101 8)) VALUE(&TIMEA)
               ENDDO

               OTHERWISE  CMD(DO)
                 CHGVAR     VAR(&SUBJECT) VALUE('The Payment Push +
                              found NO records to push.')

                 CHGVAR     VAR(&DISTMSG) VALUE('The Payment Push +
                              from Company xxx to Company xxx +
                              ended with NO records to push on +
                              xx/xx/xx at xx:xx:xx.')
                 CHGVAR     VAR(%SST(&DISTMSG 31 3)) VALUE(&FROMCOMPA)
                 CHGVAR     VAR(%SST(&DISTMSG 46 3)) VALUE(&TOCOMPA)
                 CHGVAR     VAR(%SST(&DISTMSG 83 8)) VALUE(&DATEA)
                 CHGVAR     VAR(%SST(&DISTMSG 95 8)) VALUE(&TIMEA)
               ENDDO
             ENDSELECT

             ESEND/ESNDMAIL RECIPIENT(&DISTLIST) SUBJECT(&SUBJECT) +
                          MSG(&DISTMSG) MSGTYPE(*TEXT) +
                          OVRUSROPT(&USERFROM) ATTLIST((* *PDF *N +
                          PWC0PFR$))

             GOTO       CMDLBL(ENDIT)
             ENDDO

/*********************************************************************/
/* Send email stating that the Push Process has started              */
/*********************************************************************/

 EMAILSTART: SELECT
               WHEN     COND(&GRPPRFL = 'SBDPGMR ') THEN(DO)
                 CHGVAR VAR(&SUBJECT) VALUE('TEST: The Payment Push +
                          has started.')

                 CHGVAR VAR(&DISTMSG) VALUE('TEST: The Payment Push +
                          from Company xxx to Company xxx started +
                          on xx/xx/xx at xx:xx:xx.')
                 CHGVAR   VAR(%SST(&DISTMSG 37 3)) VALUE(&FROMCOMPA)
                 CHGVAR   VAR(%SST(&DISTMSG 52 3)) VALUE(&TOCOMPA)
                 CHGVAR   VAR(%SST(&DISTMSG 67 8)) VALUE(&DATEA)
                 CHGVAR   VAR(%SST(&DISTMSG 79 8)) VALUE(&TIMEA)
               ENDDO

               OTHERWISE  CMD(DO)
                 CHGVAR   VAR(&SUBJECT) VALUE('The Payment Push has +
                          started.')

                 CHGVAR   VAR(&DISTMSG) VALUE('The Payment Push from +
                            Company xxx to Company xxx started on +
                            xx/xx/xx at xx:xx:xx.')
                 CHGVAR   VAR(%SST(&DISTMSG 31 3)) VALUE(&FROMCOMPA)
                 CHGVAR   VAR(%SST(&DISTMSG 46 3)) VALUE(&TOCOMPA)
                 CHGVAR   VAR(%SST(&DISTMSG 61 8)) VALUE(&DATEA)
                 CHGVAR   VAR(%SST(&DISTMSG 73 8)) VALUE(&TIMEA)
               ENDDO
             ENDSELECT

             ESEND/ESNDMAIL RECIPIENT(&DISTLIST) SUBJECT(&SUBJECT) +
                          MSG(&DISTMSG) MSGTYPE(*TEXT) +
                          OVRUSROPT(&USERFROM) ATTLIST((* *PDF *N +
                          PWC0PFR$))


/*********************************************************************/
/* Call Push process                                                 */
/*********************************************************************/
 PUSH:       CALL       PGM(PWBOXFR) PARM(&RETURN &FROMCOMP &TOCOMP +
                          &PSHTYP)

/*********************************************************************/
/* Get date and time for emails                                      */
/*********************************************************************/
             CALLSUBR   SUBR(DATE_TIME)

/*********************************************************************/
/* Call Report to list pushed records                                */
/*********************************************************************/
 REPORT:     CALL       PGM(PWBRPFR) PARM(&RETURN &FROMCOMP &TOCOMP +
                          &PSHTYP)

/*********************************************************************/
/* Send email stating that the Push Process completed normally       */
/*********************************************************************/

             SELECT
               WHEN     COND(&GRPPRFL = 'SBDPGMR ') THEN(DO)
                 CHGVAR VAR(&SUBJECT) VALUE('TEST: The Payment Push +
                          completed normally.')

                 CHGVAR VAR(&DISTMSG) VALUE('TEST: The Payment Push +
                          from Company xxx to Company xxx completed +
                          normally on xx/xx/xx at xx:xx:xx.')
                 CHGVAR VAR(%SST(&DISTMSG 37 3)) VALUE(&FROMCOMPA)
                 CHGVAR VAR(%SST(&DISTMSG 52 3)) VALUE(&TOCOMPA)
                 CHGVAR VAR(%SST(&DISTMSG 78 8)) VALUE(&DATEA)
                 CHGVAR VAR(%SST(&DISTMSG 90 8)) VALUE(&TIMEA)
               ENDDO

               OTHERWISE  CMD(DO)
                 CHGVAR VAR(&SUBJECT) VALUE('The Payment Push +
                          completed normally.')

                 CHGVAR VAR(&DISTMSG) VALUE('The Payment Push from +
                          Company xxx to Company xxx completed +
                          normally on xx/xx/xx at xx:xx:xx.')
                 CHGVAR VAR(%SST(&DISTMSG 31 3)) VALUE(&FROMCOMPA)
                 CHGVAR VAR(%SST(&DISTMSG 46 3)) VALUE(&TOCOMPA)
                 CHGVAR VAR(%SST(&DISTMSG 72 8)) VALUE(&DATEA)
                 CHGVAR VAR(%SST(&DISTMSG 84 8)) VALUE(&TIMEA)
               ENDDO
             ENDSELECT

             ESEND/ESNDMAIL RECIPIENT(&DISTLIST) SUBJECT(&SUBJECT) +
                          MSG(&DISTMSG) MSGTYPE(*TEXT) +
                          OVRUSROPT(&USERFROM) ATTLIST((* *PDF *N +
                          PWBRPFR$))

             GOTO       CMDLBL(ENDIT)

/*********************************************************************/
/* Get date and time for CLP errors email                            */
/*********************************************************************/
 ERROR:      CALLSUBR   SUBR(DATE_TIME)

/*********************************************************************/
/* Send email for CLP errors                                         */
/*********************************************************************/

             SELECT
               WHEN     COND(&GRPPRFL = 'SBDPGMR ') THEN(DO)
                 CHGVAR VAR(&SUBJECT) VALUE('TEST: The Payment Push +
                          ended in error.')

                 CHGVAR VAR(&DISTMSG) VALUE('TEST: The Payment Push +
                          from Company xxx to Company xxx ended in +
                          error on xx/xx/xx at xx:xx:xx. Contact +
                          the IT department.')
                 CHGVAR VAR(%SST(&DISTMSG 37 3)) VALUE(&FROMCOMPA)
                 CHGVAR VAR(%SST(&DISTMSG 52 3)) VALUE(&TOCOMPA)
                 CHGVAR VAR(%SST(&DISTMSG 74 8)) VALUE(&DATEA)
                 CHGVAR VAR(%SST(&DISTMSG 86 8)) VALUE(&TIMEA)
               ENDDO

               OTHERWISE  CMD(DO)
                 CHGVAR VAR(&SUBJECT) VALUE('The Payment Push +
                          ended in error.')

                 CHGVAR VAR(&DISTMSG) VALUE('The Payment Push from +
                          Company xxx to Company xxx ended in +
                          error on xx/xx/xx at xx:xx:xx. Contact +
                          the IT department.')
                 CHGVAR VAR(%SST(&DISTMSG 31 3)) VALUE(&FROMCOMPA)
                 CHGVAR VAR(%SST(&DISTMSG 46 3)) VALUE(&TOCOMPA)
                 CHGVAR VAR(%SST(&DISTMSG 68 8)) VALUE(&DATEA)
                 CHGVAR VAR(%SST(&DISTMSG 80 8)) VALUE(&TIMEA)
               ENDDO
             ENDSELECT

             ESEND/ESNDMAIL RECIPIENT(&DISTLIST) SUBJECT(&SUBJECT) +
                          MSG(&DISTMSG) OVRUSROPT(&USERFROM)
             GOTO       CMDLBL(ENDIT)

/*********************************************************************/
/* Successful completion, delete overrides                           */
/*********************************************************************/
 ENDIT:      DLTOVR     FILE(*ALL)

/*===================================================================*/
/* Subroutine - Get System Date and Time                             */
/*===================================================================*/
             SUBR       SUBR(DATE_TIME)
             RTVSYSVAL  SYSVAL(QDATE) RTNVAR(&QDATEA)
             CVTDAT     DATE(&QDATEA) TOVAR(&DATEA) TOSEP(/)

             CVTTIM     FROMTIME(*CURRENT) TOTIME8(&TIMEA)

             ENDSUBR
/*===================================================================*/

             ENDPGM
