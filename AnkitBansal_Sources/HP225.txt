      *****************  RPG PROGRAM HEADING  ************************
      *
      * ENVIRONMENT: Pork Division
      * SYSTEM:      HPS---Datamart
      * PROGRAM:     HP225 - Datamart FIN: Build Closed Group Cost Detail
      *                     (Nursery/Grow Finish Only)
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     08/21/03
      *
      *
      * FUNCTION:    Write detail records for costs for the closed group...1 record
      *              for each Expense Code. And, then 4 additional records for:
      *                     1) feed
      *                     2) cull sales
      *                     3) BGF amounts
      *                     4) variance
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 09/23/03  Barb Gutierrez
      *           Removed the *lda processing and brought in the data
      *           area DALPER.
      *
      * 01/30/04  Barb Gutierrez
      *           Added the retrieval of the accounting quarter to bring
      *           into cognos.
      *
      * 07/06/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      *
      * 05/20/11  LeAnne Ramsey (E1557)
      *           Recompile only. Added Yard Dead to HSJ085E.
      *
      * 05/11/16  Barb Gutierrez  (E5257)
      *          -Added company control file HSP0071 to retrieve values by company instead
      *           of using DALPER to allow for different companies to use this program instead
      *           of assuming one company. Company number is also now in HPPF120.
      *          -Added open query over hsl034l in HPBLDCD$ to only select company being passed in.
      *          -Company number is also now in HPPF120.
      *
      * 03/25/20  Danny Nguyen - P405 - Farm Number Increase
      *           Recompile only. Increased Bin Code (@@BNCD) in HSPREF file from 5A to 6A.
      *
      * 05/10/22 Eric L SDN736 Recompiled ticket nbr increase (TKNO & RTNO 7.0 TO 9.0)
      *
      * 01/12/23  Eric Louchez - 111690 - Increment HGCD from 7 A to 9A.
      *           The group code in is being incremented due to the business utilizing more than 3
      *           digits for a BGF farm number.  Nursery and Grow Finisher groups will still be 7.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhsl034l   if   e           k disk
      *    Hog group
      *
      *
     Fhsp0071   if   e           k disk
      *    Company Control
      *
      *
     Fhsl038e   if   e           k disk
      *    Feed tickets
      *
      *
     Fhsl048k   if   e           k disk
      *    Expense tickets
      *
      *
     Fhsp052    if   e           k disk
      *    Expenses
      *
      *
     Fhsl064b   if   e           k disk
      *    Check detail
      *
      *
     Fhsl065c   if   e           k disk
      *    Check adjustments
      *
      *
     Fhsj085e   if   e           k disk
      *    Sales detail + sales header
      *
      *
     Fhsl118b   if   e           k disk    rename(cmrec:cmrecb)
      *    Costed movements
      *
      *
     Fhsl118c   if   e           k disk    rename(cmrec:cmrecc)
      *    Costed movements
      *
      *
     Fhsl120b   if   e           k disk    rename(cxrec:cxrecb)
      *    Costed movements expense codes
      *
      *
     Fhsl120c   if   e           k disk    rename(cxrec:cxrecc)
      *    Costed movements expense codes
      *
      *
     Fhppf120   uf a e           k disk
      *    Datamart FIN: Closed hog group--cost detail
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Workfields
      *
     d  wkexcd         s                   like(g1excd)
     d  wkam           s                   like(g1am)
      *
     d  wktispam       s                   like(g1tispam)
     d  wktidpam       s                   like(g1tispam)
     d  wktospam       s                   like(g1tispam)
     d  wktodpam       s                   like(g1tispam)
      *
     d  wkextispam     s                   like(g1tispam)
     d  wkextidpam     s                   like(g1tispam)
     d  wkextospam     s                   like(g1tispam)
     d  wkextodpam     s                   like(g1tispam)
      *
     d  wkfdtispam     s                   like(g1tispam)
     d  wkfdtidpam     s                   like(g1tispam)
     d  wkfdtospam     s                   like(g1tispam)
     d  wkfdtodpam     s                   like(g1tispam)
      *
     d  wkcstispam     s                   like(g1tispam)
     d  wkcstidpam     s                   like(g1tispam)
     d  wkcstospam     s                   like(g1tispam)
     d  wkcstodpam     s                   like(g1tispam)
      *
     d  wkbgtispam     s                   like(g1tispam)
     d  wkbgtidpam     s                   like(g1tispam)
     d  wkbgtospam     s                   like(g1tispam)
     d  wkbgtodpam     s                   like(g1tispam)
      *
     d  xxperiod       s                   like(g1acpe)
     d  xxquarter      s                   like(g1acqr)
      *
     d  kyhgcd         s              9A                                        hghgcd + 2 digits
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *-----------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *-----------------------`---------------------------------------
      *  Definition for external data area 'DALPER' which holds the last
      *  period that was closed in HPS.
      *---------------------------------------------------------------
      * Removed use of DALPER E5752
     D*                DS
     D* DALPER                 1     24
     D* DACCYY                 1      4  0
     D* DAPER                  5      6  0
     D* DABPDT                 7     14  0
     D* DAEPDT                15     22  0
     D* DAPPFL                24     24
      *
      ***************************************************************************************
     I***HGREC
      * Renamed input format fields
     I***              HGHGCD                      HGCD034L
      ***************************************************************************************
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ***************************************************************************************
      * MAINLINE
      ***************************************************************************************
      *
      * Process each group with a closed date in the Period.
      *    Select records for company being procesed in opnqry in HPBLDCD$  E5752
      *    Use dates from company control file now instead of dalper  E5752
      *
     C     svlbpdt       setll     hsl034l
      *
     C                   dou       *in90 = *on or hgcldt > svlepdt              Main do
     C                   read      hsl034l                                90
     C                   if        *in90 = *off and hgcldt <= svlepdt           If read
      *
      * Several of the special, hardcoded records that you will ultimately
      * write to the datamart file, will use data from the costed movements
      * file. So, just go get this data 1-time per group.
      *
     C                   exsr      $costmove
      *
     C                   exsr      $expenses
     C                   exsr      $feed
     C                   exsr      $culls
     C                   exsr      $bgf
     C                   exsr      $variance
      *
     C                   endif                                                  If read
     C                   enddo                                                  Main do
      *
      * EOF Processing
      *
     C                   seton                                        lr
      /EJECT
      *----------------------------------------------------------------
      * Clear accumulators/workfields
      *----------------------------------------------------------------
      *
     C     $clear        begsr
      *
      * Amount
     C                   z-add     0             wktispam
     C                   z-add     0             wktidpam
     C                   z-add     0             wktospam
     C                   z-add     0             wktodpam
      *
      * Expense
     C                   z-add     0             wkextispam
     C                   z-add     0             wkextidpam
     C                   z-add     0             wkextospam
     C                   z-add     0             wkextodpam
      *
      * Feed
     C                   z-add     0             wkfdtispam
     C                   z-add     0             wkfdtidpam
     C                   z-add     0             wkfdtospam
     C                   z-add     0             wkfdtodpam
      *
      * Cull sales
     C                   z-add     0             wkcstispam
     C                   z-add     0             wkcstidpam
     C                   z-add     0             wkcstospam
     C                   z-add     0             wkcstodpam
      *
      * BGF
     C                   z-add     0             wkbgtispam
     C                   z-add     0             wkbgtidpam
     C                   z-add     0             wkbgtospam
     C                   z-add     0             wkbgtodpam
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Costed movements
      *----------------------------------------------------------------
      *
      * Several of the special, hardcoded records that you will ultimately
      * write to the datamart file, will use data from the costed movements
      * file. So, just go get this data 1-time per group.
      *
     C     $costmove     begsr
      *
      * Clear accumulators
      *
     C                   exsr      $clear
      *
      *---------------
      * TRANSFER OUT
      *---------------
      * Retrieve all Costed Movement transfer records where the group
      * is the origin
      *
     C     hghgsn        setll     hsl118b
     C                   dou       *in92 = *on                                  Do out
     C     hghgsn        reade     hsl118b                                92
      *
     C                   select
     C                   when      *in92 = *on or cmmtcd <> 'T'
      *
     C                   when      cmorppcd = cmdnppcd
     C                   add       cmfdam        wkfdtospam
     C                   add       cmcsam        wkcstospam
     C                   add       cmbgam        wkbgtospam
      *
     C                   when      cmorppcd <> cmdnppcd
     C                   add       cmfdam        wkfdtodpam
     C                   add       cmcsam        wkcstodpam
     C                   add       cmbgam        wkbgtodpam
     C                   endsl                                                  If more
     C                   enddo                                                  Do out
      *
      *---------------
      * TRANSFER IN
      *---------------
      * Retrieve all Costed Movement 'transfer' records where the group
      * is the destination
      *
     C     hghgsn        setll     hsl118c
     C                   dou       *in92 = *on                                  Do in
     C     hghgsn        reade     hsl118c                                92
      *
     C                   select
     C                   when      *in92 = *on or cmmtcd <> 'T'
      *
     C                   when      cmorppcd = cmdnppcd
     C                   add       cmfdam        wkfdtispam
     C                   add       cmcsam        wkcstispam
     C                   add       cmbgam        wkbgtispam
      *
     C                   when      cmorppcd <> cmdnppcd
     C                   add       cmfdam        wkfdtidpam
     C                   add       cmcsam        wkcstidpam
     C                   add       cmbgam        wkbgtidpam
     C                   endsl                                                  If more
     C                   enddo                                                  Do in
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Expenses
      *----------------------------------------------------------------
      *
      * Write a datamart record for each expense code in the Expense Master
      * ----even if the group had no dollars for this code.
      * EXCEPT, Alice dummied up two expense codes (*BGF and *VAR) so that
      * COGNOS could go get descriptions. BUT, we want to process *BGF and
      * *VAR in their separate subroutines.  SO, DO NOT PROCESS the expense
      * codes *BGF and *VAR in this subroutine.
      *
     C     $expenses     begsr
      *
     C     *loval        setll     hsp052
      *
     C                   dou       *in91 = *on                                  Do expenses
     C                   read      hsp052                                 91
     C                   if        *in91 = *off and                             If not eof
     C                             exexcd <> '*BGF ' and
     C                             exexcd <> '*VAR '
      *
     C                   move      exexcd        g1excd
      *--------------
      * PHASE COST:
      *--------------
      * Read all Expense Tickets for the group/expense code to accumulate
      * the Phase Cost for the datamart record.
      *
     C     key01         setll     hsl048k
     C                   dou       *in92 = *on                                  Do phase
     C     key01         reade     hsl048k                                92
     C                   if        *in92 = *off                                 If more
     C                   add       xtxtam        g1am
     C                   endif                                                  If more
     C                   enddo                                                  Do phase
      *
      *--------------
      * TRANSFER OUT:
      *--------------
      * Read ALL the Costed Expense records for the group/expense code
      * where the group is the origin group to get 'Transfer Out' values.
      * Only process 'Transfer' records--omit 'Sale' records.
      *
     C     key01         setll     hsl120b
     C                   dou       *in92 = *on                                  Do out
     C     key01         reade     hsl120b                                92
     C                   if        *in92 = *off and cxmtcd = 'T'                If read
      *
     C                   select
     C                   when      cxorppcd = cxdnppcd
     C                   add       cxexam        g1tospam
     C                   when      cxorppcd <> cxdnppcd
     C                   add       cxexam        g1todpam
     C                   endsl
      *
     C                   endif                                                  If read
     C                   enddo                                                  Do out
      *
      *--------------
      * TRANSFER IN:
      *--------------
      * Read ALL the Costed Expense 'transfer' records for the group/expense code
      * where the group is the destination group to get 'Transfer In' values.
      *
     C     key01         setll     hsl120c
     C                   dou       *in92 = *on                                  Do in
     C     key01         reade     hsl120c                                92
     C                   if        *in92 = *off and cxmtcd = 'T'                If more in
      *
     C                   select
     C                   when      cxorppcd = cxdnppcd
     C                   add       cxexam        g1tispam
     C                   when      cxorppcd <> cxdnppcd
     C                   add       cxexam        g1tidpam
     C                   endsl
      *
     C                   endif                                                  If more in
     C                   enddo                                                  Do in
      *
      * Write record
     C                   exsr      $wrt120
      *
     C                   endif                                                  If not eof
     C                   enddo                                                  Do expenses
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Feed
      *----------------------------------------------------------------
      *
     C     $feed         begsr
      *
      * Read all Feed Tickets for the group to accumulate the PHASE COST
      *
     C                   z-add     0             wkam
     C     hghgsn        setll     hsl038e
      *
     C                   dou       *in92 = *on                                  Do phase
     C     hghgsn        reade     hsl038e                                92
     C                   if        *in92 = *off                                 If more
     C                   add       fdinam        wkam
     C                   add       fdmdam        wkam
     C                   add       fdmfam        wkam
     C                   add       fddlam        wkam
     C                   endif                                                  If more
     C                   enddo                                                  Do phase
      *
      *
      * The 'FEED' logic is really goofy because we are hardcoding '6100' for
      * the expense code. BUT, we will have ALREADY written a 6100 record
      * during the Expense subroutine earlier--since 6100 is a valid expense
      * code in the master file.
      *
      * So, we will chain to HPPF120 to retrieve this existing record for code
      * 6100 and update it. If, for who knows how/why, there is not an existing
      * 6100 record, we will, ultimately, write one.
      *
      *
     C                   eval      wkexcd = '6100 '
     C                   movel     hghgcd        kyhgcd                         111690
     C     key04         chain     hppf120                            92
     C                   if        *in92 = *off                                 If exists
     C                   add       wkam          g1am
     C                   add       wkfdtispam    g1tispam
     C                   add       wkfdtidpam    g1tidpam
     C                   add       wkfdtospam    g1tospam
     C                   add       wkfdtodpam    g1todpam
     C                   update    g1rec
     C                   clear                   g1rec
     C                   else
      *
      * You are writing a new record.
      *
     C                   z-add     wkam          g1am
     C                   z-add     wkfdtispam    g1tispam
     C                   z-add     wkfdtidpam    g1tidpam
     C                   z-add     wkfdtospam    g1tospam
     C                   z-add     wkfdtodpam    g1todpam
      *
     C                   eval      g1excd = '6100 '
     C                   exsr      $wrt120
     C                   endif                                                  If exists
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Cull sales
      *----------------------------------------------------------------
      *
     C     $culls        begsr
      *
     C                   z-add     0             wkam
      *
      * Retrieve Net Cull Sales amount for the group's PHASE COST
      *
     C     hghgsn        setll     hsj085e
     C                   dou       *in93 = *on                                  Do cull sales
     C     hghgsn        reade     hsj085e                                93
     C                   if        *in93 = *off and                             If more sales
     C                             shstcd = 'CULLS' and
     C                             shrcdt <= cclepdt
      *
      * Retrieve the check detail records(s) for this movement/group to get
      * the
      *
     C     key03         setll     hsl064b
      *
     C                   dou       *in94 = *on                                  Do check detail
     C     key03         reade     hsl064b                                94
     C                   if        *in94 = *off                                 If not eof
     C                   add       cdgram        wkam
      *
      * Now, retrieve all the adjustments for this detail line so that
      * you can get to the 'net' amount for the check detail line.
      * (NOTE: Deductions/additions are carried in the Adjustment file
      * with the appropriate +/- sign. So, just 'add' them to the 'gross'.)
      *
     C     key05         setll     hsl065c
     C                   dou       *in92 = *on                                  Do ded/add
     C     key05         reade     hsl065c                                92
     C                   if        *in92 = *off and cjcjfl = 'D'
     C                   add       cjcjam        wkam
     C                   endif
     C                   enddo                                                  Do ded/add
      *
     C                   endif                                                  If not eof
     C                   enddo                                                  Do check detail
      *
     C                   endif                                                  If more sales
     C                   enddo                                                  Do cull sales
      *
      *
      * Since Alice wants Cull values to have a negative sign. We will
      * flip the sign on the Phase Amount just retrieved and the values
      * retrieved/accumulated earlier in the Costed Movements subroutine.
      *
     C                   mult      -1            wkam
     C                   mult      -1            wkcstispam
     C                   mult      -1            wkcstidpam
     C                   mult      -1            wkcstospam
     C                   mult      -1            wkcstodpam
      *
      * The 'CULL' logic is really goofy because we are hardcoding '7970' for
      * the expense code. BUT, we will have ALREADY written a 7970 record
      * during the Expense subroutine earlier--since 7970 is a valid expense
      * code in the master file.
      *
      * So, we will chain to HPPF120 to retrieve this existing record for code
      * 7970 and update it. If, for who knows how/why, there is not an existing
      * 7970 record, we will, ultimately, write one.
      *
      *
     C                   eval      wkexcd = '7970 '
     C                   movel     hghgcd        kyhgcd                         111690
     C     key04         chain     hppf120                            92
     C                   if        *in92 = *off                                 If exists
     C                   add       wkam          g1am
     C                   add       wkcstispam    g1tispam
     C                   add       wkcstidpam    g1tidpam
     C                   add       wkcstospam    g1tospam
     C                   add       wkcstodpam    g1todpam
     C                   update    g1rec
     C                   clear                   g1rec
     C                   else
      *
     C                   z-add     wkam          g1am
     C                   z-add     wkcstispam    g1tispam
     C                   z-add     wkcstidpam    g1tidpam
     C                   z-add     wkcstospam    g1tospam
     C                   z-add     wkcstodpam    g1todpam
      *
     C                   eval      g1excd = '7970 '
     C                   exsr      $wrt120
     C                   endif                                                  If exists
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * BGF amount
      *----------------------------------------------------------------
      *
     C     $BGF          begsr
      *
      * Set Phase Cost to zero.
      *
     C                   z-add     0             g1am
      *
      * Populate the remaining fields in the datamart record with values
      * retrieved/accumulated earlier in the Costed Movements subroutine.
      *
     C                   z-add     wkbgtispam    g1tispam
     C                   z-add     wkbgtidpam    g1tidpam
     C                   z-add     wkbgtospam    g1tospam
     C                   z-add     wkbgtodpam    g1todpam
      *
     C                   eval      g1excd = '*BGF '
      *
     C                   exsr      $wrt120
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Variance record
      *----------------------------------------------------------------
      *
     C     $variance     begsr
      *
      * Clear accumulators
      *
     C                   exsr      $clear
      *
      *---------------
      * TRANSFER OUT
      *---------------
      * Retrieve all Costed 'TRANSFER' Movement records where the group
      * is the origin
      *
     C     hghgsn        setll     hsl118b
     C                   dou       *in92 = *on                                  Do out
     C     hghgsn        reade     hsl118b                                92
      *
     C                   select
     C                   when      *in92 = *on or cmmtcd <> 'T'
      *
     C                   when      cmorppcd = cmdnppcd
     C                   add       cmfdam        wkfdtospam
     C                   add       cmcsam        wkcstospam
     C                   add       cmbgam        wkbgtospam
     C                   add       cmexam        wkextospam
     C                   add       cmam          wktospam
      *
     C                   when      cmorppcd <> cmdnppcd
     C                   add       cmfdam        wkfdtodpam
     C                   add       cmcsam        wkcstodpam
     C                   add       cmbgam        wkbgtodpam
     C                   add       cmexam        wkextodpam
     C                   add       cmam          wktodpam
     C                   endsl                                                  If more
     C                   enddo                                                  Do out
      *
      *---------------
      * TRANSFER IN
      *---------------
      * Retrieve all Costed 'TRANSFER' records where the group is the destination
      *
     C     hghgsn        setll     hsl118c
     C                   dou       *in92 = *on                                  Do in
     C     hghgsn        reade     hsl118c                                92
      *
     C                   select
     C                   when      *in92 = *on or cmmtcd <> 'T'
      *
     C                   when      cmorppcd = cmdnppcd
     C                   add       cmfdam        wkfdtispam
     C                   add       cmcsam        wkcstispam
     C                   add       cmbgam        wkbgtispam
     c                   add       cmexam        wkextispam
     c                   add       cmam          wktispam
      *
     C                   when      cmorppcd <> cmdnppcd
     C                   add       cmfdam        wkfdtidpam
     C                   add       cmcsam        wkcstidpam
     C                   add       cmbgam        wkbgtidpam
     C                   add       cmexam        wkextidpam
     C                   add       cmam          wktidpam
     C                   endsl                                                  If more
     C                   enddo                                                  Do in
      *
      *
     C                   z-add     0             g1am
     C                   eval      g1excd = '*VAR '
      *
      * Calc the variance value for each field using the accumulated
      * group values in the workfields and the formula:
      *
      *  variance amount = amount - expense - feed + cull sale - BGF
      *
     C                   eval      g1tispam = wktispam - wkextispam - wkfdtispam
     C                                        + wkcstispam - wkbgtispam
      *
     C                   eval      g1tidpam = wktidpam - wkextidpam - wkfdtidpam
     C                                        + wkcstidpam - wkbgtidpam
      *
     C                   eval      g1tospam = wktospam - wkextospam - wkfdtospam
     C                                        + wkcstospam - wkbgtospam
      *
     C                   eval      g1todpam = wktodpam - wkextodpam - wkfdtodpam
     C                                        + wkcstodpam - wkbgtodpam
      *
     C                   exsr      $wrt120
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Write a Datamart record
      *----------------------------------------------------------------
      *
     C     $wrt120       begsr
      *
     C                   move      hgcocd        g1cocd
      ***** 111690       move      hghgcd        g1hgcd
     C                   movel     hghgcd        g1hgcd                           111690
     C                   z-add     svccly        g1acyr
     C                   z-add     svcclp        g1acpe
      *
      * Call the generic program to retrieve the quarter associated with the accounting period.
      *
     C                   call      'HP8006'
     C                   parm      svcclp        xxperiod
     C     g1acqr        parm      0             xxquarter
      *
     C                   write     g1rec
     C                   clear                   g1rec
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      *  Pass in company from HPBLDCD$.  E5752
      *
     C     *entry        plist
     C                   parm                    xxcocd            3
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    hghgsn
     C                   kfld                    exexcd
      *
      * Added company to key and use yr/per from company control.  E5752
      *
     C     key02         klist
     C                   kfld                    xxcocd
     C                   kfld                    svccly
     C                   kfld                    svcclp
      *
     C     key03         klist
     C                   kfld                    sgmvsn
     C                   kfld                    hghgsn
      *
      * Added company to key and use yr/per from company control.  E5752
      *
     C     key04         klist
     C                   kfld                    xxcocd
     C                   kfld                    svccly
     C                   kfld                    svcclp
      **** 111690        kfld                    hghgcd
     C                   kfld                    kyhgcd                         111690
     C                   kfld                    wkexcd
      *
     C     key05         klist
     C                   kfld                    cdchdt
     C                   kfld                    cdcvno
     C                   kfld                    cdchno
     C                   kfld                    cdlnno
      *
      *
      * Bring in the data area that contains the last Period posted
      * in hps.
      *    remove use of dalper E5752
      *
     C**   *dtaara       define                  dalper
     C**                 in        dalper
      *
      * Read the company control file for the company being passed in to retrieve
      * the last HPS closed year/period.      E5752
      *
     C     xxcocd        chain     hsp0071                            92
     C                   if        *in92 = *off                                 If exists
     C                   move      ccccly        svccly            4 0          last close year
     C                   move      cccclp        svcclp            2 0          last close period
     C                   move      cclbpdt       svlbpdt           8 0          last close beg date
     C                   move      cclepdt       svlepdt           8 0          last close end date
     C                   endif                                                  If exists
      *
      * Always delete any existing period records from the Datamart file.
      *
     C     key02         setll     hppf120
     C                   dou       *in91 = *on                                  Do deletes
     C     key02         reade     hppf120                                91
     C                   if        *in91 = *off                                 If read
     C                   delete    g1rec
     C                   endif                                                  If read
     C                   enddo                                                  Do deletes
      *
      *
     C                   endsr
      *
