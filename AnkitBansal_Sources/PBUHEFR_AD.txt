// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBUHEFR
// ?Date: 14.08.2025 Time: 03:49:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('SSDP');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

// CTL.DP Assigned Txt = CON.DP Class NOT Assigned
CTL.DP_Assigned_Txt = 'DP Class NOT Assigned';

//?USER: Initialize subfile record (existing record)

//?First Time Logic
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// LCL.Record Status = CND.Active
LCL.Record_Status = 'A';

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

// LCL.DP Assigned Flag = CND.All
LCL.DP_Assigned_Flag = 'L';

ENDIF;

//?DP Assigned Record Selection
CASE;

// IF LCL.DP Assigned Flag is Unassigned
IF LCL.DP_Assigned_Flag = 'U';

CASE;

// IF RCD.Sales Sold To DP Class is Valid Values
IF RCD.Sales_Sold_To_DP_Class = 'A'/'B'/'C';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sel Sls chnl
CASE;

// IF CTL.Sales Channel Code EQ RCD.Sales Channel Code
IF CTL.Sales_Channel_Code = RCD.Sales_Channel_Code;

// OR CTL.Sales Channel Code is Not Entered
OR CTL.Sales_Channel_Code = *BLANK;

//?Sel Sls chnl
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel Sls mkt
CASE;

// IF CTL.SC Market Code EQ RCD.SC Market Code
IF CTL.SC_Market_Code = RCD.SC_Market_Code;

// OR CTL.SC Market Code is Not Entered
OR CTL.SC_Market_Code = *BLANK;

//?Sel Sls mkt
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel Sold To
CASE;

// IF CTL.Sales Sold To Code EQ RCD.Sales Sold To Code
IF CTL.Sales_Sold_To_Code = RCD.Sales_Sold_To_Code;

// OR CTL.Sales Sold To Code is Not Entered
OR CTL.Sales_Sold_To_Code = *ZERO;

//?Sel Sold To
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel class
CASE;

// IF CTL.Sales Sold To DP Class EQ RCD.Sales Sold To DP Class
IF CTL.Sales_Sold_To_DP_Class = RCD.Sales_Sold_To_DP_Class;

// OR CTL.Sales Sold To DP Class is Not Entered
OR CTL.Sales_Sold_To_DP_Class = *BLANK;

//?Sel class
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel Sub Class - R14719 DN 03/28/19
CASE;

// IF CTL.Sales Sold To Sub Class EQ RCD.Sales Sold To Sub Class
IF CTL.Sales_Sold_To_Sub_Class = RCD.Sales_Sold_To_Sub_Class;

// OR CTL.Sales Sold To Sub Class is Not Entered
OR CTL.Sales_Sold_To_Sub_Class = *BLANK;

//?Sel Sub Class - R14719 DN 03/28/19
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Sel rcd sts
CASE;

// IF CTL.Record Status EQ RCD.Record Status
IF CTL.Record_Status = RCD.Record_Status;

// OR CTL.Record Status is *blank
OR CTL.Record_Status = *BLANK;

//?Sel rcd sts
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Validate subfile control

//?F4=Prompt Sales Channel Code
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Sales Channel Code
AND PGM.*Cursor_field = CTL.Sales_Channel_Code;

// Call program Sel Sales Channel     SR.
CALL PROGRAM(Sel Sales Channel     SR) ('PBTOSRR');
PARAMETER(CTL.Sales_Channel_Code);

// CTL.SC Market Code = CND.Not Entered
CTL.SC_Market_Code = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F4=Prompt SC Market Code
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.SC Market Code
AND PGM.*Cursor_field = CTL.SC_Market_Code;

// Call program Sel Sales Chnl Mkt    SR.
CALL PROGRAM(Sel Sales Chnl Mkt    SR) ('PBTQSRR');
PARAMETER(CTL.Sales_Channel_Code);
PARAMETER(CTL.SC_Market_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F7=DP Class Toggle
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// CTL.Sales Channel Code = CND.Not Entered
CTL.Sales_Channel_Code = *BLANK;

// CTL.SC Market Code = CND.Not Entered
CTL.SC_Market_Code = *BLANK;

CASE;

// IF LCL.DP Assigned Flag is All
IF LCL.DP_Assigned_Flag = 'L';

// LCL.DP Assigned Flag = CND.Unassigned
LCL.DP_Assigned_Flag = 'U';

// IF LCL.DP Assigned Flag is Unassigned
IF LCL.DP_Assigned_Flag = 'U';

// LCL.DP Assigned Flag = CND.All
LCL.DP_Assigned_Flag = 'L';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?chg chnls
CASE;

// IF CTL.Sales Channel Code NE LCL.Sales Channel Code
IF CTL.Sales_Channel_Code <> LCL.Sales_Channel_Code;

// LCL.Sales Channel Code = CTL.Sales Channel Code
LCL.Sales_Channel_Code = CTL.Sales_Channel_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?chg mkt
CASE;

// IF CTL.SC Market Code NE LCL.SC Market Code
IF CTL.SC_Market_Code <> LCL.SC_Market_Code;

// LCL.SC Market Code = CTL.SC Market Code
LCL.SC_Market_Code = CTL.SC_Market_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?chg sold to
CASE;

// IF CTL.Sales Sold To Code NE LCL.Sales Sold To Code
IF CTL.Sales_Sold_To_Code <> LCL.Sales_Sold_To_Code;

// LCL.Sales Sold To Code = CTL.Sales Sold To Code
LCL.Sales_Sold_To_Code = CTL.Sales_Sold_To_Code;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?chg class
CASE;

// IF CTL.Sales Sold To DP Class NE LCL.Sales Sold To DP Class
IF CTL.Sales_Sold_To_DP_Class <> LCL.Sales_Sold_To_DP_Class;

// LCL.Sales Sold To DP Class = CTL.Sales Sold To DP Class
LCL.Sales_Sold_To_DP_Class = CTL.Sales_Sold_To_DP_Class;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Chg Sub Class - R14719 DN 03/28/19
CASE;

// IF CTL.Sales Sold To Sub Class NE LCL.Sales Sold To Sub Class
IF CTL.Sales_Sold_To_Sub_Class <> LCL.Sales_Sold_To_Sub_Class;

// LCL.Sales Sold To Sub Class = CTL.Sales Sold To Sub Class
LCL.Sales_Sold_To_Sub_Class = CTL.Sales_Sold_To_Sub_Class;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?chg rcd sts
CASE;

// IF CTL.Record Status NE LCL.Record Status
IF CTL.Record_Status <> LCL.Record_Status;

// LCL.Record Status = CTL.Record Status
LCL.Record_Status = CTL.Record_Status;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Sales Sold To     CH) TYPE(CHGOBJ) FILE(PBB5REP)           AC2110628;
PARAMETER(RCD.Sales_Sold_To_Code);
PARAMETER(RCD.Sales_Sold_To_Desc);
PARAMETER(RCD.Sales_Sold_To_DP_Class);
PARAMETER(RCD.Sales_Sold_To_Sub_Class);
PARAMETER(RCD.Sales_Sold_To_Salesperson);
PARAMETER(RCD.Sales_Channel_Code);
PARAMETER(RCD.SC_Market_Code);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing after Data read

 // LCL.Sales Sold To Salesperson = DB1.Sales Sold To Salesperson
 LCL.Sales_Sold_To_Salesperson = DB1.Sales_Sold_To_Salesperson;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 CASE;

 // IF LCL.Sales Sold To Salesperson NE DB1.Sales Sold To Salesperson
 IF LCL.Sales_Sold_To_Salesperson <> DB1.Sales_Sold_To_Salesperson;

 EXECUTE FUNCTION(Upd SoldTo SalesRoute RT) TYPE(RTVOBJ) FILE(PBB6REP)           AC2118419;
 PARAMETER(DB1.Sales_Sold_To_Code);
 PARAMETER(PAR.Sales_Sold_To_Salesperson);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Upd SoldTo SalesRoute RT) TYPE(RTVOBJ) FILE(CAEOREP)           AC2118385;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.Sales_Route_Code);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg SoldTo SalesRoute CH) TYPE(CHGOBJ) FILE(CAEOREP)           AC2118406;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(PAR.Sales_Route_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

 ENDIF;

}


