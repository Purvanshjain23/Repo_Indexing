// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDBTEFR
// ?Date: 14.08.2025 Time: 03:27:47
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('P/S');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile header

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cooler Shrink %    RT) TYPE(RTVOBJ) FILE(CAAQREP)          AC1255852;
PARAMETER(CTL.Company_Number);
PARAMETER(PAR.Cooler_Shrink_Percent);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(Val Total Pop %       RT) TYPE(RTVOBJ) FILE(PDIZREP)           AC1302638;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(RCD.Population_Total_USR);
{
 //?USER: Initialize routine

 // PAR.Population % Total USR = CON.*ZERO
 PAR.Population_Total_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Population % Total USR = PAR.Population % Total USR + DB1.Population Percent
 PAR.Population_Total_USR = PAR.Population_Total_USR + DB1.Population_Percent;

}


//?Blink Population % Total
CASE;

// IF RCD.Population % Total USR is EQ 100
IF RCD.Population_Total_USR = 100;

// WRK.Blink USR = CND.*NO
WRK.Blink_USR = *NO;

//?Blink Population % Total
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Blink USR = CND.*YES
WRK.Blink_USR = *YES;

ENDIF;

//?USER: Initialize subfile record (new record)

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?USER: Validate subfile control

//?Calculate Live Weights
CASE;

// IF CTL.*CMD key is CF13
IF CTL.*CMD_key = '13';

EXECUTE FUNCTION(Clc Live Weight Ranges RT) TYPE(RTVOBJ) FILE(PDI1REP)          AC1528359;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Cutout_Matrix_Code);
PARAMETER(CTL.Effective_Month_Day);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Initialize routine

 // Call program Rtv Live Wgt Calc Flds XF.
 CALL PROGRAM(Rtv Live Wgt Calc Flds XF) ('PKOPXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Hot_Weight_Divisor);
 PARAMETER(PAR.Hot_Weight_Subtractor);
 PARAMETER(PAR.Hot_Weight_Multiplier);
 PARAMETER(PAR.Hot_Weight_Addition);

 //?USER: Process Data record

 //?minimum live weight
 EXECUTE FUNCTION(Clc Live Weight       IF) TYPE(EXCINTFUN)                      AC1528668;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Min_Carcass_Weight);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Min_Live_Weight);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?Execute internal function

  // Call program Rtv Live Wgt Calc Flds XF.
  CALL PROGRAM(Rtv Live Wgt Calc Flds XF) ('PKOPXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Hot_Weight_Divisor);
  PARAMETER(PAR.Hot_Weight_Subtractor);
  PARAMETER(PAR.Hot_Weight_Multiplier);
  PARAMETER(PAR.Hot_Weight_Addition);

  //?Live weight
  CASE;

  // IF PAR.Hot Weight Divisor NE WRK.ZERO
  IF PAR.Hot_Weight_Divisor <> WRK.ZERO;

  // Synon (17,5) work field =       * Calc Yield
  PGM.*Synon_175_work_field = ( ( ( PAR.Hot_Weight_Total / PAR.Hot_Weight_Divisor )
  - PAR.Hot_Weight_Subtractor ) * PAR.Hot_Weight_Multiplier ) + PAR.Hot_Weight_Addition;

  //?Live Weight
  CASE;

  // IF PGM.*Synon (17,5) work field NE WRK.ZERO
  IF PGM.*Synon_175_work_field <> WRK.ZERO;

  // PAR.USR Weight = PAR.Hot Weight Total / PGM.*Synon (17,5) work field *Rounded
  PAR.USR_Weight = PAR.Hot_Weight_Total / PGM.*Synon_175_work_field 'H';

  // PAR.Live Weight Total USR = PAR.USR Weight
  PAR.Live_Weight_Total_USR = PAR.USR_Weight;

  // PAR.Live Weight 5.0 usr = PAR.USR Weight * CON.1 *Rounded
  PAR.Live_Weight_5_0_usr = PAR.USR_Weight * 1 'H';

  // PAR.Live Weight 11.1 usr = PAR.USR Weight * CON.1 *Rounded
  PAR.Live_Weight_11_1_usr = PAR.USR_Weight * 1 'H';

  //?Live Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Live Weight Total USR = CON.*ZERO
  PAR.Live_Weight_Total_USR = *ZERO;

  // PAR.Live Weight 5.0 usr = CON.*ZERO
  PAR.Live_Weight_5_0_usr = *ZERO;

  // PAR.Live Weight 11.1 usr = CON.*ZERO
  PAR.Live_Weight_11_1_usr = *ZERO;

  ENDIF;

  //?Live weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PGM.*Synon (17,5) work field = CON.*ZERO
  PGM.*Synon_175_work_field = *ZERO;

  // PAR.Live Weight Total USR = CON.*ZERO
  PAR.Live_Weight_Total_USR = *ZERO;

  // PAR.Live Weight 5.0 usr = CON.*ZERO
  PAR.Live_Weight_5_0_usr = *ZERO;

  // PAR.Live Weight 11.1 usr = CON.*ZERO
  PAR.Live_Weight_11_1_usr = *ZERO;

  ENDIF;

 }

 //?maximum live weight
 EXECUTE FUNCTION(Clc Live Weight       IF) TYPE(EXCINTFUN)                      AC1528668;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Max_Carcass_Weight);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Max_Live_Weight);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 {
  //?Execute internal function

  // Call program Rtv Live Wgt Calc Flds XF.
  CALL PROGRAM(Rtv Live Wgt Calc Flds XF) ('PKOPXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Hot_Weight_Divisor);
  PARAMETER(PAR.Hot_Weight_Subtractor);
  PARAMETER(PAR.Hot_Weight_Multiplier);
  PARAMETER(PAR.Hot_Weight_Addition);

  //?Live weight
  CASE;

  // IF PAR.Hot Weight Divisor NE WRK.ZERO
  IF PAR.Hot_Weight_Divisor <> WRK.ZERO;

  // Synon (17,5) work field =       * Calc Yield
  PGM.*Synon_175_work_field = ( ( ( PAR.Hot_Weight_Total / PAR.Hot_Weight_Divisor )
  - PAR.Hot_Weight_Subtractor ) * PAR.Hot_Weight_Multiplier ) + PAR.Hot_Weight_Addition;

  //?Live Weight
  CASE;

  // IF PGM.*Synon (17,5) work field NE WRK.ZERO
  IF PGM.*Synon_175_work_field <> WRK.ZERO;

  // PAR.USR Weight = PAR.Hot Weight Total / PGM.*Synon (17,5) work field *Rounded
  PAR.USR_Weight = PAR.Hot_Weight_Total / PGM.*Synon_175_work_field 'H';

  // PAR.Live Weight Total USR = PAR.USR Weight
  PAR.Live_Weight_Total_USR = PAR.USR_Weight;

  // PAR.Live Weight 5.0 usr = PAR.USR Weight * CON.1 *Rounded
  PAR.Live_Weight_5_0_usr = PAR.USR_Weight * 1 'H';

  // PAR.Live Weight 11.1 usr = PAR.USR Weight * CON.1 *Rounded
  PAR.Live_Weight_11_1_usr = PAR.USR_Weight * 1 'H';

  //?Live Weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Live Weight Total USR = CON.*ZERO
  PAR.Live_Weight_Total_USR = *ZERO;

  // PAR.Live Weight 5.0 usr = CON.*ZERO
  PAR.Live_Weight_5_0_usr = *ZERO;

  // PAR.Live Weight 11.1 usr = CON.*ZERO
  PAR.Live_Weight_11_1_usr = *ZERO;

  ENDIF;

  //?Live weight
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PGM.*Synon (17,5) work field = CON.*ZERO
  PGM.*Synon_175_work_field = *ZERO;

  // PAR.Live Weight Total USR = CON.*ZERO
  PAR.Live_Weight_Total_USR = *ZERO;

  // PAR.Live Weight 5.0 usr = CON.*ZERO
  PAR.Live_Weight_5_0_usr = *ZERO;

  // PAR.Live Weight 11.1 usr = CON.*ZERO
  PAR.Live_Weight_11_1_usr = *ZERO;

  ENDIF;

 }

 EXECUTE FUNCTION(Chg Weight Range      CH) TYPE(CHGOBJ) FILE(PDI1REP)           AC1254505;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Cutout_Matrix_Code);
 PARAMETER(DB1.Effective_Month_Day);
 PARAMETER(DB1.Min_Carcass_Weight);
 PARAMETER(DB1.Max_Carcass_Weight);
 PARAMETER(PAR.Min_Live_Weight);
 PARAMETER(PAR.Max_Live_Weight);
 PARAMETER(DB1.Cooler_Shrink_Percent);
 PARAMETER(DB1.Std_Dressing_Yield_Pct);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Record_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record fields

//?Copy
CASE;

// IF RCD.*SFLSEL is *Copy
IF RCD.*SFLSEL = '3';

// Call program Cpy Weight Range      PV.
CALL PROGRAM(Cpy Weight Range      PV) ('PDB1PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(CTL.Cutout_Matrix_Desc);
PARAMETER(CTL.Name);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Edit cutout distribution (Loin-Eye)
CASE;

// IF RCD.*SFLSEL is Option 10
IF RCD.*SFLSEL = '10';

// Call program Edt Dist Loin-Eye     EF.
CALL PROGRAM(Edt Dist Loin-Eye     EF) ('PDS7EFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(CTL.Cutout_Matrix_Desc);
PARAMETER(CTL.Name);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Edit cutout distribution (Lean %)
CASE;

// IF RCD.*SFLSEL is Edit Opt7
IF RCD.*SFLSEL = '7'/'7';

// Call program Edt Dist Lean %       EF.
CALL PROGRAM(Edt Dist Lean %       EF) ('PDBZEFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(CTL.Name);
PARAMETER(CTL.Cutout_Matrix_Desc);
PARAMETER(PAR.Cutout_Matrix_Type);

EXECUTE FUNCTION(Val Total Pop %       RT) TYPE(RTVOBJ) FILE(PDIZREP)           AC1302638;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(RCD.Population_Total_USR);
{
 //?USER: Initialize routine

 // PAR.Population % Total USR = CON.*ZERO
 PAR.Population_Total_USR = *ZERO;

 //?USER: Process Data record

 // PAR.Population % Total USR = PAR.Population % Total USR + DB1.Population Percent
 PAR.Population_Total_USR = PAR.Population_Total_USR + DB1.Population_Percent;

}


//?Blink Population % Total
CASE;

// IF RCD.Population % Total USR is EQ 100
IF RCD.Population_Total_USR = 100;

// WRK.Blink USR = CND.*NO
WRK.Blink_USR = *NO;

//?Blink Population % Total
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Blink USR = CND.*YES
WRK.Blink_USR = *YES;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Edit cutout distribution (Backfat)
CASE;

// IF RCD.*SFLSEL is Opt 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Edt Dist Backfat      EF.
CALL PROGRAM(Edt Dist Backfat      EF) ('PDS5EFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Cutout_Matrix_Code);
PARAMETER(RCD.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(CTL.Cutout_Matrix_Desc);
PARAMETER(CTL.Name);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Validate subfile record relations

//?If cooler shrink eq 0 then plug in default
CASE;

// IF RCD.Cooler Shrink Percent is equal to zero
IF RCD.Cooler_Shrink_Percent = *ZERO;

// RCD.Cooler Shrink Percent = PAR.Cooler Shrink Percent
RCD.Cooler_Shrink_Percent = PAR.Cooler_Shrink_Percent;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Weight Range      CR) TYPE(CRTOBJ) FILE(PDI1REP)           AC1254504;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Cutout_Matrix_Code);
PARAMETER(CTL.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(RCD.Min_Live_Weight);
PARAMETER(RCD.Max_Live_Weight);
PARAMETER(RCD.Cooler_Shrink_Percent);
PARAMETER(RCD.Std_Dressing_Yield_Pct);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del Weight Range      IF) TYPE(EXCINTFUN) FILE(PDI1REP)        AC1255937;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Cutout_Matrix_Code);
PARAMETER(CTL.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
{
 //?Execute internal function

 //?*Delete Distribution and Items
 EXECUTE FUNCTION(Del Distribution      RT) TYPE(RTVOBJ) FILE(PDIZREP)           AC1255914;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 PARAMETER(PAR.Min_Carcass_Weight);
 PARAMETER(PAR.Max_Carcass_Weight);
 {
  //?USER: Process Data record

  //?*Delete Distribution and Items
  EXECUTE FUNCTION(Del Distribution      IF) TYPE(EXCINTFUN)                      AC1255934;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Cutout_Matrix_Code);
  PARAMETER(DB1.Effective_Month_Day);
  PARAMETER(DB1.Min_Carcass_Weight);
  PARAMETER(DB1.Max_Carcass_Weight);
  PARAMETER(DB1.Lean_Percent);
  {
   //?Execute internal function

   //?*Delete Items
   EXECUTE FUNCTION(Del Cutout Item       RT) TYPE(RTVOBJ) FILE(PDI4REP)           AC1255921;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Cutout_Matrix_Code);
   PARAMETER(PAR.Effective_Month_Day);
   PARAMETER(PAR.Min_Carcass_Weight);
   PARAMETER(PAR.Max_Carcass_Weight);
   PARAMETER(PAR.Lean_Percent);
   {
    //?USER: Process Data record

    //?*Delete Item
    EXECUTE FUNCTION(DLT Cutout Item        DL) TYPE(DLTOBJ) FILE(PDI4REP)          AC1255834;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Cutout_Matrix_Code);
    PARAMETER(DB1.Effective_Month_Day);
    PARAMETER(DB1.Min_Carcass_Weight);
    PARAMETER(DB1.Max_Carcass_Weight);
    PARAMETER(DB1.Lean_Percent);
    PARAMETER(DB1.Item_Code);
   }

   //?*Delete Distribution
   EXECUTE FUNCTION(DLT Distribution       DL) TYPE(DLTOBJ) FILE(PDIZREP)          AC1254598;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Cutout_Matrix_Code);
   PARAMETER(PAR.Effective_Month_Day);
   PARAMETER(PAR.Min_Carcass_Weight);
   PARAMETER(PAR.Max_Carcass_Weight);
   PARAMETER(PAR.Lean_Percent);
  }

 }

 EXECUTE FUNCTION(Del Dist Backfat      RT) TYPE(RTVOBJ) FILE(PDJ0REP)           AC1333226;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 PARAMETER(PAR.Min_Carcass_Weight);
 PARAMETER(PAR.Max_Carcass_Weight);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del Distribution      IF) TYPE(EXCINTFUN)                      AC1934938;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Cutout_Matrix_Code);
  PARAMETER(DB1.Effective_Month_Day);
  PARAMETER(DB1.Min_Carcass_Weight);
  PARAMETER(DB1.Max_Carcass_Weight);
  PARAMETER(DB1.Backfat_Inches);
  {
   //?Execute internal function

   //?*Delete Distribution
   EXECUTE FUNCTION(DLT Dist Backfat       DL) TYPE(DLTOBJ) FILE(PDJ0REP)          AC1333075;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Cutout_Matrix_Code);
   PARAMETER(PAR.Effective_Month_Day);
   PARAMETER(PAR.Min_Carcass_Weight);
   PARAMETER(PAR.Max_Carcass_Weight);
   PARAMETER(PAR.Backfat_Inches);
  }

 }

 EXECUTE FUNCTION(Del Dist Loin-Eye     RT) TYPE(RTVOBJ) FILE(PDJ1REP)           AC1333227;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 PARAMETER(PAR.Min_Carcass_Weight);
 PARAMETER(PAR.Max_Carcass_Weight);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(DLT Dist Loin-Eye      DL) TYPE(DLTOBJ) FILE(PDJ1REP)          AC1333094;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Cutout_Matrix_Code);
  PARAMETER(DB1.Effective_Month_Day);
  PARAMETER(DB1.Min_Carcass_Weight);
  PARAMETER(DB1.Max_Carcass_Weight);
  PARAMETER(DB1.Loin_Eye_Depth);
 }

 //?*Delete Weight Range
 EXECUTE FUNCTION(DLT Weight Range       DL) TYPE(DLTOBJ) FILE(PDI1REP)          AC1254506;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Cutout_Matrix_Code);
 PARAMETER(PAR.Effective_Month_Day);
 PARAMETER(PAR.Min_Carcass_Weight);
 PARAMETER(PAR.Max_Carcass_Weight);
}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Weight Range      CH) TYPE(CHGOBJ) FILE(PDI1REP)           AC1254505;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Cutout_Matrix_Code);
PARAMETER(CTL.Effective_Month_Day);
PARAMETER(RCD.Min_Carcass_Weight);
PARAMETER(RCD.Max_Carcass_Weight);
PARAMETER(RCD.Min_Live_Weight);
PARAMETER(RCD.Max_Live_Weight);
PARAMETER(RCD.Cooler_Shrink_Percent);
PARAMETER(RCD.Std_Dressing_Yield_Pct);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


