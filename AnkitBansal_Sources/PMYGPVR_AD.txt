// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMYGPVR
// ?Date: 14.08.2025 Time: 03:44:30
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?***** Change Log and Comments
DO;

//?** 06/14/2013 LJB E002587
//?** Change Ship To Customer to Bill To Customer.
//?** Add Customer Purchase Order#. Must be blank if Order# or Load
//?** ID are entered. Allow 'Begins with' PO# to be entered.
//?** 10/29/2009 LJB E00517
//?** Allow Customer # to be blank if either a Load ID or an
//?** order number is entered. If Customer and Order are both entered
//?** then validate. If Customer and Load ID are both entered, error.
ENDDO;

//?USER: Validate fields

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?** F4 Bill To Customer
CASE;

// IF PGM.*Cursor field <IS> DTL.A/R Customer Number
IF PGM.*Cursor_field = DTL.AR_Customer_Number;

// WRK.Ship To Customer = CON.*ZERO
WRK.Ship_To_Customer = *ZERO;

// Call program SEL Bill To for ContrctSR.
CALL PROGRAM(SEL Bill To for ContrctSR) ('PBJASRR');
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(DTL.AR_Customer_Number);

CASE;

// IF DTL.A/R Customer Number is not equal to zero
IF DTL.AR_Customer_Number <> *ZERO;

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.AR_Customer_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Ship To Name          DRV = CND.blanks
DTL.Ship_To_Name_DRV = *BLANK;

ENDIF;

ENDIF;

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.AR_Customer_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate relations

//?** Customer number is required if Load ID, Order#, PO# are blanks
CASE;

// IF DTL.A/R Customer Number is equal to zero
IF DTL.AR_Customer_Number = *ZERO;

// AND DTL.Order Number is Equal to zeros
AND DTL.Order_Number = *ZERO;

// AND DTL.Load ID is Blank
AND DTL.Load_ID = *ZERO;

// AND DTL.USR Customer PO # is *Blanks
AND DTL.USR_Customer_PO_# = *BLANK;

// Send error message - 'Customer is not found.'
ERROR(USR0525);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

//?** Customer number & Load ID must match on order      E00517
CASE;

// IF DTL.A/R Customer Number is not equal to zero
IF DTL.AR_Customer_Number <> *ZERO;

// AND DTL.Load ID is NE Blank
AND DTL.Load_ID <> *ZERO;

EXECUTE FUNCTION(VAL ARCust on a Load   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2068466;
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Load_ID);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.A/R Customer Number EQ PAR.A/R Customer Number
 IF DB1.AR_Customer_Number = PAR.AR_Customer_Number;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer is not an order on this Load'
ERROR(USR4198);
MSGPARM(DTL.Ship_To_Customer);

ENDIF;

ENDIF;

//?** Customer number & Order# must match for order      E00517
CASE;

// IF DTL.A/R Customer Number is not equal to zero
IF DTL.AR_Customer_Number <> *ZERO;

// AND DTL.Order Number is Not equal to zeros
AND DTL.Order_Number <> *ZERO;

EXECUTE FUNCTION(RTV Bill,Shp,PO#,AType RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2068467;
PARAMETER(DTL.Order_Number);
PARAMETER(WRK.AR_Customer_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(WRK.USR_Customer_PO_#);
PARAMETER(NLL.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.A/R Customer Number NE WRK.A/R Customer Number
IF DTL.AR_Customer_Number <> WRK.AR_Customer_Number;

// Send error message - 'Customer is not on this order number'
ERROR(USR4197);
MSGPARM(DTL.AR_Customer_Number);

ENDIF;

ENDIF;

//?** Error if From date is zeros and Order#, Load & PO# are blank
CASE;

// IF DTL.USR From Date is not entered
IF DTL.USR_From_Date = *ZERO;

// AND DTL.Order Number is Equal to zeros
AND DTL.Order_Number = *ZERO;

// AND DTL.Load ID is Blank
AND DTL.Load_ID = *ZERO;

// AND DTL.USR Customer PO # is *Blanks
AND DTL.USR_Customer_PO_# = *BLANK;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.USR_From_Date);

ENDIF;

//?** Error if from date is entered and exceeds through date
CASE;

// IF DTL.USR From Date is Entered
IF DTL.USR_From_Date <> *ZERO;

//?** Error if from date exceeds through date
CASE;

// IF DTL.USR From Date GT DTL.USR Through Date
IF DTL.USR_From_Date > DTL.USR_Through_Date;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.USR_From_Date);

ENDIF;

ENDIF;

//?** Order or Load, not both (both can be blank, however.)
CASE;

// IF DTL.Order Number is Greater then zero
IF DTL.Order_Number > *ZERO;

// AND DTL.Load ID is NE Blank
AND DTL.Load_ID <> *ZERO;

// Send error message - 'Enter Order # or Load ID, not both'
ERROR(USR4155);
MSGPARM(DTL.Order_Number);

ENDIF;

//?** If Load or Order, no Purchase Order#               E002587
CASE;

// IF DTL.Order Number is Greater then zero
IF ( DTL.Order_Number > *ZERO;

// OR DTL.Load ID is NE Blank
OR DTL.Load_ID <> *ZERO );

// AND DTL.USR Customer PO # is not *Blanks
AND DTL.USR_Customer_PO_# <> *BLANK;

// Send error message - 'Purchase Order cannot be entered with Load ID or Order Number'
ERROR(USR4616);
MSGPARM(DTL.USR_Customer_PO_#);

ENDIF;

//?USER: User defined action

CASE;

// IF DTL.Load ID is NE Blank
IF DTL.Load_ID <> *ZERO;

//?* This should never happen, Bill To is now required
CASE;

// IF DTL.A/R Customer Number is equal to zero
IF DTL.AR_Customer_Number = *ZERO;

EXECUTE FUNCTION(RTV Bill To by Load ID RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2069005;
PARAMETER(DTL.Load_ID);
PARAMETER(LCL.Bill_to_Customer);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 //?* Get first A/R Customer then quit
 CASE;

 // IF DB1.A/R Customer Number is not equal to zero
 IF DB1.AR_Customer_Number <> *ZERO;

 // PAR.Bill to Customer = DB1.A/R Customer Number
 PAR.Bill_to_Customer = DB1.AR_Customer_Number;

 QUIT;

 ENDIF;

}


ENDIF;

// Call program EDT JCO Gate for 1Load EF.
CALL PROGRAM(EDT JCO Gate for 1Load EF) ('PNJBEFR');
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.USR_From_Date);
PARAMETER(DTL.Load_ID);
PARAMETER(DTL.USR_Through_Date);

// IF DTL.Order Number is Greater then zero
IF DTL.Order_Number > *ZERO;

//?* This should never happen, Bill To is now required
CASE;

// IF DTL.A/R Customer Number is equal to zero
IF DTL.AR_Customer_Number = *ZERO;

EXECUTE FUNCTION(RTV Bill,Shp,PO#,AType RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2068467;
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(WRK.USR_Customer_PO_#);
PARAMETER(NLL.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// Call program EDT Gate Prc Upd-ARCst EF.
CALL PROGRAM(EDT Gate Prc Upd-ARCst EF) ('PBI5EFR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.USR_Customer_PO_#);
PARAMETER(DTL.USR_From_Date);
PARAMETER(DTL.USR_Through_Date);

// IF *OTHERWISE
IF *OTHERWISE;

//?* This should never happen, Bill To is now required
CASE;

// IF DTL.A/R Customer Number is equal to zero
IF DTL.AR_Customer_Number = *ZERO;

EXECUTE FUNCTION(RTV Bill,Shp,PO#,AType RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2068467;
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(DTL.USR_Customer_PO_#);
PARAMETER(NLL.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// Call program EDT Gate Prc Upd-ARCst EF.
CALL PROGRAM(EDT Gate Prc Upd-ARCst EF) ('PBI5EFR');
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Order_Number);
PARAMETER(DTL.AR_Customer_Number);
PARAMETER(DTL.USR_Customer_PO_#);
PARAMETER(DTL.USR_From_Date);
PARAMETER(DTL.USR_Through_Date);

ENDIF;

