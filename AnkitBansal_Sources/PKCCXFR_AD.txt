// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKCCXFR
// ?Date: 14.08.2025 Time: 02:50:59
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// Call program Val Application/User  XF.
CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
PARAMETER(WRK.Oms_Warehouse_Code);
PARAMETER(PAR.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(WRK.Oms_SalesPerson_Code);
PARAMETER(WRK.Oms_Allow_Multi_Company);
PARAMETER(WRK.Oms_Default_Printer);
PARAMETER(WRK.Oms_Name);
PARAMETER(WRK.Oms_System_Value_Alpha);
PARAMETER(WRK.Oms_Access_Denied_Y_N);

EXECUTE FUNCTION(Crt Primal Scl Dtl    RT) TYPE(RTVOBJ) FILE(PKDJCPP)           AB1174501;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.PSA_Sequence);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Check Numeric
 DO;

 // WRK.Error Type Found = CND.No
 WRK.Error_Type_Found = 'N';

 // WRK.Text 5                USR = DB1.PS Count
 WRK.Text_5_USR = DB1.PS_Count;

 // Execute function RPG Testn for 5 pos   US.
 EXECUTE FUNCTION(RPG Testn for 5 pos   US) TYPE(EXCUSRSRC) ('PLFBUFR');
 PARAMETER(WRK.Text_5_USR);
 {
  C                     TESTN          WUKPTX  5  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'ERROR  ' WULMST
  C                     ELSE
  C                     MOVE '       ' WULMST
  C                     END
 }

 CASE;

 // IF WRK.Return Code USR is Error Found
 IF WRK.Return_Code_USR = 'ERROR';

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 // WRK.Text 2 USR = DB1.PS Scale ID
 WRK.Text_2_USR = DB1.PS_Scale_ID;

 // Execute function RPG Testn for 2 pos   US.
 EXECUTE FUNCTION(RPG Testn for 2 pos   US) TYPE(EXCUSRSRC) ('PLFCUFR');
 PARAMETER(WRK.Text_2_USR);
 {
  C                     TESTN          WUFRCD  2  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'ERROR  ' WULMST
  C                     ELSE
  C                     MOVE '       ' WULMST
  C                     END
 }

 //?Scale Id
 CASE;

 // IF WRK.Return Code USR is Error Found
 IF WRK.Return_Code_USR = 'ERROR';

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 // WRK.Text 3                USR = SUBSTRING(DB1.PS Weight,CON.1,CON.1)
 WRK.Text_3_USR = SUBSTRING(DB1.PS_Weight:1:1);

 // WRK.Text 4                USR = SUBSTRING(DB1.PS Weight,CON.2,CON.1)
 WRK.Text_4_USR = SUBSTRING(DB1.PS_Weight:2:1);

 // WRK.Text 1 USR = SUBSTRING(DB1.PS Weight,CON.4,CON.1)
 WRK.Text_1_USR = SUBSTRING(DB1.PS_Weight:4:1);

 //?Weight
 CASE;

 // IF WRK.Text 3                USR is Numeric
 IF WRK.Text_3_USR >= '0';
 AND WRK.Text_3_USR <= '9';

 // AND WRK.Text 4                USR is Numeric
 AND WRK.Text_4_USR >= '0';
 AND WRK.Text_4_USR <= '9';

 // AND WRK.Text 1 USR is Numeric
 AND WRK.Text_1_USR >= '0';
 AND WRK.Text_1_USR <= '9';

 //?Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 // WRK.Text 2 USR = DB1.PS Month
 WRK.Text_2_USR = DB1.PS_Month;

 // Execute function RPG Testn for 2 pos   US.
 EXECUTE FUNCTION(RPG Testn for 2 pos   US) TYPE(EXCUSRSRC) ('PLFCUFR');
 PARAMETER(WRK.Text_2_USR);
 {
  C                     TESTN          WUFRCD  2  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'ERROR  ' WULMST
  C                     ELSE
  C                     MOVE '       ' WULMST
  C                     END
 }

 //?Month
 CASE;

 // IF WRK.Return Code USR is Error Found
 IF WRK.Return_Code_USR = 'ERROR';

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 // WRK.Text 2 USR = DB1.PS Day
 WRK.Text_2_USR = DB1.PS_Day;

 // Execute function RPG Testn for 2 pos   US.
 EXECUTE FUNCTION(RPG Testn for 2 pos   US) TYPE(EXCUSRSRC) ('PLFCUFR');
 PARAMETER(WRK.Text_2_USR);
 {
  C                     TESTN          WUFRCD  2  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'ERROR  ' WULMST
  C                     ELSE
  C                     MOVE '       ' WULMST
  C                     END
 }

 //?Day
 CASE;

 // IF WRK.Return Code USR is Error Found
 IF WRK.Return_Code_USR = 'ERROR';

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 // WRK.Text 2 USR = DB1.PS Hour
 WRK.Text_2_USR = DB1.PS_Hour;

 // Execute function RPG Testn for 2 pos   US.
 EXECUTE FUNCTION(RPG Testn for 2 pos   US) TYPE(EXCUSRSRC) ('PLFCUFR');
 PARAMETER(WRK.Text_2_USR);
 {
  C                     TESTN          WUFRCD  2  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'ERROR  ' WULMST
  C                     ELSE
  C                     MOVE '       ' WULMST
  C                     END
 }

 //?Hour
 CASE;

 // IF WRK.Return Code USR is Error Found
 IF WRK.Return_Code_USR = 'ERROR';

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 // WRK.Text 2 USR = DB1.PS Minute
 WRK.Text_2_USR = DB1.PS_Minute;

 // Execute function RPG Testn for 2 pos   US.
 EXECUTE FUNCTION(RPG Testn for 2 pos   US) TYPE(EXCUSRSRC) ('PLFCUFR');
 PARAMETER(WRK.Text_2_USR);
 {
  C                     TESTN          WUFRCD  2  60
  C           *IN60     IFEQ '0'
  C                     MOVE 'ERROR  ' WULMST
  C                     ELSE
  C                     MOVE '       ' WULMST
  C                     END
 }

 //?Minute
 CASE;

 // IF WRK.Return Code USR is Error Found
 IF WRK.Return_Code_USR = 'ERROR';

 // WRK.Error Type Found = CND.Critical Error
 WRK.Error_Type_Found = 'Y';

 ENDIF;

 ENDDO;

 //?Setup/Create Detail Record From Primal Cut Scale
 CASE;

 // IF WRK.Error Type Found is Critical Error
 IF WRK.Error_Type_Found = 'Y';

 //?Setup/Create Detail Record From Primal Cut Scale
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.PSA Scale ID = DB1.PS Scale ID
 PAR.PSA_Scale_ID = DB1.PS_Scale_ID;

 // WRK.Year 2 USR = CVTVAR(JOB.*Job year)
 WRK.Year_2_USR = CVTVAR(JOB.*Job_year);

 // WRK.Year Alpha Usr = CONCAT(WRK.Year 2 USR,DB1.PS Month,CON.*ZERO)
 WRK.Year_Alpha_Usr = WRK.Year_2_USR + DB1.PS_Month (*ZERO);

 // WRK.Code USR = CONCAT(WRK.Year Alpha Usr,DB1.PS Day,CON.*ZERO)
 WRK.Code_USR = WRK.Year_Alpha_Usr + DB1.PS_Day (*ZERO);

 //?Yr 2000
 CASE;

 // IF WRK.Year 2 USR is LE 39
 IF WRK.Year_2_USR <= '39';

 // WRK.Date Alpha USR = CONCAT(CON.1,WRK.Code USR,CON.*ZERO)
 WRK.Date_Alpha_USR = '1' + WRK.Code_USR (*ZERO);

 //?Yr 2000
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.Date Alpha USR = CONCAT(CON.0,WRK.Code USR,CON.*ZERO)
 WRK.Date_Alpha_USR = '0' + WRK.Code_USR (*ZERO);

 ENDIF;

 // PAR.PSA Cut Date = CVTVAR(WRK.Date Alpha USR)
 PAR.PSA_Cut_Date = CVTVAR(WRK.Date_Alpha_USR);

 // WRK.Year Alpha Usr = CONCAT(DB1.PS Hour,DB1.PS Minute,CON.*ZERO)
 WRK.Year_Alpha_Usr = DB1.PS_Hour + DB1.PS_Minute (*ZERO);

 // WRK.Year 2 USR = CVTVAR(CON.*BLANK)
 WRK.Year_2_USR = CVTVAR(*BLANK);

 // WRK.Code USR = CONCAT(WRK.Year Alpha Usr,WRK.Year 2 USR,CON.*ZERO)
 WRK.Code_USR = WRK.Year_Alpha_Usr + WRK.Year_2_USR (*ZERO);

 // PAR.PSA Cut Time = CVTVAR(WRK.Code USR)
 PAR.PSA_Cut_Time = CVTVAR(WRK.Code_USR);

 // PAR.PSA Sequence = PAR.PSA Sequence + CON.1
 PAR.PSA_Sequence = PAR.PSA_Sequence + 1;

 // PAR.PSA Count = CVTVAR(DB1.PS Count)
 PAR.PSA_Count = CVTVAR(DB1.PS_Count);

 // WRK.Text 2 USR = SUBSTRING(DB1.PS Weight,CON.1,CON.2)
 WRK.Text_2_USR = SUBSTRING(DB1.PS_Weight:1:2);

 // WRK.Number 2 USR = CVTVAR(WRK.Text 2 USR)
 WRK.Number_2_USR = CVTVAR(WRK.Text_2_USR);

 // WRK.Text 1 USR = SUBSTRING(DB1.PS Weight,CON.4,CON.1)
 WRK.Text_1_USR = SUBSTRING(DB1.PS_Weight:4:1);

 // WRK.Number 1 USR = CVTVAR(WRK.Text 1 USR)
 WRK.Number_1_USR = CVTVAR(WRK.Text_1_USR);

 // PSA Weight
 PAR.PSA_Weight = WRK.Number_2_USR + ( WRK.Number_1_USR / 10 );

 // PAR.PSA Tattoo = CON.*ZERO
 PAR.PSA_Tattoo = *ZERO;

 // PAR.PSA Shift = DB1.PS Shift
 PAR.PSA_Shift = DB1.PS_Shift;

 EXECUTE FUNCTION(Crt Primal Scale Dtl  CR) TYPE(CRTOBJ) FILE(PKDLCPP)           AB1174498;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.PSA_Scale_ID);
 PARAMETER(PAR.PSA_Cut_Date);
 PARAMETER(PAR.PSA_Cut_Time);
 PARAMETER(PAR.PSA_Sequence);
 PARAMETER(PAR.PSA_Count);
 PARAMETER(PAR.PSA_Weight);
 PARAMETER(PAR.PSA_Tattoo);
 PARAMETER(PAR.PSA_Shift);
 PARAMETER(*BLANK);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

}


//?7/23/04 Comment because the new Van deberg scale will do this in pleuxfr
//?8/23/04 ready for prod
//?10/4/04 not ready for prod
//?10/26/04 ready for prod
//?4/03/02   BUILD EXPORT LOIN WEIGHT RANGE SUMMARY FOR THE CUT DATE(S)
CASE;

// IF LCL.Date USR is NE 0
IF LCL.Date_USR <> 0;

// Call program Rtv Loin Range Count  XF.
CALL PROGRAM(Rtv Loin Range Count  XF) ('PKYMXFR');
PARAMETER(LCL.Date_USR);

ENDIF;

CASE;

// IF LCL.Date 2 USR is NE 0
IF LCL.Date_2_USR <> 0;

// Call program Rtv Loin Range Count  XF.
CALL PROGRAM(Rtv Loin Range Count  XF) ('PKYMXFR');
PARAMETER(LCL.Date_2_USR);

ENDIF;

// Execute command - 'Clear Physical File Member'
EXECUTE COMMAND(PRK0481);
PARAMETER('PKDKCPP');
PARAMETER('CLRPKDK');

// Execute command - 'Clear Physical File Member'
EXECUTE COMMAND(PRK0481);
PARAMETER('PKDJCPP');
PARAMETER('CLRPKDJ');

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('PRKPRMUP');
PARAMETER(WRK.Office_Dist_List_USR);

// Retrieve message - 'Primal Cut Scale Transactions has been uploaded. &2 &1'
WRK.Office_Dist_Message_USR = RTVMSG(PRK0663);
PARAMETER(JOB.*Job_date);
PARAMETER(PAR.CC_Company_Number);

// Call program Snd Pager Msg (MPLUS) UP.
CALL PROGRAM(Snd Pager Msg (MPLUS) UP) ('POMSUPC');
PARAMETER(WRK.Office_Dist_List_USR);
PARAMETER(WRK.Office_Dist_Message_USR);

