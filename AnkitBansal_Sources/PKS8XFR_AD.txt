// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKS8XFR
// ?Date: 14.08.2025 Time: 02:52:49
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modification history
DO;

//?E9815 JBB  3/30/17  Adding Company to Producer History files
//?  Recompiled only for change in RTVOBJ Rtv GA Prod Hist Avgs RT
//?  which is in RTVOBJ Bal All Tattoos      RT.
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?                      length from 5 to 7.
ENDDO;

//?Load all validation errors for min/max
EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


EXECUTE FUNCTION(Bal All Tattoos       RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1226401;
PARAMETER(PAR.CC_Company_Number);
PARAMETER(PAR.Current_Kill_Date);
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('BALHLDOVR');
 PARAMETER(LCL.Auto_Balance_HldOvr_USR);

 //?USER: Process Data record

 //?Process Subject & Market Hogs
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // OR DB1.TH Hog Class Type is Subject
 OR DB1.TH_Hog_Class_Type = 'S';

 //?If receiving or slaughter processing code
 CASE;

 // IF DB1.THP Process Code is Receiving
 IF DB1.THP_Process_Code = 'RECV';

 // OR DB1.THP Process Code is Slaughter
 OR DB1.THP_Process_Code = 'SLG';

 //?Transfer Carcasses for Hold Over.
 CASE;

 // IF DB1.TH Held Over Record is Yes
 IF DB1.TH_Held_Over_Record = 'Y';

 EXECUTE FUNCTION(Rtv/Trnsfr Eval Trns  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1231627;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 {
  //?USER: Initialize routine

  //?S13236 RMC 6/12/18 fixed parms on call to rebalance the FROM date. It
  //?  was passing in DB1. which is from the last day's records. it needs to
  //?  pass in the PAR context previousely retrieved.  and only do it if there
  //? are transfer carcasses
  // LCL.First Time Flag Usr = CND.Yes
  LCL.First_Time_Flag_Usr = 'Y';

  //?USER: Process Data record

  CASE;

  // IF LCL.First Time Flag Usr is Yes
  IF LCL.First_Time_Flag_Usr = 'Y';

  // LCL.First Time Flag Usr = CND.No
  LCL.First_Time_Flag_Usr = 'N';

  // Net Head Usr
  LCL.Net_Head_Usr = ( DB1.TH_Head_Received - DB1.TH_Yard_Deads ) - DB1.TH_Head_Condemned;

  // LCL.Transfer Carcasses    USR = LCL.Net Head Usr - DB1.TH Head Killed
  LCL.Transfer_Carcasses_USR = LCL.Net_Head_Usr - DB1.TH_Head_Killed;

  // LCL.TH Kill Date = DB1.TH Kill Date
  LCL.TH_Kill_Date = DB1.TH_Kill_Date;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Kill Date Usr = DB1.TH Kill Date
  LCL.Kill_Date_Usr = DB1.TH_Kill_Date;

  ENDIF;

  //?USER: Exit processing

  CASE;

  // IF LCL.Transfer Carcasses    USR is *Zeros
  IF LCL.Transfer_Carcasses_USR = *ZERO;

  // IF LCL.Transfer Carcasses    USR is GT Zero
  IF LCL.Transfer_Carcasses_USR > *ZERO;

  //?Transfer from the Held Over To Date.
  EXECUTE FUNCTION(Rtv/Trnsfr Eval Trns  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1227416;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.BOH_Buy_Order_Number);
  PARAMETER(PAR.BOL_Load_Number);
  PARAMETER(PAR.TH_Tattoo_Number);
  PARAMETER(LCL.Kill_Date_Usr);
  PARAMETER(LCL.TH_Kill_Date);
  PARAMETER(LCL.Transfer_Carcasses_USR);
  {
   //?USER: Process Data record

   CASE;

   // IF PAR.Transfer Carcasses    USR is GT Zero
   IF PAR.Transfer_Carcasses_USR > *ZERO;

   //?9/29/2010 slm check for deleted record
   //?do not move the record if this is a deleted record
   CASE;

   // IF DB1.RS Record Status is Flag for Purge
   IF DB1.RS_Record_Status = 'D';

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
   PARAMETER(DB1.ET_Company_Number);
   PARAMETER(PAR.Kill_Date_Usr);
   PARAMETER(WRK.ET_Scale_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.ET_Scale_Sequence_Number = 1;

    QUIT;

    //?USER: Process Data record

    CASE;

    // IF DB1.ET Scale Sequence Number is Entry Allowed
    IF DB1.ET_Scale_Sequence_Number >= 000001;
    AND DB1.ET_Scale_Sequence_Number <= 699999;

    // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
    PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

    QUIT;

    ENDIF;

   }

   EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
   PARAMETER(DB1.ET_Company_Number);
   PARAMETER(PAR.Kill_Date_Usr);
   PARAMETER(WRK.ET_Scale_Sequence_Number);
   PARAMETER(DB1.ET_Carcass_Number);
   PARAMETER(DB1.ET_Carcass_Number_Insert);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(DB1.ET_Lot);
   PARAMETER(DB1.ET_Shift);
   PARAMETER(DB1.ET_Hot_Wgt);
   PARAMETER(DB1.ET_Backfat_Thickness_Inch);
   PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
   PARAMETER(DB1.ET_Lean_Percent_NPPC);
   PARAMETER(DB1.ET_Backfat_Thickness_MM);
   PARAMETER(DB1.ET_Loineye_Depth_MM);
   PARAMETER(DB1.ET_Light_Reflectance_MM);
   PARAMETER(DB1.ET_Lean_Percent_FOM);
   PARAMETER(DB1.ET_Light_Reflectance);
   PARAMETER(DB1.ET_Trim_Area);
   PARAMETER(DB1.ET_Carcass_Sex);
   PARAMETER(DB1.ET_Error_Sts);
   PARAMETER(DB1.ET_Record_Add_Del_Sts);
   PARAMETER(DB1.ET_Record_Created_W_Avg);
   PARAMETER(DB1.ET_Record_Created_Status);
   PARAMETER(DB1.ET_User_Error_Override);
   PARAMETER(DB1.ET_Adjust_Add_Type);
   PARAMETER(DB1.ET_Broken_Back_Sts);
   PARAMETER(DB1.ET_Unused_Sts_2);
   PARAMETER(DB1.ET_Adjust_Add_Source);
   PARAMETER(DB1.ET_Unused_Sts_4);
   PARAMETER(DB1.ET_Unused_Sts_5);
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.Kill_Date_Usr);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   PARAMETER(DB1.RU_Date);
   PARAMETER(DB1.RU_Time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(*MISSING);
    PARAMETER(*MISSING);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   EXECUTE FUNCTION(Dlt Eval Trans        DL) TYPE(DLTOBJ) FILE(PKBVCPP)           AB1102933;
   PARAMETER(DB1.ET_Company_Number);
   PARAMETER(DB1.ET_Kill_Date);
   PARAMETER(DB1.ET_Scale_Sequence_Number);
   PARAMETER(DB1.ET_Carcass_Number);
   PARAMETER(DB1.ET_Carcass_Number_Insert);
   // PAR.Transfer Carcasses    USR = PAR.Transfer Carcasses    USR - CON.1
   PAR.Transfer_Carcasses_USR = PAR.Transfer_Carcasses_USR - 1;

   ENDIF;

   ENDIF;

  }

  //?RMC - moved here from below
  EXECUTE FUNCTION(Rtv Tattoo 4/Balance  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230440;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(LCL.TH_Kill_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Group_Reference);
  PARAMETER(PAR.TH_Live_Purchase_UOM);
  PARAMETER(PAR.TH_Live_Purchase_Price);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(PAR.TH_Resale_UOM);
  PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(PAR.TH_Pricing_Date);
  PARAMETER(PAR.TH_Resale_Spread_Sts);
  PARAMETER(PAR.TH_Dead_On_Arrival);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Yard_Deads);
  PARAMETER(PAR.TH_Held_Over);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Head_Accepted);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Hot_Wgt);
  PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Tot_Backfat_Inches);
  PARAMETER(PAR.TH_Tot_Light_Reflectance);
  PARAMETER(PAR.TH_Avg_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Hot_Wgt);
  PARAMETER(PAR.TH_Avg_Light_Reflectance);
  PARAMETER(PAR.TH_Avg_Lean_Percent);
  PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Avg_Backfat);
  PARAMETER(PAR.TH_Std_Yield_Percent);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.TH_Yield_Difference);
  PARAMETER(PAR.TH_Recalc_Live_Wgt);
  PARAMETER(PAR.TH_CM_Market_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
  PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.TH_CM_Base_Carcass_Value);
  PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
  PARAMETER(PAR.TH_Deduction_Amt);
  PARAMETER(PAR.TH_Total_Net_WO_Adds);
  PARAMETER(PAR.TH_Carcass_Net_Amt);
  PARAMETER(PAR.TH_Additions_Amt);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(PAR.TH_Accrual_Amount);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.TH_Calc_Net_Sts);
  PARAMETER(PAR.TH_Payment_Sts);
  PARAMETER(PAR.TH_Bal_to_Kill_Gen);
  PARAMETER(PAR.TH_Commission_A_P_Voucher);
  PARAMETER(PAR.TH_Voucher_Payment_Date);
  PARAMETER(PAR.TH_User_Error_Override);
  PARAMETER(PAR.TH_Held_Over_Record);
  PARAMETER(PAR.TH_Sex);
  PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
  PARAMETER(PAR.TH_Commission_Paid_Date);
  PARAMETER(PAR.TH_Actual_Check_Date);
  PARAMETER(PAR.TH_Shipped_Weight);
  PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(PAR.TH_FFLI);
  PARAMETER(PAR.TH_Kill_Product_Value);
  PARAMETER(PAR.TH_Cut_Product_Value);
  PARAMETER(PAR.TH_Render_Product_Value);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(PAR.TH_CM_Gross_Live_CWT);
  PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
  PARAMETER(PAR.TH_Source_Type);
  PARAMETER(PAR.TH_Scale_Ticket_Sts);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(PAR.TH_Source_Code);
  PARAMETER(PAR.TH_Hog_Class_Type);
  PARAMETER(PAR.TH_Posted_to_HPS_Flag);
  PARAMETER(PAR.TH_Schedule_Kill_Shift);
  PARAMETER(PAR.TH_Shift_Held_Over);
  PARAMETER(PAR.DF_Defect_Code);
  PARAMETER(PAR.THP_Process_Code);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.HB_Buyer_Code);
  PARAMETER(PAR.GN_Genetic_Code);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?RMC chg to PAR to pick up orig kill date fields
  // Call program Bal/Val Tattoo        XF.
  CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(LCL.TH_Kill_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Group_Reference);
  PARAMETER(PAR.TH_Live_Purchase_UOM);
  PARAMETER(PAR.TH_Live_Purchase_Price);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(PAR.TH_Resale_UOM);
  PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(PAR.TH_Pricing_Date);
  PARAMETER(PAR.TH_Resale_Spread_Sts);
  PARAMETER(PAR.TH_Dead_On_Arrival);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Yard_Deads);
  PARAMETER(PAR.TH_Held_Over);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Head_Accepted);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Hot_Wgt);
  PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Tot_Backfat_Inches);
  PARAMETER(PAR.TH_Tot_Light_Reflectance);
  PARAMETER(PAR.TH_Avg_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Hot_Wgt);
  PARAMETER(PAR.TH_Avg_Light_Reflectance);
  PARAMETER(PAR.TH_Avg_Lean_Percent);
  PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Avg_Backfat);
  PARAMETER(PAR.TH_Std_Yield_Percent);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.TH_Yield_Difference);
  PARAMETER(PAR.TH_Recalc_Live_Wgt);
  PARAMETER(PAR.TH_CM_Market_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
  PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.TH_CM_Base_Carcass_Value);
  PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
  PARAMETER(PAR.TH_Deduction_Amt);
  PARAMETER(PAR.TH_Total_Net_WO_Adds);
  PARAMETER(PAR.TH_Carcass_Net_Amt);
  PARAMETER(PAR.TH_Additions_Amt);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(PAR.TH_Accrual_Amount);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.TH_Calc_Net_Sts);
  PARAMETER(PAR.TH_Payment_Sts);
  PARAMETER(*BLANK);
  PARAMETER(PAR.TH_Commission_A_P_Voucher);
  PARAMETER(PAR.TH_Voucher_Payment_Date);
  PARAMETER(PAR.TH_User_Error_Override);
  PARAMETER(PAR.TH_Held_Over_Record);
  PARAMETER(PAR.TH_Sex);
  PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
  PARAMETER(PAR.TH_Commission_Paid_Date);
  PARAMETER(PAR.TH_Actual_Check_Date);
  PARAMETER(PAR.TH_Shipped_Weight);
  PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(PAR.TH_FFLI);
  PARAMETER(PAR.TH_Kill_Product_Value);
  PARAMETER(PAR.TH_Cut_Product_Value);
  PARAMETER(PAR.TH_Render_Product_Value);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(PAR.TH_CM_Gross_Live_CWT);
  PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
  PARAMETER(PAR.TH_Source_Type);
  PARAMETER(PAR.TH_Scale_Ticket_Sts);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(PAR.TH_Source_Code);
  PARAMETER(PAR.TH_Hog_Class_Type);
  PARAMETER(PAR.TH_Posted_to_HPS_Flag);
  PARAMETER(PAR.TH_Schedule_Kill_Shift);
  PARAMETER(PAR.TH_Shift_Held_Over);
  PARAMETER(PAR.DF_Defect_Code);
  PARAMETER(PAR.THP_Process_Code);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.HB_Buyer_Code);
  PARAMETER(PAR.GN_Genetic_Code);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  PARAMETER(PAR.Carcass_Dbw_Min);
  PARAMETER(PAR.Carcass_Dbw_Max);
  PARAMETER(PAR.Carcass_Lgt_Min);
  PARAMETER(PAR.Carcass_Lgt_Max);
  PARAMETER(PAR.Lean_High_Min);
  PARAMETER(PAR.Lean_High_Max);
  PARAMETER(PAR.Lean_Low_Min);
  PARAMETER(PAR.Lean_Low_Max);
  PARAMETER(PAR.High_Yield_Min);
  PARAMETER(PAR.High_Yield_Max);
  PARAMETER(PAR.Low_Yield_Min);
  PARAMETER(PAR.Low_Yield_Max);
  PARAMETER(PAR.Head_Percent_Min);
  PARAMETER(PAR.Head_Percent_Max);
  PARAMETER(PAR.Head_Percent_Min);
  PARAMETER(PAR.Head_Percent_Max);
  PARAMETER(PAR.BackFat_High_Min);
  PARAMETER(PAR.BackFat_High_Max);
  PARAMETER(PAR.BackFat_Low_Min);
  PARAMETER(PAR.Backfat_Low_Max);
  PARAMETER(PAR.LoinEye_High_Min);
  PARAMETER(PAR.LoinEye_High_Max);
  PARAMETER(PAR.LoinEye_Low_Min);
  PARAMETER(PAR.LoinEye_Low_Max);
  PARAMETER('N');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(LCL.Balance_First_Day_USR);

  // IF LCL.Transfer Carcasses    USR is LT Zero
  IF LCL.Transfer_Carcasses_USR < *ZERO;

  //?Transfer from the Held Over From Date.
  // LCL.Transfer Carcasses    USR = LCL.Transfer Carcasses    USR * CON.-1 *
  LCL.Transfer_Carcasses_USR = LCL.Transfer_Carcasses_USR * -1;

  EXECUTE FUNCTION(Rtv/Trnsfr Eval Trns  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1227416;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(LCL.TH_Kill_Date);
  PARAMETER(LCL.Kill_Date_Usr);
  PARAMETER(LCL.Transfer_Carcasses_USR);
  {
   //?USER: Process Data record

   CASE;

   // IF PAR.Transfer Carcasses    USR is GT Zero
   IF PAR.Transfer_Carcasses_USR > *ZERO;

   //?9/29/2010 slm check for deleted record
   //?do not move the record if this is a deleted record
   CASE;

   // IF DB1.RS Record Status is Flag for Purge
   IF DB1.RS_Record_Status = 'D';

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
   PARAMETER(DB1.ET_Company_Number);
   PARAMETER(PAR.Kill_Date_Usr);
   PARAMETER(WRK.ET_Scale_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.ET_Scale_Sequence_Number = 1;

    QUIT;

    //?USER: Process Data record

    CASE;

    // IF DB1.ET Scale Sequence Number is Entry Allowed
    IF DB1.ET_Scale_Sequence_Number >= 000001;
    AND DB1.ET_Scale_Sequence_Number <= 699999;

    // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
    PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

    QUIT;

    ENDIF;

   }

   EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
   PARAMETER(DB1.ET_Company_Number);
   PARAMETER(PAR.Kill_Date_Usr);
   PARAMETER(WRK.ET_Scale_Sequence_Number);
   PARAMETER(DB1.ET_Carcass_Number);
   PARAMETER(DB1.ET_Carcass_Number_Insert);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(DB1.ET_Lot);
   PARAMETER(DB1.ET_Shift);
   PARAMETER(DB1.ET_Hot_Wgt);
   PARAMETER(DB1.ET_Backfat_Thickness_Inch);
   PARAMETER(DB1.ET_Loin_Eye_Depth_Inches);
   PARAMETER(DB1.ET_Lean_Percent_NPPC);
   PARAMETER(DB1.ET_Backfat_Thickness_MM);
   PARAMETER(DB1.ET_Loineye_Depth_MM);
   PARAMETER(DB1.ET_Light_Reflectance_MM);
   PARAMETER(DB1.ET_Lean_Percent_FOM);
   PARAMETER(DB1.ET_Light_Reflectance);
   PARAMETER(DB1.ET_Trim_Area);
   PARAMETER(DB1.ET_Carcass_Sex);
   PARAMETER(DB1.ET_Error_Sts);
   PARAMETER(DB1.ET_Record_Add_Del_Sts);
   PARAMETER(DB1.ET_Record_Created_W_Avg);
   PARAMETER(DB1.ET_Record_Created_Status);
   PARAMETER(DB1.ET_User_Error_Override);
   PARAMETER(DB1.ET_Adjust_Add_Type);
   PARAMETER(DB1.ET_Broken_Back_Sts);
   PARAMETER(DB1.ET_Unused_Sts_2);
   PARAMETER(DB1.ET_Adjust_Add_Source);
   PARAMETER(DB1.ET_Unused_Sts_4);
   PARAMETER(DB1.ET_Unused_Sts_5);
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(PAR.TH_Tattoo_Number);
   PARAMETER(PAR.Kill_Date_Usr);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   PARAMETER(DB1.RU_Date);
   PARAMETER(DB1.RU_Time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(*MISSING);
    PARAMETER(*MISSING);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // PAR.RS Date Added = JOB.*Job date
     PAR.RS_Date_Added = JOB.*Job_date;

     // PAR.RS Time Added = JOB.*Job time
     PAR.RS_Time_Added = JOB.*Job_time;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   EXECUTE FUNCTION(Dlt Eval Trans        DL) TYPE(DLTOBJ) FILE(PKBVCPP)           AB1102933;
   PARAMETER(DB1.ET_Company_Number);
   PARAMETER(DB1.ET_Kill_Date);
   PARAMETER(DB1.ET_Scale_Sequence_Number);
   PARAMETER(DB1.ET_Carcass_Number);
   PARAMETER(DB1.ET_Carcass_Number_Insert);
   // PAR.Transfer Carcasses    USR = PAR.Transfer Carcasses    USR - CON.1
   PAR.Transfer_Carcasses_USR = PAR.Transfer_Carcasses_USR - 1;

   ENDIF;

   ENDIF;

  }

  //?RMC - moved here from below
  EXECUTE FUNCTION(Rtv Tattoo 4/Balance  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1230440;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(LCL.TH_Kill_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Group_Reference);
  PARAMETER(PAR.TH_Live_Purchase_UOM);
  PARAMETER(PAR.TH_Live_Purchase_Price);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(PAR.TH_Resale_UOM);
  PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(PAR.TH_Pricing_Date);
  PARAMETER(PAR.TH_Resale_Spread_Sts);
  PARAMETER(PAR.TH_Dead_On_Arrival);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Yard_Deads);
  PARAMETER(PAR.TH_Held_Over);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Head_Accepted);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Hot_Wgt);
  PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Tot_Backfat_Inches);
  PARAMETER(PAR.TH_Tot_Light_Reflectance);
  PARAMETER(PAR.TH_Avg_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Hot_Wgt);
  PARAMETER(PAR.TH_Avg_Light_Reflectance);
  PARAMETER(PAR.TH_Avg_Lean_Percent);
  PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Avg_Backfat);
  PARAMETER(PAR.TH_Std_Yield_Percent);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.TH_Yield_Difference);
  PARAMETER(PAR.TH_Recalc_Live_Wgt);
  PARAMETER(PAR.TH_CM_Market_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
  PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.TH_CM_Base_Carcass_Value);
  PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
  PARAMETER(PAR.TH_Deduction_Amt);
  PARAMETER(PAR.TH_Total_Net_WO_Adds);
  PARAMETER(PAR.TH_Carcass_Net_Amt);
  PARAMETER(PAR.TH_Additions_Amt);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(PAR.TH_Accrual_Amount);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.TH_Calc_Net_Sts);
  PARAMETER(PAR.TH_Payment_Sts);
  PARAMETER(PAR.TH_Bal_to_Kill_Gen);
  PARAMETER(PAR.TH_Commission_A_P_Voucher);
  PARAMETER(PAR.TH_Voucher_Payment_Date);
  PARAMETER(PAR.TH_User_Error_Override);
  PARAMETER(PAR.TH_Held_Over_Record);
  PARAMETER(PAR.TH_Sex);
  PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
  PARAMETER(PAR.TH_Commission_Paid_Date);
  PARAMETER(PAR.TH_Actual_Check_Date);
  PARAMETER(PAR.TH_Shipped_Weight);
  PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(PAR.TH_FFLI);
  PARAMETER(PAR.TH_Kill_Product_Value);
  PARAMETER(PAR.TH_Cut_Product_Value);
  PARAMETER(PAR.TH_Render_Product_Value);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(PAR.TH_CM_Gross_Live_CWT);
  PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
  PARAMETER(PAR.TH_Source_Type);
  PARAMETER(PAR.TH_Scale_Ticket_Sts);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(PAR.TH_Source_Code);
  PARAMETER(PAR.TH_Hog_Class_Type);
  PARAMETER(PAR.TH_Posted_to_HPS_Flag);
  PARAMETER(PAR.TH_Schedule_Kill_Shift);
  PARAMETER(PAR.TH_Shift_Held_Over);
  PARAMETER(PAR.DF_Defect_Code);
  PARAMETER(PAR.THP_Process_Code);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.HB_Buyer_Code);
  PARAMETER(PAR.GN_Genetic_Code);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?RMC chg to PAR to pick up orig kill date fields
  // Call program Bal/Val Tattoo        XF.
  CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(LCL.TH_Kill_Date);
  PARAMETER(PAR.TH_Purchase_Date);
  PARAMETER(PAR.TH_Group_Reference);
  PARAMETER(PAR.TH_Live_Purchase_UOM);
  PARAMETER(PAR.TH_Live_Purchase_Price);
  PARAMETER(PAR.TH_Live_Gross_Amt);
  PARAMETER(PAR.TH_LIve_Net_Amt);
  PARAMETER(PAR.TH_Resale_UOM);
  PARAMETER(PAR.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(PAR.TH_Pricing_Date);
  PARAMETER(PAR.TH_Resale_Spread_Sts);
  PARAMETER(PAR.TH_Dead_On_Arrival);
  PARAMETER(PAR.TH_Head_Received);
  PARAMETER(PAR.TH_Yard_Deads);
  PARAMETER(PAR.TH_Held_Over);
  PARAMETER(PAR.TH_Head_Condemned);
  PARAMETER(PAR.TH_Head_Killed);
  PARAMETER(PAR.TH_Head_Adds);
  PARAMETER(PAR.TH_Head_Accepted);
  PARAMETER(PAR.TH_Live_Wgt);
  PARAMETER(PAR.TH_Adj_Live_Wgt);
  PARAMETER(PAR.TH_Hot_Wgt);
  PARAMETER(PAR.TH_Tot_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Tot_Backfat_Inches);
  PARAMETER(PAR.TH_Tot_Light_Reflectance);
  PARAMETER(PAR.TH_Avg_Live_Wgt);
  PARAMETER(PAR.TH_Avg_Hot_Wgt);
  PARAMETER(PAR.TH_Avg_Light_Reflectance);
  PARAMETER(PAR.TH_Avg_Lean_Percent);
  PARAMETER(PAR.TH_Avg_Loin_Eye_Depth);
  PARAMETER(PAR.TH_Avg_Backfat);
  PARAMETER(PAR.TH_Std_Yield_Percent);
  PARAMETER(PAR.TH_Actual_Yield);
  PARAMETER(PAR.TH_Adj_Actual_Yield);
  PARAMETER(PAR.TH_Yield_Difference);
  PARAMETER(PAR.TH_Recalc_Live_Wgt);
  PARAMETER(PAR.TH_CM_Market_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(PAR.TH_CM_Sort_Discount_Amt);
  PARAMETER(PAR.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(PAR.TH_CM_Base_Carcass_Value);
  PARAMETER(PAR.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(PAR.TH_CM_Carcass_Gross_Amt);
  PARAMETER(PAR.TH_Deduction_Amt);
  PARAMETER(PAR.TH_Total_Net_WO_Adds);
  PARAMETER(PAR.TH_Carcass_Net_Amt);
  PARAMETER(PAR.TH_Additions_Amt);
  PARAMETER(PAR.TH_Payment_Gross);
  PARAMETER(PAR.Th_Payment_Net_Amt);
  PARAMETER(PAR.TH_AP_Voucher_Document#);
  PARAMETER(PAR.TH_Freight_Amount);
  PARAMETER(PAR.TH_Accrual_Amount);
  PARAMETER(PAR.TH_Fixed_Cost_Amount);
  PARAMETER(PAR.TH_Calc_Net_Sts);
  PARAMETER(PAR.TH_Payment_Sts);
  PARAMETER(*BLANK);
  PARAMETER(PAR.TH_Commission_A_P_Voucher);
  PARAMETER(PAR.TH_Voucher_Payment_Date);
  PARAMETER(PAR.TH_User_Error_Override);
  PARAMETER(PAR.TH_Held_Over_Record);
  PARAMETER(PAR.TH_Sex);
  PARAMETER(PAR.TH_Held_Ovr_Completed_Dte);
  PARAMETER(PAR.TH_Commission_Paid_Date);
  PARAMETER(PAR.TH_Actual_Check_Date);
  PARAMETER(PAR.TH_Shipped_Weight);
  PARAMETER(PAR.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(PAR.TH_FFLI);
  PARAMETER(PAR.TH_Kill_Product_Value);
  PARAMETER(PAR.TH_Cut_Product_Value);
  PARAMETER(PAR.TH_Render_Product_Value);
  PARAMETER(PAR.TH_Head_Excluded);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(PAR.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(PAR.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(PAR.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(PAR.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(PAR.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(PAR.TH_CM_Gross_Live_CWT);
  PARAMETER(PAR.TH_CM_Gross_Carc_CWT);
  PARAMETER(PAR.TH_Source_Type);
  PARAMETER(PAR.TH_Scale_Ticket_Sts);
  PARAMETER(PAR.TH_Payment_Type);
  PARAMETER(PAR.TH_HPS_Movement_Ref_#);
  PARAMETER(PAR.TH_Source_Code);
  PARAMETER(PAR.TH_Hog_Class_Type);
  PARAMETER(PAR.TH_Posted_to_HPS_Flag);
  PARAMETER(PAR.TH_Schedule_Kill_Shift);
  PARAMETER(PAR.TH_Shift_Held_Over);
  PARAMETER(PAR.DF_Defect_Code);
  PARAMETER(PAR.THP_Process_Code);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(PAR.HB_Buyer_Code);
  PARAMETER(PAR.GN_Genetic_Code);
  PARAMETER(PAR.HC_Class_Code);
  PARAMETER(PAR.RS_User_Changed);
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);
  PARAMETER(PAR.RS_Record_Status);
  PARAMETER(PAR.RS_Job);
  PARAMETER(PAR.RS_Program);
  PARAMETER(PAR.RS_User_Added);
  PARAMETER(PAR.RS_Date_Added);
  PARAMETER(PAR.RS_Time_Added);
  PARAMETER(PAR.Carcass_Dbw_Min);
  PARAMETER(PAR.Carcass_Dbw_Max);
  PARAMETER(PAR.Carcass_Lgt_Min);
  PARAMETER(PAR.Carcass_Lgt_Max);
  PARAMETER(PAR.Lean_High_Min);
  PARAMETER(PAR.Lean_High_Max);
  PARAMETER(PAR.Lean_Low_Min);
  PARAMETER(PAR.Lean_Low_Max);
  PARAMETER(PAR.High_Yield_Min);
  PARAMETER(PAR.High_Yield_Max);
  PARAMETER(PAR.Low_Yield_Min);
  PARAMETER(PAR.Low_Yield_Max);
  PARAMETER(PAR.Head_Percent_Min);
  PARAMETER(PAR.Head_Percent_Max);
  PARAMETER(PAR.Head_Percent_Min);
  PARAMETER(PAR.Head_Percent_Max);
  PARAMETER(PAR.BackFat_High_Min);
  PARAMETER(PAR.BackFat_High_Max);
  PARAMETER(PAR.BackFat_Low_Min);
  PARAMETER(PAR.Backfat_Low_Max);
  PARAMETER(PAR.LoinEye_High_Min);
  PARAMETER(PAR.LoinEye_High_Max);
  PARAMETER(PAR.LoinEye_Low_Min);
  PARAMETER(PAR.LoinEye_Low_Max);
  PARAMETER('N');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(LCL.Balance_First_Day_USR);

  ENDIF;

  //?Balance Held From Date.
  //?RMC chg to PAR to pick up orig kill date fields - and moved up
  //?     to run only if a transfer is necessary     6/11/18
 }

 ENDIF;

 // Call program Bal/Val Tattoo        XF.
 CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(DB1.TH_Group_Reference);
 PARAMETER(DB1.TH_Live_Purchase_UOM);
 PARAMETER(DB1.TH_Live_Purchase_Price);
 PARAMETER(DB1.TH_Live_Gross_Amt);
 PARAMETER(DB1.TH_LIve_Net_Amt);
 PARAMETER(DB1.TH_Resale_UOM);
 PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
 PARAMETER(DB1.TH_Pricing_Date);
 PARAMETER(DB1.TH_Resale_Spread_Sts);
 PARAMETER(DB1.TH_Dead_On_Arrival);
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Yard_Deads);
 PARAMETER(DB1.TH_Held_Over);
 PARAMETER(DB1.TH_Head_Condemned);
 PARAMETER(DB1.TH_Head_Killed);
 PARAMETER(DB1.TH_Head_Adds);
 PARAMETER(DB1.TH_Head_Accepted);
 PARAMETER(DB1.TH_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Hot_Wgt);
 PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Tot_Backfat_Inches);
 PARAMETER(DB1.TH_Tot_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Live_Wgt);
 PARAMETER(DB1.TH_Avg_Hot_Wgt);
 PARAMETER(DB1.TH_Avg_Light_Reflectance);
 PARAMETER(DB1.TH_Avg_Lean_Percent);
 PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
 PARAMETER(DB1.TH_Avg_Backfat);
 PARAMETER(DB1.TH_Std_Yield_Percent);
 PARAMETER(DB1.TH_Actual_Yield);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 PARAMETER(DB1.TH_Yield_Difference);
 PARAMETER(DB1.TH_Recalc_Live_Wgt);
 PARAMETER(DB1.TH_CM_Market_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price);
 PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
 PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
 PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
 PARAMETER(DB1.TH_CM_Base_Carcass_Value);
 PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
 PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
 PARAMETER(DB1.TH_Deduction_Amt);
 PARAMETER(DB1.TH_Total_Net_WO_Adds);
 PARAMETER(DB1.TH_Carcass_Net_Amt);
 PARAMETER(DB1.TH_Additions_Amt);
 PARAMETER(DB1.TH_Payment_Gross);
 PARAMETER(DB1.Th_Payment_Net_Amt);
 PARAMETER(DB1.TH_AP_Voucher_Document#);
 PARAMETER(DB1.TH_Freight_Amount);
 PARAMETER(DB1.TH_Accrual_Amount);
 PARAMETER(DB1.TH_Fixed_Cost_Amount);
 PARAMETER(DB1.TH_Calc_Net_Sts);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(DB1.TH_Bal_to_Kill_Gen);
 PARAMETER(DB1.TH_Commission_A_P_Voucher);
 PARAMETER(DB1.TH_Voucher_Payment_Date);
 PARAMETER(DB1.TH_User_Error_Override);
 PARAMETER(DB1.TH_Held_Over_Record);
 PARAMETER(DB1.TH_Sex);
 PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
 PARAMETER(DB1.TH_Commission_Paid_Date);
 PARAMETER(DB1.TH_Actual_Check_Date);
 PARAMETER(DB1.TH_Shipped_Weight);
 PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
 PARAMETER(DB1.TH_FFLI);
 PARAMETER(DB1.TH_Kill_Product_Value);
 PARAMETER(DB1.TH_Cut_Product_Value);
 PARAMETER(DB1.TH_Render_Product_Value);
 PARAMETER(DB1.TH_Head_Excluded);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
 PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
 PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
 PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
 PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
 PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
 PARAMETER(DB1.TH_CM_Gross_Live_CWT);
 PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
 PARAMETER(DB1.TH_Source_Type);
 PARAMETER(DB1.TH_Scale_Ticket_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 PARAMETER(DB1.TH_HPS_Movement_Ref_#);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.TH_Hog_Class_Type);
 PARAMETER(DB1.TH_Posted_to_HPS_Flag);
 PARAMETER(DB1.TH_Schedule_Kill_Shift);
 PARAMETER(DB1.TH_Shift_Held_Over);
 PARAMETER(DB1.DF_Defect_Code);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(DB1.HB_Buyer_Code);
 PARAMETER(DB1.GN_Genetic_Code);
 PARAMETER(DB1.HC_Class_Code);
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(LCL.Balance_First_Day_USR);

 CASE;

 // IF LCL.Balance First Day USR is Yes
 IF LCL.Balance_First_Day_USR = 'Y';

 EXECUTE FUNCTION(Rtv Balance Info      RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1240551;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.TH_PHA_Add_Type);
 PARAMETER(LCL.TH_PHA_Average_Type);
 PARAMETER(LCL.TH_PHA_Add_Reason);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.TH PHA Add Type is Historical Avg Balanced
 IF LCL.TH_PHA_Add_Type = 'B'/'E';

 // LCL.Bal w/History = CND.Prior Week History
 LCL.Bal_w_History = 'P';

 EXECUTE FUNCTION(Rtv GA Prod Hist Avgs RT) TYPE(RTVOBJ) FILE(PKCGCPP)           AB1226508;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.TH_Purchase_Date);
 PARAMETER(LCL.PH_Summary_Type);
 PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
 PARAMETER(LCL.PH_GA_Adjusted_Yield);
 PARAMETER(LCL.PH_GA_Avg_Lean);
 PARAMETER(LCL.PH_GA_Avg_Backfat);
 PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
 PARAMETER(LCL.PH_GA_Avg_Light_Ref);
 PARAMETER(LCL.PH_GA_Lean_Prm_Carc_CWT);
 PARAMETER(LCL.PH_GA_Avg_Srt_Disc_Fctr);
 PARAMETER(LCL.History_Avail_STS_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  // PAR.History Avail STS USR = CND.No
  PAR.History_Avail_STS_USR = 'N';

  // LCL.First Time Flag Usr = CND.Yes
  LCL.First_Time_Flag_Usr = 'Y';

  //?USER: Process Data record

  //?First Time Processing
  CASE;

  // IF LCL.First Time Flag Usr is Yes
  IF LCL.First_Time_Flag_Usr = 'Y';

  // LCL.PH Week Ending Date = DB1.PH Week Ending Date
  LCL.PH_Week_Ending_Date = DB1.PH_Week_Ending_Date;

  // LCL.First Time Flag Usr = CND.No
  LCL.First_Time_Flag_Usr = 'N';

  ENDIF;

  CASE;

  // IF DB1.PH Week Ending Date NE LCL.PH Week Ending Date
  IF DB1.PH_Week_Ending_Date <> LCL.PH_Week_Ending_Date;

  QUIT;

  ENDIF;

  CASE;

  // IF DB1.PH Summary Type is 2 Week
  IF DB1.PH_Summary_Type = '2WK';

  CASE;

  // IF DB1.PH GA Head Killed is GE 600
  IF DB1.PH_GA_Head_Killed >= 600;

  MOVE *ALL (To: PAR From: DB1);

  // PAR.History Avail STS USR = CND.Yes
  PAR.History_Avail_STS_USR = 'Y';

  QUIT;

  ENDIF;

  // IF DB1.PH Summary Type is 4 Week
  IF DB1.PH_Summary_Type = '4WK';

  CASE;

  // IF DB1.PH GA Head Killed is GT Zero
  IF DB1.PH_GA_Head_Killed > *ZERO;

  MOVE *ALL (To: PAR From: DB1);

  // PAR.History Avail STS USR = CND.Yes
  PAR.History_Avail_STS_USR = 'Y';

  QUIT;

  ENDIF;

  ENDIF;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Bal w/History = CND.*None
 LCL.Bal_w_History = *BLANK;

 ENDIF;

 EXECUTE FUNCTION(Bal Held Over Tattoo  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1240354;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.Carcass_Dbw_Min);
 PARAMETER(PAR.Carcass_Dbw_Max);
 PARAMETER(PAR.Carcass_Lgt_Min);
 PARAMETER(PAR.Carcass_Lgt_Max);
 PARAMETER(PAR.Lean_High_Min);
 PARAMETER(PAR.Lean_High_Max);
 PARAMETER(PAR.Lean_Low_Min);
 PARAMETER(PAR.Lean_Low_Max);
 PARAMETER(PAR.High_Yield_Min);
 PARAMETER(PAR.High_Yield_Max);
 PARAMETER(PAR.Low_Yield_Min);
 PARAMETER(PAR.Low_Yield_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.Head_Percent_Min);
 PARAMETER(PAR.Head_Percent_Max);
 PARAMETER(PAR.BackFat_High_Min);
 PARAMETER(PAR.BackFat_High_Max);
 PARAMETER(PAR.BackFat_Low_Min);
 PARAMETER(PAR.Backfat_Low_Max);
 PARAMETER(PAR.LoinEye_High_Min);
 PARAMETER(PAR.LoinEye_High_Max);
 PARAMETER(PAR.LoinEye_Low_Min);
 PARAMETER(PAR.LoinEye_Low_Max);
 PARAMETER(LCL.Bal_w_History);
 PARAMETER(LCL.PH_GA_Avg_Live_Wgt);
 PARAMETER(LCL.PH_GA_Adjusted_Yield);
 PARAMETER(LCL.PH_GA_Avg_Lean);
 PARAMETER(LCL.PH_GA_Avg_Backfat);
 PARAMETER(LCL.PH_GA_Avg_Loin_Eye);
 PARAMETER(LCL.PH_GA_Avg_Light_Ref);
 PARAMETER(LCL.PH_GA_Lean_Prm_Carc_CWT);
 PARAMETER(LCL.PH_GA_Avg_Srt_Disc_Fctr);
 PARAMETER(LCL.TH_PHA_Add_Type);
 PARAMETER(LCL.TH_PHA_Average_Type);
 PARAMETER(LCL.TH_PHA_Add_Reason);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.TH Kill Date NE PAR.Kill Date 1 Usr
  IF DB1.TH_Kill_Date <> PAR.Kill_Date_1_Usr;

  // Call program Bal/Val Tattoo        XF.
  CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TH_Purchase_Date);
  PARAMETER(DB1.TH_Group_Reference);
  PARAMETER(DB1.TH_Live_Purchase_UOM);
  PARAMETER(DB1.TH_Live_Purchase_Price);
  PARAMETER(DB1.TH_Live_Gross_Amt);
  PARAMETER(DB1.TH_LIve_Net_Amt);
  PARAMETER(DB1.TH_Resale_UOM);
  PARAMETER(DB1.TH_Recalc_Live_Wgt_Yld);
  PARAMETER(DB1.TH_Pricing_Date);
  PARAMETER(DB1.TH_Resale_Spread_Sts);
  PARAMETER(DB1.TH_Dead_On_Arrival);
  PARAMETER(DB1.TH_Head_Received);
  PARAMETER(DB1.TH_Yard_Deads);
  PARAMETER(DB1.TH_Held_Over);
  PARAMETER(DB1.TH_Head_Condemned);
  PARAMETER(DB1.TH_Head_Killed);
  PARAMETER(DB1.TH_Head_Adds);
  PARAMETER(DB1.TH_Head_Accepted);
  PARAMETER(DB1.TH_Live_Wgt);
  PARAMETER(DB1.TH_Adj_Live_Wgt);
  PARAMETER(DB1.TH_Hot_Wgt);
  PARAMETER(DB1.TH_Tot_Loin_Eye_Depth);
  PARAMETER(DB1.TH_Tot_Backfat_Inches);
  PARAMETER(DB1.TH_Tot_Light_Reflectance);
  PARAMETER(DB1.TH_Avg_Live_Wgt);
  PARAMETER(DB1.TH_Avg_Hot_Wgt);
  PARAMETER(DB1.TH_Avg_Light_Reflectance);
  PARAMETER(DB1.TH_Avg_Lean_Percent);
  PARAMETER(DB1.TH_Avg_Loin_Eye_Depth);
  PARAMETER(DB1.TH_Avg_Backfat);
  PARAMETER(DB1.TH_Std_Yield_Percent);
  PARAMETER(DB1.TH_Actual_Yield);
  PARAMETER(DB1.TH_Adj_Actual_Yield);
  PARAMETER(DB1.TH_Yield_Difference);
  PARAMETER(DB1.TH_Recalc_Live_Wgt);
  PARAMETER(DB1.TH_CM_Market_Price);
  PARAMETER(DB1.TH_CM_Base_Mkt_Price);
  PARAMETER(DB1.TH_CM_Base_Mkt_Price_Amt);
  PARAMETER(DB1.TH_CM_Sort_Discount_Amt);
  PARAMETER(DB1.TH_CM_Yield_Gain_Loss_Amt);
  PARAMETER(DB1.TH_CM_Base_Carcass_Value);
  PARAMETER(DB1.TH_CM_LN_AddOn_Deduct_Amt);
  PARAMETER(DB1.TH_CM_Carcass_Gross_Amt);
  PARAMETER(DB1.TH_Deduction_Amt);
  PARAMETER(DB1.TH_Total_Net_WO_Adds);
  PARAMETER(DB1.TH_Carcass_Net_Amt);
  PARAMETER(DB1.TH_Additions_Amt);
  PARAMETER(DB1.TH_Payment_Gross);
  PARAMETER(DB1.Th_Payment_Net_Amt);
  PARAMETER(DB1.TH_AP_Voucher_Document#);
  PARAMETER(DB1.TH_Freight_Amount);
  PARAMETER(DB1.TH_Accrual_Amount);
  PARAMETER(DB1.TH_Fixed_Cost_Amount);
  PARAMETER(DB1.TH_Calc_Net_Sts);
  PARAMETER(DB1.TH_Payment_Sts);
  PARAMETER(DB1.TH_Bal_to_Kill_Gen);
  PARAMETER(DB1.TH_Commission_A_P_Voucher);
  PARAMETER(DB1.TH_Voucher_Payment_Date);
  PARAMETER(DB1.TH_User_Error_Override);
  PARAMETER(DB1.TH_Held_Over_Record);
  PARAMETER(DB1.TH_Sex);
  PARAMETER(DB1.TH_Held_Ovr_Completed_Dte);
  PARAMETER(DB1.TH_Commission_Paid_Date);
  PARAMETER(DB1.TH_Actual_Check_Date);
  PARAMETER(DB1.TH_Shipped_Weight);
  PARAMETER(DB1.TH_Avg_Hot_Wgt_EXC_ADD);
  PARAMETER(DB1.TH_FFLI);
  PARAMETER(DB1.TH_Kill_Product_Value);
  PARAMETER(DB1.TH_Cut_Product_Value);
  PARAMETER(DB1.TH_Render_Product_Value);
  PARAMETER(DB1.TH_Head_Excluded);
  PARAMETER(DB1.TH_CM_Bse_Mkt_Live_CWT);
  PARAMETER(DB1.TH_CM_Bse_Mkt_Carc_CWT);
  PARAMETER(DB1.TH_CM_Srt_Dsc_Live_CWT);
  PARAMETER(DB1.TH_CM_Srt_Dsc_Carc_CWT);
  PARAMETER(DB1.TH_CM_Yld_G_L_Live_CWT);
  PARAMETER(DB1.TH_CM_Yld_G_L_Carc_CWT);
  PARAMETER(DB1.TH_CM_Crc_Val_Live_CWT);
  PARAMETER(DB1.TH_CM_Crc_Val_Carc_CWT);
  PARAMETER(DB1.TH_CM_Lean_Prem_Live_CWT);
  PARAMETER(DB1.TH_CM_Lean_Prem_Carc_CWT);
  PARAMETER(DB1.TH_CM_Gross_Live_CWT);
  PARAMETER(DB1.TH_CM_Gross_Carc_CWT);
  PARAMETER(DB1.TH_Source_Type);
  PARAMETER(DB1.TH_Scale_Ticket_Sts);
  PARAMETER(DB1.TH_Payment_Type);
  PARAMETER(DB1.TH_HPS_Movement_Ref_#);
  PARAMETER(DB1.TH_Source_Code);
  PARAMETER(DB1.TH_Hog_Class_Type);
  PARAMETER(DB1.TH_Posted_to_HPS_Flag);
  PARAMETER(DB1.TH_Schedule_Kill_Shift);
  PARAMETER(DB1.TH_Shift_Held_Over);
  PARAMETER(DB1.DF_Defect_Code);
  PARAMETER(DB1.THP_Process_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.HB_Buyer_Code);
  PARAMETER(DB1.GN_Genetic_Code);
  PARAMETER(DB1.HC_Class_Code);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  PARAMETER(PAR.Carcass_Dbw_Min);
  PARAMETER(PAR.Carcass_Dbw_Max);
  PARAMETER(PAR.Carcass_Lgt_Min);
  PARAMETER(PAR.Carcass_Lgt_Max);
  PARAMETER(PAR.Lean_High_Min);
  PARAMETER(PAR.Lean_High_Max);
  PARAMETER(PAR.Lean_Low_Min);
  PARAMETER(PAR.Lean_Low_Max);
  PARAMETER(PAR.High_Yield_Min);
  PARAMETER(PAR.High_Yield_Max);
  PARAMETER(PAR.Low_Yield_Min);
  PARAMETER(PAR.Low_Yield_Max);
  PARAMETER(PAR.Head_Percent_Min);
  PARAMETER(PAR.Head_Percent_Max);
  PARAMETER(PAR.Head_Percent_Min);
  PARAMETER(PAR.Head_Percent_Max);
  PARAMETER(PAR.BackFat_High_Min);
  PARAMETER(PAR.BackFat_High_Max);
  PARAMETER(PAR.BackFat_Low_Min);
  PARAMETER(PAR.Backfat_Low_Max);
  PARAMETER(PAR.LoinEye_High_Min);
  PARAMETER(PAR.LoinEye_High_Max);
  PARAMETER(PAR.LoinEye_Low_Min);
  PARAMETER(PAR.LoinEye_Low_Max);
  PARAMETER('Y');
  PARAMETER(PAR.Bal_w_History);
  PARAMETER(PAR.TH_PHA_Add_Type);
  PARAMETER(PAR.TH_PHA_Average_Type);
  PARAMETER(PAR.TH_PHA_Add_Reason);
  PARAMETER(PAR.PH_GA_Avg_Live_Wgt);
  PARAMETER(PAR.PH_GA_Adjusted_Yield);
  PARAMETER(PAR.PH_GA_Avg_Lean);
  PARAMETER(PAR.PH_GA_Avg_Backfat);
  PARAMETER(PAR.PH_GA_Avg_Loin_Eye);
  PARAMETER(PAR.PH_GA_Avg_Light_Ref);
  PARAMETER(PAR.PH_GA_Lean_Prm_Carc_CWT);
  PARAMETER(PAR.PH_GA_Avg_Srt_Disc_Fctr);
  PARAMETER('N');
  PARAMETER(LCL.Balance_First_Day_USR);

  ENDIF;

 }

 ENDIF;

 //?If receiving or slaughter processing code
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?This tattoo header is in the process code at the incorrect time
 //?either this is wip or payment
 // LCL.TH Header Error Sts = CND.No Kill Information
 LCL.TH_Header_Error_Sts = 'K';

 // LCL.TH Kill Balancing Sts = CND.Error
 LCL.TH_Kill_Balancing_Sts = 'E';

 EXECUTE FUNCTION(RTV Check For Pay Err RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1140596;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HPC');
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(Create Kill Validation) TYPE(CRTOBJ) FILE(PKB6CPP)             AB1104581;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(999999);
 PARAMETER('H');
 PARAMETER('HPC');
 PARAMETER('Header Process Code Invld');
 PARAMETER(*BLANKS);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(JOB.*JOB);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 {
  //?USER: Processing before Data update

  CASE;

  // IF PAR.KV Error Description is Entered
  IF PAR.KV_Error_Description <> *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Evaluation Desc   Rt) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126500;
  PARAMETER(PAR.KV_Error_Code);
  PARAMETER(DB1.KV_Error_Description);
  {
   //?USER: Process Data record

   // PAR.EV Description = DB1.EV Description
   PAR.EV_Description = DB1.EV_Description;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(*MISSING);
  PARAMETER(*MISSING);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 EXECUTE FUNCTION(Chg Tattoo Hdr Bal Sts CH) TYPE(CHGOBJ) FILE(PKA1CPP)          AB1151602;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.TH_Header_Error_Sts);
 PARAMETER(LCL.TH_Kill_Balancing_Sts);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

 //?Process Resale Hogs
 CASE;

 // IF DB1.TH Hog Class Type is Resale
 IF DB1.TH_Hog_Class_Type = 'R';

 //?RESALE UPDATE ADJUSTED LIVE WEIGHT
 // WRK.Net Head Usr = DB1.TH Head Received - DB1.TH Yard Deads
 WRK.Net_Head_Usr = DB1.TH_Head_Received - DB1.TH_Yard_Deads;

 // WRK.Net Head Usr = WRK.Net Head Usr - DB1.TH Head Condemned
 WRK.Net_Head_Usr = WRK.Net_Head_Usr - DB1.TH_Head_Condemned;

 //?Calculate Adj Live Weight
 CASE;

 // IF DB1.TH Head Received EQ WRK.Net Head Usr
 IF DB1.TH_Head_Received = WRK.Net_Head_Usr;

 // *MO.VE             1183529*Bu = ilt. in functions
 WRK.TH_Adj_Live_Wgt = DB1.TH_Live_Wgt;

 //?Calculate Adj Live Weight
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.TH Adj Live Wgt = WRK.Net Head Usr * DB1.TH Avg Live Wgt *
 WRK.TH_Adj_Live_Wgt = WRK.Net_Head_Usr * DB1.TH_Avg_Live_Wgt;

 ENDIF;

 EXECUTE FUNCTION(Chg Adj lv Wgt/Adj Yld CH) TYPE(CHGOBJ) FILE(PKA1CPP)          AB1151612;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TH_Adj_Live_Wgt);
 PARAMETER(DB1.TH_Adj_Actual_Yield);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

}


//?Print Balance to Kill Report.
// LCL.Date Alpha USR = CVTVAR(PAR.Current Kill Date)
LCL.Date_Alpha_USR = CVTVAR(PAR.Current_Kill_Date);

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('BALRPTPRT');
PARAMETER(LCL.System_Value_Alpha_USR);

// LCL.PRT Printer Device = LCL.System Value Alpha    USR
LCL.PRT_Printer_Device = LCL.System_Value_Alpha_USR;

// LCL.TH Schedule Kill Shift = LCL.Blank USR
LCL.TH_Schedule_Kill_Shift = LCL.Blank_USR;

// Execute command - 'SBM Prt Balance to Kill Report'
EXECUTE COMMAND(PRK0686);
PARAMETER(PAR.CC_Company_Number);
PARAMETER(LCL.Date_Alpha_USR);
PARAMETER(LCL.PRT_Printer_Device);
PARAMETER(*NO);
PARAMETER(*YES);
PARAMETER(1);
PARAMETER(*JOBD);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(LCL.TH_Schedule_Kill_Shift);

