// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNSFPFR
// ?Date: 14.08.2025 Time: 12:05:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?this conversion program should only be run over PRFLIB
// WRK.Company Number = CON.999
WRK.Company_Number = 999;

// WRK.Order Sequence Number USR = CON.050
WRK.Order_Sequence_Number_USR = 050;

// WRK.Date                  USR = CON.1091231
WRK.Date_USR = 1091231;

//?USER: Record selection processing

// WRK.Requested Delivery Date = CON.*ZERO
WRK.Requested_Delivery_Date = *ZERO;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

CASE;

// IF DB1.Age Code is Blank
IF DB1.Age_Code = *BLANK;

// AND DB1.Order Sequence Number GE WRK.Order Sequence Number USR
AND DB1.Order_Sequence_Number >= WRK.Order_Sequence_Number_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF DB1.Company Number EQ WRK.Company Number
IF DB1.Company_Number = WRK.Company_Number;

//?no 999 company number
// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV All Header Field 2 RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1645356;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(WRK.Order_Type_Sales_Usr);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Bill_to_Customer);
PARAMETER(NLL.Bill_to_Name);
PARAMETER(NLL.Bill_to_Address_Line_1);
PARAMETER(NLL.Bill_to_Address_Line_2);
PARAMETER(NLL.Bill_to_Address_Line_3);
PARAMETER(NLL.Bill_to_City);
PARAMETER(NLL.Bill_to_State_Code);
PARAMETER(NLL.Bill_to_Zip_Postal_Code);
PARAMETER(NLL.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(NLL.Actual_Shipped_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(WRK.Header_Status_USR);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(WRK.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(NLL.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(NLL.Special_Comment_1);
PARAMETER(NLL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(NLL.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.Shipping_Temp_Code_C_F);
PARAMETER(NLL.Claim_Number);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?header status allow c that are for this yes  and no X's
CASE;

// IF WRK.Header Status USR is Complete
IF WRK.Header_Status_USR = 'C';

CASE;

// IF WRK.Requested Delivery Date GT WRK.Date                  USR
IF WRK.Requested_Delivery_Date > WRK.Date_USR;

//?Greater then  1091231
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?header status allow c that are for this yes  and no X's
// IF WRK.Header Status USR is Cancelled
IF WRK.Header_Status_USR = 'X';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?header status allow c that are for this yes  and no X's
// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

//?ORDER TYPE OR ONLY
CASE;

// IF WRK.Order Type Sales Usr is Regular Order
IF WRK.Order_Type_Sales_Usr = 'OR';

//?ORDER TYPE OR ONLY
// IF WRK.Order Type Sales Usr is Transfer Order
IF WRK.Order_Type_Sales_Usr = 'TR';

//?ORDER TYPE OR ONLY
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Print required level headings

CASE;

IF NEW Sales_Route_Code;
EXECUTE FUNCTION(RTV Description        RT) TYPE(RTVOBJ) FILE(PDJEREP)          AC1270614;
PARAMETER(CUR.Sales_Route_Code);
PARAMETER(CUR.Sales_Route_Desc_DRV);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Print Sales Route Code header format
PRINT Sales Route Code header format;

ENDIF;

// SUPPRESSED PRINT Order Number header format

// SUPPRESSED PRINT Item Code header format

// SUPPRESSED PRINT Company Number header format

// SUPPRESSED PRINT Order Sequence Number header format

// SUPPRESSED PRINT Order Secondary Line Seq header format

//?USER: On print of detail format

// CUR.Requested Delivery Date = WRK.Requested Delivery Date
CUR.Requested_Delivery_Date = WRK.Requested_Delivery_Date;

// CUR.Scheduled Ship Date = DB1.Scheduled Ship Date
CUR.Scheduled_Ship_Date = DB1.Scheduled_Ship_Date;

// CUR.Header Status USR = WRK.Header Status USR
CUR.Header_Status_USR = WRK.Header_Status_USR;

// CUR.Order Type Sales Usr = WRK.Order Type Sales Usr
CUR.Order_Type_Sales_Usr = WRK.Order_Type_Sales_Usr;

// WRK.Item Age Days = CON.*ZERO
WRK.Item_Age_Days = *ZERO;

// CUR.Days to Pay 1 USR = CON.*ZERO
CUR.Days_to_Pay_1_USR = *ZERO;

// CUR.Days to Pay 2 USR = CON.*ZERO
CUR.Days_to_Pay_2_USR = *ZERO;

// CUR.Chilling Time USR = CON.*ZERO
CUR.Chilling_Time_USR = *ZERO;

// LCL.Number of Days = CON.*ZERO
LCL.Number_of_Days = *ZERO;

// LCL.Number of Days to Age = CON.*ZERO
LCL.Number_of_Days_to_Age = *ZERO;

// WRK.Error Status = CND.blank
WRK.Error_Status = *BLANK;

// WRK.Error Flag            USR = CND.Blank
WRK.Error_Flag_USR = *BLANK;

// CUR.Error Reason Descript 1 = CON.*BLANK
CUR.Error_Reason_Descript_1 = *BLANK;

// CUR.Error Reason Descript 2 = CON.*BLANK
CUR.Error_Reason_Descript_2 = *BLANK;

// CUR.Error Reason Descript 3 = CON.*BLANK
CUR.Error_Reason_Descript_3 = *BLANK;

// CUR.Error Reason Descript 4 = CON.*BLANK
CUR.Error_Reason_Descript_4 = *BLANK;

// CUR.Error Reason Descript 5 = CON.*BLANK
CUR.Error_Reason_Descript_5 = *BLANK;

// CUR.Error Reason Descript 6 = CON.*BLANK
CUR.Error_Reason_Descript_6 = *BLANK;

CASE;

// IF WRK.Requested Delivery Date is not entered
IF WRK.Requested_Delivery_Date = *ZERO;

EXECUTE FUNCTION(Chg OD Item Age Days CH) TYPE(CHGOBJ) FILE(OPBGWKP)            AC1981369;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(LCL.Number_of_Days_to_Age);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// CUR.Error Reason Descript 6 = CON.Missing Requested Delv Dt
CUR.Error_Reason_Descript_6 = 'Missing Requested Delv Dt';

// CUR.Error Status = CND.yes
CUR.Error_Status = 'Y';

// IF DB1.Scheduled Ship Date is not entered
IF DB1.Scheduled_Ship_Date = *ZERO;

EXECUTE FUNCTION(Chg OD Item Age Days CH) TYPE(CHGOBJ) FILE(OPBGWKP)            AC1981369;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(LCL.Number_of_Days_to_Age);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// CUR.Error Reason Descript 6 = CON.Missing sch ship date
CUR.Error_Reason_Descript_6 = 'Missing sch ship date';

// CUR.Error Status = CND.yes
CUR.Error_Status = 'Y';

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

EXECUTE FUNCTION(Chg OD Item Age Days CH) TYPE(CHGOBJ) FILE(OPBGWKP)            AC1981369;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(LCL.Number_of_Days_to_Age);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?convert age code to Item Age Days
EXECUTE FUNCTION(RTV Warehouse Type     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1285482;
PARAMETER(CUR.Warehouse_Code);
PARAMETER(LCL.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Warehouse Type is Fresh
IF LCL.Warehouse_Type = 'FR';

//?FRESH
CASE;

// IF DB1.Age Code is A: 0 Day
IF DB1.Age_Code = 'A';

// WRK.Item Age Days = CON.*ZERO
WRK.Item_Age_Days = 0000;

//?FRESH
// IF DB1.Age Code is B: 1 Day
IF DB1.Age_Code = 'B';

// WRK.Item Age Days = CON.0001
WRK.Item_Age_Days = 0001;

//?FRESH
// IF DB1.Age Code is C: 2 Day
IF DB1.Age_Code = 'C';

// WRK.Item Age Days = CON.0002
WRK.Item_Age_Days = 0002;

//?FRESH
// IF DB1.Age Code is D: 3 Day
IF DB1.Age_Code = 'D';

// WRK.Item Age Days = CON.0003
WRK.Item_Age_Days = 0003;

//?FRESH
// IF DB1.Age Code is E: 4 Day
IF DB1.Age_Code = 'E';

// WRK.Item Age Days = CON.0004
WRK.Item_Age_Days = 0004;

//?FRESH
// IF DB1.Age Code is F: 5 Day
IF DB1.Age_Code = 'F';

// WRK.Item Age Days = CON.0005
WRK.Item_Age_Days = 0005;

//?FRESH
// IF DB1.Age Code is G: 6 Day
IF DB1.Age_Code = 'G';

// WRK.Item Age Days = CON.0006
WRK.Item_Age_Days = 0006;

//?FRESH
// IF DB1.Age Code is H: 7 Days to 119 Days
IF DB1.Age_Code = 'H';

// WRK.Item Age Days = CON.7
WRK.Item_Age_Days = 7;

//?FRESH
// IF DB1.Age Code is I: 120 Days +
IF DB1.Age_Code = 'I';

// WRK.Item Age Days = CON.8
WRK.Item_Age_Days = 8;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?FROZEN
CASE;

// IF DB1.Age Code is A: 0 Day
IF DB1.Age_Code = 'A';

// WRK.Item Age Days = CON.*ZERO
WRK.Item_Age_Days = 0000;

//?FROZEN
// IF DB1.Age Code is B: 1 Day
IF DB1.Age_Code = 'B';

// WRK.Item Age Days = CON.0001
WRK.Item_Age_Days = 0001;

//?FROZEN
// IF DB1.Age Code is C: 2 Day
IF DB1.Age_Code = 'C';

// WRK.Item Age Days = CON.0002
WRK.Item_Age_Days = 0002;

//?FROZEN
// IF DB1.Age Code is D: 3 Day
IF DB1.Age_Code = 'D';

// WRK.Item Age Days = CON.0003
WRK.Item_Age_Days = 0003;

//?FROZEN
// IF DB1.Age Code is E: 4 Day
IF DB1.Age_Code = 'E';

// WRK.Item Age Days = CON.0004
WRK.Item_Age_Days = 0004;

//?FROZEN
// IF DB1.Age Code is F: 5 Day
IF DB1.Age_Code = 'F';

// WRK.Item Age Days = CON.0005
WRK.Item_Age_Days = 0005;

//?FROZEN
// IF DB1.Age Code is G: 6 Day
IF DB1.Age_Code = 'G';

// WRK.Item Age Days = CON.0006
WRK.Item_Age_Days = 0006;

//?FROZEN
// IF DB1.Age Code is H: 7 Days to 119 Days
IF DB1.Age_Code = 'H';

// WRK.Item Age Days = CON.0119
WRK.Item_Age_Days = 0119;

//?FROZEN
// IF DB1.Age Code is I: 120 Days +
IF DB1.Age_Code = 'I';

// WRK.Item Age Days = CON.0365
WRK.Item_Age_Days = 0365;

ENDIF;

ENDIF;

// CUR.Warehouse Type = LCL.Warehouse Type
CUR.Warehouse_Type = LCL.Warehouse_Type;

// CUR.Days to Pay 1 USR = WRK.Item Age Days
CUR.Days_to_Pay_1_USR = WRK.Item_Age_Days;

CASE;

// IF WRK.Item Age Days is All 9999'S
IF WRK.Item_Age_Days = 9999;

// LCL.Number of Days = CON.*ZERO
LCL.Number_of_Days = *ZERO;

// CUR.Days to Pay 2 USR = LCL.Number of Days
CUR.Days_to_Pay_2_USR = LCL.Number_of_Days;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Number of Days = WRK.Requested Delivery Date - DB1.Scheduled Ship Date *DAYS
LCL.Number_of_Days = DURATION(WRK.Requested_Delivery_Date DB1.Scheduled_Ship_Date 'DY'             +
1111111 'NONE' 'N' 1);

// CUR.Days to Pay 2 USR = LCL.Number of Days
CUR.Days_to_Pay_2_USR = LCL.Number_of_Days;

ENDIF;

// LCL.Number of Days to Age = CUR.Days to Pay 1 USR + CUR.Days to Pay 2 USR
LCL.Number_of_Days_to_Age = CUR.Days_to_Pay_1_USR + CUR.Days_to_Pay_2_USR;

// LCL.Item Age Days = LCL.Number of Days to Age
LCL.Item_Age_Days = LCL.Number_of_Days_to_Age;

// CUR.Item Age Days = LCL.Number of Days to Age
CUR.Item_Age_Days = LCL.Number_of_Days_to_Age;

EXECUTE FUNCTION(Chg OD Item Age Days CH) TYPE(CHGOBJ) FILE(OPBGWKP)            AC1981369;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Order_Number);
PARAMETER(DB1.Order_Sequence_Number);
PARAMETER(DB1.Order_Secondary_Line_Seq);
PARAMETER(LCL.Item_Age_Days);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?Get the Chill time either the item or the warehouse
// CUR.Chilling Time USR = CON.*ZERO
CUR.Chilling_Time_USR = *ZERO;

EXECUTE FUNCTION(UPS Rtv Company/Item  IF) TYPE(EXCINTFUN)                      AC1423844;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(NLL.Description_Line_One);
PARAMETER(NLL.UOM_Primary);
PARAMETER(NLL.Unit_Weight);
PARAMETER(NLL.Item_Structure_Class_Code);
PARAMETER(NLL.Item_Structure_Group_Code);
PARAMETER(NLL.Item_Structure_Type_Code);
PARAMETER(NLL.Item_Type_Code);
PARAMETER(NLL.Default_Warehouse);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(NLL.Base_Conv_Loss_Item);
PARAMETER(NLL.Variety_Rendered_Cut);
PARAMETER(NLL.Credit_Item_Status);
PARAMETER(NLL.Std_Weight_Head_Var_Ren);
PARAMETER(NLL.Pieces_Per_Head);
PARAMETER(NLL.Department_Code);
PARAMETER(NLL.Group_for_Packaging);
PARAMETER(NLL.Seconds_Item);
PARAMETER(NLL.Piece_Count_Item);
PARAMETER(NLL.Pieces_Per_Bag);
PARAMETER(NLL.Bags_Per_Unit);
PARAMETER(NLL.Export_Domestic);
PARAMETER(NLL.Print_On_Schedule);
PARAMETER(NLL.Fresh_Inv_Allocation_Seq);
PARAMETER(NLL.Fresh_Sched_As_Ordered);
PARAMETER(NLL.Frozen_Inv_Allocation_Seq);
PARAMETER(NLL.Primal_Group_Code);
PARAMETER(DB1.Warehouse_Code);
PARAMETER(NLL.Warehouse_Type);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Warehouse_Location);
PARAMETER(LCL.Warehouse_Std_Chill_Time);
PARAMETER(LCL.Warehouse_Chill_Time);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prd Sch Info   PS RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1294543;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Description_Line_One);
 PARAMETER(PAR.UOM_Primary);
 PARAMETER(PAR.Unit_Weight);
 PARAMETER(PAR.Item_Structure_Class_Code);
 PARAMETER(PAR.Item_Structure_Group_Code);
 PARAMETER(PAR.Item_Structure_Type_Code);
 PARAMETER(PAR.Item_Type_Code);
 PARAMETER(PAR.Default_Warehouse);
 PARAMETER(PAR.Fresh_Chilling_Time);
 PARAMETER(PAR.Base_Conv_Loss_Item);
 PARAMETER(PAR.Variety_Rendered_Cut);
 PARAMETER(PAR.Credit_Item_Status);
 PARAMETER(PAR.Std_Weight_Head_Var_Ren);
 PARAMETER(PAR.Pieces_Per_Head);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Group_for_Packaging);
 PARAMETER(PAR.Seconds_Item);
 PARAMETER(PAR.Piece_Count_Item);
 PARAMETER(PAR.Pieces_Per_Bag);
 PARAMETER(PAR.Bags_Per_Unit);
 PARAMETER(PAR.Export_Domestic);
 PARAMETER(PAR.Print_On_Schedule);
 PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
 PARAMETER(PAR.Fresh_Sched_As_Ordered);
 PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
 PARAMETER(PAR.Primal_Group_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(BPS Rtv Whs Info      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1475289;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Type);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 PARAMETER(PAR.Warehouse_Location);
 PARAMETER(PAR.Warehouse_Std_Chill_Time);
 PARAMETER(PAR.Warehouse_Chill_Time);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


CASE;

// IF LCL.Warehouse Std Chill Time is yes
IF LCL.Warehouse_Std_Chill_Time = 'Y';

// CUR.Chilling Time USR = LCL.Warehouse Chill Time
CUR.Chilling_Time_USR = LCL.Warehouse_Chill_Time;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Chilling Time USR = LCL.Fresh Chilling Time
CUR.Chilling_Time_USR = LCL.Fresh_Chilling_Time;

ENDIF;

// Call program Val Age information   XF.
CALL PROGRAM(Val Age information   XF) ('PNQNXFR');
PARAMETER(DB1.Item_Code);
PARAMETER(DB1.Warehouse_Code);
PARAMETER(WRK.Error_Flag_USR);
PARAMETER(CUR.Error_Reason_Descript_1);
PARAMETER(CUR.Error_Reason_Descript_2);
PARAMETER(CUR.Error_Reason_Descript_3);
PARAMETER(CUR.Error_Reason_Descript_4);
PARAMETER(CUR.Error_Reason_Descript_5);
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Scheduled_Ship_Date);
PARAMETER(CUR.Requested_Delivery_Date);
PARAMETER(LCL.Item_Age_Days);
PARAMETER(DB1.Production_Ovr_AgeDte_Fr);
PARAMETER(DB1.Production_Ovr_AgeDte_To);
PARAMETER(CUR.Production_AgeDte_Fr);
PARAMETER(CUR.Production_AgeDte_To);

//?verify if message should be sent
CASE;

// IF WRK.Error Flag            USR is Yes
IF WRK.Error_Flag_USR = 'Y';

CASE;

// IF CUR.Production AgeDte Fr is not entered
IF CUR.Production_AgeDte_Fr = *ZERO;

// CUR.Error Reason Descript 6 = CON.Invalid Item Age Days
CUR.Error_Reason_Descript_6 = 'Invalid Item Age Days';

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Error Reason Descript 6 = CON.Invalid Prd date Fr/To
CUR.Error_Reason_Descript_6 = 'Invalid Prd date Fr/To';

ENDIF;

// CUR.Error Status = CND.yes
CUR.Error_Status = 'Y';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?hdr sts allow c that record sel = yes update record no print
CASE;

// IF WRK.Header Status USR is Complete
IF WRK.Header_Status_USR = 'C';

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT Order Secondary Line Seq totals format

// SUPPRESSED PRINT Order Sequence Number totals format

// SUPPRESSED PRINT Company Number totals format

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Order Number totals format

// SUPPRESSED PRINT Sales Route Code totals format

