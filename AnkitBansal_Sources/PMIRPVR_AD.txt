// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMIRPVR
// ?Date: 14.08.2025 Time: 03:43:15
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load screen

// DTL.Accrual Type = CND.Commission
DTL.Accrual_Type = 'CM';

// DTL.Accrual Code = CND.Broker
DTL.Accrual_Code = 'BRK';

EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Condition_Desc_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Period & Week      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1293012;
PARAMETER(PAR.Company_Number);
PARAMETER(JOB.*Job_date);
PARAMETER(DTL.Accounting_Year);
PARAMETER(DTL.Prm_To_Period);
PARAMETER(LCL.OM_Week);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Prm From Period = CON.1
DTL.Prm_From_Period = 1;

// DTL.Ledger Accrual (Y/N) = CND.yes
DTL.Post_to_G_L_Y_N = 'Y';

//?USER: Validate fields

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?** F4 = Prompt on Accrual Type
CASE;

// IF PGM.*Cursor field <IS> DTL.Accrual Type
IF PGM.*Cursor_field = DTL.Accrual_Type;

// Call program SEL Accrual Type      SR.
CALL PROGRAM(SEL Accrual Type      SR) ('PMIESRR');
PARAMETER(DTL.Accrual_Type);

// DTL.Condition Name 10 USR = Condition name of DTL.Accrual Type
DTL.Condition_Name_10_USR = RTVCND(DTL.Accrual_Type);

ENDIF;

//?** F4 = Prompt on Accrual Code
CASE;

// IF PGM.*Cursor field <IS> DTL.Accrual Code
IF PGM.*Cursor_field = DTL.Accrual_Code;

// Call program SEL Accrual Cde b/Typ SR.
CALL PROGRAM(SEL Accrual Cde b/Typ SR) ('PPBKSRR');
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Accrual_Type);

//?** Retrieve description
CASE;

// IF DTL.Accrual Code is Entered
IF DTL.Accrual_Code <> *BLANK;

EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Condition_Desc_2_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?USER: Validate relations

//?** Accrual Type must be entered
CASE;

// IF DTL.Accrual Type is *ALL values
IF DTL.Accrual_Type = 'TF'/'CM'/'DA'/'CR'/'TX'/'BG'/'PR'/'IF'/'PF'/'PC'/'FA'/'SA'/'CC'             +
/'SF'/'WF'/'CF'/'LF'/'PD';

// DTL.Condition Name 10 USR = Condition name of DTL.Accrual Type
DTL.Condition_Name_10_USR = RTVCND(DTL.Accrual_Type);

//?** Accrual Type must be entered
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Accrual Type Not Found or not entered.'
ERROR(USR3738);
MSGPARM(DTL.Accrual_Type);

ENDIF;

//?** Error if Year, from and to periods are all zeros.
CASE;

// IF DTL.Accounting Year is equal to zeros
IF DTL.Accounting_Year = *ZERO;

// AND DTL.Prm From Period is Zeros
AND DTL.Prm_From_Period = *ZERO;

// AND DTL.Prm To Period is Zeros
AND DTL.Prm_To_Period = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.Accounting_Year);

ENDIF;

//?** Error if From Date exceeds To Date
CASE;

// IF DTL.Prm From Period GT DTL.Prm To Period
IF DTL.Prm_From_Period > DTL.Prm_To_Period;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.Prm_From_Period);

ENDIF;

//?** Error if beginning period / year is invalid
CASE;

// IF DTL.Prm From Period is Not equal zeros
IF DTL.Prm_From_Period <> *ZERO;

EXECUTE FUNCTION(RTV Chk Calendar - pos RT) TYPE(RTVOBJ) FILE(CAATREP)          AC1117094;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Accounting_Year);
PARAMETER(DTL.Prm_From_Period);
{
 //?USER: Process Data record

 //?>>  Quit as soon as one record found for year
 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Mo/Year'
ERROR(USR3326);

ENDIF;

ENDIF;

//?** Error if ending period / year is invalid
CASE;

// IF DTL.Prm To Period is Not equal zeros
IF DTL.Prm_To_Period <> *ZERO;

EXECUTE FUNCTION(RTV Chk Calendar - pos RT) TYPE(RTVOBJ) FILE(CAATREP)          AC1117094;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.Accounting_Year);
PARAMETER(DTL.Prm_To_Period);
{
 //?USER: Process Data record

 //?>>  Quit as soon as one record found for year
 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Mo/Year'
ERROR(USR3326);

ENDIF;

ENDIF;

//?** Email format is required if email address is entered
CASE;

// IF DTL.Email Address is Entered
IF DTL.Email_Address <> *BLANK;

CASE;

// IF DTL.Email Format is Not Entered
IF DTL.Email_Format = *BLANK;

// Send error message - 'Email format is required when email address is entered.'
ERROR(USR3676);
MSGPARM(DTL.Email_Format);

ENDIF;

ENDIF;

//?** Error: Accrl Code w/invalid ledger accr flag or invalid accrual type
CASE;

// IF DTL.Accrual Code is Entered
IF DTL.Accrual_Code <> *BLANK;

EXECUTE FUNCTION(RTV Accrual Info-All   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1825083;
PARAMETER(DTL.Accrual_Code);
PARAMETER(LCL.Accrual_Description);
PARAMETER(LCL.Automatic_Accrual_Y_N);
PARAMETER(LCL.Print_On_Invoice_Y_N);
PARAMETER(LCL.Rate_Usage);
PARAMETER(LCL.Add_on_Allowance);
PARAMETER(LCL.Accrual_Type);
PARAMETER(LCL.Sub_Ledger_Code);
PARAMETER(LCL.Reverse_Accrual_Code);
PARAMETER(LCL.UOM_Primary_Dft);
PARAMETER(LCL.G_L_Code_Dr);
PARAMETER(LCL.G_L_Code_Cr);
PARAMETER(LCL.G_L_Sub_Account_Code);
PARAMETER(LCL.Sales_History_Exp_Bucket);
PARAMETER(LCL.Post_to_G_L_Y_N);
PARAMETER(LCL.All_Products_Y_N);
PARAMETER(LCL.Accrual_Rate);
PARAMETER(LCL.Accrual_Rate_Type);
PARAMETER(LCL.Accrual_Detail_Search);
PARAMETER(LCL.Standard_Schedule_Y_N);
PARAMETER(LCL.Affect_Sales_Realz_Rpt);
PARAMETER(LCL.Affect_Invoice_Price);
PARAMETER(LCL.Invoice_Print_Type);
PARAMETER(LCL.Max_Accrual_Amount);
PARAMETER(LCL.Max_Accrual_Amount_Type);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Post to G/L (Y/N) NE LCL.Post to G/L (Y/N)
IF DTL.Post_to_G_L_Y_N <> LCL.Post_to_G_L_Y_N;

// Send error message - 'Post to G/L doesn't match Accrual Code. No report will be produced.'
ERROR(USR3742);
MSGPARM(DTL.Post_to_G_L_Y_N);

ENDIF;

CASE;

// IF DTL.Accrual Type NE LCL.Accrual Type
IF DTL.Accrual_Type <> LCL.Accrual_Type;

// Send error message - 'Accrual Code is incompatible with Accrual Type. F4 to select.'
ERROR(USR3747);
MSGPARM(DTL.Accrual_Code);

ENDIF;

ENDIF;

//?USER: User defined action

//?Submit job for Print
// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CND.Not entered
PAR.PRT_Night_Queue = *BLANK;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Accrual YTD Summ - Broker');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('A/R');
PARAMETER(*MISSING);
PARAMETER(1);

//?** Put the dates into the date pass fields - 15.5
// PAR.Date 1          PASS  USR = DTL.Accounting Year
PAR.Date_1_PASS_USR = DTL.Accounting_Year;

// PAR.From Date Pass        USR = DTL.Prm From Period
PAR.From_Date_Pass_USR = DTL.Prm_From_Period;

// PAR.Thru Date Pass        USR = DTL.Prm To Period
PAR.Thru_Date_Pass_USR = DTL.Prm_To_Period;

//?** Pass Accrual Code if entered
CASE;

// IF DTL.Accrual Code is Entered
IF DTL.Accrual_Code <> *BLANK;

//?** This will be either BRK or CAS for now
// PAR.Accrual Code = DTL.Accrual Code
PAR.Accrual_Code = DTL.Accrual_Code;

//?** Pass Accrual Code if entered
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Accrual Code = CON.*BLANK
PAR.Accrual_Code = *BLANK;

ENDIF;

//?** Put the Broker Code into the Item Type Field, if it is entered
// Call program Zzz Accr YTD Summ-Brk1 CL.
CALL PROGRAM(Zzz Accr YTD Summ-Brk1 CL) ('PMITUPC');
PARAMETER('A/R');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Accrual_Type);
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.Post_to_G_L_Y_N);
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Email_Address);
PARAMETER(DTL.Email_Format);

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

//?USER: Exit program processing

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

