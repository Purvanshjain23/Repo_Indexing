// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POAYE1R
// ?Date: 14.08.2025 Time: 03:39:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize key screen

// KEY.accrual code usr = PAR.Accrual Code
KEY.accrual_code_usr = PAR.Accrual_Code;

//?USER: Validate key screen

//?F4
CASE;

// IF KEY.*CMD key is *Prompt
IF KEY.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> KEY.accrual code usr
IF PGM.*Cursor_field = KEY.accrual_code_usr;

// Call program SEL Acrl Code by/REnt SR.
CALL PROGRAM(SEL Acrl Code by/REnt SR) ('PNNGSRR');
PARAMETER('C');
PARAMETER(KEY.accrual_code_usr);

ENDIF;

ENDIF;

// KEY.Accrual Code = KEY.accrual code usr
KEY.Accrual_Code = KEY.accrual_code_usr;

EXECUTE FUNCTION(RTV Accrl Info by/REnt RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1964658;
PARAMETER('C');
PARAMETER(KEY.Accrual_Code);
PARAMETER(PAR.Accrual_Description);
PARAMETER(PAR.Automatic_Accrual_Y_N);
PARAMETER(PAR.Print_On_Invoice_Y_N);
PARAMETER(PAR.Add_on_Allowance);
PARAMETER(PAR.Accrual_Type);
PARAMETER(PAR.Sub_Ledger_Code);
PARAMETER(PAR.Reverse_Accrual_Code);
PARAMETER(PAR.UOM_Primary_Dft);
PARAMETER(NLL.G_L_Code_Dr);
PARAMETER(NLL.G_L_Code_Cr);
PARAMETER(NLL.G_L_Sub_Account_Code);
PARAMETER(NLL.Sales_History_Exp_Bucket);
PARAMETER(PAR.Post_to_G_L_Y_N);
PARAMETER(PAR.All_Products_Y_N);
PARAMETER(PAR.Accrual_Rate);
PARAMETER(PAR.Accrual_Rate_Type);
PARAMETER(PAR.Accrual_Detail_Search);
PARAMETER(PAR.Standard_Schedule_Y_N);
PARAMETER(NLL.Affect_Sales_Realz_Rpt);
PARAMETER(NLL.Affect_Invoice_Price);
PARAMETER(NLL.Invoice_Print_Type);
PARAMETER(PAR.Max_Accrual_Amount);
PARAMETER(PAR.Max_Accrual_Amount_Type);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Accrual Program Code not found.'
ERROR(USR1514);
MSGPARM(KEY.accrual_code_usr);

// IF *OTHERWISE
IF *OTHERWISE;

//?output only Acc Rate Type if detail exists for the accr code  11/02
EXECUTE FUNCTION(Rtv Rate Type         RT) TYPE(RTVOBJ) FILE(PPAHREP)           AC1711140;
PARAMETER(KEY.Accrual_Code);
PARAMETER(LCL.Accrual_Rate_Type);
{
 //?USER: Processing if Data record not found

 // PAR.Accrual Rate Type = CND.*NONE
 PAR.Accrual_Rate_Type = *BLANK;

 //?USER: Process Data record

 //?get 1st rate type found
 // PAR.Accrual Rate Type = DB1.Accrual Rate Type
 PAR.Accrual_Rate_Type = DB1.Accrual_Rate_Type;

 QUIT;

}


ENDIF;

//?Validation for Cust GL Vendor
CASE;

// IF PAR.Accrual Type is Trade Fund/Marketing
IF ( ( PAR.Accrual_Type = 'TF';

// AND PAR.Sub Ledger Code is *ALL values
AND PAR.Sub_Ledger_Code = 'A'/'S'/'B'/'G'/'T'/*BLANK/'P' );

// OR PAR.Sub Ledger Code is A/R or Ship To
OR PAR.Sub_Ledger_Code = 'A'/'S' );

// AND PAR.Customer G/L Vendor Num is Not Entered
AND PAR.Customer_G_L_Vendor_Num = *ZERO;

// Send error message - 'G/L Vendor Number not found for Customer.'
ERROR(USR3335);

ENDIF;

//?USER: Initialize detail screen (new record)

// KEY.CAH Sequence No = CON.*ZERO
KEY.CAH_Sequence_No = 0;

EXECUTE FUNCTION(Rtv Next Seq for Cust RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1823554;
PARAMETER(KEY.Ship_To_Customer);
PARAMETER(KEY.accrual_code_usr);
PARAMETER(KEY.CAH_Sequence_No);
{
 //?USER: Process Data record

 //?pass out last seq found
 // PAR.CAH Sequence No = DB1.CAH Sequence No
 PAR.CAH_Sequence_No = DB1.CAH_Sequence_No;

}


// KEY.CAH Sequence No = KEY.CAH Sequence No + CON.1
KEY.CAH_Sequence_No = KEY.CAH_Sequence_No + 1;

// DTL.Accrual Detail Search = CND.Item
DTL.Accrual_Detail_Search = 'I';

// DTL.Condition Desc. 1  USR = Condition name of DTL.Accrual Detail Search
DTL.Condition_Desc_1_USR = RTVCND(DTL.Accrual_Detail_Search);

// DTL.Comm Retroactive Sts = CND.no
DTL.Comm_Retroactive_Sts = 'N';

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// LCL.Accrual Detail Search = DTL.Accrual Detail Search
LCL.Accrual_Detail_Search = DTL.Accrual_Detail_Search;

CASE;

// IF PAR.Accrual Type is Commission
IF PAR.Accrual_Type = 'CM';

// DTL.All Products (Y/N) = CND.No
DTL.All_Products_Y_N = 'N';

//?default, but dont output only the 'all prod' field  11/2/04
ENDIF;

// DTL.Accrual Rate Type = CND.*NONE
DTL.Accrual_Rate_Type = *BLANK;

// DTL.Comm Threshold Period = CND.Accounting Period
DTL.Comm_Threshold_Period = 'AP';

//?output fields from Accrual Code Master
// DTL.All Products (Y/N) = PAR.All Products (Y/N)
DTL.All_Products_Y_N = PAR.All_Products_Y_N;

// DTL.Accrual Detail Search = PAR.Accrual Detail Search
DTL.Accrual_Detail_Search = PAR.Accrual_Detail_Search;

// DTL.Accrual Rate Type = PAR.Accrual Rate Type
DTL.Accrual_Rate_Type = PAR.Accrual_Rate_Type;

// DTL.Accrual Rate = PAR.Accrual Rate
DTL.Accrual_Rate = PAR.Accrual_Rate;

// DTL.Standard Schedule (Y/N) = PAR.Standard Schedule (Y/N)
DTL.Standard_Schedule_Y_N = PAR.Standard_Schedule_Y_N;

//?If Standard Schedule, output only dtl fields
CASE;

// IF DTL.Standard Schedule (Y/N) is yes
IF DTL.Standard_Schedule_Y_N = 'Y';

// LCL.Record Found USR = CND.Record Found
LCL.Record_Found_USR = 'Y';

ENDIF;

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Condition Desc. 1  USR = Condition name of DTL.Accrual Detail Search
DTL.Condition_Desc_1_USR = RTVCND(DTL.Accrual_Detail_Search);

// DTL.Condition Desc. 2  USR = Condition name of DTL.All Products (Y/N)
DTL.Condition_Desc_2_USR = RTVCND(DTL.All_Products_Y_N);

// DTL.Condition Desc. 3  USR = Condition name of DTL.Comm Payment Period
DTL.Condition_Desc_3_USR = RTVCND(DTL.Comm_Threshold_Period);

// DTL.Condition Desc. 4  USR = Condition name of DTL.Accrual Rate Type
DTL.Condition_Desc_4_USR = RTVCND(DTL.Accrual_Rate_Type);

// LCL.Accrual Detail Search = DTL.Accrual Detail Search
LCL.Accrual_Detail_Search = DTL.Accrual_Detail_Search;

//?save it
// LCL.Accrual Rate Type = DTL.Accrual Rate Type
LCL.Accrual_Rate_Type = DTL.Accrual_Rate_Type;

// DTL.Standard Schedule (Y/N) = PAR.Standard Schedule (Y/N)
DTL.Standard_Schedule_Y_N = PAR.Standard_Schedule_Y_N;

//?If Standard Schedule, output only dtl fields
CASE;

// IF DTL.Standard Schedule (Y/N) is yes
IF DTL.Standard_Schedule_Y_N = 'Y';

// LCL.Record Found USR = CND.Record Found
LCL.Record_Found_USR = 'Y';

ENDIF;

//?USER: Validate detail screen fields

//?Val: Begin Date
CASE;

// IF DTL.Period Beginning Date GT DTL.Period Ending Date
IF DTL.Period_Beginning_Date > DTL.Period_Ending_Date;

// Send error message - 'Beginning period must be less than or equal to the ending period'
ERROR(USR0128);

ENDIF;

//?VAL:  Rate Type
CASE;

// IF DTL.All Products (Y/N) is All Products
IF DTL.All_Products_Y_N = 'Y'/'X';

CASE;

// IF DTL.Accrual Rate Type is *NONE
IF DTL.Accrual_Rate_Type = *BLANK;

// Send error message - 'Accrual Rate Type is required.'
ERROR(USR3374);
MSGPARM(DTL.Accrual_Rate_Type);

ENDIF;

//?VAL:  Rate Type
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Accrual Type is Commission
IF PAR.Accrual_Type = 'CM';

//?RMC DLY029 6/5/07 dont think we need this. they need a rate type ??????
ENDIF;

ENDIF;

//?VAL:  Accrual Rate
CASE;

// IF DTL.All Products (Y/N) is Yes
IF DTL.All_Products_Y_N = 'Y';

CASE;

// IF DTL.Accrual Rate Type is All Sales
IF DTL.Accrual_Rate_Type = 'W'/'S'/'Q'/'G'/'FA';

CASE;

// IF DTL.Accrual Rate is equal to zero
IF DTL.Accrual_Rate = *ZERO;

// Send error message - 'Rate must be entered.'
ERROR(USR1537);
MSGPARM(DTL.Accrual_Rate);

ENDIF;

ENDIF;

//?VAL:  Accrual Rate
// IF DTL.All Products (Y/N) is No
IF DTL.All_Products_Y_N = 'N';

CASE;

// IF DTL.Accrual Rate Type is All Sales
IF DTL.Accrual_Rate_Type = 'W'/'S'/'Q'/'G'/'FA';

CASE;

// IF DTL.Accrual Rate is Entered
IF DTL.Accrual_Rate <> *ZERO;

// Send error message - 'Accrual Rate must be zero.'
ERROR(USR1945);
MSGPARM(DTL.Accrual_Rate);

ENDIF;

ENDIF;

//?VAL:  Accrual Rate
// IF DTL.All Products (Y/N) is Yes + Exceptions
IF DTL.All_Products_Y_N = 'X';

CASE;

// IF DTL.Accrual Rate Type is All Sales
IF DTL.Accrual_Rate_Type = 'W'/'S'/'Q'/'G'/'FA';

CASE;

// IF DTL.Accrual Rate is equal to zero
IF DTL.Accrual_Rate = *ZERO;

// Send error message - 'Rate must be entered.'
ERROR(USR1537);
MSGPARM(DTL.Accrual_Rate);

ENDIF;

ENDIF;

ENDIF;

//?Comm Paym Period
CASE;

// IF DTL.Comm Payment Period EQ WRK.Blank for 4           USR
IF DTL.Comm_Threshold_Period = WRK.Blank_for_4_USR;

// AND PAR.Accrual Type is Commission
AND PAR.Accrual_Type = 'CM';

// Send error message - 'Commission Pay Period required.'
ERROR(USR3303);
MSGPARM(DTL.Comm_Threshold_Period);

ENDIF;

//?Retro sts
CASE;

// IF DTL.Comm Min Amt /Period is Zero
IF DTL.Comm_Min_Amt_Period = *ZERO;

// DTL.Comm Retroactive Sts = CND.no
DTL.Comm_Retroactive_Sts = 'N';

ENDIF;

//?Chg Accr Search Type - CANT CHG IF ITEMS OR/ STRUCTURE EXIST
CASE;

// IF DTL.Accrual Detail Search NE LCL.Accrual Detail Search
IF DTL.Accrual_Detail_Search <> LCL.Accrual_Detail_Search;

EXECUTE FUNCTION(RTV & Val Detail Exist RT) TYPE(RTVOBJ) FILE(OMHPREP)          AC1676913;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.CAH_Sequence_No);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Accrual Search Type cannot be changed. Item detail exists.'
ERROR(USR3307);
MSGPARM(DTL.Accrual_Detail_Search);

ENDIF;

EXECUTE FUNCTION(RTV & Val Detail Exist RT) TYPE(RTVOBJ) FILE(POC8REP)          AC1676914;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.CAH_Sequence_No);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// Send error message - 'Accrual Search Type cannot be changed. Item detail exists.'
ERROR(USR3307);
MSGPARM(DTL.Accrual_Detail_Search);

ENDIF;

ENDIF;

//?IF Trade Fund, rate type must be ALL SALES       EXPCOM 11/3/04
CASE;

// IF PAR.Accrual Type is Trade Fund
IF PAR.Accrual_Type = 'TF';

CASE;

// IF DTL.All Products (Y/N) is Yes
IF DTL.All_Products_Y_N = 'Y';

// OR DTL.All Products (Y/N) is Yes + Exceptions
OR DTL.All_Products_Y_N = 'X';

CASE;

// IF DTL.Accrual Rate Type is All Sales
IF DTL.Accrual_Rate_Type = 'W'/'S'/'Q'/'G'/'FA';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Rate Type &1 not valid.'
ERROR(USR3397);
MSGPARM(DTL.Accrual_Rate_Type);

ENDIF;

ENDIF;

ENDIF;

//?Broker Req for commission,+ REBATE, SALES TAX  dly029 RMC 06/01/07
CASE;

// IF PAR.Accrual Type is Commission
IF PAR.Accrual_Type = 'CM';

// OR PAR.Accrual Type is Buyer Group Rebate
OR PAR.Accrual_Type = 'BG';

// OR PAR.Accrual Type is Product Rebate
OR PAR.Accrual_Type = 'PR';

//?also Required for BG Rebate and Product rebate      RMC 08/08/07
CASE;

// IF DTL.Broker Code is Not entered
IF DTL.Broker_Code = *BLANK;

// Send error message - 'Broker is required for Commission,Rebates,Sales Tax.'
ERROR(USR3731);
MSGPARM(DTL.Broker_Code);

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Broker Name Act   RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1938855;
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Broker_Name_DRV);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 //?modification history
 DO;

 //?E00360 slm 06/16/09 Broker/Inactive rules
 ENDDO;

 // PAR.Record Status = CND.*blank
 PAR.Record_Status = *BLANK;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.Record Status is Inactive
IF LCL.Record_Status = 'I';

// Send error message - 'Broker is Inactive'
ERROR(USR4166);
MSGPARM(DTL.Broker_Code);

ENDIF;

ENDIF;

//?Broker Req for commission,+ REBATE, SALES TAX  dly029 RMC 06/01/07
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Broker Code = CON.*BLANK
DTL.Broker_Code = *BLANK;

ENDIF;

//?CALC: Detail screen function fields

EXECUTE FUNCTION(Ship To Name          DRV) TYPE(DRVFLD)                        AC1573561;
PARAMETER(DTL.Ship_To_Name_DRV);
PARAMETER(DTL.Ship_To_Customer);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


// DTL.Condition Desc. 1  USR = Condition name of DTL.Accrual Detail Search
DTL.Condition_Desc_1_USR = RTVCND(DTL.Accrual_Detail_Search);

// DTL.Condition Desc. 2  USR = Condition name of DTL.All Products (Y/N)
DTL.Condition_Desc_2_USR = RTVCND(DTL.All_Products_Y_N);

// DTL.Condition Desc. 3  USR = Condition name of DTL.Comm Payment Period
DTL.Condition_Desc_3_USR = RTVCND(DTL.Comm_Threshold_Period);

// DTL.Condition Desc. 4  USR = Condition name of DTL.Accrual Rate Type
DTL.Condition_Desc_4_USR = RTVCND(DTL.Accrual_Rate_Type);

EXECUTE FUNCTION(Rtv Broker Name Act   RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1938855;
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Broker_Name_DRV);
PARAMETER(LCL.Record_Status);
{
 //?USER: Initialize routine

 //?modification history
 DO;

 //?E00360 slm 06/16/09 Broker/Inactive rules
 ENDDO;

 // PAR.Record Status = CND.*blank
 PAR.Record_Status = *BLANK;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Create DBF record

EXECUTE FUNCTION(CRT OM Cust Accrual He IF) TYPE(EXCINTFUN) FILE(OMHOREP)       AC1686167;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.CAH_Sequence_No);
PARAMETER(DTL.Period_Beginning_Date);
PARAMETER(DTL.Period_Ending_Date);
PARAMETER(DTL.Accrual_Rate);
PARAMETER(DTL.All_Products_Y_N);
PARAMETER(DTL.Accrual_Rate_Type);
PARAMETER(DTL.Comm_Threshold_Period);
PARAMETER(DTL.CAH_Unused_Date_1);
PARAMETER(DTL.CAH_Unused_Date_2);
PARAMETER(DTL.Comm_Min_Amt_Period);
PARAMETER(DTL.Comm_Retroactive_Sts);
PARAMETER(DTL.Accrual_Detail_Search);
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Max_Accrual_Amount);
PARAMETER(DTL.Commission_Not_Comm_Sts);
PARAMETER(DTL.CAH_Unused_Sts_3);
PARAMETER(DTL.CAH_Unused_Sts_4);
PARAMETER(DTL.CAH_Unused_Sts_5);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
PARAMETER(PAR.Accrual_Type);
PARAMETER(PAR.Standard_Schedule_Y_N);
{
 //?Execute internal function

 CASE;

 // IF PAR.Accrual Type is Commission
 IF PAR.Accrual_Type = 'CM';

 // LCL.Commission/Not Comm Sts = CND.Commission
 LCL.Commission_Not_Comm_Sts = 9;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Commission/Not Comm Sts = CND.Not Commission
 LCL.Commission_Not_Comm_Sts = 1;

 ENDIF;

 EXECUTE FUNCTION(CRT OM Cust Accrual He CR) TYPE(CRTOBJ) FILE(OMHOREP)          AC1221740;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.CAH_Sequence_No);
 PARAMETER(PAR.Period_Beginning_Date);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Accrual_Rate);
 PARAMETER(PAR.All_Products_Y_N);
 PARAMETER(PAR.Accrual_Rate_Type);
 PARAMETER(PAR.Comm_Threshold_Period);
 PARAMETER(PAR.CAH_Unused_Date_1);
 PARAMETER(PAR.CAH_Unused_Date_2);
 PARAMETER(PAR.Comm_Min_Amt_Period);
 PARAMETER(PAR.Comm_Retroactive_Sts);
 PARAMETER(PAR.Accrual_Detail_Search);
 PARAMETER(PAR.Broker_Code);
 PARAMETER(PAR.Max_Accrual_Amount);
 PARAMETER(LCL.Commission_Not_Comm_Sts);
 PARAMETER(PAR.CAH_Unused_Sts_3);
 PARAMETER(PAR.CAH_Unused_Sts_4);
 PARAMETER(PAR.CAH_Unused_Sts_5);
 PARAMETER(PAR.EDI_Status_1);
 PARAMETER(PAR.EDI_Status_2);
 PARAMETER(PAR.EDI_Status_3);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 //?Create Detail if type Standard Sch is yes (dly029 > before was CM only)
 CASE;

 // IF PAR.Standard Schedule (Y/N) is yes
 IF PAR.Standard_Schedule_Y_N = 'Y';

 CASE;

 // IF PAR.Accrual Detail Search is Item
 IF PAR.Accrual_Detail_Search = 'I';

 EXECUTE FUNCTION(Rtv & Crt Cust Accrls RT) TYPE(RTVOBJ) FILE(PPAHREP)           AC1686123;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.CAH_Sequence_No);
 PARAMETER(PAR.Period_Beginning_Date);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Accrual_Rate_Type);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CRT OM Cust Accrual De CR) TYPE(CRTOBJ) FILE(OMHPREP)          AC1221729;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.CAH_Sequence_No);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Accrual_Rate);
  PARAMETER(DB1.Accrual_Rate_Type);
  PARAMETER(WRK.Blank_for_4_USR);
  PARAMETER(WRK.Blank_for_4_USR);
  PARAMETER(WRK.Blank_for_4_USR);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 // IF PAR.Accrual Detail Search is Item Structure
 IF PAR.Accrual_Detail_Search = 'S';

 EXECUTE FUNCTION(Rtv & Crt Cust AccStr RT) TYPE(RTVOBJ) FILE(PMA3REP)           AC1839047;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.CAH_Sequence_No);
 PARAMETER(PAR.Period_Beginning_Date);
 PARAMETER(PAR.Period_Ending_Date);
 PARAMETER(PAR.Accrual_Rate_Type);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Crt Customer Accr Str CR) TYPE(CRTOBJ) FILE(POC8REP)           AC1676541;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.CAH_Sequence_No);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Accrual_Rate);
  PARAMETER(DB1.Accrual_Rate_Type);
  PARAMETER(LCL.CAS_Unused_Sts_1);
  PARAMETER(LCL.CAS_Unused_Sts_2);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.EDI_Status_1);
  PARAMETER(LCL.EDI_Status_2);
  PARAMETER(LCL.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 ENDIF;

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG OM Cust Accrual He CH) TYPE(CHGOBJ) FILE(OMHOREP)          AC1221741;
PARAMETER(DTL.Ship_To_Customer);
PARAMETER(DTL.Accrual_Code);
PARAMETER(DTL.CAH_Sequence_No);
PARAMETER(DTL.Period_Beginning_Date);
PARAMETER(DTL.Period_Ending_Date);
PARAMETER(DTL.Accrual_Rate);
PARAMETER(DTL.All_Products_Y_N);
PARAMETER(DTL.Accrual_Rate_Type);
PARAMETER(DTL.Comm_Threshold_Period);
PARAMETER(DTL.CAH_Unused_Date_1);
PARAMETER(DTL.CAH_Unused_Date_2);
PARAMETER(DTL.Comm_Min_Amt_Period);
PARAMETER(DTL.Comm_Retroactive_Sts);
PARAMETER(DTL.Accrual_Detail_Search);
PARAMETER(DTL.Broker_Code);
PARAMETER(DTL.Max_Accrual_Amount);
PARAMETER(DTL.Commission_Not_Comm_Sts);
PARAMETER(DTL.CAH_Unused_Sts_3);
PARAMETER(DTL.CAH_Unused_Sts_4);
PARAMETER(DTL.CAH_Unused_Sts_5);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


