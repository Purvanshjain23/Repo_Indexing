// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMSMEFR
// ?Date: 14.08.2025 Time: 03:43:58
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('TRF');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize subfile header

EXECUTE FUNCTION(FC Description DRV) TYPE(DRVFLD)                               AC1866911;
PARAMETER(CTL.FC_Description_DRV);
PARAMETER(CTL.FC_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Frt Charge Info   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627128;
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.FC_Description_DRV);
 PARAMETER(NLL.FC_Rate_Amount);
 PARAMETER(NLL.FC_Unit_of_Measure);
 PARAMETER(NLL.FC_Act_Frt_Include_Sts);
 PARAMETER(NLL.FC_Frt_Add_Deduct);
 PARAMETER(NLL.FC_Load_Type_Select);
 PARAMETER(NLL.FC_State_Select);
 PARAMETER(NLL.FC_Export_Select);
 PARAMETER(NLL.FC_Shag_Wash_Select);
 PARAMETER(NLL.FC_Auto_Calc_Sts);
 PARAMETER(NLL.FC_Charge_Category);
 PARAMETER(NLL.FC_Shag_Wash_Comp);
 PARAMETER(NLL.FC_Edit_Sequence);
 PARAMETER(NLL.FC_Tot_Freight_Inc_Sts);
 PARAMETER(NLL.FC_Special_Type);
 PARAMETER(NLL.FC_ExpInt_FR_FZ_Select);
 PARAMETER(NLL.FC_Reference_Required);
 PARAMETER(NLL.FC_Trans_Mode_Select);
 PARAMETER(NLL.FC_Freight_Rate_Type_Sel);
 PARAMETER(NLL.FC_Company_Select);
 PARAMETER(NLL.FC_Company_Carrier_Select);
 PARAMETER(NLL.FC_Shared_Responsibility);
 PARAMETER(NLL.FC_Unused_Sts_10);
 PARAMETER(NLL.FC_Auto_Calc_Effective);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record (existing record)

CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

CASE;

// IF RCD.LFCR Value Type is Alpha Value Type
IF RCD.LFCR_Value_Type = 'A';

SET CURSOR;

// IF *OTHERWISE
IF *OTHERWISE;

SET CURSOR;

ENDIF;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

ENDIF;

//?USER: Validate subfile control

//?F7=Edit Charge Comments
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program Edt LdFrtChrg Comment EF.
CALL PROGRAM(Edt LdFrtChrg Comment EF) ('PMBOEFR');
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.FC_Code);
PARAMETER(CTL.LFC_Sequence_Number);

ENDIF;

//?F15=Display Dispatch/Tracer
CASE;

// IF CTL.*CMD key is CF15
IF CTL.*CMD_key = '15';

// Call program DSP Dispatch/Tracer    DF.
CALL PROGRAM(DSP Dispatch/Tracer    DF) ('PDT3DFR');
PARAMETER(CTL.Load_ID);

ENDIF;

//?USER: Validate subfile record fields

//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?SEL: Numeric Value
CASE;

// IF PGM.*Cursor field <IS> RCD.LFCR Numeric Value
IF PGM.*Cursor_field = RCD.LFCR_Numeric_Value;

//?SEL: Ship To
CASE;

// IF RCD.CR Reference Code is Ship To
IF RCD.CR_Reference_Code = 'SHIPTO';

// Call program SEL Load Ref Value    SR.
CALL PROGRAM(SEL Load Ref Value    SR) ('PMUGSRR');
PARAMETER(CTL.Load_ID);
PARAMETER(NLL.Company_Number);
PARAMETER(RCD.LFCR_Numeric_Value);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(RCD.CR_Reference_Code);

ENDIF;

//?SEL: Company
CASE;

// IF RCD.CR Reference Code is Company
IF RCD.CR_Reference_Code = 'COMPNY';

// Call program SEL Load Ref Value    SR.
CALL PROGRAM(SEL Load Ref Value    SR) ('PMUGSRR');
PARAMETER(CTL.Load_ID);
PARAMETER(RCD.LFCR_Numeric_Value);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(RCD.CR_Reference_Code);

ENDIF;

ENDIF;

//?SEL: Alpha Value
CASE;

// IF PGM.*Cursor field <IS> RCD.LFCR Alpha Value
IF PGM.*Cursor_field = RCD.LFCR_Alpha_Value;

//?SEL: State
CASE;

// IF RCD.CR Reference Code is State
IF RCD.CR_Reference_Code = 'STATE';

// Call program SEL Load Ref Value    SR.
CALL PROGRAM(SEL Load Ref Value    SR) ('PMUGSRR');
PARAMETER(CTL.Load_ID);
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_City);
PARAMETER(RCD.LFCR_Alpha_Value);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(RCD.CR_Reference_Code);

ENDIF;

//?SEL: City & State
CASE;

// IF RCD.CR Reference Code is City-St
IF RCD.CR_Reference_Code = 'CITYST';

// Call program SEL Load Ref Value    SR.
CALL PROGRAM(SEL Load Ref Value    SR) ('PMUGSRR');
PARAMETER(CTL.Load_ID);
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(RCD.CR_Reference_Code);

// Execute function CLC Concat City/State US.
EXECUTE FUNCTION(CLC Concat City/State US) TYPE(EXCUSRSRC) ('PMUIUFR');
PARAMETER(RCD.LFCR_Alpha_Value);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
{
 E                    X          40  1
 C                     MOVEA#IHNNA    X,1
 C                     MOVEA#IDBCD    X,21
 C                     MOVEAX         #OBXTX
}


ENDIF;

//?SEL: Warehouse
CASE;

// IF RCD.CR Reference Code is Warehouse
IF RCD.CR_Reference_Code = 'WHS';

// Call program SEL Load Ref Value    SR.
CALL PROGRAM(SEL Load Ref Value    SR) ('PMUGSRR');
PARAMETER(CTL.Load_ID);
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(RCD.LFCR_Alpha_Value);
PARAMETER(RCD.CR_Reference_Code);

ENDIF;

ENDIF;

ENDIF;

//?VAL: Numeric Value
CASE;

// IF RCD.LFCR Value Type is Numeric Value Type
IF RCD.LFCR_Value_Type = 'N';

CASE;

// IF RCD.LFCR Reference Type is Charge Allocation
IF RCD.LFCR_Reference_Type = 'A';

CASE;

// IF RCD.LFCR Numeric Value is Equal to zero
IF RCD.LFCR_Numeric_Value = *ZERO;

// Send error message - 'Value Required'
ERROR(USR1962);
MSGPARM(RCD.LFCR_Numeric_Value);

ENDIF;

ENDIF;

ENDIF;

//?VAL: Alpha Value
CASE;

// IF RCD.LFCR Value Type is Alpha Value Type
IF RCD.LFCR_Value_Type = 'A';

CASE;

// IF RCD.LFCR Reference Type is Charge Allocation
IF RCD.LFCR_Reference_Type = 'A';

CASE;

// IF RCD.LFCR Alpha Value is Equal to Blank
IF RCD.LFCR_Alpha_Value = *BLANK;

// Send error message - 'Value Required.'
ERROR(USR2808);
MSGPARM(RCD.LFCR_Alpha_Value);

ENDIF;

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Reference Type Desc DRV) TYPE(DRVFLD)                          AC1908519;
PARAMETER(RCD.Reference_Type_Desc_DRV);
PARAMETER(RCD.LFCR_Reference_Type);
{
 //?Calculate derived field

 // PAR.Reference Type Desc DRV = Condition name of PAR.@Reference Type
 PAR.Reference_Type_Desc_DRV = RTVCND(PAR.@Reference_Type);

}


//?USER: Validate subfile record relations

//?VAL: Warehouse Code
CASE;

// IF RCD.CR Reference Code is Warehouse
IF RCD.CR_Reference_Code = 'WHS';

// AND RCD.LFCR Alpha Value is Not equal to Blank
AND RCD.LFCR_Alpha_Value <> *BLANK;

EXECUTE FUNCTION(Val Warehouse Exists   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1323885;
PARAMETER(RCD.LFCR_Alpha_Value);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(RCD.LFCR_Alpha_Value);

ENDIF;

ENDIF;

//?USER: Delete DBF record

EXECUTE FUNCTION(Del LD Frt Chrg Ref   DL) TYPE(DLTOBJ) FILE(PMDKCPP)           AC1869266;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(RCD.CR_Reference_Code);

//?USER: Change DBF record

EXECUTE FUNCTION(Chg LD Frt Chrg Ref   CH) TYPE(CHGOBJ) FILE(PMDKCPP)           AC1869265;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.FC_Code);
PARAMETER(RCD.LFC_Sequence_Number);
PARAMETER(RCD.CR_Reference_Code);
PARAMETER(RCD.LFCR_Value_Type);
PARAMETER(RCD.LFCR_Numeric_Value);
PARAMETER(RCD.LFCR_Alpha_Value);
PARAMETER(RCD.LFCR_Reference_Type);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


//?USER: Extra processing after DBF update

CASE;

// IF RCD.CR Reference Code is Warehouse
IF RCD.CR_Reference_Code = 'WHS';

EXECUTE FUNCTION(Rtv Frt Charge Info   RT) TYPE(RTVOBJ) FILE(POA9REP)           AC1627128;
PARAMETER(PAR.FC_Code);
PARAMETER(NLL.FC_Description);
PARAMETER(NLL.FC_Rate_Amount);
PARAMETER(NLL.FC_Unit_of_Measure);
PARAMETER(NLL.FC_Act_Frt_Include_Sts);
PARAMETER(NLL.FC_Frt_Add_Deduct);
PARAMETER(NLL.FC_Load_Type_Select);
PARAMETER(NLL.FC_State_Select);
PARAMETER(NLL.FC_Export_Select);
PARAMETER(NLL.FC_Shag_Wash_Select);
PARAMETER(NLL.FC_Auto_Calc_Sts);
PARAMETER(NLL.FC_Charge_Category);
PARAMETER(NLL.FC_Shag_Wash_Comp);
PARAMETER(NLL.FC_Edit_Sequence);
PARAMETER(NLL.FC_Tot_Freight_Inc_Sts);
PARAMETER(NLL.FC_Special_Type);
PARAMETER(NLL.FC_ExpInt_FR_FZ_Select);
PARAMETER(NLL.FC_Reference_Required);
PARAMETER(NLL.FC_Trans_Mode_Select);
PARAMETER(NLL.FC_Freight_Rate_Type_Sel);
PARAMETER(NLL.FC_Company_Select);
PARAMETER(NLL.FC_Company_Carrier_Select);
PARAMETER(LCL.FC_Shared_Responsibility);
PARAMETER(NLL.FC_Unused_Sts_10);
PARAMETER(NLL.FC_Auto_Calc_Effective);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.FC Shared Responsibility is Not Shared
IF LCL.FC_Shared_Responsibility = *BLANK;

// LCL.Warehouse Code = RCD.LFCR Alpha Value
LCL.Warehouse_Code = RCD.LFCR_Alpha_Value;

EXECUTE FUNCTION(Rtv Acct&Ship Co      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1814475;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Shipping_Company);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Upd Company Resp Co   RT) TYPE(RTVOBJ) FILE(PMDKCPP)           AC1909359;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.FC_Code);
PARAMETER(PAR.LFC_Sequence_Number);
PARAMETER('COMPNY');
PARAMETER(LCL.Shipping_Company);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg LD Frt Chrg Ref   CH) TYPE(CHGOBJ) FILE(PMDKCPP)           AC1869265;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.FC_Code);
 PARAMETER(DB1.LFC_Sequence_Number);
 PARAMETER(DB1.CR_Reference_Code);
 PARAMETER(DB1.LFCR_Value_Type);
 PARAMETER(PAR.Shipping_Company);
 PARAMETER(DB1.LFCR_Alpha_Value);
 PARAMETER(DB1.LFCR_Reference_Type);
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

