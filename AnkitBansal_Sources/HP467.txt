      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP467
      * TITLE:       SPECIFY EXPENSE TICKET ALLOCATION
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     06/02/94
      *
      * FUNCTION:    ALLOWS USER TO ALLOCATE EXPENSE TICKETS.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      * 08/09/94  R. MARTIN
      *           ADD REPORT OPTIONS: # COPY, HOLD (Y/N),
      *           OUTQ TO DISPLAY AND *LDA OUTPUT. ADD
      *           'RUN IN NIGHT JOBQ' TO DISPLAY AND SBMJOB OUTPUT.
      *
      * 02/06/95  LEANNE FEDOR
      *           RECOMPILE ONLY. REMOVED DATE/TIME STAMP FROM SCREEN.
      *
      * 02/27/95  LEANNE FEDOR
      *           CHANGED SECURITY.
      *
      * 04/26/95  LEANNE FEDOR
      *           CHANGED F4 ROUTINE TO REDISPLAY SCREEN INSTEAD OF
      *           EDITING SCREEN.
      *
      * 02/22/99  LEANNE FEDOR
      *           Added a data area that is checked/updated so that the
      *           allocation function cannot be submitted a second time
      *           if the first submission has not completed. This will
      *           keep Corp users and Guymon user's from both submitting
      *           the function at period end at the same time.
      *
      * 02/07/00  LeAnne Fedor
      *           Removed print options (hold, copies, outque, etc.) from screen
      *           and replaced them with a function key that calls the pop-up
      *           window of print options.
      *
      * 06/29/04  LeAnne Fedor
      *           Last year we changed the Period Close function to run in the job queue that
      *           the Datamart Stuff runs in. We will now also run the Expense Allocation
      *           function in the Datamart job queue.
      *
      * 03/04/16  R. Centonze   Add company to the screen
      * 05/10/16  Barb Gutierrez    E5752
      *           Recompile Only.
      *
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD467    CF   E             WORKSTN
     F                                     INFDS(IOFEED)
      *
     Fhsp0071   if   e           k disk
      * Company control
      *
     FHSP002    IF   E           K DISK
      *    FUNCTIONS                  (KEY: FNFNCD)
      *
      /EJECT
      ****************************************************************
      * TABLE AND ARRAY SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  STANDARD MESSAGE ARRAYS
      *---------------------------------------------------------------
      *
      *---------------------------------------------------------------
      *  COMPILE TIME ARRAY FOR SUBMIT JOB COMMAND USED IN QCMDEXC
      *---------------------------------------------------------------
     D CMD             S              1    DIM(80) CTDATA PERRCD(80)
      *
      *---------------------------------------------------------------
      * EDIT/FINAL FLAGS AND DESCRIPTIONS
      *---------------------------------------------------------------
     D EFF             S              1    DIM(2) CTDATA PERRCD(1)              EDIT/FINAL DSC
     D EFD             S             10    DIM(2) ALT(EFF)
      /EJECT
      ****************************************************************
      * INPUT SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      * STANDARD DATABASE FILE INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTDBFR (RECORD FORMAT: FDBCKD)
     D DBFEED        E DS                  EXTNAME(UTDBFR)
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D CREATE          C                   CONST('CREATE')
     D REVISE          C                   CONST('REVISE')
     D DELETE          C                   CONST('DELETE')
     D VIEW            C                   CONST('VIEW  ')
     D SELECT          C                   CONST('SELECT')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
     D UPDATE          C                   CONST('UPDATE')
      *
      *---------------------------------------------------------------
      *  LDA - REPORT OPTIONS
      *---------------------------------------------------------------
      *
     D LDA            UDS
     D  LDCYMD                 1     08  0
     D  LDEFFL                 9     09
      *
     D  ldcocd               200    202
      *
     D  LDOUTU               401    410
     D  LDHOLD               411    411
     D  LDCOPY               412    412  0
     D  LDOUTQ               413    422
      *
      *---------------------------------------------------------------
      *  DEFINITION FOR EXTERNAL DATA AREA 'DAAPER'
      *---------------------------------------------------------------
     D                 DS
     D  DAAPER                 1     24
     D  DACCYY                 1      4
     D  DAPER                  5      6
     D  DABPDT                 7     14  0
     D  DAEPDT                15     22  0
     D  DAPGFL                23     23
     D  DAPPFL                24     24
      *
      *----------------------------------------------------------------
      *  DEFINITION FOR EXTERNAL DATA AREA 'DAALEX' (allocate expenses)
      *----------------------------------------------------------------
     D                 DS
     D  DAALEX                 1      1
     D  DAFL                   1      1
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
      *
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     EDIT1         $EDIT1
      *
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      *
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      * WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP467K1
     C                   WRITE     HP467EC
     C                   EXFMT     HP467R1
      *
      * CLEAR THE MESSAGES FROM THE MESSAGE DATA STRUCTURES AND PROGRAM
      * MESSAGE QUEUE.
      *
     C                   EXSR      $CLMSG
      *
      * GET USER'S ENTRY AND SET THE NEXT ROUTINE
      *
     C                   SELECT
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C     TERMFL        OREQ      YES                                          BAD USER
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN17         WHENEQ    *ON                                          F17-PRINT OPT
     C                   MOVEL     SCRN1         ROUTNE
     C                   CALL      'HP451'
     C                   PARM                    SDPGM
     C     LDCOPY        PARM      LDCOPY        XXCOPY
     C                   PARM                    LDHOLD
     C                   PARM                    LDOUTQ
     C                   PARM                    XXNITE
     C                   PARM                    XXJOBQ
      *
     C     *IN20         WHENEQ    *ON                                          F20-WRKSPLF
     C                   CALL      'UTWRKSPL'
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     *IN04         WHENEQ    *ON                                          F4-PROMPT
     C                   EXSR      $F4S1
     C                   MOVEL     SCRN1         ROUTNE
     C                   OTHER
      *
     C                   MOVEL     EDIT1         ROUTNE
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $EDIT1 - SUBROUTINE TO EDIT INPUT FIELDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDIT1        BEGSR
      *
      *
      * Validate:
      *   1) company
      *
     C                   exsr      $company
      *
      *
     C     *DTAARA       DEFINE                  daalex
     C                   IN        daalex
      *
      * VALIDATE THAT THE ALLOCATE FUNCTION HAS NOT ALREADY BEEN SUBMITTED.
      *
     C     DAFL          IFNE      *BLANK
     C     ERROR         ANDLT     MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00881'     MGID(E)
     C                   ENDIF
      *
      * VERIFY THAT A DATE IS ENTERED
      *
     C     DFMDY         IFEQ      0                                            IF NO DATE
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   ENDIF
     C                   ELSE
      *
      * VERIFY THAT THE DATE IS VALID
      *
     C                   Z-ADD     DFMDY         PFRM8
     C                   Z-ADD     0             PTO8
     C                   MOVEL     'MDY '        PFRFMT
     C                   MOVEL     'CYMD'        PTOFMT
     C                   Z-ADD     0             PDAYS
     C                   MOVE      *BLANK        PCODE
     C                   MOVE      *BLANK        PRTRN
      *
     C                   EXSR      $DATE
      *
     C     PRTRN         IFNE      *BLANK                                       IF INVALID
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09004'     MGID(E)
     C                   ENDIF
     C                   ENDIF                                                  IF INVALID
     C                   ENDIF                                                  IF NO DATE
      *
      * IF DATE IS VALID,
      *    CHECK THAT IT IS NOT IN A CLOSED PERIOD
      *    CHECK THAT IT IS NOT IN A FUTURE PERIOD
      *
     C     *IN32         IFEQ      *OFF                                         IF GOOD DATE
      *
     C                   SELECT
     C     PTO8          WHENLT    DABPDT
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09007'     MGID(E)
     C                   ENDIF
      *
     C     PTO8          WHENGT    DAEPDT
     C                   SETON                                        32
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09013'     MGID(E)
     C                   ENDIF
     C                   ENDSL
      *
     C                   ENDIF                                                  IF GOOD DATE
      *
      *
      *
      * VERIFY THAT EITHER EDIT OR FINAL WAS SELECTED
      *
     C                   Z-ADD     1             X                 2 0
     C     DFEFFL        LOOKUP    EFF(X)                                 90
     C     *IN90         IFEQ      *ON                                          IF FOUND
     C                   MOVEL     EFD(X)        DFEFDS
     C                   ELSE
     C                   MOVE      *BLANK        DFEFDS
     C                   SETON                                        33
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09107'     MGID(E)
     C                   ENDIF
     C                   ENDIF                                                  IF FOUND
      *
      * IF THERE ARE NO ERRORS, EXECUTE THE SUBROUTINE TO PROCESS THE
      * USERS REQUEST
      *
     C     ERROR         IFEQ      0
     C     *IN44         IFEQ      *OFF
     C                   SETON                                        44
     C                   ELSE
     C                   EXSR      $PROC1
     C                   ENDIF
     C                   ELSE
     C                   SETOFF                                       44
     C                   ENDIF
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * company
      *----------------------------------------------------------------
      *
     C     $company      begsr
      *
     C                   if        d1cocd  = *blank
     C                   seton                                        35
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00175'
     C                   endif
     c                   else
     c     D1COCD        chain     hsp0071                            35
     c     *IN35         ifeq      *ON
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS00175'
     C                   endif
     C                   end
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $SEC   - CALL SECURITY PROGRAM
      *---------------------------------------------------------------
      *
     C     $SEC          BEGSR
      *
      * SETUP THE FIELDS TO SEND INTO THE SECURITY PROGRAM
      *
     C                   MOVEL     WKFNCD        INFNCD                         PGM NAME
     C                   MOVE      *BLANK        INBOBO                         SCREEN BO
      *
     C                   MOVE      *BLANK        OUBOBO                         BO CODE
     C                   MOVE      *BLANK        OUBODS                         BO DESC
     C                   MOVE      *BLANK        OUDVCD                         FUNCTION DIV
     C                   MOVEL     NO            TERMFL            1            TERMINAL FLG
      *
     C                   CALL      'HPSEC  '
      **** IN
     C                   PARM                    MGID                           MSGID ARRAY
     C                   PARM                    MGDT                           MSGDTA DATA
     C                   PARM                    ERROR                          # OF ERRORS
     C                   PARM                    INFNCD           10            FUNC CODE
     C                   PARM                    INBOBO            5            BO CODE
     C                   PARM                    INDVFL            1            CHECK DIV?
     C                   PARM                    INBOFL            1            CHECK B.O.?
      **** OUT
     C                   PARM                    OUBOBO            5            BO CODE
     C                   PARM                    OUBODS           30            BO DESC.
     C                   PARM                    OUDVCD            5            DIV CODE
     C                   PARM                    SECFL             1            SEC FLAG
     C                   PARM                    OUBOFL            1            BO ERRFLG
     C                   PARM                    OURMFL            1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $PROC1 - SUBROUTINE TO PROCESS THE USER'S REQUEST
      *---------------------------------------------------------------
      *
     C     $PROC1        BEGSR
      *
      *  IF USER TOOK F8=SUBMIT EDIT/FINAL
      *
     C     *IN08         IFEQ      *ON                                          IF F8
      *
      *
      * SET THE FLAG INDICATING THE ALLOCATE FUNCTION HAS BEEN
      * SUBMITTED.
      *
     C     *LOCK         IN        daalex
     C                   MOVEL     YES           DAFL
     C                   OUT       daalex
      *
      * PLACE OPTIONS INTO LOCAL DATA AREA AND OUTPUT AREA
      *
     C                   Z-ADD     PTO8          LDCYMD
     C                   MOVEL     DFEFFL        LDEFFL
     C                   move      d1cocd        ldcocd                           e5290
      *
     C                   OUT       LDA
      *
      * We want to hardcode/override the job queue to be the job queue that the Datamart
      * Stuff runs in.
      *
     C                   movel     'DATAMARTQ '  xxjobq
      *
      * MOVE THE 80-CHARACTER COMPILE TIME ARRAY 'CMD' TO AN
      * 80-CHARACTER FIELD FOR PASSING AS A PARM WITH QCMDEXC.
      *
     C                   MOVEA     XXJOBQ        CMD(51)
     C                   MOVEA     CMD           CMDSBM
      *
     C                   CALL      'QCMDEXC'
     C                   PARM                    CMDSBM
     C                   PARM                    LENGTH
      *
      * ISSUE STANDARD REQUEST SUBMISSION MESSAGE
      *
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09003'     MGID(E)
     C                   ENDIF                                                  IF F8
      *
     C                   ENDSR
      /EJECT
      ****************************************************************
      * F4 PROMPT ON SCREEN 1
      ****************************************************************
      *
     C     $F4S1         BEGSR
      *
     C                   SELECT
      *
      * IF EDIT/FINAL FLAG
      *
     C     FLD           WHENEQ    'DFEFFL'
     C                   MOVE      *BLANK        XXEFFL
     C                   MOVE      *BLANK        XXEFDS
     C                   CALL      'HP525'
     C                   PARM                    XXEFFL
     C                   PARM                    XXEFDS
     C                   SETON                                        52
     C     XXEFFL        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXEFFL        DFEFFL
     C                   MOVEL     XXEFDS        DFEFDS
     C                   ENDIF                                                  IF SELECTED
     C                   OTHER
      *
      * F4 NOT VALID FOR THIS FIELD SO ISSUE MESSAGE
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09011'     MGID(E)
     C                   ENDIF
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      ****************************************************************
      * $DATE -  MANIPULATE DATES WITH DATE UTILITY
      ****************************************************************
      *
     C     $DATE         BEGSR
      *
     C                   CALL      'UT80060R'
     C                   PARM                    PFRM8             8 0
     C                   PARM                    PTO8              8 0
     C                   PARM                    PFRFMT            4
     C                   PARM                    PTOFMT            4
     C                   PARM                    PDAYS             4 0
     C                   PARM                    PCODE             1
     C                   PARM                    PRTRN             1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANK        MGI
     C                   PARM      *BLANK        MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *----------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      /EJECT
      *---------------------------------------------------------------
      * *INZSR - INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * KEY LISTS
      *
      * PARM LISTS
      *
      * DEFINE LDA
     C     *DTAARA       DEFINE    *LDA          LDA
     C                   IN        LDA
      *
      * Initialize LDA fields for printing
      *
     C                   MOVE      *BLANK        LDHOLD
     C                   Z-ADD     0             LDCOPY
     C                   MOVEL     LDOUTU        LDOUTQ
     C                   MOVEL     '*JOBD'       XXJOBQ           10
     C                   MOVEL     NO            XXNITE            1
     C                   Z-ADD     0             XXCOPY            1 0
      *
      * GET THIS FUNCTION'S NUMBER OF COPIES, HOLD YES/NO
      *
     C     SDPGM         CHAIN     HSP002                             92
     C     *IN92         IFEQ      *OFF
     C                   Z-ADD     FNCOPY        LDCOPY
     C                   MOVEL     FNHOLD        LDHOLD
     C                   ENDIF
      *
     C     LDCOPY        IFEQ      0
     C                   Z-ADD     1             LDCOPY
     C                   ENDIF
      *
     C     LDHOLD        IFEQ      *BLANK
     C                   MOVEL     NO            LDHOLD
     C                   ENDIF
      *
      *
      * GLOBAL DEFINES
      *
     C                   MOVE      *BLANK        PGM              10            USED IN MSG
     C                   MOVE      *BLANK        MSGFL            10            USED IN MSG
     C                   MOVE      *BLANK        ROUTNE            6
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
      *
      * ALPHA PARM FIELDS
      *
     C     *LIKE         DEFINE    DFEFFL        XXEFFL
     C     *LIKE         DEFINE    DFEFDS        XXEFDS
      *
      *  PARMS FOR USE WITH QCMDEXC.  'LENGTH' IS THE LENGTH OF THE
      *  COMMAND THAT WILL BE ISSUED WITH QCMDEXC.  QCMDEXC REQUIRES
      *  THE FIELD CONTAINING LENGTH TO BE DEFINED AS 15 WITH 5 DECIMAL
      *  POSITIONS.  THE FIELD 'CMDSBM' WILL HOLD THE VALUES OF THE
      *  THE SUBMIT JOB COMMAND WHEN PASSED AS A PARM ON THE CALL TO
      *  QCMDEXC.
      *
     C                   Z-ADD     80            LENGTH           15 5          QCMDEXC PARM
     C                   MOVE      *BLANK        CMDSBM           80            QCMDEXC PARM
      *
      * BRING IN THE DATA AREA THAT CONTAINS THE CURRENT ACCOUNTING
      * PERIOD
      *
     C     *DTAARA       DEFINE                  DAAPER
     C                   IN        daaper
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
      * EXECUTE THE SECURITY SUBROUTINE TO DETERMINE USER
      * AUTHORIZATIONS.
      *
     C                   MOVEL(P)  'HP467'       WKFNCD           10
     C                   EXSR      $SEC
      *
      * IF ERRORS ON INITIAL CALL, SET TERMINAL FLAG TO YES.
      *
     C     SECFL         IFEQ      YES
     C                   MOVEL     YES           TERMFL
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY NAMED 'CMD' USED IN QCMDEXC
      *****************************************************************
** QCMD TABLE
SBMJOB CMD(CALL PGM(HP467CL)) JOB(ALLOCATEX) JOBQ(__________)
** EFF
EEDIT
FFINAL
