// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POVCXFR
// ?Date: 14.08.2025 Time: 03:39:09
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Pgm 6 Accumulate the Partial Item prod. for the Dept/Line/Dt/Shift
//?Pgm 8 Accumulate the Partial Item deletes for the Dept/Line/Dt/Shift
//?8/02/06  RMC Setup for Triumph 2nd shift starting 8/7/06
//?4/20/17  RMC E9064 440
CASE;

// IF PAR.Company Number is Guymon
IF PAR.Company_Number = 360;

//?From & To Date/Time
CASE;

// IF PAR.Number of Prod Shifts is Shift 1
IF PAR.Number_of_Prod_Shifts = '1';

// PAR.USR From Time 6.0 = CON.060000
PAR.USR_From_Time_6_0 = 060000;

// PAR.USR To Time 6.0 = CON.055959
PAR.USR_To_Time_6_0 = 055959;

// PAR.Date To               USR = PAR.Production Date + CON.1 *DAYS
PAR.Date_To_USR = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

//?From & To Date/Time
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Production Shift is Shift 1
IF PAR.Production_Shift = '1';

// PAR.USR From Time 6.0 = CON.060000
PAR.USR_From_Time_6_0 = 060000;

// PAR.USR To Time 6.0 = CON.151500
PAR.USR_To_Time_6_0 = 151500;

// PAR.Date To               USR = PAR.Production Date
PAR.Date_To_USR = PAR.Production_Date;

// IF PAR.Production Shift is Shift 2
IF PAR.Production_Shift = '2';

// PAR.USR From Time 6.0 = CON.151501
PAR.USR_From_Time_6_0 = 151501;

// PAR.USR To Time 6.0 = CON.055959
PAR.USR_To_Time_6_0 = 055959;

// PAR.Date To               USR = PAR.Production Date + CON.1 *DAYS
PAR.Date_To_USR = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Company Number is Seaboard Triumph Foods
IF PAR.Company_Number = 440;

//?From & To Date/Time
CASE;

// IF PAR.Number of Prod Shifts is Shift 1
IF PAR.Number_of_Prod_Shifts = '1';

// PAR.USR From Time 6.0 = CON.060000
PAR.USR_From_Time_6_0 = 060000;

// PAR.USR To Time 6.0 = CON.055959
PAR.USR_To_Time_6_0 = 055959;

// PAR.Date To               USR = PAR.Production Date + CON.1 *DAYS
PAR.Date_To_USR = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

//?From & To Date/Time
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Production Shift is Shift 1
IF PAR.Production_Shift = '1';

// PAR.USR From Time 6.0 = CON.060000
PAR.USR_From_Time_6_0 = 060000;

// PAR.USR To Time 6.0 = CON.151500
PAR.USR_To_Time_6_0 = 151500;

// PAR.Date To               USR = PAR.Production Date
PAR.Date_To_USR = PAR.Production_Date;

// IF PAR.Production Shift is Shift 2
IF PAR.Production_Shift = '2';

// PAR.USR From Time 6.0 = CON.151501
PAR.USR_From_Time_6_0 = 151501;

// PAR.USR To Time 6.0 = CON.055959
PAR.USR_To_Time_6_0 = 055959;

// PAR.Date To               USR = PAR.Production Date + CON.1 *DAYS
PAR.Date_To_USR = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Company Number is St. Joseph
IF PAR.Company_Number = 960;

//?From & To Date/Time
CASE;

// IF PAR.Number of Prod Shifts is Shift 1
IF PAR.Number_of_Prod_Shifts = '1';

// PAR.USR From Time 6.0 = CON.060000
PAR.USR_From_Time_6_0 = 060000;

// PAR.USR To Time 6.0 = CON.055959
PAR.USR_To_Time_6_0 = 055959;

// PAR.Date To               USR = PAR.Production Date + CON.1 *DAYS
PAR.Date_To_USR = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

//?From & To Date/Time
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Production Shift is Shift 1
IF PAR.Production_Shift = '1';

// PAR.USR From Time 6.0 = CON.060000
PAR.USR_From_Time_6_0 = 060000;

// PAR.USR To Time 6.0 = CON.150000
PAR.USR_To_Time_6_0 = 150000;

// PAR.Date To               USR = PAR.Production Date
PAR.Date_To_USR = PAR.Production_Date;

// IF PAR.Production Shift is Shift 2
IF PAR.Production_Shift = '2';

// PAR.USR From Time 6.0 = CON.150001
PAR.USR_From_Time_6_0 = 150001;

// PAR.USR To Time 6.0 = CON.055959
PAR.USR_To_Time_6_0 = 055959;

// PAR.Date To               USR = PAR.Production Date + CON.1 *DAYS
PAR.Date_To_USR = DATEINCR(PAR.Production_Date 1 'DY' 1111111 'NONE' 'N' 1);

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Accum Partl Prod  RT) TYPE(RTVOBJ) FILE(POCQCPP)           AC1664198;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.USR_From_Time_6_0);
PARAMETER(PAR.USR_To_Time_6_0);
PARAMETER(PAR.Date_To_USR);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.Number_of_Prod_Shifts);
{
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 //?End of File
 CASE;

 // IF DB1.Transaction Date Code GT PAR.Date To               USR
 IF DB1.Transaction_Date_Code > PAR.Date_To_USR;

 // OR DB1.Transaction Date Code EQ PAR.Date To               USR
 OR ( DB1.Transaction_Date_Code = PAR.Date_To_USR;

 // AND DB1.Transaction Time GT PAR.USR To Time 6.0
 AND DB1.Transaction_Time > PAR.USR_To_Time_6_0 );

 QUIT;

 ENDIF;

 //?OMT:  Deletes made before 5:30 belong to Shift A.
 CASE;

 // IF DB1.Yld Transaction Weight is Less than zero
 IF DB1.Yld_Transaction_Weight < *ZERO;

 // AND DB1.Transaction Time is 15:15:01 - 17:30:00
 AND DB1.Transaction_Time >= 151501;
 AND DB1.Transaction_Time <= 173000;

 // AND PAR.Number of Prod Shifts is Shift 2
 AND PAR.Number_of_Prod_Shifts = '2';

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 //?Process Record
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // LCL.Trans qty + Final Tot = CON.*ZERO
 LCL.Trans_qty_+_Final_Tot = *ZERO;

 // LCL.Trans Wgt +           USR = CON.*ZERO
 LCL.Trans_Wgt_+_USR = *ZERO;

 // LCL.Trans qty - Final Tot = CON.*ZERO
 LCL.Trans_qty_Final_Tot = *ZERO;

 // LCL.Trans Wgt -           USR = CON.*ZERO
 LCL.Trans_Wgt_USR = *ZERO;

 //?Move
 CASE;

 // IF DB1.Yld Transaction Quantity is LT Zero
 IF DB1.Yld_Transaction_Quantity < *ZERO;

 // LCL.Trans qty - Final Tot = DB1.Yld Transaction Quantity
 LCL.Trans_qty_Final_Tot = DB1.Yld_Transaction_Quantity;

 // LCL.Trans Wgt -           USR = DB1.Yld Transaction Weight
 LCL.Trans_Wgt_USR = DB1.Yld_Transaction_Weight;

 //?Move
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Trans qty + Final Tot = DB1.Yld Transaction Quantity
 LCL.Trans_qty_+_Final_Tot = DB1.Yld_Transaction_Quantity;

 // LCL.Trans Wgt +           USR = DB1.Yld Transaction Weight
 LCL.Trans_Wgt_+_USR = DB1.Yld_Transaction_Weight;

 ENDIF;

 EXECUTE FUNCTION(Rtv Credit Item Sts   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1326370;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Credit_Item_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Create Yld Inv Bal for Partial Production (+RR)  & Part Del  (-RR)
 CASE;

 // IF DB1.Yld Inv Balance Type is Partial
 IF DB1.Yld_Inv_Balance_Type = 'PT';

 //?Update Balance Record
 CASE;

 // IF LCL.Trans Wgt -           USR is Not equal zero
 IF LCL.Trans_Wgt_USR <> *ZERO;

 // OR LCL.Trans Wgt +           USR is Not equal zero
 OR LCL.Trans_Wgt_+_USR <> *ZERO;

 EXECUTE FUNCTION(Rtv Crt/Chg YIB       RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1664305;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Partial_Item_Code);
 PARAMETER(DB1.Yld_Inv_Balance_Type);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(LCL.Trans_qty_+_Final_Tot);
 PARAMETER(LCL.Trans_Wgt_+_USR);
 PARAMETER(LCL.Trans_qty_Final_Tot);
 PARAMETER(LCL.Trans_Wgt_USR);
 PARAMETER(LCL.Credit_Item_Status);
 {
  //?USER: Processing if Data record not found

  // LCL.Delete Pending Qty = CON.*ZERO - PAR.Delete Pending Qty
  LCL.Delete_Pending_Qty = *ZERO - PAR.Delete_Pending_Qty;

  // LCL.Delete Pending Wgt = CON.*ZERO - PAR.Delete Pending Wgt
  LCL.Delete_Pending_Wgt = *ZERO - PAR.Delete_Pending_Wgt;

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Crt Yld Inventory Bal CR) TYPE(CRTOBJ) FILE(POCOCPP)           AC1664073;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Inv_Balance_Type);
  PARAMETER(PAR.WIP_Usage_Company_Num);
  PARAMETER(PAR.WIP_Usage_Dept_Code);
  PARAMETER(PAR.WIP_Usage_Prod_Line_Code);
  PARAMETER(PAR.Partial_Produced_Qty);
  PARAMETER(PAR.Partial_Produced_Wgt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Delete_Pending_Qty);
  PARAMETER(LCL.Delete_Pending_Wgt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER('O');
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // LCL.Produced Qty = DB1.Produced Qty + PAR.Produced Qty
  LCL.Partial_Produced_Qty = DB1.Partial_Produced_Qty + PAR.Partial_Produced_Qty;

  // LCL.Produced Wgt = DB1.Produced Wgt + PAR.Produced Wgt
  LCL.Partial_Produced_Wgt = DB1.Partial_Produced_Wgt + PAR.Partial_Produced_Wgt;

  // LCL.Delete Pending Qty = DB1.Delete Pending Qty - PAR.Delete Pending Qty
  LCL.Delete_Pending_Qty = DB1.Delete_Pending_Qty - PAR.Delete_Pending_Qty;

  // LCL.Delete Pending Wgt = DB1.Delete Pending Wgt - PAR.Delete Pending Wgt
  LCL.Delete_Pending_Wgt = DB1.Delete_Pending_Wgt - PAR.Delete_Pending_Wgt;

  EXECUTE FUNCTION(Chg Yld Inventory Bal CH) TYPE(CHGOBJ) FILE(POCOCPP)           AC1664074;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Partial_Item_Code);
  PARAMETER(DB1.Yld_Inv_Balance_Type);
  PARAMETER(DB1.WIP_Usage_Company_Num);
  PARAMETER(DB1.WIP_Usage_Dept_Code);
  PARAMETER(DB1.WIP_Usage_Prod_Line_Code);
  PARAMETER(LCL.Partial_Produced_Qty);
  PARAMETER(LCL.Partial_Produced_Wgt);
  PARAMETER(DB1.Beginning_Inv_Qty);
  PARAMETER(DB1.Beginning_Inv_Wgt);
  PARAMETER(LCL.Delete_Pending_Qty);
  PARAMETER(LCL.Delete_Pending_Wgt);
  PARAMETER(DB1.Used_Qty);
  PARAMETER(DB1.Used_Wgt);
  PARAMETER(DB1.Not_Used_Qty);
  PARAMETER(DB1.Not_Used_Wgt);
  PARAMETER(DB1.WIP_Rejected_Qty);
  PARAMETER(DB1.WIP_Rejected_Wgt);
  PARAMETER(DB1.Yld_Balance_Comment);
  PARAMETER('O');
  PARAMETER(DB1.Credit_Item_Status);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Update Balance Record
 CASE;

 // IF LCL.Trans Wgt -           USR is Not equal zero
 IF LCL.Trans_Wgt_USR <> *ZERO;

 // OR LCL.Trans Wgt +           USR is Not equal zero
 OR LCL.Trans_Wgt_+_USR <> *ZERO;

 EXECUTE FUNCTION(Rtv Crt/Chg Reject    RT) TYPE(RTVOBJ) FILE(POCOCPP)           AC1674473;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(PAR.Production_Shift);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Partial_Item_Code);
 PARAMETER(DB1.Yld_Inv_Balance_Type);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(LCL.Trans_qty_+_Final_Tot);
 PARAMETER(LCL.Trans_Wgt_+_USR);
 PARAMETER(LCL.Trans_qty_Final_Tot);
 PARAMETER(LCL.Trans_Wgt_USR);
 PARAMETER(LCL.Credit_Item_Status);
 {
  //?USER: Processing if Data record not found

  // LCL.Delete Pending Qty = CON.*ZERO - PAR.Delete Pending Qty
  LCL.Delete_Pending_Qty = *ZERO - PAR.Delete_Pending_Qty;

  // LCL.Delete Pending Wgt = CON.*ZERO - PAR.Delete Pending Wgt
  LCL.Delete_Pending_Wgt = *ZERO - PAR.Delete_Pending_Wgt;

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  EXECUTE FUNCTION(Crt Yld Inventory Bal CR) TYPE(CRTOBJ) FILE(POCOCPP)           AC1664073;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Partial_Item_Code);
  PARAMETER(PAR.Yld_Inv_Balance_Type);
  PARAMETER(PAR.WIP_Usage_Company_Num);
  PARAMETER(PAR.WIP_Usage_Dept_Code);
  PARAMETER(PAR.WIP_Usage_Prod_Line_Code);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Beginning_Inv_Qty);
  PARAMETER(PAR.Beginning_Inv_Wgt);
  PARAMETER(LCL.Delete_Pending_Qty);
  PARAMETER(LCL.Delete_Pending_Wgt);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER('O');
  PARAMETER(PAR.Credit_Item_Status);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?USER: Process Data record

  // LCL.Beginning Inv Qty = DB1.Beginning Inv Qty + PAR.Beginning Inv Qty
  LCL.Beginning_Inv_Qty = DB1.Beginning_Inv_Qty + PAR.Beginning_Inv_Qty;

  // LCL.Beginning Inv Wgt = DB1.Beginning Inv Wgt + PAR.Beginning Inv Wgt
  LCL.Beginning_Inv_Wgt = DB1.Beginning_Inv_Wgt + PAR.Beginning_Inv_Wgt;

  // LCL.Delete Pending Qty = DB1.Delete Pending Qty - PAR.Delete Pending Qty
  LCL.Delete_Pending_Qty = DB1.Delete_Pending_Qty - PAR.Delete_Pending_Qty;

  // LCL.Delete Pending Wgt = DB1.Delete Pending Wgt - PAR.Delete Pending Wgt
  LCL.Delete_Pending_Wgt = DB1.Delete_Pending_Wgt - PAR.Delete_Pending_Wgt;

  EXECUTE FUNCTION(Chg Yld Inventory Bal CH) TYPE(CHGOBJ) FILE(POCOCPP)           AC1664074;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Department_Code);
  PARAMETER(DB1.Production_Line_Code);
  PARAMETER(DB1.Production_Date);
  PARAMETER(DB1.Production_Shift);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Partial_Item_Code);
  PARAMETER(DB1.Yld_Inv_Balance_Type);
  PARAMETER(DB1.WIP_Usage_Company_Num);
  PARAMETER(DB1.WIP_Usage_Dept_Code);
  PARAMETER(DB1.WIP_Usage_Prod_Line_Code);
  PARAMETER(DB1.Partial_Produced_Qty);
  PARAMETER(DB1.Partial_Produced_Wgt);
  PARAMETER(LCL.Beginning_Inv_Qty);
  PARAMETER(LCL.Beginning_Inv_Wgt);
  PARAMETER(LCL.Delete_Pending_Qty);
  PARAMETER(LCL.Delete_Pending_Wgt);
  PARAMETER(DB1.Used_Qty);
  PARAMETER(DB1.Used_Wgt);
  PARAMETER(DB1.Not_Used_Qty);
  PARAMETER(DB1.Not_Used_Wgt);
  PARAMETER(DB1.WIP_Rejected_Qty);
  PARAMETER(DB1.WIP_Rejected_Wgt);
  PARAMETER(DB1.Yld_Balance_Comment);
  PARAMETER('O');
  PARAMETER(DB1.Credit_Item_Status);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(WRK.EDI_Status_1);
  PARAMETER(WRK.EDI_Status_2);
  PARAMETER(WRK.EDI_Status_3);
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

}


