// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKGJEFR
// ?Date: 14.08.2025 Time: 02:51:18
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?S034163 JM 08/05/25 - Include next business date in warning message
//?S029664 JM 04/30/25 - Fix Held Over logic, It will display warning
//?                    - message if New Pen has Heldover.
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(HPE034) TYPE(EXCINTFUN)                                        AB1195750;
{
 //?Execute internal function

 //?Create a Trucker edit. - Dwight Shepard
 //?Purpose:
 //?Clone the Trucker report that post and remove
 //?all update of vouchers.  Producer the report
 //?for the user to sight review before continue on.
 //?Modification History
 //?Date        Person   Description
}


// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(Rtv Shift,HldOvrShft  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1195857;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(RCD.TH_Shift_Held_Over);
PARAMETER(WRK.TH_Shift_Held_Over_Head);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?USER: Validate subfile record fields

//?* User Defined * Prompts
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Held Over Pen Number
IF PGM.*Cursor_field = RCD.Held_Over_Pen_Number;

// Call program Sel Pen               SR.
CALL PROGRAM(Sel Pen               SR) ('PKJ0SRR');
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Held_Over_Pen_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

//?* Yard Dead * Validations
CASE;

// IF RCD.TD Yard Dead GT RCD.TD Pen Head
IF RCD.TD_Yard_Dead > RCD.TD_Pen_Head;

// Send error message - 'Yard dead head cannot be greater than pen head.'
ERROR(PRK0231);

QUIT;

ENDIF;

//?* Held Over * Validations
CASE;

// IF RCD.TD Held Over EQ WRK.Zero USR
IF RCD.TD_Held_Over = WRK.Zero_USR;

// AND RCD.Held Over Pen Number EQ WRK.Blank USR
AND RCD.Held_Over_Pen_Number = WRK.Blank_USR;

// RCD.Held Over Pen Company Num = CON.*ZERO
RCD.Held_Over_Pen_Company_Num = *ZERO;

//?* Held Over * Validations
// IF *OTHERWISE
IF *OTHERWISE;

//?If hogs are moved to a new pen, it must have an open status
CASE;

// IF RCD.Held Over Pen Number NE CTL.Pen Number
IF RCD.Held_Over_Pen_Number <> CTL.Pen_Number;

EXECUTE FUNCTION(Rtv Val Pen-no parms  RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1118072;
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Held_Over_Pen_Number);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Pen &1 invalid for Held Over.'
ERROR(PRK0228);
MSGPARM(RCD.Held_Over_Pen_Number);

QUIT;

ENDIF;

ENDIF;

//?Held Over head must be <= # net head in pen
// WRK.Head Total USR = RCD.TD Pen Head - RCD.TD Yard Dead
WRK.Head_Total_USR = RCD.TD_Pen_Head - RCD.TD_Yard_Dead;

EXECUTE FUNCTION(Rtv Ttt Condemmed Hd  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1144045;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.TH_Head_Condemned);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.TH_Head_Condemned = *ZERO;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Head Total USR = WRK.Head Total USR - WRK.TH Head Condemned
WRK.Head_Total_USR = WRK.Head_Total_USR - WRK.TH_Head_Condemned;

CASE;

// IF RCD.TD Held Over GT WRK.Head Total USR
IF RCD.TD_Held_Over > WRK.Head_Total_USR;

// Send error message - 'Held over head cannot be greater than pen head less yard dead.'
ERROR(PRK0227);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.TD Held Over EQ WRK.Zero USR
IF RCD.TD_Held_Over = WRK.Zero_USR;

// Send error message - 'Held over head cannot be 0.'
ERROR(PRK0235);

QUIT;

ENDIF;

ENDIF;

// RCD.Held Over Pen Company Num = RCD.Pen Company Number
RCD.Held_Over_Pen_Company_Num = RCD.Pen_Company_Number;

ENDIF;

//?S029664 JM 04/30/25-Added warning for error Heldover scenario.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv HeldOver & Tattoos RT) TYPE(RTVOBJ) FILE(PKA2CPP)          AB1373199;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.Held_Over_Pen_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(LCL.Tattoo_1_USR);
PARAMETER(LCL.Tattoo_2_USR);
PARAMETER(LCL.Tattoo_3_USR);
PARAMETER(LCL.Tattoo_4_USR);
PARAMETER(LCL.tattoo_5_USR);
PARAMETER(NLL.@Status_+);
PARAMETER(NLL.TH_Schedule_Kill_Shift);
PARAMETER(LCL.TD_Held_Over_Status);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.*ZERO
 WRK.Count_USR = *ZERO;

 // PAR.@Status +/- = WRK.Blank USR
 PAR.@Status_+ = WRK.Blank_USR;

 // PAR.Tattoo 1              USR = CON.*BLANK
 PAR.Tattoo_1_USR = *BLANK;

 // PAR.Tattoo 2              USR = CON.*BLANK
 PAR.Tattoo_2_USR = *BLANK;

 // PAR.Tattoo 3              USR = CON.*BLANK
 PAR.Tattoo_3_USR = *BLANK;

 // PAR.Tattoo 4              USR = CON.*BLANK
 PAR.Tattoo_4_USR = *BLANK;

 // PAR.tattoo 5              USR = CON.*BLANK
 PAR.tattoo_5_USR = *BLANK;

 // PAR.TD Held Over Status = CND.Blank
 PAR.TD_Held_Over_Status = *BLANK;

 //?USER: Process Data record

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 // WRK.Tattoo Nbr 4          USR = DB1.TH Tattoo Number
 WRK.Tattoo_Nbr_4_USR = DB1.TH_Tattoo_Number;

 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 // PAR.Tattoo 1              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_1_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 EXECUTE FUNCTION(Rtv Shift,HldOvrShft  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1195857;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(WRK.TH_Shift_Held_Over);
 PARAMETER(WRK.TH_Shift_Held_Over_Head);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Populate Held Over flag
 CASE;

 // IF DB1.TD Held Over Status is Ready-Hld Over Processing
 IF DB1.TD_Held_Over_Status = 'Y';

 // AND DB1.TD Held Over is greater than 0
 AND DB1.TD_Held_Over > *ZERO;

 // PAR.TD Held Over Status = CND.Ready-Hld Over Processing
 PAR.TD_Held_Over_Status = 'Y';

 ENDIF;

 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 // PAR.Tattoo 2              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_2_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 //?Populate Held Over flag
 CASE;

 // IF DB1.TD Held Over Status is Ready-Hld Over Processing
 IF DB1.TD_Held_Over_Status = 'Y';

 // AND DB1.TD Held Over is greater than 0
 AND DB1.TD_Held_Over > *ZERO;

 // PAR.TD Held Over Status = CND.Ready-Hld Over Processing
 PAR.TD_Held_Over_Status = 'Y';

 ENDIF;

 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 // PAR.Tattoo 3              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_3_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 //?Populate Held Over flag
 CASE;

 // IF DB1.TD Held Over Status is Ready-Hld Over Processing
 IF DB1.TD_Held_Over_Status = 'Y';

 // AND DB1.TD Held Over is greater than 0
 AND DB1.TD_Held_Over > *ZERO;

 // PAR.TD Held Over Status = CND.Ready-Hld Over Processing
 PAR.TD_Held_Over_Status = 'Y';

 ENDIF;

 // IF WRK.Count USR is Four
 IF WRK.Count_USR = 4;

 // PAR.Tattoo 4              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_4_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 //?Populate Held Over flag
 CASE;

 // IF DB1.TD Held Over Status is Ready-Hld Over Processing
 IF DB1.TD_Held_Over_Status = 'Y';

 // AND DB1.TD Held Over is greater than 0
 AND DB1.TD_Held_Over > *ZERO;

 // PAR.TD Held Over Status = CND.Ready-Hld Over Processing
 PAR.TD_Held_Over_Status = 'Y';

 ENDIF;

 // IF WRK.Count USR is Five
 IF WRK.Count_USR = 5;

 // PAR.tattoo 5              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.tattoo_5_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 //?Populate Held Over flag
 CASE;

 // IF DB1.TD Held Over Status is Ready-Hld Over Processing
 IF DB1.TD_Held_Over_Status = 'Y';

 // AND DB1.TD Held Over is greater than 0
 AND DB1.TD_Held_Over > *ZERO;

 // PAR.TD Held Over Status = CND.Ready-Hld Over Processing
 PAR.TD_Held_Over_Status = 'Y';

 ENDIF;

 // IF WRK.Count USR is Six
 IF WRK.Count_USR = 6;

 // PAR.@Status +/- = CND.Add
 PAR.@Status_+ = '+';

 QUIT;

 ENDIF;

}


// WRK.Tattoo Nbr 4          USR = RCD.TH Tattoo Number
WRK.Tattoo_Nbr_4_USR = RCD.TH_Tattoo_Number;

// LCL.Tattoo 6              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
LCL.Tattoo_6_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

CASE;

// IF LCL.TD Held Over Status is Ready-Hld Over Processing
IF LCL.TD_Held_Over_Status = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?S034163 JM 08/05/25-Include next kill date in warning.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Rtv Nxt Kill Dt 2 OMS XF.
CALL PROGRAM(Rtv Nxt Kill Dt 2 OMS XF) ('PDUXXFR');
PARAMETER(RCD.Held_Over_Pen_Company_Num);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(LCL.Next_Kill_Date);

//?Build Next kill date logic in format MM/DD/YY.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Next Kill Date Alpha = CVTVAR(LCL.Next Kill Date)
LCL.Next_Kill_Date_Alpha = CVTVAR(LCL.Next_Kill_Date);

// LCL.Year Alpha USR 2 = SUBSTRING(LCL.Next Kill Date Alpha,CON.2,CON.2)
LCL.Year_Alpha_USR_2 = SUBSTRING(LCL.Next_Kill_Date_Alpha:2:2);

// LCL.MM Alpha USR = SUBSTRING(LCL.Next Kill Date Alpha,CON.4,CON.2)
LCL.MM_Alpha_USR = SUBSTRING(LCL.Next_Kill_Date_Alpha:4:2);

// LCL.Day Alpha USR = SUBSTRING(LCL.Next Kill Date Alpha,CON.6,CON.2)
LCL.Day_Alpha_USR = SUBSTRING(LCL.Next_Kill_Date_Alpha:6:2);

// LCL.Date MM/DD/YY USR = CONCAT(LCL.MM Alpha USR,CON./,CON.*ZERO)
LCL.Date_MM_DD_YY_USR = LCL.MM_Alpha_USR + '/' (*ZERO);

// LCL.Date MM/DD/YY USR = CONCAT(LCL.Date MM/DD/YY USR,LCL.Day Alpha USR,CON.*ZERO)
LCL.Date_MM_DD_YY_USR = LCL.Date_MM_DD_YY_USR + LCL.Day_Alpha_USR (*ZERO);

// LCL.Date MM/DD/YY USR = CONCAT(LCL.Date MM/DD/YY USR,CON./,CON.*ZERO)
LCL.Date_MM_DD_YY_USR = LCL.Date_MM_DD_YY_USR + '/' (*ZERO);

// LCL.Date MM/DD/YY USR = CONCAT(LCL.Date MM/DD/YY USR,LCL.Year Alpha USR 2,CON.*ZERO)
LCL.Date_MM_DD_YY_USR = LCL.Date_MM_DD_YY_USR + LCL.Year_Alpha_USR_2 (*ZERO);

ENDIF;

//?S029664 JM 04/30/25-Populate warning messages for HeldOver.
CASE;

// IF LCL.Tattoo 6              USR EQ LCL.Tattoo 1              USR
IF ( LCL.Tattoo_6_USR = LCL.Tattoo_1_USR;

// OR LCL.Tattoo 6              USR EQ LCL.Tattoo 2              USR
OR LCL.Tattoo_6_USR = LCL.Tattoo_2_USR;

// OR LCL.Tattoo 6              USR EQ LCL.Tattoo 3              USR
OR LCL.Tattoo_6_USR = LCL.Tattoo_3_USR;

// OR LCL.Tattoo 6              USR EQ LCL.Tattoo 4              USR
OR LCL.Tattoo_6_USR = LCL.Tattoo_4_USR;

// OR LCL.Tattoo 6              USR EQ LCL.tattoo 5              USR
OR LCL.Tattoo_6_USR = LCL.tattoo_5_USR );

// LCL.Tattoo Number Alpha = CVTVAR(RCD.TH Tattoo Number)
LCL.Tattoo_Number_Alpha = CVTVAR(RCD.TH_Tattoo_Number);

// LCL.Text 63 USR = CONCAT(CON.Kill Date for Tattoo,LCL.Tattoo Number Alpha,CON.1)
LCL.Text_63_USR = 'Kill Date for Tattoo' + LCL.Tattoo_Number_Alpha (1);

// LCL.Text 63 USR = CONCAT(LCL.Text 63 USR,CON.will be next business day,CON.1)
LCL.Text_63_USR = LCL.Text_63_USR + 'will be next business day' (1);

// LCL.Text 63 USR = CONCAT(LCL.Text 63 USR,LCL.Date MM/DD/YY USR,CON.1)
LCL.Text_63_USR = LCL.Text_63_USR + LCL.Date_MM_DD_YY_USR (1);

// LCL.Text 63 USR = CONCAT(LCL.Text 63 USR,CON..,CON.*ZERO)
LCL.Text_63_USR = LCL.Text_63_USR + '.' (*ZERO);

// LCL.Text 63 USR 2 = CONCAT(CON.Pen,RCD.Held Over Pen Number,CON.1)
LCL.Text_63_USR_2 = 'Pen' + RCD.Held_Over_Pen_Number (1);

// LCL.Text 63 USR 2 = CONCAT(LCL.Text 63 USR 2,CON.has Heldover,Tattoo,CON.1)
LCL.Text_63_USR_2 = LCL.Text_63_USR_2 + 'has Heldover,Tattoo' (1);

// LCL.Text 63 USR 2 = CONCAT(LCL.Text 63 USR 2,LCL.Tattoo Number Alpha,CON.1)
LCL.Text_63_USR_2 = LCL.Text_63_USR_2 + LCL.Tattoo_Number_Alpha (1);

// LCL.Text 63 USR 2 = CONCAT(LCL.Text 63 USR 2,CON.is present in pen.,CON.1)
LCL.Text_63_USR_2 = LCL.Text_63_USR_2 + 'is present in pen.' (1);

//?S029664 JM 04/30/25-Populate warning messages for HeldOver.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Tattoo Number Alpha = CVTVAR(RCD.TH Tattoo Number)
LCL.Tattoo_Number_Alpha = CVTVAR(RCD.TH_Tattoo_Number);

// LCL.Text 63 USR = CONCAT(CON.Kill date for Tattoo,LCL.Tattoo Number Alpha,CON.1)
LCL.Text_63_USR = 'Kill date for Tattoo' + LCL.Tattoo_Number_Alpha (1);

// LCL.Text 63 USR = CONCAT(LCL.Text 63 USR,CON.will be next business day,CON.1)
LCL.Text_63_USR = LCL.Text_63_USR + 'will be next business day' (1);

// LCL.Text 63 USR = CONCAT(LCL.Text 63 USR,LCL.Date MM/DD/YY USR,CON.1)
LCL.Text_63_USR = LCL.Text_63_USR + LCL.Date_MM_DD_YY_USR (1);

// LCL.Text 63 USR = CONCAT(LCL.Text 63 USR,CON..,CON.*ZERO)
LCL.Text_63_USR = LCL.Text_63_USR + '.' (*ZERO);

//?S034163 JM 08/05/25-Display any one tattoo available in Pen in Msg.
CASE;

// IF LCL.Tattoo 1              USR is Entered
IF LCL.Tattoo_1_USR <> '0';

// LCL.Tattoo Number Alpha = CVTVAR(LCL.Tattoo 1              USR)
LCL.Tattoo_Number_Alpha = CVTVAR(LCL.Tattoo_1_USR);

//?S034163 JM 08/05/25-Display any one tattoo available in Pen in Msg.
// IF LCL.Tattoo 2              USR is Entered
IF LCL.Tattoo_2_USR <> '0';

// LCL.Tattoo Number Alpha = CVTVAR(LCL.Tattoo 2              USR)
LCL.Tattoo_Number_Alpha = CVTVAR(LCL.Tattoo_2_USR);

//?S034163 JM 08/05/25-Display any one tattoo available in Pen in Msg.
// IF LCL.Tattoo 3              USR is Entered
IF LCL.Tattoo_3_USR <> '0';

// LCL.Tattoo Number Alpha = CVTVAR(LCL.Tattoo 3              USR)
LCL.Tattoo_Number_Alpha = CVTVAR(LCL.Tattoo_3_USR);

//?S034163 JM 08/05/25-Display any one tattoo available in Pen in Msg.
// IF LCL.Tattoo 4              USR is Entered
IF LCL.Tattoo_4_USR <> '0';

// LCL.Tattoo Number Alpha = CVTVAR(LCL.Tattoo 4              USR)
LCL.Tattoo_Number_Alpha = CVTVAR(LCL.Tattoo_4_USR);

//?S034163 JM 08/05/25-Display any one tattoo available in Pen in Msg.
// IF LCL.tattoo 5              USR is Entered
IF LCL.tattoo_5_USR <> '0';

// LCL.Tattoo Number Alpha = CVTVAR(LCL.tattoo 5              USR)
LCL.Tattoo_Number_Alpha = CVTVAR(LCL.tattoo_5_USR);

ENDIF;

// LCL.Text 63 USR 2 = CONCAT(CON.Pen,RCD.Held Over Pen Number,CON.1)
LCL.Text_63_USR_2 = 'Pen' + RCD.Held_Over_Pen_Number (1);

// LCL.Text 63 USR 2 = CONCAT(LCL.Text 63 USR 2,CON.already has Heldover,,CON.1)
LCL.Text_63_USR_2 = LCL.Text_63_USR_2 + 'already has Heldover,' (1);

// LCL.Text 63 USR 2 = CONCAT(LCL.Text 63 USR 2,CON.Tattoo,CON.1)
LCL.Text_63_USR_2 = LCL.Text_63_USR_2 + 'Tattoo' (1);

// LCL.Text 63 USR 2 = CONCAT(LCL.Text 63 USR 2,LCL.Tattoo Number Alpha,CON.1)
LCL.Text_63_USR_2 = LCL.Text_63_USR_2 + LCL.Tattoo_Number_Alpha (1);

// LCL.Text 63 USR 2 = CONCAT(LCL.Text 63 USR 2,CON.is present in pen.,CON.1)
LCL.Text_63_USR_2 = LCL.Text_63_USR_2 + 'is present in pen.' (1);

ENDIF;

ENDIF;

// Call program Pmt HeldOver Warning  PV.
CALL PROGRAM(Pmt HeldOver Warning  PV) ('PWO3PVR');
PARAMETER(LCL.Text_63_USR);
PARAMETER(LCL.Text_63_USR_2);
PARAMETER(LCL.Confirm_USR);

//?S029664 JM 04/30/25-Proceed if user confirmed Yes.
CASE;

// IF LCL.Confirm               USR is Yes
IF LCL.Confirm_USR = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?S029664 JM 04/30/25-Proceed if user confirmed Yes.
// IF *OTHERWISE
IF *OTHERWISE;

QUIT;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

//?Sum of yard dead, held over, shift held over cannot exceed pen hd.
// Synon (17,7) work field =       *
PGM.*Synon_177_work_field = RCD.TD_Yard_Dead + RCD.TD_Held_Over;

CASE;

// IF PGM.*Synon (17,7) work field GT RCD.TD Pen Head
IF PGM.*Synon_177_work_field > RCD.TD_Pen_Head;

// Send error message - 'Sum of Yard Dead and Held Over head cannot exceed the pen head.'
ERROR(PRK0237);

QUIT;

ENDIF;

//?* Call Shift Held Over Window  *
CASE;

// IF RCD.*SFLSEL is *Option 3 (Reusable)
IF RCD.*SFLSEL = '3';

CASE;

// IF RCD.TH Schedule Kill Shift is Shift 2
IF RCD.TH_Schedule_Kill_Shift = '2';

// Send error message - 'Option not allowed for Scheduled Kill Shift 2 tattoos.'
ERROR(PRK0742);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt Shift Held Ovr Hd E1.
CALL PROGRAM(Edt Shift Held Ovr Hd E1) ('PKKEE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);

// RCD.*SFLSEL = CND.*Reset to blanks
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.TH_Purchase_Date);
PARAMETER(WRK.TH_Group_Reference);
PARAMETER(WRK.TH_Live_Purchase_UOM);
PARAMETER(WRK.TH_Live_Purchase_Price);
PARAMETER(WRK.TH_Resale_UOM);
PARAMETER(WRK.TH_Recalc_Live_Wgt_Yld);
PARAMETER(WRK.TH_Pricing_Date);
PARAMETER(WRK.TH_Resale_Spread_Sts);
PARAMETER(WRK.TH_Dead_On_Arrival);
PARAMETER(WRK.TH_Head_Received);
PARAMETER(WRK.TH_Yard_Deads);
PARAMETER(WRK.TH_Held_Over);
PARAMETER(WRK.TH_Head_Condemned);
PARAMETER(WRK.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Adds);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(WRK.TH_Live_Wgt);
PARAMETER(WRK.TH_Hot_Wgt);
PARAMETER(WRK.TH_Tot_Loin_Eye_Depth);
PARAMETER(WRK.TH_Tot_Backfat_Inches);
PARAMETER(WRK.TH_Tot_Light_Reflectance);
PARAMETER(WRK.TH_Avg_Live_Wgt);
PARAMETER(WRK.TH_Avg_Hot_Wgt);
PARAMETER(WRK.TH_Avg_Light_Reflectance);
PARAMETER(WRK.TH_Avg_Lean_Percent);
PARAMETER(WRK.TH_Avg_Loin_Eye_Depth);
PARAMETER(WRK.TH_Avg_Backfat);
PARAMETER(WRK.TH_Std_Yield_Percent);
PARAMETER(WRK.TH_Actual_Yield);
PARAMETER(WRK.TH_Yield_Difference);
PARAMETER(WRK.TH_Recalc_Live_Wgt);
PARAMETER(WRK.TH_CM_Base_Mkt_Price);
PARAMETER(WRK.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(WRK.TH_CM_Sort_Discount_Amt);
PARAMETER(WRK.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(WRK.TH_CM_Base_Carcass_Value);
PARAMETER(WRK.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(WRK.TH_CM_Carcass_Gross_Amt);
PARAMETER(WRK.TH_Deduction_Amt);
PARAMETER(WRK.TH_Total_Net_WO_Adds);
PARAMETER(WRK.TH_Carcass_Net_Amt);
PARAMETER(WRK.TH_Additions_Amt);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER(WRK.TH_Fixed_Cost_Amount);
PARAMETER(WRK.TH_Payment_Sts);
PARAMETER(WRK.TH_Header_Error_Sts);
PARAMETER(WRK.TH_Detail_Error_Sts);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(WRK.TH_Bal_to_Kill_Gen);
PARAMETER(WRK.TH_Commission_A_P_Voucher);
PARAMETER(WRK.TH_Voucher_Payment_Date);
PARAMETER(WRK.TH_User_Error_Override);
PARAMETER(WRK.TH_Held_Over_Record);
PARAMETER(WRK.TH_Sex);
PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
PARAMETER(WRK.TH_Commission_Paid_Date);
PARAMETER(WRK.TH_Actual_Check_Date);
PARAMETER(WRK.TH_Shipped_Weight);
PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(WRK.TH_FFLI);
PARAMETER(WRK.TH_Kill_Product_Value);
PARAMETER(WRK.TH_Cut_Product_Value);
PARAMETER(WRK.TH_Render_Product_Value);
PARAMETER(WRK.TH_Shift_Held_Over_Head);
PARAMETER(WRK.DF_Defect_Code);
PARAMETER(WRK.THP_Process_Code);
PARAMETER(WRK.HB_Buyer_Code);
PARAMETER(WRK.GN_Genetic_Code);
PARAMETER(WRK.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.TH Head Received = WRK.TH Head Received + CTL.TH Head Received
CTL.TH_Head_Received = WRK.TH_Head_Received + CTL.TH_Head_Received;

// CTL.TH Dead On Arrival = WRK.TH Dead On Arrival + CTL.TH Dead On Arrival
CTL.TH_Dead_On_Arrival = WRK.TH_Dead_On_Arrival + CTL.TH_Dead_On_Arrival;

// CTL.TH Yard Deads = WRK.TH Yard Deads + CTL.TH Yard Deads
CTL.TH_Yard_Deads = WRK.TH_Yard_Deads + CTL.TH_Yard_Deads;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Yrd Dead,Hld OvrSydCH) TYPE(CHGOBJ) FILE(PKA2CPP)          AB1119053;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TD_Sequence_Number);
PARAMETER(RCD.TD_Live_Wgt);
PARAMETER(RCD.TD_Pen_Head);
PARAMETER(RCD.TD_Yard_Dead);
PARAMETER(RCD.TD_Held_Over);
PARAMETER(RCD.TD_Held_Over_Status);
PARAMETER(RCD.TD_Drive_Time);
PARAMETER(RCD.TD_Drive_Hour);
PARAMETER(RCD.TD_Drive_Card_Number);
PARAMETER(RCD.TD_Avg_Live_Wgt);
PARAMETER(RCD.TD_Gen_Bal_To_Kill);
PARAMETER(RCD.TD_Recs_Created_for_HO);
PARAMETER(RCD.TD_User_Status_2);
PARAMETER(RCD.TD_User_Status_3);
PARAMETER(RCD.TD_User_Date_1);
PARAMETER(RCD.TD_User_Date_2);
PARAMETER(RCD.TD_Drive_Date);
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(RCD.TDP_Process_Code);
PARAMETER(RCD.Held_Over_Pen_Company_Num);
PARAMETER(RCD.Held_Over_Pen_Number);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing after Data read

 //?Calculate the net change in Yard Dead and Held Over
 //?to be added to the Tattoo Header after data update.
 // WRK.TD Yard Dead = PAR.TD Yard Dead - DB1.TD Yard Dead
 WRK.TD_Yard_Dead = PAR.TD_Yard_Dead - DB1.TD_Yard_Dead;

 // WRK.TD Held Over = PAR.TD Held Over - DB1.TD Held Over
 WRK.TD_Held_Over = PAR.TD_Held_Over - DB1.TD_Held_Over;

 //?USER: Processing before Data update

 //?H16749 SLM
 //?replace change date with system date
 EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // Call program Rtv System Date & Tim UP.
  CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
  PARAMETER(PAR.RS_Date_Changed);
  PARAMETER(PAR.RS_Time_Changed);

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 //?If held over head was changed but not to 0,
 //?Set Held Over Status to 'Y' for Kill and Night processing routines.
 CASE;

 // IF WRK.TD Held Over EQ WRK.Zero USR
 IF WRK.TD_Held_Over = WRK.Zero_USR;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.TD Held Over NE WRK.Zero USR
 IF PAR.TD_Held_Over <> WRK.Zero_USR;

 // DB1.TD Held Over Status = CND.Ready-Hld Over Processing
 DB1.TD_Held_Over_Status = 'Y';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // DB1.TD Held Over Status = CND.Blank
 DB1.TD_Held_Over_Status = *BLANK;

 // DB1.Held Over Pen Company Num = CON.*ZERO
 DB1.Held_Over_Pen_Company_Num = *ZERO;

 ENDIF;

 ENDIF;

 //?USER: Processing after Data update

 //?Add the net change Yard dead and Held Over to the Tattoo Header
 EXECUTE FUNCTION(Rtv/Chg YrdDd,HldOvr  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1118645;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(WRK.TD_Yard_Dead);
 PARAMETER(WRK.TD_Held_Over);
 {
  //?USER: Initialize routine

  EXECUTE FUNCTION(HPE034) TYPE(EXCINTFUN)                                        AB1195750;
  {
   //?Execute internal function

   //?Create a Trucker edit. - Dwight Shepard
   //?Purpose:
   //?Clone the Trucker report that post and remove
   //?all update of vouchers.  Producer the report
   //?for the user to sight review before continue on.
   //?Modification History
   //?Date        Person   Description
  }

  //?USER: Process Data record

  // WRK.TH Yard Deads = DB1.TH Yard Deads + PAR.TD Yard Dead
  WRK.TH_Yard_Deads = DB1.TH_Yard_Deads + PAR.TD_Yard_Dead;

  // WRK.TH Held Over = DB1.TH Held Over + PAR.TD Held Over
  WRK.TH_Held_Over = DB1.TH_Held_Over + PAR.TD_Held_Over;

  //?** OLD:  Chg Tattoo Header   CH * Tattoo Header ** (PKP)
  EXECUTE FUNCTION(Chg Yard/Held Amount  CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1187278;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(WRK.TH_Yard_Deads);
  PARAMETER(WRK.TH_Held_Over);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 //?Recount Assigned Pen Head and Chg the Pen
 EXECUTE FUNCTION(Rtv Dtl hd/Chg Pen    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1110385;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Initialize routine

  EXECUTE FUNCTION(Set Pen Totals to Zeros) TYPE(RTVOBJ) FILE(PKA3REP)            AB1110376;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(*ZERO);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(WRK.Blank_USR);
   PARAMETER(DB1.Pen_Maximun_Capacity);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Pen_Current_Drive_Card_No);
   PARAMETER(DB1.Pen_Sts);
   PARAMETER(DB1.Pen_Drive_Sequence);
   PARAMETER(DB1.Pen_Type);
   PARAMETER(DB1.Pen_Adjustment);
   PARAMETER(WRK.Blank_USR);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Processing if Data record not found

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv/Chg Pen Totals    RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1110372;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Yard_Dead);
  {
   //?USER: Process Data record

   // WRK.Pen Current Head = PAR.TD Pen Head + DB1.Pen Current Head
   WRK.Pen_Current_Head = PAR.TD_Pen_Head + DB1.Pen_Current_Head;

   // WRK.Pen Current Head = WRK.Pen Current Head - PAR.TD Yard Dead
   WRK.Pen_Current_Head = WRK.Pen_Current_Head - PAR.TD_Yard_Dead;

   EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
   PARAMETER(DB1.Pen_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(DB1.Pen_Description);
   PARAMETER(DB1.Pen_Maximun_Capacity);
   PARAMETER(WRK.Pen_Current_Head);
   PARAMETER(DB1.Pen_Current_Drive_Card_No);
   PARAMETER(DB1.Pen_Sts);
   PARAMETER(DB1.Pen_Drive_Sequence);
   PARAMETER(DB1.Pen_Type);
   PARAMETER(DB1.Pen_Adjustment);
   PARAMETER(DB1.GN_Genetic_Code);
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?USER: Exit processing

  // WRK.Pen Description = CON.*BLANK
  WRK.Pen_Description = *BLANK;

  // WRK.GN Genetic Code = CON.*BLANK
  WRK.GN_Genetic_Code = *BLANK;

  EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF DB1.TDP Process Code is Drive Card Printed
   IF DB1.TDP_Process_Code = 'D';

   // OR DB1.TDP Process Code is Open
   OR DB1.TDP_Process_Code = 'O';

   EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.Genetic_Code_USR);
   PARAMETER(WRK.Pen_Desc_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    //?USER: Process Data record

    // PAR.GN Genetic Code = DB1.GN Genetic Code
    PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

    EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
    PARAMETER(DB1.GN_Genetic_Code);
    PARAMETER(PAR.Pen_Description);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Description = *BLANK;

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   CASE;

   // IF PAR.GN Genetic Code is BLANKS
   IF PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = WRK.Pen_Desc_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
   IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = 'MIXED';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Description);
  PARAMETER(WRK.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

