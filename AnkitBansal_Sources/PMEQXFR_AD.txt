// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMEQXFR
// ?Date: 14.08.2025 Time: 03:44:52
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV Next Saturday      RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1674395;
PARAMETER(363);
PARAMETER(PAR.Market_Price_Date);
PARAMETER(PAR.Saturday_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Saturday
 IF DB1.Day_of_Week = '7';

 // PAR.Scheduled Ship Date = DB1.Post to G/L Date
 PAR.Scheduled_Ship_Date = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


// LCL.Sunday                USR = PAR.Market Price Date
LCL.Sunday_USR = PAR.Market_Price_Date;

EXECUTE FUNCTION(BLD Sls/Brkr Prc Rules RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1922192;
PARAMETER(*ZERO);
PARAMETER(LCL.Customer_Name);
PARAMETER(LCL.Ship_To_Customer_Flag);
PARAMETER(LCL.Record_Status);
PARAMETER(LCL.Sunday_USR);
PARAMETER(PAR.Saturday_USR);
{
 //?USER: Process Data record

 //?Must be a ship to cust and active to process
 CASE;

 // IF DB1.Ship To Customer Flag is Allow Use as Ship To Cust
 IF DB1.Ship_To_Customer_Flag = 'Y';

 // AND DB1.Record Status is Active
 AND DB1.Record_Status = 'A';

 EXECUTE FUNCTION(Rtv All Values FX/EM+ RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1743374;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Internet_Password);
 PARAMETER(LCL.Email_Address);
 PARAMETER(LCL.Email_User_ID);
 PARAMETER(LCL.EDI_Trading_Partner_No);
 PARAMETER(LCL.EDI_Cust_Duns_Number);
 PARAMETER(LCL.EDI_Warehouse_Store_No);
 PARAMETER(LCL.State_Tax_ID);
 PARAMETER(LCL.Cust_Shipping_Temp_C_F);
 PARAMETER(LCL.One_Invoice_Per_PO);
 PARAMETER(LCL.EDI_Advanced_Ship_Notice);
 PARAMETER(LCL.Customer_G_L_Vendor_Num);
 PARAMETER(LCL.Air_Freight_Orders);
 PARAMETER(LCL.Regional_Mgr_Fax_Email);
 PARAMETER(LCL.Employee_Co_Packer_Sale);
 PARAMETER(LCL.Customer_TF_Exempt_Code);
 PARAMETER(LCL.Customer_Watch_Flag);
 PARAMETER(LCL.Customer_Sales_Region);
 PARAMETER(LCL.Customer_Market_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv All values        RT) TYPE(RTVOBJ) FILE(PMDDREP)           AC1927464;
 PARAMETER(LCL.Customer_Market_Code);
 PARAMETER(LCL.Market_Desc);
 PARAMETER(LCL.Market_Type);
 PARAMETER(LCL.Broker_Code);
 PARAMETER(LCL.Salesperson_Code);
 PARAMETER(NLL.Regional_Salesperson);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Item for Pricing   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1922234;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(LCL.Company_Number);
 PARAMETER(LCL.Item_Code);
 PARAMETER(LCL.Description_Line_One);
 PARAMETER(LCL.Customer_Market_Code);
 PARAMETER(LCL.Market_Desc);
 PARAMETER(LCL.Market_Type);
 PARAMETER(LCL.Broker_Code);
 PARAMETER(LCL.Salesperson_Code);
 PARAMETER(PAR.Sunday_USR);
 PARAMETER(PAR.Saturday_USR);
 {
  //?USER: Initialize routine

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  CASE;

  // IF DB1.Item Type Code is Not Finished Good
  IF DB1.Item_Type_Code <> 'FG';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  CASE;

  // IF DB1.Record Status is Inactive
  IF DB1.Record_Status = 'I';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  EXECUTE FUNCTION(Rtv get deviated price RT) TYPE(RTVOBJ) FILE(POC6REP)          AC1846391;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Customer_Price_UM_Prc);
  PARAMETER(LCL.Pricing_Date_Used);
  PARAMETER(LCL.Price_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.Price Start Date LE PAR.Pricing Date Used
   IF DB1.Price_Start_Date <= PAR.Pricing_Date_Used;

   // AND DB1.Price End Date GE PAR.Pricing Date Used
   AND DB1.Price_End_Date >= PAR.Pricing_Date_Used;

   // AND DB1.Record Status is Active
   AND DB1.Record_Status = 'A';

   EXECUTE FUNCTION(Rtv Max Wt and price  RT) TYPE(RTVOBJ) FILE(POC7REP)           AC1677837;
   PARAMETER(DB1.Ship_To_Customer);
   PARAMETER(DB1.Price_Code);
   PARAMETER(PAR.Item_Code);
   PARAMETER(LCL.Maximum_Contract_Units);
   PARAMETER(PAR.Customer_Price_UM_Prc);
   PARAMETER(LCL.Commodity_Market_Code);
   PARAMETER(LCL.Price_Method_Code);
   PARAMETER(LCL.Date_Method_Code);
   PARAMETER(LCL.Contract_Unit_Type);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

    QUIT;

   }

   ENDIF;

   // PAR.Price Code = DB1.Price Code
   PAR.Price_Code = DB1.Price_Code;

  }

  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  //?Retrieve customer name
  EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Customer_Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Set up market date to retrieve pricing
  // LCL.Market Pricing Date = PAR.Sunday                USR
  LCL.Market_Pricing_Date = PAR.Sunday_USR;

  //?Get Published price
  EXECUTE FUNCTION(RTV Pricing: MKTPRC   IF) TYPE(EXCINTFUN)                      AC1283243;
  PARAMETER(DB1.Company_Number);
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(LCL.Requested_Delivery_Date);
  PARAMETER(LCL.Published_Price_USR);
  PARAMETER(99);
  PARAMETER(DB1.Commodity_Price_Group);
  PARAMETER(LCL.OD_Market_Begin_Date);
  PARAMETER(LCL.OD_Market_Ending_Date);
  PARAMETER(LCL.Error_Return);
  {
   //?Execute internal function

   //?Conversion Documentation
   DO;

   //?Market Price will be converted to CWT because Overages will be
   //?by CWT if it is Customer Overage, and Market Price may not be.
   ENDDO;

   //?E3947 2/23/2015 RMC
   //? If commodity price group is TPA, use item code as the group instead
   // PAR.Commodity Price Group USR = PAR.Commodity Price Group
   PAR.Commodity_Price_Group_USR = PAR.Commodity_Price_Group;

   //?*** Price Routine was call on or after Shipping, Calculate Price
   CASE;

   // IF PAR.Event Called From is All Values
   IF PAR.Event_Called_From = '02'/'99'/**/'AO'/'AI';

   CASE;

   // IF PAR.Commodity Price Group is Third Party Avg
   IF PAR.Commodity_Price_Group = 'TPA';

   // LCL.Item Code Txt = CVTVAR(PAR.Item Code)
   LCL.Item_Code_Txt = CVTVAR(PAR.Item_Code);

   // PAR.Commodity Price Group USR = LCL.Item Code Txt
   PAR.Commodity_Price_Group_USR = LCL.Item_Code_Txt;

   ENDIF;

   //?*** Calculate Date Method Price if Selected
   CASE;

   // IF PAR.Date Method Code is Entered
   IF PAR.Date_Method_Code <> *BLANK;

   // Call program CLC Date Method        XF.
   CALL PROGRAM(CLC Date Method        XF) ('PDLJXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Date_Method_Code);
   PARAMETER(PAR.Actual_Shipped_Date);
   PARAMETER(PAR.Requested_Delivery_Date);
   PARAMETER(PAR.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Event_Called_From);
   PARAMETER(PAR.Commodity_Price_Group_USR);
   PARAMETER(PAR.OD_Market_Begin_Date);
   PARAMETER(PAR.OD_Market_Ending_Date);
   PARAMETER(PAR.Date_Used_for_Calculation);
   PARAMETER(PAR.Error_Return);
   PARAMETER(PAR.Item_Code);

   //?*** Calculate Date Method Price if Selected
   // IF PAR.OD Market Begin Date is Entered
   IF ( PAR.OD_Market_Begin_Date <> *ZERO;

   // AND PAR.OD Market Ending Date is Entered
   AND PAR.OD_Market_Ending_Date <> *ZERO );

   EXECUTE FUNCTION(Rtv Date Range Avg Cd RT) TYPE(RTVOBJ) FILE(PDIPREP)           AC1998797;
   PARAMETER('O');
   PARAMETER('R');
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Date_Method_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   // Call program CLC Date Method        XF.
   CALL PROGRAM(CLC Date Method        XF) ('PDLJXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(LCL.Date_Method_Code);
   PARAMETER(PAR.Actual_Shipped_Date);
   PARAMETER(PAR.Requested_Delivery_Date);
   PARAMETER(PAR.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Event_Called_From);
   PARAMETER(PAR.Commodity_Price_Group_USR);
   PARAMETER(PAR.OD_Market_Begin_Date);
   PARAMETER(PAR.OD_Market_Ending_Date);
   PARAMETER(PAR.Date_Used_for_Calculation);
   PARAMETER(PAR.Error_Return);
   PARAMETER(PAR.Item_Code);

   //?*** Calculate Date Method Price if Selected
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?*** Load Date used for calculation (to retrieve Market date)
   CASE;

   // IF PAR.Market Pricing Date is NE Zero
   IF PAR.Market_Pricing_Date <> *ZERO;

   // PAR.Date Used for Calculation = PAR.Market Pricing Date
   PAR.Date_Used_for_Calculation = PAR.Market_Pricing_Date;

   //?*** Load Date used for calculation (to retrieve Market date)
   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF PAR.Date Used for Calculation is not entered
   IF PAR.Date_Used_for_Calculation = *ZERO;

   CASE;

   // IF PAR.Actual Shipped Date is entered
   IF PAR.Actual_Shipped_Date <> *ZERO;

   // PAR.Date Used for Calculation = PAR.Actual Shipped Date
   PAR.Date_Used_for_Calculation = PAR.Actual_Shipped_Date;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Date Used for Calculation = PAR.Requested Ship Date
   PAR.Date_Used_for_Calculation = PAR.Requested_Ship_Date;

   ENDIF;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
   PARAMETER(PAR.Commodity_Market_Code);
   PARAMETER(PAR.Commodity_Price_Group_USR);
   PARAMETER(PAR.Date_Used_for_Calculation);
   PARAMETER(PAR.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Pricing_Date_Used);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.Commodity Market Price = DB1.Commodity Market Price
    PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

    // PAR.USR Date Priced = DB1.Market Price Date
    PAR.USR_Date_Priced = DB1.Market_Price_Date;

    QUIT;

   }

   //?Flag as Unpriced if Price Date doesn't match Market date entered
   CASE;

   // IF PAR.Pricing Date Used NE PAR.Date Used for Calculation
   IF PAR.Pricing_Date_Used <> PAR.Date_Used_for_Calculation;

   // OR PGM.*Return code is *Record does not exist
   OR PGM.*Return_code = 'Y2U0005';

   // PAR.Price Status = CND.Unpriced
   PAR.Price_Status = 'U';

   //?If no pricing record was found then flag as pricing error.
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // PAR.Error Return = CND.MKTPRC Error
   PAR.Error_Return = 'MKT';

   ENDIF;

   ENDIF;

   //?If record not found use default commodity market from company/item
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   // Call program RTV Dflt Comm Mrkt     XF.
   CALL PROGRAM(RTV Dflt Comm Mrkt     XF) ('PDMNXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Default_Commod_Mark_basis);

   CASE;

   // IF PAR.Commodity Market Code NE PAR.Default Commod Mark basis
   IF PAR.Commodity_Market_Code <> PAR.Default_Commod_Mark_basis;

   EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
   PARAMETER(PAR.Default_Commod_Mark_basis);
   PARAMETER(PAR.Commodity_Price_Group_USR);
   PARAMETER(PAR.Date_Used_for_Calculation);
   PARAMETER(PAR.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Pricing_Date_Used);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PAR.Commodity Market Price = DB1.Commodity Market Price
    PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

    // PAR.USR Date Priced = DB1.Market Price Date
    PAR.USR_Date_Priced = DB1.Market_Price_Date;

    QUIT;

   }

   ENDIF;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(Rtv Market Details    RT) TYPE(RTVOBJ) FILE(PNGBREP)           AC1989084;
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Commodity_Market_Code);
   PARAMETER(NLL.Commodity_Price_Group);
   PARAMETER(LCL.Market_Percent);
   PARAMETER(NLL.Market_Prem_Ded);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Pricing Retrieved Amount is Not Zeros
   IF PAR.Pricing_Retrieved_Amount <> *ZERO;

   // AND LCL.Market Percent is not equal to zeros
   AND LCL.Market_Percent <> *ZERO;

   // Pricing Retrieved Amount
   PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount * ( LCL.Market_Percent / 100
   'H' ) 'H';

   ENDIF;

   ENDIF;

   //?Convert Price to CWT
   CASE;

   // IF PAR.Pricing Retrieved Amount is Not Zeros
   IF PAR.Pricing_Retrieved_Amount <> *ZERO;

   // Call program CLC Convert Price - CW XF.
   CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Price_Adjustment_Amount);

   // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
   PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

   ENDIF;

  }

  //?The 'Pricing Date Used'is returned & is the date of the mkt prc
  // LCL.USR Value = LCL.Published Price       USR * CON.1 *Rounded
  LCL.USR_Value = LCL.Published_Price_USR * 1 'H';

  // LCL.Published Price       USR = LCL.USR Value
  LCL.Published_Price_USR = LCL.USR_Value;

  //?Get Absorbed Freight
  EXECUTE FUNCTION(RTV Abs Freight Rate   RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1391554;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Absorbed_Freight_7_2_USR);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Get Accruals
  //?This pgm will put the accruals in separate buckets
  EXECUTE FUNCTION(RTV Price: ACCRLS Ind IF) TYPE(EXCINTFUN)                      AC1926123;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Price_Method_Default);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Actual_Shipped_Date);
  PARAMETER(LCL.Accrual_Pricing_USR);
  PARAMETER(99);
  PARAMETER(LCL.Error_Return);
  PARAMETER(LCL.Order_Number);
  PARAMETER(LCL.WF_BG1_Accrual);
  PARAMETER(LCL.WF_BG1_Accrual_Code);
  PARAMETER(LCL.WF_BG2_Accrual);
  PARAMETER(LCL.WF_BG2_Accrual_Code);
  PARAMETER(LCL.WF_BG3_Accrual);
  PARAMETER(LCL.WF_BG3_Accrual_Code);
  PARAMETER(LCL.WF_CA1_Accrual);
  PARAMETER(LCL.WF_CA1_Accrual_Code);
  PARAMETER(LCL.WF_CR1_Accrual);
  PARAMETER(LCL.WF_CR1_Accrual_Code);
  PARAMETER(LCL.WF_IC1_Accrual);
  PARAMETER(LCL.WF_IC1_Accrual_Code);
  PARAMETER(LCL.WF_IC2_Accrual);
  PARAMETER(LCL.WF_IC2_Accrual_Code);
  PARAMETER(LCL.WF_IC3_Accrual);
  PARAMETER(LCL.WF_IC3_Accrual_Code);
  PARAMETER(LCL.WF_PR1_Accrual);
  PARAMETER(LCL.WF_PR1_Accrual_Code);
  PARAMETER(LCL.WF_SP1_Accrual);
  PARAMETER(LCL.WF_SP1_Accrual_Code);
  PARAMETER(LCL.WF_SW1_Accrual);
  PARAMETER(LCL.WF_SW1_Accrual_Code);
  PARAMETER(LCL.WF_WD1_Accrual);
  PARAMETER(LCL.WF_WD1_Accrual_Code);
  {
   //?Execute internal function

   //?** Routine to Accumulate Accrual Rates
   CASE;

   // IF PAR.Event Called From is All Values
   IF PAR.Event_Called_From = '02'/'99'/**/'AO'/'AI';

   // LCL.Accrual Rate = CON.*ZERO
   LCL.Accrual_Rate = *ZERO;

   //?** This will read all accrual codes that are setup for the
   //?** ShipTo customer and accumulate the Accrual Rates.
   //?** If Actual Shipped Date is zeros, use Requested Ship Date
   CASE;

   // IF PAR.Actual Shipped Date is entered
   IF PAR.Actual_Shipped_Date <> *ZERO;

   // WRK.USR Date Shipped = PAR.Actual Shipped Date
   WRK.USR_Date_Shipped = PAR.Actual_Shipped_Date;

   //?** If Actual Shipped Date is zeros, use Requested Ship Date
   // IF *OTHERWISE
   IF *OTHERWISE;

   // WRK.USR Date Shipped = PAR.Requested Ship Date
   WRK.USR_Date_Shipped = PAR.Requested_Ship_Date;

   ENDIF;

   EXECUTE FUNCTION(Rtv Accrl Info Indiv  RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1926155;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(WRK.Accrual_Code);
   PARAMETER(1);
   PARAMETER(WRK.USR_Date_Shipped);
   PARAMETER(WRK.Period_Ending_Date);
   PARAMETER(WRK.Accrual_Rate);
   PARAMETER(NLL.All_Products_Y_N);
   PARAMETER(NLL.Accrual_Rate_Type);
   PARAMETER(NLL.Comm_Threshold_Period);
   PARAMETER(NLL.CAH_Unused_Date_1);
   PARAMETER(NLL.CAH_Unused_Date_2);
   PARAMETER(NLL.Comm_Min_Amt_Period);
   PARAMETER(NLL.Comm_Retroactive_Sts);
   PARAMETER(NLL.Accrual_Detail_Search);
   PARAMETER(NLL.Broker_Code);
   PARAMETER(NLL.Max_Accrual_Amount);
   PARAMETER(PAR.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.WF_BG1_Accrual);
   PARAMETER(PAR.WF_BG1_Accrual_Code);
   PARAMETER(PAR.WF_BG2_Accrual);
   PARAMETER(PAR.WF_BG2_Accrual_Code);
   PARAMETER(PAR.WF_BG3_Accrual);
   PARAMETER(PAR.WF_BG3_Accrual_Code);
   PARAMETER(PAR.WF_CA1_Accrual);
   PARAMETER(PAR.WF_CA1_Accrual_Code);
   PARAMETER(PAR.WF_CR1_Accrual);
   PARAMETER(PAR.WF_CR1_Accrual_Code);
   PARAMETER(PAR.WF_IC1_Accrual);
   PARAMETER(PAR.WF_IC1_Accrual_Code);
   PARAMETER(PAR.WF_IC2_Accrual);
   PARAMETER(PAR.WF_IC2_Accrual_Code);
   PARAMETER(PAR.WF_IC3_Accrual);
   PARAMETER(PAR.WF_IC3_Accrual_Code);
   PARAMETER(PAR.WF_PR1_Accrual);
   PARAMETER(PAR.WF_PR1_Accrual_Code);
   PARAMETER(PAR.WF_SP1_Accrual);
   PARAMETER(PAR.WF_SP1_Accrual_Code);
   PARAMETER(PAR.WF_SW1_Accrual);
   PARAMETER(PAR.WF_SW1_Accrual_Code);
   PARAMETER(PAR.WF_WD1_Accrual);
   PARAMETER(PAR.WF_WD1_Accrual_Code);
   {
    //?USER: Initialize routine

    // PAR.Pricing Retrieved Amount = CON.*ZERO
    PAR.Pricing_Retrieved_Amount = *ZERO;

    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    //?** The par.period begin date is either the Actual Shipped date
    //?** from the Order Detail file unless it is zeros, then it is
    //?** replaced by the Requested Ship Date.
    //?** Select the record where the ASD is within the date range
    CASE;

    // IF PAR.Period Beginning Date GE DB1.Period Beginning Date
    IF PAR.Period_Beginning_Date >= DB1.Period_Beginning_Date;

    // AND PAR.Period Beginning Date LE DB1.Period Ending Date
    AND PAR.Period_Beginning_Date <= DB1.Period_Ending_Date;

    //?Retrieve the "Affect Invoice Price" field
    EXECUTE FUNCTION(RTV Accrual Info-All   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1825083;
    PARAMETER(DB1.Accrual_Code);
    PARAMETER(NLL.Accrual_Description);
    PARAMETER(NLL.Automatic_Accrual_Y_N);
    PARAMETER(NLL.Print_On_Invoice_Y_N);
    PARAMETER(NLL.Rate_Usage);
    PARAMETER(NLL.Add_on_Allowance);
    PARAMETER(NLL.Accrual_Type);
    PARAMETER(NLL.Sub_Ledger_Code);
    PARAMETER(NLL.Reverse_Accrual_Code);
    PARAMETER(NLL.UOM_Primary_Dft);
    PARAMETER(NLL.G_L_Code_Dr);
    PARAMETER(NLL.G_L_Code_Cr);
    PARAMETER(NLL.G_L_Sub_Account_Code);
    PARAMETER(NLL.Sales_History_Exp_Bucket);
    PARAMETER(NLL.Post_to_G_L_Y_N);
    PARAMETER(NLL.All_Products_Y_N);
    PARAMETER(NLL.Accrual_Rate);
    PARAMETER(NLL.Accrual_Rate_Type);
    PARAMETER(NLL.Accrual_Detail_Search);
    PARAMETER(NLL.Standard_Schedule_Y_N);
    PARAMETER(NLL.Affect_Sales_Realz_Rpt);
    PARAMETER(LCL.Affect_Invoice_Price);
    PARAMETER(NLL.Invoice_Print_Type);
    PARAMETER(NLL.Max_Accrual_Amount);
    PARAMETER(NLL.Max_Accrual_Amount_Type);
    PARAMETER(NLL.Record_Status);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.Affect Invoice Price is yes
    IF LCL.Affect_Invoice_Price = 'Y';

    //?** Accumulate rate based on All Products Y/N value
    CASE;

    // IF DB1.All Products (Y/N) is Yes
    IF DB1.All_Products_Y_N = 'Y';

    //?** If YES, then use the rate from the Customer Accrual record
    EXECUTE FUNCTION(Clc Accrual Rates     IF) TYPE(EXCINTFUN)                      AC1926796;
    PARAMETER(DB1.Accrual_Code);
    PARAMETER(DB1.Accrual_Rate);
    PARAMETER(PAR.WF_BG1_Accrual);
    PARAMETER(PAR.WF_BG1_Accrual_Code);
    PARAMETER(PAR.WF_BG2_Accrual);
    PARAMETER(PAR.WF_BG2_Accrual_Code);
    PARAMETER(PAR.WF_BG3_Accrual);
    PARAMETER(PAR.WF_BG3_Accrual_Code);
    PARAMETER(PAR.WF_CA1_Accrual);
    PARAMETER(PAR.WF_CA1_Accrual_Code);
    PARAMETER(PAR.WF_CR1_Accrual);
    PARAMETER(PAR.WF_CR1_Accrual_Code);
    PARAMETER(PAR.WF_IC1_Accrual);
    PARAMETER(PAR.WF_IC1_Accrual_Code);
    PARAMETER(PAR.WF_IC2_Accrual);
    PARAMETER(PAR.WF_IC2_Accrual_Code);
    PARAMETER(PAR.WF_IC3_Accrual);
    PARAMETER(PAR.WF_IC3_Accrual_Code);
    PARAMETER(PAR.WF_PR1_Accrual);
    PARAMETER(PAR.WF_PR1_Accrual_Code);
    PARAMETER(PAR.WF_SP1_Accrual);
    PARAMETER(PAR.WF_SP1_Accrual_Code);
    PARAMETER(PAR.WF_SW1_Accrual);
    PARAMETER(PAR.WF_SW1_Accrual_Code);
    PARAMETER(PAR.WF_WD1_Accrual);
    PARAMETER(PAR.WF_WD1_Accrual_Code);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Accrual Code is Bellissimo Buyer Group
     IF PAR.Accrual_Code = 'BG3';

     // PAR.WF BG3 Accrual = PAR.WF BG3 Accrual + PAR.Accrual Rate
     PAR.WF_BG3_Accrual = PAR.WF_BG3_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Customer Accrual
     IF PAR.Accrual_Code = 'CA1';

     // PAR.WF CA1 Accrual = PAR.WF CA1 Accrual + PAR.Accrual Rate
     PAR.WF_CA1_Accrual = PAR.WF_CA1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Customer Rebate
     IF PAR.Accrual_Code = 'CR1';

     // PAR.WF CR1 Accrual = PAR.WF CR1 Accrual + PAR.Accrual Rate
     PAR.WF_CR1_Accrual = PAR.WF_CR1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is GOLBON Buyer Group
     IF PAR.Accrual_Code = 'BG2';

     // PAR.WF BG2 Accrual = PAR.WF BG2 Accrual + PAR.Accrual Rate
     PAR.WF_BG2_Accrual = PAR.WF_BG2_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is MSO-SLC IC Disc Raw
     IF PAR.Accrual_Code = 'IC2';

     // PAR.WF IC2 Accrual = PAR.WF IC2 Accrual + PAR.Accrual Rate
     PAR.WF_IC2_Accrual = PAR.WF_IC2_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Nugget Branded Prod Rbt
     IF PAR.Accrual_Code = 'PR1';

     // PAR.WF PR1 Accrual = PAR.WF PR1 Accrual + PAR.Accrual Rate
     PAR.WF_PR1_Accrual = PAR.WF_PR1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is SLC-MSO IC Disc PC
     IF PAR.Accrual_Code = 'IC3';

     // PAR.WF IC3 Accrual = PAR.WF IC3 Accrual + PAR.Accrual Rate
     PAR.WF_IC3_Accrual = PAR.WF_IC3_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is SLC-MSO IC Disc Raw
     IF PAR.Accrual_Code = 'IC1';

     // PAR.WF IC1 Accrual = PAR.WF IC1 Accrual + PAR.Accrual Rate
     PAR.WF_IC1_Accrual = PAR.WF_IC1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Swell Allowance 1%
     IF PAR.Accrual_Code = 'SW1';

     // PAR.WF SW1 Accrual = PAR.WF SW1 Accrual + PAR.Accrual Rate
     PAR.WF_SW1_Accrual = PAR.WF_SW1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Winder Spec Prc Raw
     IF PAR.Accrual_Code = 'SP1';

     // PAR.WF SP1 Accrual = PAR.WF SP1 Accrual + PAR.Accrual Rate
     PAR.WF_SP1_Accrual = PAR.WF_SP1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Unipro Buyer Group
     IF PAR.Accrual_Code = 'BG1';

     // PAR.WF BG1 Accrual = PAR.WF BG1 Accrual + PAR.Accrual Rate
     PAR.WF_BG1_Accrual = PAR.WF_BG1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is WalMart Swell Allow
     IF PAR.Accrual_Code = 'WD1';

     // PAR.WF WD1 Accrual = PAR.WF WD1 Accrual + PAR.Accrual Rate
     PAR.WF_WD1_Accrual = PAR.WF_WD1_Accrual + PAR.Accrual_Rate;

     ENDIF;

    }

    //?** Accumulate rate based on All Products Y/N value
    // IF DB1.All Products (Y/N) is Yes + Exceptions
    IF DB1.All_Products_Y_N = 'X';

    //?** If YES + Exceptions, then add the rate from either the Customer
    //?** Accrual Str or Customer Accrual Item file. The value in
    //?** the Accrual Detail Search field will determine which file.
    //?** If no record in either file then add the Customer Accural rate
    CASE;

    // IF DB1.Accrual Detail Search is Item
    IF DB1.Accrual_Detail_Search = 'I';

    EXECUTE FUNCTION(Rtv Item Accrual Rate RT) TYPE(RTVOBJ) FILE(OMHPREP)           AC1613037;
    PARAMETER(PAR.Ship_To_Customer);
    PARAMETER(DB1.Accrual_Code);
    PARAMETER(DB1.CAH_Sequence_No);
    PARAMETER(PAR.Item_Code);
    PARAMETER(LCL.Accrual_Rate);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(Clc Accrual Rates     IF) TYPE(EXCINTFUN)                      AC1926796;
    PARAMETER(DB1.Accrual_Code);
    PARAMETER(LCL.Accrual_Rate);
    PARAMETER(PAR.WF_BG1_Accrual);
    PARAMETER(PAR.WF_BG1_Accrual_Code);
    PARAMETER(PAR.WF_BG2_Accrual);
    PARAMETER(PAR.WF_BG2_Accrual_Code);
    PARAMETER(PAR.WF_BG3_Accrual);
    PARAMETER(PAR.WF_BG3_Accrual_Code);
    PARAMETER(PAR.WF_CA1_Accrual);
    PARAMETER(PAR.WF_CA1_Accrual_Code);
    PARAMETER(PAR.WF_CR1_Accrual);
    PARAMETER(PAR.WF_CR1_Accrual_Code);
    PARAMETER(PAR.WF_IC1_Accrual);
    PARAMETER(PAR.WF_IC1_Accrual_Code);
    PARAMETER(PAR.WF_IC2_Accrual);
    PARAMETER(PAR.WF_IC2_Accrual_Code);
    PARAMETER(PAR.WF_IC3_Accrual);
    PARAMETER(PAR.WF_IC3_Accrual_Code);
    PARAMETER(PAR.WF_PR1_Accrual);
    PARAMETER(PAR.WF_PR1_Accrual_Code);
    PARAMETER(PAR.WF_SP1_Accrual);
    PARAMETER(PAR.WF_SP1_Accrual_Code);
    PARAMETER(PAR.WF_SW1_Accrual);
    PARAMETER(PAR.WF_SW1_Accrual_Code);
    PARAMETER(PAR.WF_WD1_Accrual);
    PARAMETER(PAR.WF_WD1_Accrual_Code);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Accrual Code is Bellissimo Buyer Group
     IF PAR.Accrual_Code = 'BG3';

     // PAR.WF BG3 Accrual = PAR.WF BG3 Accrual + PAR.Accrual Rate
     PAR.WF_BG3_Accrual = PAR.WF_BG3_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Customer Accrual
     IF PAR.Accrual_Code = 'CA1';

     // PAR.WF CA1 Accrual = PAR.WF CA1 Accrual + PAR.Accrual Rate
     PAR.WF_CA1_Accrual = PAR.WF_CA1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Customer Rebate
     IF PAR.Accrual_Code = 'CR1';

     // PAR.WF CR1 Accrual = PAR.WF CR1 Accrual + PAR.Accrual Rate
     PAR.WF_CR1_Accrual = PAR.WF_CR1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is GOLBON Buyer Group
     IF PAR.Accrual_Code = 'BG2';

     // PAR.WF BG2 Accrual = PAR.WF BG2 Accrual + PAR.Accrual Rate
     PAR.WF_BG2_Accrual = PAR.WF_BG2_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is MSO-SLC IC Disc Raw
     IF PAR.Accrual_Code = 'IC2';

     // PAR.WF IC2 Accrual = PAR.WF IC2 Accrual + PAR.Accrual Rate
     PAR.WF_IC2_Accrual = PAR.WF_IC2_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Nugget Branded Prod Rbt
     IF PAR.Accrual_Code = 'PR1';

     // PAR.WF PR1 Accrual = PAR.WF PR1 Accrual + PAR.Accrual Rate
     PAR.WF_PR1_Accrual = PAR.WF_PR1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is SLC-MSO IC Disc PC
     IF PAR.Accrual_Code = 'IC3';

     // PAR.WF IC3 Accrual = PAR.WF IC3 Accrual + PAR.Accrual Rate
     PAR.WF_IC3_Accrual = PAR.WF_IC3_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is SLC-MSO IC Disc Raw
     IF PAR.Accrual_Code = 'IC1';

     // PAR.WF IC1 Accrual = PAR.WF IC1 Accrual + PAR.Accrual Rate
     PAR.WF_IC1_Accrual = PAR.WF_IC1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Swell Allowance 1%
     IF PAR.Accrual_Code = 'SW1';

     // PAR.WF SW1 Accrual = PAR.WF SW1 Accrual + PAR.Accrual Rate
     PAR.WF_SW1_Accrual = PAR.WF_SW1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Winder Spec Prc Raw
     IF PAR.Accrual_Code = 'SP1';

     // PAR.WF SP1 Accrual = PAR.WF SP1 Accrual + PAR.Accrual Rate
     PAR.WF_SP1_Accrual = PAR.WF_SP1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Unipro Buyer Group
     IF PAR.Accrual_Code = 'BG1';

     // PAR.WF BG1 Accrual = PAR.WF BG1 Accrual + PAR.Accrual Rate
     PAR.WF_BG1_Accrual = PAR.WF_BG1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is WalMart Swell Allow
     IF PAR.Accrual_Code = 'WD1';

     // PAR.WF WD1 Accrual = PAR.WF WD1 Accrual + PAR.Accrual Rate
     PAR.WF_WD1_Accrual = PAR.WF_WD1_Accrual + PAR.Accrual_Rate;

     ENDIF;

    }

    // IF DB1.Accrual Detail Search is Item Structure
    IF DB1.Accrual_Detail_Search = 'S';

    //?** Retrieve the Item Structure fields from the Order Detail
    EXECUTE FUNCTION(Rtv Item FOB Price    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1559616;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(NLL.Price_Overage_Override);
    PARAMETER(NLL.Contract_Number);
    PARAMETER(NLL.Price_Status);
    PARAMETER(NLL.U_M_Ordered);
    PARAMETER(NLL.Unit_Price);
    PARAMETER(NLL.Unit_Price_Credit);
    PARAMETER(NLL.Unit_Price_Ordered_U_M);
    PARAMETER(NLL.Unit_Weight_Ordered_U_M);
    PARAMETER(NLL.Actual_Shipped_Date);
    PARAMETER(NLL.Affect_Inventory_Status);
    PARAMETER(NLL.Affect_Sales_Doll_Status);
    PARAMETER(NLL.Affect_Sales_Pnds_Status);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(NLL.Affect_Trade_Fund);
    PARAMETER(NLL.Affect_Commission);
    PARAMETER(NLL.Affect_Pricing);
    PARAMETER(NLL.Ord_TF_Exempt_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(RTV Cust Accrl Str     RT) TYPE(RTVOBJ) FILE(POC8REP)          AC1825431;
    PARAMETER(PAR.Ship_To_Customer);
    PARAMETER(DB1.Accrual_Code);
    PARAMETER(DB1.CAH_Sequence_No);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(LCL.Accrual_Rate);
    PARAMETER(NLL.Accrual_Rate_Type);
    PARAMETER(NLL.CAS_Unused_Sts_1);
    PARAMETER(NLL.CAS_Unused_Sts_2);
    PARAMETER(NLL.CAS_Rate_Unused_1);
    PARAMETER(NLL.CAS_Rate_Unused_2);
    PARAMETER(PAR.Item_Structure_Class_Code);
    {
     //?USER: Initialize routine

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     CASE;

     // IF DB1.Item Structure Class Code is Equal Zero
     IF DB1.Item_Structure_Class_Code = *ZERO;

     MOVE *ALL (To: PAR From: DB1);

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF DB1.Item Structure Class Code EQ PAR.Item Structure Class USR
     IF DB1.Item_Structure_Class_Code = PAR.Item_Structure_Class_USR;

     MOVE *ALL (To: PAR From: DB1);

     ENDIF;

     ENDIF;

    }

    ENDIF;

    //?** If accrual rate is still zeros, use rate from cust accrual rec
    CASE;

    // IF LCL.Accrual Rate is equal to zero
    IF LCL.Accrual_Rate = *ZERO;

    // LCL.Accrual Rate = DB1.Accrual Rate
    LCL.Accrual_Rate = DB1.Accrual_Rate;

    ENDIF;

    //?Accumulate the Accruals
    EXECUTE FUNCTION(Clc Accrual Rates     IF) TYPE(EXCINTFUN)                      AC1926796;
    PARAMETER(DB1.Accrual_Code);
    PARAMETER(LCL.Accrual_Rate);
    PARAMETER(PAR.WF_BG1_Accrual);
    PARAMETER(PAR.WF_BG1_Accrual_Code);
    PARAMETER(PAR.WF_BG2_Accrual);
    PARAMETER(PAR.WF_BG2_Accrual_Code);
    PARAMETER(PAR.WF_BG3_Accrual);
    PARAMETER(PAR.WF_BG3_Accrual_Code);
    PARAMETER(PAR.WF_CA1_Accrual);
    PARAMETER(PAR.WF_CA1_Accrual_Code);
    PARAMETER(PAR.WF_CR1_Accrual);
    PARAMETER(PAR.WF_CR1_Accrual_Code);
    PARAMETER(PAR.WF_IC1_Accrual);
    PARAMETER(PAR.WF_IC1_Accrual_Code);
    PARAMETER(PAR.WF_IC2_Accrual);
    PARAMETER(PAR.WF_IC2_Accrual_Code);
    PARAMETER(PAR.WF_IC3_Accrual);
    PARAMETER(PAR.WF_IC3_Accrual_Code);
    PARAMETER(PAR.WF_PR1_Accrual);
    PARAMETER(PAR.WF_PR1_Accrual_Code);
    PARAMETER(PAR.WF_SP1_Accrual);
    PARAMETER(PAR.WF_SP1_Accrual_Code);
    PARAMETER(PAR.WF_SW1_Accrual);
    PARAMETER(PAR.WF_SW1_Accrual_Code);
    PARAMETER(PAR.WF_WD1_Accrual);
    PARAMETER(PAR.WF_WD1_Accrual_Code);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Accrual Code is Bellissimo Buyer Group
     IF PAR.Accrual_Code = 'BG3';

     // PAR.WF BG3 Accrual = PAR.WF BG3 Accrual + PAR.Accrual Rate
     PAR.WF_BG3_Accrual = PAR.WF_BG3_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Customer Accrual
     IF PAR.Accrual_Code = 'CA1';

     // PAR.WF CA1 Accrual = PAR.WF CA1 Accrual + PAR.Accrual Rate
     PAR.WF_CA1_Accrual = PAR.WF_CA1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Customer Rebate
     IF PAR.Accrual_Code = 'CR1';

     // PAR.WF CR1 Accrual = PAR.WF CR1 Accrual + PAR.Accrual Rate
     PAR.WF_CR1_Accrual = PAR.WF_CR1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is GOLBON Buyer Group
     IF PAR.Accrual_Code = 'BG2';

     // PAR.WF BG2 Accrual = PAR.WF BG2 Accrual + PAR.Accrual Rate
     PAR.WF_BG2_Accrual = PAR.WF_BG2_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is MSO-SLC IC Disc Raw
     IF PAR.Accrual_Code = 'IC2';

     // PAR.WF IC2 Accrual = PAR.WF IC2 Accrual + PAR.Accrual Rate
     PAR.WF_IC2_Accrual = PAR.WF_IC2_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Nugget Branded Prod Rbt
     IF PAR.Accrual_Code = 'PR1';

     // PAR.WF PR1 Accrual = PAR.WF PR1 Accrual + PAR.Accrual Rate
     PAR.WF_PR1_Accrual = PAR.WF_PR1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is SLC-MSO IC Disc PC
     IF PAR.Accrual_Code = 'IC3';

     // PAR.WF IC3 Accrual = PAR.WF IC3 Accrual + PAR.Accrual Rate
     PAR.WF_IC3_Accrual = PAR.WF_IC3_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is SLC-MSO IC Disc Raw
     IF PAR.Accrual_Code = 'IC1';

     // PAR.WF IC1 Accrual = PAR.WF IC1 Accrual + PAR.Accrual Rate
     PAR.WF_IC1_Accrual = PAR.WF_IC1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Swell Allowance 1%
     IF PAR.Accrual_Code = 'SW1';

     // PAR.WF SW1 Accrual = PAR.WF SW1 Accrual + PAR.Accrual Rate
     PAR.WF_SW1_Accrual = PAR.WF_SW1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Winder Spec Prc Raw
     IF PAR.Accrual_Code = 'SP1';

     // PAR.WF SP1 Accrual = PAR.WF SP1 Accrual + PAR.Accrual Rate
     PAR.WF_SP1_Accrual = PAR.WF_SP1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Unipro Buyer Group
     IF PAR.Accrual_Code = 'BG1';

     // PAR.WF BG1 Accrual = PAR.WF BG1 Accrual + PAR.Accrual Rate
     PAR.WF_BG1_Accrual = PAR.WF_BG1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is WalMart Swell Allow
     IF PAR.Accrual_Code = 'WD1';

     // PAR.WF WD1 Accrual = PAR.WF WD1 Accrual + PAR.Accrual Rate
     PAR.WF_WD1_Accrual = PAR.WF_WD1_Accrual + PAR.Accrual_Rate;

     ENDIF;

    }

    //?** Accumulate rate based on All Products Y/N value
    // IF DB1.All Products (Y/N) is No
    IF DB1.All_Products_Y_N = 'N';

    //?** If NO, then only accumulate the rate if there is a record
    //?** in either the Customer Accrual Str or Customer Accrual Item
    //?** file. If no record in either file, just add zeros.
    CASE;

    // IF DB1.Accrual Detail Search is Item
    IF DB1.Accrual_Detail_Search = 'I';

    EXECUTE FUNCTION(Rtv Item Accrual Rate RT) TYPE(RTVOBJ) FILE(OMHPREP)           AC1613037;
    PARAMETER(PAR.Ship_To_Customer);
    PARAMETER(DB1.Accrual_Code);
    PARAMETER(DB1.CAH_Sequence_No);
    PARAMETER(PAR.Item_Code);
    PARAMETER(LCL.Accrual_Rate);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // IF DB1.Accrual Detail Search is Item Structure
    IF DB1.Accrual_Detail_Search = 'S';

    EXECUTE FUNCTION(Rtv Item FOB Price    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1559616;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(NLL.Price_Overage_Override);
    PARAMETER(NLL.Contract_Number);
    PARAMETER(NLL.Price_Status);
    PARAMETER(NLL.U_M_Ordered);
    PARAMETER(NLL.Unit_Price);
    PARAMETER(NLL.Unit_Price_Credit);
    PARAMETER(NLL.Unit_Price_Ordered_U_M);
    PARAMETER(NLL.Unit_Weight_Ordered_U_M);
    PARAMETER(NLL.Actual_Shipped_Date);
    PARAMETER(NLL.Affect_Inventory_Status);
    PARAMETER(NLL.Affect_Sales_Doll_Status);
    PARAMETER(NLL.Affect_Sales_Pnds_Status);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(NLL.Affect_Trade_Fund);
    PARAMETER(NLL.Affect_Commission);
    PARAMETER(NLL.Affect_Pricing);
    PARAMETER(NLL.Ord_TF_Exempt_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Item Structure Type Code is Not Entered
    IF PAR.Item_Structure_Type_Code = *ZERO;

    // OR PAR.Item Structure Group Code is Not Entered
    OR PAR.Item_Structure_Group_Code = *ZERO;

    EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

    EXECUTE FUNCTION(RTV Cust Accrl Str     RT) TYPE(RTVOBJ) FILE(POC8REP)          AC1825431;
    PARAMETER(PAR.Ship_To_Customer);
    PARAMETER(DB1.Accrual_Code);
    PARAMETER(DB1.CAH_Sequence_No);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(LCL.Accrual_Rate);
    PARAMETER(NLL.Accrual_Rate_Type);
    PARAMETER(NLL.CAS_Unused_Sts_1);
    PARAMETER(NLL.CAS_Unused_Sts_2);
    PARAMETER(NLL.CAS_Rate_Unused_1);
    PARAMETER(NLL.CAS_Rate_Unused_2);
    PARAMETER(PAR.Item_Structure_Class_Code);
    {
     //?USER: Initialize routine

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     CASE;

     // IF DB1.Item Structure Class Code is Equal Zero
     IF DB1.Item_Structure_Class_Code = *ZERO;

     MOVE *ALL (To: PAR From: DB1);

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF DB1.Item Structure Class Code EQ PAR.Item Structure Class USR
     IF DB1.Item_Structure_Class_Code = PAR.Item_Structure_Class_USR;

     MOVE *ALL (To: PAR From: DB1);

     ENDIF;

     ENDIF;

    }

    ENDIF;

    //?Accumulate the Accruals
    EXECUTE FUNCTION(Clc Accrual Rates     IF) TYPE(EXCINTFUN)                      AC1926796;
    PARAMETER(DB1.Accrual_Code);
    PARAMETER(LCL.Accrual_Rate);
    PARAMETER(PAR.WF_BG1_Accrual);
    PARAMETER(PAR.WF_BG1_Accrual_Code);
    PARAMETER(PAR.WF_BG2_Accrual);
    PARAMETER(PAR.WF_BG2_Accrual_Code);
    PARAMETER(PAR.WF_BG3_Accrual);
    PARAMETER(PAR.WF_BG3_Accrual_Code);
    PARAMETER(PAR.WF_CA1_Accrual);
    PARAMETER(PAR.WF_CA1_Accrual_Code);
    PARAMETER(PAR.WF_CR1_Accrual);
    PARAMETER(PAR.WF_CR1_Accrual_Code);
    PARAMETER(PAR.WF_IC1_Accrual);
    PARAMETER(PAR.WF_IC1_Accrual_Code);
    PARAMETER(PAR.WF_IC2_Accrual);
    PARAMETER(PAR.WF_IC2_Accrual_Code);
    PARAMETER(PAR.WF_IC3_Accrual);
    PARAMETER(PAR.WF_IC3_Accrual_Code);
    PARAMETER(PAR.WF_PR1_Accrual);
    PARAMETER(PAR.WF_PR1_Accrual_Code);
    PARAMETER(PAR.WF_SP1_Accrual);
    PARAMETER(PAR.WF_SP1_Accrual_Code);
    PARAMETER(PAR.WF_SW1_Accrual);
    PARAMETER(PAR.WF_SW1_Accrual_Code);
    PARAMETER(PAR.WF_WD1_Accrual);
    PARAMETER(PAR.WF_WD1_Accrual_Code);
    {
     //?Execute internal function

     CASE;

     // IF PAR.Accrual Code is Bellissimo Buyer Group
     IF PAR.Accrual_Code = 'BG3';

     // PAR.WF BG3 Accrual = PAR.WF BG3 Accrual + PAR.Accrual Rate
     PAR.WF_BG3_Accrual = PAR.WF_BG3_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Customer Accrual
     IF PAR.Accrual_Code = 'CA1';

     // PAR.WF CA1 Accrual = PAR.WF CA1 Accrual + PAR.Accrual Rate
     PAR.WF_CA1_Accrual = PAR.WF_CA1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Customer Rebate
     IF PAR.Accrual_Code = 'CR1';

     // PAR.WF CR1 Accrual = PAR.WF CR1 Accrual + PAR.Accrual Rate
     PAR.WF_CR1_Accrual = PAR.WF_CR1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is GOLBON Buyer Group
     IF PAR.Accrual_Code = 'BG2';

     // PAR.WF BG2 Accrual = PAR.WF BG2 Accrual + PAR.Accrual Rate
     PAR.WF_BG2_Accrual = PAR.WF_BG2_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is MSO-SLC IC Disc Raw
     IF PAR.Accrual_Code = 'IC2';

     // PAR.WF IC2 Accrual = PAR.WF IC2 Accrual + PAR.Accrual Rate
     PAR.WF_IC2_Accrual = PAR.WF_IC2_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Nugget Branded Prod Rbt
     IF PAR.Accrual_Code = 'PR1';

     // PAR.WF PR1 Accrual = PAR.WF PR1 Accrual + PAR.Accrual Rate
     PAR.WF_PR1_Accrual = PAR.WF_PR1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is SLC-MSO IC Disc PC
     IF PAR.Accrual_Code = 'IC3';

     // PAR.WF IC3 Accrual = PAR.WF IC3 Accrual + PAR.Accrual Rate
     PAR.WF_IC3_Accrual = PAR.WF_IC3_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is SLC-MSO IC Disc Raw
     IF PAR.Accrual_Code = 'IC1';

     // PAR.WF IC1 Accrual = PAR.WF IC1 Accrual + PAR.Accrual Rate
     PAR.WF_IC1_Accrual = PAR.WF_IC1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Swell Allowance 1%
     IF PAR.Accrual_Code = 'SW1';

     // PAR.WF SW1 Accrual = PAR.WF SW1 Accrual + PAR.Accrual Rate
     PAR.WF_SW1_Accrual = PAR.WF_SW1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Winder Spec Prc Raw
     IF PAR.Accrual_Code = 'SP1';

     // PAR.WF SP1 Accrual = PAR.WF SP1 Accrual + PAR.Accrual Rate
     PAR.WF_SP1_Accrual = PAR.WF_SP1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is Unipro Buyer Group
     IF PAR.Accrual_Code = 'BG1';

     // PAR.WF BG1 Accrual = PAR.WF BG1 Accrual + PAR.Accrual Rate
     PAR.WF_BG1_Accrual = PAR.WF_BG1_Accrual + PAR.Accrual_Rate;

     ENDIF;

     CASE;

     // IF PAR.Accrual Code is WalMart Swell Allow
     IF PAR.Accrual_Code = 'WD1';

     // PAR.WF WD1 Accrual = PAR.WF WD1 Accrual + PAR.Accrual Rate
     PAR.WF_WD1_Accrual = PAR.WF_WD1_Accrual + PAR.Accrual_Rate;

     ENDIF;

    }

    ENDIF;

    ENDIF;

    ENDIF;

    //?USER: Exit processing

    EXECUTE FUNCTION(RTV Item Pricing Info  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1412083;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Item_Code);
    PARAMETER(NLL.UOM_Primary);
    PARAMETER(NLL.Conversion_Factor_1);
    PARAMETER(NLL.Operation_Factor_1);
    PARAMETER(NLL.UOM_Second);
    PARAMETER(NLL.Conversion_Factor_2);
    PARAMETER(NLL.Operation_Factor_2);
    PARAMETER(NLL.UOM_Third);
    PARAMETER(LCL.UOM_Pricing);
    PARAMETER(NLL.Unit_Weight);
    PARAMETER(NLL.Production_Date_Control);
    PARAMETER(NLL.Catch_Weight_Status);
    PARAMETER(NLL.Default_Commod_Mark_basis);
    PARAMETER(NLL.Commodity_Price_Group);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.U/M - Pricing is Carcass Hundred Weight
    IF LCL.UOM_Pricing = 'CW';

    // OR LCL.U/M - Pricing is Thousand
    OR LCL.UOM_Pricing = 'M';

    // OR LCL.U/M - Pricing is Tons
    OR LCL.UOM_Pricing = 'TN';

    //?Hundred Weight
    CASE;

    // IF LCL.U/M - Pricing is Hundred Weight
    IF LCL.UOM_Pricing = 'CW';

    // LCL.Usr Number field = CON.100
    LCL.Usr_Number_field = 100;

    ENDIF;

    //?Thousand
    CASE;

    // IF LCL.U/M - Pricing is Thousand
    IF LCL.UOM_Pricing = 'M';

    // LCL.Usr Number field = CON.1000
    LCL.Usr_Number_field = 1000;

    ENDIF;

    //?Tons
    CASE;

    // IF LCL.U/M - Pricing is Tons
    IF LCL.UOM_Pricing = 'TN';

    // LCL.Usr Number field = CON.2000
    LCL.Usr_Number_field = 2000;

    ENDIF;

    EXECUTE FUNCTION(Cnv Accrual Rte CW    IF) TYPE(EXCINTFUN)                      AC1927530;
    PARAMETER(DB1.Accrual_Code);
    PARAMETER(PAR.WF_BG1_Accrual);
    PARAMETER(PAR.WF_BG1_Accrual_Code);
    PARAMETER(PAR.WF_BG2_Accrual);
    PARAMETER(PAR.WF_BG2_Accrual_Code);
    PARAMETER(PAR.WF_BG3_Accrual);
    PARAMETER(PAR.WF_BG3_Accrual_Code);
    PARAMETER(PAR.WF_CA1_Accrual);
    PARAMETER(PAR.WF_CA1_Accrual_Code);
    PARAMETER(PAR.WF_CR1_Accrual);
    PARAMETER(PAR.WF_CR1_Accrual_Code);
    PARAMETER(PAR.WF_IC1_Accrual);
    PARAMETER(PAR.WF_IC1_Accrual_Code);
    PARAMETER(PAR.WF_IC2_Accrual);
    PARAMETER(PAR.WF_IC2_Accrual_Code);
    PARAMETER(PAR.WF_IC3_Accrual);
    PARAMETER(PAR.WF_IC3_Accrual_Code);
    PARAMETER(PAR.WF_PR1_Accrual);
    PARAMETER(PAR.WF_PR1_Accrual_Code);
    PARAMETER(PAR.WF_SP1_Accrual);
    PARAMETER(PAR.WF_SP1_Accrual_Code);
    PARAMETER(PAR.WF_SW1_Accrual);
    PARAMETER(PAR.WF_SW1_Accrual_Code);
    PARAMETER(PAR.WF_WD1_Accrual);
    PARAMETER(PAR.WF_WD1_Accrual_Code);
    PARAMETER(LCL.Usr_Number_field);
    {
     //?Execute internal function

     CASE;

     // IF PAR.WF BG1 Accrual is Greater than zero
     IF PAR.WF_BG1_Accrual > 0;

     // PAR.WF BG1 Accrual =       *
     PAR.WF_BG1_Accrual = PAR.WF_BG1_Accrual * PAR.Usr_Number_field;

     ENDIF;

     CASE;

     // IF PAR.WF BG2 Accrual is Greater than 0
     IF PAR.WF_BG2_Accrual > *ZERO;

     // PAR.WF BG2 Accrual =       *
     PAR.WF_BG2_Accrual = PAR.WF_BG2_Accrual * PAR.Usr_Number_field;

     ENDIF;

     CASE;

     // IF PAR.WF BG3 Accrual is Greater than zero
     IF PAR.WF_BG3_Accrual > 0;

     // PAR.WF BG3 Accrual =       *
     PAR.WF_BG3_Accrual = PAR.WF_BG3_Accrual * PAR.Usr_Number_field;

     ENDIF;

     CASE;

     // IF PAR.WF CA1 Accrual is Greater than Zero
     IF PAR.WF_CA1_Accrual > 0;

     // PAR.WF CA1 Accrual =       *
     PAR.WF_CA1_Accrual = PAR.WF_CA1_Accrual * PAR.Usr_Number_field;

     ENDIF;

     CASE;

     // IF PAR.WF CR1 Accrual is Greater than Zero
     IF PAR.WF_CR1_Accrual > *ZERO;

     // PAR.WF CR1 Accrual =       *
     PAR.WF_CR1_Accrual = PAR.WF_CR1_Accrual * PAR.Usr_Number_field;

     ENDIF;

     CASE;

     // IF PAR.WF IC2 Accrual is Greater than Zero
     IF PAR.WF_IC2_Accrual > *ZERO;

     // PAR.WF IC2 Accrual =       *
     PAR.WF_IC2_Accrual = PAR.WF_IC2_Accrual * PAR.Usr_Number_field;

     ENDIF;

     CASE;

     // IF PAR.WF PR1 Accrual is Greater than Zero
     IF PAR.WF_PR1_Accrual > *ZERO;

     // PAR.WF PR1 Accrual =       *
     PAR.WF_PR1_Accrual = PAR.WF_PR1_Accrual * PAR.Usr_Number_field;

     ENDIF;

     CASE;

     // IF PAR.WF IC3 Accrual is Greater than Zero
     IF PAR.WF_IC3_Accrual > *ZERO;

     // PAR.WF IC3 Accrual =       *
     PAR.WF_IC3_Accrual = PAR.WF_IC3_Accrual * PAR.Usr_Number_field;

     ENDIF;

     CASE;

     // IF PAR.WF IC1 Accrual is Greater than Zero
     IF PAR.WF_IC1_Accrual > *ZERO;

     // PAR.WF IC1 Accrual =       *
     PAR.WF_IC1_Accrual = PAR.WF_IC1_Accrual * PAR.Usr_Number_field;

     ENDIF;

     CASE;

     // IF PAR.WF SW1 Accrual is Greater than Zero
     IF PAR.WF_SW1_Accrual > *ZERO;

     // PAR.WF SW1 Accrual =       *
     PAR.WF_SW1_Accrual = PAR.WF_SW1_Accrual * PAR.Usr_Number_field;

     ENDIF;

     CASE;

     // IF PAR.WF SP1 Accrual is Greater than Zero
     IF PAR.WF_SP1_Accrual > *ZERO;

     // PAR.WF SP1 Accrual =       *
     PAR.WF_SP1_Accrual = PAR.WF_SP1_Accrual * PAR.Usr_Number_field;

     ENDIF;

     CASE;

     // IF PAR.WF WD1 Accrual is Greater than Zero
     IF PAR.WF_WD1_Accrual > 0;

     // PAR.WF WD1 Accrual =       *
     PAR.WF_WD1_Accrual = PAR.WF_WD1_Accrual * PAR.Usr_Number_field;

     ENDIF;

    }

    ENDIF;

   }

   ENDIF;

   //?** Convert Price to CWT
   CASE;

   // IF PAR.Pricing Retrieved Amount is Not Zeros
   IF PAR.Pricing_Retrieved_Amount <> *ZERO;

   // Call program CLC Convert Price - CW XF.
   CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Pricing_Retrieved_Amount);
   PARAMETER(PAR.Price_Adjustment_Amount);

   ENDIF;

   //?Conversion Documentation
   DO;

   //?*****
   //?** Accumulate rate for all Accrual Codes for this Ship To
   //?** Customer based on the value in the All Products Y/N field
   //?**
   //?** If Actual Shipped Date is zeros, use the Requested Ship Date.
   //?**
   //?** If YES, then use the rate from the Customer Accrual record.
   //?**
   //?** If YES + EXCEPTIONS, then use the rate from either the Customer
   //?** Accrual Structure or Customer Accrual Item file which is based
   //?** on the value in Accrual Detail Search field. If no record in
   //?** either file, then use the rate in the Customer Accrual record.
   //?**
   //?** If NO, then only accumulate the rate if there is a record
   //?** in either the Customer Accrual Str or Customer Accrual Item
   //?** file. If no record in either file, just add zeros.
   //?**
   //?** Price will be converted to CWT
   //?*****
   ENDDO;

  }

  CASE;

  // IF LCL.Customer Price /UM Prc is Equal zero
  IF LCL.Customer_Price_UM_Prc = *ZERO;

  // LCL.Price Code = CON.*ZERO
  LCL.Price_Code = 0;

  ENDIF;

  CASE;

  // IF DB1.U/M - Pricing is Cases
  IF DB1.UOM_Pricing = 'CS';

  // Published price
  LCL.Published_Price_USR = ( LCL.Published_Price_USR / 100 'H' ) * DB1.Unit_Weight 'H';

  // Absorbed Freight
  LCL.Absorbed_Freight_7_2_USR = ( LCL.Absorbed_Freight_7_2_USR / 100 'H' )
  * DB1.Unit_Weight 'H';

  ENDIF;

  ENDIF;

  CASE;

  // IF LCL.Published Price       USR is Equal to one cent
  IF LCL.Published_Price_USR = .0100;

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  //?Get Salesperson name
  EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Mkt_Salesperson_Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.Mkt Salesperson Code = PAR.Salesperson Code
  LCL.Mkt_Salesperson_Code = PAR.Salesperson_Code;

  //?Retreive Broker name
  EXECUTE FUNCTION(Rtv Broker Name       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1676428;
  PARAMETER(PAR.Broker_Code);
  PARAMETER(LCL.Mkt_Broker_Name);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // LCL.Mkt Broker Code = PAR.Broker Code
  LCL.Mkt_Broker_Code = PAR.Broker_Code;

  //?Write record
  EXECUTE FUNCTION(Crt WF Sales/Broker   CR) TYPE(CRTOBJ) FILE(PME7CPP)           AC1922048;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Sunday_USR);
  PARAMETER(LCL.Customer_Name);
  PARAMETER(DB1.Description_Line_One);
  PARAMETER(LCL.Mkt_Salesperson_Code);
  PARAMETER(LCL.Mkt_Salesperson_Name);
  PARAMETER(LCL.Mkt_Broker_Code);
  PARAMETER(LCL.Mkt_Broker_Name);
  PARAMETER(LCL.Absorbed_Freight_7_2_USR);
  PARAMETER(LCL.Published_Price_USR);
  PARAMETER(LCL.Customer_Price_UM_Prc);
  PARAMETER(LCL.Price_Code);
  PARAMETER(DB1.UOM_Pricing);
  PARAMETER(DB1.Commodity_Price_Group);
  PARAMETER(DB1.Price_Method_Default);
  PARAMETER(PAR.Saturday_USR);
  PARAMETER(PAR.Market_Code);
  PARAMETER(LCL.Pricing_Date_Used);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER('BG1');
  PARAMETER(LCL.WF_BG1_Accrual);
  PARAMETER('BG2');
  PARAMETER(LCL.WF_BG2_Accrual);
  PARAMETER('BG3');
  PARAMETER(LCL.WF_BG3_Accrual);
  PARAMETER('CA1');
  PARAMETER(LCL.WF_CA1_Accrual);
  PARAMETER('CR1');
  PARAMETER(LCL.WF_CR1_Accrual);
  PARAMETER('IC1');
  PARAMETER(LCL.WF_IC1_Accrual);
  PARAMETER('IC2');
  PARAMETER(LCL.WF_IC2_Accrual);
  PARAMETER('IC3');
  PARAMETER(LCL.WF_IC3_Accrual);
  PARAMETER('PR1');
  PARAMETER(LCL.WF_PR1_Accrual);
  PARAMETER('SP1');
  PARAMETER(LCL.WF_SP1_Accrual);
  PARAMETER('SW1');
  PARAMETER(LCL.WF_SW1_Accrual);
  PARAMETER('WD1');
  PARAMETER(LCL.WF_WD1_Accrual);
  PARAMETER(LCL.WF_Accrual_1_CDE_not_used);
  PARAMETER(LCL.WF_Accrual_1_not_used);
  PARAMETER(LCL.WF_Accrual_2_CDE_not_used);
  PARAMETER(LCL.WF_Accrual_2_not_used);
  PARAMETER(LCL.WF_Flag_1);
  PARAMETER(LCL.WF_Status_Unused_1);
  PARAMETER(LCL.WF_Status_Unused_2);
  PARAMETER(LCL.WF_Status_Unused_3);
  PARAMETER(LCL.WF_Date_unused_1);
  PARAMETER(LCL.WF_Date_unused_2);
  PARAMETER(LCL.WF_Price_Unused_9_4);
  ENDIF;

  // LCL.WF BG1 Accrual = CON.*ZERO
  LCL.WF_BG1_Accrual = 0;

  // LCL.WF BG2 Accrual = CON.*ZERO
  LCL.WF_BG2_Accrual = 0;

  // LCL.WF BG3 Accrual = CON.*ZERO
  LCL.WF_BG3_Accrual = 0;

  // LCL.WF CA1 Accrual = CON.*ZERO
  LCL.WF_CA1_Accrual = *ZERO;

  // LCL.WF CR1 Accrual = CON.*ZERO
  LCL.WF_CR1_Accrual = *ZERO;

  // LCL.WF IC1 Accrual = CON.*ZERO
  LCL.WF_IC1_Accrual = *ZERO;

  // LCL.WF IC2 Accrual = CON.*ZERO
  LCL.WF_IC2_Accrual = *ZERO;

  // LCL.WF IC3 Accrual = CON.*ZERO
  LCL.WF_IC3_Accrual = *ZERO;

  // LCL.WF PR1 Accrual = CON.*ZERO
  LCL.WF_PR1_Accrual = *ZERO;

  // LCL.WF SP1 Accrual = CON.*ZERO
  LCL.WF_SP1_Accrual = *ZERO;

  // LCL.WF SW1 Accrual = CON.*ZERO
  LCL.WF_SW1_Accrual = *ZERO;

  // LCL.WF WD1 Accrual = CON.*ZERO
  LCL.WF_WD1_Accrual = *ZERO;

 }

 ENDIF;

}


