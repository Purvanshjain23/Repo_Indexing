      *****************  RPG PROGRAM HEADING  ***********************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     HP1007
      * TITLE:       Create New Current Target Tables for BGF Farms
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     09/21/00
      *
      * FUNCTION: This function uses a subfile to maintain the 'current' target tables for
      *           farms. It is called by function key from HP4005-Work With BGF Target Tables.
      *           This function always 'creates' new records.....there is no revise or delete
      *           logic.
      *
      *           Restrictors:
      *                None
      *
      *           Positioners:
      *                Farm site
      *
      *           Selectors:
      *                None
      *
      *           NOTE: No file updates occur until the user takes
      *                 F9-Accept to accept his changes.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 06/05/01  LeAnne Fedor
      *           Recompile only. New field 'multisite' added to Farm Site file.
      *
      * 09/04/01  LeAnne Fedor
      *           'Hog Capacity' removed from screen.
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd1007   cf   e             workstn
     F                                     sfile(hp1007s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Fhsp018    if   e           k disk
      *    Farm site
      *
      *
     Fhsp095    if   e           k disk
      *    BGF target tables
      *
      *
     Fhsl097a   uf a e           k disk
      *    BGF target table/farm links
      *
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D view            c                   'VIEW  '
     D select          c                   'SELECT'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
     D update          c                   'UPDATE'
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2
      *
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
     D editfl          s              1    inz('N')
     D wkedit          s              1    inz('N')
      *
      *
      * Control fields
      *
     D gotmatch        s              1    inz('N')
      *
      *
      * Work fields for date manipulation
      *
     D wkcymdiso       s               D   datfmt(*iso)
     D wkmdydate       s               D   datfmt(*mdy)
     D wksysdt         s              8  0
     D wkccyymmdd      s              8  0
      *
      *
      * Parm fields
      *
     D xxttbcd         s                   like(btttbcd)
     D xxttbds         s                   like(btttbds)
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
      *   None
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      * None
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
     C
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * $set1 - set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Fill the subfile with BGF farms.
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * $scrn1 - perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Set the page of the subfile to display
      *
     C                   select
     C                   when      wkflow = 0 and error = 0
     C                   eval      hdpag1 = 1
      *
     C                   when      reset = yes and wkflow <= hdrrn1
     C                   eval      hdpag1 = wkflow
     C                   endsl
      *
      *
      * If the user has edited the data, then issue the 'accept changes'
      * message. (Don't issue the message if the user is in create mode but
      * has not entered anything in the subfile.)
      *
     C                   select
     C                   when      mode = create and wkedit = no
      *
     C                   when      error = 0 and editfl = yes
     C                   eval      error = 1
     C                   eval      mgid(e) = 'HS09026'
     C                   endsl
      *
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to crt
      *
     C                   write     hp1007k1
     C                   write     hp1007ec
     C                   exfmt     hp1007c1
      *
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
     C                   eval      reset = no
     C                   eval      editfl = no
      *
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      rtncd = '03'
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   eval      routne = scrn1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   eval      reset = yes
     C                   eval      routne = set1
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      *in09 = *on                                  F9-accept
     C                   exsr      $edit1
     C                   if        error <> 0                                   If error
     C                   eval      routne = scrn1
     C                   else
     C                   exsr      $crt097
     C                   eval      routne = exit
     C                   endif                                                  If error
      *
     C*                  when      *in25 = *on                                  F25-rollup
     C*                  exsr      $load1
     C*                  eval      routne = scrn1
     C                   other
      *
      * User pressed ENTER
      *
     C                   exsr      $edit1
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $edit1 - edit input fields for screen 1
      *---------------------------------------------------------------
      *
     C     $edit1        begsr
      *
     C                   eval      editfl = yes
      *
      * Edit the subfile
      *
     C                   exsr      $eds1
      *
     C                   if        error = 0
     C                   eval      hdpag1 = 1
     C                   endif
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $clr1  - clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   eval      hdrrn1 = 0
     C                   eval      count = 0
      *
     C                   clear                   hp1007s1
     C                   seton                                        83        sflclr
     C                   write     hp1007c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $frsh1 - refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Loading the subfile in this program is different. We load the entire
      * subfile at once with the BGF farms from the farm master.
      *
     C     *loval        setll     hsp018
     C                   setoff                                       82
     C                   dou       *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $load1 - load subfile on screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
      * Retrieve BGF farm sites
      *
     C                   read      hsp018                                 82
     C                   if        *in82 = *off and fsppcd = 'BGF  '            If not EOF
     C                   seton                                        85
      *
      * Clear subfile output only fields
      *
     C                   z-add     0             hdefdt
     C                   move      *blank        d1fsbo
     C                   move      *blank        d1ptcd
     C                   move      *blank        d1oldttbcd
     C                   z-add     0             d1oldefdt
      *
      * For each farm:
      * 1) retrieve the 'current' target table
      *
     C                   exsr      $current
      *
      * Write a subfile record.
      *
     C                   z-add     fsfscd        d1fscd
     C                   move      fsfsbo        d1fsbo
     C                   move      fsptcd        d1ptcd
      *
     C                   add       1             count
     C                   add       1             hdrrn1
      *
     C                   write     hp1007s1
     C                   seton                                        81
     C                   eval      hdpag1 = hdrrn1
     C                   endif                                                  If not EOF
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Go to the target table/farm link file and determine if this farm
      * is currently set up to use any table.
      *---------------------------------------------------------------
      *
     C     $current      begsr
      *
     C                   move      no            gotmatch
      *
     C     fsfscd        setll     hsl097a
      *
     C                   dou       *in91 = *on or gotmatch = yes                Do loop
     C     fsfscd        reade     hsl097a                                91
     C                   if        *in91 = *off and                             If not EOF
     C                             gotmatch = no and
     C                             bfefdt <= wksysdt
     C                   move      yes           gotmatch
     C                   move      bfttbcd       d1oldttbcd
     C                   z-add     bfefdt        hdefdt
      *
      * Flip effective date from CCYYMMDD to MMDDYY using a date format field.
      *
     C                   if        bfefdt <> 0                                  If a date
     C     *iso          move      bfefdt        wkmdydate
     C                   move      wkmdydate     d1oldefdt
     C                   endif                                                  If a date
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do loop
      *
     C                   endsr
      /eject
      *---------------------------------------------------------------
      * Read and edit changed subfile records on screen 1
      *---------------------------------------------------------------
      *
     C     $eds1         begsr
      *
      *
      * Set the field that indicates whether the user entered/changed data.
      *
     C                   eval      wkedit = no
      *
      * Read/process all changed subfile records
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     hp1007s1                               80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set on MDT
     C                   seton                                        85
      *
      * Set off error indicators in the subfile
      *
     C                   exsr      $setof
      *
      * If there are any user entries
      *  a) set the flag indicating you have edited at least once and
      *  b) validate fields
      *
     C                   if        d1newttbcd <> *blank or                      If entry
     C                             d1newefdt <> 0
     C                   eval      wkedit = yes
     C                   exsr      $ttbcd
     C                   exsr      $efdt
     C                   endif                                                  If entry
      *
     C                   update    hp1007s1
     C                   exsr      $setof
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      * Set MDT
     C                   setoff                                       85
      *
     C                   endsr
      /eject
      *--------------------------------------------------------------------------------------
      * F4 prompt for screen 1
      *--------------------------------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
      *
      *--------------------------------------------------------------------------------------
      * Prompted fields in subfile
      *--------------------------------------------------------------------------------------
      *
      * Set off prompt indicators in all subfile records.
      *
     C                   exsr      $f4sflind
      *
     C                   select
      *
      * Target table code
      *
     C                   when      fld = 'D1NEWTTBCD'
     C                   call      'HP5011'
     C                   parm      *blank        xxttbcd
     C                   parm      *blank        xxttbds
     C                   exsr      $rrn1
     C                   if        *in97 = *off                                 If hit
     C                   if        xxttbcd <> *blank
     C                   movel     xxttbcd       d1newttbcd
     C                   endif
      *
      * Update subfile
      *
     C                   seton                                        8551
     C                   update    hp1007s1
     C                   setoff                                       8551
      *
     C                   endif                                                  If hit
      *
      *-----------------------------------------------------------------
      * Catch-all logic if user prompts on any other non-prompt field
      *-----------------------------------------------------------------
      *
     C                   other
     C                   if        error < maxmsg
     C                   add       1             error
     C                   exsr      $err1
     C                   eval      mgid(e) = 'HS09011'
     C                   endif
     C                   exsr      $rrn1
     C                   endsl
      *
      * Reset the subfile relative record number to what it was before
      * the user took F4 (It will be out-of-synch if the user has
      * selected a record thus causing the subfile record to be retrieved
      * and updated.) But, set the page of the subfile to be displayed
      * to the page on which the user took the prompt.
      *
     C                   eval      hdrrn1 = count
     C                   eval      hdpag1 = hdrr1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $f4sflind - set off f4 indicators in the subfile records
      *----------------------------------------------------------------
      *
     C     $f4sflind     begsr
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do indicators off
     C                   readc     hp1007s1                               80
     C                   if        *in80 = *off                                 If rec read
     C                   seton                                        85
     C                   setoff                                       51
     C                   update    hp1007s1
     C                   endif                                                  If rec read
     C                   enddo                                                  Do indicators off
      * Set MDT
     C                   setoff                                       85
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $rrn1 - routine to find/retrieve the subfile record to update
      *          when returning from a select program on screen 1
      *----------------------------------------------------------------
      *
      * HDRR1 is the hidden field associated with the keyword SFLCSRRRN
      * on the control record in the DSPF.
      * HDRRN1 is the value associated with the keyword 'SFILE' in
      * the F-specs for the workstation.
      *
     C     $rrn1         begsr
      *
     C                   setoff                                       97
      *
     C                   if        hdrr1 <> 0
     C                   eval      hdrrn1 = hdrr1
     C     hdrrn1        chain     hp1007s1                           97
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate target table code
      *----------------------------------------------------------------
      *
      * Validations:
      *  1) only required if an effective date is also entered.
      *  2) must be valid in the target table master
      *  3) cannot be the same as the current entry
      *
     C     $ttbcd        begsr
      *
     C                   eval      d1newttbcd = %triml(d1newttbcd)
      *
     C                   select
     C                   when      d1newttbcd = *blank and d1newefdt <> 0
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   exsr      $err1
     C                   endif
      *
     C                   when      d1newttbcd = d1oldttbcd
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS01027'
     C                   exsr      $err1
     C                   endif
     C                   other
      *
     C     d1newttbcd    chain     hsp095                             92
     C                   if        *in92 = *on                                  If not found
     C                   seton                                        31
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS01021'     mgid(e)
     C                   clear                   mgw
     C                   movea     d1newttbcd    mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If not found
     C                   endsl
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Validate effective date
      *----------------------------------------------------------------
      *
      * Validations:
      *   1) required if table target is entered
      *   2) cannot be negative
      *   3) must be a valid date
      *   4) cannot be prior to the old effective date
      *
     C     $efdt         begsr
      *
     C                   select
     C                   when      d1newefdt = 0 and d1newttbcd <> *blank
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09001'
     C                   exsr      $err1
     C                   endif
      *
     C                   when      d1newefdt < 0
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09000'
     C                   exsr      $err1
     C                   endif
     C                   other
      *
      * Check for a valid date
      *
     C     *mdy          test(d)                 d1newefdt              92
     C                   if        *in92 = *off                                 If valid date
     C     *mdy          move      d1newefdt     wkcymdiso
     C                   move      wkcymdiso     wkccyymmdd
     C                   if        wkccyymmdd <= hdefdt                         If new earlier
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS01028'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If new earlier
     C                   else
      * Invalid date
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09004'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If valid date
     C                   endsl
      *
      * If date is valid, determine that no record already exists for the
      * farm with this effective date.
      *
     C                   if        *in32 = *off and d1newefdt <> 0              If date OK
     C     key01         chain(n)  hsl097a                            92
     C                   if        *in92 = *off                                 If exists
     C                   seton                                        32
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS01031'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If exists
     C                   endif                                                  If date OK
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * $setof - set off the indicators on the subfile
      *----------------------------------------------------------------
      *
     C     $setof        begsr
      *
     C                   setoff                                       3132
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Create target table/farm link records
      *----------------------------------------------------------------
      *
     C     $crt097       begsr
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do writes
     C                   readc     hp1007s1                               80
     C                   if        *in80 = *off and d1newttbcd <> *blank        If rec read
     C                   move      d1newttbcd    bfttbcd
     C                   z-add     d1fscd        bffscd
      *
      * Flip date from MMDDYY to CCYYMMDD
      *
     C     *mdy          move      d1newefdt     wkcymdiso
     C                   movel     wkcymdiso     bfefdt
      *
     C                   write     bfrec
     C                   endif                                                  If rec read
     C                   enddo                                                  Do writes
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * $err1  - set the subfile to redisplay at the first page that
      *          has errors for screen 1
      *---------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * $exit - seton last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      *
      *---------------------------------------------------------------
      * $wrmsg - write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * $clmsg - clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * *inzsr - initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *
      *
     C     key01         klist
     C                   kfld                    d1fscd
     C                   kfld                    wkccyymmdd
      *
      *
      * Mode is always 'create' in this program.
      *
     C                   eval      c1mode = create
     C                   eval      mode = create
      *
      * Get the system date into CCYYMMDD format.
      *
     C                   move      *date         wkcymdiso
     C                   move      wkcymdiso     wksysdt
      *
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   eval      wkplin = 14                                  sflpag
     C                   eval      wkrlin = wkplin - 1
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
