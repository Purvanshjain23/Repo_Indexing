// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPLQEFR
// ?Date: 14.08.2025 Time: 03:41:47
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Change Log and Comments
DO;

//?RMC 3/7/19 S14615  on F10 -- chg from par.company to par.claim company
//?  in Val Subfile Record Fields-- added check for 440 to force "C" respons
//?RMC 11/16/18 pass in acctng co, chk in crtobj
//?E4057 JJH 10/13/15 - Price Credit Memo Fixes
//?- Do not allow Inactive (I) Department/Reason Codes to be entered.
//?E4057 JJH 04/06/15 - Price Credit Memo Fixes
//?- Change position of Reason and Dept on display screen
//?- Affect Sales Pnds Status (Afft Lbs) - Changed to Output
//?- Remove Affect Inventory Status (Afft Inv) from display screen
//?- Add Require Credit Manager Approval (Req CM Apv) field to display
//?- On Create A/R Claim Resale, set unused Affect flags to Blank
//?- Deparment Code and Reason changed from Optional to Required
//?- F4=SELRCD calls the PBQVSRR SELRCD which is I/RST by Deparment
//?  and Claim Reason.  Same SELRCD used for Department and Reason.
//?- Default for Affect Flags and Required CM Approval based on
//?  default values in A/R Claim Reason - Department/Reason.
//?- Add GL (Gallon) and PC (Pieces) as valid UOM.  GL required to
//?  process claims from HPB.
//?** 06/01/2008 slm allow Tons for unit of measure.
//?**
//?** 03/03/2008 LJB E00094
//?** Pass status flag (first time flag). If "Y"-new claim-then
//?** don't email to St Joe
//?** 02/22/2008 LJB E00094
//?** Prompt to Email Change of Resale claim notice to Triumph Foods
//?** distribution list. Email if "Yes" is selected.
//?9/27/2007 slm The resale total amount was not accumulating correctly.
//?11/07/07 slm  Pulled in the logic from the change object
//?              on when to change from company to shared
//?              these changes were not being displayed to the user
//?E3387 JJH 09/08/14 - Add ACR Shipping Method
//? Add ACR Shipping Method as an input capable field to specify
//? if Collect/Prepaid Truck/Rail.
//? Replaced "Chg A/R Claim RS PO   CH - A/R Claim Resale  *" with
//? "Chg A/R Clm RSPO ShMt CH - A/R Claim Resale  *" function.
//?E3387 JJH 09/08/14 - Add ACR Shipping Method
//? If ACR Shipping Method not found, default to Collect Truck (CT).
ENDDO;

//?*** Setup Security & Company Title ***
// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile header

CASE;

// IF CTL.Resale Purchase Order#Usr is Blank
IF CTL.Resale_Purchase_Order#Usr = *BLANK;

EXECUTE FUNCTION(Rtv Purchase Number   RT) TYPE(RTVOBJ) FILE(PPA3CPP)           AC1737522;
PARAMETER(PAR.Claim_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(CTL.Resale_Purchase_Order#Usr);
{
 //?USER: Initialize routine

 // PAR.Resale Purchase Order # = CON.*BLANK
 PAR.Resale_Purchase_Order_Nbr = *BLANK;

 //?USER: Processing if Data record not found

 // PAR.Resale Purchase Order # = CON.*BLANK
 PAR.Resale_Purchase_Order_Nbr = *BLANK;

 //?USER: Process Data record

 // PAR.Resale Purchase Order # = DB1.Resale Purchase Order #
 PAR.Resale_Purchase_Order_Nbr = DB1.Resale_Purchase_Order_Nbr;

}


ENDIF;

// CTL.Resale Total Item Amount = CON.*ZERO
CTL.Resale_Total_Item_Amount = *ZERO;

// CTL.Ship To Customer = PAR.Ship To Customer
CTL.Ship_To_Customer = PAR.Ship_To_Customer;

//?9/27/2007 slm add accumulate of total resale
// Call program RTV Cals Res/Ship TotalXP.
CALL PROGRAM(RTV Cals Res/Ship TotalXP) ('PMNYXFR');
PARAMETER(CTL.Claim_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Resale_Total_Item_Amount);

EXECUTE FUNCTION(RTV Name RT) TYPE(RTVOBJ) FILE(CABBREP)                        AC1546878;
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E3387 JJH 09/14/14 - Update ACR Shipping Method
EXECUTE FUNCTION(Rtv Shipping Method   RT) TYPE(RTVOBJ) FILE(PPA3CPP)           AC2098748;
PARAMETER(CTL.Claim_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.ACR_Shipping_Method);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF NOT CTL.ACR Shipping Method is *ALL values
IF ! CTL.ACR_Shipping_Method = 'CR'/'CT'/'PR'/'PT'/*BLANK;

EXECUTE FUNCTION(Rtv Shipping Method   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1848045;
PARAMETER(PAR.Company_Number);
PARAMETER(CTL.Claim_Order_Number);
PARAMETER(CTL.ACR_Shipping_Method);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E3387 JJH 02/09/15 - Update ACR Shipping Method
CASE;

// IF NOT CTL.ACR Shipping Method is *ALL values
IF ! CTL.ACR_Shipping_Method = 'CR'/'CT'/'PR'/'PT'/*BLANK;

// CTL.ACR Shipping Method = CND.Collect Truck
CTL.ACR_Shipping_Method = 'CT';

ENDIF;

ENDIF;

EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(CTL.ACR_Shipping_Method_DRV);
PARAMETER(CTL.ACR_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Initialize subfile record (existing record)

// RCD.Reason Code Usr = DB1.Reason Code
RCD.Reason_Code_Usr = DB1.Reason_Code;

//?E4057 JJH 04/13/15 - Revised Department Code procesing
// RCD.Claim Department Code USR = DB1.Claim Department Code
RCD.Claim_Department_Code_USR = DB1.Claim_Department_Code;

CASE;

// IF RCD.Resale Item Weight is Equal to zero
IF ( RCD.Resale_Item_Weight = *ZERO;

// OR RCD.Resale Item Unit Price is Equal zero
OR RCD.Resale_Item_Unit_Price = *ZERO );

// AND RCD.Resale Item Amount is equal to zero
AND RCD.Resale_Item_Amount = *ZERO;

// PGM.*Re-read Subfile Record = CND.*YES
PGM.*Re_read_Subfile_Record = 1;

ENDIF;

// RCD.Resale Company Number = PAR.Claim Company Number
RCD.Resale_Company_Number = PAR.Claim_Company_Number;

// RCD.Resale Purchase Order # = CTL.Resale Purchase Order#Usr
RCD.Resale_Purchase_Order_Nbr = CTL.Resale_Purchase_Order#Usr;

EXECUTE FUNCTION(Rtv Customer TFEx     RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1747887;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Cst_TF_Exempt_Cde_Usr);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Process Data record

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

}


EXECUTE FUNCTION(Rtv Item Type/TF Exemp RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1750320;
PARAMETER(RCD.Resale_Company_Number);
PARAMETER(RCD.Resale_Item_Code);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(RCD.TF_Co_Ownership_Sts);
PARAMETER(RCD.Itm_TF_Exempt_Cde_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Move TF Exempt Code and Validate TF Exempt Code
DO;

//?Move the TF from the Order, then if Order not found then move from
//?the item code.
//?Move the values to the claim product TF EXEMPT
CASE;

// IF RCD.Cst TF Exempt Cde Usr is Exempt Customer
IF RCD.Cst_TF_Exempt_Cde_Usr = 'EC';

CASE;

// IF RCD.Itm TF Exempt Cde Usr is Exempt Product
IF RCD.Itm_TF_Exempt_Cde_Usr = 'EP';

// RCD.Clm Resale TF Exempt Code = RCD.Itm TF Exempt Cde Usr
RCD.Clm_Resale_TF_Exempt_Code = RCD.Itm_TF_Exempt_Cde_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Clm Resale TF Exempt Code = RCD.Cst TF Exempt Cde Usr
RCD.Clm_Resale_TF_Exempt_Code = RCD.Cst_TF_Exempt_Cde_Usr;

ENDIF;

//?Move the values to the claim product TF EXEMPT
// IF RCD.Cst TF Exempt Cde Usr is Not Exempt
IF RCD.Cst_TF_Exempt_Cde_Usr = 'NE';

// RCD.Clm Resale TF Exempt Code = RCD.Itm TF Exempt Cde Usr
RCD.Clm_Resale_TF_Exempt_Code = RCD.Itm_TF_Exempt_Cde_Usr;

ENDIF;

//?Validate the TF Exempt
CASE;

// IF RCD.Clm Resale TF Exempt Code EQ WRK.BLANK
IF RCD.Clm_Resale_TF_Exempt_Code = WRK.BLANK;

// Send error message - 'Tf Exempt error due to Item(s) used on Orders'
ERROR(USR3585);
MSGPARM(RCD.Clm_Resale_TF_Exempt_Code);

//?If the claim TF Exempt is blank, then this is a required field.
//?The IS group would have to review this data to know what has
//?happened.
ENDIF;

ENDDO;

//?OVERRIDE:  Claim Responsibility
CASE;

// IF RCD.Clm Resale TF Exempt Code is Exempt Customer
IF RCD.Clm_Resale_TF_Exempt_Code = 'EC';

// OR RCD.Clm Resale TF Exempt Code is Exempt Product
OR RCD.Clm_Resale_TF_Exempt_Code = 'EP';

// OR RCD.Clm Resale TF Exempt Code is Pre Commencement
OR RCD.Clm_Resale_TF_Exempt_Code = 'PC';

// OR PAR.Accounting Company is Sioux City
OR PAR.Accounting_Company = 440;

//?RMC added check for 440 (its in the crtobj too) 8/9/22
// RCD.Resale Responsibility = CND.Company
RCD.Resale_Responsibility = 'C';

//?OVERRIDE:  Claim Responsibility
// IF *OTHERWISE
IF *OTHERWISE;

//?Affect Sale Pounds = Y
CASE;

// IF RCD.Affect Sales Pnds Status is yes
IF RCD.Affect_Sales_Pnds_Status = 'Y';

// RCD.Resale Responsibility = CND.Company
RCD.Resale_Responsibility = 'C';

ENDIF;

//?Item Co-Ownership = S or T
CASE;

// IF RCD.TF Co-Ownership Sts is Co-Owned
IF RCD.TF_Co_Ownership_Sts = 'S'/'T';

// RCD.Resale Responsibility = CND.Shared
RCD.Resale_Responsibility = 'S';

ENDIF;

ENDIF;

//?E4057 JJH 04/13/15 - Revised Reason Code procesing
//?Validate Department and Reason code
DO;

//?Reason & department must be found in the A/R Claim Reason
EXECUTE FUNCTION(Vry A/R Claim Dept/Rsn RT) TYPE(RTVOBJ) FILE(PPAUREP)          AC1741232;
PARAMETER(RCD.Claim_Department_Code_USR);
PARAMETER(RCD.Reason_Code_Usr);
PARAMETER(LCL.Valid_Item_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 // IF DB1.Record Status is Inactive
 IF DB1.Record_Status = 'I';

 // PGM.*Return code = CND.*Record is inactive
 PGM.*Return_code = 'USR4855';

 ENDIF;

}


//?E4057 JJH 10/13/15 - Do not allow Inactive Department/Reason
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'AR Claim Reason not found.'
ERROR(USR3423);

// IF PGM.*Return code is *Record is inactive
IF PGM.*Return_code = 'USR4855';

// Send error message - 'A/R Claim Department and Reason is Inactive.'
ERROR(USR4856);
MSGPARM(RCD.Claim_Department_Code_USR);
MSGPARM(RCD.Reason_Code_Usr);

ENDIF;

ENDDO;

//?USER: Initialize subfile record (new record)

// RCD.Ship To Customer = PAR.Ship To Customer
RCD.Ship_To_Customer = PAR.Ship_To_Customer;

// RCD.Claim Number = PAR.Claim Number
RCD.Claim_Number = PAR.Claim_Number;

// RCD.Resale Company Number = PAR.Claim Company Number
RCD.Resale_Company_Number = PAR.Claim_Company_Number;

//?Get next Resale line number
EXECUTE FUNCTION(RTV Last Prod Line No3 RT) TYPE(RTVOBJ) FILE(PDMPCPP)          AC1773942;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Resale_Item_Line_Number);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
 //?USER: Processing if Data record not found

 // PAR.Resale Item Line Number = CON.1
 PAR.Resale_Item_Line_Number = 1;

 //?USER: Process Data record

 // PAR.Resale Item Line Number = DB1.Resale Item Line Number + CON.1
 PAR.Resale_Item_Line_Number = DB1.Resale_Item_Line_Number + 1;

 QUIT;

}


//?Leave at zero only used for reference
// RCD.Order Sequence Number = CON.*ZERO
RCD.Order_Sequence_Number = *ZERO;

// RCD.Order Secondary Line Seq = CON.*ZERO
RCD.Order_Secondary_Line_Seq = *ZERO;

// RCD.Resale Purchase Order # = CTL.Resale Purchase Order#Usr
RCD.Resale_Purchase_Order_Nbr = CTL.Resale_Purchase_Order#Usr;

//?E4057 JJH 04/09/15 - Revised Claim Department Code procesing
// RCD.Claim Department Code = CON.*BLANK
RCD.Claim_Department_Code = *BLANK;

// RCD.Claim Department Code USR = CON.*BLANK
RCD.Claim_Department_Code_USR = *BLANK;

//?E4057 JJH 04/09/15 - Revised Reason Code procesing
// RCD.Reason Code = CON.*BLANK
RCD.Reason_Code = *BLANK;

// RCD.Reason Code Usr = CON.*BLANK
RCD.Reason_Code_Usr = *BLANK;

//?E4057 JJH 04/09/15 - Revised Claim Department & Reason procesing
//?  This logic now occurs in the Validation routines.
//?CALC: Subfile control function fields

//?E3387 JJH 09/08/14 - Update ACR Shipping Method
EXECUTE FUNCTION(ACR Shipping Method DRV) TYPE(DRVFLD)                          AC2098708;
PARAMETER(CTL.ACR_Shipping_Method_DRV);
PARAMETER(CTL.ACR_Shipping_Method);
{
 //?Calculate derived field

 // PAR.ACR Shipping Method DRV = Condition name of PAR.ACR Shipping Method
 PAR.ACR_Shipping_Method_DRV = RTVCND(PAR.ACR_Shipping_Method);

}


//?USER: Validate subfile control

//?E3387 JJH 09/14/14 - Verify a valid Shipping Method is entered.
//?Send ERRMSG if invalid Shipping Method
CASE;

// IF CTL.ACR Shipping Method is *ALL values
IF CTL.ACR_Shipping_Method = 'CR'/'CT'/'PR'/'PT'/*BLANK;

//?Send ERRMSG if invalid Shipping Method
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - '"&1" is Not a Valid Shipping Method.'
ERROR(USR4759);
MSGPARM(CTL.ACR_Shipping_Method);

ENDIF;

// PAR.Change Modes          USR = CND.No
PAR.Change_Modes_USR = 'N';

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// OR CTL.*CMD key is CF12
OR CTL.*CMD_key = '12';

//?*** Continue ***
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Error Flag            USR = CND.No
PAR.Error_Flag_USR = 'N';

//?Update A/R Claim file if Resale Info entered & valid.
CASE;

// IF PAR.Error Flag            USR is No
IF PAR.Error_Flag_USR = 'N';

EXECUTE FUNCTION(CHG Resale Information CH) TYPE(CHGOBJ) FILE(PDMKCPP)          AC1528228;
PARAMETER(CTL.Claim_Number);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


ENDIF;

ENDIF;

//?USER: Validate subfile record fields

//?E4057 JJH 04/09/15 - New SELRCD for Claim Department and Reason
//?SELRCD for Claim Department and Reason
CASE;

// IF PGM.*Cursor field <IS> RCD.Claim Department Code USR
IF ( PGM.*Cursor_field = RCD.Claim_Department_Code_USR;

// AND CTL.*CMD key is CF04
AND CTL.*CMD_key = '04' );

// OR PGM.*Cursor field <IS> RCD.Reason Code Usr
OR ( PGM.*Cursor_field = RCD.Reason_Code_Usr;

// AND CTL.*CMD key is CF04
AND CTL.*CMD_key = '04' );

// Call program Sel A/R Claim Dpt/Rsn  SR.
CALL PROGRAM(Sel A/R Claim Dpt/Rsn  SR) ('PBQVSRR');
PARAMETER(RCD.Claim_Department_Code_USR);
PARAMETER(RCD.Reason_Code_Usr);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(RCD.CRP_Require_CM_Approval);

// RCD.Claim Department Code = RCD.Claim Department Code USR
RCD.Claim_Department_Code = RCD.Claim_Department_Code_USR;

// RCD.Reason Code = RCD.Reason Code Usr
RCD.Reason_Code = RCD.Reason_Code_Usr;

ENDIF;

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// OR CTL.*CMD key is CF12
OR CTL.*CMD_key = '12';

// IF *OTHERWISE
IF *OTHERWISE;

//?E4057 JJH 04/13/15 - Revised Claim Department & Reason procesing
//?IF not F10 or F12, THEN continue validations.
DO;

//?Validate company & item.
DO;

//?F4 = Prompt for Company/Item.
CASE;

// IF CTL.*CMD key is CF04
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Resale Company Number
AND ( PGM.*Cursor_field = RCD.Resale_Company_Number;

// OR PGM.*Cursor field <IS> RCD.Resale Item Code
OR PGM.*Cursor_field = RCD.Resale_Item_Code );

// RCD.Resale Company Number = PAR.Claim Company Number
RCD.Resale_Company_Number = PAR.Claim_Company_Number;

// Call program SEL Item for Claim     SR.
CALL PROGRAM(SEL Item for Claim     SR) ('PDOOSRR');
PARAMETER(RCD.Resale_Company_Number);
PARAMETER(RCD.Resale_Item_Code);

ENDIF;

//?Load Default Value for Single Company Users.
CASE;

// IF PAR.Allow Multi-Company is no
IF PAR.Allow_Multi_Company = 'N';

// RCD.Resale Company Number = PAR.Company Number
RCD.Resale_Company_Number = PAR.Company_Number;

ENDIF;

//?Company & Item are required.
CASE;

// IF RCD.Resale Company Number is Equal to zero
IF RCD.Resale_Company_Number = *ZERO;

// OR RCD.Resale Item Code is Not Entered
OR RCD.Resale_Item_Code = *ZERO;

// Send error message - 'Company and Item are required.'
ERROR(USR2765);
MSGPARM(RCD.Resale_Company_Number);
MSGPARM(RCD.Resale_Item_Code);

ENDIF;

ENDDO;

//?Validate Department Code and Reason Code
DO;

//?Reason & department must be found in the A/R Claim Reason
EXECUTE FUNCTION(Vry A/R Claim Dept/Rsn RT) TYPE(RTVOBJ) FILE(PPAUREP)          AC1741232;
PARAMETER(RCD.Claim_Department_Code_USR);
PARAMETER(RCD.Reason_Code_Usr);
PARAMETER(LCL.Valid_Item_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 // IF DB1.Record Status is Inactive
 IF DB1.Record_Status = 'I';

 // PGM.*Return code = CND.*Record is inactive
 PGM.*Return_code = 'USR4855';

 ENDIF;

}


//?E4057 JJH 10/13/15 - Do not allow Inactive Department/Reason
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'AR Claim Reason not found.'
ERROR(USR3423);

// IF PGM.*Return code is *Record is inactive
IF PGM.*Return_code = 'USR4855';

// Send error message - 'A/R Claim Department and Reason is Inactive.'
ERROR(USR4856);
MSGPARM(RCD.Claim_Department_Code_USR);
MSGPARM(RCD.Reason_Code_Usr);

ENDIF;

ENDDO;

//?Pull down the default department and the affects inv...
CASE;

// IF RCD.Claim Department Code NE RCD.Claim Department Code USR
IF RCD.Claim_Department_Code <> RCD.Claim_Department_Code_USR;

// OR RCD.Reason Code NE RCD.Reason Code Usr
OR RCD.Reason_Code <> RCD.Reason_Code_Usr;

//?Department or Reason Changed
EXECUTE FUNCTION(Rtv A/R Claim Rsn Aff RT) TYPE(RTVOBJ) FILE(PPAUREP)           AC1740690;
PARAMETER(RCD.Claim_Department_Code_USR);
PARAMETER(RCD.Reason_Code_Usr);
PARAMETER(NLL.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(NLL.Affect_Trade_Fund);
PARAMETER(NLL.Affect_Commission);
PARAMETER(NLL.Affect_Pricing);
PARAMETER(NLL.Valid_Item_Type);
PARAMETER(RCD.CRP_Require_CM_Approval);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?08/02/05 SLM OMS012A   Allow unit of measure of CS
//?Validate unit of measure.
DO;

EXECUTE FUNCTION(RTV Prc Unit of Meas   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1575254;
PARAMETER(RCD.Resale_Company_Number);
PARAMETER(RCD.Resale_Item_Code);
PARAMETER(RCD.UOM_Primary_Dft);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?E4057 JJH 05/27/2015 - Add GL (Gallons) and PC (Pieces)
CASE;

// IF RCD.U/M - Primary Dft is Head Set
IF RCD.UOM_Primary_Dft = 'HS';

// OR RCD.U/M - Primary Dft is Pounds
OR RCD.UOM_Primary_Dft = 'LB';

// OR RCD.U/M - Primary Dft is Cases
OR RCD.UOM_Primary_Dft = 'CS';

// OR RCD.U/M - Primary Dft is Each
OR RCD.UOM_Primary_Dft = 'EA';

// OR RCD.U/M - Primary Dft is Carcass Hundred Weight
OR RCD.UOM_Primary_Dft = 'CW';

// OR RCD.U/M - Primary Dft is Tons
OR RCD.UOM_Primary_Dft = 'TN';

// OR RCD.U/M - Primary Dft is Pieces
OR RCD.UOM_Primary_Dft = 'PC';

// OR RCD.U/M - Primary Dft is Gallon
OR RCD.UOM_Primary_Dft = 'GL';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Claim unit of measure is invalid.'
ERROR(USR2897);
MSGPARM(RCD.UOM_Primary_Dft);

ENDIF;

ENDDO;

//?Validate Quantity & Weight.
DO;

//?Quantity is Negative --> Weight must be Negative.
CASE;

// IF RCD.Resale Item Quantity is Less than zero
IF RCD.Resale_Item_Quantity < *ZERO;

// AND RCD.Resale Item Weight is Greater than zero
AND RCD.Resale_Item_Weight > *ZERO;

// RCD.Resale Item Weight = RCD.Resale Item Weight * CON.-1 *
RCD.Resale_Item_Weight = RCD.Resale_Item_Weight * -1;

ENDIF;

//?Calculate Average Weight.
CASE;

// IF RCD.Resale Item Weight is Equal to zero
IF RCD.Resale_Item_Weight = *ZERO;

// AND RCD.Resale Item Quantity is not equal zero
AND RCD.Resale_Item_Quantity <> *ZERO;

CASE;

// IF RCD.Order Sequence Number is Equal to zero
IF RCD.Order_Sequence_Number = *ZERO;

// OR RCD.Order Secondary Line Seq is ZERO
OR RCD.Order_Secondary_Line_Seq = *ZERO;

//?Calculate the average weight for "non-order" item.
DO;

EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
PARAMETER(RCD.Resale_Company_Number);
PARAMETER(RCD.Resale_Item_Code);
PARAMETER(PAR.Average_Weight_USR);
PARAMETER(WRK.Unused_Parm_CD9_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// RCD.Resale Item Weight = RCD.Resale Item Quantity * PAR.Average Weight USR *
RCD.Resale_Item_Weight = RCD.Resale_Item_Quantity * PAR.Average_Weight_USR;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Calculate the average weight for "Order" item.
DO;

//?*** Get shipped weight and quantity from order detail. ***
EXECUTE FUNCTION(RTV Qty/Weight Shipped RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1479553;
PARAMETER(RCD.Resale_Company_Number);
PARAMETER(PAR.Claim_Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.Quantity_Shipped_Total);
PARAMETER(PAR.Weight_Shipped_Total);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// AND PAR.Quantity Shipped Total is not equal zero
AND PAR.Quantity_Shipped_Total <> *ZERO;

// AND PAR.Weight Shipped Total is Not equal zero
AND PAR.Weight_Shipped_Total <> *ZERO;

//?*** Calculate the average weight of each item on order detail. ***
// PAR.Average Weight USR = PAR.Weight Shipped Total / PAR.Quantity Shipped Total *Rounded
PAR.Average_Weight_USR = PAR.Weight_Shipped_Total / PAR.Quantity_Shipped_Total 'H';

//?*** Calculate the total weight for item on claim. ***
// RCD.Resale Item Weight = RCD.Resale Item Quantity * PAR.Average Weight USR *Rounded
RCD.Resale_Item_Weight = RCD.Resale_Item_Quantity * PAR.Average_Weight_USR 'H';

ENDIF;

ENDDO;

ENDIF;

ENDIF;

ENDDO;

//?Validate required fields.
DO;

CASE;

// IF RCD.U/M - Primary Dft is Pounds
IF RCD.UOM_Primary_Dft = 'LB';

//?Pounds required fields.
DO;

CASE;

// IF RCD.Resale Item Weight is Equal to zero
IF ( RCD.Resale_Item_Weight = *ZERO;

// OR RCD.Resale Item Unit Price is Equal zero
OR RCD.Resale_Item_Unit_Price = *ZERO );

// AND RCD.Resale Item Amount is equal to zero
AND RCD.Resale_Item_Amount = *ZERO;

// Send error message - '(Weight and Price) or (Total Amount) must be entered.'
ERROR(USR2779);
MSGPARM(RCD.Resale_Item_Weight);
MSGPARM(RCD.Resale_Item_Unit_Price);
MSGPARM(RCD.Resale_Item_Amount);

ENDIF;

ENDDO;

// IF RCD.U/M - Primary Dft is Head Set
IF RCD.UOM_Primary_Dft = 'HS';

//?Head Set required fields.
DO;

CASE;

// IF RCD.Resale Item Quantity is Equal to zero
IF ( RCD.Resale_Item_Quantity = *ZERO;

// OR RCD.Resale Item Unit Price is Equal zero
OR RCD.Resale_Item_Unit_Price = *ZERO );

// AND RCD.Resale Item Amount is equal to zero
AND RCD.Resale_Item_Amount = *ZERO;

// Send error message - '(Quantity and Price) or (Total Amount) must be entered.'
ERROR(USR2899);
MSGPARM(RCD.Resale_Item_Quantity);
MSGPARM(RCD.Resale_Item_Unit_Price);
MSGPARM(RCD.Resale_Item_Amount);

ENDIF;

ENDDO;

// IF RCD.U/M - Primary Dft is Cases
IF RCD.UOM_Primary_Dft = 'CS';

//?Cases required fields.
DO;

CASE;

// IF RCD.Resale Item Quantity is Equal to zero
IF ( RCD.Resale_Item_Quantity = *ZERO;

// OR RCD.Resale Item Unit Price is Equal zero
OR RCD.Resale_Item_Unit_Price = *ZERO );

// AND RCD.Resale Item Amount is equal to zero
AND RCD.Resale_Item_Amount = *ZERO;

// Send error message - '(Quantity and Price) or (Total Amount) must be entered.'
ERROR(USR2899);
MSGPARM(RCD.Resale_Item_Quantity);
MSGPARM(RCD.Resale_Item_Unit_Price);
MSGPARM(RCD.Resale_Item_Amount);

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?All other unit of measure required fields.
DO;

CASE;

// IF RCD.Resale Item Weight is Equal to zero
IF ( RCD.Resale_Item_Weight = *ZERO;

// OR RCD.Resale Item Unit Price is Equal zero
OR RCD.Resale_Item_Unit_Price = *ZERO );

// AND RCD.Resale Item Amount is equal to zero
AND RCD.Resale_Item_Amount = *ZERO;

// Send error message - '(Weight and Price) or (Total Amount) must be entered.'
ERROR(USR2779);
MSGPARM(RCD.Resale_Item_Weight);
MSGPARM(RCD.Resale_Item_Unit_Price);
MSGPARM(RCD.Resale_Item_Amount);

ENDIF;

ENDDO;

ENDIF;

ENDDO;

//?Validate Affect Flag Pounds with the Weight, if Weight is zero error
DO;

//?9/12/2006 SLM Can not have affect flag of Y in Pounds if Weight is
//?empty.
CASE;

// IF RCD.Affect Sales Pnds Status is yes
IF RCD.Affect_Sales_Pnds_Status = 'Y';

CASE;

// IF RCD.Resale Item Weight is Equal to zero
IF RCD.Resale_Item_Weight = *ZERO;

// Send error message - 'Pounds is Required'
ERROR(USR2255);
MSGPARM(RCD.Resale_Item_Weight);

ENDIF;

ENDIF;

ENDDO;

EXECUTE FUNCTION(Rtv Customer TFEx     RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1747887;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Cst_TF_Exempt_Cde_Usr);
{
 //?USER: Initialize routine

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Processing if Data record not found

 // PAR.Customer TF Exempt Code = WRK.BLANK
 PAR.Customer_TF_Exempt_Code = WRK.BLANK;

 //?USER: Process Data record

 // PAR.Customer TF Exempt Code = DB1.Customer TF Exempt Code
 PAR.Customer_TF_Exempt_Code = DB1.Customer_TF_Exempt_Code;

}


EXECUTE FUNCTION(Rtv Item Type/TF Exemp RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1750320;
PARAMETER(RCD.Resale_Company_Number);
PARAMETER(RCD.Resale_Item_Code);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(RCD.TF_Co_Ownership_Sts);
PARAMETER(RCD.Itm_TF_Exempt_Cde_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

//?Move TF Exempt Code and Validate TF Exempt Code
DO;

//?Move the TF from the Order, then if Order not found then move from
//?the item code.
//?Move the values to the claim product TF EXEMPT
CASE;

// IF RCD.Cst TF Exempt Cde Usr is Exempt Customer
IF RCD.Cst_TF_Exempt_Cde_Usr = 'EC';

CASE;

// IF RCD.Itm TF Exempt Cde Usr is Exempt Product
IF RCD.Itm_TF_Exempt_Cde_Usr = 'EP';

// RCD.Clm Resale TF Exempt Code = RCD.Itm TF Exempt Cde Usr
RCD.Clm_Resale_TF_Exempt_Code = RCD.Itm_TF_Exempt_Cde_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Clm Resale TF Exempt Code = RCD.Cst TF Exempt Cde Usr
RCD.Clm_Resale_TF_Exempt_Code = RCD.Cst_TF_Exempt_Cde_Usr;

ENDIF;

//?Move the values to the claim product TF EXEMPT
// IF RCD.Cst TF Exempt Cde Usr is Not Exempt
IF RCD.Cst_TF_Exempt_Cde_Usr = 'NE';

// RCD.Clm Resale TF Exempt Code = RCD.Itm TF Exempt Cde Usr
RCD.Clm_Resale_TF_Exempt_Code = RCD.Itm_TF_Exempt_Cde_Usr;

ENDIF;

//?Validate the TF Exempt
CASE;

// IF RCD.Clm Resale TF Exempt Code EQ WRK.BLANK
IF RCD.Clm_Resale_TF_Exempt_Code = WRK.BLANK;

// Send error message - 'Tf Exempt error due to Item(s) used on Orders'
ERROR(USR3585);
MSGPARM(RCD.Clm_Resale_TF_Exempt_Code);

//?If the claim TF Exempt is blank, then this is a required field.
//?The IS group would have to review this data to know what has
//?happened.
ENDIF;

ENDDO;

//?OVERRIDE:  Claim Responsibility
CASE;

// IF RCD.Clm Resale TF Exempt Code is Exempt Customer
IF RCD.Clm_Resale_TF_Exempt_Code = 'EC';

// OR RCD.Clm Resale TF Exempt Code is Exempt Product
OR RCD.Clm_Resale_TF_Exempt_Code = 'EP';

// OR RCD.Clm Resale TF Exempt Code is Pre Commencement
OR RCD.Clm_Resale_TF_Exempt_Code = 'PC';

// OR PAR.Accounting Company is Sioux City
OR PAR.Accounting_Company = 440;

//?added check for 440  3.12.19
// RCD.Resale Responsibility = CND.Company
RCD.Resale_Responsibility = 'C';

//?OVERRIDE:  Claim Responsibility
// IF *OTHERWISE
IF *OTHERWISE;

//?Affect Sale Pounds = Y
CASE;

// IF RCD.Affect Sales Pnds Status is yes
IF RCD.Affect_Sales_Pnds_Status = 'Y';

// RCD.Resale Responsibility = CND.Company
RCD.Resale_Responsibility = 'C';

ENDIF;

//?Item Co-Ownership = S or T
CASE;

// IF RCD.TF Co-Ownership Sts is Co-Owned
IF RCD.TF_Co_Ownership_Sts = 'S'/'T';

// RCD.Resale Responsibility = CND.Shared
RCD.Resale_Responsibility = 'S';

ENDIF;

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

//?08/28/07 PKD Replaced with Clc OrdDtl Ext Amt    XF
CASE;

// IF RCD.Resale Item Unit Price is Greater than zero
IF RCD.Resale_Item_Unit_Price > *ZERO;

// Call program Clc OrdDtl Ext Amt    XF.
CALL PROGRAM(Clc OrdDtl Ext Amt    XF) ('PMMMXFR');
PARAMETER(RCD.Resale_Item_Amount);
PARAMETER(RCD.UOM_Primary_Dft);
PARAMETER(RCD.Resale_Item_Quantity);
PARAMETER(RCD.Resale_Item_Weight);
PARAMETER(RCD.Resale_Item_Unit_Price);

ENDIF;

//?USER: Validate subfile record relations

// RCD.Resale Purchase Order # = CTL.Resale Purchase Order#Usr
RCD.Resale_Purchase_Order_Nbr = CTL.Resale_Purchase_Order#Usr;

CASE;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// OR CTL.*CMD key is CF12
OR CTL.*CMD_key = '12';

// IF *OTHERWISE
IF *OTHERWISE;

//?IF not F10 or F12, THEN continue validations.
DO;

//?Company & Item must exists in the Company/Item file.
EXECUTE FUNCTION(VAL Exist Company/Item RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1527869;
PARAMETER(RCD.Resale_Company_Number);
PARAMETER(RCD.Resale_Item_Code);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
}


//?DETER IF ITEM IS ON THE ORDER
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Determine if Item is on the Order, if not give warning.
DO;

EXECUTE FUNCTION(VAL Exist co/ord/item  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1527879;
PARAMETER(RCD.Resale_Company_Number);
PARAMETER(PAR.Claim_Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(RCD.Resale_Item_Code);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Load Sequence Numbers, If not already loaded.
DO;

CASE;

// IF RCD.Order Sequence Number is Equal to zero
IF RCD.Order_Sequence_Number = *ZERO;

// AND RCD.Order Secondary Line Seq is ZERO
AND RCD.Order_Secondary_Line_Seq = *ZERO;

// RCD.Order Sequence Number = PAR.Order Sequence Number
RCD.Order_Sequence_Number = PAR.Order_Sequence_Number;

// RCD.Order Secondary Line Seq = PAR.Order Secondary Line Seq
RCD.Order_Secondary_Line_Seq = PAR.Order_Secondary_Line_Seq;

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Zero Sequence Numbers.
DO;

// RCD.Order Sequence Number = CON.*ZERO
RCD.Order_Sequence_Number = *ZERO;

// RCD.Order Secondary Line Seq = CON.*ZERO
RCD.Order_Secondary_Line_Seq = *ZERO;

ENDDO;

// Send information message - 'Warning: Co &1 Item &2 is not on the Order.'
MESSAGE(USR3543 *INFO);
MSGPARM(RCD.Resale_Company_Number);
MSGPARM(RCD.Resale_Item_Code);

SET CURSOR;

ENDIF;

ENDDO;

//?DETER IF ITEM IS ON THE ORDER
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Item not found.'
ERROR(USR0326);
MSGPARM(RCD.Resale_Company_Number);
MSGPARM(RCD.Resale_Item_Code);

ENDIF;

ENDDO;

ENDIF;

//?USER: Create DBF record

// Call program CRT A/R Claim RslPrd   XF.
CALL PROGRAM(CRT A/R Claim RslPrd   XF) ('PBSYXFR')                             AC1527879;
PARAMETER(RCD.Claim_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(RCD.Resale_Item_Line_Number);
PARAMETER(RCD.Resale_Company_Number);
PARAMETER(RCD.Resale_Item_Code);
PARAMETER(RCD.Reason_Code_Usr);
PARAMETER(RCD.UOM_Primary_Dft);
PARAMETER(RCD.Responsible_Department);
PARAMETER(RCD.Claim_Department_Code_USR);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Resale_Item_Quantity);
PARAMETER(RCD.Resale_Item_Weight);
PARAMETER(RCD.Resale_Item_Unit_Price);
PARAMETER(RCD.Resale_Item_Amount);
PARAMETER(CTL.Resale_Purchase_Order#Usr);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(RCD.Resale_Responsibility);
PARAMETER(RCD.Resale_Prod_Reason_Type);
PARAMETER(RCD.CRP_Require_CM_Approval);
PARAMETER(RCD.Clm_Resale_TF_Exempt_Code);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
PARAMETER(RCD.TF_Co_Ownership_Sts);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
PARAMETER(PAR.Accounting_Company);

//?USER: Delete DBF record

EXECUTE FUNCTION(DLT A/R Claim RslPrdSa DL) TYPE(DLTOBJ) FILE(PDMPCPP)          AC1877302;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Resale_Item_Line_Number);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
{
 //?USER: Processing after Data update

 CASE;

 // IF PAR.Claim Audit Selection Usr is yes
 IF PAR.Claim_Audit_Selection_Usr = 'Y';

 //?System generated action notes
 //?Resale Product deleted
 // Call program Crt A/R Claim ExpComSG XF.
 CALL PROGRAM(Crt A/R Claim ExpComSG XF) ('PMTNXFR');
 PARAMETER(PAR.Claim_Number);
 PARAMETER('Resale Product Deleted');
 PARAMETER('S');
 PARAMETER('CLMCHANGE');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('CAR');

 ENDIF;

}


//?USER: Change DBF record

// Call program CHG A/R Claim RslPrdSA XF.
CALL PROGRAM(CHG A/R Claim RslPrdSA XF) ('PBSZXFR')                             AC1877302;
PARAMETER(RCD.Claim_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Resale_Item_Line_Number);
PARAMETER(RCD.Resale_Company_Number);
PARAMETER(RCD.Resale_Item_Code);
PARAMETER(RCD.Reason_Code_Usr);
PARAMETER(RCD.UOM_Primary_Dft);
PARAMETER(RCD.Responsible_Department);
PARAMETER(RCD.Claim_Department_Code_USR);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(RCD.Resale_Item_Quantity);
PARAMETER(RCD.Resale_Item_Weight);
PARAMETER(RCD.Resale_Item_Unit_Price);
PARAMETER(RCD.Resale_Item_Amount);
PARAMETER(CTL.Resale_Purchase_Order#Usr);
PARAMETER(RCD.Affect_Trade_Fund);
PARAMETER(RCD.Affect_Commission);
PARAMETER(RCD.Affect_Pricing);
PARAMETER(RCD.Affect_Inventory_Status);
PARAMETER(RCD.Affect_Sales_Doll_Status);
PARAMETER(RCD.Affect_Sales_Pnds_Status);
PARAMETER(RCD.Resale_Responsibility);
PARAMETER(RCD.Resale_Prod_Reason_Type);
PARAMETER(RCD.CRP_Require_CM_Approval);
PARAMETER(RCD.Clm_Resale_TF_Exempt_Code);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.TF_Co_Ownership_Sts);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
PARAMETER(PAR.Accounting_Company);

//?USER: Extra processing after DBF update

// PAR.Change Modes          USR = CND.Yes
PAR.Change_Modes_USR = 'Y';

// Call program New2Calc Claim Amounts XF.
CALL PROGRAM(New2Calc Claim Amounts XF) ('PPODXFR');
PARAMETER(RCD.Claim_Number);
PARAMETER(PAR.Claim_Amount);
PARAMETER(PAR.Claim_Net_Loss);

//?E3387 JJH 09/14/14 - Add ACR Shipping Method
//?UPDATE THE RESALE PURCHASE and SHIPPING METHOD
CASE;

// IF CTL.ACR Shipping Method is *ALL values
IF CTL.ACR_Shipping_Method = 'CR'/'CT'/'PR'/'PT'/*BLANK;

EXECUTE FUNCTION(Chg A/R ClmRS PO/ShMt CH) TYPE(CHGOBJ) FILE(PPA3CPP)           AC2098706;
PARAMETER(PAR.Claim_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(CTL.Resale_Purchase_Order#Usr);
PARAMETER(CTL.ACR_Shipping_Method);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Rtv/Chg Rsl PO#ONly   RT) TYPE(RTVOBJ) FILE(PDMPCPP)           AC1728382;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(DB1.Resale_Purchase_Order_Nbr);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG A/R Claim PO#Only  CH) TYPE(CHGOBJ) FILE(PDMPCPP)          AC1728343;
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Resale_Item_Line_Number);
  PARAMETER(PAR.Resale_Purchase_Order_Nbr);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - '"&1" is Not a Valid Shipping Method.'
ERROR(USR4759);
MSGPARM(CTL.ACR_Shipping_Method);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.Reason Code Usr = RCD.Reason Code
RCD.Reason_Code_Usr = RCD.Reason_Code;

// RCD.Department Code USR = RCD.Claim Department Code
RCD.Department_Code_USR = RCD.Claim_Department_Code;

//?9/27/2007 The accumulation of the Resale Total Amount
//?          was not getting accumulated in total when
//?          the total amount was changed.
// CTL.Resale Total Item Amount = CON.*ZERO
CTL.Resale_Total_Item_Amount = *ZERO;

//?9/27/2007 slm add accumulate of total resale
// Call program RTV Cals Res/Ship TotalXP.
CALL PROGRAM(RTV Cals Res/Ship TotalXP) ('PMNYXFR');
PARAMETER(CTL.Claim_Number);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Resale_Total_Item_Amount);

//?USER: Process command keys

//?E3387 JJH 09/14/14 - Add ACR Shipping Method
//?UPDATE THE RESALE PURCHASE and SHIPPING METHOD
CASE;

// IF CTL.ACR Shipping Method is *ALL values
IF CTL.ACR_Shipping_Method = 'CR'/'CT'/'PR'/'PT'/*BLANK;

EXECUTE FUNCTION(Chg A/R ClmRS PO/ShMt CH) TYPE(CHGOBJ) FILE(PPA3CPP)           AC2098706;
PARAMETER(PAR.Claim_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(CTL.Resale_Purchase_Order#Usr);
PARAMETER(CTL.ACR_Shipping_Method);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Rtv/Chg Rsl PO#ONly   RT) TYPE(RTVOBJ) FILE(PDMPCPP)           AC1728382;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(DB1.Resale_Purchase_Order_Nbr);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG A/R Claim PO#Only  CH) TYPE(CHGOBJ) FILE(PDMPCPP)          AC1728343;
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Resale_Item_Line_Number);
  PARAMETER(PAR.Resale_Purchase_Order_Nbr);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

}


// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - '"&1" is Not a Valid Shipping Method.'
ERROR(USR4759);
MSGPARM(CTL.ACR_Shipping_Method);

ENDIF;

//?F8=Next
CASE;

// IF CTL.*CMD key is SUBMIT/NEXT
IF CTL.*CMD_key = '08';

// PAR.Clm Program USR = CND.Work With Expense
PAR.Clm_Program_USR = 'WWE';

RETURN;

ENDIF;

//?F7=BACK
CASE;

// IF CTL.*CMD key is BACK
IF CTL.*CMD_key = '07';

// PAR.Clm Program USR = CND.Work With Resale
PAR.Clm_Program_USR = 'WWR';

RETURN;

ENDIF;

CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

//?F9=Add/Change Mode.
DO;

//?*** Continue ***
ENDDO;

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

//?F10=Select Items from Order.
DO;

//?chg from par.company to par.claim company
// Call program SEL Item for ResaleClmDF.
CALL PROGRAM(SEL Item for ResaleClmDF) ('PPPQDFR');
PARAMETER(PAR.Claim_Company_Number);
PARAMETER(PAR.Claim_Order_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Claim_Number);
PARAMETER(CTL.Claim_Ship_to_Customer);
PARAMETER('R');
PARAMETER(PAR.Clm_Program_USR);
PARAMETER(PAR.Claim_Audit_Selection_Usr);
PARAMETER(PAR.Claim_Audit_Co_Value_Usr);
PARAMETER(PAR.Approval_Claim_Audit_Eml);
PARAMETER(PAR.Accounting_Company);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

ENDDO;

// PAR.Change Modes          USR = CND.Yes
PAR.Change_Modes_USR = 'Y';

// IF PAR.Change Modes          USR is Yes
IF PAR.Change_Modes_USR = 'Y';

//?Change Program Mode from "Add" to "Change".
DO;

// PGM.*Program mode = CND.*CHANGE
PGM.*Program_mode = 'CHG';

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Enter=Continue.
DO;

EXECUTE FUNCTION(VAL Exist A/R Claim RslRT) TYPE(RTVOBJ) FILE(PDMPCPP)          AC1529299;
PARAMETER(CTL.Claim_Number);
{
 //?USER: Initialize routine

 //?Template version identifier - Edit to reflect current version.
 //?Template version identifier - Edit to reflect current version.
 EXECUTE FUNCTION(@Template Version) TYPE(EXCINTFUN)                             AC1523909;
 PARAMETER('1');
 //?USER: Process Data record

 QUIT;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// PAR.Return Command USR = CND.Continue
PAR.Return_Command_USR = 'F20';

RETURN;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Claim Product is required.'
ERROR(USR2826);

ENDIF;

ENDDO;

ENDIF;

//?USER: Exit program processing

// Call program DLT incomplete rsl itm EX.
CALL PROGRAM(DLT incomplete rsl itm EX) ('PDT0XFR');
PARAMETER(CTL.Claim_Number);
PARAMETER(PAR.Details_Remaining_USR);

CASE;

// IF PAR.Details Remaining USR is No
IF PAR.Details_Remaining_USR = 'N';

EXECUTE FUNCTION(CHG Resale Information CH) TYPE(CHGOBJ) FILE(PDMKCPP)          AC1528228;
PARAMETER(CTL.Claim_Number);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


ENDIF;

//?E3387 JJH 09/14/14 - Add ACR Shipping Method
//?UPDATE THE RESALE PURCHASE and SHIPPING METHOD
EXECUTE FUNCTION(Chg A/R ClmRS PO/ShMt CH) TYPE(CHGOBJ) FILE(PPA3CPP)           AC2098706;
PARAMETER(PAR.Claim_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(CTL.Resale_Purchase_Order#Usr);
PARAMETER(CTL.ACR_Shipping_Method);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Rtv/Chg Rsl PO#ONly   RT) TYPE(RTVOBJ) FILE(PDMPCPP)           AC1728382;
 PARAMETER(PAR.Claim_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(DB1.Resale_Purchase_Order_Nbr);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(CHG A/R Claim PO#Only  CH) TYPE(CHGOBJ) FILE(PDMPCPP)          AC1728343;
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Resale_Item_Line_Number);
  PARAMETER(PAR.Resale_Purchase_Order_Nbr);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

}


CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.Clm Program USR = CND.Exit
PAR.Clm_Program_USR = 'EXT';

RETURN;

ENDIF;

