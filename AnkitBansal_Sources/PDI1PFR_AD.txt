// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDI1PFR
// ?Date: 14.08.2025 Time: 12:03:56
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?OMS036 RMC 4/6/05 Changes for multiple lockbox per day: remove
//?           company and added deposit time to key
// PAR.Application Code = CND.Accounts Receivable
PAR.Application_Code = 'A/R';

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER(PAR.Application_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Print required level headings

CASE;

IF NEW LckBx_Number;
// SUPPRESSED PRINT LckBx Number header format

ENDIF;

CASE;

IF NEW LckBx_Deposit_Date;
EXECUTE FUNCTION(RTV Lockbox Deposit AmtRT) TYPE(RTVOBJ) FILE(PDMACPP)          AC1507776;
PARAMETER(CUR.LckBx_Number);
PARAMETER(CUR.LckBx_Deposit_Date);
PARAMETER(CUR.LckBx_Deposit_Time);
PARAMETER(CUR.LckBx_Deposit_Amount);
PARAMETER(CUR.LckBx_Deposit_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CUR.Text USR = Condition name of CUR.LckBx Deposit Status
CUR.Text_USR = RTVCND(CUR.LckBx_Deposit_Status);

// PAR.LckBx Deposit Amount = CUR.LckBx Deposit Amount
PAR.LckBx_Deposit_Amount = CUR.LckBx_Deposit_Amount;

// Print LckBx Deposit Date header format
PRINT LckBx Deposit Date header format;

ENDIF;

// SUPPRESSED PRINT LckBx Deposit Time header format

CASE;

IF NEW LckBx_Batch_Number;
// Print LckBx Batch Number header format
PRINT LckBx Batch Number header format;

ENDIF;

//?USER: On print of detail format

//?Load Explanation.
CASE;

// IF CUR.LckBx Invoice Flag is No
IF CUR.LckBx_Invoice_Flag = 'N';

// CUR.Explaination 50 = CON.*** No invoice detail,
CUR.Explaination_50 = '*** No invoice detail,';

// CUR.Explaination 50 = CONCAT(CUR.Explaination 50,CON.check put on hold.,CND.*One
CUR.Explaination_50 = CUR.Explaination_50 + 'check put on hold.' (1);

//?Load Explanation.
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Explaination 50 = CON.*BLANK
CUR.Explaination_50 = *BLANK;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Print Inv for Chks PO
EXECUTE FUNCTION(PRT Print Inv for Chks PO) TYPE(PRTOBJ);
PARAMETER(CUR.LckBx_Number);
PARAMETER(CUR.LckBx_Deposit_Date);
PARAMETER(CUR.LckBx_Batch_Number);
PARAMETER(CUR.LckBx_Item_Number);
PARAMETER(CUR.LckBx_Check_Number);
PARAMETER(CUR.LckBx_Check_Amount);
PARAMETER(WRK.LckBx_Invoice_Amount_SUM);
PARAMETER(WRK.LckBx_Invoice_Amt_WO_SUM);
PARAMETER(WRK.LckBx_Invoice_Amt_CB_SUM);
PARAMETER(WRK.LckBx_Cnt_Mnl_Trans_SUM);
PARAMETER(CUR.LckBx_Hold_Flag);
PARAMETER(CUR.LckBx_Deposit_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

CASE;

// IF CUR.LckBx Hold Flag is Yes
IF CUR.LckBx_Hold_Flag = 'Y';

//?Calculate Held Amounts.
NXT.LckBx_Held_Payments_SUM = SUM(WRK.LckBx_Invoice_Amount_SUM);

NXT.LckBx_Held_WO_Amounts_SUM = SUM(WRK.LckBx_Invoice_Amt_WO_SUM);

NXT.LckBx_Held_CB_Amounts_SUM = SUM(WRK.LckBx_Invoice_Amt_CB_SUM);

NXT.LckBx_Held_Dollars_SUM = SUM(CUR.LckBx_Check_Amount);

// IF *OTHERWISE
IF *OTHERWISE;

//?Calculate Released Amounts.
NXT.LckBx_Rlsd_Payments_SUM = SUM(WRK.LckBx_Invoice_Amount_SUM);

NXT.LckBx_Rlsd_WO_Amounts_SUM = SUM(WRK.LckBx_Invoice_Amt_WO_SUM);

NXT.LckBx_Rlsd_CB_Amounts_SUM = SUM(WRK.LckBx_Invoice_Amt_CB_SUM);

NXT.LckBx_Rlsd_Dollars_SUM = SUM(CUR.LckBx_Check_Amount);

ENDIF;

//?Calculate Total Amounts.
NXT.LckBx_Invoice_Amount_SUM = SUM(WRK.LckBx_Invoice_Amount_SUM);

NXT.LckBx_Invoice_Amt_WO_SUM = SUM(WRK.LckBx_Invoice_Amt_WO_SUM);

NXT.LckBx_Invoice_Amt_CB_SUM = SUM(WRK.LckBx_Invoice_Amt_CB_SUM);

NXT.LckBx_Check_Total_SUM = SUM(CUR.LckBx_Check_Amount);

NXT.LckBx_Cnt_Mnl_Trans_SUM = SUM(WRK.LckBx_Cnt_Mnl_Trans_SUM);

//?USER: Print required level totals

// SUPPRESSED PRINT LckBx Batch Number totals format

// SUPPRESSED PRINT LckBx Deposit Time totals format

// SUPPRESSED PRINT LckBx Deposit Date totals format

// SUPPRESSED PRINT LckBx Number totals format

//?USER: On print of final totals format

//?Calculate Difference Amounts.
// Calculate Held Difference
CUR.LckBx_Held_Difference_USR = CUR.LckBx_Held_Dollars_SUM - ( (                                   +
CUR.LckBx_Held_Payments_SUM + CUR.LckBx_Held_WO_Amounts_SUM )                                     +
+ CUR.LckBx_Held_CB_Amounts_SUM );

// Calculate Rlsd Difference
CUR.LckBx_Rlsd_Difference_USR = CUR.LckBx_Rlsd_Dollars_SUM - ( (                                   +
CUR.LckBx_Rlsd_Payments_SUM + CUR.LckBx_Rlsd_WO_Amounts_SUM )                                     +
+ CUR.LckBx_Rlsd_CB_Amounts_SUM );

// Calculate Tot Difference
CUR.LckBx_Difference_USR = CUR.LckBx_Check_Total_SUM - ( ( CUR.LckBx_Invoice_Amount_SUM            +
+ CUR.LckBx_Invoice_Amt_WO_SUM ) + CUR.LckBx_Invoice_Amt_CB_SUM );

//?Load Explanation.
CASE;

// IF CUR.LckBx Check Total     SUM NE PAR.LckBx Deposit Amount
IF CUR.LckBx_Check_Total_SUM <> PAR.LckBx_Deposit_Amount;

// CUR.Explaination 50 = CON.*** Warning: check total
CUR.Explaination_50 = '*** Warning: check total';

// CUR.Explaination 50 = CONCAT(CUR.Explaination 50,CON.not equal to deposit amt,CN
CUR.Explaination_50 = CUR.Explaination_50 + 'not equal to deposit amt' (1);

//?Load Explanation.
// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Explaination 50 = CON.*BLANK
CUR.Explaination_50 = *BLANK;

ENDIF;

