      *****************  RPG PROGRAM HEADING  ************************
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP437
      * TITLE:       SPECIFY MOVE OF RECEIVING DATA TO EDITING FILES
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     04/28/97
      *
      * FUNCTION:    ALLOWS USER TO MOVE THE DATA THAT HAS BEEN UPLOADED FROM
      *              THE PC FEED SYSTEMS FROM THE RECEIVING FILE TO THE EDITING FILES.
      *
      *              THIS DESIGN APPROACH ALLOWS THE USER TO UPLOAD INTO THE RECEIVING FILE
      *              MULTIPLE TIMES BEFORE ACTUALLY EDITING AND INTERFACING THE DATA TO HPS.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 06/25/97  LEANNE FEDOR
      *           RECOMPILE ONLY. NEW FIELD 'COST THROUGH SYSTEM FLAG'
      *           ADDED TO FEED TICKET HEADER.
      *
      * 02/02/00  LeAnne Fedor
      *           Removed print options (hold, copies, outque, etc.) from screen
      *           and replaced them with a function key that calls the pop-up
      *           window of print options.
      *
      * 01/30/01  LeAnne Fedor
      *           Recompile only.  Production type was removed from feed files.
      *
      * 05/02/01  LeAnne Fedor
      *           Recompile only. Grossman ticket number expanded from
      *           6 to 7 positions.
      *
      * 05/07/01  LeAnne Fedor
      *           Recompile only. New processing flag field added to staging file.
      *
      * 01/07/02  LeAnne Fedor
      *           Recompile only.
      *
      * 10/26/09  LeAnne Ramsey
      *           David Weaver is rewriting the p.c. side.
      *           We no longer have/need the "staging" file.
      *
      * 05/20/10  LeAnne Ramsey
      *           We installed the October 2009 changes on 05/17/10.
      *           The hard-allocate of HSP235 in HP437CL (submitted from this program)
      *           was, sometimes, giving the user the "unable to allocate file" message AND
      *           the user with the file locked was the same user that submitted the job!
      *           We were baffled...since the ALCOBJ logic has been in place since 1997!
      *           With Lee Christina's help, I realized that whenever the user took F8-Submit
      *           AND stayed on the screen, program HP437 would have HSP235..and they would
      *           get the message. So, I added a conditional Open/Close on file HSP235.
      *
      * 10/30/19  Brad Baden   E15736 - Upload Toll Mill Receipts
      *           Recompiled only for new field is HSP235 file.
      *
      * 04/15/20  Danny Nguyen - P405 - Farm Number Increase
      *           Recompile only. Increased Bin Code (@@BNCD) in HSPREF file from 5A to 6A.
      *           File change on HSP235.
      *
      * 05/10/22 Eric L SDN736 Recompiled ticket nbr increase (TKNO & RTNO 7.0 TO 9.0)
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhpd437    cf   e             workstn infds(iofeed)
      *
      *
     Fhsp002    if   e           k disk
      *   Functions
      *
      *
     Fhsp235    if   e           k disk    usropn
      *  Uploaded feed tickets--receiving file
      *
      *
     Fhsp237    if   e           k disk
      * Uploaded feed tickets: Edit file--Header
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D pgm             s             10
     D msgfl           s             10
     D routne          s              6
     D rtncd           s              2    inz('00')
     D maxmsg          s              2  0  inz(20)
      *
      *
      * Parm fields
      *
     D xxjobq          s             10     inz('*JOBD     ')
     D xxnite          s              1     inz('N')
     D xxcopy          s              1  0
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Data areas
      *---------------------------------------------------------------
      *
      * Local data area.
      *
     Dlda             uds                  dtaara(*lda)
     D  ldoutu               401    410
     D  ldhold               411    411
     D  ldcopy               412    412  0
     D  ldoutq               413    422
      *
      *---------------------------------------------------------------
      * Definition for External Data Area 'DAGROS'
      *---------------------------------------------------------------
     D                 ds
     D  dagros                 1      2
     D  damvfl                 1      1
     D  dainfl                 2      2
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * Mainline
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      *  Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      * Write screen 1 to CRT.
      *
     C                   write     hp437k1
     C                   write     hp437ec
     C                   exfmt     hp437r1
      *
      * Clear messages
     C                   exsr      $clmsg
      *
      * Get user's input and set routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in17 = *on                                  F17-print options
     C                   eval      routne = scrn1
     C                   call      'HP451'
     C                   parm                    sdpgm
     C     ldcopy        parm      ldcopy        xxcopy
     C                   parm                    ldhold
     C                   parm                    ldoutq
     C                   parm                    xxnite
     C                   parm                    xxjobq
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                     API
     C                   eval      routne = scrn1
     C                   other
      *
     C                   exsr      $edit1
     C                   eval      routne = scrn1
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit screen 1 input fields
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
     C     *dtaara       define                  dagros
     C                   in        dagros
      *
      * Validate that there is no 'MOVE' of Receiving Data to Editing Files
      * in progress.
     C                   if        damvfl <> *blank and error < maxmsg
     C                   add       1             error
     C                   movel     'HS00835'     mgid(e)
     C                   endif
      *
      * Validate that an interface has not already been submitted.
      *
     C                   if        dainfl <> *blank and error < maxmsg
     C                   add       1             error
     C                   movel     'HS00804'     mgid(e)
     C                   endif
      *
      * Validate that no data exists in the Feed Ticket Editing Files--Header.
      *
     C     *loval        setll     hsp237
     C                   read      hsp237                                 92
     C                   if        *in92 = *off and error < maxmsg
     C                   add       1             error
     C                   movel     'HS00802'     mgid(e)
     C                   endif
      *
      * If there are no errors so far, validate that you have data in the
      * Receiving file
      *
     C                   if        error = 0                                    If Ok
     C                   open      hsp235
     C     *loval        setll     hsp235
     C                   read      hsp235                                 92
     C                   if        *in92 = *on and error < maxmsg
     C                   add       1             error
     C                   movel     'HS00799'     mgid(e)
     C                   endif
     C                   close     hsp235
     C                   endif                                                  If ok
      *
      * This function cannot be run in the night job queue. Issue message if
      * user has elected to run this function at night.
      *
     C                   if        xxnite = yes and error < maxmsg
     C                   add       1             error
     C                   movel     'HS09133'     mgid(e)
     C                   endif
      *
      * If there are no errors, execute the subroutine to submit the
      * user request.
      *
     C                   if        error = 0 and *in08 = *on
     C                   exsr      $proc1
     C                   endif
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Process user's request
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
      * Set the flag indicating the Move has been submitted.
      *
     C     *lock         in        dagros
     C                   movel     yes           damvfl
     C                   out       dagros
      *
     C                   out       lda
      *
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     xxjobq        cmd(51)
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Set on LR and end job
      *----------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Initialization
      *---------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *    None
      *
      * Initialize LDA fields
      *
     C                   move      *blank        ldhold
     C                   z-add     0             ldcopy
     C                   movel     ldoutu        ldoutq
      *
      *
      * Get this functions' number of copies, etc.
      *
     C     sdpgm         chain     hsp002                             92
     C                   if        *in92 = *off
     C                   z-add     fncopy        ldcopy
     C                   movel     fnhold        ldhold
     C                   endif
      *
     C                   if        ldcopy = 0
     C                   z-add     1             ldcopy
     C                   endif
      *
     C                   if        ldhold = *blank
     C                   movel     no            ldhold
     C                   endif
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY NAMED 'CMD' USED IN QCMDEXC
      *****************************************************************
** QCMD TABLE
SBMJOB CMD(CALL PGM(HP437CL)) JOB(MOVERECVG) JOBQ(__________)
