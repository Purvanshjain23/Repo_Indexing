// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBXAXFR
// ?Date: 14.08.2025 Time: 03:49:39
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?** Process Loads from TMS Load uploaded file
EXECUTE FUNCTION(Rtv Bld Lds fr TMS Upl RT) TYPE(RTVOBJ) FILE(PBCRCPP)          AC2123025;
{
 //?USER: Process Data record

 //?Create LH/LD/Upd OH for:  Domestic&Export Pickups from a Warehouse
 //?Create Intl Legs for:  Everything not pickuped from a Warehouse
 MOVE *ALL (To: PAR From: CON);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 // PAR.TMS Process Status = CND.Unprocessed
 PAR.TMS_Process_Status = 0;

 // PAR.Load ID = DB1.TMS Load ID
 PAR.Load_ID = DB1.TMS_Load_ID;

 // PAR.TMS Load Status = DB1.TMS Load Status
 PAR.TMS_Load_Status = DB1.TMS_Load_Status;

 // PAR.Event Code SavUsr = CND.02 Load Planned
 PAR.Event_Code_SavUsr = '02';

 //?unlock is req if this is Yes
 // PAR.Status Flag 1  Y/N = CND.No
 PAR.Status_Flag_1_Y_N = 'N';

 //?unlock not req if this is Yes
 // PAR.Status Flag 2  Y/N = CND.No
 PAR.Status_Flag_2_Y_N = 'N';

 // LCL.TMS Late Reason Code = CON.*BLANK
 LCL.TMS_Late_Reason_Code = *BLANK;

 // LCL.LH On-Time Reason Code = CND.Blank
 LCL.LH_On_Time_Reason_Code = *BLANK;

 //?R17040 DN 03/01/21-Initialize Check 856 Ready Flag.
 // LCL.Check 856 Ready Y/N USR = CND.No
 LCL.Check_856_Ready_Y_N_USR = 'N';

 //?Do not update the carrier if status is TENDER REJ  RMC 3/24/2021
 // LCL.TMS Carrier SCAC = DB1.TMS Carrier SCAC
 LCL.TMS_Carrier_SCAC = DB1.TMS_Carrier_SCAC;

 //?06/23/21 DN W80459-Added Condition 'TENDER EXP'.
 CASE;

 // IF DB1.TMS Load Status is Tender Reject
 IF DB1.TMS_Load_Status = 'TENDER REJ';

 // OR DB1.TMS Load Status is TENDER EXP
 OR DB1.TMS_Load_Status = 'TENDER EXP';

 // LCL.TMS Carrier SCAC = CON.*BLANK
 LCL.TMS_Carrier_SCAC = *BLANK;

 ENDIF;

 //?Validate
 DO;

 CASE;

 // IF DB1.TMS Load Status is Cancelled
 IF DB1.TMS_Load_Status = 'CANCELLED';

 //?dont validate for tms load events/shipments for a cancel. they may not be
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?R17040 DN 03/01/21-Set 856 Ready Flag to Yes.
 CASE;

 // IF DB1.TMS Carrier Ref PRO/Inv is Entered
 IF DB1.TMS_Carrier_Ref_PRO_Inv <> *BLANK;

 // LCL.Check 856 Ready Y/N USR = CND.Yes
 LCL.Check_856_Ready_Y_N_USR = 'Y';

 ENDIF;

 //?Pickup exists from a Warehouse
 EXECUTE FUNCTION(Val Pickup/Drop Exist RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2123080;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER('PICKUP');
 PARAMETER('WAREHOUSE');
 {
  //?USER: Initialize routine

  // PGM.*Return code = CND.*No value selected
  PGM.*Return_code = 'Y2U0016';

  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  CASE;

  // IF DB1.TMS Event Type EQ PAR.TMS Event Type
  IF DB1.TMS_Event_Type = PAR.TMS_Event_Type;

  CASE;

  // IF DB1.TMS Address Type EQ PAR.TMS Address Type
  IF DB1.TMS_Address_Type = PAR.TMS_Address_Type;

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF PGM.*Return code is *No value selected
 IF PGM.*Return_code = 'Y2U0016';

 //?its an extra leg if a pickup doesnt exist from a warehouse
 //?   -- create Intl Legs file for these
 // PAR.TMS Extra Leg Load Sts = CND.Extra leg
 PAR.TMS_Extra_Leg_Load_Sts = 'E';

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // PAR.TMS Extra Leg Load Sts = CND.Domestic
 PAR.TMS_Extra_Leg_Load_Sts = 'D';

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // PAR.TMS Error Reason = CND.Pickup Event not found
 PAR.TMS_Error_Reason = 'PICKUP';

 // PAR.TMS Process Status = CND.Error
 PAR.TMS_Process_Status = 2;

 ENDIF;

 ENDIF;

 //?RMC 1/23/20 output on time reason and flag too
 EXECUTE FUNCTION(VAL Load Exists - TMS  RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2123116;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.Trailer_Id);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(PAR.On_Time_Y_N);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.Load_Shag_Flag);
 PARAMETER(PAR.Load_Wash_Flag);
 PARAMETER(PAR.Multi_Company_Load);
 PARAMETER(PAR.LH_On_Time_Reason_Code);
 PARAMETER(PAR.LPT_Load_Plan_Start_Dt);
 PARAMETER(PAR.LPT_Load_Plan_Start_Tm);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Processing if Data record not found

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  QUIT;

 }

 //?Validate Load
 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 CASE;

 // IF PAR.TMS Load Status is Cancelled
 IF PAR.TMS_Load_Status = 'CANCELLED';

 //?CANCELLED Load validations
 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 // PAR.TMS Error Reason = CND.Load Shipped/Invoiced
 PAR.TMS_Error_Reason = 'LDSHIN';

 // PAR.TMS Process Status = CND.Error
 PAR.TMS_Process_Status = 2;

 //?CANCELLED Load validations
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Chk Ord Picked    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2124582;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Status_Flag_10_Y_N);
 {
  //?USER: Initialize routine

  // PAR.Status - Y or N = CND.no
  PAR.Status_Y_or_N = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.Event Code is Picked Thru History
  IF DB1.Event_Code >= '03';
  AND DB1.Event_Code <= '07';

  // PAR.Status - Y or N = CND.yes
  PAR.Status_Y_or_N = 'Y';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF LCL.Status Flag 10 Y/N is Yes
 IF LCL.Status_Flag_10_Y_N = 'Y';

 // PAR.TMS Error Reason = CND.Order Event is >=03
 PAR.TMS_Error_Reason = 'ORDEVT';

 // PAR.TMS Process Status = CND.Error
 PAR.TMS_Process_Status = 2;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Add/Change/Delete USR = CND.Delete
 PAR.Add_Change_Delete_USR = 'D';

 //?Unlock,remove load id from orders, delete load,change log
 ENDIF;

 ENDIF;

 // IF PAR.TMS Load Status is Delivered
 IF PAR.TMS_Load_Status = 'DELIVERED';

 //?07/24/18 DN S13418-Removed 'TONU' Processing.
 // PAR.Add/Change/Delete USR = CND.Change
 PAR.Add_Change_Delete_USR = 'C';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Add/Change/Delete USR = CND.Change
 PAR.Add_Change_Delete_USR = 'C';

 ENDIF;

 //?Validate Load
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Add/Change/Delete USR = CND.Add
 PAR.Add_Change_Delete_USR = 'A';

 ENDIF;

 CASE;

 // IF LCL.Record Found USR is Record Not Found
 IF LCL.Record_Found_USR = 'N';

 // AND PAR.TMS Load Status is Cancelled
 AND PAR.TMS_Load_Status = 'CANCELLED';

 // AND PAR.TMS Process Status is Unprocessed
 AND PAR.TMS_Process_Status = 0;

 // PAR.TMS Error Reason = CND.Load not found
 PAR.TMS_Error_Reason = 'LOADNF';

 // PAR.TMS Process Status = CND.Error
 PAR.TMS_Process_Status = 2;

 ENDIF;

 //?Order Numbers
 CASE;

 // IF DB1.TMS Load Status is Cancelled
 IF DB1.TMS_Load_Status = 'CANCELLED';

 //?dont validate for tms load events/shipments for a cancel. they may not be
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?02/26/21 DN R17040-Added 'Check 856 Ready Y/N USR' Parm.
 EXECUTE FUNCTION(Rtv Chk for Order Val RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2128498;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Add_Change_Delete_USR);
 PARAMETER(PAR.Export_Status_Dft);
 PARAMETER(PAR.Event_Code_SavUsr);
 PARAMETER(PGM.*Return_code);
 PARAMETER(LCL.Check_856_Ready_Y_N_USR);
 {
  //?USER: Initialize routine

  // PAR.Export Status Dft = CND.no
  PAR.Export_Status_Dft = 'N';

  //?USER: Process Data record

  //?R17040 DN 03/01/21-Set 856 Ready Flag to Yes.
  CASE;

  // IF DB1.TMS Cust Assigned Appt # is Entered
  IF DB1.TMS_Cust_Assigned_Appt_# <> *BLANK;

  // PAR.Check 856 Ready Y/N USR = CND.Yes
  PAR.Check_856_Ready_Y_N_USR = 'Y';

  ENDIF;

  CASE;

  // IF DB1.TMS Event Type is Drop
  IF DB1.TMS_Event_Type = 'DROP';

  EXECUTE FUNCTION(Val Order Nos         RT) TYPE(RTVOBJ) FILE(PBCUCPP)           AC2123091;
  PARAMETER(DB1.TMS_Load_ID);
  PARAMETER(DB1.TMS_Extract_Date);
  PARAMETER(DB1.TMS_Extract_Time);
  PARAMETER(DB1.TMS_Extract_File_Name);
  PARAMETER(DB1.TMS_Event_Sequence);
  PARAMETER(PGM.*Return_code);
  PARAMETER(PAR.Event_Code_SavUsr);
  PARAMETER(PAR.Add_Change_Delete_USR);
  PARAMETER(PAR.Export_Status_Dft);
  {
   //?USER: Initialize routine

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Processing if Data record not found

   // PAR.*Return code = CND.Error Found
   PAR.*Return_code = 'ERROR';

   //?USER: Process Data record

   EXECUTE FUNCTION(Val Order for TMS Shp RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2123092;
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(LCL.Header_Status);
   PARAMETER(LCL.Scheduled_Ship_Date);
   PARAMETER(LCL.Load_ID);
   PARAMETER(LCL.Export_Status);
   PARAMETER(LCL.Event_Code);
   PARAMETER(LCL.Block_Order_Flag);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   //?Order not found
   CASE;

   // IF PGM.*Return code is *Record does not exist
   IF PGM.*Return_code = 'Y2U0005';

   EXECUTE FUNCTION(Change TMS Load Event Shi) TYPE(CHGOBJ) FILE(PBCUCPP)          AC2123089;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
   PARAMETER(DB1.TMS_Record_Status);
   PARAMETER(2);
   PARAMETER('ORDNF');
   PARAMETER(DB1.TMS_Change_Date);
   PARAMETER(DB1.TMS_Change_time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
    PARAMETER(DB1.TMS_Record_Status);
    PARAMETER(DB1.TMS_Change_Date);
    PARAMETER(DB1.TMS_Change_time);
    {
     //?Execute internal function

     // PAR.TMS Change time = JOB.*Job time
     PAR.TMS_Change_time = JOB.*Job_time;

     // PAR.TMS Change Date = JOB.*Job date
     PAR.TMS_Change_Date = JOB.*Job_date;

    }

   }

   // PAR.*Return code = CND.Error Found
   PAR.*Return_code = 'ERROR';

   ENDIF;

   //?Header sts
   CASE;

   // IF LCL.Header Status is Cancelled
   IF LCL.Header_Status = 'X';

   EXECUTE FUNCTION(Change TMS Load Event Shi) TYPE(CHGOBJ) FILE(PBCUCPP)          AC2123089;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
   PARAMETER(DB1.TMS_Record_Status);
   PARAMETER(2);
   PARAMETER('ORDSTS');
   PARAMETER(DB1.TMS_Change_Date);
   PARAMETER(DB1.TMS_Change_time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
    PARAMETER(DB1.TMS_Record_Status);
    PARAMETER(DB1.TMS_Change_Date);
    PARAMETER(DB1.TMS_Change_time);
    {
     //?Execute internal function

     // PAR.TMS Change time = JOB.*Job time
     PAR.TMS_Change_time = JOB.*Job_time;

     // PAR.TMS Change Date = JOB.*Job date
     PAR.TMS_Change_Date = JOB.*Job_date;

    }

   }

   // PAR.*Return code = CND.Error Found
   PAR.*Return_code = 'ERROR';

   ENDIF;

   //?order is blocked
   CASE;

   // IF LCL.Block Order Flag is Block Order
   IF LCL.Block_Order_Flag = 'B';

   EXECUTE FUNCTION(Change TMS Load Event Shi) TYPE(CHGOBJ) FILE(PBCUCPP)          AC2123089;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
   PARAMETER(DB1.TMS_Record_Status);
   PARAMETER(2);
   PARAMETER('ORDBLK');
   PARAMETER(DB1.TMS_Change_Date);
   PARAMETER(DB1.TMS_Change_time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
    PARAMETER(DB1.TMS_Record_Status);
    PARAMETER(DB1.TMS_Change_Date);
    PARAMETER(DB1.TMS_Change_time);
    {
     //?Execute internal function

     // PAR.TMS Change time = JOB.*Job time
     PAR.TMS_Change_time = JOB.*Job_time;

     // PAR.TMS Change Date = JOB.*Job date
     PAR.TMS_Change_Date = JOB.*Job_date;

    }

   }

   // PAR.*Return code = CND.Error Found
   PAR.*Return_code = 'ERROR';

   ENDIF;

   //?Order on another load
   CASE;

   // IF LCL.Load ID is Entered
   IF ( LCL.Load_ID <> *ZERO;

   // AND LCL.Load ID NE PAR.TMS Load ID
   AND LCL.Load_ID <> PAR.TMS_Load_ID );

   //?check header status and event code
   CASE;

   // IF LCL.Header Status is Conf/Comp/Canc
   IF LCL.Header_Status = 'X'/'C'/'R';

   EXECUTE FUNCTION(Change TMS Load Event Shi) TYPE(CHGOBJ) FILE(PBCUCPP)          AC2123089;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
   PARAMETER(DB1.TMS_Record_Status);
   PARAMETER(2);
   PARAMETER('ORDSTS');
   PARAMETER(DB1.TMS_Change_Date);
   PARAMETER(DB1.TMS_Change_time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
    PARAMETER(DB1.TMS_Record_Status);
    PARAMETER(DB1.TMS_Change_Date);
    PARAMETER(DB1.TMS_Change_time);
    {
     //?Execute internal function

     // PAR.TMS Change time = JOB.*Job time
     PAR.TMS_Change_time = JOB.*Job_time;

     // PAR.TMS Change Date = JOB.*Job date
     PAR.TMS_Change_Date = JOB.*Job_date;

    }

   }

   // PAR.*Return code = CND.Error Found
   PAR.*Return_code = 'ERROR';

   //?check header status and event code
   // IF *OTHERWISE
   IF *OTHERWISE;

   //?07/23/18 DN S13418-Removed 'TONU' Processing.
   CASE;

   // IF LCL.Event Code is Picked Thru History
   IF LCL.Event_Code >= '03';
   AND LCL.Event_Code <= '07';

   EXECUTE FUNCTION(Change TMS Load Event Shi) TYPE(CHGOBJ) FILE(PBCUCPP)          AC2123089;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
   PARAMETER(DB1.TMS_Record_Status);
   PARAMETER(2);
   PARAMETER('ORDEVT');
   PARAMETER(DB1.TMS_Change_Date);
   PARAMETER(DB1.TMS_Change_time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
    PARAMETER(DB1.TMS_Record_Status);
    PARAMETER(DB1.TMS_Change_Date);
    PARAMETER(DB1.TMS_Change_time);
    {
     //?Execute internal function

     // PAR.TMS Change time = JOB.*Job time
     PAR.TMS_Change_time = JOB.*Job_time;

     // PAR.TMS Change Date = JOB.*Job date
     PAR.TMS_Change_Date = JOB.*Job_date;

    }

   }

   // PAR.*Return code = CND.Error Found
   PAR.*Return_code = 'ERROR';

   ENDIF;

   ENDIF;

   ENDIF;

   //?Order on another load, or no load for a Delete
   CASE;

   // IF LCL.Load ID NE PAR.TMS Load ID
   IF ( LCL.Load_ID <> PAR.TMS_Load_ID;

   // AND PAR.Add/Change/Delete USR is Delete
   AND PAR.Add_Change_Delete_USR = 'D' );

   EXECUTE FUNCTION(Change TMS Load Event Shi) TYPE(CHGOBJ) FILE(PBCUCPP)          AC2123089;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
   PARAMETER(DB1.TMS_Record_Status);
   PARAMETER(2);
   PARAMETER('ORDLOD');
   PARAMETER(DB1.TMS_Change_Date);
   PARAMETER(DB1.TMS_Change_time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
    PARAMETER(DB1.TMS_Record_Status);
    PARAMETER(DB1.TMS_Change_Date);
    PARAMETER(DB1.TMS_Change_time);
    {
     //?Execute internal function

     // PAR.TMS Change time = JOB.*Job time
     PAR.TMS_Change_time = JOB.*Job_time;

     // PAR.TMS Change Date = JOB.*Job date
     PAR.TMS_Change_Date = JOB.*Job_date;

    }

   }

   // PAR.*Return code = CND.Error Found
   PAR.*Return_code = 'ERROR';

   ENDIF;

   //?Order Event >= 03    not error but save event
   CASE;

   // IF LCL.Event Code is Picked Thru History
   IF LCL.Event_Code >= '03';
   AND LCL.Event_Code <= '07';

   //?error out if picked 8/16/16
   EXECUTE FUNCTION(Change TMS Load Event Shi) TYPE(CHGOBJ) FILE(PBCUCPP)          AC2123089;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
   PARAMETER(DB1.TMS_Record_Status);
   PARAMETER(2);
   PARAMETER('ORDEVT');
   PARAMETER(DB1.TMS_Change_Date);
   PARAMETER(DB1.TMS_Change_time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
    PARAMETER(DB1.TMS_Record_Status);
    PARAMETER(DB1.TMS_Change_Date);
    PARAMETER(DB1.TMS_Change_time);
    {
     //?Execute internal function

     // PAR.TMS Change time = JOB.*Job time
     PAR.TMS_Change_time = JOB.*Job_time;

     // PAR.TMS Change Date = JOB.*Job date
     PAR.TMS_Change_Date = JOB.*Job_date;

    }

   }

   // PAR.Event Code SavUsr = LCL.Event Code
   PAR.Event_Code_SavUsr = LCL.Event_Code;

   ENDIF;

   //?Save export sts if any order is Export
   CASE;

   // IF LCL.Export Status is yes
   IF LCL.Export_Status = 'Y';

   // PAR.Export Status Dft = CND.yes
   PAR.Export_Status_Dft = 'Y';

   ENDIF;

  }

  ENDIF;

 }

 CASE;

 // IF PGM.*Return code is Error Found
 IF PGM.*Return_code = 'ERROR';

 // AND PAR.TMS Process Status is Unprocessed
 AND PAR.TMS_Process_Status = 0;

 // PAR.TMS Error Reason = CND.Order Error
 PAR.TMS_Error_Reason = 'ORDERR';

 // PAR.TMS Process Status = CND.Error
 PAR.TMS_Process_Status = 2;

 ENDIF;

 //?S12231 RMC 12/20/17
 //?Cant remove order from load if it is shipped/invoiced
 EXECUTE FUNCTION(RTV TMS-Val Ordr cancl RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC2146557;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(PAR.TMS_Error_Reason);
 PARAMETER(PAR.TMS_Process_Status);
 {
  //?USER: Initialize routine

  // LCL.Status Flag 10 Y/N = CND.No
  LCL.Status_Flag_10_Y_N = 'N';

  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Chk for OrdSts-RmvRT) TYPE(RTVOBJ) FILE(PBCUCPP)           AC2146560;
  PARAMETER(PAR.TMS_Load_ID);
  PARAMETER(PAR.TMS_Extract_Date);
  PARAMETER(PAR.TMS_Extract_Time);
  PARAMETER(PAR.TMS_Extract_File_Name);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Status_Flag_10_Y_N);
  {
   //?USER: Processing if Data record not found

   // PAR.Status Flag 10 Y/N = CND.Yes
   PAR.Status_Flag_10_Y_N = 'Y';

  }

  CASE;

  // IF LCL.Status Flag 10 Y/N is Yes
  IF LCL.Status_Flag_10_Y_N = 'Y';

  EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(LCL.Header_Status);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Header Status is Confirmed & Complete
  IF LCL.Header_Status = 'C'/'R';

  // PAR.TMS Error Reason = CND.Order Event is >=03
  PAR.TMS_Error_Reason = 'ORDEVT';

  // PAR.TMS Process Status = CND.Error
  PAR.TMS_Process_Status = 2;

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?ERR:  Do not Select Record
 CASE;

 // IF PAR.TMS Process Status is Error
 IF PAR.TMS_Process_Status = 2;

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 ENDIF;

 ENDDO;

 //?Process for DOMESTIC and EXPORTS Picking up from a Warehouse
 CASE;

 // IF PAR.TMS Extra Leg Load Sts is Domestic
 IF PAR.TMS_Extra_Leg_Load_Sts = 'D';

 //?Process ADD
 DO;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND PAR.Add/Change/Delete USR is Add
 AND PAR.Add_Change_Delete_USR = 'A';

 // PAR.Export Status = CND.no
 PAR.Export_Status = 'N';

 //?Export
 CASE;

 // IF DB1.TMS Movement Type is Export
 IF DB1.TMS_Movement_Type = 'EXPORT';

 // OR PAR.Export Status Dft is yes
 OR PAR.Export_Status_Dft = 'Y';

 // PAR.Export Status = CND.yes
 PAR.Export_Status = 'Y';

 ENDIF;

 //?Shipping Method
 CASE;

 // IF DB1.TMS Payment Method is Collect
 IF DB1.TMS_Payment_Method = 'COLLECT';

 // PAR.Shipping Method = CND.Collect Truck
 PAR.Shipping_Method = 'CT';

 //?Shipping Method
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Shipping Method = CND.Prepaid Truck
 PAR.Shipping_Method = 'PT';

 ENDIF;

 //?Load type
 CASE;

 // IF DB1.TMS Shipment Type is Bulk
 IF DB1.TMS_Shipment_Type = 'BULK';

 // PAR.Load Type = CND.Bulk
 PAR.Load_Type = 'B';

 //?Load type
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Load Type = CND.Regular
 PAR.Load_Type = 'R';

 ENDIF;

 //?Load Status
 CASE;

 // IF PAR.TMS Load Status is Booked
 IF PAR.TMS_Load_Status = 'BOOKED';

 // OR PAR.TMS Load Status is Rated
 OR PAR.TMS_Load_Status = 'RATED';

 // OR PAR.TMS Load Status is In Transit
 OR PAR.TMS_Load_Status = 'IN TRANSIT';

 // OR DB1.TMS Load Status is Blank
 OR DB1.TMS_Load_Status = *BLANK;

 // OR DB1.TMS Load Status is Tendered
 OR DB1.TMS_Load_Status = 'TENDERED';

 // OR DB1.TMS Load Status is Pending
 OR DB1.TMS_Load_Status = 'PENDING';

 //?RMC 12.7.16 added pending
 // PAR.Load Status = CND.Unlock
 PAR.Load_Status = 'U';

 ENDIF;

 EXECUTE FUNCTION(Rtv 1st Order Co      RT) TYPE(RTVOBJ) FILE(PBCUCPP)           AC2123098;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(1);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Scheduled_Ship_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV for TMS for LH    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2123102;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.TMS_Order_ID);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 EXECUTE FUNCTION(Rtv 1st Pickup for LH RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2123103;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(1);
 PARAMETER(LCL.TMS_Planned_Date);
 PARAMETER(LCL.TMS_Location_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.TMS Event Type is Pickup
  IF DB1.TMS_Event_Type = 'PICKUP';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Tot Wt for LH     RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2123114;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(1);
 PARAMETER(PAR.Gross_Weight);
 PARAMETER(PAR.Total_Load_Order_Weight);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.TMS Event Type is Pickup
  IF DB1.TMS_Event_Type = 'PICKUP';

  // PAR.Gross Weight = PAR.Gross Weight + DB1.TMS Weight
  PAR.Gross_Weight = PAR.Gross_Weight + DB1.TMS_Weight;

  EXECUTE FUNCTION(Rtv for TMS Load      RT) TYPE(RTVOBJ) FILE(PBCUCPP)           AC2123100;
  PARAMETER(DB1.TMS_Load_ID);
  PARAMETER(DB1.TMS_Extract_Date);
  PARAMETER(DB1.TMS_Extract_Time);
  PARAMETER(DB1.TMS_Extract_File_Name);
  PARAMETER(DB1.TMS_Event_Sequence);
  PARAMETER(LCL.Order_Weight_Total);
  {
   //?USER: Initialize routine

   // PAR.Order Weight Total = CON.*ZERO
   PAR.Order_Weight_Total = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Order Weight TMS  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2123101;
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(LCL.Order_Weight_Total);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.Order Weight Total = PAR.Order Weight Total + LCL.Order Weight Total
   PAR.Order_Weight_Total = PAR.Order_Weight_Total + LCL.Order_Weight_Total;

  }

  // PAR.Total Load Order Weight = PAR.Total Load Order Weight + LCL.Order Weight Total
  PAR.Total_Load_Order_Weight = PAR.Total_Load_Order_Weight + LCL.Order_Weight_Total;

  ENDIF;

 }

 //?RMC 1/23/20 output late reason from 1st drop too, to upd LH
 EXECUTE FUNCTION(Rtv Drop Shp St f LH  RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2123115;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(1);
 PARAMETER(LCL.TMS_State_Province);
 PARAMETER(LCL.TMS_Late_Reason_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.TMS Event Type is Drop
  IF DB1.TMS_Event_Type = 'DROP';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Drop Count f/stps RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2123117;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(1);
 PARAMETER(PAR.Total_Stops);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?accum number of drops -- which equates to a stop
  CASE;

  // IF DB1.TMS Event Type is Drop
  IF DB1.TMS_Event_Type = 'DROP';

  // PAR.Total Stops = PAR.Total Stops + CON.1
  PAR.Total_Stops = PAR.Total_Stops + 1;

  ENDIF;

 }

 // PAR.Ship To State Code = LCL.TMS State Province
 PAR.Ship_To_State_Code = LCL.TMS_State_Province;

 // PAR.Ship From Warehouse = LCL.TMS Location Code
 PAR.Ship_From_Warehouse = LCL.TMS_Location_Code;

 EXECUTE FUNCTION(RTV Dft Load Seq,Loc   RT) TYPE(RTVOBJ) FILE(CAADREP)          AC2128936;
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(LCL.Warehouse_Location);
 PARAMETER(LCL.Default_Load_Sequence);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Default Load Sequence = Yes?
 CASE;

 // IF LCL.Default Load Sequence is yes
 IF LCL.Default_Load_Sequence = 'Y';

 // LCL.Schedule Sequence Number = CON.1
 LCL.Schedule_Sequence_Number = 1;

 //?Default Load Sequence = Yes?
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.Schedule Sequence Number = CON.*ZERO
 LCL.Schedule_Sequence_Number = 0;

 ENDIF;

 //?Create Carrier if not found
 // PAR.Carrier Code = CON.*BLANK
 PAR.Carrier_Code = *BLANK;

 CASE;

 // IF LCL.TMS Carrier SCAC is Entered
 IF LCL.TMS_Carrier_SCAC <> *BLANK;

 //?change to lcl
 EXECUTE FUNCTION(RTV Carr from TPM SCAC IF) TYPE(EXCINTFUN)                     AC2072103;
 PARAMETER(LCL.TMS_Carrier_SCAC);
 PARAMETER(PAR.Carrier_Code);
 {
  //?Execute internal function

  // PAR.Carrier Code Usr = CON.*BLANK
  PAR.Carrier_Code_Usr = *BLANK;

  EXECUTE FUNCTION(RTV Carr from TPM SCAC RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC2072096;
  PARAMETER(*BLANK);
  PARAMETER(PAR.SCAC);
  PARAMETER(PAR.Carrier_Code_Usr);
  {
   //?USER: Initialize routine

   // PAR.Carrier Code Usr = CND.not entered
   PAR.Carrier_Code_Usr = *BLANK;

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // LCL.SCAC = SUBSTRING(DB1.Name,CON.1,CON.4)
   LCL.SCAC = SUBSTRING(DB1.Name:1:4);

   CASE;

   // IF PAR.SCAC EQ LCL.SCAC
   IF PAR.SCAC = LCL.SCAC;

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?reactivate it
   EXECUTE FUNCTION(CHG OM Carrier         CH) TYPE(CHGOBJ) FILE(OMFFREP)          AC1183269;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Name);
   PARAMETER(DB1.Address_Line_1);
   PARAMETER(DB1.Address_Line_2);
   PARAMETER(DB1.Address_Line_3);
   PARAMETER(DB1.City);
   PARAMETER(DB1.Zip_Postal_Code);
   PARAMETER(DB1.Telephone_Number);
   PARAMETER(DB1.State_Code);
   PARAMETER(DB1.Carrier_Last_Used_Date);
   PARAMETER(DB1.Fax_Number);
   PARAMETER(DB1.Pallet_Balance);
   PARAMETER(DB1.Long_hook_balance);
   PARAMETER(DB1.Short_hook_balance);
   PARAMETER(DB1.Tub_Balance);
   PARAMETER(DB1.OM_Carrier_Status);
   PARAMETER(DB1.OM_Carrier_Comments_1);
   PARAMETER(DB1.OM_Carrier_Comments_2);
   PARAMETER(DB1.AP_Vendor_Number);
   PARAMETER(DB1.Home_Phone);
   PARAMETER(DB1.Other_Phone);
   PARAMETER(DB1.Flat_Rate);
   PARAMETER(DB1.Rate_Per_Pound);
   PARAMETER(DB1.Unused_Rate_Per_Stop);
   PARAMETER(DB1.Miscellaneous_Charges);
   PARAMETER(DB1.Unused_Carrier_Rating);
   PARAMETER(DB1.Unused_Mile_Range_1);
   PARAMETER(DB1.Unused_Mile_Range_2);
   PARAMETER(DB1.Unused_Mile_Range_3);
   PARAMETER(DB1.Unused_Mile_Range_4);
   PARAMETER(DB1.Unused_Mile_Range_5);
   PARAMETER(DB1.Unused_Mile_Range_6);
   PARAMETER(DB1.Unused_Mile_Rate_1);
   PARAMETER(DB1.Unused_Mile_Rate_2);
   PARAMETER(DB1.Unused_Mile_Rate_3);
   PARAMETER(DB1.Unused_Mile_Rate_4);
   PARAMETER(DB1.Unused_Mile_Rate_5);
   PARAMETER(DB1.Unused_Mile_Rate_6);
   PARAMETER(DB1.Unused_Weight_Range_1);
   PARAMETER(DB1.Unused_Weight_Range_2);
   PARAMETER(DB1.Unused_Weight_Range_3);
   PARAMETER(DB1.Unused_Weight_Range_4);
   PARAMETER(DB1.Unused_Weight_Range_5);
   PARAMETER(DB1.Unused_Weight_Range_6);
   PARAMETER(DB1.Unused_Weight_Rate_1);
   PARAMETER(DB1.Unused_Weight_Rate_2);
   PARAMETER(DB1.Unused_Weight_Rate_3);
   PARAMETER(DB1.Unused_Weight_Rate_4);
   PARAMETER(DB1.Unused_Weight_Rate_5);
   PARAMETER(DB1.Unused_Weight_Rate_6);
   PARAMETER(DB1.Contact_Number);
   PARAMETER(DB1.Certificate_of_Insurance);
   PARAMETER(DB1.Carrier_Unused_Fld_1);
   PARAMETER(DB1.Carrier_Unused_Fld_2);
   PARAMETER(DB1.Carrier_DOT_Number);
   PARAMETER(DB1.Carrier_Unused_State);
   PARAMETER(DB1.Carrier_Unused_Fld_4);
   PARAMETER(DB1.Carrier_Unused_Fld_5);
   PARAMETER(DB1.Carrier_Fed_ID_Number);
   PARAMETER(DB1.Amount_of_Cargo);
   PARAMETER(DB1.Amount_of_Liability);
   PARAMETER(DB1.Date_of_Expiration);
   PARAMETER(DB1.SSI_Download_Flag);
   PARAMETER(DB1.unused_status_2);
   PARAMETER(DB1.unused_status_3);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER('A');
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   // PAR.Carrier Code Usr = DB1.Carrier Code
   PAR.Carrier_Code_Usr = DB1.Carrier_Code;

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   QUIT;

   ENDIF;

  }

  //?Create Carrier if not found   6.30.16 E4119
  //?Create Carrier if not in master file
  CASE;

  // IF PAR.Carrier Code Usr is not entered
  IF PAR.Carrier_Code_Usr = *BLANK;

  // LCL.Carrier Code = PAR.SCAC
  LCL.Carrier_Code = PAR.SCAC;

  EXECUTE FUNCTION(Val Carrier NF        RT) TYPE(RTVOBJ) FILE(OMFFREP)           AC2123958;
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  //?Make new carrier code
  CASE;

  // IF PGM.*Return code is *Record already exists
  IF PGM.*Return_code = 'Y2U0003';

  // LCL.Text 1 Length USR = CON.0
  LCL.Text_1_Length_USR = 0;

  // LCL.Return Code Usr = CND.*Record Already Exists
  LCL.Return_Code_Usr = 'Y2U0003';

  // DOW LCL.Return Code Usr is *Record Already Exists
  DOW LCL.Return_Code_Usr = 'Y2U0003';

  // LCL.Text 2 = LCL.Carrier Code
  LCL.Text_2 = LCL.Carrier_Code;

  // LCL.Number 1.0 USR = LCL.Number 1.0 USR + CON.1
  LCL.Number_1_0_USR = LCL.Number_1_0_USR + 1;

  // LCL.Text 1 Length USR = LCL.Number 1.0 USR
  LCL.Text_1_Length_USR = LCL.Number_1_0_USR;

  // LCL.Carrier Code = CONCAT(LCL.Text 2,LCL.Text 1 Length USR,CND.*None)
  LCL.Carrier_Code = LCL.Text_2 + LCL.Text_1_Length_USR (*ZERO);

  EXECUTE FUNCTION(Val Carrier NF        RT) TYPE(RTVOBJ) FILE(OMFFREP)           AC2123958;
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  // LCL.Return Code Usr = PGM.*Return code
  LCL.Return_Code_Usr = PGM.*Return_code;

  ENDDO;

  ENDIF;

  // LCL.Name = PAR.SCAC
  LCL.Name = PAR.SCAC;

  EXECUTE FUNCTION(CRT OM Carrier         CR) TYPE(CRTOBJ) FILE(OMFFREP)          AC1183268;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Name);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.SSI_Download_Flag);
  PARAMETER(LCL.unused_status_2);
  PARAMETER(LCL.unused_status_3);
  PARAMETER(LCL.EDI_Status_1);
  PARAMETER(LCL.EDI_Status_2);
  PARAMETER(LCL.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   // Call program Rtv Init Car w/TierStp XF.
   CALL PROGRAM(Rtv Init Car w/TierStp XF) ('PMCUXFR');
   PARAMETER(DB1.Carrier_Code);

  }

  // PAR.Carrier Code Usr = LCL.Carrier Code
  PAR.Carrier_Code_Usr = LCL.Carrier_Code;

  ENDIF;

 }

 ENDIF;

 //?Services:  Shag Wash  10.07.2016 do what it did on EdtCstSvcDspter screen
 DO;

 //?** 10/07/2016 RMC R7362 Do what it did in oms: Default shag flag to "Y"
 // PAR.Load Wash Flag = CND.no
 PAR.Load_Wash_Flag = 'N';

 // PAR.Load Shag Flag = CND.no
 PAR.Load_Shag_Flag = 'N';

 //?Default Shag & Wash to YES for Internal, Load type Regular
 CASE;

 // IF LCL.Warehouse Location is Internal (Plant)
 IF LCL.Warehouse_Location = 'I';

 // AND PAR.Load Type is Regular
 AND PAR.Load_Type = 'R';

 // PAR.Load Shag Flag = CND.yes
 PAR.Load_Shag_Flag = 'Y';

 // PAR.Load Wash Flag = CND.yes
 PAR.Load_Wash_Flag = 'Y';

 ENDIF;

 ENDDO;

 EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
 PARAMETER('T');
 PARAMETER(LCL.Maximum_pounds);
 PARAMETER(LCL.Minimum_pounds);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If load weight > maximum pounds for truck, LTL for load is N else Y
 CASE;

 // IF PAR.Gross Weight GE LCL.Maximum pounds
 IF PAR.Gross_Weight >= LCL.Maximum_pounds;

 // LCL.LTL Flag = CND.No
 LCL.LTL_Flag = 'N';

 //?If load weight > maximum pounds for truck, LTL for load is N else Y
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.LTL Flag = CND.Yes
 LCL.LTL_Flag = 'Y';

 ENDIF;

 // Call program CVT *YYMD to *CYMD    XF.
 CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
 PARAMETER(LCL.Date_USR);
 PARAMETER(DB1.TMS_Deadline_Depart_Date);

 // PAR.Deadline Departure Date = LCL.Date                  USR
 PAR.Deadline_Departure_Date = LCL.Date_USR;

 // LCL.Deadline Departure Time = DB1.TMS Deadline Depart Time * CON.100 *
 LCL.Deadline_Departure_Time = DB1.TMS_Deadline_Depart_Time * 100;

 //?RMC 1/23/20 Added to init these to blank
 // LCL.LH On-Time Reason Code = CND.Blank
 LCL.LH_On_Time_Reason_Code = *BLANK;

 // LCL.On Time - (Y/N) = CND.blank
 LCL.On_Time_Y_N = *BLANK;

 //?RMC 1/23/20 added this chg to update LH with 1st late reason
 CASE;

 // IF LCL.TMS Late Reason Code is Entered
 IF LCL.TMS_Late_Reason_Code > *BLANK;

 CASE;

 // IF LCL.TMS Late Reason Code is NS
 IF LCL.TMS_Late_Reason_Code = 'NS';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.LH On-Time Reason Code = LCL.TMS Late Reason Code
 LCL.LH_On_Time_Reason_Code = LCL.TMS_Late_Reason_Code;

 // LCL.On Time - (Y/N) = CND.no
 LCL.On_Time_Y_N = 'N';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CRT Load Header TMS    CR) TYPE(CRTOBJ) FILE(OMFJCPP)          AC2123099;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(LCL.LTL_Flag);
 PARAMETER(PAR.Load_Status);
 PARAMETER(DB1.TMS_Temperature);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Total_Load_Order_Weight);
 PARAMETER(*ZERO);
 PARAMETER('M');
 PARAMETER(PAR.Total_Stops);
 PARAMETER(DB1.TMS_Trailer_Number);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER('T');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('O');
 PARAMETER(PAR.Load_Type);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Schedule_Sequence_Number);
 PARAMETER(PAR.Product_Temperature);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(DB1.TMS_Carrier_Distance);
 PARAMETER(*BLANK);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Gross_Weight);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Export_Status);
 PARAMETER(*ZERO);
 PARAMETER(LCL.On_Time_Y_N);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TMS_Booking_Number);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TMS_Container_Number);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.LH_Unused_Sts);
 PARAMETER(PAR.LH_Carrier_Payment_Sts);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER('A');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(LCL.Deadline_Departure_Time);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Load_Shag_Flag);
 PARAMETER(PAR.Load_Wash_Flag);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.Partial_Load);
 PARAMETER(LCL.Load_Confirmation_Fax_Sts);
 PARAMETER('N');
 PARAMETER(LCL.Late_Delivery_Email_Flag);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(LCL.Late_Billing_Email_Flag);
 PARAMETER(DB1.TMS_Temperature_UOM);
 PARAMETER(*BLANK);
 PARAMETER('N');
 PARAMETER(*BLANK);
 PARAMETER(LCL.Schedule_Pos_Load_Grade);
 PARAMETER(*BLANK);
 PARAMETER('Y');
 PARAMETER(LCL.LH_Unused_Sts_5);
 PARAMETER(LCL.Load_U_M);
 PARAMETER(LCL.TPM_Shipment_Status);
 PARAMETER(LCL.LH_Unused_Sts_8);
 PARAMETER(LCL.LH_On_Time_Reason_Code);
 PARAMETER(LCL.LH_Held_Over_Reason);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.TPM_Planned_Ship_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.EDI_Status_1);
 PARAMETER(LCL.EDI_Status_2);
 PARAMETER(LCL.EDI_Status_3);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?***** Change Log and Comments
  DO;

  //?*****
  //?*****
  ENDDO;

 }

 //?For each Pickup from a Warehouse:  Update load detail, order header
 //?R17040 DN 03/01/21-Passed in the TMS Carrier Ref PRO/Inv.
 EXECUTE FUNCTION(Rtv Crt Load Dtl      RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2123118;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(*ZERO);
 PARAMETER(LCL.TMS_Carrier_SCAC);
 PARAMETER(DB1.TMS_Trailer_Number);
 PARAMETER(DB1.TMS_Container_Number);
 PARAMETER(DB1.TMS_Move_Type);
 PARAMETER(DB1.TMS_Vessel_Name);
 PARAMETER(DB1.TMS_Voyage_Number);
 PARAMETER(DB1.TMS_Booking_Number);
 PARAMETER(DB1.TMS_OTR_Destination_Name);
 PARAMETER(DB1.TMS_OTR_Destination_Addr1);
 PARAMETER(DB1.TMS_OTR_Destination_Addr2);
 PARAMETER(DB1.TMS_OTR_Destination_City);
 PARAMETER(DB1.TMS_OTR_Destination_State);
 PARAMETER(DB1.TMS_OTR_Destination_Zip);
 PARAMETER(DB1.TMS_OTR_Destination_Cntry);
 PARAMETER(DB1.TMS_Vessel_ETD_Date);
 PARAMETER(DB1.TMS_Vessel_ETA_Date);
 PARAMETER(DB1.TMS_Carrier_Ref_PRO_Inv);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(DB1.TMS_Deadline_Depart_Time);
 PARAMETER(PAR.Add_Change_Delete_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.TMS Event Type is Pickup
  IF DB1.TMS_Event_Type = 'PICKUP';

  CASE;

  // IF DB1.TMS Address Type is Warehouse
  IF DB1.TMS_Address_Type = 'WAREHOUSE';

  EXECUTE FUNCTION(Change TMS Load Event) TYPE(CHGOBJ) FILE(PBCSCPP)              AC2123078;
  PARAMETER(DB1.TMS_Load_ID);
  PARAMETER(DB1.TMS_Extract_Date);
  PARAMETER(DB1.TMS_Extract_Time);
  PARAMETER(DB1.TMS_Extract_File_Name);
  PARAMETER(DB1.TMS_Event_Sequence);
  PARAMETER(DB1.TMS_Event_Type);
  PARAMETER(DB1.TMS_Earliest_Date);
  PARAMETER(DB1.TMS_Earliest_Time);
  PARAMETER(DB1.TMS_Latest_Date);
  PARAMETER(DB1.TMS_Latest_Time);
  PARAMETER(DB1.TMS_Planned_Date);
  PARAMETER(DB1.TMS_Planned_Time);
  PARAMETER(DB1.TMS_Actual_Date);
  PARAMETER(DB1.TMS_Actual_Time);
  PARAMETER(DB1.TMS_Address_Type);
  PARAMETER(DB1.TMS_Location_Code);
  PARAMETER(DB1.TMS_Address_Name);
  PARAMETER(DB1.TMS_Address_Line_1);
  PARAMETER(DB1.TMS_Address_Line_2);
  PARAMETER(DB1.TMS_City);
  PARAMETER(DB1.TMS_State_Province);
  PARAMETER(DB1.TMS_Postal_Code);
  PARAMETER(DB1.TMS_Country_Code);
  PARAMETER(DB1.TMS_Weight);
  PARAMETER(DB1.TMS_Weight_UOM);
  PARAMETER(DB1.TMS_Appointment_Date);
  PARAMETER(DB1.TMS_Appointment_Time);
  PARAMETER(DB1.TMS_Actual_Car_Arrival_Dt);
  PARAMETER(DB1.TMS_Actual_Car_Arrival_Tm);
  PARAMETER(DB1.TMS_Late_Reason_Code);
  PARAMETER(DB1.TMS_Cust_Assigned_Appt_#);
  PARAMETER(DB1.TMS_Record_Status);
  PARAMETER(1);
  PARAMETER(*BLANK);
  PARAMETER(DB1.TMS_Change_Date);
  PARAMETER(DB1.TMS_Change_time);
  //?R17040 DN 03/01/21-Passed in TMS Carrier Ref PRO/Inv.
  EXECUTE FUNCTION(Rtv Drops to Crt LD   RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2124470;
  PARAMETER(DB1.TMS_Load_ID);
  PARAMETER(DB1.TMS_Extract_Date);
  PARAMETER(DB1.TMS_Extract_Time);
  PARAMETER(DB1.TMS_Extract_File_Name);
  PARAMETER(PAR.TMS_Carrier_SCAC);
  PARAMETER(PAR.TMS_Trailer_Number);
  PARAMETER(PAR.TMS_Container_Number);
  PARAMETER(PAR.TMS_Move_Type);
  PARAMETER(PAR.TMS_Vessel_Name);
  PARAMETER(PAR.TMS_Voyage_Number);
  PARAMETER(PAR.TMS_Booking_Number);
  PARAMETER(PAR.TMS_OTR_Destination_Name);
  PARAMETER(PAR.TMS_OTR_Destination_Addr1);
  PARAMETER(PAR.TMS_OTR_Destination_Addr2);
  PARAMETER(PAR.TMS_OTR_Destination_City);
  PARAMETER(PAR.TMS_OTR_Destination_State);
  PARAMETER(PAR.TMS_OTR_Destination_Zip);
  PARAMETER(PAR.TMS_OTR_Destination_Cntry);
  PARAMETER(PAR.TMS_Vessel_ETD_Date);
  PARAMETER(PAR.TMS_Vessel_ETA_Date);
  PARAMETER(PAR.TMS_Carrier_Ref_PRO_Inv);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.TMS_Deadline_Depart_Time);
  PARAMETER(PAR.Add_Change_Delete_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?R17040 DN 03/01/21-Passed in TMS Carrier Ref PRO/Inv & TMS Cust Asgn Appt#
   EXECUTE FUNCTION(Rtv Crt Load Dtl      RT) TYPE(RTVOBJ) FILE(PBCUCPP)           AC2123119;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(PAR.Stop_Drop_Sequence_Number);
   PARAMETER(PAR.Carrier_Code);
   PARAMETER(PAR.Deadline_Departure_Date);
   PARAMETER(PAR.TMS_Deadline_Depart_Time);
   PARAMETER(PAR.Add_Change_Delete_USR);
   PARAMETER(PAR.TMS_Carrier_SCAC);
   PARAMETER(PAR.TMS_Trailer_Number);
   PARAMETER(PAR.TMS_Container_Number);
   PARAMETER(PAR.TMS_Vessel_Name);
   PARAMETER(PAR.TMS_Voyage_Number);
   PARAMETER(PAR.TMS_Booking_Number);
   PARAMETER(PAR.TMS_OTR_Destination_Name);
   PARAMETER(PAR.TMS_OTR_Destination_Addr1);
   PARAMETER(PAR.TMS_OTR_Destination_Addr2);
   PARAMETER(PAR.TMS_OTR_Destination_City);
   PARAMETER(PAR.TMS_OTR_Destination_State);
   PARAMETER(PAR.TMS_OTR_Destination_Zip);
   PARAMETER(PAR.TMS_OTR_Destination_Cntry);
   PARAMETER(PAR.TMS_Vessel_ETD_Date);
   PARAMETER(PAR.TMS_Vessel_ETA_Date);
   PARAMETER(PAR.TMS_Carrier_Ref_PRO_Inv);
   PARAMETER(DB1.TMS_Appointment_Date);
   PARAMETER(DB1.TMS_Appointment_Time);
   PARAMETER(DB1.TMS_Actual_Car_Arrival_Dt);
   PARAMETER(DB1.TMS_Actual_Car_Arrival_Tm);
   PARAMETER(DB1.TMS_Late_Reason_Code);
   PARAMETER(DB1.TMS_Cust_Assigned_Appt_#);
   {
    //?USER: Process Data record

    //?Comments and changes
    DO;

    //?** 03/06/2017 LJB E009492 Add Orig appt date/time to the rtv crt routine
    //?*****
    ENDDO;

    EXECUTE FUNCTION(Rtv Co and Load       RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2125070;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(LCL.Load_ID_USR);
    PARAMETER(LCL.Event_Code_Last);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Process for Orig load on order if different
    CASE;

    // IF LCL.Load ID USR is entered
    IF LCL.Load_ID_USR <> *ZERO;

    // AND LCL.Load ID USR NE DB1.TMS Load ID
    AND LCL.Load_ID_USR <> DB1.TMS_Load_ID;

    EXECUTE FUNCTION(RTV DLT ORd f/TMS Chg  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC2125071;
    PARAMETER(LCL.Load_ID_USR);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(PAR.Carrier_Code);
    {
     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
     PARAMETER(DB1.Load_ID);
     PARAMETER(LCL.Load_Status_New);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      // PGM.*Return code = CND.*Record already exists
      PGM.*Return_code = 'Y2U0003';

      MOVE *ALL (To: PAR From: DB1);

     }

     //?Zero out load id
     EXECUTE FUNCTION(RTV Chg Ld for TMS    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2123137;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(*BLANK);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER('Y');
     {
      //?USER: Process Data record

      EXECUTE FUNCTION(Chg Load to Untied TMS CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2124467;
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Order_Number);
      PARAMETER(PAR.Load_ID);
      PARAMETER(DB1.Event_Code);
      PARAMETER(PAR.OH_Load_Plan_Ready);
      {
       //?USER: Processing before Data update

       EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
       PARAMETER(DB1.Job_Time);
       PARAMETER(DB1.User_Id);
       PARAMETER(DB1.Job_Name);
       PARAMETER(DB1.Job_Date);
       {
        //?Execute internal function

        // PAR.Job Time = JOB.*Job time
        PAR.Job_Time = JOB.*Job_time;

        // PAR.User Id = JOB.*USER
        PAR.User_Id = JOB.*USER;

        // PAR.Job Name = JOB.*PROGRAM
        PAR.Job_Name = JOB.*PROGRAM;

        // PAR.Job Date = JOB.*Job date
        PAR.Job_Date = JOB.*Job_date;

       }

       // Call program TRG Order Hdr CHG Trig XT.
       CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
       PARAMETER(DB1.Company_Number);
       PARAMETER(DB1.Order_Number);
       PARAMETER(DB1.Order_Type_Sales);
       PARAMETER(DB1.AR_Customer_Number);
       PARAMETER(DB1.Ship_To_Customer);
       PARAMETER(DB1.Ship_To_Name);
       PARAMETER(DB1.Ship_To_Address_Line_1);
       PARAMETER(DB1.Ship_To_Address_Line_2);
       PARAMETER(DB1.Ship_To_Address_Line_3);
       PARAMETER(DB1.Ship_To_City);
       PARAMETER(DB1.Ship_To_State_Code);
       PARAMETER(DB1.Ship_To_Zip_Postal_Code);
       PARAMETER(DB1.Bill_to_Customer);
       PARAMETER(DB1.Bill_to_Name);
       PARAMETER(DB1.Bill_to_Address_Line_1);
       PARAMETER(DB1.Bill_to_Address_Line_2);
       PARAMETER(DB1.Bill_to_Address_Line_3);
       PARAMETER(DB1.Bill_to_City);
       PARAMETER(DB1.Bill_to_State_Code);
       PARAMETER(DB1.Bill_to_Zip_Postal_Code);
       PARAMETER(DB1.Customer_Purchase_Order_#);
       PARAMETER(DB1.Order_Date);
       PARAMETER(DB1.Requested_Ship_Date);
       PARAMETER(DB1.Actual_Shipped_Date);
       PARAMETER(DB1.Cancel_Date);
       PARAMETER(DB1.Terms_Code);
       PARAMETER(DB1.Special_Instructions);
       PARAMETER(DB1.Special_Instructions_2);
       PARAMETER(DB1.Carrier_Code);
       PARAMETER(DB1.Comment_Print_Acknowledge);
       PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
       PARAMETER(DB1.Comment_Print_Pick_Slip);
       PARAMETER(DB1.Comment_Print_Ship_Doc);
       PARAMETER(DB1.Reason_Code);
       PARAMETER(DB1.Order_in_Use);
       PARAMETER(DB1.Header_Status);
       PARAMETER(DB1.Header_Status_Last);
       PARAMETER(DB1.Order_Type_Print_Status);
       PARAMETER(DB1.Scheduled_Ship_Date);
       PARAMETER(DB1.User_Original_Entry);
       PARAMETER(DB1.Date_of_Original_Entry);
       PARAMETER(DB1.Order_Value_Total);
       PARAMETER(DB1.Order_Weight_Total);
       PARAMETER(DB1.Credit_Hold);
       PARAMETER(DB1.Production_Hold);
       PARAMETER(DB1.New_Customer_Hold);
       PARAMETER(DB1.Requested_Delivery_Date);
       PARAMETER(DB1.Requested_Delivery_Time);
       PARAMETER(DB1.Accounts_Receiv_Ent_1);
       PARAMETER(DB1.Accounts_Receiv_Ent_2);
       PARAMETER(DB1.Load_ID);
       PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
       PARAMETER(DB1.Rated_Freight);
       PARAMETER(DB1.LTL_Flag);
       PARAMETER(DB1.Price_Audit);
       PARAMETER(DB1.Price_Status);
       PARAMETER(DB1.Shipping_Method);
       PARAMETER(DB1.Export_Status);
       PARAMETER(DB1.Palletize);
       PARAMETER(DB1.Shrink_Wrap);
       PARAMETER(DB1.Slip_Sheet);
       PARAMETER(DB1.Age_Code);
       PARAMETER(DB1.Reefer_Temperature);
       PARAMETER(DB1.Load_Type);
       PARAMETER(DB1.Attach_to_Invoice_Number);
       PARAMETER(DB1.Load_Plan_Order);
       PARAMETER(DB1.Print_Pick_Slip);
       PARAMETER(DB1.Resell_Reference_Number);
       PARAMETER(DB1.Special_Comment_1);
       PARAMETER(DB1.Special_Comment_2);
       PARAMETER(DB1.Affect_Auto_Accruals);
       PARAMETER(DB1.Sales_Route_Code);
       PARAMETER(DB1.Manager_Level_Code);
       PARAMETER(DB1.VP_Level_Code);
       PARAMETER(DB1.Attach_to_Order_Number);
       PARAMETER(DB1.Reason_for_Price_Audit);
       PARAMETER(DB1.Invoice_Number);
       PARAMETER(DB1.Invoice_Suffix);
       PARAMETER(DB1.Invoice_Date);
       PARAMETER(DB1.Event_Code);
       PARAMETER(DB1.Trans_Contol_AS400_Plant);
       PARAMETER(DB1.Modified_Flag);
       PARAMETER(DB1.A_R_order_Value_Total);
       PARAMETER(DB1.Billing_Activity_Type);
       PARAMETER(DB1.Block_Order_Flag);
       PARAMETER(DB1.Order_Certification_Flag);
       PARAMETER(DB1.Invoice_Order_Value_Tot);
       PARAMETER(DB1.Process_Sts_for_3C);
       PARAMETER(DB1.Order_Conf_Fax_Sts);
       PARAMETER(DB1.Manifest_Fax_Sts);
       PARAMETER(DB1.Invoice_Fax_Sts);
       PARAMETER(DB1.Transfer_in_Storage_Ind);
       PARAMETER(DB1.Email_Cust_On_Order_Ship);
       PARAMETER(DB1.Order_Emailed);
       PARAMETER(DB1.Export_Docs_Go_w_Driver);
       PARAMETER(DB1.Shipping_Temp_Code_C_F);
       PARAMETER(DB1.Broker_Order_Status);
       PARAMETER(DB1.Air_Freight_Order);
       PARAMETER(DB1.Order_Requires_Review);
       PARAMETER(DB1.OH_Load_Plan_Ready);
       PARAMETER(DB1.Export_USDA_Approved);
       PARAMETER(DB1.HPB_Ship_to_Warehouse);
       PARAMETER(DB1.OH_TF_Exempt_Code);
       PARAMETER(DB1.OH_Appt_Confirmation_Dt);
       PARAMETER(DB1.JPN_Invoice_Issuance_Date);
       PARAMETER(DB1.Load_Actual_Shipped_Date);
       PARAMETER(DB1.Load_BOL_Complete_Date);
       PARAMETER(DB1.Load_Truck_Departure_Date);
       PARAMETER(DB1.Maximum_Gross_Weight);
       PARAMETER(DB1.Time_of_Original_Entry);
       PARAMETER(DB1.OH_Appt_Confirmation_Tm);
       PARAMETER(DB1.Load_BOL_Complete_Time);
       PARAMETER(DB1.Load_Truck_Departure_Time);
       PARAMETER(DB1.Act_Frt_Reference_Amount);
       PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
       PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
       PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
       PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
       PARAMETER(DB1.Claim_Number);
       PARAMETER(DB1.EDI_Status_1);
       PARAMETER(DB1.EDI_Status_2);
       PARAMETER(DB1.EDI_Status_3);
       PARAMETER(DB1.Job_Time);
       PARAMETER(DB1.User_Id);
       PARAMETER(DB1.Job_Name);
       PARAMETER(DB1.Job_Date);

      }

     }

     //?Zero out load id ; reset load plan ready to ReSweep
     EXECUTE FUNCTION(RTV Chg for TMS Delet RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2124032;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Load_ID);
     {
      //?USER: Process Data record

      //?R15161 DN  07/23/19-Set Voyage to *BLANK.
      EXECUTE FUNCTION(CHG Order Header Exten CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC1814352;
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Order_Number);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(DB1.Shipping_Line);
      PARAMETER(DB1.Port_Delv_Terminal);
      PARAMETER(DB1.OHE_City);
      PARAMETER(*BLANK);
      PARAMETER(*BLANK);
      PARAMETER(*BLANK);
      PARAMETER(DB1.OHE_Discharge_Port_Airprt);
      PARAMETER(DB1.OHE_Sail_Flight_Date);
      PARAMETER(DB1.OHE_Port_Cut_Date);
      PARAMETER(DB1.OHE_Arrival_Date);
      PARAMETER(DB1.OHE_Late_Delivery_Code);
      PARAMETER(WRK.Blank_for_3_USR);
      PARAMETER(*BLANK);
      PARAMETER(DB1.OHE_Comment_1);
      PARAMETER(DB1.OHE_Comment_2);
      PARAMETER(DB1.OHE_Unused_Number_1_11_0);
      PARAMETER(DB1.OHE_Unused_Number_2_11_0);
      PARAMETER(DB1.OHE_Unused_Number_3_11_0);
      PARAMETER(DB1.OHE_Unused_Number_4_11_0);
      PARAMETER(DB1.OHE_HPB_RIN_Equiv_Value);
      PARAMETER(DB1.OHE_HPB_RIN_Price);
      PARAMETER(DB1.Transload_Terminal_Fees);
      PARAMETER(DB1.OHE_Est_Arrv_at_Dest_Date);
      PARAMETER(DB1.OHE_Backhaul_ETA_RtrnDate);
      PARAMETER(DB1.OHE_Port_Pier_Paid_Date);
      PARAMETER(DB1.OHE_Actual_Ship_Date);
      PARAMETER(DB1.OHE_Carrier_SCAC_Code);
      PARAMETER(DB1.OHE_Spot_Buy);
      PARAMETER(DB1.OHE_PO_ACK_Flag);
      PARAMETER(DB1.OHE_Override_Type_Code);
      PARAMETER(DB1.OHE_Backhaul_Status);
      PARAMETER(DB1.OHE_Backhaul_ETA_AM_PM);
      PARAMETER(DB1.OHE_Load_Haul_Type);
      PARAMETER(DB1.OHE_Backhaul_Carrier_Code);
      PARAMETER(DB1.OHE_Bookings_Confirmed);
      PARAMETER(DB1.OHE_EDI_Error_Reasons);
      PARAMETER(DB1.OHE_EDI_Error_Reasons_2);
      PARAMETER(DB1.HPB_COA_Batch_Number);
      PARAMETER(DB1.Delivery_P_O_Number);
      PARAMETER(DB1.OHE_Intended_for_ExportCC);
      PARAMETER(DB1.OHE_EDI_943_Action);
      PARAMETER(DB1.OHE_EDI_944_Action);
      PARAMETER(DB1.OHE_EDI_940_Action);
      PARAMETER(DB1.OHE_EDI_945_Action);
      PARAMETER(DB1.OHE_EDI_856_Action);
      PARAMETER(DB1.OHE_EDI_824_Action);
      PARAMETER(DB1.OHE_Transload_Seal_Nbr);
      PARAMETER(DB1.OHE_Abs_Rate_Override_Rsn);
      PARAMETER(DB1.OHE_Appt_Confirmation_#);
      PARAMETER(DB1.OHE_Backhaul_Container#);
      PARAMETER(DB1.OHE_Backhaul_Chassis_#);
      PARAMETER(DB1.OHE_Transload_Container#);
      PARAMETER(DB1.OHE_Pier_Pass_Invoice);
      PARAMETER(DB1.OHE_Carrier_Nm);
      PARAMETER(DB1.OHE_Appt_Confirmation_Nm);
      PARAMETER(DB1.OHE_Backhaul_Comment);
      PARAMETER(DB1.Letter_of_Credit_Number);
      PARAMETER(DB1.OHE_Backhaul_Return_to_Co);
      PARAMETER(DB1.LD_Stop_Drop);
      PARAMETER(DB1.OHE_Unused_Number_3_0);
      PARAMETER(DB1.OHE_Pier_Pass_Fee_Amount);
      PARAMETER(DB1.OHE_Port_Check_Fee_Amount);
      PARAMETER(DB1.OHE_Port_Cut_Time);
      PARAMETER(DB1.OHE_Backhaul_Truck_Number);
      PARAMETER(DB1.OHE_Load_Sched_Seq_Num);
      PARAMETER(DB1.Original_Appointment_Date);
      PARAMETER(DB1.Original_Appointment_Time);
      PARAMETER(DB1.OHE_PowerPro_Load#_Outbnd);
      PARAMETER(DB1.OHE_PowerPro_Load#_Bckhl);
      PARAMETER(DB1.OHE_Unused_Numeric_9_0_3);
      PARAMETER(DB1.OHE_Orig_ABS_Freight_Rate);
      PARAMETER(DB1.OHE_Genset_Number);
      PARAMETER(DB1.OHE_Email_BOL_Sent);
      PARAMETER(DB1.OHE_EDI_Order_Automated);
      PARAMETER(DB1.OHE_EDI_601_Action);
      PARAMETER(DB1.OHE_Unused_Status_4);
      PARAMETER(DB1.OHE_Unused_Text_1);
      PARAMETER(DB1.OHE_Unused_Text_2);
      PARAMETER(DB1.OHE_Customer_Vendor_f_PO);
      PARAMETER(DB1.OHE_EDI_824_AES_ITN_#);
      PARAMETER(DB1.OHE_Unused_Text_5);
      PARAMETER(DB1.OHE_Unused_Date_1);
      PARAMETER(DB1.OHE_Unused_Date_2);
      PARAMETER(DB1.EDI_Status_1);
      PARAMETER(DB1.EDI_Status_2);
      PARAMETER(DB1.EDI_Status_3);
      PARAMETER(DB1.Record_Status);
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?USER: Processing if Data record not found

       EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
       PARAMETER(PAR.Company_Number);
       PARAMETER(PAR.Order_Number);
       PARAMETER(PAR.Load_ID);
       PARAMETER(PAR.Stop_Drop_Sequence_Number);
       PARAMETER(PAR.Shipping_Line);
       PARAMETER(PAR.Port_Delv_Terminal);
       PARAMETER(PAR.OHE_City);
       PARAMETER(PAR.OHE_Vessel_Airline);
       PARAMETER(PAR.OHE_Voyage_Flight);
       PARAMETER(PAR.OHE_Booking_Number);
       PARAMETER(PAR.OHE_Discharge_Port_Airprt);
       PARAMETER(PAR.OHE_Sail_Flight_Date);
       PARAMETER(PAR.OHE_Port_Cut_Date);
       PARAMETER(PAR.OHE_Arrival_Date);
       PARAMETER(PAR.OHE_Late_Delivery_Code);
       PARAMETER(PAR.OHE_Ship_Status);
       PARAMETER(PAR.OHE_Container_Number);
       PARAMETER(PAR.OHE_Comment_1);
       PARAMETER(PAR.OHE_Comment_2);
       PARAMETER(PAR.OHE_Unused_Number_1_11_0);
       PARAMETER(PAR.OHE_Unused_Number_2_11_0);
       PARAMETER(PAR.OHE_Unused_Number_3_11_0);
       PARAMETER(PAR.OHE_Unused_Number_4_11_0);
       PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
       PARAMETER(PAR.OHE_HPB_RIN_Price);
       PARAMETER(PAR.Transload_Terminal_Fees);
       PARAMETER(PAR.OHE_Est_Arrv_at_Dest_Date);
       PARAMETER(PAR.OHE_Backhaul_ETA_RtrnDate);
       PARAMETER(PAR.OHE_Port_Pier_Paid_Date);
       PARAMETER(PAR.OHE_Actual_Ship_Date);
       PARAMETER(PAR.OHE_Carrier_SCAC_Code);
       PARAMETER(PAR.OHE_Spot_Buy);
       PARAMETER(PAR.OHE_PO_ACK_Flag);
       PARAMETER(PAR.OHE_Override_Type_Code);
       PARAMETER(PAR.OHE_Backhaul_Status);
       PARAMETER(PAR.OHE_Backhaul_ETA_AM_PM);
       PARAMETER(PAR.OHE_Load_Haul_Type);
       PARAMETER(PAR.OHE_Backhaul_Carrier_Code);
       PARAMETER(PAR.OHE_Bookings_Confirmed);
       PARAMETER(PAR.OHE_EDI_Error_Reasons);
       PARAMETER(PAR.OHE_EDI_Error_Reasons_2);
       PARAMETER(PAR.HPB_COA_Batch_Number);
       PARAMETER(PAR.Delivery_P_O_Number);
       PARAMETER(PAR.OHE_Intended_for_ExportCC);
       PARAMETER(PAR.OHE_EDI_943_Action);
       PARAMETER(PAR.OHE_EDI_944_Action);
       PARAMETER(PAR.OHE_EDI_940_Action);
       PARAMETER(PAR.OHE_EDI_945_Action);
       PARAMETER(PAR.OHE_EDI_856_Action);
       PARAMETER(PAR.OHE_EDI_824_Action);
       PARAMETER(PAR.OHE_Transload_Seal_Nbr);
       PARAMETER(PAR.OHE_Abs_Rate_Override_Rsn);
       PARAMETER(PAR.OHE_Appt_Confirmation_#);
       PARAMETER(PAR.OHE_Backhaul_Container#);
       PARAMETER(PAR.OHE_Backhaul_Chassis_#);
       PARAMETER(PAR.OHE_Transload_Container#);
       PARAMETER(PAR.OHE_Pier_Pass_Invoice);
       PARAMETER(PAR.OHE_Carrier_Nm);
       PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
       PARAMETER(PAR.OHE_Backhaul_Comment);
       PARAMETER(PAR.Letter_of_Credit_Number);
       PARAMETER(PAR.OHE_Backhaul_Return_to_Co);
       PARAMETER(PAR.LD_Stop_Drop);
       PARAMETER(PAR.OHE_Unused_Number_3_0);
       PARAMETER(PAR.OHE_Pier_Pass_Fee_Amount);
       PARAMETER(PAR.OHE_Port_Check_Fee_Amount);
       PARAMETER(PAR.OHE_Port_Cut_Time);
       PARAMETER(PAR.OHE_Backhaul_Truck_Number);
       PARAMETER(PAR.OHE_Load_Sched_Seq_Num);
       PARAMETER(PAR.Original_Appointment_Date);
       PARAMETER(PAR.Original_Appointment_Time);
       PARAMETER(PAR.OHE_PowerPro_Load#_Outbnd);
       PARAMETER(PAR.OHE_PowerPro_Load#_Bckhl);
       PARAMETER(PAR.OHE_Unused_Numeric_9_0_3);
       PARAMETER(PAR.OHE_Orig_ABS_Freight_Rate);
       PARAMETER(PAR.OHE_Genset_Number);
       PARAMETER(PAR.OHE_Email_BOL_Sent);
       PARAMETER(PAR.OHE_EDI_Order_Automated);
       PARAMETER(PAR.OHE_EDI_601_Action);
       PARAMETER(PAR.OHE_Unused_Status_4);
       PARAMETER(PAR.OHE_Unused_Text_1);
       PARAMETER(PAR.OHE_Unused_Text_2);
       PARAMETER(PAR.OHE_Customer_Vendor_f_PO);
       PARAMETER(PAR.OHE_EDI_824_AES_ITN_#);
       PARAMETER(PAR.OHE_Unused_Text_5);
       PARAMETER(PAR.OHE_Unused_Date_1);
       PARAMETER(PAR.OHE_Unused_Date_2);
       PARAMETER(PAR.EDI_Status_1);
       PARAMETER(PAR.EDI_Status_2);
       PARAMETER(PAR.EDI_Status_3);
       PARAMETER(PAR.Record_Status);
       PARAMETER(PAR.Job_Time);
       PARAMETER(PAR.User_Id);
       PARAMETER(PAR.Job_Name);
       PARAMETER(PAR.Job_Date);
       {
        //?USER: Processing before Data update

        // DB1.Job Time = JOB.*Job time
        DB1.Job_Time = JOB.*Job_time;

        // DB1.Job Date = JOB.*Job date
        DB1.Job_Date = JOB.*Job_date;

        // DB1.Job Name = JOB.*PROGRAM
        DB1.Job_Name = JOB.*PROGRAM;

        // DB1.User Id = JOB.*USER
        DB1.User_Id = JOB.*USER;

       }

       //?USER: Processing before Data update

       // DB1.Job Time = JOB.*Job time
       DB1.Job_Time = JOB.*Job_time;

       // DB1.Job Date = JOB.*Job date
       DB1.Job_Date = JOB.*Job_date;

       // DB1.Job Name = JOB.*PROGRAM
       DB1.Job_Name = JOB.*PROGRAM;

       // DB1.User Id = JOB.*USER
       DB1.User_Id = JOB.*USER;

      }

     }

     // WRK.@Blank for 5 = CVTVAR(DB1.Stop/Drop)
     WRK.@Blank_for_5 = CVTVAR(DB1.Stop_Drop);

     // LCL.Change Log Prior Value = WRK.@Blank for 5
     LCL.Change_Log_Prior_Value = WRK.@Blank_for_5;

     // Call program CRT Load/Order Chg Log XF.
     CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Stop_Drop);
     PARAMETER('DELORD');
     PARAMETER('TRF');
     PARAMETER(LCL.Change_Log_Prior_Value);
     PARAMETER(*BLANK);
     PARAMETER(JOB.*USER);
     PARAMETER(JOB.*JOB);
     PARAMETER(PAR.Carrier_Code);
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);

     EXECUTE FUNCTION(DLT Load Detail        DL) TYPE(DLTOBJ) FILE(OMFLCPP)          AC1183328;
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Stop_Drop_Sequence_Number);
     CASE;

     // IF LCL.Load Status New is Lock
     IF LCL.Load_Status_New = 'L';

     // Call program PFS Lock Load/Order   XF.
     CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
     PARAMETER(DB1.Load_ID);

     ENDIF;

    }

    ENDIF;

    // PAR.Stop/Drop Sequence Number = PAR.Stop/Drop Sequence Number + CON.1
    PAR.Stop_Drop_Sequence_Number = PAR.Stop_Drop_Sequence_Number + 1;

    // LCL.LD Carrier Appt Date = CON.*ZERO
    LCL.LD_Carrier_Appt_Date = *ZERO;

    // LCL.Actual Delivery Date = CON.*ZERO
    LCL.Actual_Delivery_Date = *ZERO;

    // LCL.Original Appt Confirm Dt = CON.*ZERO
    LCL.LD_Unused_Date_2 = *ZERO;

    //?If TMS Appointment Date is entered                    E009492
    CASE;

    // IF PAR.TMS Appointment Date is entered
    IF PAR.TMS_Appointment_Date > *ZERO;

    // Call program CVT *YYMD to *CYMD    XF.
    CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
    PARAMETER(LCL.LD_Carrier_Appt_Date);
    PARAMETER(PAR.TMS_Appointment_Date);

    //?*****
    // Call program RTV Orig Appt Dte/Tme  XF.
    CALL PROGRAM(RTV Orig Appt Dte/Tme  XF) ('PUA4XFR');
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(WRK.Original_Appointment_Date);
    PARAMETER(WRK.Original_Appointment_Time);

    //?* Only update Orig Appt date/time if it is zeros      E009492
    CASE;

    // IF WRK.Original Appointment Date is Equal to zero
    IF WRK.Original_Appointment_Date = *ZERO;

    //?* Convert tms appt date from 8.0 to 6.0
    EXECUTE FUNCTION(CVT *YYMD to *YMD     IF) TYPE(EXCINTFUN)                      AC2133495;
    PARAMETER(PAR.TMS_Appointment_Date);
    PARAMETER(LCL.Date_Out_60_USR);
    {
     //?Execute internal function

     //?** Convert incoming date to alpha
     // PAR.Date (Char-8) USR = CVTVAR(PAR.DATE)
     PAR.Date_Char_8_USR = CVTVAR(PAR.DATE);

     //?** Retrieve yymmdd into another alpha field
     // PAR.Date (Char-6) USR = SUBSTRING(PAR.Date (Char-8) USR,CON.3,CON.6)
     PAR.Date_Char_6_USR = SUBSTRING(PAR.Date_Char_8_USR:3:6);

     //?** Convert 6 char date to 6.0 and put in par to return
     // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
     PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

    }

    //?* Save carrier appt date in original appointment date in OHE E009492
    // LCL.Original Appointment Date = LCL.Date Out (6,0) USR
    LCL.Original_Appointment_Date = LCL.Date_Out_60_USR;

    //?* Save carrier appt time in original appointment time in OHE  E009492
    // LCL.Original Appointment Time = PAR.TMS Appointment Time * CON.100 *
    LCL.Original_Appointment_Time = PAR.TMS_Appointment_Time * 100;

    //?* Update OHE original date & time                     E009492
    EXECUTE FUNCTION(CHG Orig Appt Dt/Tm   CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC2133490;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(LCL.Original_Appointment_Date);
    PARAMETER(LCL.Original_Appointment_Time);
    {
     //?USER: Processing before Data update

     // DB1.Job Time = JOB.*Job time
     DB1.Job_Time = JOB.*Job_time;

     // DB1.Job Date = JOB.*Job date
     DB1.Job_Date = JOB.*Job_date;

     // DB1.Job Name = JOB.*PROGRAM
     DB1.Job_Name = JOB.*PROGRAM;

     // DB1.User Id = JOB.*USER
     DB1.User_Id = JOB.*USER;

    }

    ENDIF;

    ENDIF;

    // LCL.LD Carrier Appt Time = PAR.TMS Appointment Time * CON.100 *
    LCL.LD_Carrier_Appt_Time = PAR.TMS_Appointment_Time * 100;

    CASE;

    // IF PAR.TMS Actual Car Arrival Dt is entered
    IF PAR.TMS_Actual_Car_Arrival_Dt > *ZERO;

    // Call program CVT *YYMD to *CYMD    XF.
    CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
    PARAMETER(LCL.Actual_Delivery_Date);
    PARAMETER(PAR.TMS_Actual_Car_Arrival_Dt);

    ENDIF;

    // LCL.Actual Delivery time = PAR.TMS Actual Car Arrival Tm * CON.100 *
    LCL.Actual_Delivery_time = PAR.TMS_Actual_Car_Arrival_Tm * 100;

    // LCL.Deadline Depart Time  HDR = PAR.TMS Deadline Depart Time * CON.100 *
    LCL.Deadline_Depart_Time_HDR = PAR.TMS_Deadline_Depart_Time * 100;

    //?TMS Late Reason Code
    CASE;

    // IF PAR.TMS Late Reason Code is Entered
    IF PAR.TMS_Late_Reason_Code > *BLANK;

    CASE;

    // IF PAR.TMS Late Reason Code is NS
    IF PAR.TMS_Late_Reason_Code = 'NS';

    // LCL.Load Dtl On Time Flag = CND.Blank
    LCL.Load_Dtl_On_Time_Flag = *BLANK;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Load Dtl On Time Flag = CND.Not On Time
    LCL.Load_Dtl_On_Time_Flag = 'N';

    ENDIF;

    //?TMS Late Reason Code
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Load Dtl On Time Flag = CND.Blank
    LCL.Load_Dtl_On_Time_Flag = *BLANK;

    ENDIF;

    //?R17040 DN 03/01/21-Set TMS Carrier Ref PRO/Inv & TMS Cust Assigned Appt #.
    EXECUTE FUNCTION(CRT Load Detail        CR) TYPE(CRTOBJ) FILE(OMFLCPP)          AC1183326;
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(PAR.Stop_Drop_Sequence_Number);
    PARAMETER(DB1.TMS_Event_Sequence);
    PARAMETER(*BLANK);
    PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER('O');
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(LCL.Actual_Delivery_Date);
    PARAMETER(LCL.Actual_Delivery_time);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(PAR.Deadline_Departure_Date);
    PARAMETER(LCL.Deadline_Depart_Time_HDR);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(LCL.Load_Dtl_On_Time_Flag);
    PARAMETER(LCL.On_Time_Addl_Rsn_Unused);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(LCL.LD_Carrier_Appt_Date);
    PARAMETER(LCL.LD_Unused_Date_2);
    PARAMETER(*ZERO);
    PARAMETER(LCL.LD_Carrier_Appt_Time);
    PARAMETER(LCL.LD_Unused_Time_2);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(LCL.LD_Unused_Sts_2);
    PARAMETER(LCL.HPB_Transload_Station);
    PARAMETER(*BLANK);
    PARAMETER(PAR.TMS_Carrier_Ref_PRO_Inv);
    PARAMETER(PAR.TMS_Cust_Assigned_Appt_#);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    //?Event Code Last is 01 Order Entry
    CASE;

    // IF LCL.Event Code Last is 01 Order Entry
    IF LCL.Event_Code_Last = '01';

    // LCL.Event Code Last = CND.02 Load Planned
    LCL.Event_Code_Last = '02';

    EXECUTE FUNCTION(Crt Load Plan Event    RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1295306;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(*ZERO);
    {
     //?USER: Initialize routine

     // PAR.Event Number = CON.*ZERO
     PAR.Event_Number = *ZERO;

     EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Event_Number);
     PARAMETER(WRK.TXT_field_not_needed);
     PARAMETER(WRK.Numeric_Field_Not_Needed);
     PARAMETER(WRK.TXT_field_not_needed);
     PARAMETER(WRK.Numeric_Field_Not_Needed);
     {
      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     //?USER: Processing if Data record not found

     // WRK.Event Number = WRK.Event Number + CON.1
     WRK.Event_Number = WRK.Event_Number + 1;

     EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(WRK.Event_Number);
     PARAMETER('01');
     PARAMETER(PAR.Company_Number);
     PARAMETER(*ZERO);
     PARAMETER(*BLANK);
     PARAMETER(JOB.*Job_date);
     PARAMETER('Y');
     PARAMETER('N');
     PARAMETER('Y');
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     // WRK.Event Number = WRK.Event Number + CON.1
     WRK.Event_Number = WRK.Event_Number + 1;

     EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(WRK.Event_Number);
     PARAMETER('02');
     PARAMETER(PAR.Company_Number);
     PARAMETER(*ZERO);
     PARAMETER(*BLANK);
     PARAMETER(JOB.*Job_date);
     PARAMETER('Y');
     PARAMETER('N');
     PARAMETER('Y');
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     //?USER: Process Data record

     // PAR.Event Number = PAR.Event Number + CON.1
     PAR.Event_Number = PAR.Event_Number + 1;

     EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(PAR.Event_Number);
     PARAMETER('02');
     PARAMETER(DB1.Invoice_Memo_Company);
     PARAMETER(DB1.Invoice_Memo_Number);
     PARAMETER(DB1.Invoice_Memo_Suffix);
     PARAMETER(JOB.*Job_date);
     PARAMETER(DB1.Activity_Completion);
     PARAMETER(DB1.Activity_Hold);
     PARAMETER(DB1.Post_Cash_Complete);
     PARAMETER(DB1.Cross_Event_Ref_Comp);
     PARAMETER(DB1.Cross_Event_Ref_Order);
     PARAMETER(DB1.Cross_Event_Ref_Event);
     PARAMETER(DB1.Ship_To_Customer);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     QUIT;

    }

    ENDIF;

    EXECUTE FUNCTION(Chg Load Info - TMS    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2123120;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(PAR.Carrier_Code);
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(LCL.Event_Code_Last);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // Call program TRG Order Hdr CHG Trig XT.
     CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Type_Sales);
     PARAMETER(DB1.AR_Customer_Number);
     PARAMETER(DB1.Ship_To_Customer);
     PARAMETER(DB1.Ship_To_Name);
     PARAMETER(DB1.Ship_To_Address_Line_1);
     PARAMETER(DB1.Ship_To_Address_Line_2);
     PARAMETER(DB1.Ship_To_Address_Line_3);
     PARAMETER(DB1.Ship_To_City);
     PARAMETER(DB1.Ship_To_State_Code);
     PARAMETER(DB1.Ship_To_Zip_Postal_Code);
     PARAMETER(DB1.Bill_to_Customer);
     PARAMETER(DB1.Bill_to_Name);
     PARAMETER(DB1.Bill_to_Address_Line_1);
     PARAMETER(DB1.Bill_to_Address_Line_2);
     PARAMETER(DB1.Bill_to_Address_Line_3);
     PARAMETER(DB1.Bill_to_City);
     PARAMETER(DB1.Bill_to_State_Code);
     PARAMETER(DB1.Bill_to_Zip_Postal_Code);
     PARAMETER(DB1.Customer_Purchase_Order_#);
     PARAMETER(DB1.Order_Date);
     PARAMETER(DB1.Requested_Ship_Date);
     PARAMETER(DB1.Actual_Shipped_Date);
     PARAMETER(DB1.Cancel_Date);
     PARAMETER(DB1.Terms_Code);
     PARAMETER(DB1.Special_Instructions);
     PARAMETER(DB1.Special_Instructions_2);
     PARAMETER(DB1.Carrier_Code);
     PARAMETER(DB1.Comment_Print_Acknowledge);
     PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
     PARAMETER(DB1.Comment_Print_Pick_Slip);
     PARAMETER(DB1.Comment_Print_Ship_Doc);
     PARAMETER(DB1.Reason_Code);
     PARAMETER(DB1.Order_in_Use);
     PARAMETER(DB1.Header_Status);
     PARAMETER(DB1.Header_Status_Last);
     PARAMETER(DB1.Order_Type_Print_Status);
     PARAMETER(DB1.Scheduled_Ship_Date);
     PARAMETER(DB1.User_Original_Entry);
     PARAMETER(DB1.Date_of_Original_Entry);
     PARAMETER(DB1.Order_Value_Total);
     PARAMETER(DB1.Order_Weight_Total);
     PARAMETER(DB1.Credit_Hold);
     PARAMETER(DB1.Production_Hold);
     PARAMETER(DB1.New_Customer_Hold);
     PARAMETER(DB1.Requested_Delivery_Date);
     PARAMETER(DB1.Requested_Delivery_Time);
     PARAMETER(DB1.Accounts_Receiv_Ent_1);
     PARAMETER(DB1.Accounts_Receiv_Ent_2);
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
     PARAMETER(DB1.Rated_Freight);
     PARAMETER(DB1.LTL_Flag);
     PARAMETER(DB1.Price_Audit);
     PARAMETER(DB1.Price_Status);
     PARAMETER(DB1.Shipping_Method);
     PARAMETER(DB1.Export_Status);
     PARAMETER(DB1.Palletize);
     PARAMETER(DB1.Shrink_Wrap);
     PARAMETER(DB1.Slip_Sheet);
     PARAMETER(DB1.Age_Code);
     PARAMETER(DB1.Reefer_Temperature);
     PARAMETER(DB1.Load_Type);
     PARAMETER(DB1.Attach_to_Invoice_Number);
     PARAMETER(DB1.Load_Plan_Order);
     PARAMETER(DB1.Print_Pick_Slip);
     PARAMETER(DB1.Resell_Reference_Number);
     PARAMETER(DB1.Special_Comment_1);
     PARAMETER(DB1.Special_Comment_2);
     PARAMETER(DB1.Affect_Auto_Accruals);
     PARAMETER(DB1.Sales_Route_Code);
     PARAMETER(DB1.Manager_Level_Code);
     PARAMETER(DB1.VP_Level_Code);
     PARAMETER(DB1.Attach_to_Order_Number);
     PARAMETER(DB1.Reason_for_Price_Audit);
     PARAMETER(DB1.Invoice_Number);
     PARAMETER(DB1.Invoice_Suffix);
     PARAMETER(DB1.Invoice_Date);
     PARAMETER(DB1.Event_Code);
     PARAMETER(DB1.Trans_Contol_AS400_Plant);
     PARAMETER(DB1.Modified_Flag);
     PARAMETER(DB1.A_R_order_Value_Total);
     PARAMETER(DB1.Billing_Activity_Type);
     PARAMETER(DB1.Block_Order_Flag);
     PARAMETER(DB1.Order_Certification_Flag);
     PARAMETER(DB1.Invoice_Order_Value_Tot);
     PARAMETER(DB1.Process_Sts_for_3C);
     PARAMETER(DB1.Order_Conf_Fax_Sts);
     PARAMETER(DB1.Manifest_Fax_Sts);
     PARAMETER(DB1.Invoice_Fax_Sts);
     PARAMETER(DB1.Transfer_in_Storage_Ind);
     PARAMETER(DB1.Email_Cust_On_Order_Ship);
     PARAMETER(DB1.Order_Emailed);
     PARAMETER(DB1.Export_Docs_Go_w_Driver);
     PARAMETER(DB1.Shipping_Temp_Code_C_F);
     PARAMETER(DB1.Broker_Order_Status);
     PARAMETER(DB1.Air_Freight_Order);
     PARAMETER(DB1.Order_Requires_Review);
     PARAMETER(DB1.OH_Load_Plan_Ready);
     PARAMETER(DB1.Export_USDA_Approved);
     PARAMETER(DB1.HPB_Ship_to_Warehouse);
     PARAMETER(DB1.OH_TF_Exempt_Code);
     PARAMETER(DB1.OH_Appt_Confirmation_Dt);
     PARAMETER(DB1.JPN_Invoice_Issuance_Date);
     PARAMETER(DB1.Load_Actual_Shipped_Date);
     PARAMETER(DB1.Load_BOL_Complete_Date);
     PARAMETER(DB1.Load_Truck_Departure_Date);
     PARAMETER(DB1.Maximum_Gross_Weight);
     PARAMETER(DB1.Time_of_Original_Entry);
     PARAMETER(DB1.OH_Appt_Confirmation_Tm);
     PARAMETER(DB1.Load_BOL_Complete_Time);
     PARAMETER(DB1.Load_Truck_Departure_Time);
     PARAMETER(DB1.Act_Frt_Reference_Amount);
     PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
     PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
     PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
     PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
     PARAMETER(DB1.Claim_Number);
     PARAMETER(DB1.EDI_Status_1);
     PARAMETER(DB1.EDI_Status_2);
     PARAMETER(DB1.EDI_Status_3);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);

    }

    EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(PAR.Deadline_Departure_Date);
    PARAMETER(LCL.Deadline_Depart_Time_HDR);
    {
     //?USER: Process Data record

     EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Deadline_Depart_Date_LH);
     PARAMETER(PAR.Deadline_Depart_Time_LH);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

    }

    //?Order Event to 02
    //?Log add to load   -- if in add mode only
    //?Create Log if ADD or CHG
    CASE;

    // IF PAR.Add/Change/Delete USR is Add
    IF PAR.Add_Change_Delete_USR = 'A';

    // OR PAR.Add/Change/Delete USR is Change
    OR PAR.Add_Change_Delete_USR = 'C';

    // Call program CRT Load/Order Chg Log XF.
    CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(DB1.TMS_Event_Sequence);
    PARAMETER('ADDORD');
    PARAMETER('TRF');
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(JOB.*USER);
    PARAMETER(JOB.*PROGRAM);
    PARAMETER(PAR.Carrier_Code);
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);

    ENDIF;

    //?Order header Ext updates    *NOTE OHE get upd again frm Intl Leg
    //? with Carrier Mode = "OCEAN"   -- except for the load id, stop#
    //?07/24/19 DN R15161-Set OHE Voyage/Flight.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?OHE Voyage/Flight field type was changed from NBR (5) to TXT (15).
    //?No longer need to check if value is numeric.
    // LCL.OHE Voyage/Flight = PAR.TMS Voyage Number
    LCL.OHE_Voyage_Flight = PAR.TMS_Voyage_Number;

    ENDIF;

    // Call program CVT *YYMD to *CYMD    XF.
    CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
    PARAMETER(LCL.OHE_Sail_Flight_Date);
    PARAMETER(PAR.TMS_Vessel_ETD_Date);

    // Call program CVT *YYMD to *CYMD    XF.
    CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
    PARAMETER(LCL.OHE_Arrival_Date);
    PARAMETER(PAR.TMS_Vessel_ETA_Date);

    //?* Added update original appointment date/time       E009492
    //?07/24/19 DN R15161-Replaced PAR.Voyage with OHE Voyage/Flight &
    //?  PAR.Booking Number with OHE Booking Number.
    EXECUTE FUNCTION(RTV Chg TMS Load Flds RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2124025;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(PAR.Stop_Drop_Sequence_Number);
    PARAMETER(PAR.TMS_OTR_Destination_City);
    PARAMETER(LCL.OHE_Voyage_Flight);
    PARAMETER(PAR.TMS_Booking_Number);
    PARAMETER(PAR.TMS_Late_Reason_Code);
    PARAMETER(PAR.TMS_Container_Number);
    PARAMETER(LCL.Original_Appointment_Date);
    PARAMETER(LCL.Original_Appointment_Time);
    PARAMETER(*BLANK);
    PARAMETER(PAR.TMS_OTR_Destination_Name);
    PARAMETER(PAR.TMS_Vessel_Name);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(PAR.TMS_Container_Number);
    PARAMETER('O');
    PARAMETER(LCL.OHE_Load_Haul_Type);
    PARAMETER(LCL.OHE_Arrival_Date);
    PARAMETER(LCL.OHE_Sail_Flight_Date);
    {
     //?USER: Processing if Data record not found

     //?07/24/19 DN R15161-Replaced Voyage w/ OHE Voyage/Flight & Booking
     //?  Number w/ OHE Booking Number.
     EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Load_ID);
     PARAMETER(*ZERO);
     PARAMETER(PAR.Shipping_Line);
     PARAMETER(PAR.Port_Delv_Terminal);
     PARAMETER(PAR.OHE_City);
     PARAMETER(PAR.Vessel_Name);
     PARAMETER(PAR.OHE_Voyage_Flight);
     PARAMETER(PAR.OHE_Booking_Number);
     PARAMETER(PAR.OHE_City);
     PARAMETER(PAR.OHE_Sail_Flight_Date);
     PARAMETER(*ZERO);
     PARAMETER(PAR.OHE_Arrival_Date);
     PARAMETER(PAR.OHE_Late_Delivery_Code);
     PARAMETER('O');
     PARAMETER(PAR.OHE_Container_Number);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*BLANK);
     PARAMETER(LCL.OHE_Spot_Buy);
     PARAMETER(LCL.OHE_PO_ACK_Flag);
     PARAMETER(LCL.OHE_Override_Type_Code);
     PARAMETER(LCL.OHE_Backhaul_Status);
     PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
     PARAMETER(PAR.OHE_Load_Haul_Type);
     PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
     PARAMETER(LCL.OHE_Bookings_Confirmed);
     PARAMETER(LCL.OHE_EDI_Error_Reasons);
     PARAMETER(LCL.OHE_EDI_Error_Reasons_2);
     PARAMETER(*ZERO);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(LCL.OHE_EDI_943_Action);
     PARAMETER(LCL.OHE_EDI_944_Action);
     PARAMETER(LCL.OHE_EDI_940_Action);
     PARAMETER(LCL.OHE_EDI_945_Action);
     PARAMETER(LCL.OHE_EDI_856_Action);
     PARAMETER(LCL.OHE_EDI_824_Action);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(PAR.Original_Appointment_Date);
     PARAMETER(PAR.Original_Appointment_Time);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*BLANK);
     PARAMETER(LCL.OHE_Email_BOL_Sent);
     PARAMETER(LCL.OHE_EDI_Order_Automated);
     PARAMETER(LCL.OHE_EDI_601_Action);
     PARAMETER(LCL.OHE_Unused_Status_4);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(LCL.EDI_Status_1);
     PARAMETER(LCL.EDI_Status_2);
     PARAMETER(LCL.EDI_Status_3);
     PARAMETER(LCL.Record_Status);
     PARAMETER(*ZERO);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*ZERO);
     {
      //?USER: Processing before Data update

      // DB1.Job Time = JOB.*Job time
      DB1.Job_Time = JOB.*Job_time;

      // DB1.Job Date = JOB.*Job date
      DB1.Job_Date = JOB.*Job_date;

      // DB1.Job Name = JOB.*PROGRAM
      DB1.Job_Name = JOB.*PROGRAM;

      // DB1.User Id = JOB.*USER
      DB1.User_Id = JOB.*USER;

     }

     //?USER: Process Data record

     //?07/24/19 DN R15161-Replaced Voyage w/ OHE Voyage/Flight & Booking
     //?  Number w/ OHE Booking Number.
     EXECUTE FUNCTION(CHG Existing OHE       CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC1816935;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(PAR.Load_ID);
     PARAMETER(PAR.Stop_Drop_Sequence_Number);
     PARAMETER(PAR.Shipping_Line);
     PARAMETER(PAR.Port_Delv_Terminal);
     PARAMETER(PAR.OHE_City);
     PARAMETER(PAR.Vessel_Name);
     PARAMETER(PAR.OHE_Voyage_Flight);
     PARAMETER(PAR.OHE_Booking_Number);
     PARAMETER(PAR.Discharge_Port);
     PARAMETER(PAR.OHE_Sail_Flight_Date);
     PARAMETER(DB1.OHE_Port_Cut_Date);
     PARAMETER(PAR.OHE_Arrival_Date);
     PARAMETER(PAR.OHE_Late_Delivery_Code);
     PARAMETER(PAR.Ship_Status);
     PARAMETER(PAR.OHE_Container_Number);
     PARAMETER(DB1.OHE_Comment_1);
     PARAMETER(DB1.OHE_Comment_2);
     PARAMETER(DB1.OHE_Unused_Number_1_11_0);
     PARAMETER(DB1.OHE_Unused_Number_2_11_0);
     PARAMETER(DB1.OHE_Unused_Number_3_11_0);
     PARAMETER(DB1.OHE_Unused_Number_4_11_0);
     PARAMETER(DB1.OHE_HPB_RIN_Equiv_Value);
     PARAMETER(DB1.OHE_HPB_RIN_Price);
     PARAMETER(DB1.Transload_Terminal_Fees);
     PARAMETER(DB1.OHE_Est_Arrv_at_Dest_Date);
     PARAMETER(DB1.OHE_Backhaul_ETA_RtrnDate);
     PARAMETER(DB1.OHE_Port_Pier_Paid_Date);
     PARAMETER(DB1.OHE_Actual_Ship_Date);
     PARAMETER(DB1.OHE_Carrier_SCAC_Code);
     PARAMETER(DB1.OHE_Spot_Buy);
     PARAMETER(DB1.OHE_PO_ACK_Flag);
     PARAMETER(DB1.OHE_Override_Type_Code);
     PARAMETER(DB1.OHE_Backhaul_Status);
     PARAMETER(DB1.OHE_Backhaul_ETA_AM_PM);
     PARAMETER(PAR.OHE_Load_Haul_Type);
     PARAMETER(DB1.OHE_Backhaul_Carrier_Code);
     PARAMETER(DB1.OHE_Bookings_Confirmed);
     PARAMETER(DB1.OHE_EDI_Error_Reasons);
     PARAMETER(DB1.OHE_EDI_Error_Reasons_2);
     PARAMETER(DB1.HPB_COA_Batch_Number);
     PARAMETER(DB1.Delivery_P_O_Number);
     PARAMETER(DB1.OHE_Intended_for_ExportCC);
     PARAMETER(DB1.OHE_EDI_943_Action);
     PARAMETER(DB1.OHE_EDI_944_Action);
     PARAMETER(DB1.OHE_EDI_940_Action);
     PARAMETER(DB1.OHE_EDI_945_Action);
     PARAMETER(DB1.OHE_EDI_856_Action);
     PARAMETER(DB1.OHE_EDI_824_Action);
     PARAMETER(DB1.OHE_Transload_Seal_Nbr);
     PARAMETER(DB1.OHE_Abs_Rate_Override_Rsn);
     PARAMETER(DB1.OHE_Appt_Confirmation_#);
     PARAMETER(DB1.OHE_Backhaul_Container#);
     PARAMETER(DB1.OHE_Backhaul_Chassis_#);
     PARAMETER(DB1.OHE_Transload_Container#);
     PARAMETER(DB1.OHE_Pier_Pass_Invoice);
     PARAMETER(DB1.OHE_Carrier_Nm);
     PARAMETER(DB1.OHE_Appt_Confirmation_Nm);
     PARAMETER(DB1.OHE_Backhaul_Comment);
     PARAMETER(DB1.Letter_of_Credit_Number);
     PARAMETER(DB1.OHE_Backhaul_Return_to_Co);
     PARAMETER(DB1.LD_Stop_Drop);
     PARAMETER(DB1.OHE_Unused_Number_3_0);
     PARAMETER(DB1.OHE_Pier_Pass_Fee_Amount);
     PARAMETER(DB1.OHE_Port_Check_Fee_Amount);
     PARAMETER(DB1.OHE_Port_Cut_Time);
     PARAMETER(DB1.OHE_Backhaul_Truck_Number);
     PARAMETER(DB1.OHE_Load_Sched_Seq_Num);
     PARAMETER(DB1.Original_Appointment_Date);
     PARAMETER(DB1.Original_Appointment_Time);
     PARAMETER(DB1.OHE_PowerPro_Load#_Outbnd);
     PARAMETER(DB1.OHE_PowerPro_Load#_Bckhl);
     PARAMETER(DB1.OHE_Unused_Numeric_9_0_3);
     PARAMETER(DB1.OHE_Orig_ABS_Freight_Rate);
     PARAMETER(DB1.OHE_Genset_Number);
     PARAMETER(DB1.OHE_Email_BOL_Sent);
     PARAMETER(DB1.OHE_EDI_Order_Automated);
     PARAMETER(DB1.OHE_EDI_601_Action);
     PARAMETER(DB1.OHE_Unused_Status_4);
     PARAMETER(DB1.OHE_Unused_Text_1);
     PARAMETER(DB1.OHE_Unused_Text_2);
     PARAMETER(DB1.OHE_Customer_Vendor_f_PO);
     PARAMETER(DB1.OHE_EDI_824_AES_ITN_#);
     PARAMETER(DB1.OHE_Unused_Text_5);
     PARAMETER(DB1.OHE_Unused_Date_1);
     PARAMETER(DB1.OHE_Unused_Date_2);
     PARAMETER(DB1.EDI_Status_1);
     PARAMETER(DB1.EDI_Status_2);
     PARAMETER(DB1.EDI_Status_3);
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Normal
      PGM.*Return_code = *BLANK;

      //?USER: Processing before Data update

      // DB1.Job Time = JOB.*Job time
      DB1.Job_Time = JOB.*Job_time;

      // DB1.Job Date = JOB.*Job date
      DB1.Job_Date = JOB.*Job_date;

      // DB1.Job Name = JOB.*PROGRAM
      DB1.Job_Name = JOB.*PROGRAM;

      // DB1.User Id = JOB.*USER
      DB1.User_Id = JOB.*USER;

     }

    }

    EXECUTE FUNCTION(Change TMS Load Event Shi) TYPE(CHGOBJ) FILE(PBCUCPP)          AC2123089;
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(DB1.TMS_Extract_Date);
    PARAMETER(DB1.TMS_Extract_Time);
    PARAMETER(DB1.TMS_Extract_File_Name);
    PARAMETER(DB1.TMS_Event_Sequence);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
    PARAMETER(DB1.TMS_Record_Status);
    PARAMETER(1);
    PARAMETER(*BLANK);
    PARAMETER(DB1.TMS_Change_Date);
    PARAMETER(DB1.TMS_Change_time);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
     PARAMETER(DB1.TMS_Record_Status);
     PARAMETER(DB1.TMS_Change_Date);
     PARAMETER(DB1.TMS_Change_time);
     {
      //?Execute internal function

      // PAR.TMS Change time = JOB.*Job time
      PAR.TMS_Change_time = JOB.*Job_time;

      // PAR.TMS Change Date = JOB.*Job date
      PAR.TMS_Change_Date = JOB.*Job_date;

     }

    }

   }

   EXECUTE FUNCTION(Change TMS Load Event) TYPE(CHGOBJ) FILE(PBCSCPP)              AC2123078;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(DB1.TMS_Event_Type);
   PARAMETER(DB1.TMS_Earliest_Date);
   PARAMETER(DB1.TMS_Earliest_Time);
   PARAMETER(DB1.TMS_Latest_Date);
   PARAMETER(DB1.TMS_Latest_Time);
   PARAMETER(DB1.TMS_Planned_Date);
   PARAMETER(DB1.TMS_Planned_Time);
   PARAMETER(DB1.TMS_Actual_Date);
   PARAMETER(DB1.TMS_Actual_Time);
   PARAMETER(DB1.TMS_Address_Type);
   PARAMETER(DB1.TMS_Location_Code);
   PARAMETER(DB1.TMS_Address_Name);
   PARAMETER(DB1.TMS_Address_Line_1);
   PARAMETER(DB1.TMS_Address_Line_2);
   PARAMETER(DB1.TMS_City);
   PARAMETER(DB1.TMS_State_Province);
   PARAMETER(DB1.TMS_Postal_Code);
   PARAMETER(DB1.TMS_Country_Code);
   PARAMETER(DB1.TMS_Weight);
   PARAMETER(DB1.TMS_Weight_UOM);
   PARAMETER(DB1.TMS_Appointment_Date);
   PARAMETER(DB1.TMS_Appointment_Time);
   PARAMETER(DB1.TMS_Actual_Car_Arrival_Dt);
   PARAMETER(DB1.TMS_Actual_Car_Arrival_Tm);
   PARAMETER(DB1.TMS_Late_Reason_Code);
   PARAMETER(DB1.TMS_Cust_Assigned_Appt_#);
   PARAMETER(DB1.TMS_Record_Status);
   PARAMETER(1);
   PARAMETER(*BLANK);
   PARAMETER(DB1.TMS_Change_Date);
   PARAMETER(DB1.TMS_Change_time);
  }

  ENDIF;

  ENDIF;

 }

 //?RMC 1/8/18 Check for multi company
 EXECUTE FUNCTION(Rtv Ld ShpCo/MultiCo  RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1909337;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Company_Number_051922);
 PARAMETER(PAR.Multi_Company_Load);
 {
  //?USER: Initialize routine

  // PAR.Multi Company Load = CND.no
  PAR.Multi_Company_Load = 'N';

  // PAR.Company Number = CON.*ZERO
  PAR.Company_Number = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Company Number is Equal to zero
  IF PAR.Company_Number = *ZERO;

  // PAR.Company Number = DB1.Company Number
  PAR.Company_Number = DB1.Company_Number;

  ENDIF;

  CASE;

  // IF PAR.Company Number NE DB1.Company Number
  IF PAR.Company_Number <> DB1.Company_Number;

  // PAR.Multi Company Load = CND.yes
  PAR.Multi_Company_Load = 'Y';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF PAR.Multi Company Load is not no
 IF PAR.Multi_Company_Load = *BLANK/'Y';

 EXECUTE FUNCTION(CHG Mult Company Flag  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC2146701;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Multi_Company_Load);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 ENDDO;

 //?Process CHANGE  if picked/shipped/invoiced, just chg LH,LD
 DO;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND PAR.Add/Change/Delete USR is Change
 AND PAR.Add_Change_Delete_USR = 'C';

 // AND PAR.Load Status is Entered,Comb,Unlck,Locked
 AND ( PAR.Load_Status = 'C'/'E'/'L'/'U';

 // OR PAR.Load Status is Shipped or Invoiced
 OR PAR.Load_Status = 'I'/'S' );

 //?Create Carrier if not found
 // LCL.Carrier Code Usr = CON.*BLANK
 LCL.Carrier_Code_Usr = *BLANK;

 CASE;

 // IF LCL.TMS Carrier SCAC is Entered
 IF LCL.TMS_Carrier_SCAC <> *BLANK;

 EXECUTE FUNCTION(RTV Carr from TPM SCAC IF) TYPE(EXCINTFUN)                     AC2072103;
 PARAMETER(LCL.TMS_Carrier_SCAC);
 PARAMETER(LCL.Carrier_Code_Usr);
 {
  //?Execute internal function

  // PAR.Carrier Code Usr = CON.*BLANK
  PAR.Carrier_Code_Usr = *BLANK;

  EXECUTE FUNCTION(RTV Carr from TPM SCAC RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC2072096;
  PARAMETER(*BLANK);
  PARAMETER(PAR.SCAC);
  PARAMETER(PAR.Carrier_Code_Usr);
  {
   //?USER: Initialize routine

   // PAR.Carrier Code Usr = CND.not entered
   PAR.Carrier_Code_Usr = *BLANK;

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // LCL.SCAC = SUBSTRING(DB1.Name,CON.1,CON.4)
   LCL.SCAC = SUBSTRING(DB1.Name:1:4);

   CASE;

   // IF PAR.SCAC EQ LCL.SCAC
   IF PAR.SCAC = LCL.SCAC;

   CASE;

   // IF DB1.Record Status is Active
   IF DB1.Record_Status = 'A';

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?reactivate it
   EXECUTE FUNCTION(CHG OM Carrier         CH) TYPE(CHGOBJ) FILE(OMFFREP)          AC1183269;
   PARAMETER(DB1.Carrier_Code);
   PARAMETER(DB1.Name);
   PARAMETER(DB1.Address_Line_1);
   PARAMETER(DB1.Address_Line_2);
   PARAMETER(DB1.Address_Line_3);
   PARAMETER(DB1.City);
   PARAMETER(DB1.Zip_Postal_Code);
   PARAMETER(DB1.Telephone_Number);
   PARAMETER(DB1.State_Code);
   PARAMETER(DB1.Carrier_Last_Used_Date);
   PARAMETER(DB1.Fax_Number);
   PARAMETER(DB1.Pallet_Balance);
   PARAMETER(DB1.Long_hook_balance);
   PARAMETER(DB1.Short_hook_balance);
   PARAMETER(DB1.Tub_Balance);
   PARAMETER(DB1.OM_Carrier_Status);
   PARAMETER(DB1.OM_Carrier_Comments_1);
   PARAMETER(DB1.OM_Carrier_Comments_2);
   PARAMETER(DB1.AP_Vendor_Number);
   PARAMETER(DB1.Home_Phone);
   PARAMETER(DB1.Other_Phone);
   PARAMETER(DB1.Flat_Rate);
   PARAMETER(DB1.Rate_Per_Pound);
   PARAMETER(DB1.Unused_Rate_Per_Stop);
   PARAMETER(DB1.Miscellaneous_Charges);
   PARAMETER(DB1.Unused_Carrier_Rating);
   PARAMETER(DB1.Unused_Mile_Range_1);
   PARAMETER(DB1.Unused_Mile_Range_2);
   PARAMETER(DB1.Unused_Mile_Range_3);
   PARAMETER(DB1.Unused_Mile_Range_4);
   PARAMETER(DB1.Unused_Mile_Range_5);
   PARAMETER(DB1.Unused_Mile_Range_6);
   PARAMETER(DB1.Unused_Mile_Rate_1);
   PARAMETER(DB1.Unused_Mile_Rate_2);
   PARAMETER(DB1.Unused_Mile_Rate_3);
   PARAMETER(DB1.Unused_Mile_Rate_4);
   PARAMETER(DB1.Unused_Mile_Rate_5);
   PARAMETER(DB1.Unused_Mile_Rate_6);
   PARAMETER(DB1.Unused_Weight_Range_1);
   PARAMETER(DB1.Unused_Weight_Range_2);
   PARAMETER(DB1.Unused_Weight_Range_3);
   PARAMETER(DB1.Unused_Weight_Range_4);
   PARAMETER(DB1.Unused_Weight_Range_5);
   PARAMETER(DB1.Unused_Weight_Range_6);
   PARAMETER(DB1.Unused_Weight_Rate_1);
   PARAMETER(DB1.Unused_Weight_Rate_2);
   PARAMETER(DB1.Unused_Weight_Rate_3);
   PARAMETER(DB1.Unused_Weight_Rate_4);
   PARAMETER(DB1.Unused_Weight_Rate_5);
   PARAMETER(DB1.Unused_Weight_Rate_6);
   PARAMETER(DB1.Contact_Number);
   PARAMETER(DB1.Certificate_of_Insurance);
   PARAMETER(DB1.Carrier_Unused_Fld_1);
   PARAMETER(DB1.Carrier_Unused_Fld_2);
   PARAMETER(DB1.Carrier_DOT_Number);
   PARAMETER(DB1.Carrier_Unused_State);
   PARAMETER(DB1.Carrier_Unused_Fld_4);
   PARAMETER(DB1.Carrier_Unused_Fld_5);
   PARAMETER(DB1.Carrier_Fed_ID_Number);
   PARAMETER(DB1.Amount_of_Cargo);
   PARAMETER(DB1.Amount_of_Liability);
   PARAMETER(DB1.Date_of_Expiration);
   PARAMETER(DB1.SSI_Download_Flag);
   PARAMETER(DB1.unused_status_2);
   PARAMETER(DB1.unused_status_3);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER('A');
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   ENDIF;

   // PAR.Carrier Code Usr = DB1.Carrier Code
   PAR.Carrier_Code_Usr = DB1.Carrier_Code;

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   QUIT;

   ENDIF;

  }

  //?Create Carrier if not found   6.30.16 E4119
  //?Create Carrier if not in master file
  CASE;

  // IF PAR.Carrier Code Usr is not entered
  IF PAR.Carrier_Code_Usr = *BLANK;

  // LCL.Carrier Code = PAR.SCAC
  LCL.Carrier_Code = PAR.SCAC;

  EXECUTE FUNCTION(Val Carrier NF        RT) TYPE(RTVOBJ) FILE(OMFFREP)           AC2123958;
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  //?Make new carrier code
  CASE;

  // IF PGM.*Return code is *Record already exists
  IF PGM.*Return_code = 'Y2U0003';

  // LCL.Text 1 Length USR = CON.0
  LCL.Text_1_Length_USR = 0;

  // LCL.Return Code Usr = CND.*Record Already Exists
  LCL.Return_Code_Usr = 'Y2U0003';

  // DOW LCL.Return Code Usr is *Record Already Exists
  DOW LCL.Return_Code_Usr = 'Y2U0003';

  // LCL.Text 2 = LCL.Carrier Code
  LCL.Text_2 = LCL.Carrier_Code;

  // LCL.Number 1.0 USR = LCL.Number 1.0 USR + CON.1
  LCL.Number_1_0_USR = LCL.Number_1_0_USR + 1;

  // LCL.Text 1 Length USR = LCL.Number 1.0 USR
  LCL.Text_1_Length_USR = LCL.Number_1_0_USR;

  // LCL.Carrier Code = CONCAT(LCL.Text 2,LCL.Text 1 Length USR,CND.*None)
  LCL.Carrier_Code = LCL.Text_2 + LCL.Text_1_Length_USR (*ZERO);

  EXECUTE FUNCTION(Val Carrier NF        RT) TYPE(RTVOBJ) FILE(OMFFREP)           AC2123958;
  PARAMETER(LCL.Carrier_Code);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

  }

  // LCL.Return Code Usr = PGM.*Return code
  LCL.Return_Code_Usr = PGM.*Return_code;

  ENDDO;

  ENDIF;

  // LCL.Name = PAR.SCAC
  LCL.Name = PAR.SCAC;

  EXECUTE FUNCTION(CRT OM Carrier         CR) TYPE(CRTOBJ) FILE(OMFFREP)          AC1183268;
  PARAMETER(LCL.Carrier_Code);
  PARAMETER(LCL.Name);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('A');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('N');
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(LCL.SSI_Download_Flag);
  PARAMETER(LCL.unused_status_2);
  PARAMETER(LCL.unused_status_3);
  PARAMETER(LCL.EDI_Status_1);
  PARAMETER(LCL.EDI_Status_2);
  PARAMETER(LCL.EDI_Status_3);
  PARAMETER('A');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

   //?USER: Processing after Data update

   // Call program Rtv Init Car w/TierStp XF.
   CALL PROGRAM(Rtv Init Car w/TierStp XF) ('PMCUXFR');
   PARAMETER(DB1.Carrier_Code);

  }

  // PAR.Carrier Code Usr = LCL.Carrier Code
  PAR.Carrier_Code_Usr = LCL.Carrier_Code;

  ENDIF;

 }

 ENDIF;

 EXECUTE FUNCTION(Rtv Chk for Unlck Chg RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2123132;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(0);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 {
  //?USER: Initialize routine

  // PAR.Status Flag 1  Y/N = CND.No
  PAR.Status_Flag_1_Y_N = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.TMS Event Type is Drop
  IF DB1.TMS_Event_Type = 'DROP';

  EXECUTE FUNCTION(Rtv Ckh Load Dtl      RT) TYPE(RTVOBJ) FILE(PBCUCPP)           AC2123133;
  PARAMETER(DB1.TMS_Load_ID);
  PARAMETER(DB1.TMS_Extract_Date);
  PARAMETER(DB1.TMS_Extract_Time);
  PARAMETER(DB1.TMS_Extract_File_Name);
  PARAMETER(DB1.TMS_Event_Sequence);
  PARAMETER(PAR.Stop_Drop_Sequence_Number);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Status_Flag_1_Y_N);
  PARAMETER(DB1.TMS_Appointment_Date);
  PARAMETER(DB1.TMS_Appointment_Time);
  PARAMETER(DB1.TMS_Late_Reason_Code);
  PARAMETER(PAR.Status_Flag_2_Y_N);
  {
   //?USER: Process Data record

   //?If order is on a different load, or no load
   EXECUTE FUNCTION(RTV Load/LdSts/Ord Sts RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1469512;
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(LCL.Company_Number);
   PARAMETER(LCL.Load_Status);
   PARAMETER(LCL.Actual_Shipped_Date);
   PARAMETER(LCL.Header_Status);
   PARAMETER(LCL.Scheduled_Ship_Date);
   PARAMETER(LCL.Load_ID);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    // PAR.Load Status = CND.*Blank
    PAR.Load_Status = *BLANK;

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    CASE;

    // IF DB1.Header Status is Confirmed & Complete
    IF DB1.Header_Status = 'C'/'R';

    // PAR.Load Status = CND.Lock
    PAR.Load_Status = 'L';

    // IF DB1.Load ID NE WRK.ZERO
    IF DB1.Load_ID <> WRK.ZERO;

    EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
    PARAMETER(DB1.Load_ID);
    PARAMETER(PAR.Load_Status);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     // PGM.*Return code = CND.*Record already exists
     PGM.*Return_code = 'Y2U0003';

     MOVE *ALL (To: PAR From: DB1);

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Load Status = CND.*Blank
    PAR.Load_Status = *BLANK;

    ENDIF;

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF PAR.TMS Load ID NE LCL.Load ID
   IF PAR.TMS_Load_ID <> LCL.Load_ID;

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   ENDIF;

   //?If stop number changed
   EXECUTE FUNCTION(RTV Chk for Unlck TMS RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2123134;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(LCL.Stop_Drop);
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(LCL.Load_Dtl_On_Time_Flag);
   PARAMETER(LCL.LD_Carrier_Appt_Date);
   PARAMETER(LCL.LD_Carrier_Appt_Time);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Stop/Drop NE DB1.TMS Event Sequence
   IF LCL.Stop_Drop <> DB1.TMS_Event_Sequence;

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

   ENDIF;

   //?LATE REASON CHANGED
   CASE;

   // IF PAR.TMS Late Reason Code is Entered
   IF PAR.TMS_Late_Reason_Code > *BLANK;

   CASE;

   // IF LCL.Load Dtl On Time Flag is On Time
   IF LCL.Load_Dtl_On_Time_Flag = 'Y';

   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   ENDIF;

   ENDIF;

   // Call program CVT *YYMD to *CYMD    XF.
   CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
   PARAMETER(LCL.Date_USR);
   PARAMETER(PAR.TMS_Appointment_Date);

   // LCL.Time = PAR.TMS Appointment Time * CON.100 *
   LCL.Time = PAR.TMS_Appointment_Time * 100;

   //?has appt date/time changed?
   CASE;

   // IF LCL.LD Carrier Appt Date NE LCL.Date                  USR
   IF LCL.LD_Carrier_Appt_Date <> LCL.Date_USR;

   // OR LCL.LD Carrier Appt Time NE LCL.Time
   OR LCL.LD_Carrier_Appt_Time <> LCL.Time;

   //?unlock not req
   // PAR.Status Flag 2  Y/N = CND.Yes
   PAR.Status_Flag_2_Y_N = 'Y';

   ENDIF;

   CASE;

   // IF PAR.Status Flag 1  Y/N is No
   IF PAR.Status_Flag_1_Y_N = 'N';

   // AND DB1.TMS Error Reason is Order Event is >=03
   AND DB1.TMS_Error_Reason = 'ORDEVT';

   EXECUTE FUNCTION(Change TMS Load Event Shi) TYPE(CHGOBJ) FILE(PBCUCPP)          AC2123089;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
   PARAMETER(DB1.TMS_Record_Status);
   PARAMETER(1);
   PARAMETER(*BLANK);
   PARAMETER(DB1.TMS_Change_Date);
   PARAMETER(DB1.TMS_Change_time);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
    PARAMETER(DB1.TMS_Record_Status);
    PARAMETER(DB1.TMS_Change_Date);
    PARAMETER(DB1.TMS_Change_time);
    {
     //?Execute internal function

     // PAR.TMS Change time = JOB.*Job time
     PAR.TMS_Change_time = JOB.*Job_time;

     // PAR.TMS Change Date = JOB.*Job date
     PAR.TMS_Change_Date = JOB.*Job_date;

    }

   }

   ENDIF;

  }

  ENDIF;

 }

 EXECUTE FUNCTION(RTV Chk for Ord RmTMS RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2128522;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Status_Flag_1_Y_N);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(*ZERO);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Ckk for Ord Rmv   RT) TYPE(RTVOBJ) FILE(PBCUCPP)           AC2128523;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.TMS_Extract_Date);
  PARAMETER(PAR.TMS_Extract_Time);
  PARAMETER(PAR.TMS_Extract_File_Name);
  PARAMETER(PAR.TMS_Event_Sequence);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Status_Flag_1_Y_N);
  {
   //?USER: Processing if Data record not found

   // PAR.Status Flag 1  Y/N = CND.Yes
   PAR.Status_Flag_1_Y_N = 'Y';

  }

 }

 //?Changes not req Unlock
 CASE;

 // IF PAR.Carrier Code NE LCL.Carrier Code Usr
 IF PAR.Carrier_Code <> LCL.Carrier_Code_Usr;

 // OR DB1.TMS Trailer Number NE PAR.Trailer Id
 OR DB1.TMS_Trailer_Number <> PAR.Trailer_Id;

 //?unlock not needed.
 // PAR.Status Flag 2  Y/N = CND.Yes
 PAR.Status_Flag_2_Y_N = 'Y';

 ENDIF;

 // Call program CVT *YYMD to *CYMD    XF.
 CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
 PARAMETER(LCL.Date_USR);
 PARAMETER(DB1.TMS_Deadline_Depart_Date);

 // LCL.Deadline Departure Time = DB1.TMS Deadline Depart Time * CON.100 *
 LCL.Deadline_Departure_Time = DB1.TMS_Deadline_Depart_Time * 100;

 //?Chg DDT not req unlock
 CASE;

 // IF PAR.Deadline Departure Date NE LCL.Date                  USR
 IF PAR.Deadline_Departure_Date <> LCL.Date_USR;

 // OR LCL.Deadline Departure Time NE PAR.Deadline Departure Time
 OR LCL.Deadline_Departure_Time <> PAR.Deadline_Departure_Time;

 //?unlock not needed.
 // PAR.Status Flag 2  Y/N = CND.Yes
 PAR.Status_Flag_2_Y_N = 'Y';

 ENDIF;

 //?Process if no ERROR
 CASE;

 // IF PAR.TMS Process Status is Error
 IF PAR.TMS_Process_Status = 2;

 //?Process if no ERROR
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Export
 CASE;

 // IF DB1.TMS Movement Type is Export
 IF DB1.TMS_Movement_Type = 'EXPORT';

 // OR PAR.Export Status Dft is yes
 OR PAR.Export_Status_Dft = 'Y';

 // PAR.Export Status = CND.yes
 PAR.Export_Status = 'Y';

 //?Export
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Export Status = CND.no
 PAR.Export_Status = 'N';

 ENDIF;

 //?Shipping Method
 CASE;

 // IF DB1.TMS Payment Method is Collect
 IF DB1.TMS_Payment_Method = 'COLLECT';

 // PAR.Shipping Method = CND.Collect Truck
 PAR.Shipping_Method = 'CT';

 //?Shipping Method
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Shipping Method = CND.Prepaid Truck
 PAR.Shipping_Method = 'PT';

 ENDIF;

 //?Load type
 CASE;

 // IF DB1.TMS Shipment Type is Bulk
 IF DB1.TMS_Shipment_Type = 'BULK';

 // PAR.Load Type = CND.Bulk
 PAR.Load_Type = 'B';

 //?Load type
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Load Type = CND.Regular
 PAR.Load_Type = 'R';

 ENDIF;

 EXECUTE FUNCTION(Rtv 1st Order Co      RT) TYPE(RTVOBJ) FILE(PBCUCPP)           AC2123098;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(1);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Scheduled_Ship_Date);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV for TMS for LH    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2123102;
  PARAMETER(PAR.Company_Number);
  PARAMETER(DB1.TMS_Order_ID);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Requested_Delivery_Date);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 EXECUTE FUNCTION(Rtv 1st Pickup for LH RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2123103;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(1);
 PARAMETER(LCL.TMS_Planned_Date);
 PARAMETER(LCL.TMS_Location_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.TMS Event Type is Pickup
  IF DB1.TMS_Event_Type = 'PICKUP';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Tot Wt for LH     RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2123114;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(1);
 PARAMETER(PAR.Gross_Weight);
 PARAMETER(LCL.Total_Load_Order_Weight);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.TMS Event Type is Pickup
  IF DB1.TMS_Event_Type = 'PICKUP';

  // PAR.Gross Weight = PAR.Gross Weight + DB1.TMS Weight
  PAR.Gross_Weight = PAR.Gross_Weight + DB1.TMS_Weight;

  EXECUTE FUNCTION(Rtv for TMS Load      RT) TYPE(RTVOBJ) FILE(PBCUCPP)           AC2123100;
  PARAMETER(DB1.TMS_Load_ID);
  PARAMETER(DB1.TMS_Extract_Date);
  PARAMETER(DB1.TMS_Extract_Time);
  PARAMETER(DB1.TMS_Extract_File_Name);
  PARAMETER(DB1.TMS_Event_Sequence);
  PARAMETER(LCL.Order_Weight_Total);
  {
   //?USER: Initialize routine

   // PAR.Order Weight Total = CON.*ZERO
   PAR.Order_Weight_Total = *ZERO;

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Order Weight TMS  RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2123101;
   PARAMETER(DB1.TMS_Order_ID);
   PARAMETER(LCL.Order_Weight_Total);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // PAR.Order Weight Total = PAR.Order Weight Total + LCL.Order Weight Total
   PAR.Order_Weight_Total = PAR.Order_Weight_Total + LCL.Order_Weight_Total;

  }

  // PAR.Total Load Order Weight = PAR.Total Load Order Weight + LCL.Order Weight Total
  PAR.Total_Load_Order_Weight = PAR.Total_Load_Order_Weight + LCL.Order_Weight_Total;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
 PARAMETER('T');
 PARAMETER(LCL.Maximum_pounds);
 PARAMETER(LCL.Minimum_pounds);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?If load weight > maximum pounds for truck, LTL for load is N else Y
 CASE;

 // IF PAR.Gross Weight GE LCL.Maximum pounds
 IF PAR.Gross_Weight >= LCL.Maximum_pounds;

 // LCL.LTL Flag = CND.No
 LCL.LTL_Flag = 'N';

 //?If load weight > maximum pounds for truck, LTL for load is N else Y
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.LTL Flag = CND.Yes
 LCL.LTL_Flag = 'Y';

 ENDIF;

 //?RMC 1/23/20 output late reason from 1st drop to update LH
 EXECUTE FUNCTION(Rtv Drop Shp St f LH  RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2123115;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(1);
 PARAMETER(LCL.TMS_State_Province);
 PARAMETER(LCL.TMS_Late_Reason_Code);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.TMS Event Type is Drop
  IF DB1.TMS_Event_Type = 'DROP';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Drop Count f/stps RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2123117;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(1);
 PARAMETER(PAR.Total_Stops);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?accum number of drops -- which equates to a stop
  CASE;

  // IF DB1.TMS Event Type is Drop
  IF DB1.TMS_Event_Type = 'DROP';

  // PAR.Total Stops = PAR.Total Stops + CON.1
  PAR.Total_Stops = PAR.Total_Stops + 1;

  ENDIF;

 }

 // PAR.Ship To State Code = LCL.TMS State Province
 PAR.Ship_To_State_Code = LCL.TMS_State_Province;

 // PAR.Ship From Warehouse = LCL.TMS Location Code
 PAR.Ship_From_Warehouse = LCL.TMS_Location_Code;

 // Call program CVT *YYMD to *CYMD    XF.
 CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
 PARAMETER(LCL.Date_USR);
 PARAMETER(DB1.TMS_Deadline_Depart_Date);

 // PAR.Deadline Departure Date = LCL.Date                  USR
 PAR.Deadline_Departure_Date = LCL.Date_USR;

 // LCL.Deadline Departure Time = DB1.TMS Deadline Depart Time * CON.100 *
 LCL.Deadline_Departure_Time = DB1.TMS_Deadline_Depart_Time * 100;

 // LCL.LH On-Time Reason Code = CND.Blank
 LCL.LH_On_Time_Reason_Code = *BLANK;

 // LCL.On Time - (Y/N) = CND.blank
 LCL.On_Time_Y_N = *BLANK;

 //?RMC 1/23/20 added this chg to update LH with 1st late reason
 CASE;

 // IF PAR.LH On-Time Reason Code is Blank
 IF PAR.LH_On_Time_Reason_Code = *BLANK;

 CASE;

 // IF NOT LCL.TMS Late Reason Code is NS
 IF ! LCL.TMS_Late_Reason_Code = 'NS';

 // AND LCL.TMS Late Reason Code is Entered
 AND LCL.TMS_Late_Reason_Code > *BLANK;

 // LCL.LH On-Time Reason Code = LCL.TMS Late Reason Code
 LCL.LH_On_Time_Reason_Code = LCL.TMS_Late_Reason_Code;

 // LCL.On Time - (Y/N) = CND.no
 LCL.On_Time_Y_N = 'N';

 ENDIF;

 //?RMC 1/23/20 added this chg to update LH with 1st late reason
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?upd with what was already there - dont change if not blank
 // LCL.LH On-Time Reason Code = PAR.LH On-Time Reason Code
 LCL.LH_On_Time_Reason_Code = PAR.LH_On_Time_Reason_Code;

 // LCL.On Time - (Y/N) = PAR.On Time - (Y/N)
 LCL.On_Time_Y_N = PAR.On_Time_Y_N;

 ENDIF;

 EXECUTE FUNCTION(RTV Chg from TMS      RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2123124;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(LCL.LTL_Flag);
 PARAMETER(PAR.Load_Status);
 PARAMETER(DB1.TMS_Temperature);
 PARAMETER(LCL.Total_Load_Order_Weight);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(LCL.Carrier_Code_Usr);
 PARAMETER(LCL.Truck_Size);
 PARAMETER(PAR.Ship_Status);
 PARAMETER(PAR.Load_Type);
 PARAMETER(LCL.Product_Temperature);
 PARAMETER(DB1.TMS_Carrier_Distance);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Gross_Weight);
 PARAMETER(LCL.Carrier_Code_Usr);
 PARAMETER(PAR.Export_Status);
 PARAMETER(LCL.On_Time_Y_N);
 PARAMETER(*ZERO);
 PARAMETER(DB1.TMS_Booking_Number);
 PARAMETER(DB1.TMS_Container_Number);
 PARAMETER(PAR.LH_Carrier_Payment_Sts);
 PARAMETER(PAR.Requested_Delivery_Date);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(LCL.Deadline_Departure_Time);
 PARAMETER(PAR.Load_Shag_Flag);
 PARAMETER(PAR.Load_Wash_Flag);
 PARAMETER(DB1.TMS_Temperature_UOM);
 PARAMETER(PAR.Multi_Company_Load);
 PARAMETER(LCL.LH_On_Time_Reason_Code);
 PARAMETER(PAR.LPT_Load_Plan_Start_Dt);
 PARAMETER(PAR.LPT_Load_Plan_Start_Tm);
 PARAMETER(DB1.TMS_Trailer_Number);
 PARAMETER(PAR.Status_Flag_2_Y_N);
 {
  //?USER: Process Data record

  CASE;

  // IF PAR.Company Number NE DB1.Company Number
  IF PAR.Company_Number <> DB1.Company_Number;

  // OR PAR.Scheduled Ship Date NE DB1.Scheduled Ship Date
  OR PAR.Scheduled_Ship_Date <> DB1.Scheduled_Ship_Date;

  // OR PAR.Total Load Order Weight NE DB1.Total Load Order Weight
  OR PAR.Total_Load_Order_Weight <> DB1.Total_Load_Order_Weight;

  // OR PAR.Total Stops NE DB1.Total Stops
  OR PAR.Total_Stops <> DB1.Total_Stops;

  // OR PAR.TMS Trailer Number NE DB1.Trailer Id
  OR PAR.TMS_Trailer_Number <> DB1.Trailer_Id;

  // OR PAR.Carrier Code NE DB1.Carrier Code
  OR PAR.Carrier_Code <> DB1.Carrier_Code;

  // OR PAR.Total Load Miles NE DB1.Total Load Miles
  OR PAR.Total_Load_Miles <> DB1.Total_Load_Miles;

  // OR PAR.Ship From Warehouse NE DB1.Ship From Warehouse
  OR PAR.Ship_From_Warehouse <> DB1.Ship_From_Warehouse;

  // OR PAR.Ship To State Code NE DB1.Ship To State Code
  OR PAR.Ship_To_State_Code <> DB1.Ship_To_State_Code;

  // OR PAR.Multi Company Load NE DB1.Multi Company Load
  OR PAR.Multi_Company_Load <> DB1.Multi_Company_Load;

  // OR PAR.Total Load Order Weight NE DB1.Total Load Order Weight
  OR PAR.Total_Load_Order_Weight <> DB1.Total_Load_Order_Weight;

  // OR PAR.Deadline Departure Date NE DB1.Deadline Departure Date
  OR PAR.Deadline_Departure_Date <> DB1.Deadline_Departure_Date;

  // OR PAR.Deadline Departure Time NE DB1.Deadline Departure Time
  OR PAR.Deadline_Departure_Time <> DB1.Deadline_Departure_Time;

  // OR DB1.Reefer Temperature NE PAR.Reefer Temperature
  OR DB1.Reefer_Temperature <> PAR.Reefer_Temperature;

  // OR DB1.Shipping Temp C/F txt NE PAR.Shipping Temp C/F txt
  OR DB1.Shipping_Temp_C_F_txt <> PAR.Shipping_Temp_C_F_txt;

  // OR PAR.Gross Weight NE DB1.Gross Weight
  OR PAR.Gross_Weight <> DB1.Gross_Weight;

  // OR PAR.LH On-Time Reason Code NE DB1.LH On-Time Reason Code
  OR PAR.LH_On_Time_Reason_Code <> DB1.LH_On_Time_Reason_Code;

  //?RMC 1/23/20 added on time reason check and update below
  //?Carrier Change - output change log
  CASE;

  // IF DB1.Carrier Code NE PAR.Carrier Code
  IF DB1.Carrier_Code <> PAR.Carrier_Code;

  //?Output the Load Header changes to Load order change log
  DO;

  //?Change to Carrier
  // WRK.Load Change Type = CND.Carrier Change
  WRK.Load_Change_Type = 'CARCHG';

  // WRK.Department Control Code = CND.Traffic Dept
  WRK.Department_Control_Code = 'TRF';

  // WRK.Change Log Prior Val Usr1 = CVTVAR(DB1.Carrier Code)
  WRK.Change_Log_Prior_Val_Usr1 = CVTVAR(DB1.Carrier_Code);

  // WRK.Change Log New VL Usr 2 = CVTVAR(PAR.Carrier Code)
  WRK.Change_Log_New_VL_Usr_2 = CVTVAR(PAR.Carrier_Code);

  // Call program CRT Load/Order Chg Log XF.
  CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Load_Change_Type);
  PARAMETER(WRK.Department_Control_Code);
  PARAMETER(WRK.Change_Log_Prior_Val_Usr1);
  PARAMETER(WRK.Change_Log_New_VL_Usr_2);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(DB1.Company_Number);
  PARAMETER(*ZERO);

  ENDDO;

  ENDIF;

  CASE;

  // IF DB1.Load Status is Shipped or Invoiced
  IF DB1.Load_Status = 'I'/'S';

  //?dont change if S/I already
  // WRK.Total Load Order Weight = DB1.Total Load Order Weight
  WRK.Total_Load_Order_Weight = DB1.Total_Load_Order_Weight;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Total Load Order Weight = PAR.Total Load Order Weight
  WRK.Total_Load_Order_Weight = PAR.Total_Load_Order_Weight;

  ENDIF;

  //?Dont update LH Trailer with a blank from MG
  CASE;

  // IF PAR.TMS Trailer Number is Not Entered
  IF PAR.TMS_Trailer_Number = *BLANK;

  // LCL.Trailer Id = DB1.Trailer Id
  LCL.Trailer_Id = DB1.Trailer_Id;

  //?Dont update LH Trailer with a blank from MG
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Trailer Id = PAR.TMS Trailer Number
  LCL.Trailer_Id = PAR.TMS_Trailer_Number;

  ENDIF;

  EXECUTE FUNCTION(CHG For TMS           CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2123123;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.LTL_Flag);
  PARAMETER(PAR.Load_Status);
  PARAMETER(PAR.Reefer_Temperature);
  PARAMETER(WRK.Total_Load_Order_Weight);
  PARAMETER(DB1.Allocate_Pounds_Miles);
  PARAMETER(PAR.Total_Stops);
  PARAMETER(LCL.Trailer_Id);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(DB1.Truck_Size);
  PARAMETER(DB1.Ship_Status);
  PARAMETER(PAR.Load_Type);
  PARAMETER(DB1.Actual_Departure_Date);
  PARAMETER(DB1.Departure_Time);
  PARAMETER(DB1.Schedule_Sequence_Number);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Shipping_Method);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Gross_Weight);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Export_Status);
  PARAMETER(PAR.On_Time_Y_N);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  PARAMETER(PAR.Load_Shag_Flag);
  PARAMETER(PAR.Load_Wash_Flag);
  PARAMETER(PAR.Shipping_Temp_C_F_txt);
  PARAMETER(PAR.Multi_Company_Load);
  PARAMETER(DB1.TPM_Shipment_Status);
  PARAMETER(PAR.LH_On_Time_Reason_Code);
  PARAMETER(PAR.LPT_Load_Plan_Start_Dt);
  PARAMETER(PAR.LPT_Load_Plan_Start_Tm);
  PARAMETER(LCL.TPM_Planned_Ship_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*JOB
    PAR.Job_Name = JOB.*JOB;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  // PAR.Status Flag 2  Y/N = CND.Yes
  PAR.Status_Flag_2_Y_N = 'Y';

  ENDIF;

 }

 CASE;

 // IF PAR.Event Code SavUsr is Shipped Thru 07 History
 IF PAR.Event_Code_SavUsr >= '04';
 AND PAR.Event_Code_SavUsr <= '07';

 // OR PAR.Status Flag 2  Y/N is Yes
 OR ( PAR.Status_Flag_2_Y_N = 'Y';

 // AND PAR.Status Flag 1  Y/N is No
 AND PAR.Status_Flag_1_Y_N = 'N' );

 //?Cant change order if picked thru invoiced 8/17
 //?   change load detail only --- dont recreate
 //?R17040 DN 03/01/21-Passed in TMS Carrier Ref PRO/Inv.
 EXECUTE FUNCTION(Rtv Chg Load Dtl      RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2126646;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(0);
 PARAMETER(LCL.TMS_Carrier_SCAC);
 PARAMETER(DB1.TMS_Trailer_Number);
 PARAMETER(DB1.TMS_Container_Number);
 PARAMETER(DB1.TMS_Move_Type);
 PARAMETER(DB1.TMS_Vessel_Name);
 PARAMETER(DB1.TMS_Voyage_Number);
 PARAMETER(DB1.TMS_Booking_Number);
 PARAMETER(DB1.TMS_OTR_Destination_Name);
 PARAMETER(DB1.TMS_OTR_Destination_Addr1);
 PARAMETER(DB1.TMS_OTR_Destination_Addr2);
 PARAMETER(DB1.TMS_OTR_Destination_City);
 PARAMETER(DB1.TMS_OTR_Destination_State);
 PARAMETER(DB1.TMS_OTR_Destination_Zip);
 PARAMETER(DB1.TMS_OTR_Destination_Cntry);
 PARAMETER(DB1.TMS_Vessel_ETD_Date);
 PARAMETER(DB1.TMS_Vessel_ETA_Date);
 PARAMETER(DB1.TMS_Carrier_Ref_PRO_Inv);
 PARAMETER(LCL.Carrier_Code_Usr);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(DB1.TMS_Deadline_Depart_Time);
 PARAMETER(PAR.Add_Change_Delete_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.TMS Event Type is Pickup
  IF DB1.TMS_Event_Type = 'PICKUP';

  CASE;

  // IF DB1.TMS Address Type is Warehouse
  IF DB1.TMS_Address_Type = 'WAREHOUSE';

  EXECUTE FUNCTION(Change TMS Load Event) TYPE(CHGOBJ) FILE(PBCSCPP)              AC2123078;
  PARAMETER(DB1.TMS_Load_ID);
  PARAMETER(DB1.TMS_Extract_Date);
  PARAMETER(DB1.TMS_Extract_Time);
  PARAMETER(DB1.TMS_Extract_File_Name);
  PARAMETER(DB1.TMS_Event_Sequence);
  PARAMETER(DB1.TMS_Event_Type);
  PARAMETER(DB1.TMS_Earliest_Date);
  PARAMETER(DB1.TMS_Earliest_Time);
  PARAMETER(DB1.TMS_Latest_Date);
  PARAMETER(DB1.TMS_Latest_Time);
  PARAMETER(DB1.TMS_Planned_Date);
  PARAMETER(DB1.TMS_Planned_Time);
  PARAMETER(DB1.TMS_Actual_Date);
  PARAMETER(DB1.TMS_Actual_Time);
  PARAMETER(DB1.TMS_Address_Type);
  PARAMETER(DB1.TMS_Location_Code);
  PARAMETER(DB1.TMS_Address_Name);
  PARAMETER(DB1.TMS_Address_Line_1);
  PARAMETER(DB1.TMS_Address_Line_2);
  PARAMETER(DB1.TMS_City);
  PARAMETER(DB1.TMS_State_Province);
  PARAMETER(DB1.TMS_Postal_Code);
  PARAMETER(DB1.TMS_Country_Code);
  PARAMETER(DB1.TMS_Weight);
  PARAMETER(DB1.TMS_Weight_UOM);
  PARAMETER(DB1.TMS_Appointment_Date);
  PARAMETER(DB1.TMS_Appointment_Time);
  PARAMETER(DB1.TMS_Actual_Car_Arrival_Dt);
  PARAMETER(DB1.TMS_Actual_Car_Arrival_Tm);
  PARAMETER(DB1.TMS_Late_Reason_Code);
  PARAMETER(DB1.TMS_Cust_Assigned_Appt_#);
  PARAMETER(DB1.TMS_Record_Status);
  PARAMETER(1);
  PARAMETER(*BLANK);
  PARAMETER(DB1.TMS_Change_Date);
  PARAMETER(DB1.TMS_Change_time);
  //?R17040 DN 03/01/21-Passed in TMS Carrier Ref PRO/Inv.
  EXECUTE FUNCTION(Rtv Drops to Chg LD   RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2126652;
  PARAMETER(DB1.TMS_Load_ID);
  PARAMETER(DB1.TMS_Extract_Date);
  PARAMETER(DB1.TMS_Extract_Time);
  PARAMETER(DB1.TMS_Extract_File_Name);
  PARAMETER(PAR.TMS_Carrier_SCAC);
  PARAMETER(PAR.TMS_Trailer_Number);
  PARAMETER(PAR.TMS_Container_Number);
  PARAMETER(PAR.TMS_Move_Type);
  PARAMETER(PAR.TMS_Vessel_Name);
  PARAMETER(PAR.TMS_Voyage_Number);
  PARAMETER(PAR.TMS_Booking_Number);
  PARAMETER(PAR.TMS_OTR_Destination_Name);
  PARAMETER(PAR.TMS_OTR_Destination_Addr1);
  PARAMETER(PAR.TMS_OTR_Destination_Addr2);
  PARAMETER(PAR.TMS_OTR_Destination_City);
  PARAMETER(PAR.TMS_OTR_Destination_State);
  PARAMETER(PAR.TMS_OTR_Destination_Zip);
  PARAMETER(PAR.TMS_OTR_Destination_Cntry);
  PARAMETER(PAR.TMS_Vessel_ETD_Date);
  PARAMETER(PAR.TMS_Vessel_ETA_Date);
  PARAMETER(PAR.TMS_Carrier_Ref_PRO_Inv);
  PARAMETER(PAR.Carrier_Code_Usr);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.TMS_Deadline_Depart_Time);
  PARAMETER(PAR.Add_Change_Delete_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?R17040 DN 03/01/21-Passed in TMS Carrier Ref PRO/Inv & TMS Cust Asgn Appt#
   EXECUTE FUNCTION(Rtv Chg Load Dtl      RT) TYPE(RTVOBJ) FILE(PBCUCPP)           AC2126649;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(DB1.TMS_Appointment_Date);
   PARAMETER(DB1.TMS_Appointment_Time);
   PARAMETER(DB1.TMS_Actual_Car_Arrival_Dt);
   PARAMETER(DB1.TMS_Actual_Car_Arrival_Tm);
   PARAMETER(DB1.TMS_Late_Reason_Code);
   PARAMETER(DB1.TMS_Cust_Assigned_Appt_#);
   PARAMETER(PAR.Deadline_Departure_Date);
   PARAMETER(PAR.TMS_Deadline_Depart_Time);
   PARAMETER(PAR.Carrier_Code_Usr);
   PARAMETER(PAR.TMS_Carrier_Ref_PRO_Inv);
   {
    //?USER: Initialize routine

    //?Changes and comments
    DO;

    //?* 04/24/2017 LJB E009492  IF TMS Appointment Date is entered see if
    //?*    Original Appointment Date is entered. If not then this is the
    //?*    first entry. Update OHE. This should be done in the CRT routine
    //?*    but this should catch it if it gets missed.
    ENDDO;

    //?USER: Process Data record

    // LCL.LD Carrier Appt Date = CON.*ZERO
    LCL.LD_Carrier_Appt_Date = *ZERO;

    // LCL.Actual Delivery Date = CON.*ZERO
    LCL.Actual_Delivery_Date = *ZERO;

    // LCL.Original Appt Confirm Dt = CON.*ZERO
    LCL.LD_Unused_Date_2 = *ZERO;

    CASE;

    // IF PAR.TMS Appointment Date is entered
    IF PAR.TMS_Appointment_Date > *ZERO;

    // Call program CVT *YYMD to *CYMD    XF.
    CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
    PARAMETER(LCL.LD_Carrier_Appt_Date);
    PARAMETER(PAR.TMS_Appointment_Date);

    ENDIF;

    // LCL.LD Carrier Appt Time = PAR.TMS Appointment Time * CON.100 *
    LCL.LD_Carrier_Appt_Time = PAR.TMS_Appointment_Time * 100;

    //?If TMS Appointment Date is entered                    E009492
    CASE;

    // IF PAR.TMS Appointment Date is entered
    IF PAR.TMS_Appointment_Date > *ZERO;

    EXECUTE FUNCTION(Rtv Co and Load       RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2125070;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(NLL.Load_ID);
    PARAMETER(NLL.Event_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // Call program RTV Orig Appt Dte/Tme  XF.
    CALL PROGRAM(RTV Orig Appt Dte/Tme  XF) ('PUA4XFR');
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(WRK.Original_Appointment_Date);
    PARAMETER(WRK.Original_Appointment_Time);

    //?* Only update Orig Appt date/time if it is zeros      E009492
    CASE;

    // IF WRK.Original Appointment Date is Equal to zero
    IF WRK.Original_Appointment_Date = *ZERO;

    //?* Convert tms appt date from 8.0 to 6.0
    EXECUTE FUNCTION(CVT *YYMD to *YMD     IF) TYPE(EXCINTFUN)                      AC2133495;
    PARAMETER(PAR.TMS_Appointment_Date);
    PARAMETER(LCL.Date_Out_60_USR);
    {
     //?Execute internal function

     //?** Convert incoming date to alpha
     // PAR.Date (Char-8) USR = CVTVAR(PAR.DATE)
     PAR.Date_Char_8_USR = CVTVAR(PAR.DATE);

     //?** Retrieve yymmdd into another alpha field
     // PAR.Date (Char-6) USR = SUBSTRING(PAR.Date (Char-8) USR,CON.3,CON.6)
     PAR.Date_Char_6_USR = SUBSTRING(PAR.Date_Char_8_USR:3:6);

     //?** Convert 6 char date to 6.0 and put in par to return
     // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
     PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

    }

    //?* Save carrier appt date in original appointment date in OHE E009492
    // LCL.Original Appointment Date = LCL.Date Out (6,0) USR
    LCL.Original_Appointment_Date = LCL.Date_Out_60_USR;

    //?* Save carrier appt time in original appointment time in OHE  E009492
    // LCL.Original Appointment Time = PAR.TMS Appointment Time * CON.100 *
    LCL.Original_Appointment_Time = PAR.TMS_Appointment_Time * 100;

    //?* Update OHE original date & time                     E009492
    EXECUTE FUNCTION(CHG Orig Appt Dt/Tm   CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC2133490;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(LCL.Original_Appointment_Date);
    PARAMETER(LCL.Original_Appointment_Time);
    {
     //?USER: Processing before Data update

     // DB1.Job Time = JOB.*Job time
     DB1.Job_Time = JOB.*Job_time;

     // DB1.Job Date = JOB.*Job date
     DB1.Job_Date = JOB.*Job_date;

     // DB1.Job Name = JOB.*PROGRAM
     DB1.Job_Name = JOB.*PROGRAM;

     // DB1.User Id = JOB.*USER
     DB1.User_Id = JOB.*USER;

    }

    ENDIF;

    ENDIF;

    CASE;

    // IF PAR.TMS Actual Car Arrival Dt is entered
    IF PAR.TMS_Actual_Car_Arrival_Dt > *ZERO;

    // Call program CVT *YYMD to *CYMD    XF.
    CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
    PARAMETER(LCL.Actual_Delivery_Date);
    PARAMETER(PAR.TMS_Actual_Car_Arrival_Dt);

    ENDIF;

    // LCL.Actual Delivery time = PAR.TMS Actual Car Arrival Tm * CON.100 *
    LCL.Actual_Delivery_time = PAR.TMS_Actual_Car_Arrival_Tm * 100;

    // LCL.Deadline Depart Time  HDR = PAR.TMS Deadline Depart Time * CON.100 *
    LCL.Deadline_Depart_Time_HDR = PAR.TMS_Deadline_Depart_Time * 100;

    CASE;

    // IF PAR.TMS Late Reason Code is Entered
    IF PAR.TMS_Late_Reason_Code > *BLANK;

    CASE;

    // IF PAR.TMS Late Reason Code is NS
    IF PAR.TMS_Late_Reason_Code = 'NS';

    // LCL.Load Dtl On Time Flag = CND.Blank
    LCL.Load_Dtl_On_Time_Flag = *BLANK;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Load Dtl On Time Flag = CND.Not On Time
    LCL.Load_Dtl_On_Time_Flag = 'N';

    ENDIF;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Load Dtl On Time Flag = CND.Blank
    LCL.Load_Dtl_On_Time_Flag = *BLANK;

    ENDIF;

    //?R17040 DN 03/01/21-Passed in TMS Carrier Ref PRO/Inv & TMS Cust Asgn Appt#
    EXECUTE FUNCTION(RTV Chg LD for TMS chg RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC2126647;
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(LCL.Actual_Delivery_Date);
    PARAMETER(LCL.Actual_Delivery_time);
    PARAMETER(PAR.Deadline_Departure_Date);
    PARAMETER(LCL.Deadline_Depart_Time_HDR);
    PARAMETER(LCL.Load_Dtl_On_Time_Flag);
    PARAMETER(LCL.LD_Carrier_Appt_Date);
    PARAMETER(LCL.LD_Carrier_Appt_Time);
    PARAMETER(PAR.TMS_Carrier_Ref_PRO_Inv);
    PARAMETER(PAR.TMS_Cust_Assigned_Appt_#);
    {
     //?USER: Process Data record

     //?R17040 DN 03/01/21-Don't Blank Out if TMS Carrier Ref PRO/Inv Exist.
     CASE;

     // IF DB1.Carrier Ref PRO/Inv is Not Entered
     IF DB1.Carrier_Ref_PRO_Inv = *BLANK;

     // LCL.Carrier Ref PRO/Inv = PAR.Carrier Ref PRO/Inv
     LCL.Carrier_Ref_PRO_Inv = PAR.Carrier_Ref_PRO_Inv;

     //?R17040 DN 03/01/21-Don't Blank Out if TMS Carrier Ref PRO/Inv Exist.
     // IF *OTHERWISE
     IF *OTHERWISE;

     // LCL.Carrier Ref PRO/Inv = DB1.Carrier Ref PRO/Inv
     LCL.Carrier_Ref_PRO_Inv = DB1.Carrier_Ref_PRO_Inv;

     ENDIF;

     //?R17040 DN 03/01/21-Don't Blank Out if TMS Cust Assigned Appt # Exist.
     CASE;

     // IF DB1.Cust Assigned Appt # is Not Entered
     IF DB1.Cust_Assigned_Appt_# = *BLANK;

     // LCL.Cust Assigned Appt # = PAR.Cust Assigned Appt #
     LCL.Cust_Assigned_Appt_# = PAR.Cust_Assigned_Appt_#;

     //?R17040 DN 03/01/21-Don't Blank Out if TMS Cust Assigned Appt # Exist.
     // IF *OTHERWISE
     IF *OTHERWISE;

     // LCL.Cust Assigned Appt # = DB1.Cust Assigned Appt #
     LCL.Cust_Assigned_Appt_# = DB1.Cust_Assigned_Appt_#;

     ENDIF;

     //?R17040 DN 03/01/21-Update Carrier Ref PRO/Inv & Cust Assigned Appt #.
     EXECUTE FUNCTION(CHG LD for TMS chg    CH) TYPE(CHGOBJ) FILE(OMFLCPP)           AC2126648;
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Stop_Drop_Sequence_Number);
     PARAMETER(DB1.Stop_Drop);
     PARAMETER(PAR.Miles_to_next_stop);
     PARAMETER(DB1.Order_Number);
     PARAMETER(PAR.Actual_Delivery_Date);
     PARAMETER(PAR.Actual_Delivery_time);
     PARAMETER(PAR.Deadline_Depart_DT_HDR);
     PARAMETER(PAR.Deadline_Depart_Time_HDR);
     PARAMETER(PAR.Load_Dtl_On_Time_Flag);
     PARAMETER(PAR.LD_Carrier_Appt_Date);
     PARAMETER(PAR.LD_Carrier_Appt_Time);
     PARAMETER(LCL.Carrier_Ref_PRO_Inv);
     PARAMETER(LCL.Cust_Assigned_Appt_#);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     //?added 1/10/17
     EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(PAR.Deadline_Depart_DT_HDR);
     PARAMETER(PAR.Deadline_Depart_Time_HDR);
     {
      //?USER: Process Data record

      EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Order_Number);
      PARAMETER(DB1.Order_Sequence_Number);
      PARAMETER(DB1.Order_Secondary_Line_Seq);
      PARAMETER(PAR.Deadline_Depart_Date_LH);
      PARAMETER(PAR.Deadline_Depart_Time_LH);
      {
       //?USER: Processing before Data update

       EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
       PARAMETER(DB1.Job_Time);
       PARAMETER(DB1.User_Id);
       PARAMETER(DB1.Job_Name);
       PARAMETER(DB1.Job_Date);
       {
        //?Execute internal function

        // PAR.Job Time = JOB.*Job time
        PAR.Job_Time = JOB.*Job_time;

        // PAR.User Id = JOB.*USER
        PAR.User_Id = JOB.*USER;

        // PAR.Job Name = JOB.*JOB
        PAR.Job_Name = JOB.*JOB;

        // PAR.Job Date = JOB.*Job date
        PAR.Job_Date = JOB.*Job_date;

       }

      }

     }

    }

    // Call program RTV Chg TMS Load Late XF.
    CALL PROGRAM(RTV Chg TMS Load Late XF) ('PBYJXFR');
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(PAR.TMS_Late_Reason_Code);

    //?Chg OH Carrier ONLY  12/20/16
    EXECUTE FUNCTION(RTV Chg Carrier       RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2130390;
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(PAR.Carrier_Code_Usr);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Carrier Code NE PAR.Carrier Code Usr
     IF DB1.Carrier_Code <> PAR.Carrier_Code_Usr;

     EXECUTE FUNCTION(CHG Carrier only      CH) TYPE(CHGOBJ) FILE(OPBFCPP)           AC2130392;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(PAR.Carrier_Code_Usr);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*PROGRAM
       PAR.Job_Name = JOB.*PROGRAM;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

      // Call program TRG Order Hdr CHG Trig XT.
      CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Order_Number);
      PARAMETER(DB1.Order_Type_Sales);
      PARAMETER(DB1.AR_Customer_Number);
      PARAMETER(DB1.Ship_To_Customer);
      PARAMETER(DB1.Ship_To_Name);
      PARAMETER(DB1.Ship_To_Address_Line_1);
      PARAMETER(DB1.Ship_To_Address_Line_2);
      PARAMETER(DB1.Ship_To_Address_Line_3);
      PARAMETER(DB1.Ship_To_City);
      PARAMETER(DB1.Ship_To_State_Code);
      PARAMETER(DB1.Ship_To_Zip_Postal_Code);
      PARAMETER(DB1.Bill_to_Customer);
      PARAMETER(DB1.Bill_to_Name);
      PARAMETER(DB1.Bill_to_Address_Line_1);
      PARAMETER(DB1.Bill_to_Address_Line_2);
      PARAMETER(DB1.Bill_to_Address_Line_3);
      PARAMETER(DB1.Bill_to_City);
      PARAMETER(DB1.Bill_to_State_Code);
      PARAMETER(DB1.Bill_to_Zip_Postal_Code);
      PARAMETER(DB1.Customer_Purchase_Order_#);
      PARAMETER(DB1.Order_Date);
      PARAMETER(DB1.Requested_Ship_Date);
      PARAMETER(DB1.Actual_Shipped_Date);
      PARAMETER(DB1.Cancel_Date);
      PARAMETER(DB1.Terms_Code);
      PARAMETER(DB1.Special_Instructions);
      PARAMETER(DB1.Special_Instructions_2);
      PARAMETER(DB1.Carrier_Code);
      PARAMETER(DB1.Comment_Print_Acknowledge);
      PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
      PARAMETER(DB1.Comment_Print_Pick_Slip);
      PARAMETER(DB1.Comment_Print_Ship_Doc);
      PARAMETER(DB1.Reason_Code);
      PARAMETER(DB1.Order_in_Use);
      PARAMETER(DB1.Header_Status);
      PARAMETER(DB1.Header_Status_Last);
      PARAMETER(DB1.Order_Type_Print_Status);
      PARAMETER(DB1.Scheduled_Ship_Date);
      PARAMETER(DB1.User_Original_Entry);
      PARAMETER(DB1.Date_of_Original_Entry);
      PARAMETER(DB1.Order_Value_Total);
      PARAMETER(DB1.Order_Weight_Total);
      PARAMETER(DB1.Credit_Hold);
      PARAMETER(DB1.Production_Hold);
      PARAMETER(DB1.New_Customer_Hold);
      PARAMETER(DB1.Requested_Delivery_Date);
      PARAMETER(DB1.Requested_Delivery_Time);
      PARAMETER(DB1.Accounts_Receiv_Ent_1);
      PARAMETER(DB1.Accounts_Receiv_Ent_2);
      PARAMETER(DB1.Load_ID);
      PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
      PARAMETER(DB1.Rated_Freight);
      PARAMETER(DB1.LTL_Flag);
      PARAMETER(DB1.Price_Audit);
      PARAMETER(DB1.Price_Status);
      PARAMETER(DB1.Shipping_Method);
      PARAMETER(DB1.Export_Status);
      PARAMETER(DB1.Palletize);
      PARAMETER(DB1.Shrink_Wrap);
      PARAMETER(DB1.Slip_Sheet);
      PARAMETER(DB1.Age_Code);
      PARAMETER(DB1.Reefer_Temperature);
      PARAMETER(DB1.Load_Type);
      PARAMETER(DB1.Attach_to_Invoice_Number);
      PARAMETER(DB1.Load_Plan_Order);
      PARAMETER(DB1.Print_Pick_Slip);
      PARAMETER(DB1.Resell_Reference_Number);
      PARAMETER(DB1.Special_Comment_1);
      PARAMETER(DB1.Special_Comment_2);
      PARAMETER(DB1.Affect_Auto_Accruals);
      PARAMETER(DB1.Sales_Route_Code);
      PARAMETER(DB1.Manager_Level_Code);
      PARAMETER(DB1.VP_Level_Code);
      PARAMETER(DB1.Attach_to_Order_Number);
      PARAMETER(DB1.Reason_for_Price_Audit);
      PARAMETER(DB1.Invoice_Number);
      PARAMETER(DB1.Invoice_Suffix);
      PARAMETER(DB1.Invoice_Date);
      PARAMETER(DB1.Event_Code);
      PARAMETER(DB1.Trans_Contol_AS400_Plant);
      PARAMETER(DB1.Modified_Flag);
      PARAMETER(DB1.A_R_order_Value_Total);
      PARAMETER(DB1.Billing_Activity_Type);
      PARAMETER(DB1.Block_Order_Flag);
      PARAMETER(DB1.Order_Certification_Flag);
      PARAMETER(DB1.Invoice_Order_Value_Tot);
      PARAMETER(DB1.Process_Sts_for_3C);
      PARAMETER(DB1.Order_Conf_Fax_Sts);
      PARAMETER(DB1.Manifest_Fax_Sts);
      PARAMETER(DB1.Invoice_Fax_Sts);
      PARAMETER(DB1.Transfer_in_Storage_Ind);
      PARAMETER(DB1.Email_Cust_On_Order_Ship);
      PARAMETER(DB1.Order_Emailed);
      PARAMETER(DB1.Export_Docs_Go_w_Driver);
      PARAMETER(DB1.Shipping_Temp_Code_C_F);
      PARAMETER(DB1.Broker_Order_Status);
      PARAMETER(DB1.Air_Freight_Order);
      PARAMETER(DB1.Order_Requires_Review);
      PARAMETER(DB1.OH_Load_Plan_Ready);
      PARAMETER(DB1.Export_USDA_Approved);
      PARAMETER(DB1.HPB_Ship_to_Warehouse);
      PARAMETER(DB1.OH_TF_Exempt_Code);
      PARAMETER(DB1.OH_Appt_Confirmation_Dt);
      PARAMETER(DB1.JPN_Invoice_Issuance_Date);
      PARAMETER(DB1.Load_Actual_Shipped_Date);
      PARAMETER(DB1.Load_BOL_Complete_Date);
      PARAMETER(DB1.Load_Truck_Departure_Date);
      PARAMETER(DB1.Maximum_Gross_Weight);
      PARAMETER(DB1.Time_of_Original_Entry);
      PARAMETER(DB1.OH_Appt_Confirmation_Tm);
      PARAMETER(DB1.Load_BOL_Complete_Time);
      PARAMETER(DB1.Load_Truck_Departure_Time);
      PARAMETER(DB1.Act_Frt_Reference_Amount);
      PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
      PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
      PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
      PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
      PARAMETER(DB1.Claim_Number);
      PARAMETER(DB1.EDI_Status_1);
      PARAMETER(DB1.EDI_Status_2);
      PARAMETER(DB1.EDI_Status_3);
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);

     }

     ENDIF;

    }

    EXECUTE FUNCTION(Change TMS Load Event Shi) TYPE(CHGOBJ) FILE(PBCUCPP)          AC2123089;
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(DB1.TMS_Extract_Date);
    PARAMETER(DB1.TMS_Extract_Time);
    PARAMETER(DB1.TMS_Extract_File_Name);
    PARAMETER(DB1.TMS_Event_Sequence);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
    PARAMETER(DB1.TMS_Record_Status);
    PARAMETER(1);
    PARAMETER(*BLANK);
    PARAMETER(DB1.TMS_Change_Date);
    PARAMETER(DB1.TMS_Change_time);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
     PARAMETER(DB1.TMS_Record_Status);
     PARAMETER(DB1.TMS_Change_Date);
     PARAMETER(DB1.TMS_Change_time);
     {
      //?Execute internal function

      // PAR.TMS Change time = JOB.*Job time
      PAR.TMS_Change_time = JOB.*Job_time;

      // PAR.TMS Change Date = JOB.*Job date
      PAR.TMS_Change_Date = JOB.*Job_date;

     }

    }

   }

   EXECUTE FUNCTION(Change TMS Load Event) TYPE(CHGOBJ) FILE(PBCSCPP)              AC2123078;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(DB1.TMS_Event_Type);
   PARAMETER(DB1.TMS_Earliest_Date);
   PARAMETER(DB1.TMS_Earliest_Time);
   PARAMETER(DB1.TMS_Latest_Date);
   PARAMETER(DB1.TMS_Latest_Time);
   PARAMETER(DB1.TMS_Planned_Date);
   PARAMETER(DB1.TMS_Planned_Time);
   PARAMETER(DB1.TMS_Actual_Date);
   PARAMETER(DB1.TMS_Actual_Time);
   PARAMETER(DB1.TMS_Address_Type);
   PARAMETER(DB1.TMS_Location_Code);
   PARAMETER(DB1.TMS_Address_Name);
   PARAMETER(DB1.TMS_Address_Line_1);
   PARAMETER(DB1.TMS_Address_Line_2);
   PARAMETER(DB1.TMS_City);
   PARAMETER(DB1.TMS_State_Province);
   PARAMETER(DB1.TMS_Postal_Code);
   PARAMETER(DB1.TMS_Country_Code);
   PARAMETER(DB1.TMS_Weight);
   PARAMETER(DB1.TMS_Weight_UOM);
   PARAMETER(DB1.TMS_Appointment_Date);
   PARAMETER(DB1.TMS_Appointment_Time);
   PARAMETER(DB1.TMS_Actual_Car_Arrival_Dt);
   PARAMETER(DB1.TMS_Actual_Car_Arrival_Tm);
   PARAMETER(DB1.TMS_Late_Reason_Code);
   PARAMETER(*MISSING);
   PARAMETER(DB1.TMS_Record_Status);
   PARAMETER(1);
   PARAMETER(*BLANK);
   PARAMETER(DB1.TMS_Change_Date);
   PARAMETER(DB1.TMS_Change_time);
  }

  ENDIF;

  ENDIF;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?For Changes, delete LD, zerout load in OH  (doing this in case stops chgd)
 //?only if something is changing  (status 1=Yes)
 CASE;

 // IF PAR.Status Flag 1  Y/N is Yes
 IF PAR.Status_Flag_1_Y_N = 'Y';

 EXECUTE FUNCTION(RTV DLT for TMS Chg   RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2123136;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(PAR.Carrier_Code);
 {
  //?USER: Process Data record

  //?Zero out load id
  EXECUTE FUNCTION(RTV Chg Ld for TMS    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2123137;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('Y');
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Load to Untied TMS CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2124467;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Load_ID);
   PARAMETER(DB1.Event_Code);
   PARAMETER(PAR.OH_Load_Plan_Ready);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

  }

  //?Zero out load id ; reset load plan ready to ReSweep
  EXECUTE FUNCTION(RTV Chg for TMS Delet RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2124032;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Load_ID);
  {
   //?USER: Process Data record

   //?R15161 DN  07/23/19-Set Voyage to *BLANK.
   EXECUTE FUNCTION(CHG Order Header Exten CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC1814352;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Shipping_Line);
   PARAMETER(DB1.Port_Delv_Terminal);
   PARAMETER(DB1.OHE_City);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(DB1.OHE_Discharge_Port_Airprt);
   PARAMETER(DB1.OHE_Sail_Flight_Date);
   PARAMETER(DB1.OHE_Port_Cut_Date);
   PARAMETER(DB1.OHE_Arrival_Date);
   PARAMETER(DB1.OHE_Late_Delivery_Code);
   PARAMETER(WRK.Blank_for_3_USR);
   PARAMETER(*BLANK);
   PARAMETER(DB1.OHE_Comment_1);
   PARAMETER(DB1.OHE_Comment_2);
   PARAMETER(DB1.OHE_Unused_Number_1_11_0);
   PARAMETER(DB1.OHE_Unused_Number_2_11_0);
   PARAMETER(DB1.OHE_Unused_Number_3_11_0);
   PARAMETER(DB1.OHE_Unused_Number_4_11_0);
   PARAMETER(DB1.OHE_HPB_RIN_Equiv_Value);
   PARAMETER(DB1.OHE_HPB_RIN_Price);
   PARAMETER(DB1.Transload_Terminal_Fees);
   PARAMETER(DB1.OHE_Est_Arrv_at_Dest_Date);
   PARAMETER(DB1.OHE_Backhaul_ETA_RtrnDate);
   PARAMETER(DB1.OHE_Port_Pier_Paid_Date);
   PARAMETER(DB1.OHE_Actual_Ship_Date);
   PARAMETER(DB1.OHE_Carrier_SCAC_Code);
   PARAMETER(DB1.OHE_Spot_Buy);
   PARAMETER(DB1.OHE_PO_ACK_Flag);
   PARAMETER(DB1.OHE_Override_Type_Code);
   PARAMETER(DB1.OHE_Backhaul_Status);
   PARAMETER(DB1.OHE_Backhaul_ETA_AM_PM);
   PARAMETER(DB1.OHE_Load_Haul_Type);
   PARAMETER(DB1.OHE_Backhaul_Carrier_Code);
   PARAMETER(DB1.OHE_Bookings_Confirmed);
   PARAMETER(DB1.OHE_EDI_Error_Reasons);
   PARAMETER(DB1.OHE_EDI_Error_Reasons_2);
   PARAMETER(DB1.HPB_COA_Batch_Number);
   PARAMETER(DB1.Delivery_P_O_Number);
   PARAMETER(DB1.OHE_Intended_for_ExportCC);
   PARAMETER(DB1.OHE_EDI_943_Action);
   PARAMETER(DB1.OHE_EDI_944_Action);
   PARAMETER(DB1.OHE_EDI_940_Action);
   PARAMETER(DB1.OHE_EDI_945_Action);
   PARAMETER(DB1.OHE_EDI_856_Action);
   PARAMETER(DB1.OHE_EDI_824_Action);
   PARAMETER(DB1.OHE_Transload_Seal_Nbr);
   PARAMETER(DB1.OHE_Abs_Rate_Override_Rsn);
   PARAMETER(DB1.OHE_Appt_Confirmation_#);
   PARAMETER(DB1.OHE_Backhaul_Container#);
   PARAMETER(DB1.OHE_Backhaul_Chassis_#);
   PARAMETER(DB1.OHE_Transload_Container#);
   PARAMETER(DB1.OHE_Pier_Pass_Invoice);
   PARAMETER(DB1.OHE_Carrier_Nm);
   PARAMETER(DB1.OHE_Appt_Confirmation_Nm);
   PARAMETER(DB1.OHE_Backhaul_Comment);
   PARAMETER(DB1.Letter_of_Credit_Number);
   PARAMETER(DB1.OHE_Backhaul_Return_to_Co);
   PARAMETER(DB1.LD_Stop_Drop);
   PARAMETER(DB1.OHE_Unused_Number_3_0);
   PARAMETER(DB1.OHE_Pier_Pass_Fee_Amount);
   PARAMETER(DB1.OHE_Port_Check_Fee_Amount);
   PARAMETER(DB1.OHE_Port_Cut_Time);
   PARAMETER(DB1.OHE_Backhaul_Truck_Number);
   PARAMETER(DB1.OHE_Load_Sched_Seq_Num);
   PARAMETER(DB1.Original_Appointment_Date);
   PARAMETER(DB1.Original_Appointment_Time);
   PARAMETER(DB1.OHE_PowerPro_Load#_Outbnd);
   PARAMETER(DB1.OHE_PowerPro_Load#_Bckhl);
   PARAMETER(DB1.OHE_Unused_Numeric_9_0_3);
   PARAMETER(DB1.OHE_Orig_ABS_Freight_Rate);
   PARAMETER(DB1.OHE_Genset_Number);
   PARAMETER(DB1.OHE_Email_BOL_Sent);
   PARAMETER(DB1.OHE_EDI_Order_Automated);
   PARAMETER(DB1.OHE_EDI_601_Action);
   PARAMETER(DB1.OHE_Unused_Status_4);
   PARAMETER(DB1.OHE_Unused_Text_1);
   PARAMETER(DB1.OHE_Unused_Text_2);
   PARAMETER(DB1.OHE_Customer_Vendor_f_PO);
   PARAMETER(DB1.OHE_EDI_824_AES_ITN_#);
   PARAMETER(DB1.OHE_Unused_Text_5);
   PARAMETER(DB1.OHE_Unused_Date_1);
   PARAMETER(DB1.OHE_Unused_Date_2);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Load_ID);
    PARAMETER(PAR.Stop_Drop_Sequence_Number);
    PARAMETER(PAR.Shipping_Line);
    PARAMETER(PAR.Port_Delv_Terminal);
    PARAMETER(PAR.OHE_City);
    PARAMETER(PAR.OHE_Vessel_Airline);
    PARAMETER(PAR.OHE_Voyage_Flight);
    PARAMETER(PAR.OHE_Booking_Number);
    PARAMETER(PAR.OHE_Discharge_Port_Airprt);
    PARAMETER(PAR.OHE_Sail_Flight_Date);
    PARAMETER(PAR.OHE_Port_Cut_Date);
    PARAMETER(PAR.OHE_Arrival_Date);
    PARAMETER(PAR.OHE_Late_Delivery_Code);
    PARAMETER(PAR.OHE_Ship_Status);
    PARAMETER(PAR.OHE_Container_Number);
    PARAMETER(PAR.OHE_Comment_1);
    PARAMETER(PAR.OHE_Comment_2);
    PARAMETER(PAR.OHE_Unused_Number_1_11_0);
    PARAMETER(PAR.OHE_Unused_Number_2_11_0);
    PARAMETER(PAR.OHE_Unused_Number_3_11_0);
    PARAMETER(PAR.OHE_Unused_Number_4_11_0);
    PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
    PARAMETER(PAR.OHE_HPB_RIN_Price);
    PARAMETER(PAR.Transload_Terminal_Fees);
    PARAMETER(PAR.OHE_Est_Arrv_at_Dest_Date);
    PARAMETER(PAR.OHE_Backhaul_ETA_RtrnDate);
    PARAMETER(PAR.OHE_Port_Pier_Paid_Date);
    PARAMETER(PAR.OHE_Actual_Ship_Date);
    PARAMETER(PAR.OHE_Carrier_SCAC_Code);
    PARAMETER(PAR.OHE_Spot_Buy);
    PARAMETER(PAR.OHE_PO_ACK_Flag);
    PARAMETER(PAR.OHE_Override_Type_Code);
    PARAMETER(PAR.OHE_Backhaul_Status);
    PARAMETER(PAR.OHE_Backhaul_ETA_AM_PM);
    PARAMETER(PAR.OHE_Load_Haul_Type);
    PARAMETER(PAR.OHE_Backhaul_Carrier_Code);
    PARAMETER(PAR.OHE_Bookings_Confirmed);
    PARAMETER(PAR.OHE_EDI_Error_Reasons);
    PARAMETER(PAR.OHE_EDI_Error_Reasons_2);
    PARAMETER(PAR.HPB_COA_Batch_Number);
    PARAMETER(PAR.Delivery_P_O_Number);
    PARAMETER(PAR.OHE_Intended_for_ExportCC);
    PARAMETER(PAR.OHE_EDI_943_Action);
    PARAMETER(PAR.OHE_EDI_944_Action);
    PARAMETER(PAR.OHE_EDI_940_Action);
    PARAMETER(PAR.OHE_EDI_945_Action);
    PARAMETER(PAR.OHE_EDI_856_Action);
    PARAMETER(PAR.OHE_EDI_824_Action);
    PARAMETER(PAR.OHE_Transload_Seal_Nbr);
    PARAMETER(PAR.OHE_Abs_Rate_Override_Rsn);
    PARAMETER(PAR.OHE_Appt_Confirmation_#);
    PARAMETER(PAR.OHE_Backhaul_Container#);
    PARAMETER(PAR.OHE_Backhaul_Chassis_#);
    PARAMETER(PAR.OHE_Transload_Container#);
    PARAMETER(PAR.OHE_Pier_Pass_Invoice);
    PARAMETER(PAR.OHE_Carrier_Nm);
    PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
    PARAMETER(PAR.OHE_Backhaul_Comment);
    PARAMETER(PAR.Letter_of_Credit_Number);
    PARAMETER(PAR.OHE_Backhaul_Return_to_Co);
    PARAMETER(PAR.LD_Stop_Drop);
    PARAMETER(PAR.OHE_Unused_Number_3_0);
    PARAMETER(PAR.OHE_Pier_Pass_Fee_Amount);
    PARAMETER(PAR.OHE_Port_Check_Fee_Amount);
    PARAMETER(PAR.OHE_Port_Cut_Time);
    PARAMETER(PAR.OHE_Backhaul_Truck_Number);
    PARAMETER(PAR.OHE_Load_Sched_Seq_Num);
    PARAMETER(PAR.Original_Appointment_Date);
    PARAMETER(PAR.Original_Appointment_Time);
    PARAMETER(PAR.OHE_PowerPro_Load#_Outbnd);
    PARAMETER(PAR.OHE_PowerPro_Load#_Bckhl);
    PARAMETER(PAR.OHE_Unused_Numeric_9_0_3);
    PARAMETER(PAR.OHE_Orig_ABS_Freight_Rate);
    PARAMETER(PAR.OHE_Genset_Number);
    PARAMETER(PAR.OHE_Email_BOL_Sent);
    PARAMETER(PAR.OHE_EDI_Order_Automated);
    PARAMETER(PAR.OHE_EDI_601_Action);
    PARAMETER(PAR.OHE_Unused_Status_4);
    PARAMETER(PAR.OHE_Unused_Text_1);
    PARAMETER(PAR.OHE_Unused_Text_2);
    PARAMETER(PAR.OHE_Customer_Vendor_f_PO);
    PARAMETER(PAR.OHE_EDI_824_AES_ITN_#);
    PARAMETER(PAR.OHE_Unused_Text_5);
    PARAMETER(PAR.OHE_Unused_Date_1);
    PARAMETER(PAR.OHE_Unused_Date_2);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     // DB1.Job Time = JOB.*Job time
     DB1.Job_Time = JOB.*Job_time;

     // DB1.Job Date = JOB.*Job date
     DB1.Job_Date = JOB.*Job_date;

     // DB1.Job Name = JOB.*PROGRAM
     DB1.Job_Name = JOB.*PROGRAM;

     // DB1.User Id = JOB.*USER
     DB1.User_Id = JOB.*USER;

    }

    //?USER: Processing before Data update

    // DB1.Job Time = JOB.*Job time
    DB1.Job_Time = JOB.*Job_time;

    // DB1.Job Date = JOB.*Job date
    DB1.Job_Date = JOB.*Job_date;

    // DB1.Job Name = JOB.*PROGRAM
    DB1.Job_Name = JOB.*PROGRAM;

    // DB1.User Id = JOB.*USER
    DB1.User_Id = JOB.*USER;

   }

  }

  // WRK.@Blank for 5 = CVTVAR(DB1.Stop/Drop)
  WRK.@Blank_for_5 = CVTVAR(DB1.Stop_Drop);

  // LCL.Change Log Prior Value = WRK.@Blank for 5
  LCL.Change_Log_Prior_Value = WRK.@Blank_for_5;

  // Call program CRT Load/Order Chg Log XF.
  CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop);
  PARAMETER('DELORD');
  PARAMETER('TRF');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(*BLANK);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*JOB);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  EXECUTE FUNCTION(DLT Load Detail        DL) TYPE(DLTOBJ) FILE(OMFLCPP)          AC1183328;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
 }

 //?2nd Pass:   Create LD, upd OH for Pickup from Warehouse
 //?R17040 DN 03/01/21-Passed in TMS Carrier Ref PRO/Inv.
 EXECUTE FUNCTION(Rtv Crt Load Dtl      RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2123118;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(0);
 PARAMETER(LCL.TMS_Carrier_SCAC);
 PARAMETER(DB1.TMS_Trailer_Number);
 PARAMETER(DB1.TMS_Container_Number);
 PARAMETER(DB1.TMS_Move_Type);
 PARAMETER(DB1.TMS_Vessel_Name);
 PARAMETER(DB1.TMS_Voyage_Number);
 PARAMETER(DB1.TMS_Booking_Number);
 PARAMETER(DB1.TMS_OTR_Destination_Name);
 PARAMETER(DB1.TMS_OTR_Destination_Addr1);
 PARAMETER(DB1.TMS_OTR_Destination_Addr2);
 PARAMETER(DB1.TMS_OTR_Destination_City);
 PARAMETER(DB1.TMS_OTR_Destination_State);
 PARAMETER(DB1.TMS_OTR_Destination_Zip);
 PARAMETER(DB1.TMS_OTR_Destination_Cntry);
 PARAMETER(DB1.TMS_Vessel_ETD_Date);
 PARAMETER(DB1.TMS_Vessel_ETA_Date);
 PARAMETER(DB1.TMS_Carrier_Ref_PRO_Inv);
 PARAMETER(LCL.Carrier_Code_Usr);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(DB1.TMS_Deadline_Depart_Time);
 PARAMETER(PAR.Add_Change_Delete_USR);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.TMS Event Type is Pickup
  IF DB1.TMS_Event_Type = 'PICKUP';

  CASE;

  // IF DB1.TMS Address Type is Warehouse
  IF DB1.TMS_Address_Type = 'WAREHOUSE';

  EXECUTE FUNCTION(Change TMS Load Event) TYPE(CHGOBJ) FILE(PBCSCPP)              AC2123078;
  PARAMETER(DB1.TMS_Load_ID);
  PARAMETER(DB1.TMS_Extract_Date);
  PARAMETER(DB1.TMS_Extract_Time);
  PARAMETER(DB1.TMS_Extract_File_Name);
  PARAMETER(DB1.TMS_Event_Sequence);
  PARAMETER(DB1.TMS_Event_Type);
  PARAMETER(DB1.TMS_Earliest_Date);
  PARAMETER(DB1.TMS_Earliest_Time);
  PARAMETER(DB1.TMS_Latest_Date);
  PARAMETER(DB1.TMS_Latest_Time);
  PARAMETER(DB1.TMS_Planned_Date);
  PARAMETER(DB1.TMS_Planned_Time);
  PARAMETER(DB1.TMS_Actual_Date);
  PARAMETER(DB1.TMS_Actual_Time);
  PARAMETER(DB1.TMS_Address_Type);
  PARAMETER(DB1.TMS_Location_Code);
  PARAMETER(DB1.TMS_Address_Name);
  PARAMETER(DB1.TMS_Address_Line_1);
  PARAMETER(DB1.TMS_Address_Line_2);
  PARAMETER(DB1.TMS_City);
  PARAMETER(DB1.TMS_State_Province);
  PARAMETER(DB1.TMS_Postal_Code);
  PARAMETER(DB1.TMS_Country_Code);
  PARAMETER(DB1.TMS_Weight);
  PARAMETER(DB1.TMS_Weight_UOM);
  PARAMETER(DB1.TMS_Appointment_Date);
  PARAMETER(DB1.TMS_Appointment_Time);
  PARAMETER(DB1.TMS_Actual_Car_Arrival_Dt);
  PARAMETER(DB1.TMS_Actual_Car_Arrival_Tm);
  PARAMETER(DB1.TMS_Late_Reason_Code);
  PARAMETER(DB1.TMS_Cust_Assigned_Appt_#);
  PARAMETER(DB1.TMS_Record_Status);
  PARAMETER(1);
  PARAMETER(*BLANK);
  PARAMETER(DB1.TMS_Change_Date);
  PARAMETER(DB1.TMS_Change_time);
  //?R17040 DN 03/01/21-Passed in TMS Carrier Ref PRO/Inv.
  EXECUTE FUNCTION(Rtv Drops to Crt LD   RT) TYPE(RTVOBJ) FILE(PBCSCPP)           AC2124470;
  PARAMETER(DB1.TMS_Load_ID);
  PARAMETER(DB1.TMS_Extract_Date);
  PARAMETER(DB1.TMS_Extract_Time);
  PARAMETER(DB1.TMS_Extract_File_Name);
  PARAMETER(PAR.TMS_Carrier_SCAC);
  PARAMETER(PAR.TMS_Trailer_Number);
  PARAMETER(PAR.TMS_Container_Number);
  PARAMETER(PAR.TMS_Move_Type);
  PARAMETER(PAR.TMS_Vessel_Name);
  PARAMETER(PAR.TMS_Voyage_Number);
  PARAMETER(PAR.TMS_Booking_Number);
  PARAMETER(PAR.TMS_OTR_Destination_Name);
  PARAMETER(PAR.TMS_OTR_Destination_Addr1);
  PARAMETER(PAR.TMS_OTR_Destination_Addr2);
  PARAMETER(PAR.TMS_OTR_Destination_City);
  PARAMETER(PAR.TMS_OTR_Destination_State);
  PARAMETER(PAR.TMS_OTR_Destination_Zip);
  PARAMETER(PAR.TMS_OTR_Destination_Cntry);
  PARAMETER(PAR.TMS_Vessel_ETD_Date);
  PARAMETER(PAR.TMS_Vessel_ETA_Date);
  PARAMETER(PAR.TMS_Carrier_Ref_PRO_Inv);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.TMS_Deadline_Depart_Time);
  PARAMETER(PAR.Add_Change_Delete_USR);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?R17040 DN 03/01/21-Passed in TMS Carrier Ref PRO/Inv & TMS Cust Asgn Appt#
   EXECUTE FUNCTION(Rtv Crt Load Dtl      RT) TYPE(RTVOBJ) FILE(PBCUCPP)           AC2123119;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(PAR.Stop_Drop_Sequence_Number);
   PARAMETER(PAR.Carrier_Code);
   PARAMETER(PAR.Deadline_Departure_Date);
   PARAMETER(PAR.TMS_Deadline_Depart_Time);
   PARAMETER(PAR.Add_Change_Delete_USR);
   PARAMETER(PAR.TMS_Carrier_SCAC);
   PARAMETER(PAR.TMS_Trailer_Number);
   PARAMETER(PAR.TMS_Container_Number);
   PARAMETER(PAR.TMS_Vessel_Name);
   PARAMETER(PAR.TMS_Voyage_Number);
   PARAMETER(PAR.TMS_Booking_Number);
   PARAMETER(PAR.TMS_OTR_Destination_Name);
   PARAMETER(PAR.TMS_OTR_Destination_Addr1);
   PARAMETER(PAR.TMS_OTR_Destination_Addr2);
   PARAMETER(PAR.TMS_OTR_Destination_City);
   PARAMETER(PAR.TMS_OTR_Destination_State);
   PARAMETER(PAR.TMS_OTR_Destination_Zip);
   PARAMETER(PAR.TMS_OTR_Destination_Cntry);
   PARAMETER(PAR.TMS_Vessel_ETD_Date);
   PARAMETER(PAR.TMS_Vessel_ETA_Date);
   PARAMETER(PAR.TMS_Carrier_Ref_PRO_Inv);
   PARAMETER(DB1.TMS_Appointment_Date);
   PARAMETER(DB1.TMS_Appointment_Time);
   PARAMETER(DB1.TMS_Actual_Car_Arrival_Dt);
   PARAMETER(DB1.TMS_Actual_Car_Arrival_Tm);
   PARAMETER(DB1.TMS_Late_Reason_Code);
   PARAMETER(DB1.TMS_Cust_Assigned_Appt_#);
   {
    //?USER: Process Data record

    //?Comments and changes
    DO;

    //?** 03/06/2017 LJB E009492 Add Orig appt date/time to the rtv crt routine
    //?*****
    ENDDO;

    EXECUTE FUNCTION(Rtv Co and Load       RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2125070;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(LCL.Load_ID_USR);
    PARAMETER(LCL.Event_Code_Last);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?Process for Orig load on order if different
    CASE;

    // IF LCL.Load ID USR is entered
    IF LCL.Load_ID_USR <> *ZERO;

    // AND LCL.Load ID USR NE DB1.TMS Load ID
    AND LCL.Load_ID_USR <> DB1.TMS_Load_ID;

    EXECUTE FUNCTION(RTV DLT ORd f/TMS Chg  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC2125071;
    PARAMETER(LCL.Load_ID_USR);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(PAR.Carrier_Code);
    {
     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
     PARAMETER(DB1.Load_ID);
     PARAMETER(LCL.Load_Status_New);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      // PGM.*Return code = CND.*Record already exists
      PGM.*Return_code = 'Y2U0003';

      MOVE *ALL (To: PAR From: DB1);

     }

     //?Zero out load id
     EXECUTE FUNCTION(RTV Chg Ld for TMS    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2123137;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(*BLANK);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER('Y');
     {
      //?USER: Process Data record

      EXECUTE FUNCTION(Chg Load to Untied TMS CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2124467;
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Order_Number);
      PARAMETER(PAR.Load_ID);
      PARAMETER(DB1.Event_Code);
      PARAMETER(PAR.OH_Load_Plan_Ready);
      {
       //?USER: Processing before Data update

       EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
       PARAMETER(DB1.Job_Time);
       PARAMETER(DB1.User_Id);
       PARAMETER(DB1.Job_Name);
       PARAMETER(DB1.Job_Date);
       {
        //?Execute internal function

        // PAR.Job Time = JOB.*Job time
        PAR.Job_Time = JOB.*Job_time;

        // PAR.User Id = JOB.*USER
        PAR.User_Id = JOB.*USER;

        // PAR.Job Name = JOB.*PROGRAM
        PAR.Job_Name = JOB.*PROGRAM;

        // PAR.Job Date = JOB.*Job date
        PAR.Job_Date = JOB.*Job_date;

       }

       // Call program TRG Order Hdr CHG Trig XT.
       CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
       PARAMETER(DB1.Company_Number);
       PARAMETER(DB1.Order_Number);
       PARAMETER(DB1.Order_Type_Sales);
       PARAMETER(DB1.AR_Customer_Number);
       PARAMETER(DB1.Ship_To_Customer);
       PARAMETER(DB1.Ship_To_Name);
       PARAMETER(DB1.Ship_To_Address_Line_1);
       PARAMETER(DB1.Ship_To_Address_Line_2);
       PARAMETER(DB1.Ship_To_Address_Line_3);
       PARAMETER(DB1.Ship_To_City);
       PARAMETER(DB1.Ship_To_State_Code);
       PARAMETER(DB1.Ship_To_Zip_Postal_Code);
       PARAMETER(DB1.Bill_to_Customer);
       PARAMETER(DB1.Bill_to_Name);
       PARAMETER(DB1.Bill_to_Address_Line_1);
       PARAMETER(DB1.Bill_to_Address_Line_2);
       PARAMETER(DB1.Bill_to_Address_Line_3);
       PARAMETER(DB1.Bill_to_City);
       PARAMETER(DB1.Bill_to_State_Code);
       PARAMETER(DB1.Bill_to_Zip_Postal_Code);
       PARAMETER(DB1.Customer_Purchase_Order_#);
       PARAMETER(DB1.Order_Date);
       PARAMETER(DB1.Requested_Ship_Date);
       PARAMETER(DB1.Actual_Shipped_Date);
       PARAMETER(DB1.Cancel_Date);
       PARAMETER(DB1.Terms_Code);
       PARAMETER(DB1.Special_Instructions);
       PARAMETER(DB1.Special_Instructions_2);
       PARAMETER(DB1.Carrier_Code);
       PARAMETER(DB1.Comment_Print_Acknowledge);
       PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
       PARAMETER(DB1.Comment_Print_Pick_Slip);
       PARAMETER(DB1.Comment_Print_Ship_Doc);
       PARAMETER(DB1.Reason_Code);
       PARAMETER(DB1.Order_in_Use);
       PARAMETER(DB1.Header_Status);
       PARAMETER(DB1.Header_Status_Last);
       PARAMETER(DB1.Order_Type_Print_Status);
       PARAMETER(DB1.Scheduled_Ship_Date);
       PARAMETER(DB1.User_Original_Entry);
       PARAMETER(DB1.Date_of_Original_Entry);
       PARAMETER(DB1.Order_Value_Total);
       PARAMETER(DB1.Order_Weight_Total);
       PARAMETER(DB1.Credit_Hold);
       PARAMETER(DB1.Production_Hold);
       PARAMETER(DB1.New_Customer_Hold);
       PARAMETER(DB1.Requested_Delivery_Date);
       PARAMETER(DB1.Requested_Delivery_Time);
       PARAMETER(DB1.Accounts_Receiv_Ent_1);
       PARAMETER(DB1.Accounts_Receiv_Ent_2);
       PARAMETER(DB1.Load_ID);
       PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
       PARAMETER(DB1.Rated_Freight);
       PARAMETER(DB1.LTL_Flag);
       PARAMETER(DB1.Price_Audit);
       PARAMETER(DB1.Price_Status);
       PARAMETER(DB1.Shipping_Method);
       PARAMETER(DB1.Export_Status);
       PARAMETER(DB1.Palletize);
       PARAMETER(DB1.Shrink_Wrap);
       PARAMETER(DB1.Slip_Sheet);
       PARAMETER(DB1.Age_Code);
       PARAMETER(DB1.Reefer_Temperature);
       PARAMETER(DB1.Load_Type);
       PARAMETER(DB1.Attach_to_Invoice_Number);
       PARAMETER(DB1.Load_Plan_Order);
       PARAMETER(DB1.Print_Pick_Slip);
       PARAMETER(DB1.Resell_Reference_Number);
       PARAMETER(DB1.Special_Comment_1);
       PARAMETER(DB1.Special_Comment_2);
       PARAMETER(DB1.Affect_Auto_Accruals);
       PARAMETER(DB1.Sales_Route_Code);
       PARAMETER(DB1.Manager_Level_Code);
       PARAMETER(DB1.VP_Level_Code);
       PARAMETER(DB1.Attach_to_Order_Number);
       PARAMETER(DB1.Reason_for_Price_Audit);
       PARAMETER(DB1.Invoice_Number);
       PARAMETER(DB1.Invoice_Suffix);
       PARAMETER(DB1.Invoice_Date);
       PARAMETER(DB1.Event_Code);
       PARAMETER(DB1.Trans_Contol_AS400_Plant);
       PARAMETER(DB1.Modified_Flag);
       PARAMETER(DB1.A_R_order_Value_Total);
       PARAMETER(DB1.Billing_Activity_Type);
       PARAMETER(DB1.Block_Order_Flag);
       PARAMETER(DB1.Order_Certification_Flag);
       PARAMETER(DB1.Invoice_Order_Value_Tot);
       PARAMETER(DB1.Process_Sts_for_3C);
       PARAMETER(DB1.Order_Conf_Fax_Sts);
       PARAMETER(DB1.Manifest_Fax_Sts);
       PARAMETER(DB1.Invoice_Fax_Sts);
       PARAMETER(DB1.Transfer_in_Storage_Ind);
       PARAMETER(DB1.Email_Cust_On_Order_Ship);
       PARAMETER(DB1.Order_Emailed);
       PARAMETER(DB1.Export_Docs_Go_w_Driver);
       PARAMETER(DB1.Shipping_Temp_Code_C_F);
       PARAMETER(DB1.Broker_Order_Status);
       PARAMETER(DB1.Air_Freight_Order);
       PARAMETER(DB1.Order_Requires_Review);
       PARAMETER(DB1.OH_Load_Plan_Ready);
       PARAMETER(DB1.Export_USDA_Approved);
       PARAMETER(DB1.HPB_Ship_to_Warehouse);
       PARAMETER(DB1.OH_TF_Exempt_Code);
       PARAMETER(DB1.OH_Appt_Confirmation_Dt);
       PARAMETER(DB1.JPN_Invoice_Issuance_Date);
       PARAMETER(DB1.Load_Actual_Shipped_Date);
       PARAMETER(DB1.Load_BOL_Complete_Date);
       PARAMETER(DB1.Load_Truck_Departure_Date);
       PARAMETER(DB1.Maximum_Gross_Weight);
       PARAMETER(DB1.Time_of_Original_Entry);
       PARAMETER(DB1.OH_Appt_Confirmation_Tm);
       PARAMETER(DB1.Load_BOL_Complete_Time);
       PARAMETER(DB1.Load_Truck_Departure_Time);
       PARAMETER(DB1.Act_Frt_Reference_Amount);
       PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
       PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
       PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
       PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
       PARAMETER(DB1.Claim_Number);
       PARAMETER(DB1.EDI_Status_1);
       PARAMETER(DB1.EDI_Status_2);
       PARAMETER(DB1.EDI_Status_3);
       PARAMETER(DB1.Job_Time);
       PARAMETER(DB1.User_Id);
       PARAMETER(DB1.Job_Name);
       PARAMETER(DB1.Job_Date);

      }

     }

     //?Zero out load id ; reset load plan ready to ReSweep
     EXECUTE FUNCTION(RTV Chg for TMS Delet RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2124032;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Load_ID);
     {
      //?USER: Process Data record

      //?R15161 DN  07/23/19-Set Voyage to *BLANK.
      EXECUTE FUNCTION(CHG Order Header Exten CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC1814352;
      PARAMETER(DB1.Company_Number);
      PARAMETER(DB1.Order_Number);
      PARAMETER(*ZERO);
      PARAMETER(*ZERO);
      PARAMETER(DB1.Shipping_Line);
      PARAMETER(DB1.Port_Delv_Terminal);
      PARAMETER(DB1.OHE_City);
      PARAMETER(*BLANK);
      PARAMETER(*BLANK);
      PARAMETER(*BLANK);
      PARAMETER(DB1.OHE_Discharge_Port_Airprt);
      PARAMETER(DB1.OHE_Sail_Flight_Date);
      PARAMETER(DB1.OHE_Port_Cut_Date);
      PARAMETER(DB1.OHE_Arrival_Date);
      PARAMETER(DB1.OHE_Late_Delivery_Code);
      PARAMETER(WRK.Blank_for_3_USR);
      PARAMETER(*BLANK);
      PARAMETER(DB1.OHE_Comment_1);
      PARAMETER(DB1.OHE_Comment_2);
      PARAMETER(DB1.OHE_Unused_Number_1_11_0);
      PARAMETER(DB1.OHE_Unused_Number_2_11_0);
      PARAMETER(DB1.OHE_Unused_Number_3_11_0);
      PARAMETER(DB1.OHE_Unused_Number_4_11_0);
      PARAMETER(DB1.OHE_HPB_RIN_Equiv_Value);
      PARAMETER(DB1.OHE_HPB_RIN_Price);
      PARAMETER(DB1.Transload_Terminal_Fees);
      PARAMETER(DB1.OHE_Est_Arrv_at_Dest_Date);
      PARAMETER(DB1.OHE_Backhaul_ETA_RtrnDate);
      PARAMETER(DB1.OHE_Port_Pier_Paid_Date);
      PARAMETER(DB1.OHE_Actual_Ship_Date);
      PARAMETER(DB1.OHE_Carrier_SCAC_Code);
      PARAMETER(DB1.OHE_Spot_Buy);
      PARAMETER(DB1.OHE_PO_ACK_Flag);
      PARAMETER(DB1.OHE_Override_Type_Code);
      PARAMETER(DB1.OHE_Backhaul_Status);
      PARAMETER(DB1.OHE_Backhaul_ETA_AM_PM);
      PARAMETER(DB1.OHE_Load_Haul_Type);
      PARAMETER(DB1.OHE_Backhaul_Carrier_Code);
      PARAMETER(DB1.OHE_Bookings_Confirmed);
      PARAMETER(DB1.OHE_EDI_Error_Reasons);
      PARAMETER(DB1.OHE_EDI_Error_Reasons_2);
      PARAMETER(DB1.HPB_COA_Batch_Number);
      PARAMETER(DB1.Delivery_P_O_Number);
      PARAMETER(DB1.OHE_Intended_for_ExportCC);
      PARAMETER(DB1.OHE_EDI_943_Action);
      PARAMETER(DB1.OHE_EDI_944_Action);
      PARAMETER(DB1.OHE_EDI_940_Action);
      PARAMETER(DB1.OHE_EDI_945_Action);
      PARAMETER(DB1.OHE_EDI_856_Action);
      PARAMETER(DB1.OHE_EDI_824_Action);
      PARAMETER(DB1.OHE_Transload_Seal_Nbr);
      PARAMETER(DB1.OHE_Abs_Rate_Override_Rsn);
      PARAMETER(DB1.OHE_Appt_Confirmation_#);
      PARAMETER(DB1.OHE_Backhaul_Container#);
      PARAMETER(DB1.OHE_Backhaul_Chassis_#);
      PARAMETER(DB1.OHE_Transload_Container#);
      PARAMETER(DB1.OHE_Pier_Pass_Invoice);
      PARAMETER(DB1.OHE_Carrier_Nm);
      PARAMETER(DB1.OHE_Appt_Confirmation_Nm);
      PARAMETER(DB1.OHE_Backhaul_Comment);
      PARAMETER(DB1.Letter_of_Credit_Number);
      PARAMETER(DB1.OHE_Backhaul_Return_to_Co);
      PARAMETER(DB1.LD_Stop_Drop);
      PARAMETER(DB1.OHE_Unused_Number_3_0);
      PARAMETER(DB1.OHE_Pier_Pass_Fee_Amount);
      PARAMETER(DB1.OHE_Port_Check_Fee_Amount);
      PARAMETER(DB1.OHE_Port_Cut_Time);
      PARAMETER(DB1.OHE_Backhaul_Truck_Number);
      PARAMETER(DB1.OHE_Load_Sched_Seq_Num);
      PARAMETER(DB1.Original_Appointment_Date);
      PARAMETER(DB1.Original_Appointment_Time);
      PARAMETER(DB1.OHE_PowerPro_Load#_Outbnd);
      PARAMETER(DB1.OHE_PowerPro_Load#_Bckhl);
      PARAMETER(DB1.OHE_Unused_Numeric_9_0_3);
      PARAMETER(DB1.OHE_Orig_ABS_Freight_Rate);
      PARAMETER(DB1.OHE_Genset_Number);
      PARAMETER(DB1.OHE_Email_BOL_Sent);
      PARAMETER(DB1.OHE_EDI_Order_Automated);
      PARAMETER(DB1.OHE_EDI_601_Action);
      PARAMETER(DB1.OHE_Unused_Status_4);
      PARAMETER(DB1.OHE_Unused_Text_1);
      PARAMETER(DB1.OHE_Unused_Text_2);
      PARAMETER(DB1.OHE_Customer_Vendor_f_PO);
      PARAMETER(DB1.OHE_EDI_824_AES_ITN_#);
      PARAMETER(DB1.OHE_Unused_Text_5);
      PARAMETER(DB1.OHE_Unused_Date_1);
      PARAMETER(DB1.OHE_Unused_Date_2);
      PARAMETER(DB1.EDI_Status_1);
      PARAMETER(DB1.EDI_Status_2);
      PARAMETER(DB1.EDI_Status_3);
      PARAMETER(DB1.Record_Status);
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?USER: Processing if Data record not found

       EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
       PARAMETER(PAR.Company_Number);
       PARAMETER(PAR.Order_Number);
       PARAMETER(PAR.Load_ID);
       PARAMETER(PAR.Stop_Drop_Sequence_Number);
       PARAMETER(PAR.Shipping_Line);
       PARAMETER(PAR.Port_Delv_Terminal);
       PARAMETER(PAR.OHE_City);
       PARAMETER(PAR.OHE_Vessel_Airline);
       PARAMETER(PAR.OHE_Voyage_Flight);
       PARAMETER(PAR.OHE_Booking_Number);
       PARAMETER(PAR.OHE_Discharge_Port_Airprt);
       PARAMETER(PAR.OHE_Sail_Flight_Date);
       PARAMETER(PAR.OHE_Port_Cut_Date);
       PARAMETER(PAR.OHE_Arrival_Date);
       PARAMETER(PAR.OHE_Late_Delivery_Code);
       PARAMETER(PAR.OHE_Ship_Status);
       PARAMETER(PAR.OHE_Container_Number);
       PARAMETER(PAR.OHE_Comment_1);
       PARAMETER(PAR.OHE_Comment_2);
       PARAMETER(PAR.OHE_Unused_Number_1_11_0);
       PARAMETER(PAR.OHE_Unused_Number_2_11_0);
       PARAMETER(PAR.OHE_Unused_Number_3_11_0);
       PARAMETER(PAR.OHE_Unused_Number_4_11_0);
       PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
       PARAMETER(PAR.OHE_HPB_RIN_Price);
       PARAMETER(PAR.Transload_Terminal_Fees);
       PARAMETER(PAR.OHE_Est_Arrv_at_Dest_Date);
       PARAMETER(PAR.OHE_Backhaul_ETA_RtrnDate);
       PARAMETER(PAR.OHE_Port_Pier_Paid_Date);
       PARAMETER(PAR.OHE_Actual_Ship_Date);
       PARAMETER(PAR.OHE_Carrier_SCAC_Code);
       PARAMETER(PAR.OHE_Spot_Buy);
       PARAMETER(PAR.OHE_PO_ACK_Flag);
       PARAMETER(PAR.OHE_Override_Type_Code);
       PARAMETER(PAR.OHE_Backhaul_Status);
       PARAMETER(PAR.OHE_Backhaul_ETA_AM_PM);
       PARAMETER(PAR.OHE_Load_Haul_Type);
       PARAMETER(PAR.OHE_Backhaul_Carrier_Code);
       PARAMETER(PAR.OHE_Bookings_Confirmed);
       PARAMETER(PAR.OHE_EDI_Error_Reasons);
       PARAMETER(PAR.OHE_EDI_Error_Reasons_2);
       PARAMETER(PAR.HPB_COA_Batch_Number);
       PARAMETER(PAR.Delivery_P_O_Number);
       PARAMETER(PAR.OHE_Intended_for_ExportCC);
       PARAMETER(PAR.OHE_EDI_943_Action);
       PARAMETER(PAR.OHE_EDI_944_Action);
       PARAMETER(PAR.OHE_EDI_940_Action);
       PARAMETER(PAR.OHE_EDI_945_Action);
       PARAMETER(PAR.OHE_EDI_856_Action);
       PARAMETER(PAR.OHE_EDI_824_Action);
       PARAMETER(PAR.OHE_Transload_Seal_Nbr);
       PARAMETER(PAR.OHE_Abs_Rate_Override_Rsn);
       PARAMETER(PAR.OHE_Appt_Confirmation_#);
       PARAMETER(PAR.OHE_Backhaul_Container#);
       PARAMETER(PAR.OHE_Backhaul_Chassis_#);
       PARAMETER(PAR.OHE_Transload_Container#);
       PARAMETER(PAR.OHE_Pier_Pass_Invoice);
       PARAMETER(PAR.OHE_Carrier_Nm);
       PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
       PARAMETER(PAR.OHE_Backhaul_Comment);
       PARAMETER(PAR.Letter_of_Credit_Number);
       PARAMETER(PAR.OHE_Backhaul_Return_to_Co);
       PARAMETER(PAR.LD_Stop_Drop);
       PARAMETER(PAR.OHE_Unused_Number_3_0);
       PARAMETER(PAR.OHE_Pier_Pass_Fee_Amount);
       PARAMETER(PAR.OHE_Port_Check_Fee_Amount);
       PARAMETER(PAR.OHE_Port_Cut_Time);
       PARAMETER(PAR.OHE_Backhaul_Truck_Number);
       PARAMETER(PAR.OHE_Load_Sched_Seq_Num);
       PARAMETER(PAR.Original_Appointment_Date);
       PARAMETER(PAR.Original_Appointment_Time);
       PARAMETER(PAR.OHE_PowerPro_Load#_Outbnd);
       PARAMETER(PAR.OHE_PowerPro_Load#_Bckhl);
       PARAMETER(PAR.OHE_Unused_Numeric_9_0_3);
       PARAMETER(PAR.OHE_Orig_ABS_Freight_Rate);
       PARAMETER(PAR.OHE_Genset_Number);
       PARAMETER(PAR.OHE_Email_BOL_Sent);
       PARAMETER(PAR.OHE_EDI_Order_Automated);
       PARAMETER(PAR.OHE_EDI_601_Action);
       PARAMETER(PAR.OHE_Unused_Status_4);
       PARAMETER(PAR.OHE_Unused_Text_1);
       PARAMETER(PAR.OHE_Unused_Text_2);
       PARAMETER(PAR.OHE_Customer_Vendor_f_PO);
       PARAMETER(PAR.OHE_EDI_824_AES_ITN_#);
       PARAMETER(PAR.OHE_Unused_Text_5);
       PARAMETER(PAR.OHE_Unused_Date_1);
       PARAMETER(PAR.OHE_Unused_Date_2);
       PARAMETER(PAR.EDI_Status_1);
       PARAMETER(PAR.EDI_Status_2);
       PARAMETER(PAR.EDI_Status_3);
       PARAMETER(PAR.Record_Status);
       PARAMETER(PAR.Job_Time);
       PARAMETER(PAR.User_Id);
       PARAMETER(PAR.Job_Name);
       PARAMETER(PAR.Job_Date);
       {
        //?USER: Processing before Data update

        // DB1.Job Time = JOB.*Job time
        DB1.Job_Time = JOB.*Job_time;

        // DB1.Job Date = JOB.*Job date
        DB1.Job_Date = JOB.*Job_date;

        // DB1.Job Name = JOB.*PROGRAM
        DB1.Job_Name = JOB.*PROGRAM;

        // DB1.User Id = JOB.*USER
        DB1.User_Id = JOB.*USER;

       }

       //?USER: Processing before Data update

       // DB1.Job Time = JOB.*Job time
       DB1.Job_Time = JOB.*Job_time;

       // DB1.Job Date = JOB.*Job date
       DB1.Job_Date = JOB.*Job_date;

       // DB1.Job Name = JOB.*PROGRAM
       DB1.Job_Name = JOB.*PROGRAM;

       // DB1.User Id = JOB.*USER
       DB1.User_Id = JOB.*USER;

      }

     }

     // WRK.@Blank for 5 = CVTVAR(DB1.Stop/Drop)
     WRK.@Blank_for_5 = CVTVAR(DB1.Stop_Drop);

     // LCL.Change Log Prior Value = WRK.@Blank for 5
     LCL.Change_Log_Prior_Value = WRK.@Blank_for_5;

     // Call program CRT Load/Order Chg Log XF.
     CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Stop_Drop);
     PARAMETER('DELORD');
     PARAMETER('TRF');
     PARAMETER(LCL.Change_Log_Prior_Value);
     PARAMETER(*BLANK);
     PARAMETER(JOB.*USER);
     PARAMETER(JOB.*JOB);
     PARAMETER(PAR.Carrier_Code);
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);

     EXECUTE FUNCTION(DLT Load Detail        DL) TYPE(DLTOBJ) FILE(OMFLCPP)          AC1183328;
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Stop_Drop_Sequence_Number);
     CASE;

     // IF LCL.Load Status New is Lock
     IF LCL.Load_Status_New = 'L';

     // Call program PFS Lock Load/Order   XF.
     CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
     PARAMETER(DB1.Load_ID);

     ENDIF;

    }

    ENDIF;

    // PAR.Stop/Drop Sequence Number = PAR.Stop/Drop Sequence Number + CON.1
    PAR.Stop_Drop_Sequence_Number = PAR.Stop_Drop_Sequence_Number + 1;

    // LCL.LD Carrier Appt Date = CON.*ZERO
    LCL.LD_Carrier_Appt_Date = *ZERO;

    // LCL.Actual Delivery Date = CON.*ZERO
    LCL.Actual_Delivery_Date = *ZERO;

    // LCL.Original Appt Confirm Dt = CON.*ZERO
    LCL.LD_Unused_Date_2 = *ZERO;

    //?If TMS Appointment Date is entered                    E009492
    CASE;

    // IF PAR.TMS Appointment Date is entered
    IF PAR.TMS_Appointment_Date > *ZERO;

    // Call program CVT *YYMD to *CYMD    XF.
    CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
    PARAMETER(LCL.LD_Carrier_Appt_Date);
    PARAMETER(PAR.TMS_Appointment_Date);

    //?*****
    // Call program RTV Orig Appt Dte/Tme  XF.
    CALL PROGRAM(RTV Orig Appt Dte/Tme  XF) ('PUA4XFR');
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(WRK.Original_Appointment_Date);
    PARAMETER(WRK.Original_Appointment_Time);

    //?* Only update Orig Appt date/time if it is zeros      E009492
    CASE;

    // IF WRK.Original Appointment Date is Equal to zero
    IF WRK.Original_Appointment_Date = *ZERO;

    //?* Convert tms appt date from 8.0 to 6.0
    EXECUTE FUNCTION(CVT *YYMD to *YMD     IF) TYPE(EXCINTFUN)                      AC2133495;
    PARAMETER(PAR.TMS_Appointment_Date);
    PARAMETER(LCL.Date_Out_60_USR);
    {
     //?Execute internal function

     //?** Convert incoming date to alpha
     // PAR.Date (Char-8) USR = CVTVAR(PAR.DATE)
     PAR.Date_Char_8_USR = CVTVAR(PAR.DATE);

     //?** Retrieve yymmdd into another alpha field
     // PAR.Date (Char-6) USR = SUBSTRING(PAR.Date (Char-8) USR,CON.3,CON.6)
     PAR.Date_Char_6_USR = SUBSTRING(PAR.Date_Char_8_USR:3:6);

     //?** Convert 6 char date to 6.0 and put in par to return
     // PAR.Date Out (6,0) USR = CVTVAR(PAR.Date (Char-6) USR)
     PAR.Date_Out_60_USR = CVTVAR(PAR.Date_Char_6_USR);

    }

    //?* Save carrier appt date in original appointment date in OHE E009492
    // LCL.Original Appointment Date = LCL.Date Out (6,0) USR
    LCL.Original_Appointment_Date = LCL.Date_Out_60_USR;

    //?* Save carrier appt time in original appointment time in OHE  E009492
    // LCL.Original Appointment Time = PAR.TMS Appointment Time * CON.100 *
    LCL.Original_Appointment_Time = PAR.TMS_Appointment_Time * 100;

    //?* Update OHE original date & time                     E009492
    EXECUTE FUNCTION(CHG Orig Appt Dt/Tm   CH) TYPE(CHGOBJ) FILE(PMAMREP)           AC2133490;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(LCL.Original_Appointment_Date);
    PARAMETER(LCL.Original_Appointment_Time);
    {
     //?USER: Processing before Data update

     // DB1.Job Time = JOB.*Job time
     DB1.Job_Time = JOB.*Job_time;

     // DB1.Job Date = JOB.*Job date
     DB1.Job_Date = JOB.*Job_date;

     // DB1.Job Name = JOB.*PROGRAM
     DB1.Job_Name = JOB.*PROGRAM;

     // DB1.User Id = JOB.*USER
     DB1.User_Id = JOB.*USER;

    }

    ENDIF;

    ENDIF;

    // LCL.LD Carrier Appt Time = PAR.TMS Appointment Time * CON.100 *
    LCL.LD_Carrier_Appt_Time = PAR.TMS_Appointment_Time * 100;

    CASE;

    // IF PAR.TMS Actual Car Arrival Dt is entered
    IF PAR.TMS_Actual_Car_Arrival_Dt > *ZERO;

    // Call program CVT *YYMD to *CYMD    XF.
    CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
    PARAMETER(LCL.Actual_Delivery_Date);
    PARAMETER(PAR.TMS_Actual_Car_Arrival_Dt);

    ENDIF;

    // LCL.Actual Delivery time = PAR.TMS Actual Car Arrival Tm * CON.100 *
    LCL.Actual_Delivery_time = PAR.TMS_Actual_Car_Arrival_Tm * 100;

    // LCL.Deadline Depart Time  HDR = PAR.TMS Deadline Depart Time * CON.100 *
    LCL.Deadline_Depart_Time_HDR = PAR.TMS_Deadline_Depart_Time * 100;

    //?TMS Late Reason Code
    CASE;

    // IF PAR.TMS Late Reason Code is Entered
    IF PAR.TMS_Late_Reason_Code > *BLANK;

    CASE;

    // IF PAR.TMS Late Reason Code is NS
    IF PAR.TMS_Late_Reason_Code = 'NS';

    // LCL.Load Dtl On Time Flag = CND.Blank
    LCL.Load_Dtl_On_Time_Flag = *BLANK;

    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Load Dtl On Time Flag = CND.Not On Time
    LCL.Load_Dtl_On_Time_Flag = 'N';

    ENDIF;

    //?TMS Late Reason Code
    // IF *OTHERWISE
    IF *OTHERWISE;

    // LCL.Load Dtl On Time Flag = CND.Blank
    LCL.Load_Dtl_On_Time_Flag = *BLANK;

    ENDIF;

    //?R17040 DN 03/01/21-Set TMS Carrier Ref PRO/Inv & TMS Cust Assigned Appt #.
    EXECUTE FUNCTION(CRT Load Detail        CR) TYPE(CRTOBJ) FILE(OMFLCPP)          AC1183326;
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(PAR.Stop_Drop_Sequence_Number);
    PARAMETER(DB1.TMS_Event_Sequence);
    PARAMETER(*BLANK);
    PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER('O');
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(LCL.Actual_Delivery_Date);
    PARAMETER(LCL.Actual_Delivery_time);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(PAR.Deadline_Departure_Date);
    PARAMETER(LCL.Deadline_Depart_Time_HDR);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(LCL.Load_Dtl_On_Time_Flag);
    PARAMETER(LCL.On_Time_Addl_Rsn_Unused);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(LCL.LD_Carrier_Appt_Date);
    PARAMETER(LCL.LD_Unused_Date_2);
    PARAMETER(*ZERO);
    PARAMETER(LCL.LD_Carrier_Appt_Time);
    PARAMETER(LCL.LD_Unused_Time_2);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(LCL.LD_Unused_Sts_2);
    PARAMETER(LCL.HPB_Transload_Station);
    PARAMETER(*BLANK);
    PARAMETER(PAR.TMS_Carrier_Ref_PRO_Inv);
    PARAMETER(PAR.TMS_Cust_Assigned_Appt_#);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*JOB
      PAR.Job_Name = JOB.*JOB;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

    }

    //?Event Code Last is 01 Order Entry
    CASE;

    // IF LCL.Event Code Last is 01 Order Entry
    IF LCL.Event_Code_Last = '01';

    // LCL.Event Code Last = CND.02 Load Planned
    LCL.Event_Code_Last = '02';

    EXECUTE FUNCTION(Crt Load Plan Event    RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1295306;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(*ZERO);
    {
     //?USER: Initialize routine

     // PAR.Event Number = CON.*ZERO
     PAR.Event_Number = *ZERO;

     EXECUTE FUNCTION(RTV Latest Event/Date  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1280294;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Event_Number);
     PARAMETER(WRK.TXT_field_not_needed);
     PARAMETER(WRK.Numeric_Field_Not_Needed);
     PARAMETER(WRK.TXT_field_not_needed);
     PARAMETER(WRK.Numeric_Field_Not_Needed);
     {
      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     //?USER: Processing if Data record not found

     // WRK.Event Number = WRK.Event Number + CON.1
     WRK.Event_Number = WRK.Event_Number + 1;

     EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(WRK.Event_Number);
     PARAMETER('01');
     PARAMETER(PAR.Company_Number);
     PARAMETER(*ZERO);
     PARAMETER(*BLANK);
     PARAMETER(JOB.*Job_date);
     PARAMETER('Y');
     PARAMETER('N');
     PARAMETER('Y');
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     // WRK.Event Number = WRK.Event Number + CON.1
     WRK.Event_Number = WRK.Event_Number + 1;

     EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(WRK.Event_Number);
     PARAMETER('02');
     PARAMETER(PAR.Company_Number);
     PARAMETER(*ZERO);
     PARAMETER(*BLANK);
     PARAMETER(JOB.*Job_date);
     PARAMETER('Y');
     PARAMETER('N');
     PARAMETER('Y');
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     //?USER: Process Data record

     // PAR.Event Number = PAR.Event Number + CON.1
     PAR.Event_Number = PAR.Event_Number + 1;

     EXECUTE FUNCTION(CRT OP Order Events    CR) TYPE(CRTOBJ) FILE(OPEYCPP)          AC1170141;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(PAR.Event_Number);
     PARAMETER('02');
     PARAMETER(DB1.Invoice_Memo_Company);
     PARAMETER(DB1.Invoice_Memo_Number);
     PARAMETER(DB1.Invoice_Memo_Suffix);
     PARAMETER(JOB.*Job_date);
     PARAMETER(DB1.Activity_Completion);
     PARAMETER(DB1.Activity_Hold);
     PARAMETER(DB1.Post_Cash_Complete);
     PARAMETER(DB1.Cross_Event_Ref_Comp);
     PARAMETER(DB1.Cross_Event_Ref_Order);
     PARAMETER(DB1.Cross_Event_Ref_Event);
     PARAMETER(DB1.Ship_To_Customer);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     QUIT;

    }

    ENDIF;

    EXECUTE FUNCTION(Chg Load Info - TMS    CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2123120;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(PAR.Carrier_Code);
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(LCL.Event_Code_Last);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // Call program TRG Order Hdr CHG Trig XT.
     CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Type_Sales);
     PARAMETER(DB1.AR_Customer_Number);
     PARAMETER(DB1.Ship_To_Customer);
     PARAMETER(DB1.Ship_To_Name);
     PARAMETER(DB1.Ship_To_Address_Line_1);
     PARAMETER(DB1.Ship_To_Address_Line_2);
     PARAMETER(DB1.Ship_To_Address_Line_3);
     PARAMETER(DB1.Ship_To_City);
     PARAMETER(DB1.Ship_To_State_Code);
     PARAMETER(DB1.Ship_To_Zip_Postal_Code);
     PARAMETER(DB1.Bill_to_Customer);
     PARAMETER(DB1.Bill_to_Name);
     PARAMETER(DB1.Bill_to_Address_Line_1);
     PARAMETER(DB1.Bill_to_Address_Line_2);
     PARAMETER(DB1.Bill_to_Address_Line_3);
     PARAMETER(DB1.Bill_to_City);
     PARAMETER(DB1.Bill_to_State_Code);
     PARAMETER(DB1.Bill_to_Zip_Postal_Code);
     PARAMETER(DB1.Customer_Purchase_Order_#);
     PARAMETER(DB1.Order_Date);
     PARAMETER(DB1.Requested_Ship_Date);
     PARAMETER(DB1.Actual_Shipped_Date);
     PARAMETER(DB1.Cancel_Date);
     PARAMETER(DB1.Terms_Code);
     PARAMETER(DB1.Special_Instructions);
     PARAMETER(DB1.Special_Instructions_2);
     PARAMETER(DB1.Carrier_Code);
     PARAMETER(DB1.Comment_Print_Acknowledge);
     PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
     PARAMETER(DB1.Comment_Print_Pick_Slip);
     PARAMETER(DB1.Comment_Print_Ship_Doc);
     PARAMETER(DB1.Reason_Code);
     PARAMETER(DB1.Order_in_Use);
     PARAMETER(DB1.Header_Status);
     PARAMETER(DB1.Header_Status_Last);
     PARAMETER(DB1.Order_Type_Print_Status);
     PARAMETER(DB1.Scheduled_Ship_Date);
     PARAMETER(DB1.User_Original_Entry);
     PARAMETER(DB1.Date_of_Original_Entry);
     PARAMETER(DB1.Order_Value_Total);
     PARAMETER(DB1.Order_Weight_Total);
     PARAMETER(DB1.Credit_Hold);
     PARAMETER(DB1.Production_Hold);
     PARAMETER(DB1.New_Customer_Hold);
     PARAMETER(DB1.Requested_Delivery_Date);
     PARAMETER(DB1.Requested_Delivery_Time);
     PARAMETER(DB1.Accounts_Receiv_Ent_1);
     PARAMETER(DB1.Accounts_Receiv_Ent_2);
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
     PARAMETER(DB1.Rated_Freight);
     PARAMETER(DB1.LTL_Flag);
     PARAMETER(DB1.Price_Audit);
     PARAMETER(DB1.Price_Status);
     PARAMETER(DB1.Shipping_Method);
     PARAMETER(DB1.Export_Status);
     PARAMETER(DB1.Palletize);
     PARAMETER(DB1.Shrink_Wrap);
     PARAMETER(DB1.Slip_Sheet);
     PARAMETER(DB1.Age_Code);
     PARAMETER(DB1.Reefer_Temperature);
     PARAMETER(DB1.Load_Type);
     PARAMETER(DB1.Attach_to_Invoice_Number);
     PARAMETER(DB1.Load_Plan_Order);
     PARAMETER(DB1.Print_Pick_Slip);
     PARAMETER(DB1.Resell_Reference_Number);
     PARAMETER(DB1.Special_Comment_1);
     PARAMETER(DB1.Special_Comment_2);
     PARAMETER(DB1.Affect_Auto_Accruals);
     PARAMETER(DB1.Sales_Route_Code);
     PARAMETER(DB1.Manager_Level_Code);
     PARAMETER(DB1.VP_Level_Code);
     PARAMETER(DB1.Attach_to_Order_Number);
     PARAMETER(DB1.Reason_for_Price_Audit);
     PARAMETER(DB1.Invoice_Number);
     PARAMETER(DB1.Invoice_Suffix);
     PARAMETER(DB1.Invoice_Date);
     PARAMETER(DB1.Event_Code);
     PARAMETER(DB1.Trans_Contol_AS400_Plant);
     PARAMETER(DB1.Modified_Flag);
     PARAMETER(DB1.A_R_order_Value_Total);
     PARAMETER(DB1.Billing_Activity_Type);
     PARAMETER(DB1.Block_Order_Flag);
     PARAMETER(DB1.Order_Certification_Flag);
     PARAMETER(DB1.Invoice_Order_Value_Tot);
     PARAMETER(DB1.Process_Sts_for_3C);
     PARAMETER(DB1.Order_Conf_Fax_Sts);
     PARAMETER(DB1.Manifest_Fax_Sts);
     PARAMETER(DB1.Invoice_Fax_Sts);
     PARAMETER(DB1.Transfer_in_Storage_Ind);
     PARAMETER(DB1.Email_Cust_On_Order_Ship);
     PARAMETER(DB1.Order_Emailed);
     PARAMETER(DB1.Export_Docs_Go_w_Driver);
     PARAMETER(DB1.Shipping_Temp_Code_C_F);
     PARAMETER(DB1.Broker_Order_Status);
     PARAMETER(DB1.Air_Freight_Order);
     PARAMETER(DB1.Order_Requires_Review);
     PARAMETER(DB1.OH_Load_Plan_Ready);
     PARAMETER(DB1.Export_USDA_Approved);
     PARAMETER(DB1.HPB_Ship_to_Warehouse);
     PARAMETER(DB1.OH_TF_Exempt_Code);
     PARAMETER(DB1.OH_Appt_Confirmation_Dt);
     PARAMETER(DB1.JPN_Invoice_Issuance_Date);
     PARAMETER(DB1.Load_Actual_Shipped_Date);
     PARAMETER(DB1.Load_BOL_Complete_Date);
     PARAMETER(DB1.Load_Truck_Departure_Date);
     PARAMETER(DB1.Maximum_Gross_Weight);
     PARAMETER(DB1.Time_of_Original_Entry);
     PARAMETER(DB1.OH_Appt_Confirmation_Tm);
     PARAMETER(DB1.Load_BOL_Complete_Time);
     PARAMETER(DB1.Load_Truck_Departure_Time);
     PARAMETER(DB1.Act_Frt_Reference_Amount);
     PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
     PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
     PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
     PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
     PARAMETER(DB1.Claim_Number);
     PARAMETER(DB1.EDI_Status_1);
     PARAMETER(DB1.EDI_Status_2);
     PARAMETER(DB1.EDI_Status_3);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);

    }

    EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(PAR.Deadline_Departure_Date);
    PARAMETER(LCL.Deadline_Depart_Time_HDR);
    {
     //?USER: Process Data record

     EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Deadline_Depart_Date_LH);
     PARAMETER(PAR.Deadline_Depart_Time_LH);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

    }

    //?Order Event to 02
    //?Log add to load   -- if in add mode only
    //?Create Log if ADD or CHG
    CASE;

    // IF PAR.Add/Change/Delete USR is Add
    IF PAR.Add_Change_Delete_USR = 'A';

    // OR PAR.Add/Change/Delete USR is Change
    OR PAR.Add_Change_Delete_USR = 'C';

    // Call program CRT Load/Order Chg Log XF.
    CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(DB1.TMS_Event_Sequence);
    PARAMETER('ADDORD');
    PARAMETER('TRF');
    PARAMETER(*BLANK);
    PARAMETER(*BLANK);
    PARAMETER(JOB.*USER);
    PARAMETER(JOB.*PROGRAM);
    PARAMETER(PAR.Carrier_Code);
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);

    ENDIF;

    //?Order header Ext updates    *NOTE OHE get upd again frm Intl Leg
    //? with Carrier Mode = "OCEAN"   -- except for the load id, stop#
    //?07/24/19 DN R15161-Set OHE Voyage/Flight.
    CASE;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?OHE Voyage/Flight field type was changed from NBR (5) to TXT (15).
    //?No longer need to check if value is numeric.
    // LCL.OHE Voyage/Flight = PAR.TMS Voyage Number
    LCL.OHE_Voyage_Flight = PAR.TMS_Voyage_Number;

    ENDIF;

    // Call program CVT *YYMD to *CYMD    XF.
    CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
    PARAMETER(LCL.OHE_Sail_Flight_Date);
    PARAMETER(PAR.TMS_Vessel_ETD_Date);

    // Call program CVT *YYMD to *CYMD    XF.
    CALL PROGRAM(CVT *YYMD to *CYMD    XF) ('PDGYXFR');
    PARAMETER(LCL.OHE_Arrival_Date);
    PARAMETER(PAR.TMS_Vessel_ETA_Date);

    //?* Added update original appointment date/time       E009492
    //?07/24/19 DN R15161-Replaced PAR.Voyage with OHE Voyage/Flight &
    //?  PAR.Booking Number with OHE Booking Number.
    EXECUTE FUNCTION(RTV Chg TMS Load Flds RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2124025;
    PARAMETER(LCL.Company_Number);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(PAR.Stop_Drop_Sequence_Number);
    PARAMETER(PAR.TMS_OTR_Destination_City);
    PARAMETER(LCL.OHE_Voyage_Flight);
    PARAMETER(PAR.TMS_Booking_Number);
    PARAMETER(PAR.TMS_Late_Reason_Code);
    PARAMETER(PAR.TMS_Container_Number);
    PARAMETER(LCL.Original_Appointment_Date);
    PARAMETER(LCL.Original_Appointment_Time);
    PARAMETER(*BLANK);
    PARAMETER(PAR.TMS_OTR_Destination_Name);
    PARAMETER(PAR.TMS_Vessel_Name);
    PARAMETER(*ZERO);
    PARAMETER(*BLANK);
    PARAMETER(PAR.TMS_Container_Number);
    PARAMETER('O');
    PARAMETER(LCL.OHE_Load_Haul_Type);
    PARAMETER(LCL.OHE_Arrival_Date);
    PARAMETER(LCL.OHE_Sail_Flight_Date);
    {
     //?USER: Processing if Data record not found

     //?07/24/19 DN R15161-Replaced Voyage w/ OHE Voyage/Flight & Booking
     //?  Number w/ OHE Booking Number.
     EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Load_ID);
     PARAMETER(*ZERO);
     PARAMETER(PAR.Shipping_Line);
     PARAMETER(PAR.Port_Delv_Terminal);
     PARAMETER(PAR.OHE_City);
     PARAMETER(PAR.Vessel_Name);
     PARAMETER(PAR.OHE_Voyage_Flight);
     PARAMETER(PAR.OHE_Booking_Number);
     PARAMETER(PAR.OHE_City);
     PARAMETER(PAR.OHE_Sail_Flight_Date);
     PARAMETER(*ZERO);
     PARAMETER(PAR.OHE_Arrival_Date);
     PARAMETER(PAR.OHE_Late_Delivery_Code);
     PARAMETER('O');
     PARAMETER(PAR.OHE_Container_Number);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*BLANK);
     PARAMETER(LCL.OHE_Spot_Buy);
     PARAMETER(LCL.OHE_PO_ACK_Flag);
     PARAMETER(LCL.OHE_Override_Type_Code);
     PARAMETER(LCL.OHE_Backhaul_Status);
     PARAMETER(LCL.OHE_Backhaul_ETA_AM_PM);
     PARAMETER(PAR.OHE_Load_Haul_Type);
     PARAMETER(LCL.OHE_Backhaul_Carrier_Code);
     PARAMETER(LCL.OHE_Bookings_Confirmed);
     PARAMETER(LCL.OHE_EDI_Error_Reasons);
     PARAMETER(LCL.OHE_EDI_Error_Reasons_2);
     PARAMETER(*ZERO);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(LCL.OHE_EDI_943_Action);
     PARAMETER(LCL.OHE_EDI_944_Action);
     PARAMETER(LCL.OHE_EDI_940_Action);
     PARAMETER(LCL.OHE_EDI_945_Action);
     PARAMETER(LCL.OHE_EDI_856_Action);
     PARAMETER(LCL.OHE_EDI_824_Action);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(PAR.Original_Appointment_Date);
     PARAMETER(PAR.Original_Appointment_Time);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(*BLANK);
     PARAMETER(LCL.OHE_Email_BOL_Sent);
     PARAMETER(LCL.OHE_EDI_Order_Automated);
     PARAMETER(LCL.OHE_EDI_601_Action);
     PARAMETER(LCL.OHE_Unused_Status_4);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*ZERO);
     PARAMETER(*ZERO);
     PARAMETER(LCL.EDI_Status_1);
     PARAMETER(LCL.EDI_Status_2);
     PARAMETER(LCL.EDI_Status_3);
     PARAMETER(LCL.Record_Status);
     PARAMETER(*ZERO);
     PARAMETER(*BLANK);
     PARAMETER(*BLANK);
     PARAMETER(*ZERO);
     {
      //?USER: Processing before Data update

      // DB1.Job Time = JOB.*Job time
      DB1.Job_Time = JOB.*Job_time;

      // DB1.Job Date = JOB.*Job date
      DB1.Job_Date = JOB.*Job_date;

      // DB1.Job Name = JOB.*PROGRAM
      DB1.Job_Name = JOB.*PROGRAM;

      // DB1.User Id = JOB.*USER
      DB1.User_Id = JOB.*USER;

     }

     //?USER: Process Data record

     //?07/24/19 DN R15161-Replaced Voyage w/ OHE Voyage/Flight & Booking
     //?  Number w/ OHE Booking Number.
     EXECUTE FUNCTION(CHG Existing OHE       CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC1816935;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(PAR.Load_ID);
     PARAMETER(PAR.Stop_Drop_Sequence_Number);
     PARAMETER(PAR.Shipping_Line);
     PARAMETER(PAR.Port_Delv_Terminal);
     PARAMETER(PAR.OHE_City);
     PARAMETER(PAR.Vessel_Name);
     PARAMETER(PAR.OHE_Voyage_Flight);
     PARAMETER(PAR.OHE_Booking_Number);
     PARAMETER(PAR.Discharge_Port);
     PARAMETER(PAR.OHE_Sail_Flight_Date);
     PARAMETER(DB1.OHE_Port_Cut_Date);
     PARAMETER(PAR.OHE_Arrival_Date);
     PARAMETER(PAR.OHE_Late_Delivery_Code);
     PARAMETER(PAR.Ship_Status);
     PARAMETER(PAR.OHE_Container_Number);
     PARAMETER(DB1.OHE_Comment_1);
     PARAMETER(DB1.OHE_Comment_2);
     PARAMETER(DB1.OHE_Unused_Number_1_11_0);
     PARAMETER(DB1.OHE_Unused_Number_2_11_0);
     PARAMETER(DB1.OHE_Unused_Number_3_11_0);
     PARAMETER(DB1.OHE_Unused_Number_4_11_0);
     PARAMETER(DB1.OHE_HPB_RIN_Equiv_Value);
     PARAMETER(DB1.OHE_HPB_RIN_Price);
     PARAMETER(DB1.Transload_Terminal_Fees);
     PARAMETER(DB1.OHE_Est_Arrv_at_Dest_Date);
     PARAMETER(DB1.OHE_Backhaul_ETA_RtrnDate);
     PARAMETER(DB1.OHE_Port_Pier_Paid_Date);
     PARAMETER(DB1.OHE_Actual_Ship_Date);
     PARAMETER(DB1.OHE_Carrier_SCAC_Code);
     PARAMETER(DB1.OHE_Spot_Buy);
     PARAMETER(DB1.OHE_PO_ACK_Flag);
     PARAMETER(DB1.OHE_Override_Type_Code);
     PARAMETER(DB1.OHE_Backhaul_Status);
     PARAMETER(DB1.OHE_Backhaul_ETA_AM_PM);
     PARAMETER(PAR.OHE_Load_Haul_Type);
     PARAMETER(DB1.OHE_Backhaul_Carrier_Code);
     PARAMETER(DB1.OHE_Bookings_Confirmed);
     PARAMETER(DB1.OHE_EDI_Error_Reasons);
     PARAMETER(DB1.OHE_EDI_Error_Reasons_2);
     PARAMETER(DB1.HPB_COA_Batch_Number);
     PARAMETER(DB1.Delivery_P_O_Number);
     PARAMETER(DB1.OHE_Intended_for_ExportCC);
     PARAMETER(DB1.OHE_EDI_943_Action);
     PARAMETER(DB1.OHE_EDI_944_Action);
     PARAMETER(DB1.OHE_EDI_940_Action);
     PARAMETER(DB1.OHE_EDI_945_Action);
     PARAMETER(DB1.OHE_EDI_856_Action);
     PARAMETER(DB1.OHE_EDI_824_Action);
     PARAMETER(DB1.OHE_Transload_Seal_Nbr);
     PARAMETER(DB1.OHE_Abs_Rate_Override_Rsn);
     PARAMETER(DB1.OHE_Appt_Confirmation_#);
     PARAMETER(DB1.OHE_Backhaul_Container#);
     PARAMETER(DB1.OHE_Backhaul_Chassis_#);
     PARAMETER(DB1.OHE_Transload_Container#);
     PARAMETER(DB1.OHE_Pier_Pass_Invoice);
     PARAMETER(DB1.OHE_Carrier_Nm);
     PARAMETER(DB1.OHE_Appt_Confirmation_Nm);
     PARAMETER(DB1.OHE_Backhaul_Comment);
     PARAMETER(DB1.Letter_of_Credit_Number);
     PARAMETER(DB1.OHE_Backhaul_Return_to_Co);
     PARAMETER(DB1.LD_Stop_Drop);
     PARAMETER(DB1.OHE_Unused_Number_3_0);
     PARAMETER(DB1.OHE_Pier_Pass_Fee_Amount);
     PARAMETER(DB1.OHE_Port_Check_Fee_Amount);
     PARAMETER(DB1.OHE_Port_Cut_Time);
     PARAMETER(DB1.OHE_Backhaul_Truck_Number);
     PARAMETER(DB1.OHE_Load_Sched_Seq_Num);
     PARAMETER(DB1.Original_Appointment_Date);
     PARAMETER(DB1.Original_Appointment_Time);
     PARAMETER(DB1.OHE_PowerPro_Load#_Outbnd);
     PARAMETER(DB1.OHE_PowerPro_Load#_Bckhl);
     PARAMETER(DB1.OHE_Unused_Numeric_9_0_3);
     PARAMETER(DB1.OHE_Orig_ABS_Freight_Rate);
     PARAMETER(DB1.OHE_Genset_Number);
     PARAMETER(DB1.OHE_Email_BOL_Sent);
     PARAMETER(DB1.OHE_EDI_Order_Automated);
     PARAMETER(DB1.OHE_EDI_601_Action);
     PARAMETER(DB1.OHE_Unused_Status_4);
     PARAMETER(DB1.OHE_Unused_Text_1);
     PARAMETER(DB1.OHE_Unused_Text_2);
     PARAMETER(DB1.OHE_Customer_Vendor_f_PO);
     PARAMETER(DB1.OHE_EDI_824_AES_ITN_#);
     PARAMETER(DB1.OHE_Unused_Text_5);
     PARAMETER(DB1.OHE_Unused_Date_1);
     PARAMETER(DB1.OHE_Unused_Date_2);
     PARAMETER(DB1.EDI_Status_1);
     PARAMETER(DB1.EDI_Status_2);
     PARAMETER(DB1.EDI_Status_3);
     PARAMETER(DB1.Record_Status);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?USER: Processing if Data record not found

      // PGM.*Return code = CND.*Normal
      PGM.*Return_code = *BLANK;

      //?USER: Processing before Data update

      // DB1.Job Time = JOB.*Job time
      DB1.Job_Time = JOB.*Job_time;

      // DB1.Job Date = JOB.*Job date
      DB1.Job_Date = JOB.*Job_date;

      // DB1.Job Name = JOB.*PROGRAM
      DB1.Job_Name = JOB.*PROGRAM;

      // DB1.User Id = JOB.*USER
      DB1.User_Id = JOB.*USER;

     }

    }

    EXECUTE FUNCTION(Change TMS Load Event Shi) TYPE(CHGOBJ) FILE(PBCUCPP)          AC2123089;
    PARAMETER(DB1.TMS_Load_ID);
    PARAMETER(DB1.TMS_Extract_Date);
    PARAMETER(DB1.TMS_Extract_Time);
    PARAMETER(DB1.TMS_Extract_File_Name);
    PARAMETER(DB1.TMS_Event_Sequence);
    PARAMETER(DB1.TMS_Order_ID);
    PARAMETER(DB1.TMS_Miles_from_Org_to_Dst);
    PARAMETER(DB1.TMS_Record_Status);
    PARAMETER(1);
    PARAMETER(*BLANK);
    PARAMETER(DB1.TMS_Change_Date);
    PARAMETER(DB1.TMS_Change_time);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
     PARAMETER(DB1.TMS_Record_Status);
     PARAMETER(DB1.TMS_Change_Date);
     PARAMETER(DB1.TMS_Change_time);
     {
      //?Execute internal function

      // PAR.TMS Change time = JOB.*Job time
      PAR.TMS_Change_time = JOB.*Job_time;

      // PAR.TMS Change Date = JOB.*Job date
      PAR.TMS_Change_Date = JOB.*Job_date;

     }

    }

   }

   EXECUTE FUNCTION(Change TMS Load Event) TYPE(CHGOBJ) FILE(PBCSCPP)              AC2123078;
   PARAMETER(DB1.TMS_Load_ID);
   PARAMETER(DB1.TMS_Extract_Date);
   PARAMETER(DB1.TMS_Extract_Time);
   PARAMETER(DB1.TMS_Extract_File_Name);
   PARAMETER(DB1.TMS_Event_Sequence);
   PARAMETER(DB1.TMS_Event_Type);
   PARAMETER(DB1.TMS_Earliest_Date);
   PARAMETER(DB1.TMS_Earliest_Time);
   PARAMETER(DB1.TMS_Latest_Date);
   PARAMETER(DB1.TMS_Latest_Time);
   PARAMETER(DB1.TMS_Planned_Date);
   PARAMETER(DB1.TMS_Planned_Time);
   PARAMETER(DB1.TMS_Actual_Date);
   PARAMETER(DB1.TMS_Actual_Time);
   PARAMETER(DB1.TMS_Address_Type);
   PARAMETER(DB1.TMS_Location_Code);
   PARAMETER(DB1.TMS_Address_Name);
   PARAMETER(DB1.TMS_Address_Line_1);
   PARAMETER(DB1.TMS_Address_Line_2);
   PARAMETER(DB1.TMS_City);
   PARAMETER(DB1.TMS_State_Province);
   PARAMETER(DB1.TMS_Postal_Code);
   PARAMETER(DB1.TMS_Country_Code);
   PARAMETER(DB1.TMS_Weight);
   PARAMETER(DB1.TMS_Weight_UOM);
   PARAMETER(DB1.TMS_Appointment_Date);
   PARAMETER(DB1.TMS_Appointment_Time);
   PARAMETER(DB1.TMS_Actual_Car_Arrival_Dt);
   PARAMETER(DB1.TMS_Actual_Car_Arrival_Tm);
   PARAMETER(DB1.TMS_Late_Reason_Code);
   PARAMETER(DB1.TMS_Cust_Assigned_Appt_#);
   PARAMETER(DB1.TMS_Record_Status);
   PARAMETER(1);
   PARAMETER(*BLANK);
   PARAMETER(DB1.TMS_Change_Date);
   PARAMETER(DB1.TMS_Change_time);
  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?RMC 1/8/18 Check for multi company
 EXECUTE FUNCTION(Rtv Ld ShpCo/MultiCo  RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1909337;
 PARAMETER(PAR.Load_ID);
 PARAMETER(LCL.Company_Number_051922);
 PARAMETER(PAR.Multi_Company_Load);
 {
  //?USER: Initialize routine

  // PAR.Multi Company Load = CND.no
  PAR.Multi_Company_Load = 'N';

  // PAR.Company Number = CON.*ZERO
  PAR.Company_Number = *ZERO;

  //?USER: Process Data record

  CASE;

  // IF PAR.Company Number is Equal to zero
  IF PAR.Company_Number = *ZERO;

  // PAR.Company Number = DB1.Company Number
  PAR.Company_Number = DB1.Company_Number;

  ENDIF;

  CASE;

  // IF PAR.Company Number NE DB1.Company Number
  IF PAR.Company_Number <> DB1.Company_Number;

  // PAR.Multi Company Load = CND.yes
  PAR.Multi_Company_Load = 'Y';

  QUIT;

  ENDIF;

 }

 CASE;

 // IF PAR.Multi Company Load is not no
 IF PAR.Multi_Company_Load = *BLANK/'Y';

 EXECUTE FUNCTION(CHG Mult Company Flag  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC2146701;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Multi_Company_Load);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDDO;

 //?Do whenever charges come up on the extract:
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?RMC 12.05.16 added to crt TNU charges even if ord already invoiced
 //?If load inv charges exist  then do special routine to alloc $$
 //?07/23/18 DN S13418-Removed 'TONU' conditions & in PBXIXFR.
 // Call program Exc Crt Load Frt Chg  XF.
 CALL PROGRAM(Exc Crt Load Frt Chg  XF) ('PBXIXFR');
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Rated_Freight);
 PARAMETER(PAR.Add_Change_Delete_USR);
 PARAMETER(LCL.TMS_Carrier_SCAC);

 // PAR.TMS Process Status = CND.Processed
 PAR.TMS_Process_Status = 1;

 ENDIF;

 //?Change # of stops, Lock Load edit, Write pfs
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND PAR.Add/Change/Delete USR is Add/Change/Delete
 AND PAR.Add_Change_Delete_USR = 'A'/'C'/'D';

 //?Only if any change was made  9.21.16
 //?Chg total number of Stops, and lock load IF not shipped/invoiced
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND PAR.Add/Change/Delete USR is Add
 AND ( PAR.Add_Change_Delete_USR = 'A';

 // OR PAR.Status Flag 1  Y/N is Yes
 OR PAR.Status_Flag_1_Y_N = 'Y';

 // OR PAR.Status Flag 2  Y/N is Yes
 OR PAR.Status_Flag_2_Y_N = 'Y' );

 // AND PAR.Load Status is Entered,Comb,Unlck,Locked
 AND PAR.Load_Status = 'C'/'E'/'L'/'U';

 CASE;

 // IF PAR.Add/Change/Delete USR is Add
 IF PAR.Add_Change_Delete_USR = 'A';

 // OR PAR.Status Flag 1  Y/N is Yes
 OR PAR.Status_Flag_1_Y_N = 'Y';

 // PAR.Total Stops = CON.*ZERO
 PAR.Total_Stops = *ZERO;

 // WRK.Company Number     041405 = CON.*ZERO
 WRK.Company_Number_041405 = *ZERO;

 EXECUTE FUNCTION(RTV No. of Stops      RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1197874;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(PAR.Multi_Company_Load);
 {
  //?USER: Initialize routine

  // PAR.USR Stop = CON.*ZERO
  PAR.USR_Stop = *ZERO;

  // PAR.Multi Company Load = CND.no
  PAR.Multi_Company_Load = 'N';

  //?USER: Process Data record

  CASE;

  // IF DB1.Stop/Drop NE PAR.USR Stop
  IF DB1.Stop_Drop <> PAR.USR_Stop;

  // PAR.Total Stops = PAR.Total Stops + CON.1
  PAR.Total_Stops = PAR.Total_Stops + 1;

  // PAR.USR Stop = DB1.Stop/Drop
  PAR.USR_Stop = DB1.Stop_Drop;

  ENDIF;

  CASE;

  // IF WRK.Company Number     041405 is Equal to zero
  IF WRK.Company_Number_041405 = *ZERO;

  // WRK.Company Number     041405 = DB1.Company Number
  WRK.Company_Number_041405 = DB1.Company_Number;

  ENDIF;

  //?Multi Company Load?               PKTR01 8/5/04
  CASE;

  // IF DB1.Company Number NE WRK.Company Number     041405
  IF DB1.Company_Number <> WRK.Company_Number_041405;

  // PAR.Multi Company Load = CND.yes
  PAR.Multi_Company_Load = 'Y';

  ENDIF;

 }

 //?Calc Load U/M           -- RMC 9/30/16 e4119
 DO;

 //?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
 // Call program RTV UM/Whs Code,BX Qty XF.
 CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(LCL.Load_U_M);

 ENDDO;

 EXECUTE FUNCTION(CHG For TMS Stp/Mult  CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2123129;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(PAR.Multi_Company_Load);
 PARAMETER(LCL.Load_U_M);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 ENDIF;

 //?CAN LOAD BE LOCKED?? IF IT IS UNLOCKED
 //?** If possible Lock Load when not on hold,pass NO for lock opt override
 //?Lock option override sts='N' wont lock loads shipping > current job date
 CASE;

 // IF PAR.Load Status is Entered,Combined,Unlock
 IF PAR.Load_Status = 'C'/'E'/'U';

 // WRK.STATUS = CND.No
 WRK.STATUS = 'N';

 // Call program EDT Lock Load Edit/INF XF.
 CALL PROGRAM(EDT Lock Load Edit/INF XF) ('PBXHXFR');
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(LCL.*SFLSEL);
 PARAMETER(WRK.STATUS);
 PARAMETER(LCL.Error_Status);
 PARAMETER('Y');

 //? Lock Load if no errors
 CASE;

 // IF LCL.Error Status is no
 IF LCL.Error_Status = 'N';

 CASE;

 // IF PAR.Load Status is Unlock
 IF PAR.Load_Status = 'U';

 EXECUTE FUNCTION(UPD Lock Load Update   IF) TYPE(EXCINTFUN)                     AC1451094;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Load Header All,Mg RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2124794;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(PAR.Flat_Amount);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Total_Stops);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(PAR.Carrier_Broker);
  PARAMETER(PAR.Export_Status);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  PARAMETER(PAR.MG_Created_Load);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?.** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
  //?Fill in ship from whse deadline depart, if locking load and none entered
  CASE;

  // IF PAR.Ship From Warehouse EQ WRK.BLANK
  IF PAR.Ship_From_Warehouse = WRK.BLANK;

  EXECUTE FUNCTION(Rtv/Chg Whs,ld miles  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1471360;
  PARAMETER(PAR.Load_ID);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
   PARAMETER(DB1.Load_ID);
   PARAMETER(1);
   PARAMETER(PAR.Ship_From_Warehouse);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(*ZERO);
    PARAMETER(*ZERO);
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(WRK.TXT_field_not_needed);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      // PGM.*Return code = CND.*Record does not exist
      PGM.*Return_code = 'Y2U0005';

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     MOVE *ALL (To: PAR From: DB1);

     QUIT;

    }

    QUIT;

   }

   CASE;

   // IF DB1.Warehouse Code EQ PAR.Ship From Warehouse
   IF DB1.Warehouse_Code = PAR.Ship_From_Warehouse;

   // PAR.Warehouse Code = CON.*BLANK
   PAR.Warehouse_Code = *BLANK;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Warehouse Code = DB1.Warehouse Code
   PAR.Warehouse_Code = DB1.Warehouse_Code;

   ENDIF;

   //?** 11/16/2007 LJB FP1251 Total Load Miles will = zeros if no
   //?** Miles Between Cities record exists
   //?** Override total load miles will take precedence over tlm  E00207
   //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
   CASE;

   // IF DB1.MG Created Load is Yes
   IF DB1.MG_Created_Load = 'Y';

   // PAR.Total Load Miles = DB1.Total Load Miles
   PAR.Total_Load_Miles = DB1.Total_Load_Miles;

   // PAR.Override Total Load Miles = DB1.Override Total Load Miles
   PAR.Override_Total_Load_Miles = DB1.Override_Total_Load_Miles;

   //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
   // IF *OTHERWISE
   IF *OTHERWISE;

   // Call program CLC Total Load Miles   XF.
   CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
   PARAMETER(DB1.Load_ID);
   PARAMETER(PAR.Total_Load_Miles);
   PARAMETER(PAR.Override_Total_Load_Miles);

   ENDIF;

   //?** Add override miles to the update            E00207 LJB 08/13/08
   EXECUTE FUNCTION(CHG Ship FrmWhs,ld mls CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1471384;
   PARAMETER(DB1.Load_ID);
   PARAMETER(PAR.Total_Load_Miles);
   PARAMETER(PAR.Ship_From_Warehouse);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Override_Total_Load_Miles);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  CASE;

  // IF PAR.MG Created Load is Not MG Created Load
  IF PAR.MG_Created_Load = *BLANK;

  //?** RTV carrier appt date/time                         E00495
  EXECUTE FUNCTION(RTV 1st Carr Apt Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1954073;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(WRK.LD_Carrier_Appt_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   // PAR.LD Carrier Appt Date = DB1.LD Carrier Appt Date
   PAR.LD_Carrier_Appt_Date = DB1.LD_Carrier_Appt_Date;

   // PAR.LD Carrier Appt Time = DB1.LD Carrier Appt Time
   PAR.LD_Carrier_Appt_Time = DB1.LD_Carrier_Appt_Time;

   QUIT;

  }

  //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
  CASE;

  // IF WRK.LD Carrier Appt Date is Entered
  IF WRK.LD_Carrier_Appt_Date > 0;

  // PAR.Deadline Departure Date = WRK.LD Carrier Appt Date
  PAR.Deadline_Departure_Date = WRK.LD_Carrier_Appt_Date;

  //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv 1st Ord Delv Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456727;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Ship_To_Name);
   PARAMETER(WRK.Ship_To_City);
   PARAMETER(NLL.Ship_To_State_Code);
   PARAMETER(PAR.Requested_Delivery_Date);
   PARAMETER(PAR.Requested_Delivery_Time);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   QUIT;

  }

  // PAR.Deadline Departure Time = PAR.Requested Delivery Time * CON.100 *
  PAR.Deadline_Departure_Time = PAR.Requested_Delivery_Time * 100;

  ENDIF;

  EXECUTE FUNCTION(CLC Departure Date/TimeIF) TYPE(EXCINTFUN)                     AC1456426;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  {
   //?Execute internal function

   //?***** Change Log and Comments
   DO;

   //?** The Date and Time being calculated are the latest date and time
   //?** that the truck can leave the warehouse and still make the
   //?** delivery on time.
   //?*****
   //?** E00495 LJB 09.23.2009
   //?** Carrier Appt Date and Time are in the parm Deadline Departure
   //?** date and time, if called from "UPD Ld Mi,Whse,DDD/T IF"
   //?*****
   //?** E00207 LJB 08/11/2008
   //?** Override Total Load Miles has been added to the
   //?** Retrieve Total Load Miles function
   //?*****
   //?** FP1251 LJB 12/26/2007
   //?** If no Miles To Next record, change SSD/T to zeros.
   //?** Scheduled Deliv Date has (should have) Requested Delivery Date in it
   ENDDO;

   EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
   PARAMETER(PAR.Load_ID);
   PARAMETER(LCL.Shipping_Method);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.Shipping Method is Collect Truck
   IF LCL.Shipping_Method = 'CT';

   // OR LCL.Shipping Method is Collect Rail
   OR LCL.Shipping_Method = 'CR';

   //?** Treat CT & CR the same           FP1251 LJB 12/26/2007
   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
   PARAMETER(PAR.Load_ID);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Miles_to_next_stop);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   //?** Calc miles between all stops then retrieve 1st stop miles
   CASE;

   // IF PAR.Miles to next stop is Not Entered
   IF PAR.Miles_to_next_stop = *ZERO;

   //?** Override miles will be returned, if entered
   // Call program CLC Total Load Miles   XF.
   CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
   PARAMETER(PAR.Load_ID);
   PARAMETER(WRK.Total_Load_Miles);
   PARAMETER(WRK.Override_Total_Load_Miles);

   EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
   PARAMETER(PAR.Load_ID);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Miles_to_next_stop);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   ENDIF;

   //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
   CASE;

   // IF PAR.Miles to next stop is Not Entered
   IF PAR.Miles_to_next_stop = *ZERO;

   // PAR.Scheduled Delivery Date = CND.not entered
   PAR.Scheduled_Delivery_Date = *ZERO;

   // PAR.Scheduled Delivery Time = CND.Not Entered
   PAR.Scheduled_Delivery_Time = *ZERO;

   //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Hours Required = CON.*ZERO
   PAR.Hours_Required = *ZERO;

   // LCL.Hours Required = CON.*ZERO
   LCL.Hours_Required = *ZERO;

   EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
   PARAMETER(PAR.Miles_to_next_stop);
   PARAMETER(LCL.Hours_Required);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   //?09/09/11 PKD E1659 Additional Route Hours
   // Call program Rtv Addtnl Route Hrs  XF.
   CALL PROGRAM(Rtv Addtnl Route Hrs  XF) ('PMACXFR');
   PARAMETER(PAR.Load_ID);
   PARAMETER(LCL.Additional_Route_Hours);

   // PAR.Hours Required = LCL.Hours Required + LCL.Additional Route Hours
   PAR.Hours_Required = LCL.Hours_Required + LCL.Additional_Route_Hours;

   //?get number of whole days + remaining hours
   CASE;

   // IF PAR.Hours Required is Zero
   IF PAR.Hours_Required = *ZERO;

   //?get number of whole days + remaining hours
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.@Days 5 = PAR.Hours Required / CON.24 *
   PAR.@Days_5 = PAR.Hours_Required / 24;

   // WRK.USR Hours 5.0 = PAR.@Days 5 * CON.24 *
   WRK.USR_Hours_5_0 = PAR.@Days_5 * 24;

   // PAR.USR Hours 5.0 = PAR.Hours Required - WRK.USR Hours 5.0
   PAR.USR_Hours_5_0 = PAR.Hours_Required - WRK.USR_Hours_5_0;

   // WRK.@Numeric 6,0 = PAR.USR Hours 5.0 * CON.10000 *
   WRK.@Numeric_60 = PAR.USR_Hours_5_0 * 10000;

   //?Subtract whole days
   CASE;

   // IF PAR.@Days 5 is greater than zero
   IF PAR.@Days_5 > *ZERO;

   // PAR.@Days 5 = PAR.@Days 5 * CON.-1 *
   PAR.@Days_5 = PAR.@Days_5 * -1;

   // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
   PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
   1111111 'NONE' 'N' 1);

   ENDIF;

   //?Calculate # whole days + hours left
   CASE;

   // IF WRK.@Numeric 6,0 GE PAR.Scheduled Delivery Time
   IF WRK.@Numeric_60 >= PAR.Scheduled_Delivery_Time;

   // WRK.@Numeric 6,0 = WRK.@Numeric 6,0 - PAR.Scheduled Delivery Time
   WRK.@Numeric_60 = WRK.@Numeric_60 - PAR.Scheduled_Delivery_Time;

   // PAR.@Days 5 = CON.-1
   PAR.@Days_5 = -1;

   // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
   PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
   1111111 'NONE' 'N' 1);

   // PAR.Scheduled Delivery Time = CON.240000 - WRK.@Numeric 6,0
   PAR.Scheduled_Delivery_Time = 240000 - WRK.@Numeric_60;

   //?Calculate # whole days + hours left
   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time - WRK.@Numeric 6,0
   PAR.Scheduled_Delivery_Time = PAR.Scheduled_Delivery_Time - WRK.@Numeric_60;

   ENDIF;

   ENDIF;

   ENDIF;

   EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
   PARAMETER(PAR.Load_ID);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.Total_Load_Miles);
   PARAMETER(WRK.Override_Total_Load_Miles);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  ENDIF;

  ENDIF;

  //?---------------------------------------------------------------
  EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Ship_To_Customer);
  PARAMETER(WRK.Ship_To_Name);
  PARAMETER(WRK.Ship_To_Address_Line_1);
  PARAMETER(WRK.Ship_To_Address_Line_2);
  PARAMETER(WRK.Ship_To_Address_Line_3);
  PARAMETER(WRK.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(WRK.Ship_To_Zip_Postal_Code);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.Ship_To_Name);
   PARAMETER(PAR.Ship_To_Address_Line_1);
   PARAMETER(PAR.Ship_To_Address_Line_2);
   PARAMETER(PAR.Ship_To_Address_Line_3);
   PARAMETER(PAR.Ship_To_City);
   PARAMETER(PAR.Ship_To_State_Code);
   PARAMETER(PAR.Ship_To_Zip_Postal_Code);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.TXT_field_not_needed);
   PARAMETER(WRK.Numeric_Field_Not_Needed);
   PARAMETER(WRK.Numeric_Field_Not_Needed);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   QUIT;

  }

  //?---------------------------------------------------------------
  //?OMS132:  Fill in Flat Amount as required
  CASE;

  // IF PAR.Total Stops is One Stop
  IF PAR.Total_Stops = 1;

  // AND PAR.Flat Amount EQ WRK.ZERO
  AND PAR.Flat_Amount = WRK.ZERO;

  //?get flat amount for destination city
  EXECUTE FUNCTION(RTV Ship To City/St-Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454218;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Destination_City);
  PARAMETER(PAR.State_Code);
  {
   //?USER: Initialize routine

   //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // Execute function CVT Str to Upper Alpha US.
  EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
  PARAMETER(PAR.Destination_City);
  PARAMETER(WRK.Destination_City);
  {
   PDWEUFR:  PGM PARM(&STRIN &STROUT)

   CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
  }

  // PAR.Destination City = WRK.Destination City
  PAR.Destination_City = WRK.Destination_City;

  EXECUTE FUNCTION(RTV Destination Amount RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1454806;
  PARAMETER(PAR.Carrier_Broker);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Destination_City);
  PARAMETER(PAR.State_Code);
  PARAMETER(PAR.Flat_Amount);
  {
   //?USER: Process Data record

   //?only pass out FLAT amt.  (it could now be a ML rate too)  01/03/07
   CASE;

   // IF DB1.CDR Unit of Measure is Flat
   IF DB1.CDR_Unit_of_Measure = 'FL';

   MOVE *ALL (To: PAR From: DB1);

   ENDIF;

  }

  ENDIF;

  //?Calc Load U/M           -- RMC 6/16/06
  DO;

  //?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
  // Call program RTV UM/Whs Code,BX Qty XF.
  CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Load_U_M);

  ENDDO;

  EXECUTE FUNCTION(CHG Lock Load Update   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1454811;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER('L');
  PARAMETER(PAR.Flat_Amount);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Deadline_Departure_Date);
  PARAMETER(PAR.Deadline_Departure_Time);
  PARAMETER(PAR.Load_U_M);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  //?OMS261:  if sched to ship today, print prelim pick at all whses
  //?Sched to ship today
  CASE;

  // IF PAR.Scheduled Ship Date EQ JOB.*Job date
  IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

  EXECUTE FUNCTION(RTV All Whses on Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1483728;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.USR_CDE_Parm_1);
  PARAMETER(PAR.USR_CDE_Parm_2);
  PARAMETER(PAR.USR_CDE_Parm_3);
  PARAMETER(PAR.USR_CDE_Parm_4);
  PARAMETER(PAR.USR_CDE_Parm_5);
  PARAMETER(PAR.USR_CDE_Parm_6);
  PARAMETER(PAR.USR_CDE_Parm_7);
  PARAMETER(PAR.USR_CDE_Parm_8);
  PARAMETER(PAR.USR_CDE_Parm_9);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV All Whses on Order RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1483729;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.USR_Warehouse_Code);
   PARAMETER(PAR.USR_CDE_Parm_1);
   PARAMETER(PAR.USR_CDE_Parm_2);
   PARAMETER(PAR.USR_CDE_Parm_3);
   PARAMETER(PAR.USR_CDE_Parm_4);
   PARAMETER(PAR.USR_CDE_Parm_5);
   PARAMETER(PAR.USR_CDE_Parm_6);
   PARAMETER(PAR.USR_CDE_Parm_7);
   PARAMETER(PAR.USR_CDE_Parm_8);
   PARAMETER(PAR.USR_CDE_Parm_9);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Warehouse Code EQ PAR.USR Warehouse Code
    IF DB1.Warehouse_Code = PAR.USR_Warehouse_Code;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 1
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_1;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 2
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_2;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 3
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_3;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 4
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_4;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 5
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_5;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 6
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_6;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 7
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_7;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 8
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_8;

    // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 9
    IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_9;

    // IF *OTHERWISE
    IF *OTHERWISE;

    //?current warehouse not already being used
    //?Fill in first blank warehouse
    CASE;

    // IF PAR.USR Warehouse Code EQ WRK.BLANK
    IF PAR.USR_Warehouse_Code = WRK.BLANK;

    // PAR.USR Warehouse Code = DB1.Warehouse Code
    PAR.USR_Warehouse_Code = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 1 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_1 = WRK.BLANK;

    // PAR.USR CDE Parm 1 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_1 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 2 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_2 = WRK.BLANK;

    // PAR.USR CDE Parm 2 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_2 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 3 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_3 = WRK.BLANK;

    // PAR.USR CDE Parm 3 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_3 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 4 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_4 = WRK.BLANK;

    // PAR.USR CDE Parm 4 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_4 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 5 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_5 = WRK.BLANK;

    // PAR.USR CDE Parm 5 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_5 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 6 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_6 = WRK.BLANK;

    // PAR.USR CDE Parm 6 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_6 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 7 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_7 = WRK.BLANK;

    // PAR.USR CDE Parm 7 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_7 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 8 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_8 = WRK.BLANK;

    // PAR.USR CDE Parm 8 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_8 = DB1.Warehouse_Code;

    //?Fill in first blank warehouse
    // IF PAR.USR CDE Parm 9 EQ WRK.BLANK
    IF PAR.USR_CDE_Parm_9 = WRK.BLANK;

    // PAR.USR CDE Parm 9 = DB1.Warehouse Code
    PAR.USR_CDE_Parm_9 = DB1.Warehouse_Code;

    ENDIF;

    ENDIF;

   }

  }

  // PAR.Company Number Pass   USR = PAR.Company Number
  PAR.Company_Number_Pass_USR = PAR.Company_Number;

  // PAR.Order Number 1  PASS  USR = PAR.Load ID
  PAR.Order_Number_1_PASS_USR = PAR.Load_ID;

  // PAR.Date 1          PASS  USR = PAR.Scheduled Ship Date
  PAR.Date_1_PASS_USR = PAR.Scheduled_Ship_Date;

  // WRK.USR Select/Omit Flag = CND.Select
  WRK.USR_Select_Omit_Flag = 'S';

  // WRK.USR Detail or Summary = CND.Detail
  WRK.USR_Detail_or_Summary = 'D';

  // WRK.AUTO PRINT PRELIM PICK = CND.AUTO PRINT YES
  WRK.AUTO_PRINT_PRELIM_PICK = 'Y';

  //?letting all the other parms default in the CL
  //?If warehouse exists for load then print.
  CASE;

  // IF PAR.USR Warehouse Code is Warehouse Code not Blank
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // Call program Pass Pre Pick @LoadLockUP.
  CALL PROGRAM(Pass Pre Pick @LoadLockUP) ('PDBDUPC');
  PARAMETER(PAR.Return_Code_Usr);
  PARAMETER('OMS');
  PARAMETER('PDIZPCLP');
  PARAMETER(WRK.USR_Detail_or_Summary);
  PARAMETER('Auto Print Prelim. Pick');
  PARAMETER(WRK.PRT_Printer_Device);
  PARAMETER(WRK.PRT_Hold_Output_Sts);
  PARAMETER(WRK.PRT_Save_Output_Sts);
  PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
  PARAMETER(WRK.PRT_Night_Queue);
  PARAMETER(PAR.Company_Number_Pass_USR);
  PARAMETER(PAR.Date_1_PASS_USR);
  PARAMETER(PAR.Order_Number_1_PASS_USR);
  PARAMETER(WRK.System_Value_Numeric);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.USR_CDE_Parm_1);
  PARAMETER(PAR.USR_CDE_Parm_2);
  PARAMETER(PAR.USR_CDE_Parm_3);
  PARAMETER(PAR.USR_CDE_Parm_4);
  PARAMETER(PAR.USR_CDE_Parm_5);
  PARAMETER(PAR.USR_CDE_Parm_6);
  PARAMETER(PAR.USR_CDE_Parm_7);
  PARAMETER(PAR.USR_CDE_Parm_8);
  PARAMETER(PAR.USR_CDE_Parm_9);
  PARAMETER(WRK.USR_Select_Omit_Flag);
  PARAMETER(WRK.AUTO_PRINT_PRELIM_PICK);

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(EDT Lock Load          IF) TYPE(EXCINTFUN)                     AC1419469;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);
  {
   //?Execute internal function

   //?*** Return Plant Code from first Order Header
   EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Trans_Contol_AS400_Plant);
     {
      //?USER: Process Data record

      CASE;

      // IF DB1.Detail Line Status is Not cancelled
      IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

      EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(WRK.Warehouse_Description);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      QUIT;

      ENDIF;

     }

     CASE;

     // IF WRK.Trans Contol AS400/Plant is Plant
     IF WRK.Trans_Contol_AS400_Plant = 'P';

     // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
     PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(PAR.Company_Number);
   PARAMETER('LDORDD');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?UPD:  AccuSort
   CASE;

   // IF LCL.PFS AccuSort Active is Yes
   IF LCL.PFS_AccuSort_Active = 'Y';

   //?AccuSort:  Create Order Header and Order Detail
   CASE;

   // IF PAR.Trans Contol AS400/Plant is Plant
   IF PAR.Trans_Contol_AS400_Plant = 'P';

   // Call program Zzz Lock/Unlock Box ID XF.
   CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
   PARAMETER('L');

   // Call program Zzz AS Order Hdr/Dtl   XF.
   CALL PROGRAM(Zzz AS Order Hdr/Dtl   XF) ('PDQPXFR');
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Company_Number);

   // Call program Zzz Lock/Unlock Box ID XF.
   CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
   PARAMETER('U');

   ENDIF;

   ENDIF;

   //?UPD:  Carlisle
   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS Lock Load/Order   XF.
   CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
   PARAMETER(PAR.Load_ID);

   ENDIF;

   //?** 07/28/2017 RMC R131331 if load had a whs with edi wso interchange, then
   // Call program Exc Create EDI f/Lock XF.
   CALL PROGRAM(Exc Create EDI f/Lock XF) ('PUDNXFR');
   PARAMETER(PAR.Load_ID);

  }

  CASE;

  // IF JOB.*PROGRAM is PRT Audit Report
  IF JOB.*PROGRAM = 'PDSNPFR';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function Clr Program Message Q  US.
  EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
  {
   * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
   C                     CALL 'Y2CLMSC'
   C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
   C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
   * RESET FIRST MESSAGE ONLY FLAG.
   C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
  }

  //?Sched to ship today
  CASE;

  // IF PAR.Scheduled Ship Date EQ JOB.*Job date
  IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

  CASE;

  // IF PAR.USR Warehouse Code is Warehouse Code not Blank
  IF PAR.USR_Warehouse_Code <> *BLANK;

  // Call program RTV Warehouse Dflt PrtrXF.
  CALL PROGRAM(RTV Warehouse Dflt PrtrXF) ('PDCHXFR');
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(NLL.Default_Printer);
  PARAMETER(LCL.Include_in_Auto_Pre_Pick);

  //?RMC DLY029 10/30/07 - sndmsg only if Warehouse is set up for auto-print
  CASE;

  // IF LCL.Include in Auto Pre Pick is Incl in Auto Prelim Pick
  IF LCL.Include_in_Auto_Pre_Pick = 'Y';

  // Send information message - 'Preliminary Pick Printing at printer for warehouses: &1 &2 &3 &4 &5
  MESSAGE(USR2565 *INFO);
  MSGPARM(PAR.USR_Warehouse_Code);
  MSGPARM(PAR.USR_CDE_Parm_1);
  MSGPARM(PAR.USR_CDE_Parm_2);
  MSGPARM(PAR.USR_CDE_Parm_3);
  MSGPARM(PAR.USR_CDE_Parm_4);
  MSGPARM(PAR.USR_CDE_Parm_5);
  MSGPARM(PAR.USR_CDE_Parm_6);
  MSGPARM(PAR.USR_CDE_Parm_7);
  MSGPARM(PAR.USR_CDE_Parm_8);
  MSGPARM(PAR.USR_CDE_Parm_9);

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send information message - 'Preliminary Pick not printed, no order details.'
  MESSAGE(USR2715 *INFO);

  ENDIF;

  ENDIF;

  ENDIF;

  //?***** Change Log and comments
  DO;

  //?** 07/15/16  RMC E4119 Dont recalc deadl depart,miles if MG Created Load
  //?** 09/30/2009 LJB E00495
  //?**   Use carrier date/time, if entered, to calc DDD/T
  //?** 11/16/2007 LJB FP1251 Deadline Depart Date and Time will be
  //?** zeros if there is no Miles Between Cities record
  ENDDO;

 }

 // WRK.Load Change Type = CND.Lock Load
 WRK.Load_Change_Type = 'LOCK';

 // WRK.Department Control Code = CND.Traffic Dept
 WRK.Department_Control_Code = 'TRF';

 EXECUTE FUNCTION(CRT Load/Order Chg Log IF) TYPE(EXCINTFUN)                     AC1849953;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(WRK.Load_Change_Type);
 PARAMETER(WRK.Department_Control_Code);
 PARAMETER(PAR.Load_Status);
 PARAMETER('L');
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);
 {
  //?Execute internal function

  CASE;

  // IF PAR.Load ID is Blank
  IF PAR.Load_ID = *ZERO;

  EXECUTE FUNCTION(RTV Next Key f/crt dt RT) TYPE(RTVOBJ) FILE(PDLHCPP)           AC2052180;
  PARAMETER(JOB.*Job_date);
  PARAMETER(JOB.*Job_time);
  PARAMETER(LCL.Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.Sequence Number = CON.1
   PAR.Sequence_Number = 1;

   //?USER: Processing if Data record not found

   // PAR.Sequence Number = CON.1
   PAR.Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.Sequence Number is EQ 999
   IF DB1.Sequence_Number = 999;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Sequence Number = DB1.Sequence Number + CON.1
   PAR.Sequence_Number = DB1.Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Next Key           RT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC1485145;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Sequence_Number);
  {
   //?USER: Initialize routine

   // PAR.Sequence Number = CON.1
   PAR.Sequence_Number = 1;

   //?USER: Processing if Data record not found

   // PAR.Sequence Number = CON.1
   PAR.Sequence_Number = 1;

   QUIT;

   //?USER: Process Data record

   CASE;

   // IF DB1.Sequence Number is EQ 999
   IF DB1.Sequence_Number = 999;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // PAR.Sequence Number = DB1.Sequence Number + CON.1
   PAR.Sequence_Number = DB1.Sequence_Number + 1;

   QUIT;

   ENDIF;

  }

  ENDIF;

  //?Use system date/time to minimize dup record creation
  // Call program RTV System Date/Time   UP.
  CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
  PARAMETER(LCL.Current_System_Date);
  PARAMETER(LCL.Current_System_Time);

  EXECUTE FUNCTION(CRT Load/Order Chg Log CR) TYPE(CRTOBJ) FILE(PDLHCPP)          AC1465744;
  PARAMETER(LCL.Current_System_Date);
  PARAMETER(LCL.Current_System_Time);
  PARAMETER(LCL.Sequence_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Load_Change_Type);
  PARAMETER(PAR.Department_Control_Code);
  PARAMETER(PAR.Change_Log_Prior_Value);
  PARAMETER(PAR.Change_Log_New_Value);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

   //?USER: Processing after Data update

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Add seconds until it can be added successfully
  CASE;

  // IF PGM.*Return code is *Record already exists
  IF PGM.*Return_code = 'Y2U0003';

  // LCL.Created Time = LCL.Current System Time
  LCL.Created_Time = LCL.Current_System_Time;

  // DOW PGM.*Return code is *Record already exists
  DOW PGM.*Return_code = 'Y2U0003';

  // LCL.Created Time = LCL.Created Time + CON.1 *SECONDS
  LCL.Created_Time = TIMEINCR(LCL.Created_Time 1 'SC');

  EXECUTE FUNCTION(CRT Load/Order Chg Log CR) TYPE(CRTOBJ) FILE(PDLHCPP)          AC1465744;
  PARAMETER(LCL.Current_System_Date);
  PARAMETER(LCL.Created_Time);
  PARAMETER(LCL.Sequence_Number);
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Load_Change_Type);
  PARAMETER(PAR.Department_Control_Code);
  PARAMETER(PAR.Change_Log_Prior_Value);
  PARAMETER(PAR.Change_Log_New_Value);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*PROGRAM);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  {
   //?USER: Processing if Data record already exists

   // PGM.*Return code = CND.*Record already exists
   PGM.*Return_code = 'Y2U0003';

   //?USER: Processing after Data update

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  ENDDO;

  ENDIF;

 }

 ENDIF;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Send LOCK to Carlisle if  already locked and chg made
 CASE;

 // IF PAR.Status Flag 2  Y/N is Yes
 IF PAR.Status_Flag_2_Y_N = 'Y';

 // OR PAR.Status Flag 1  Y/N is Yes
 OR PAR.Status_Flag_1_Y_N = 'Y';

 //?if a chg was made                         9/21/16
 // Call program PFS Lock Load/Order   XF.
 CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
 PARAMETER(DB1.TMS_Load_ID);

 ENDIF;

 ENDIF;

 ENDIF;

 // PAR.TMS Process Status = CND.Processed
 PAR.TMS_Process_Status = 1;

 ENDIF;

 //?R17040 DN 03/02/21-Verify/Create EDI 856 Advice Shipping Notice (ASN).
 CASE;

 // IF PAR.Load Status is Shipped or Invoiced
 IF PAR.Load_Status = 'I'/'S';

 // AND LCL.Check 856 Ready Y/N USR is Yes
 AND LCL.Check_856_Ready_Y_N_USR = 'Y';

 // Call program Exc Crt EDI 856 f/TMS XF.
 CALL PROGRAM(Exc Crt EDI 856 f/TMS XF) ('PUSVXFR');
 PARAMETER(PAR.Load_ID);

 ENDIF;

 ENDIF;

 //?Process for Extra Legs
 CASE;

 // IF PAR.TMS Extra Leg Load Sts is Extra leg
 IF PAR.TMS_Extra_Leg_Load_Sts = 'E';

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?07/23/18 DN S13418-Removed 'TONU' Processing, call to PBXIXFR.
 // Call program Exc Maint Intl Legs   XF.
 CALL PROGRAM(Exc Maint Intl Legs   XF) ('PBXEXFR');
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(DB1.TMS_Customer_Load_ID);
 PARAMETER(DB1.TMS_Temperature);
 PARAMETER(DB1.TMS_Temperature_UOM);
 PARAMETER(DB1.TMS_Movement_Type);
 PARAMETER(DB1.TMS_Shipment_Type);
 PARAMETER(DB1.TMS_Payment_Method);
 PARAMETER(DB1.TMS_POD_Received);
 PARAMETER(PAR.TMS_Load_Status);
 PARAMETER(DB1.TMS_Load_Owner);
 PARAMETER(LCL.TMS_Carrier_SCAC);
 PARAMETER(DB1.TMS_Carrier_Mode);
 PARAMETER(DB1.TMS_Carrier_Distance);
 PARAMETER(DB1.TMS_Deadline_Depart_Date);
 PARAMETER(DB1.TMS_Deadline_Depart_Time);
 PARAMETER(DB1.TMS_Trailer_Number);
 PARAMETER(DB1.TMS_Container_Number);
 PARAMETER(DB1.TMS_Move_Type);
 PARAMETER(DB1.TMS_Vessel_Name);
 PARAMETER(DB1.TMS_Voyage_Number);
 PARAMETER(DB1.TMS_Booking_Number);
 PARAMETER(DB1.TMS_OTR_Destination_Name);
 PARAMETER(DB1.TMS_OTR_Destination_Addr1);
 PARAMETER(DB1.TMS_OTR_Destination_Addr2);
 PARAMETER(DB1.TMS_OTR_Destination_City);
 PARAMETER(DB1.TMS_OTR_Destination_State);
 PARAMETER(DB1.TMS_OTR_Destination_Zip);
 PARAMETER(DB1.TMS_OTR_Destination_Cntry);
 PARAMETER(DB1.TMS_Vessel_ETD_Date);
 PARAMETER(DB1.TMS_Vessel_ETA_Date);
 PARAMETER(DB1.TMS_Record_Status);
 PARAMETER(DB1.TMS_Process_Status);
 PARAMETER(DB1.TMS_Error_Reason);
 PARAMETER(DB1.TMS_Change_Date);
 PARAMETER(DB1.TMS_Change_time);

 // PAR.TMS Process Status = CND.Processed
 PAR.TMS_Process_Status = 1;

 ENDIF;

 ENDIF;

 //?Process DELETE
 DO;

 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 // AND PAR.Add/Change/Delete USR is Delete
 AND PAR.Add_Change_Delete_USR = 'D';

 //?First:  Process unlock load request - write carlisle
 CASE;

 // IF PAR.Load Status is Lock
 IF PAR.Load_Status = 'L';

 EXECUTE FUNCTION(UPD Unlock Load Update IF) TYPE(EXCINTFUN)                     AC1454814;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(CHG Ld Sts,Rated Frts  CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1371002;
  PARAMETER(PAR.Load_ID);
  PARAMETER('U');
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  EXECUTE FUNCTION(EDT Unlock Load        IF) TYPE(EXCINTFUN)                     AC1419468;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);
  {
   //?Execute internal function

   //?*** Return Plant Code from first Order Header
   EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Trans_Contol_AS400_Plant);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(WRK.Trans_Contol_AS400_Plant);
     {
      //?USER: Process Data record

      CASE;

      // IF DB1.Detail Line Status is Not cancelled
      IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

      EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
      PARAMETER(DB1.Warehouse_Code);
      PARAMETER(WRK.Warehouse_Description);
      PARAMETER(PAR.Trans_Contol_AS400_Plant);
      {
       //?USER: Processing if Data record not found

       MOVE *ALL (To: PAR From: CON);

       //?USER: Process Data record

       MOVE *ALL (To: PAR From: DB1);

      }

      QUIT;

      ENDIF;

     }

     CASE;

     // IF WRK.Trans Contol AS400/Plant is Plant
     IF WRK.Trans_Contol_AS400_Plant = 'P';

     // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
     PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
   PARAMETER('PLTFLRSYS');
   PARAMETER(LCL.Plant_Floor_System_USR);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(PAR.Company_Number);
   PARAMETER('LDORDD');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   //?UPD:  AccuSort
   CASE;

   // IF LCL.PFS AccuSort Active is Yes
   IF LCL.PFS_AccuSort_Active = 'Y';

   //?Notify Accusort if locked load
   CASE;

   // IF PAR.Trans Contol AS400/Plant is Plant
   IF PAR.Trans_Contol_AS400_Plant = 'P';

   // Call program Zzz Lock/Unlock Box ID XF.
   CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
   PARAMETER('L');

   // Call program DEL AS Order Hdr/Dtl   XF.
   CALL PROGRAM(DEL AS Order Hdr/Dtl   XF) ('PDQ0XFR');
   PARAMETER(PAR.Load_ID);
   PARAMETER(PAR.Company_Number);

   // Call program Zzz Lock/Unlock Box ID XF.
   CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
   PARAMETER('U');

   ENDIF;

   ENDIF;

   //?UPD:  Carlisle
   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS Unlock Load/Order XF.
   CALL PROGRAM(PFS Unlock Load/Order XF) ('PPNQXFR');
   PARAMETER(PAR.Load_ID);

   // Call program PFS Lock Load/Order   XF.
   CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
   PARAMETER(PAR.Load_ID);

   ENDIF;

   //?** 09/23/2011 RMC E1607  if load had a whs with edi wso interchange, then
   //?   delete it if Unproc, else change it to "D"elete/and reprocess
   // Call program Exc ChgDel EDI f/UnlckXF.
   CALL PROGRAM(Exc ChgDel EDI f/UnlckXF) ('PBAEXFR');
   PARAMETER(PAR.Load_ID);

  }

  EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1399763;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Stop_Drop_Sequence_Number);
   PARAMETER(DB1.Miles_to_next_stop);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   EXECUTE FUNCTION(CHG Clear Rated Frt    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1399729;
   PARAMETER(DB1.Load_ID);
   PARAMETER(DB1.Order_Number);
   {
    //?USER: Initialize routine

    //?05/12/04 SLM PKTR01 Multi-Company - Function was changed
    //?                                    to remove Company RST or Pos
    //?USER: Process Data record

    EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(*ZERO);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);
     {
      //?Execute internal function

      // PAR.Job Time = JOB.*Job time
      PAR.Job_Time = JOB.*Job_time;

      // PAR.User Id = JOB.*USER
      PAR.User_Id = JOB.*USER;

      // PAR.Job Name = JOB.*PROGRAM
      PAR.Job_Name = JOB.*PROGRAM;

      // PAR.Job Date = JOB.*Job date
      PAR.Job_Date = JOB.*Job_date;

     }

     // Call program TRG Order Hdr CHG Trig XT.
     CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Type_Sales);
     PARAMETER(DB1.AR_Customer_Number);
     PARAMETER(DB1.Ship_To_Customer);
     PARAMETER(DB1.Ship_To_Name);
     PARAMETER(DB1.Ship_To_Address_Line_1);
     PARAMETER(DB1.Ship_To_Address_Line_2);
     PARAMETER(DB1.Ship_To_Address_Line_3);
     PARAMETER(DB1.Ship_To_City);
     PARAMETER(DB1.Ship_To_State_Code);
     PARAMETER(DB1.Ship_To_Zip_Postal_Code);
     PARAMETER(DB1.Bill_to_Customer);
     PARAMETER(DB1.Bill_to_Name);
     PARAMETER(DB1.Bill_to_Address_Line_1);
     PARAMETER(DB1.Bill_to_Address_Line_2);
     PARAMETER(DB1.Bill_to_Address_Line_3);
     PARAMETER(DB1.Bill_to_City);
     PARAMETER(DB1.Bill_to_State_Code);
     PARAMETER(DB1.Bill_to_Zip_Postal_Code);
     PARAMETER(DB1.Customer_Purchase_Order_#);
     PARAMETER(DB1.Order_Date);
     PARAMETER(DB1.Requested_Ship_Date);
     PARAMETER(DB1.Actual_Shipped_Date);
     PARAMETER(DB1.Cancel_Date);
     PARAMETER(DB1.Terms_Code);
     PARAMETER(DB1.Special_Instructions);
     PARAMETER(DB1.Special_Instructions_2);
     PARAMETER(DB1.Carrier_Code);
     PARAMETER(DB1.Comment_Print_Acknowledge);
     PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
     PARAMETER(DB1.Comment_Print_Pick_Slip);
     PARAMETER(DB1.Comment_Print_Ship_Doc);
     PARAMETER(DB1.Reason_Code);
     PARAMETER(DB1.Order_in_Use);
     PARAMETER(DB1.Header_Status);
     PARAMETER(DB1.Header_Status_Last);
     PARAMETER(DB1.Order_Type_Print_Status);
     PARAMETER(DB1.Scheduled_Ship_Date);
     PARAMETER(DB1.User_Original_Entry);
     PARAMETER(DB1.Date_of_Original_Entry);
     PARAMETER(DB1.Order_Value_Total);
     PARAMETER(DB1.Order_Weight_Total);
     PARAMETER(DB1.Credit_Hold);
     PARAMETER(DB1.Production_Hold);
     PARAMETER(DB1.New_Customer_Hold);
     PARAMETER(DB1.Requested_Delivery_Date);
     PARAMETER(DB1.Requested_Delivery_Time);
     PARAMETER(DB1.Accounts_Receiv_Ent_1);
     PARAMETER(DB1.Accounts_Receiv_Ent_2);
     PARAMETER(DB1.Load_ID);
     PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
     PARAMETER(DB1.Rated_Freight);
     PARAMETER(DB1.LTL_Flag);
     PARAMETER(DB1.Price_Audit);
     PARAMETER(DB1.Price_Status);
     PARAMETER(DB1.Shipping_Method);
     PARAMETER(DB1.Export_Status);
     PARAMETER(DB1.Palletize);
     PARAMETER(DB1.Shrink_Wrap);
     PARAMETER(DB1.Slip_Sheet);
     PARAMETER(DB1.Age_Code);
     PARAMETER(DB1.Reefer_Temperature);
     PARAMETER(DB1.Load_Type);
     PARAMETER(DB1.Attach_to_Invoice_Number);
     PARAMETER(DB1.Load_Plan_Order);
     PARAMETER(DB1.Print_Pick_Slip);
     PARAMETER(DB1.Resell_Reference_Number);
     PARAMETER(DB1.Special_Comment_1);
     PARAMETER(DB1.Special_Comment_2);
     PARAMETER(DB1.Affect_Auto_Accruals);
     PARAMETER(DB1.Sales_Route_Code);
     PARAMETER(DB1.Manager_Level_Code);
     PARAMETER(DB1.VP_Level_Code);
     PARAMETER(DB1.Attach_to_Order_Number);
     PARAMETER(DB1.Reason_for_Price_Audit);
     PARAMETER(DB1.Invoice_Number);
     PARAMETER(DB1.Invoice_Suffix);
     PARAMETER(DB1.Invoice_Date);
     PARAMETER(DB1.Event_Code);
     PARAMETER(DB1.Trans_Contol_AS400_Plant);
     PARAMETER(DB1.Modified_Flag);
     PARAMETER(DB1.A_R_order_Value_Total);
     PARAMETER(DB1.Billing_Activity_Type);
     PARAMETER(DB1.Block_Order_Flag);
     PARAMETER(DB1.Order_Certification_Flag);
     PARAMETER(DB1.Invoice_Order_Value_Tot);
     PARAMETER(DB1.Process_Sts_for_3C);
     PARAMETER(DB1.Order_Conf_Fax_Sts);
     PARAMETER(DB1.Manifest_Fax_Sts);
     PARAMETER(DB1.Invoice_Fax_Sts);
     PARAMETER(DB1.Transfer_in_Storage_Ind);
     PARAMETER(DB1.Email_Cust_On_Order_Ship);
     PARAMETER(DB1.Order_Emailed);
     PARAMETER(DB1.Export_Docs_Go_w_Driver);
     PARAMETER(DB1.Shipping_Temp_Code_C_F);
     PARAMETER(DB1.Broker_Order_Status);
     PARAMETER(DB1.Air_Freight_Order);
     PARAMETER(DB1.Order_Requires_Review);
     PARAMETER(DB1.OH_Load_Plan_Ready);
     PARAMETER(DB1.Export_USDA_Approved);
     PARAMETER(DB1.HPB_Ship_to_Warehouse);
     PARAMETER(DB1.OH_TF_Exempt_Code);
     PARAMETER(DB1.OH_Appt_Confirmation_Dt);
     PARAMETER(DB1.JPN_Invoice_Issuance_Date);
     PARAMETER(DB1.Load_Actual_Shipped_Date);
     PARAMETER(DB1.Load_BOL_Complete_Date);
     PARAMETER(DB1.Load_Truck_Departure_Date);
     PARAMETER(DB1.Maximum_Gross_Weight);
     PARAMETER(DB1.Time_of_Original_Entry);
     PARAMETER(DB1.OH_Appt_Confirmation_Tm);
     PARAMETER(DB1.Load_BOL_Complete_Time);
     PARAMETER(DB1.Load_Truck_Departure_Time);
     PARAMETER(DB1.Act_Frt_Reference_Amount);
     PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
     PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
     PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
     PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
     PARAMETER(DB1.Claim_Number);
     PARAMETER(DB1.EDI_Status_1);
     PARAMETER(DB1.EDI_Status_2);
     PARAMETER(DB1.EDI_Status_3);
     PARAMETER(DB1.Job_Time);
     PARAMETER(DB1.User_Id);
     PARAMETER(DB1.Job_Name);
     PARAMETER(DB1.Job_Date);

    }

    //?05/13/04 slm Multi-Company - Order Header lv remove co must use db1
    //?                              was using the par replace with db1
    EXECUTE FUNCTION(UPD Rated Freight      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1396132;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(*ZERO);
    {
     //?USER: Initialize routine

     //?par.@rated freight is the sum of all the detail rated frt, for adjusting
     // PAR.@Rated Freight = CON.*ZERO
     PAR.@Rated_Freight = *ZERO;

     //?par.usr process status is used to indicate if there are detail present
     // PAR.USR Process status = CND.no
     PAR.USR_Process_status = 'N';

     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Cancelled
     IF DB1.Detail_Line_Status = 'X';

     EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
     PARAMETER(*ZERO);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     // IF *OTHERWISE
     IF *OTHERWISE;

     // PAR.USR Process status = CND.yes
     PAR.USR_Process_status = 'Y';

     CASE;

     // IF PAR.Order Weight Total is Equal to zero
     IF PAR.Order_Weight_Total = *ZERO;

     // OR PAR.Total Rated Freight is Zero
     OR PAR.Total_Rated_Freight = *ZERO;

     // PAR.Rated Freight = CON.*ZERO
     PAR.Rated_Freight = *ZERO;

     // IF *OTHERWISE
     IF *OTHERWISE;

     CASE;

     // IF DB1.Detail Line Status is Confirmed & Complete
     IF DB1.Detail_Line_Status = 'C'/'R';

     // Synon (17,9) work field =       * Compute Dtl Rated Freight
     PGM.*Synon_179_work_field = ( DB1.Weight_Shipped_Total / PAR.Order_Weight_Total 'H' )
     * PAR.Total_Rated_Freight 'H';

     // IF *OTHERWISE
     IF *OTHERWISE;

     // Synon (17,9) work field =       * Compute Dtl Rated Freight
     PGM.*Synon_179_work_field = ( ( DB1.Quantity_Ordered * DB1.Unit_Weight_Ordered_U_M 'H' )
     / PAR.Order_Weight_Total 'H' ) * PAR.Total_Rated_Freight 'H';

     ENDIF;

     // PAR.Rated Freight = PGM.*Synon (17,9) work field * CON.1 *Rounded
     PAR.Rated_Freight = PGM.*Synon_179_work_field * 1 'H';

     ENDIF;

     EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
     PARAMETER(DB1.Company_Number);
     PARAMETER(DB1.Order_Number);
     PARAMETER(DB1.Order_Sequence_Number);
     PARAMETER(DB1.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Rated_Freight);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     // PAR.@Rated Freight = PAR.@Rated Freight + PAR.Rated Freight
     PAR.@Rated_Freight = PAR.@Rated_Freight + PAR.Rated_Freight;

     // PAR.Order Sequence Number = DB1.Order Sequence Number
     PAR.Order_Sequence_Number = DB1.Order_Sequence_Number;

     // PAR.Order Secondary Line Seq = DB1.Order Secondary Line Seq
     PAR.Order_Secondary_Line_Seq = DB1.Order_Secondary_Line_Seq;

     ENDIF;

     //?USER: Exit processing

     //?Adjust totals
     CASE;

     // IF PAR.@Rated Freight NE PAR.Total Rated Freight
     IF PAR.@Rated_Freight <> PAR.Total_Rated_Freight;

     // AND PAR.USR Process status is yes
     AND PAR.USR_Process_status = 'Y';

     // WRK.USR Adjustment Amount 1 = PAR.Total Rated Freight - PAR.@Rated Freight
     WRK.USR_Adjustment_Amount_1 = PAR.Total_Rated_Freight - PAR.@Rated_Freight;

     // PAR.Rated Freight = PAR.Rated Freight + WRK.USR Adjustment Amount 1
     PAR.Rated_Freight = PAR.Rated_Freight + WRK.USR_Adjustment_Amount_1;

     //?Update last detail line processed
     EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1400066;
     PARAMETER(PAR.Company_Number);
     PARAMETER(PAR.Order_Number);
     PARAMETER(PAR.Order_Sequence_Number);
     PARAMETER(PAR.Order_Secondary_Line_Seq);
     PARAMETER(PAR.Rated_Freight);
     {
      //?USER: Processing before Data update

      EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
      PARAMETER(DB1.Job_Time);
      PARAMETER(DB1.User_Id);
      PARAMETER(DB1.Job_Name);
      PARAMETER(DB1.Job_Date);
      {
       //?Execute internal function

       // PAR.Job Time = JOB.*Job time
       PAR.Job_Time = JOB.*Job_time;

       // PAR.User Id = JOB.*USER
       PAR.User_Id = JOB.*USER;

       // PAR.Job Name = JOB.*JOB
       PAR.Job_Name = JOB.*JOB;

       // PAR.Job Date = JOB.*Job date
       PAR.Job_Date = JOB.*Job_date;

      }

     }

     ENDIF;

    }

   }

  }

  // Execute function Clr Program Message Q  US.
  EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
  {
   * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
   C                     CALL 'Y2CLMSC'
   C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
   C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
   * RESET FIRST MESSAGE ONLY FLAG.
   C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
  }

 }

 // WRK.Load Change Type = CND.Unlock Load
 WRK.Load_Change_Type = 'UNLOCK';

 // WRK.Department Control Code = CND.Traffic Dept
 WRK.Department_Control_Code = 'TRF';

 // WRK.Change Log New Value = CON.U
 WRK.Change_Log_New_Value = 'U';

 // Call program CRT Load/Order Chg Log XF.
 CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.Load_Change_Type);
 PARAMETER(WRK.Department_Control_Code);
 PARAMETER(PAR.Load_Status);
 PARAMETER(WRK.Change_Log_New_Value);
 PARAMETER(JOB.*USER);
 PARAMETER(JOB.*PROGRAM);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(*ZERO);

 ENDIF;

 //?For each Pickup from a Warehouse:  Delete load detail, upd order header
 EXECUTE FUNCTION(RTV DLT for TMS Chg   RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC2123136;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Carrier_Code);
 {
  //?USER: Process Data record

  //?Zero out load id
  EXECUTE FUNCTION(RTV Chg Ld for TMS    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2123137;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('Y');
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Load to Untied TMS CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC2124467;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Load_ID);
   PARAMETER(DB1.Event_Code);
   PARAMETER(PAR.OH_Load_Plan_Ready);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

    // Call program TRG Order Hdr CHG Trig XT.
    CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(DB1.Order_Type_Sales);
    PARAMETER(DB1.AR_Customer_Number);
    PARAMETER(DB1.Ship_To_Customer);
    PARAMETER(DB1.Ship_To_Name);
    PARAMETER(DB1.Ship_To_Address_Line_1);
    PARAMETER(DB1.Ship_To_Address_Line_2);
    PARAMETER(DB1.Ship_To_Address_Line_3);
    PARAMETER(DB1.Ship_To_City);
    PARAMETER(DB1.Ship_To_State_Code);
    PARAMETER(DB1.Ship_To_Zip_Postal_Code);
    PARAMETER(DB1.Bill_to_Customer);
    PARAMETER(DB1.Bill_to_Name);
    PARAMETER(DB1.Bill_to_Address_Line_1);
    PARAMETER(DB1.Bill_to_Address_Line_2);
    PARAMETER(DB1.Bill_to_Address_Line_3);
    PARAMETER(DB1.Bill_to_City);
    PARAMETER(DB1.Bill_to_State_Code);
    PARAMETER(DB1.Bill_to_Zip_Postal_Code);
    PARAMETER(DB1.Customer_Purchase_Order_#);
    PARAMETER(DB1.Order_Date);
    PARAMETER(DB1.Requested_Ship_Date);
    PARAMETER(DB1.Actual_Shipped_Date);
    PARAMETER(DB1.Cancel_Date);
    PARAMETER(DB1.Terms_Code);
    PARAMETER(DB1.Special_Instructions);
    PARAMETER(DB1.Special_Instructions_2);
    PARAMETER(DB1.Carrier_Code);
    PARAMETER(DB1.Comment_Print_Acknowledge);
    PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
    PARAMETER(DB1.Comment_Print_Pick_Slip);
    PARAMETER(DB1.Comment_Print_Ship_Doc);
    PARAMETER(DB1.Reason_Code);
    PARAMETER(DB1.Order_in_Use);
    PARAMETER(DB1.Header_Status);
    PARAMETER(DB1.Header_Status_Last);
    PARAMETER(DB1.Order_Type_Print_Status);
    PARAMETER(DB1.Scheduled_Ship_Date);
    PARAMETER(DB1.User_Original_Entry);
    PARAMETER(DB1.Date_of_Original_Entry);
    PARAMETER(DB1.Order_Value_Total);
    PARAMETER(DB1.Order_Weight_Total);
    PARAMETER(DB1.Credit_Hold);
    PARAMETER(DB1.Production_Hold);
    PARAMETER(DB1.New_Customer_Hold);
    PARAMETER(DB1.Requested_Delivery_Date);
    PARAMETER(DB1.Requested_Delivery_Time);
    PARAMETER(DB1.Accounts_Receiv_Ent_1);
    PARAMETER(DB1.Accounts_Receiv_Ent_2);
    PARAMETER(DB1.Load_ID);
    PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
    PARAMETER(DB1.Rated_Freight);
    PARAMETER(DB1.LTL_Flag);
    PARAMETER(DB1.Price_Audit);
    PARAMETER(DB1.Price_Status);
    PARAMETER(DB1.Shipping_Method);
    PARAMETER(DB1.Export_Status);
    PARAMETER(DB1.Palletize);
    PARAMETER(DB1.Shrink_Wrap);
    PARAMETER(DB1.Slip_Sheet);
    PARAMETER(DB1.Age_Code);
    PARAMETER(DB1.Reefer_Temperature);
    PARAMETER(DB1.Load_Type);
    PARAMETER(DB1.Attach_to_Invoice_Number);
    PARAMETER(DB1.Load_Plan_Order);
    PARAMETER(DB1.Print_Pick_Slip);
    PARAMETER(DB1.Resell_Reference_Number);
    PARAMETER(DB1.Special_Comment_1);
    PARAMETER(DB1.Special_Comment_2);
    PARAMETER(DB1.Affect_Auto_Accruals);
    PARAMETER(DB1.Sales_Route_Code);
    PARAMETER(DB1.Manager_Level_Code);
    PARAMETER(DB1.VP_Level_Code);
    PARAMETER(DB1.Attach_to_Order_Number);
    PARAMETER(DB1.Reason_for_Price_Audit);
    PARAMETER(DB1.Invoice_Number);
    PARAMETER(DB1.Invoice_Suffix);
    PARAMETER(DB1.Invoice_Date);
    PARAMETER(DB1.Event_Code);
    PARAMETER(DB1.Trans_Contol_AS400_Plant);
    PARAMETER(DB1.Modified_Flag);
    PARAMETER(DB1.A_R_order_Value_Total);
    PARAMETER(DB1.Billing_Activity_Type);
    PARAMETER(DB1.Block_Order_Flag);
    PARAMETER(DB1.Order_Certification_Flag);
    PARAMETER(DB1.Invoice_Order_Value_Tot);
    PARAMETER(DB1.Process_Sts_for_3C);
    PARAMETER(DB1.Order_Conf_Fax_Sts);
    PARAMETER(DB1.Manifest_Fax_Sts);
    PARAMETER(DB1.Invoice_Fax_Sts);
    PARAMETER(DB1.Transfer_in_Storage_Ind);
    PARAMETER(DB1.Email_Cust_On_Order_Ship);
    PARAMETER(DB1.Order_Emailed);
    PARAMETER(DB1.Export_Docs_Go_w_Driver);
    PARAMETER(DB1.Shipping_Temp_Code_C_F);
    PARAMETER(DB1.Broker_Order_Status);
    PARAMETER(DB1.Air_Freight_Order);
    PARAMETER(DB1.Order_Requires_Review);
    PARAMETER(DB1.OH_Load_Plan_Ready);
    PARAMETER(DB1.Export_USDA_Approved);
    PARAMETER(DB1.HPB_Ship_to_Warehouse);
    PARAMETER(DB1.OH_TF_Exempt_Code);
    PARAMETER(DB1.OH_Appt_Confirmation_Dt);
    PARAMETER(DB1.JPN_Invoice_Issuance_Date);
    PARAMETER(DB1.Load_Actual_Shipped_Date);
    PARAMETER(DB1.Load_BOL_Complete_Date);
    PARAMETER(DB1.Load_Truck_Departure_Date);
    PARAMETER(DB1.Maximum_Gross_Weight);
    PARAMETER(DB1.Time_of_Original_Entry);
    PARAMETER(DB1.OH_Appt_Confirmation_Tm);
    PARAMETER(DB1.Load_BOL_Complete_Time);
    PARAMETER(DB1.Load_Truck_Departure_Time);
    PARAMETER(DB1.Act_Frt_Reference_Amount);
    PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
    PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
    PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
    PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
    PARAMETER(DB1.Claim_Number);
    PARAMETER(DB1.EDI_Status_1);
    PARAMETER(DB1.EDI_Status_2);
    PARAMETER(DB1.EDI_Status_3);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);

   }

  }

  //?Zero out load id ; reset load plan ready to ReSweep
  EXECUTE FUNCTION(RTV Chg for TMS Delet RT) TYPE(RTVOBJ) FILE(PMAMREP)           AC2124032;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Load_ID);
  {
   //?USER: Process Data record

   //?R15161 DN  07/23/19-Set Voyage to *BLANK.
   EXECUTE FUNCTION(CHG Order Header Exten CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC1814352;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(DB1.Shipping_Line);
   PARAMETER(DB1.Port_Delv_Terminal);
   PARAMETER(DB1.OHE_City);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(DB1.OHE_Discharge_Port_Airprt);
   PARAMETER(DB1.OHE_Sail_Flight_Date);
   PARAMETER(DB1.OHE_Port_Cut_Date);
   PARAMETER(DB1.OHE_Arrival_Date);
   PARAMETER(DB1.OHE_Late_Delivery_Code);
   PARAMETER(WRK.Blank_for_3_USR);
   PARAMETER(*BLANK);
   PARAMETER(DB1.OHE_Comment_1);
   PARAMETER(DB1.OHE_Comment_2);
   PARAMETER(DB1.OHE_Unused_Number_1_11_0);
   PARAMETER(DB1.OHE_Unused_Number_2_11_0);
   PARAMETER(DB1.OHE_Unused_Number_3_11_0);
   PARAMETER(DB1.OHE_Unused_Number_4_11_0);
   PARAMETER(DB1.OHE_HPB_RIN_Equiv_Value);
   PARAMETER(DB1.OHE_HPB_RIN_Price);
   PARAMETER(DB1.Transload_Terminal_Fees);
   PARAMETER(DB1.OHE_Est_Arrv_at_Dest_Date);
   PARAMETER(DB1.OHE_Backhaul_ETA_RtrnDate);
   PARAMETER(DB1.OHE_Port_Pier_Paid_Date);
   PARAMETER(DB1.OHE_Actual_Ship_Date);
   PARAMETER(DB1.OHE_Carrier_SCAC_Code);
   PARAMETER(DB1.OHE_Spot_Buy);
   PARAMETER(DB1.OHE_PO_ACK_Flag);
   PARAMETER(DB1.OHE_Override_Type_Code);
   PARAMETER(DB1.OHE_Backhaul_Status);
   PARAMETER(DB1.OHE_Backhaul_ETA_AM_PM);
   PARAMETER(DB1.OHE_Load_Haul_Type);
   PARAMETER(DB1.OHE_Backhaul_Carrier_Code);
   PARAMETER(DB1.OHE_Bookings_Confirmed);
   PARAMETER(DB1.OHE_EDI_Error_Reasons);
   PARAMETER(DB1.OHE_EDI_Error_Reasons_2);
   PARAMETER(DB1.HPB_COA_Batch_Number);
   PARAMETER(DB1.Delivery_P_O_Number);
   PARAMETER(DB1.OHE_Intended_for_ExportCC);
   PARAMETER(DB1.OHE_EDI_943_Action);
   PARAMETER(DB1.OHE_EDI_944_Action);
   PARAMETER(DB1.OHE_EDI_940_Action);
   PARAMETER(DB1.OHE_EDI_945_Action);
   PARAMETER(DB1.OHE_EDI_856_Action);
   PARAMETER(DB1.OHE_EDI_824_Action);
   PARAMETER(DB1.OHE_Transload_Seal_Nbr);
   PARAMETER(DB1.OHE_Abs_Rate_Override_Rsn);
   PARAMETER(DB1.OHE_Appt_Confirmation_#);
   PARAMETER(DB1.OHE_Backhaul_Container#);
   PARAMETER(DB1.OHE_Backhaul_Chassis_#);
   PARAMETER(DB1.OHE_Transload_Container#);
   PARAMETER(DB1.OHE_Pier_Pass_Invoice);
   PARAMETER(DB1.OHE_Carrier_Nm);
   PARAMETER(DB1.OHE_Appt_Confirmation_Nm);
   PARAMETER(DB1.OHE_Backhaul_Comment);
   PARAMETER(DB1.Letter_of_Credit_Number);
   PARAMETER(DB1.OHE_Backhaul_Return_to_Co);
   PARAMETER(DB1.LD_Stop_Drop);
   PARAMETER(DB1.OHE_Unused_Number_3_0);
   PARAMETER(DB1.OHE_Pier_Pass_Fee_Amount);
   PARAMETER(DB1.OHE_Port_Check_Fee_Amount);
   PARAMETER(DB1.OHE_Port_Cut_Time);
   PARAMETER(DB1.OHE_Backhaul_Truck_Number);
   PARAMETER(DB1.OHE_Load_Sched_Seq_Num);
   PARAMETER(DB1.Original_Appointment_Date);
   PARAMETER(DB1.Original_Appointment_Time);
   PARAMETER(DB1.OHE_PowerPro_Load#_Outbnd);
   PARAMETER(DB1.OHE_PowerPro_Load#_Bckhl);
   PARAMETER(DB1.OHE_Unused_Numeric_9_0_3);
   PARAMETER(DB1.OHE_Orig_ABS_Freight_Rate);
   PARAMETER(DB1.OHE_Genset_Number);
   PARAMETER(DB1.OHE_Email_BOL_Sent);
   PARAMETER(DB1.OHE_EDI_Order_Automated);
   PARAMETER(DB1.OHE_EDI_601_Action);
   PARAMETER(DB1.OHE_Unused_Status_4);
   PARAMETER(DB1.OHE_Unused_Text_1);
   PARAMETER(DB1.OHE_Unused_Text_2);
   PARAMETER(DB1.OHE_Customer_Vendor_f_PO);
   PARAMETER(DB1.OHE_EDI_824_AES_ITN_#);
   PARAMETER(DB1.OHE_Unused_Text_5);
   PARAMETER(DB1.OHE_Unused_Date_1);
   PARAMETER(DB1.OHE_Unused_Date_2);
   PARAMETER(DB1.EDI_Status_1);
   PARAMETER(DB1.EDI_Status_2);
   PARAMETER(DB1.EDI_Status_3);
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?USER: Processing if Data record not found

    EXECUTE FUNCTION(CRT Existing OHE       CR) TYPE(CRTOBJ) FILE(PMAMREP)          AC1816936;
    PARAMETER(PAR.Company_Number);
    PARAMETER(PAR.Order_Number);
    PARAMETER(PAR.Load_ID);
    PARAMETER(PAR.Stop_Drop_Sequence_Number);
    PARAMETER(PAR.Shipping_Line);
    PARAMETER(PAR.Port_Delv_Terminal);
    PARAMETER(PAR.OHE_City);
    PARAMETER(PAR.OHE_Vessel_Airline);
    PARAMETER(PAR.OHE_Voyage_Flight);
    PARAMETER(PAR.OHE_Booking_Number);
    PARAMETER(PAR.OHE_Discharge_Port_Airprt);
    PARAMETER(PAR.OHE_Sail_Flight_Date);
    PARAMETER(PAR.OHE_Port_Cut_Date);
    PARAMETER(PAR.OHE_Arrival_Date);
    PARAMETER(PAR.OHE_Late_Delivery_Code);
    PARAMETER(PAR.OHE_Ship_Status);
    PARAMETER(PAR.OHE_Container_Number);
    PARAMETER(PAR.OHE_Comment_1);
    PARAMETER(PAR.OHE_Comment_2);
    PARAMETER(PAR.OHE_Unused_Number_1_11_0);
    PARAMETER(PAR.OHE_Unused_Number_2_11_0);
    PARAMETER(PAR.OHE_Unused_Number_3_11_0);
    PARAMETER(PAR.OHE_Unused_Number_4_11_0);
    PARAMETER(PAR.OHE_HPB_RIN_Equiv_Value);
    PARAMETER(PAR.OHE_HPB_RIN_Price);
    PARAMETER(PAR.Transload_Terminal_Fees);
    PARAMETER(PAR.OHE_Est_Arrv_at_Dest_Date);
    PARAMETER(PAR.OHE_Backhaul_ETA_RtrnDate);
    PARAMETER(PAR.OHE_Port_Pier_Paid_Date);
    PARAMETER(PAR.OHE_Actual_Ship_Date);
    PARAMETER(PAR.OHE_Carrier_SCAC_Code);
    PARAMETER(PAR.OHE_Spot_Buy);
    PARAMETER(PAR.OHE_PO_ACK_Flag);
    PARAMETER(PAR.OHE_Override_Type_Code);
    PARAMETER(PAR.OHE_Backhaul_Status);
    PARAMETER(PAR.OHE_Backhaul_ETA_AM_PM);
    PARAMETER(PAR.OHE_Load_Haul_Type);
    PARAMETER(PAR.OHE_Backhaul_Carrier_Code);
    PARAMETER(PAR.OHE_Bookings_Confirmed);
    PARAMETER(PAR.OHE_EDI_Error_Reasons);
    PARAMETER(PAR.OHE_EDI_Error_Reasons_2);
    PARAMETER(PAR.HPB_COA_Batch_Number);
    PARAMETER(PAR.Delivery_P_O_Number);
    PARAMETER(PAR.OHE_Intended_for_ExportCC);
    PARAMETER(PAR.OHE_EDI_943_Action);
    PARAMETER(PAR.OHE_EDI_944_Action);
    PARAMETER(PAR.OHE_EDI_940_Action);
    PARAMETER(PAR.OHE_EDI_945_Action);
    PARAMETER(PAR.OHE_EDI_856_Action);
    PARAMETER(PAR.OHE_EDI_824_Action);
    PARAMETER(PAR.OHE_Transload_Seal_Nbr);
    PARAMETER(PAR.OHE_Abs_Rate_Override_Rsn);
    PARAMETER(PAR.OHE_Appt_Confirmation_#);
    PARAMETER(PAR.OHE_Backhaul_Container#);
    PARAMETER(PAR.OHE_Backhaul_Chassis_#);
    PARAMETER(PAR.OHE_Transload_Container#);
    PARAMETER(PAR.OHE_Pier_Pass_Invoice);
    PARAMETER(PAR.OHE_Carrier_Nm);
    PARAMETER(PAR.OHE_Appt_Confirmation_Nm);
    PARAMETER(PAR.OHE_Backhaul_Comment);
    PARAMETER(PAR.Letter_of_Credit_Number);
    PARAMETER(PAR.OHE_Backhaul_Return_to_Co);
    PARAMETER(PAR.LD_Stop_Drop);
    PARAMETER(PAR.OHE_Unused_Number_3_0);
    PARAMETER(PAR.OHE_Pier_Pass_Fee_Amount);
    PARAMETER(PAR.OHE_Port_Check_Fee_Amount);
    PARAMETER(PAR.OHE_Port_Cut_Time);
    PARAMETER(PAR.OHE_Backhaul_Truck_Number);
    PARAMETER(PAR.OHE_Load_Sched_Seq_Num);
    PARAMETER(PAR.Original_Appointment_Date);
    PARAMETER(PAR.Original_Appointment_Time);
    PARAMETER(PAR.OHE_PowerPro_Load#_Outbnd);
    PARAMETER(PAR.OHE_PowerPro_Load#_Bckhl);
    PARAMETER(PAR.OHE_Unused_Numeric_9_0_3);
    PARAMETER(PAR.OHE_Orig_ABS_Freight_Rate);
    PARAMETER(PAR.OHE_Genset_Number);
    PARAMETER(PAR.OHE_Email_BOL_Sent);
    PARAMETER(PAR.OHE_EDI_Order_Automated);
    PARAMETER(PAR.OHE_EDI_601_Action);
    PARAMETER(PAR.OHE_Unused_Status_4);
    PARAMETER(PAR.OHE_Unused_Text_1);
    PARAMETER(PAR.OHE_Unused_Text_2);
    PARAMETER(PAR.OHE_Customer_Vendor_f_PO);
    PARAMETER(PAR.OHE_EDI_824_AES_ITN_#);
    PARAMETER(PAR.OHE_Unused_Text_5);
    PARAMETER(PAR.OHE_Unused_Date_1);
    PARAMETER(PAR.OHE_Unused_Date_2);
    PARAMETER(PAR.EDI_Status_1);
    PARAMETER(PAR.EDI_Status_2);
    PARAMETER(PAR.EDI_Status_3);
    PARAMETER(PAR.Record_Status);
    PARAMETER(PAR.Job_Time);
    PARAMETER(PAR.User_Id);
    PARAMETER(PAR.Job_Name);
    PARAMETER(PAR.Job_Date);
    {
     //?USER: Processing before Data update

     // DB1.Job Time = JOB.*Job time
     DB1.Job_Time = JOB.*Job_time;

     // DB1.Job Date = JOB.*Job date
     DB1.Job_Date = JOB.*Job_date;

     // DB1.Job Name = JOB.*PROGRAM
     DB1.Job_Name = JOB.*PROGRAM;

     // DB1.User Id = JOB.*USER
     DB1.User_Id = JOB.*USER;

    }

    //?USER: Processing before Data update

    // DB1.Job Time = JOB.*Job time
    DB1.Job_Time = JOB.*Job_time;

    // DB1.Job Date = JOB.*Job date
    DB1.Job_Date = JOB.*Job_date;

    // DB1.Job Name = JOB.*PROGRAM
    DB1.Job_Name = JOB.*PROGRAM;

    // DB1.User Id = JOB.*USER
    DB1.User_Id = JOB.*USER;

   }

  }

  // WRK.@Blank for 5 = CVTVAR(DB1.Stop/Drop)
  WRK.@Blank_for_5 = CVTVAR(DB1.Stop_Drop);

  // LCL.Change Log Prior Value = WRK.@Blank for 5
  LCL.Change_Log_Prior_Value = WRK.@Blank_for_5;

  // Call program CRT Load/Order Chg Log XF.
  CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop);
  PARAMETER('DELORD');
  PARAMETER('TRF');
  PARAMETER(LCL.Change_Log_Prior_Value);
  PARAMETER(*BLANK);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*JOB);
  PARAMETER(PAR.Carrier_Code);
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);

  EXECUTE FUNCTION(DLT Load Detail        DL) TYPE(DLTOBJ) FILE(OMFLCPP)          AC1183328;
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Stop_Drop_Sequence_Number);
 }

 EXECUTE FUNCTION(DLT Load Header        DL) TYPE(DLTOBJ) FILE(OMFJCPP)          AC1183331;
 PARAMETER(PAR.Load_ID);
 // PAR.TMS Process Status = CND.Processed
 PAR.TMS_Process_Status = 1;

 ENDIF;

 ENDDO;

 //?Upd rcd as processed or error or no change
 EXECUTE FUNCTION(Chg TMS Load          CH) TYPE(CHGOBJ) FILE(PBCRCPP)           AC2122573;
 PARAMETER(DB1.TMS_Load_ID);
 PARAMETER(DB1.TMS_Extract_Date);
 PARAMETER(DB1.TMS_Extract_Time);
 PARAMETER(DB1.TMS_Extract_File_Name);
 PARAMETER(DB1.TMS_Customer_Load_ID);
 PARAMETER(DB1.TMS_Temperature);
 PARAMETER(DB1.TMS_Temperature_UOM);
 PARAMETER(DB1.TMS_Movement_Type);
 PARAMETER(DB1.TMS_Shipment_Type);
 PARAMETER(DB1.TMS_Payment_Method);
 PARAMETER(DB1.TMS_POD_Received);
 PARAMETER(DB1.TMS_Load_Status);
 PARAMETER(DB1.TMS_Load_Owner);
 PARAMETER(DB1.TMS_Carrier_SCAC);
 PARAMETER(DB1.TMS_Carrier_Mode);
 PARAMETER(DB1.TMS_Carrier_Distance);
 PARAMETER(DB1.TMS_Deadline_Depart_Date);
 PARAMETER(DB1.TMS_Deadline_Depart_Time);
 PARAMETER(DB1.TMS_Trailer_Number);
 PARAMETER(DB1.TMS_Container_Number);
 PARAMETER(DB1.TMS_Move_Type);
 PARAMETER(DB1.TMS_Vessel_Name);
 PARAMETER(DB1.TMS_Voyage_Number);
 PARAMETER(DB1.TMS_Booking_Number);
 PARAMETER(DB1.TMS_OTR_Destination_Name);
 PARAMETER(DB1.TMS_OTR_Destination_Addr1);
 PARAMETER(DB1.TMS_OTR_Destination_Addr2);
 PARAMETER(DB1.TMS_OTR_Destination_City);
 PARAMETER(DB1.TMS_OTR_Destination_State);
 PARAMETER(DB1.TMS_OTR_Destination_Zip);
 PARAMETER(DB1.TMS_OTR_Destination_Cntry);
 PARAMETER(DB1.TMS_Vessel_ETD_Date);
 PARAMETER(DB1.TMS_Vessel_ETA_Date);
 PARAMETER(DB1.TMS_Carrier_Ref_PRO_Inv);
 PARAMETER(DB1.TMS_Record_Status);
 PARAMETER(PAR.TMS_Process_Status);
 PARAMETER(PAR.TMS_Error_Reason);
 PARAMETER(JOB.*Job_date);
 PARAMETER(JOB.*Job_time);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set TMS Record Stampp IF) TYPE(EXCINTFUN)                      AC2123222;
  PARAMETER(DB1.TMS_Record_Status);
  PARAMETER(DB1.TMS_Change_Date);
  PARAMETER(DB1.TMS_Change_time);
  {
   //?Execute internal function

   // PAR.TMS Change time = JOB.*Job time
   PAR.TMS_Change_time = JOB.*Job_time;

   // PAR.TMS Change Date = JOB.*Job date
   PAR.TMS_Change_Date = JOB.*Job_date;

  }

 }

}


