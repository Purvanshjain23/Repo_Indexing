// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNM4E1R
// ?Date: 14.08.2025 Time: 03:45:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?P00579 RMC 8/05/2010 new SEParated rin sel process- just selling the rin
//?P00579 RMC 5/11/2010 new EMTS process
//?*
//?Create SEL RIN transaction from a BUY RIN Transaction
//?2/24/2010 Added Sts so they flag a RIN as being sold Unassigned so
//?  it is NOT available for shipping to ship   -- Value = "U"
//?  Gallons sold and net to sell are not updated, in case they want
//?  to change it back to being available.
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(LCL.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

//?USER: Initialize detail screen (existing record)

// DTL.COA RIN Type Flag - SEL = CND.Assigned
DTL.COA_RIN_Type_Flag_SEL = 1;

// DTL.RFS Trans Type - SEL = CND.Sold or Delivered
DTL.RFS_Trans_Type_SEL = 'SEL';

//?Movel '1' or '2' to RIN for Assigned/Separated sts
//?Transaction date/time
// DTL.Date To               USR = JOB.*Job date
DTL.Date_To_USR = JOB.*Job_date;

// DTL.Time = JOB.*Job time
DTL.Time = JOB.*Job_time;

// DTL.Condition Desc. 3  USR = Condition name of DTL.COA RIN SoldFull/Splt Sts
DTL.Condition_Desc_3_USR = RTVCND(DTL.COA_RIN_SoldFull_Splt_Sts);

// DTL.Condition Desc. 2  USR = Condition name of DTL.COA RIN Type Flag - SEL
DTL.Condition_Desc_2_USR = RTVCND(DTL.COA_RIN_Type_Flag_SEL);

CASE;

// IF DTL.COA RIN SoldFull/Splt Sts is Fuel Sold Unassigned
IF DTL.COA_RIN_SoldFull_Splt_Sts = 'U';

// DTL.Status - Y or N = CND.yes
DTL.Status_Y_or_N = 'Y';

ENDIF;

EXECUTE FUNCTION(Rtv Trans Rsn Dft,Dsc RT) TYPE(RTVOBJ) FILE(PNGGREP)           AC1990859;
PARAMETER(DTL.RFS_Trans_Type_SEL);
PARAMETER(DTL.RFS_Trans_Reason_Code);
PARAMETER(DTL.RFS_Trans_Reason_Desc);
PARAMETER('Y');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RFS Trans Reason Dft EQ PAR.RFS Trans Reason Dft
 IF DB1.RFS_Trans_Reason_Dft = PAR.RFS_Trans_Reason_Dft;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Equiv Value f/btchRT) TYPE(RTVOBJ) FILE(PMCCCPP)           AC1992392;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.COA_ULSD_Company_#);
PARAMETER(DB1.COA_Batch_Number);
PARAMETER(DTL.COA_RIN_Equivalence_Valu#);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Year Code = JOB.*Job date *YEAR
DTL.Year_Code = DATEDTLS(JOB.*Job_date 'YR' 1111111 'NONE' 'N' 1);

CASE;

// IF DB1.COA BHR Net Galls to Sell is Greater than zero
IF DB1.COA_BHR_Net_Galls_to_Sell > *ZERO;

// DTL.COA RIN Volume New usr = DTL.COA RIN Volume in Gallons
DTL.COA_RIN_Volume_New_usr = DTL.COA_RIN_Volume_in_Gallons;

// DTL.COA Batch RIN Volume new = DTL.COA Batch RIN Volume
DTL.COA_Batch_RIN_Volume_new = DTL.COA_Batch_RIN_Volume;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.COA RIN Volume New usr = DTL.COA BHR RINs to Sell Sep
DTL.COA_RIN_Volume_New_usr = DTL.COA_BHR_RINs_to_Sell_Sep;

// DTL.COA Batch RIN Volume new = DTL.COA RIN Volume New usr / DTL.COA RIN Equivalence Valu# *
DTL.COA_Batch_RIN_Volume_new = DTL.COA_RIN_Volume_New_usr                                          +
/ DTL.COA_RIN_Equivalence_Valu#;

ENDIF;

//?USER: Validate detail screen fields

//?F4 on sold to ulsd trading partner
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.ULSD Comp ship to #
IF PGM.*Cursor_field = DTL.ULSD_Comp_ship_to_#;

// LCL.Ship To Customer = CON.*ZERO
LCL.Ship_To_Customer = *ZERO;

// Call program Sel HPB Trans Partner SL.
CALL PROGRAM(Sel HPB Trans Partner SL) ('PNM1SRR');
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(DTL.ULSD_Comp_ship_to_#);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv Trans Rsn Dft,Dsc RT) TYPE(RTVOBJ) FILE(PNGGREP)           AC1990859;
PARAMETER(DTL.RFS_Trans_Type_SEL);
PARAMETER(DTL.RFS_Trans_Reason_Code);
PARAMETER(DTL.RFS_Trans_Reason_Desc);
PARAMETER('Y');
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.RFS Trans Reason Dft EQ PAR.RFS Trans Reason Dft
 IF DB1.RFS_Trans_Reason_Dft = PAR.RFS_Trans_Reason_Dft;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// DTL.Condition Desc. 2  USR = Condition name of DTL.COA RIN Type Flag - SEL
DTL.Condition_Desc_2_USR = RTVCND(DTL.COA_RIN_Type_Flag_SEL);

//?Val sold to ulsd comp#
CASE;

// IF DTL.ULSD Comp ship to # is Entered
IF DTL.ULSD_Comp_ship_to_# > *BLANK;

EXECUTE FUNCTION(Val HPB ULSD Trad#    RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1971336;
PARAMETER(DTL.ULSD_Comp_ship_to_#);
PARAMETER(DTL.Ship_To_Name);
{
 //?USER: Processing if Data record not found

 // PAR.Ship To Name = CON.*BLANK
 PAR.Ship_To_Name = *BLANK;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.HPB ULSD Company # EQ PAR.HPB ULSD Company #
 IF DB1.HPB_ULSD_Company_# = PAR.HPB_ULSD_Company_#;

 EXECUTE FUNCTION(RTV Name Only          RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1493704;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(PAR.Ship_To_Name);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

 ENDIF;

}


CASE;

// IF DTL.Ship To Name is blanks
IF DTL.Ship_To_Name = *BLANK;

// Send error message - 'Sold to partner &1 invalid'
ERROR(USR4260);
MSGPARM(DTL.ULSD_Comp_ship_to_#);

QUIT;

ENDIF;

//?Val sold to ulsd comp#
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Sold to partner &1 invalid'
ERROR(USR4260);
MSGPARM(DTL.ULSD_Comp_ship_to_#);

QUIT;

ENDIF;

// DTL.COA Batch RIN = DTL.COA Batch Header RIN
DTL.COA_Batch_RIN = DTL.COA_Batch_Header_RIN;

// LCL.COA BHR Net Galls to Sell = DTL.COA BHR Net Galls to Sell
LCL.COA_BHR_Net_Galls_to_Sell = DTL.COA_BHR_Net_Galls_to_Sell;

// LCL.COA BHR RINs to Sell Sep = DTL.COA BHR RINs to Sell Sep
LCL.COA_BHR_RINs_to_Sell_Sep = DTL.COA_BHR_RINs_to_Sell_Sep;

// LCL.COA RIN Gallons Sold = DTL.COA RIN Gallons Sold
LCL.COA_RIN_Gallons_Sold = DTL.COA_RIN_Gallons_Sold;

// LCL.COA RIN SoldFull/Splt Sts = CND.Fully Sold
LCL.COA_RIN_SoldFull_Splt_Sts = 'F';

// LCL.COA RIN EEEEEEEE  New usr = DTL.COA RIN EEEEEEEE
LCL.COA_RIN_EEEEEEEE_New_usr = DTL.COA_RIN_EEEEEEEE;

// LCL.COA RIN SSSSSSSS  New usr = DTL.COA RIN SSSSSSSS
LCL.COA_RIN_SSSSSSSS_New_usr = DTL.COA_RIN_SSSSSSSS;

CASE;

// IF DTL.COA RIN Volume New usr is eq 0
IF DTL.COA_RIN_Volume_New_usr = *ZERO;

// Send error message - '# RINs sold must be entered.'
ERROR(USR4354);
MSGPARM(DTL.COA_RIN_Volume_New_usr);

ENDIF;

//?Round any dec place to next whole nmbr - so add .5 then round
// Compute:volume new (round
DTL.COA_Batch_RIN_Volume_new = ( ( DTL.COA_RIN_Volume_New_usr                                      +
/ DTL.COA_RIN_Equivalence_Valu# ) + .5 ) * 1 'H';

CASE;

// IF DTL.coa bhr rin price new is not entered
IF DTL.coa_bhr_rin_price_new = *ZERO;

// AND DTL.COA bhr gall price new is not entered
AND DTL.COA_bhr_gall_price_new = *ZERO;

// Send error message - 'Enter RIN price or Per Gallon Price.'
ERROR(USR4328);
MSGPARM(DTL.coa_bhr_rin_price_new);
MSGPARM(DTL.COA_bhr_gall_price_new);

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg RIN Crt SEL Trans IF) TYPE(EXCINTFUN) FILE(PMDACPP)        AC1961232;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.COA_ULSD_Company_#);
PARAMETER(DTL.COA_Batch_Number);
PARAMETER(DTL.COA_Batch_Header_RIN_Seq);
PARAMETER(DTL.COA_Batch_Hdr_RIN_Seq_Sec);
PARAMETER(DTL.COA_RIN_Volume_in_Gallons);
PARAMETER(LCL.COA_RIN_SoldFull_Splt_Sts);
PARAMETER(LCL.COA_RIN_Gallons_Sold);
PARAMETER(DTL.COA_RIN_Type_Flag);
PARAMETER(DTL.COA_RIN_Customer_PO#);
PARAMETER(DTL.RFS_Report_Year);
PARAMETER(LCL.COA_BHR_Net_Galls_to_Sell);
PARAMETER(DTL.COA_BHR_Loadout_Temp);
PARAMETER(DTL.COA_ULSD_Facility_#);
PARAMETER(DTL.COA_Batch_RIN_Volume);
PARAMETER(DTL.COA_RIN_Quantity);
PARAMETER(DTL.RFS_Trans_Reason_Code);
PARAMETER(DTL.RFS_Fuel_Code);
PARAMETER(DTL.Year_Code);
PARAMETER(DTL.COA_BHR_RIN_Price);
PARAMETER(DTL.COA_BHR_Gallon_Price);
PARAMETER(DTL.COA_Transaction_Comment);
PARAMETER(DTL.Text_3_USR);
PARAMETER(DTL.Number_Value_7);
PARAMETER(DTL.COA_BHR_RFS_Version_Nbr);
PARAMETER(DTL.Load_ID_USR);
PARAMETER(DTL.COA_EMTS_Batch_Nbr);
PARAMETER(DTL.COA_BHR_RINs_to_Sell_Sep);
PARAMETER(DTL.ULSD_Comp_ship_to_#);
PARAMETER(DTL.COA_Batch_RIN);
PARAMETER(DTL.Ship_To_Name);
PARAMETER(DTL.Date_To_USR);
PARAMETER(DTL.Time);
PARAMETER(DTL.COA_RIN_Volume_New_usr);
PARAMETER(LCL.COA_RIN_SSSSSSSS_New_usr);
PARAMETER(LCL.COA_RIN_EEEEEEEE_New_usr);
PARAMETER(DTL.Status_Y_or_N);
PARAMETER(DTL.COA_bhr_gall_price_new);
PARAMETER(DTL.coa_bhr_rin_price_new);
PARAMETER(DTL.COA_Batch_RIN_Volume_new);
PARAMETER(DTL.COA_RIN_Equivalence_Valu#);
PARAMETER(DTL.COA_RIN_Type_Flag_SEL);
PARAMETER(DTL.RFS_Trans_Type_SEL);
{
 //?Execute internal function

 //?if assigned
 CASE;

 // IF PAR.COA RIN Type Flag - SEL is Assigned
 IF PAR.COA_RIN_Type_Flag_SEL = '1';

 //?Fuel sold unassigned = N
 CASE;

 // IF PAR.Status - Y or N is Not Yes
 IF PAR.Status_Y_or_N = *BLANK/'N';

 EXECUTE FUNCTION(chg RIN Crt SEL Trans CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC1971215;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(PAR.COA_RIN_Volume_in_Gallons);
 PARAMETER(PAR.COA_RIN_SoldFull_Splt_Sts);
 PARAMETER(PAR.COA_RIN_Gallons_Sold);
 PARAMETER(PAR.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(PAR.COA_BHR_RINs_to_Sell_Sep);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 CASE;

 // IF PAR.ULSD Comp ship to # is Entered
 IF PAR.ULSD_Comp_ship_to_# > *BLANK;

 //?Update BUY RIN Transaction with  sold sts, gallons sold
 //?Create SEL RIN Transaction
 EXECUTE FUNCTION(Rtv Last Sec f/Btch/SecRT) TYPE(RTVOBJ) FILE(PMDACPP)          AC1963881;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 {
  //?USER: Processing if Data record not found

  // PAR.COA Batch Hdr RIN Seq Sec = CON.*ZERO
  PAR.COA_Batch_Hdr_RIN_Seq_Sec = *ZERO;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // LCL.COA Batch Hdr RIN Seq Sec = LCL.COA Batch Hdr RIN Seq Sec + CON.1
 LCL.COA_Batch_Hdr_RIN_Seq_Sec = LCL.COA_Batch_Hdr_RIN_Seq_Sec + 1;

 //?P00579 RMC 5/18/2010 If RFS2, then set RIN as ready to go to EMTS,
 //?  & dont output par.coa batch rin
 //?RFS2 changes
 CASE;

 // IF PAR.COA BHR RFS Version Nbr is RFS 2
 IF PAR.COA_BHR_RFS_Version_Nbr = '2';

 // LCL.COA GEN EMTS Sts = CND.Blank
 LCL.COA_GEN_EMTS_Sts = *BLANK;

 // LCL.COA RIN EMTS Sts = CND.Not Processed
 LCL.COA_RIN_EMTS_Sts = 0;

 // LCL.COA Batch RIN = CON.*BLANK
 LCL.COA_Batch_RIN = *BLANK;

 //?RFS2 changes
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.COA GEN EMTS Sts = CND.Blank
 LCL.COA_GEN_EMTS_Sts = *BLANK;

 // LCL.COA RIN EMTS Sts = CND.Blank
 LCL.COA_RIN_EMTS_Sts = *BLANK;

 // LCL.COA Batch RIN = PAR.COA Batch RIN
 LCL.COA_Batch_RIN = PAR.COA_Batch_RIN;

 ENDIF;

 // LCL.COA RIN EMTS Sts = CND.Blank
 LCL.COA_RIN_EMTS_Sts = *BLANK;

 CASE;

 // IF PAR.COA BHR RFS Version Nbr is RFS 2
 IF PAR.COA_BHR_RFS_Version_Nbr = '2';

 // LCL.COA RIN EMTS Sts = CND.Not Processed
 LCL.COA_RIN_EMTS_Sts = 0;

 ENDIF;

 EXECUTE FUNCTION(Crt COA Batch Hdr RIN CR) TYPE(CRTOBJ) FILE(PMDACPP)           AC1858626;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(LCL.COA_Batch_RIN);
 PARAMETER(PAR.COA_RIN_SSSSSSSS_New_usr);
 PARAMETER(PAR.COA_RIN_EEEEEEEE_New_usr);
 PARAMETER(PAR.COA_RIN_Volume_New_usr);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Time);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.ULSD_Comp_ship_to_#);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(PAR.COA_RIN_Type_Flag_SEL);
 PARAMETER(PAR.COA_RIN_Customer_PO#);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(PAR.COA_BHR_Loadout_Temp);
 PARAMETER(PAR.COA_ULSD_Facility_#);
 PARAMETER(PAR.COA_Batch_RIN_Volume_new);
 PARAMETER(PAR.COA_RIN_Volume_New_usr);
 PARAMETER(PAR.RFS_Trans_Type_SEL);
 PARAMETER(PAR.RFS_Trans_Reason_Code);
 PARAMETER(PAR.RFS_Fuel_Code);
 PARAMETER(PAR.COA_BHR_RIN_Gen_Year);
 PARAMETER(PAR.coa_bhr_rin_price_new);
 PARAMETER(PAR.COA_bhr_gall_price_new);
 PARAMETER(PAR.COA_Transaction_Comment);
 PARAMETER('COA');
 PARAMETER(PAR.COA_RIN_Supporting_Nbr_1);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.COA_BHR_RFS_Version_Nbr);
 PARAMETER(LCL.COA_GEN_EMTS_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.COA_RIN_EMTS_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.COA_EMTS_Batch_Nbr);
 PARAMETER(LCL.COA_BHR_Unused_Sts_3);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.COA_RIN_Equivalence_Valu#);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 ENDIF;

 ENDIF;

 //?Fuel sold unassigned = Y
 CASE;

 // IF PAR.Status - Y or N is yes
 IF PAR.Status_Y_or_N = 'Y';

 //? mark fully/sold split as "U"nassigned
 EXECUTE FUNCTION(chg RIN Crt SEL Trans CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC1971215;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(PAR.COA_RIN_Volume_in_Gallons);
 PARAMETER(PAR.COA_RIN_SoldFull_Splt_Sts);
 PARAMETER(PAR.COA_RIN_Gallons_Sold);
 PARAMETER(PAR.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(PAR.COA_BHR_RINs_to_Sell_Sep);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

 //?if separated
 CASE;

 // IF PAR.COA RIN Type Flag - SEL is Separated
 IF PAR.COA_RIN_Type_Flag_SEL = '2';

 // LCL.COA BHR RINs to Sell Sep = PAR.COA BHR RINs to Sell Sep - PAR.COA RIN Volume New usr
 LCL.COA_BHR_RINs_to_Sell_Sep = PAR.COA_BHR_RINs_to_Sell_Sep - PAR.COA_RIN_Volume_New_usr;

 EXECUTE FUNCTION(chg RIN Crt SEL Trans CH) TYPE(CHGOBJ) FILE(PMDACPP)           AC1971215;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(PAR.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(PAR.COA_RIN_Volume_in_Gallons);
 PARAMETER(PAR.COA_RIN_SoldFull_Splt_Sts);
 PARAMETER(PAR.COA_RIN_Gallons_Sold);
 PARAMETER(PAR.COA_BHR_Net_Galls_to_Sell);
 PARAMETER(LCL.COA_BHR_RINs_to_Sell_Sep);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 CASE;

 // IF PAR.ULSD Comp ship to # is Entered
 IF PAR.ULSD_Comp_ship_to_# > *BLANK;

 //?Update BUY RIN Transaction with  sold sts, gallons sold
 //?Create SEL RIN Transaction
 EXECUTE FUNCTION(Rtv Last Sec f/Btch/SecRT) TYPE(RTVOBJ) FILE(PMDACPP)          AC1963881;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 {
  //?USER: Processing if Data record not found

  // PAR.COA Batch Hdr RIN Seq Sec = CON.*ZERO
  PAR.COA_Batch_Hdr_RIN_Seq_Sec = *ZERO;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // LCL.COA Batch Hdr RIN Seq Sec = LCL.COA Batch Hdr RIN Seq Sec + CON.1
 LCL.COA_Batch_Hdr_RIN_Seq_Sec = LCL.COA_Batch_Hdr_RIN_Seq_Sec + 1;

 //?P00579 RMC 5/18/2010 If RFS2, then set RIN as ready to go to EMTS,
 //?  & dont output par.coa batch rin
 //?RFS2 changes
 CASE;

 // IF PAR.COA BHR RFS Version Nbr is RFS 2
 IF PAR.COA_BHR_RFS_Version_Nbr = '2';

 // LCL.COA GEN EMTS Sts = CND.Blank
 LCL.COA_GEN_EMTS_Sts = *BLANK;

 // LCL.COA RIN EMTS Sts = CND.Not Processed
 LCL.COA_RIN_EMTS_Sts = 0;

 // LCL.COA Batch RIN = CON.*BLANK
 LCL.COA_Batch_RIN = *BLANK;

 //?RFS2 changes
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.COA GEN EMTS Sts = CND.Blank
 LCL.COA_GEN_EMTS_Sts = *BLANK;

 // LCL.COA RIN EMTS Sts = CND.Blank
 LCL.COA_RIN_EMTS_Sts = *BLANK;

 // LCL.COA Batch RIN = PAR.COA Batch RIN
 LCL.COA_Batch_RIN = PAR.COA_Batch_RIN;

 ENDIF;

 EXECUTE FUNCTION(Crt COA Batch Hdr RIN CR) TYPE(CRTOBJ) FILE(PMDACPP)           AC1858626;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.COA_ULSD_Company_#);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(LCL.COA_Batch_Hdr_RIN_Seq_Sec);
 PARAMETER(PAR.COA_Batch_RIN);
 PARAMETER(PAR.COA_RIN_SSSSSSSS_New_usr);
 PARAMETER(PAR.COA_RIN_EEEEEEEE_New_usr);
 PARAMETER(PAR.COA_RIN_Volume_New_usr);
 PARAMETER(PAR.Date_To_USR);
 PARAMETER(PAR.Time);
 PARAMETER(PAR.Ship_To_Name);
 PARAMETER(PAR.ULSD_Comp_ship_to_#);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(PAR.COA_RIN_Type_Flag_SEL);
 PARAMETER(PAR.COA_RIN_Customer_PO#);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.COA_Batch_Number);
 PARAMETER(PAR.COA_Batch_Header_RIN_Seq);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(PAR.RFS_Report_Year);
 PARAMETER(*BLANK);
 PARAMETER(WRK.Blank_for_4_USR);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(PAR.COA_BHR_Loadout_Temp);
 PARAMETER(PAR.COA_ULSD_Facility_#);
 PARAMETER(PAR.COA_Batch_RIN_Volume_new);
 PARAMETER(PAR.COA_RIN_Volume_New_usr);
 PARAMETER(PAR.RFS_Trans_Type_SEL);
 PARAMETER(PAR.RFS_Trans_Reason_Code);
 PARAMETER(PAR.RFS_Fuel_Code);
 PARAMETER(PAR.COA_BHR_RIN_Gen_Year);
 PARAMETER(PAR.coa_bhr_rin_price_new);
 PARAMETER(PAR.COA_bhr_gall_price_new);
 PARAMETER(PAR.COA_Transaction_Comment);
 PARAMETER(PAR.COA_RIN_Supporting_Text_1);
 PARAMETER(PAR.COA_RIN_Supporting_Nbr_1);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.COA_BHR_RFS_Version_Nbr);
 PARAMETER(LCL.COA_GEN_EMTS_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(LCL.COA_RIN_EMTS_Sts);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(PAR.COA_EMTS_PTD_Nbr);
 PARAMETER(PAR.COA_EMTS_Batch_Nbr);
 PARAMETER(LCL.COA_BHR_Unused_Sts_3);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(PAR.COA_RIN_Equivalence_Valu#);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('A');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
  PARAMETER(DB1.Record_Status);
  PARAMETER(DB1.Create_Date);
  PARAMETER(DB1.Create_Time);
  PARAMETER(DB1.Create_User);
  PARAMETER(DB1.Create_Program);
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   //?*** Set RECORD STATUS field. ***
   // PAR.Record Status = CND.Active
   PAR.Record_Status = 'A';

   //?*** Set CREATE fields. ***
   // PAR.Create Date = JOB.*Job date
   PAR.Create_Date = JOB.*Job_date;

   // PAR.Create Time = JOB.*Job time
   PAR.Create_Time = JOB.*Job_time;

   // PAR.Create User = JOB.*USER
   PAR.Create_User = JOB.*USER;

   // PAR.Create Program = JOB.*PROGRAM
   PAR.Create_Program = JOB.*PROGRAM;

   //?*** Set CHANGE fields. ***
   // PAR.Change Date = CON.*ZERO
   PAR.Change_Date = *ZERO;

   // PAR.Change Time = CON.*ZERO
   PAR.Change_Time = *ZERO;

   // PAR.Change User = CON.*BLANK
   PAR.Change_User = *BLANK;

   // PAR.Change Program = CON.*BLANK
   PAR.Change_Program = *BLANK;

  }

 }

 ENDIF;

 ENDIF;

}


