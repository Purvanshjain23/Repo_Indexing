// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for OML3EFR
// ?Date: 14.08.2025 Time: 03:27:13
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.Company Number Pass   USR = PAR.Company Number
PAR.Company_Number_Pass_USR = PAR.Company_Number;

//?USER: Initialize subfile header

// CTL.Company Number = PAR.Company Number
CTL.Company_Number = PAR.Company_Number;

// CTL.Ship To Customer = PAR.Ship To Customer
CTL.Ship_To_Customer = PAR.Ship_To_Customer;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Cust Name, Status  RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1260359;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record (existing record)

EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
PARAMETER(RCD.Accrual_Code);
PARAMETER(RCD.Accrual_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate subfile control

//?Process Print request
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// PAR.Customer Number Pass  USR = CTL.Ship To Customer
PAR.Customer_Number_Pass_USR = CTL.Ship_To_Customer;

// Call program PRT Prmt w/Co/Customer UP.
CALL PROGRAM(PRT Prmt w/Co/Customer UP) ('PDH6UPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('A/R');
PARAMETER('PDDSPCLP');
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('Print Customer Accruals');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

//?USER: Validate subfile record fields

//?Process Item Accrual option
CASE;

// IF RCD.*SFLSEL is *Cust/Item Accruals
IF RCD.*SFLSEL = '8';

CASE;

// IF RCD.All Products (Y/N) is Yes
IF RCD.All_Products_Y_N = 'Y';

// Send error message - 'Can't add items to customer when All Products flag is yes.'
ERROR(USR1540);
MSGPARM(RCD.All_Products_Y_N);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program EDT Cust/Item Accrual  EF.
CALL PROGRAM(EDT Cust/Item Accrual  EF) ('OML1EFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Accrual_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?PK0355 10/01/01  Copy to new customer
CASE;

// IF RCD.*SFLSEL is *Copy
IF RCD.*SFLSEL = '3';

CASE;

// IF RCD.Accrual Detail Search is Item
IF RCD.Accrual_Detail_Search = 'I';

// Call program Cpy Cust/Item Accrual  EF.
CALL PROGRAM(Cpy Cust/Item Accrual  EF) ('PONSEFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Accrual_Code);
PARAMETER(*MISSING);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(LCL.Ship_to_Customer_USR);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(RCD.All_Products_Y_N);
PARAMETER(*MISSING);
PARAMETER(RCD.Comm_Threshold_Period);
PARAMETER(RCD.CAH_Unused_Date_1);
PARAMETER(RCD.CAH_Unused_Date_2);
PARAMETER(RCD.Comm_Min_Amt_Period);
PARAMETER(RCD.Comm_Retroactive_Sts);
PARAMETER(RCD.Accrual_Detail_Search);

// IF RCD.Accrual Detail Search is Item Structure
IF RCD.Accrual_Detail_Search = 'S';

// Call program Cpy Cust/Str Accrual   EF.
CALL PROGRAM(Cpy Cust/Str Accrual   EF) ('PPB1EFR');
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Accrual_Code);
PARAMETER(*MISSING);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(LCL.Ship_to_Customer_USR);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(RCD.All_Products_Y_N);
PARAMETER(*MISSING);
PARAMETER(RCD.Comm_Threshold_Period);
PARAMETER(RCD.CAH_Unused_Date_1);
PARAMETER(RCD.CAH_Unused_Date_2);
PARAMETER(RCD.Comm_Min_Amt_Period);
PARAMETER(RCD.Comm_Retroactive_Sts);
PARAMETER(RCD.Accrual_Detail_Search);

ENDIF;

CASE;

// IF LCL.Ship to Customer      USR NE WRK.ZERO
IF LCL.Ship_to_Customer_USR <> WRK.ZERO;

// Send information message - 'Customer Accruals were copied to Customer &1'
MESSAGE(USR3090 *INFO);
MSGPARM(LCL.Ship_to_Customer_USR);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Validate subfile record relations

//?Begin date cannot be greater than end date
CASE;

// IF RCD.Period Beginning Date GT RCD.Period Ending Date
IF RCD.Period_Beginning_Date > RCD.Period_Ending_Date;

// Send error message - 'Beginning period must be less than or equal to the ending period'
ERROR(USR0128);

ENDIF;

//?Check rate and percent according to All Products flag
CASE;

// IF RCD.All Products (Y/N) is Yes
IF RCD.All_Products_Y_N = 'Y';

// OR RCD.All Products (Y/N) is All + Exceptions
OR RCD.All_Products_Y_N = 'X';

//?Rate or Percent must be entered
CASE;

// IF RCD.Accrual Rate is equal to zero
IF RCD.Accrual_Rate = *ZERO;

// Send error message - 'Rate must be entered.'
ERROR(USR1537);
MSGPARM(RCD.Accrual_Rate);

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT OM Cust Accrual He CR) TYPE(CRTOBJ) FILE(OMHOREP)          AC1221740;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Accrual_Code);
PARAMETER(*MISSING);
PARAMETER(RCD.Period_Beginning_Date);
PARAMETER(RCD.Period_Ending_Date);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(RCD.All_Products_Y_N);
PARAMETER(*MISSING);
PARAMETER(RCD.Comm_Threshold_Period);
PARAMETER(RCD.CAH_Unused_Date_1);
PARAMETER(RCD.CAH_Unused_Date_2);
PARAMETER(RCD.Comm_Min_Amt_Period);
PARAMETER(RCD.Comm_Retroactive_Sts);
PARAMETER(RCD.Accrual_Detail_Search);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(RCD.Commission_Not_Comm_Sts);
PARAMETER(RCD.CAH_Unused_Sts_3);
PARAMETER(RCD.CAH_Unused_Sts_4);
PARAMETER(RCD.CAH_Unused_Sts_5);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(DLT Del Header & Dtl   DL) TYPE(DLTOBJ) FILE(OMHOREP)          AC1264221;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Accrual_Code);
{
 //?USER: Processing after Data update

 CASE;

 // IF DB1.Accrual Detail Search is Item
 IF DB1.Accrual_Detail_Search = 'I';

 EXECUTE FUNCTION(RTV Delete all Dtl/Hdr RT) TYPE(RTVOBJ) FILE(OMHPREP)          AC1264222;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(DB1.CAH_Sequence_No);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  EXECUTE FUNCTION(DLT OM Cust Accrual De DL) TYPE(DLTOBJ) FILE(OMHPREP)          AC1221731;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(DB1.Item_Code);
 }

 // IF DB1.Accrual Detail Search is Item Structure
 IF DB1.Accrual_Detail_Search = 'S';

 EXECUTE FUNCTION(Del Customer Accr Str RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1706727;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(DB1.CAH_Sequence_No);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del Customer Accr Str DO) TYPE(DLTOBJ) FILE(POC8REP)           AC1676543;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
 }

 ENDIF;

 EXECUTE FUNCTION(Del Cust Accrl Rate   RT) TYPE(RTVOBJ) FILE(PPAJREP)           AC1706725;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Accrual_Code);
 PARAMETER(DB1.CAH_Sequence_No);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del Cust Accrl Rate   DL) TYPE(DLTOBJ) FILE(PPAJREP)           AC1706217;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(DB1.Minimum_Number);
  PARAMETER(DB1.Maximum_Number);
 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG OM Cust Accrual He CH) TYPE(CHGOBJ) FILE(OMHOREP)          AC1221741;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Accrual_Code);
PARAMETER(*MISSING);
PARAMETER(RCD.Period_Beginning_Date);
PARAMETER(RCD.Period_Ending_Date);
PARAMETER(RCD.Accrual_Rate);
PARAMETER(RCD.All_Products_Y_N);
PARAMETER(*MISSING);
PARAMETER(RCD.Comm_Threshold_Period);
PARAMETER(RCD.CAH_Unused_Date_1);
PARAMETER(RCD.CAH_Unused_Date_2);
PARAMETER(RCD.Comm_Min_Amt_Period);
PARAMETER(RCD.Comm_Retroactive_Sts);
PARAMETER(RCD.Accrual_Detail_Search);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(RCD.Commission_Not_Comm_Sts);
PARAMETER(RCD.CAH_Unused_Sts_3);
PARAMETER(RCD.CAH_Unused_Sts_4);
PARAMETER(RCD.CAH_Unused_Sts_5);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


//?USER: Extra processing after DBF update

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

