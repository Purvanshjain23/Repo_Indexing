// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDT5XFR
// ?Date: 14.08.2025 Time: 03:29:59
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?W 69422 9/24/2020 RMC added FL rate type calc under Commission/all prods
//?EXPCOM 11/10/04 RMC -- new to use in the accrual by range calcs
//?DLY029 05/23/07 RMC -- DB Changes,new rate type "SS" for SEIDAI broker
//?DLY029 08/08/07 RMC -- New rate type "G " for % of gross ext amt
//?      will be used for sales tax calc
//?DLY029 08/09/07 RMC -- All accr types can have rate types & dtl now
//?  so do same calcs as CM-commission
//?05/27/09 LJB E00422 -- Accrual prod pgm can be by customer, if
//?  All Customers = No, see if a customer exists and is Active, else skip
//?11/11/09 LJB E00513 -- Condition the write of the commission record
//?  to Shipping Dtl Accrual from Customer Accrual on the Affect
//?  Commission flag. If No, skip.
//?03/23/10 PKD E0648 - for db/cr, add accrual processing
//?04/14/10 RMC C0699 - for db/cm look at add-on allow for accruals
//?   when deciding when to reverse the sign on the accr amt
//?11/22/11 RMC E1812 - Order Dtl level: added rate types "G " and "QT" for
//?  HPB (but anyone can use)  G= % of gross extended : "QT"= $/Qty/1000
//?E4057 JJH 04/23/15 - Price Credit Memo Fixes
//?- Add I Parm for Attach to Order Number
//?- Rtv Actual Ship Date of Attach to Order Number for Credit
//?  and Debit Memos
//?- Pass in OD Full Return to Plant from Order Detail.  This will
//?  be used to update accurals for selected Flat Amount calculations.
//?- Comment out logic for Accrual Rate Type that have never been used
//?  Product  (W ) $/Quantity
//?  Product   (FA) Flat Amount
//?  Customer  (WR) $/LB by Weight Billed
//?  Customer  (QR) $/Quantity by Qty Shipped
//?  Customer  (SR) % ofNetSls by NetSls/Lb
//?  Customer  (SS) % ofNetSls by NetSls/Month
//?  Customer  (FA) Flat Amount
//?  Order Dtl (W ) $/Lb
//?  Order Dtl (WR) $/Lb Weight Billed
//?  Order Dtl (QR) $/Quantity by Qty Shipped
//?- All logic for By Range LST for Accrual Rate Type commented out
//?  because By Range is no longer required.
//?- Remove logic for Invoices only on Customer Accural.  Customer
//?  will now process Invoices, Credit Memos, and Debit Memos.
//?- Correction to allow Flat Load Amount and Invoice to process.
ENDDO;

EXECUTE FUNCTION(RTV Total Qty,Wgt Ext  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1712163;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Extended_Amt_Total);
PARAMETER(PAR.Quantity_Total_S);
PARAMETER(PAR.Weight_Total_13_2_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // PAR.Quantity Shipped Total = PAR.Quantity Shipped Total + DB1.Quantity Shipped Total
 PAR.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total + DB1.Quantity_Shipped_Total;

 // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Weight Shipped Total
 PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Weight_Shipped_Total;

 // PAR.Extended Amount = PAR.Extended Amount + DB1.Extended Amount
 PAR.Extended_Amount = PAR.Extended_Amount + DB1.Extended_Amount;

 ENDIF;

}


//?06/26/14 PKD E3164 Added Exclude Collect Truck flag to the
//?             Accrual Program EXT.  Need to send in the Shipping Method
//?             for selection criteria for the Accrual Program.
EXECUTE FUNCTION(Rtv Shipping Method   RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1848045;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Shipping_Method);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(UPD Auto Accruals      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1337618;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Date_of_Original_Entry);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
PARAMETER(LCL.Shipping_Method);
PARAMETER(PAR.Invoice_Date);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Extended_Amt_Total);
PARAMETER(PAR.Quantity_Total_S);
PARAMETER(PAR.Weight_Total_13_2_USR);
{
 //?USER: Initialize routine

 //?E4057 JJH 04/27/15 - New input Parm: SDA Atch to Ord ActShpDt
 // PAR.Sequence Number = CON.*ZERO
 PAR.Sequence_Number = *ZERO;

 //?USER: Process Data record

 //?***** MAINTENANCE LOG
 DO;

 //?* 12/02/03 PKD Only calculate accrual if Quantity or Weight is
 //?*              not zero.
 //?E4057 JJH 04/27/15 - See comments in 3 Maintenance Logs below
 //?- RTV Write Accrual Rcd RT - Accrual Program  *
 //?- RTV Write Accrual Rcd RT - Customer Accrual  *
 //?- RTV Write Accrual Rcd RT - Order Detail Accrual  *
 ENDDO;

 //?E4057 JJH 05/11/15 - Rtv Actual Ship Date of Attach to Order Nbr
 //?Populate SDA Atch to Ord ActShpDt
 CASE;

 // IF PAR.Billing Activity Type is Credit or Debit Memo
 IF PAR.Billing_Activity_Type = '2'/'3';

 // LCL.SDA Atch to Ord ActShpDt = DB1.OD Atch to Ord ActShpDte
 LCL.SDA_Atch_to_Ord_ActShpDt = DB1.OD_Atch_to_Ord_ActShpDte;

 //?Populate SDA Atch to Ord ActShpDt
 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.SDA Atch to Ord ActShpDt = CON.*ZERO
 LCL.SDA_Atch_to_Ord_ActShpDt = *ZERO;

 ENDIF;

 CASE;

 // IF DB1.Quantity Shipped Total is not equal zero
 IF DB1.Quantity_Shipped_Total <> *ZERO;

 // OR DB1.Weight Shipped Total is Not equal zero
 OR DB1.Weight_Shipped_Total <> *ZERO;

 EXECUTE FUNCTION(Rtv Acct&Ship Co      RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1814475;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(NLL.Shipping_Company);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?*---------------------------------------------------------------*
 //?***** MAINTENANCE LOG: Product Program
 DO;

 //?* 07/16/08 PKD E00193 Product Accrual
 //?* 12/03/09 PKD FP1322 Added Flat Amount Accrual Rate Type
 //?* 3/23/10 PKD E00648 upd accruals for db/cm
 //?* 4/14/10 RMC E00648 for db/cm look at addon allow flag
 //?*12/15/10 PKD TFS: C1208 If product is not applicable, then do
 //?              do not check if Ship To is applicable for the pgm.
 //?06/26/14 PKD E3164 Send in Shipping Method as a parameter
 //?E4057 JJH 04/24/14 - Price Credit Memo Fixes
 //?- Add I parm for: SDA Atch to Ord ActShpDt
 //?- Add I parm for: Affect Sales Doll Status
 //?- Add I parm for: Affect Sales Pnds Status
 //?- Comment out logic for Affect Trade Fund & Affect Commission
 //?- Pass in OD Full Retturn to Plant from Order Detail.  This will
 //?  be used to update accurals for selected Flat Amount calculations.
 //?- Comment out logic for Accrual Rate Type that have never been used
 //?  Product  (W ) $/Quantity
 //?  Product   (FA) Flat Amount
 //?- Use Actual Ship Date from Original Order when determining if
 //?  the Accrual should be applied based on the Accrual Date Range
 //?- Reset the WRK.Extended Amount to zero for each record
 //?- Only create Shipping Detail Accrual records if the Extended
 //?  Amount is GT Zero.
 //?- Comment Out Accrual Rate Type processing that has never been
 //?  used.
 ENDDO;

 EXECUTE FUNCTION(RTV Write Accrual Rcd RT) TYPE(RTVOBJ) FILE(OMHLREP)           AC1891235;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.U_M_Ordered);
 PARAMETER(DB1.Quantity_Shipped_Total);
 PARAMETER(DB1.Weight_Shipped_Total);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Affect_Sales_Doll_Status);
 PARAMETER(DB1.Affect_Sales_Pnds_Status);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Affect_Trade_Fund);
 PARAMETER(DB1.Affect_Commission);
 PARAMETER(DB1.OD_Clm_Full_Return_to_Plt);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(PAR.Invoice_Date);
 PARAMETER(PAR.Billing_Activity_Type);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(LCL.SDA_Atch_to_Ord_ActShpDt);
 PARAMETER(PAR.Extended_Amt_Total);
 PARAMETER(PAR.Quantity_Total_S);
 PARAMETER(PAR.Weight_Total_13_2_USR);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Process Data record

  //?*------------ MAINTENANCE LOG ------------*
  DO;

  //?07/16/08 PKD E00193 Product Accrual
  //?06/26/14 PKD E3164 add omit criteria for Exclude Collect Truck/Rail
  //?E4057 JJH 04/29/15 - Price Credit Memo Fixes
  //?- Use Actual Ship Date from Original Order when determining if
  //?  the Accrual should be applied based on the Accrual Date Range
  //?- Reset the WRK.Extended Amount to zero for each record
  //?- Only create Shipping Detail Accrual records if the Extended
  //?  Amount is GT Zero.
  //?- Comment Out Accrual Rate Type processing that has never been
  //?  used.
  ENDDO;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  //?E4057 JJH 05/13/15 - Reset Extended Amount to Zero
  // WRK.Extended Amount = CND.equal to zero
  WRK.Extended_Amount = *ZERO;

  EXECUTE FUNCTION(Rtv Accr Prog EXT     RT) TYPE(RTVOBJ) FILE(PBAMREP)           AC2048357;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(NLL.G_L_Account_Category);
  PARAMETER(LCL.APE_Excl_Collect_ShpMthd);
  PARAMETER(NLL.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?OMIT:  Shipping Method = Collect Rail or Truck
  CASE;

  // IF LCL.APE Excl Collect ShpMthd is Yes
  IF LCL.APE_Excl_Collect_ShpMthd = 'Y';

  // AND PAR.Shipping Method is Collect
  AND PAR.Shipping_Method = 'CR'/'CT';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  //?Process Accrual Program
  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  CASE;

  // IF DB1.Automatic Accrual (Y/N) is Yes
  IF DB1.Automatic_Accrual_Y_N = 'Y';

  //?E4057 JJH 04/24/14 - Add I parm for: SDA Atch to Ord ActShpDt
  EXECUTE FUNCTION(RTV Write Accrual Rcd RT) TYPE(RTVOBJ) FILE(PMD2REP)           AC1892117;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Comment_Print_Ship_Doc);
  PARAMETER(PAR.Extended_Amount);
  PARAMETER(PAR.U_M_Ordered);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(PAR.Scheduled_Ship_Date);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Affect_Sales_Doll_Status);
  PARAMETER(PAR.Affect_Sales_Pnds_Status);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Sales_Route_Code);
  PARAMETER(PAR.Affect_Trade_Fund);
  PARAMETER(PAR.Affect_Commission);
  PARAMETER(PAR.OD_Clm_Full_Return_to_Plt);
  PARAMETER(DB1.Accrual_Description);
  PARAMETER(DB1.Print_On_Invoice_Y_N);
  PARAMETER(DB1.Rate_Usage);
  PARAMETER(DB1.Add_on_Allowance);
  PARAMETER(DB1.Accrual_Type);
  PARAMETER(DB1.Sub_Ledger_Code);
  PARAMETER(DB1.Reverse_Accrual_Code);
  PARAMETER(DB1.UOM_Primary_Dft);
  PARAMETER(DB1.G_L_Code_Dr);
  PARAMETER(DB1.G_L_Code_Cr);
  PARAMETER(DB1.G_L_Sub_Account_Code);
  PARAMETER(DB1.Sales_History_Exp_Bucket);
  PARAMETER(DB1.Post_to_G_L_Y_N);
  PARAMETER(DB1.All_Products_Y_N);
  PARAMETER(DB1.Accrual_Detail_Search);
  PARAMETER(DB1.Affect_Sales_Realz_Rpt);
  PARAMETER(DB1.Affect_Invoice_Price);
  PARAMETER(DB1.Invoice_Print_Type);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(PAR.Date_of_Original_Entry);
  PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
  PARAMETER(PAR.Invoice_Date);
  PARAMETER(PAR.Billing_Activity_Type);
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(PAR.SDA_Atch_to_Ord_ActShpDt);
  PARAMETER(PAR.Extended_Amt_Total);
  PARAMETER(PAR.Quantity_Total_S);
  PARAMETER(PAR.Weight_Total_13_2_USR);
  PARAMETER(PAR.Accounting_Company);
  {
   //?USER: Process Data record

   //?*------------ MAINTENANCE LOG ------------*
   DO;

   //?05/27/09 LJB E00422 Accrual Prod Pgm Cust -
   //?  If All Customers = No, see if a customer exists and is active
   //?07/16/08 PKD E00193 Product Accrual
   //?E4057 JJH 04/24/14 - Price Credit Memo Fixes
   //?- Use Actual Ship Date from Original Order when determining if
   //?  the Accrual should be applied based on the Accrual Date Range
   //?- Reset the WRK.Extended Amount to zero for each record
   //?- Only create Shipping Detail Accrual records if the Extended
   //?  Amount is GT Zero.
   //?- Comment Out Accrual Rate Type processing that has never been
   //?  used.
   ENDDO;

   //?E4057 JJH 04/24/14 - Determine Actual Ship Date used for calcs
   CASE;

   // IF PAR.Billing Activity Type is Credit or Debit Memo
   IF PAR.Billing_Activity_Type = '2'/'3';

   // AND PAR.SDA Atch to Ord ActShpDt is entered
   AND PAR.SDA_Atch_to_Ord_ActShpDt <> *ZERO;

   // LCL.Actual Shipped Date = PAR.SDA Atch to Ord ActShpDt
   LCL.Actual_Shipped_Date = PAR.SDA_Atch_to_Ord_ActShpDt;

   // IF *OTHERWISE
   IF *OTHERWISE;

   // LCL.Actual Shipped Date = PAR.Actual Shipped Date
   LCL.Actual_Shipped_Date = PAR.Actual_Shipped_Date;

   ENDIF;

   //?E4057 JJH 04/24/14 - Use LCL.Actual Ship Date
   //?CALC: Accrual
   CASE;

   // IF LCL.Actual Shipped Date GE DB1.AD Period Beginning Date
   IF LCL.Actual_Shipped_Date >= DB1.AD_Period_Beginning_Date;

   // AND LCL.Actual Shipped Date LE DB1.AD Period Ending Date
   AND LCL.Actual_Shipped_Date <= DB1.AD_Period_Ending_Date;

   // PAR.SDA G/L Code Dr = PAR.G/L Code Dr
   PAR.SDA_G_L_Code_Dr = PAR.G_L_Code_Dr;

   // PAR.SDA G/L Code Cr = PAR.G/L Code Cr
   PAR.SDA_G_L_Code_Cr = PAR.G_L_Code_Cr;

   // Call program Val G/L Act Cde 2 HPE XF.
   CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
   PARAMETER(PAR.Accounting_Company);
   PARAMETER(PAR.G_L_Code_Dr);
   PARAMETER(WRK.G_L_Code_Desc_USR);
   PARAMETER(PAR.SDA_JDE_Account_ID_Dr);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(LCL.Record_Found_USR);

   // Call program Val G/L Act Cde 2 HPE XF.
   CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
   PARAMETER(PAR.Accounting_Company);
   PARAMETER(PAR.G_L_Code_Cr);
   PARAMETER(WRK.G_L_Code_Desc_USR);
   PARAMETER(PAR.SDA_JDE_Account_ID_Cr);
   PARAMETER(*BLANK);
   PARAMETER(*BLANK);
   PARAMETER(LCL.Record_Found_USR);

   // PAR.SDA G/L Sub Ledger = DB1.AD Sub Ledger
   PAR.SDA_G_L_Sub_Ledger = DB1.AD_Sub_Ledger;

   // PAR.G/L Sub Account = PAR.G/L Sub Account Code
   PAR.G_L_Sub_Account = PAR.G_L_Sub_Account_Code;

   // WRK.Status - Y or N = CND.no
   WRK.Status_Y_or_N = 'N';

   //?If all products flag is no
   CASE;

   // IF PAR.All Products (Y/N) is No
   IF PAR.All_Products_Y_N = 'N';

   //?RTV: Accrual Rate & Type
   CASE;

   // IF PAR.Accrual Detail Search is Item
   IF PAR.Accrual_Detail_Search = 'I';

   EXECUTE FUNCTION(RTV & Chk Rate Exists  RT) TYPE(RTVOBJ) FILE(PMD3REP)          AC1892140;
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(DB1.AD_Program_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(WRK.Accrual_Rate_Type);
   PARAMETER(WRK.Accrual_Rate);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   //?Check if Rate > 0
   CASE;

   // IF PGM.*Return code is *Normal
   IF PGM.*Return_code = *BLANK;

   // AND WRK.Accrual Rate is Entered
   AND WRK.Accrual_Rate <> *ZERO;

   // WRK.Status - Y or N = CND.yes
   WRK.Status_Y_or_N = 'Y';

   ENDIF;

   ENDIF;

   //?12/15/10 PKD TFS: C1208 Only check the Customer Selection if
   //?             Product is applicable for the program.
   CASE;

   // IF WRK.Status - Y or N is yes
   IF WRK.Status_Y_or_N = 'Y';

   //?If all customers is no
   CASE;

   // IF DB1.AD All Customers is no
   IF DB1.AD_All_Customers = 'N';

   //?RTV: Ship To Customer and check status (skip if inactive)
   EXECUTE FUNCTION(RTV Acr Prod Pgm Cust RT) TYPE(RTVOBJ) FILE(PNFJREP)           AC1938164;
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(DB1.AD_Program_Number);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(WRK.Status_Y_or_N);
   {
    //?USER: Processing if Data record not found

    // PGM.*Record selected = CND.*NO
    PGM.*Record_selected = 'N';

    // PAR.Status - Y or N = CND.no
    PAR.Status_Y_or_N = 'N';

    //?USER: Process Data record

    CASE;

    // IF DB1.Record Status is Active
    IF DB1.Record_Status = 'A';

    // PGM.*Record selected = CND.*YES
    PGM.*Record_selected = 'Y';

    // PAR.Status - Y or N = CND.yes
    PAR.Status_Y_or_N = 'Y';

    ENDIF;

   }

   ENDIF;

   ENDIF;

   //?Calc Accrual
   CASE;

   // IF WRK.Status - Y or N is yes
   IF WRK.Status_Y_or_N = 'Y';

   // WRK.Error Status  2 = CND.No
   WRK.Error_Status_2 = 'N';

   EXECUTE FUNCTION(RTV Chk for Rvrs Accru RT) TYPE(RTVOBJ) FILE(OMCRWKP)          AC1337973;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(WRK.Error_Status_2);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Financial Type is Accrual Charge
    IF DB1.Financial_Type = 'A';

    EXECUTE FUNCTION(RTV Reverse Code       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1295589;
    PARAMETER(DB1.Accrual_Code);
    PARAMETER(WRK.Reverse_Accrual_Code);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF PAR.Accrual Code EQ WRK.Reverse Accrual Code
    IF PAR.Accrual_Code = WRK.Reverse_Accrual_Code;

    // PAR.Error Status  2 = CND.Yes
    PAR.Error_Status_2 = 'Y';

    QUIT;

    ENDIF;

    ENDIF;

   }

   CASE;

   // IF WRK.Error Status  2 is No
   IF WRK.Error_Status_2 = 'N';

   // WRK.Error Status  3 = CND.No
   WRK.Error_Status_3 = 'N';

   CASE;

   // IF WRK.Error Status  3 is No
   IF WRK.Error_Status_3 = 'N';

   //?Calculate Extended Amount (which is the Accrual Amount)
   //?E4057 JJH 04/29/15 - Rewrite Calc logic to utizile Affect Sales
   //? Pounds Status and Affect Sales Dollar Status
   //?Calc Accrual
   CASE;

   // IF WRK.Accrual Rate Type is $/Lb
   IF WRK.Accrual_Rate_Type = 'W';

   // AND PAR.Affect Sales Pnds Status is yes
   AND PAR.Affect_Sales_Pnds_Status = 'Y';

   // WRK.Extended Amount = WRK.Accrual Rate * PAR.Weight Shipped Total *
   WRK.Extended_Amount = WRK.Accrual_Rate * PAR.Weight_Shipped_Total;

   //?Calc Accrual
   //?Calc Accrual
   //?Change trans amount according to add-on/allowance flag
   // IF PAR.Add-on/Allowance is Allowance
   IF PAR.Add_on_Allowance = 'S';

   // AND PAR.Billing Activity Type is Invoice
   AND ( PAR.Billing_Activity_Type = '1';

   // OR PAR.Billing Activity Type is Debit Memo
   OR PAR.Billing_Activity_Type = '3' );

   // WRK.Extended Amount = CON.*ZERO - WRK.Extended Amount
   WRK.Extended_Amount = *ZERO - WRK.Extended_Amount;

   ENDIF;

   //?Change trans amount according to Credit Memo & Addon allow 4/14/10
   CASE;

   // IF PAR.Billing Activity Type is Credit Memo
   IF PAR.Billing_Activity_Type = '2';

   // AND PAR.Add-on/Allowance is Add-on
   AND PAR.Add_on_Allowance = 'A';

   // WRK.Extended Amount = CON.*ZERO - WRK.Extended Amount
   WRK.Extended_Amount = *ZERO - WRK.Extended_Amount;

   ENDIF;

   // PAR.Item Accrual Amt = WRK.Extended Amount
   PAR.Item_Accrual_Amt = WRK.Extended_Amount;

   // PAR.Sequence Number = PAR.Sequence Number + CON.1
   PAR.Sequence_Number = PAR.Sequence_Number + 1;

   //?E4057 JJH 04/27/15 - Populate: SDA Atch to Ord ActShpDt
   CASE;

   // IF WRK.Extended Amount is not equal to zeros
   IF WRK.Extended_Amount <> *ZERO;

   //?E4057 JJH 05/13/15 - Only crt record if Extended Amount NE 0
   EXECUTE FUNCTION(CRT OM Ship Dtl Accrul CR) TYPE(CRTOBJ) FILE(OMHRCPP)          AC1337844;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.Order_Sequence_Number);
   PARAMETER(PAR.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Sequence_Number);
   PARAMETER(WRK.Accrual_Rate);
   PARAMETER(WRK.Accrual_Percent);
   PARAMETER(WRK.Extended_Amount);
   PARAMETER(PAR.Item_Accrual_Amt);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.AR_Customer_Number);
   PARAMETER(LCL.Broker_Code);
   PARAMETER(PAR.Actual_Shipped_Date);
   PARAMETER(PAR.Weight_Shipped_Total);
   PARAMETER('Y');
   PARAMETER(PAR.Retro_Comm_Calculated);
   PARAMETER(PAR.Accrual_Type);
   PARAMETER(PAR.Affect_Sales_Realz_Rpt);
   PARAMETER(PAR.Affect_Invoice_Price);
   PARAMETER(PAR.Print_On_Invoice_Y_N);
   PARAMETER(PAR.Invoice_Print_Type);
   PARAMETER(PAR.SDA_Ord_Dtl_Acrl_Seq);
   PARAMETER(PAR.SDA_Atch_to_Ord_ActShpDt);
   PARAMETER(PAR.SDA_Unused_Amt_1);
   PARAMETER(PAR.SDA_Unused_Amt_2);
   PARAMETER(PAR.Post_to_G_L_Y_N);
   PARAMETER(WRK.Accrual_Rate_Type);
   PARAMETER(PAR.Invoice_Date);
   PARAMETER(PAR.Sub_Ledger_Code);
   PARAMETER(PAR.SDA_G_L_Sub_Ledger);
   PARAMETER(PAR.SDA_G_L_Code_Dr);
   PARAMETER(PAR.SDA_G_L_Code_Cr);
   PARAMETER(PAR.SDA_JDE_Account_ID_Dr);
   PARAMETER(PAR.SDA_JDE_Account_ID_Cr);
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(PAR.Sales_History_Exp_Bucket);
   PARAMETER(PAR.G_L_Sub_Account);
   PARAMETER(LCL.EDI_Status_1);
   PARAMETER(LCL.EDI_Status_2);
   PARAMETER(LCL.EDI_Status_3);
   PARAMETER(LCL.Job_Time);
   PARAMETER(LCL.User_Id);
   PARAMETER(LCL.Job_Name);
   PARAMETER(LCL.Job_Date);
   {
    //?USER: Processing before Data update

    // DB1.Job Time = JOB.*Job time
    DB1.Job_Time = JOB.*Job_time;

    // DB1.User Id = JOB.*USER
    DB1.User_Id = JOB.*USER;

    // DB1.Job Name = JOB.*JOB
    DB1.Job_Name = JOB.*JOB;

    // DB1.Job Date = JOB.*Job date
    DB1.Job_Date = JOB.*Job_date;

   }

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 //?*---------------------------------------------------------------*
 //?***** MAINTENANCE LOG: Customer Accrual
 DO;

 //?*---------------------------------------------------------------*
 //?* 09/28/00 PKD Added Ship To Customer as a Restrictor Parm.
 //?*              Added Scheduled Ship Date as an Input Parm.
 //?* 11/10/04 RMC Added par.quantity & weight & extended amt & abs frt parms
 //?* 11/10/04 RMC Create Trade Fund Accruals before commission
 //?* 08/15/05 RMC Rtv Broker from Cust Ext instead of Order, it may have chgd
 //?* 05/23/07 RMC DLY029 use broker from customer accrual file
 //?* 06/18/07 RMC DLY029 DO COMMISSION ACCRUAL LAST -- ALL OTHERS FIRST
 //?*   so read Cust Accrual in Ship to /Comm sts seq
 //?*   Comm Sts = 1 if not commission, and =9 if it is commission
 //?* 11/11/09 LJB E00513 Condition commission on Affect Commision flag:
 //?*   if NO then skip (don't write Shipping Dtl Accrual rec)
 //?* 12/03/09 PKD FP1322 Added Flat Amount Accrual Rate Type
 //?* 3/23/10 PKD E00648 upd accruals for db/cm
 //?* 4/14/10 RMC E00648 for db/cm look at addon allow flag
 //?06/26/14 PKD E3164 Send in Shipping Method as a parameter
 //?E4057 JJH 04/24/14
 //?- Add I parm for: SDA Atch to Ord ActShpDt
 //?- Add I parm for: Affect Sales Doll Status
 //?- Add I parm for: Affect Sales Pnds Status
 //?- Comment out logic for Affect Trade Fund & Affect Commission
 //?- Pass in OD Full Return to Plant from Order Detail.  This will
 //?  be used to update accurals for selected Flat Amount calculations.
 //?- Comment out logic for Accrual Rate Type that have never been used
 //?  Customer  (WR) $/LB by Weight Billed
 //?  Customer  (QR) $/Quantity by Qty Shipped
 //?  Customer  (SR) % ofNetSls by NetSls/Lb
 //?  Customer  (SS) % ofNetSls by NetSls/Month
 //?  Customer  (FA) Flat Amount
 //?- Remove logic for Invoices only on Customer Accural.  Customer
 //?  will now process Invoices, Credit Memos, and Debit Memos.
 ENDDO;

 EXECUTE FUNCTION(RTV Write Accrual Rcd RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1222494;
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(1);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.U_M_Ordered);
 PARAMETER(DB1.Quantity_Shipped_Total);
 PARAMETER(DB1.Weight_Shipped_Total);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Affect_Sales_Doll_Status);
 PARAMETER(DB1.Affect_Sales_Pnds_Status);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Affect_Trade_Fund);
 PARAMETER(DB1.Affect_Commission);
 PARAMETER(DB1.OD_Clm_Full_Return_to_Plt);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(PAR.Invoice_Date);
 PARAMETER(PAR.Billing_Activity_Type);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(LCL.SDA_Atch_to_Ord_ActShpDt);
 PARAMETER(PAR.Extended_Amt_Total);
 PARAMETER(PAR.Quantity_Total_S);
 PARAMETER(PAR.Weight_Total_13_2_USR);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Process Data record

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  //?E4057 JJH 05/13/15 - Reset Extended Amount to Zero
  // WRK.Extended Amount = CND.equal to zero
  WRK.Extended_Amount = *ZERO;

  EXECUTE FUNCTION(Rtv Accr Prog EXT     RT) TYPE(RTVOBJ) FILE(PBAMREP)           AC2048357;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(NLL.G_L_Account_Category);
  PARAMETER(LCL.APE_Excl_Collect_ShpMthd);
  PARAMETER(NLL.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?OMIT:  Shipping Method = Collect Rail or Truck
  CASE;

  // IF LCL.APE Excl Collect ShpMthd is Yes
  IF LCL.APE_Excl_Collect_ShpMthd = 'Y';

  // AND PAR.Shipping Method is Collect
  AND PAR.Shipping_Method = 'CR'/'CT';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  // PAR.Retro Comm Calculated = CND.blank
  PAR.Retro_Comm_Calculated = *BLANK;

  //?E4057 JJH 04/24/14 - Revised logic for Actual Ship Date
  //?Process Accrual Program
  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  CASE;

  // IF PAR.Billing Activity Type is Credit or Debit Memo
  IF PAR.Billing_Activity_Type = '2'/'3';

  // AND PAR.SDA Atch to Ord ActShpDt is entered
  AND PAR.SDA_Atch_to_Ord_ActShpDt <> *ZERO;

  // LCL.Actual Shipped Date = PAR.SDA Atch to Ord ActShpDt
  LCL.Actual_Shipped_Date = PAR.SDA_Atch_to_Ord_ActShpDt;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Actual Shipped Date = PAR.Actual Shipped Date
  LCL.Actual_Shipped_Date = PAR.Actual_Shipped_Date;

  ENDIF;

  //?E4057 JJH 04/24/14 - Utilize LCL.Actual Ship Date
  //?Actual Ship Date between Priod Begin & Period End Date
  CASE;

  // IF LCL.Actual Shipped Date GE DB1.Period Beginning Date
  IF LCL.Actual_Shipped_Date >= DB1.Period_Beginning_Date;

  // AND LCL.Actual Shipped Date LE DB1.Period Ending Date
  AND LCL.Actual_Shipped_Date <= DB1.Period_Ending_Date;

  EXECUTE FUNCTION(RTV All Values Act NEW RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1823808;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.Accrual_Description);
  PARAMETER(PAR.Automatic_Accrual_Y_N);
  PARAMETER(PAR.Print_On_Invoice_Y_N);
  PARAMETER(PAR.Rate_Usage);
  PARAMETER(PAR.Add_on_Allowance);
  PARAMETER(PAR.Accrual_Type);
  PARAMETER(PAR.Sub_Ledger_Code);
  PARAMETER(PAR.Reverse_Accrual_Code);
  PARAMETER(PAR.UOM_Primary_Dft);
  PARAMETER(PAR.G_L_Code_Dr);
  PARAMETER(PAR.G_L_Code_Cr);
  PARAMETER(PAR.G_L_Sub_Account_Code);
  PARAMETER(PAR.Sales_History_Exp_Bucket);
  PARAMETER(PAR.Post_to_G_L_Y_N);
  PARAMETER(PAR.Accrual_Rate_Type);
  PARAMETER(PAR.Affect_Sales_Realz_Rpt);
  PARAMETER(PAR.Affect_Invoice_Price);
  PARAMETER(PAR.Invoice_Print_Type);
  {
   //?USER: Initialize routine

   //?RMC DLY029 5/23/07 Db Change - this outputs the new fields
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.SDA G/L Code Dr = PAR.G/L Code Dr
  PAR.SDA_G_L_Code_Dr = PAR.G_L_Code_Dr;

  // PAR.SDA G/L Code Cr = PAR.G/L Code Cr
  PAR.SDA_G_L_Code_Cr = PAR.G_L_Code_Cr;

  // Call program Val G/L Act Cde 2 HPE XF.
  CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
  PARAMETER(PAR.Accounting_Company);
  PARAMETER(PAR.G_L_Code_Dr);
  PARAMETER(WRK.G_L_Code_Desc_USR);
  PARAMETER(PAR.SDA_JDE_Account_ID_Dr);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Record_Found_USR);

  // Call program Val G/L Act Cde 2 HPE XF.
  CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
  PARAMETER(PAR.Accounting_Company);
  PARAMETER(PAR.G_L_Code_Cr);
  PARAMETER(WRK.G_L_Code_Desc_USR);
  PARAMETER(PAR.SDA_JDE_Account_ID_Cr);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Record_Found_USR);

  EXECUTE FUNCTION(G/L Sub Ledger DRV) TYPE(DRVFLD)                               AC1830688;
  PARAMETER(PAR.SDA_G_L_Sub_Ledger);
  PARAMETER(PAR.Sub_Ledger_Code);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Broker_Code);
  {
   //?Calculate derived field

   //?A/R Customer
   CASE;

   // IF PAR.Sub Ledger Code is A/R Customer
   IF PAR.Sub_Ledger_Code = 'A';

   EXECUTE FUNCTION(Rtv g/l Vendor        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1680257;
   PARAMETER(PAR.AR_Customer_Number);
   PARAMETER(PAR.G_L_Sub_Ledger_DRV);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   //?Ship To Customer
   CASE;

   // IF PAR.Sub Ledger Code is Ship To Customer
   IF PAR.Sub_Ledger_Code = 'S';

   EXECUTE FUNCTION(Rtv g/l Vendor        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1680257;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.G_L_Sub_Ledger_DRV);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   //?Broker
   CASE;

   // IF PAR.Sub Ledger Code is Broker
   IF PAR.Sub_Ledger_Code = 'B';

   // OR PAR.Sub Ledger Code is Buyer Group
   OR PAR.Sub_Ledger_Code = 'G';

   EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
   PARAMETER(PAR.Broker_Code);
   PARAMETER(LCL.Broker_Name);
   PARAMETER(LCL.Broker_Address_Line_1);
   PARAMETER(LCL.Broker_Address_Line_2);
   PARAMETER(LCL.Broker_City);
   PARAMETER(LCL.Broker_State);
   PARAMETER(LCL.Broker_Zip);
   PARAMETER(LCL.Broker_Office_Manager);
   PARAMETER(LCL.Broker_Telephone_Number);
   PARAMETER(LCL.Broker_Fax_Number);
   PARAMETER(LCL.Broker_Email_Address);
   PARAMETER(PAR.G_L_Sub_Ledger_DRV);
   PARAMETER(LCL.Salesperson_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // PAR.G/L Sub Account = PAR.G/L Sub Account Code
  PAR.G_L_Sub_Account = PAR.G_L_Sub_Account_Code;

  //?E4057 JJH 04/29/15 - Rewrite Calc logic to utizile Affect Sales
  //? Pounds Status and Affect Sales Dollar Status
  //?Determine Rate & Calculate Accrual Amount
  CASE;

  // IF PAR.Automatic Accrual (Y/N) is Yes
  IF PAR.Automatic_Accrual_Y_N = 'Y';

  //?E4057 JJH 05/04/15 - Revised logic for Accrual Rates
  //?Accrual Type is : Not Commission - same as Commission now DLY029 8/09/07
  CASE;

  // IF DB1.Commission/Not Comm Sts is Not Commission
  IF DB1.Commission_Not_Comm_Sts = '1';

  // WRK.Status - Y or N = CND.no
  WRK.Status_Y_or_N = 'N';

  //?If all products is Yes
  CASE;

  // IF DB1.All Products (Y/N) is Yes
  IF DB1.All_Products_Y_N = 'Y';

  // WRK.Status - Y or N = CND.yes
  WRK.Status_Y_or_N = 'Y';

  //?Accrual Rate
  CASE;

  // IF DB1.Accrual Rate Type is All Sales
  IF DB1.Accrual_Rate_Type = 'W'/'S'/'Q'/'G'/'FA';

  //?RMC 08/09/07 add "G" (% of gross ext amt) to All Sales condition
  // WRK.Accrual Rate = DB1.Accrual Rate
  WRK.Accrual_Rate = DB1.Accrual_Rate;

  // WRK.Accrual Rate Type = DB1.Accrual Rate Type
  WRK.Accrual_Rate_Type = DB1.Accrual_Rate_Type;

  //?Accrual Rate
  //?Accrual Rate
  // IF DB1.Accrual Rate Type is NetSls-3rdParty Adj
  IF DB1.Accrual_Rate_Type = 'SA';

  //?E4057 JJH 05/04/15 - Per Purva Droge, Leave as is because this is
  //?  NOT affected by Customer Accrual.
  //?** Exclude 3rd Party Sales Adjustments      FP1314 LJB
  // WRK.Status - Y or N = CND.no
  WRK.Status_Y_or_N = 'N';

  //?Accrual Rate
  // IF DB1.Accrual Rate Type is Flat Order Amount
  IF DB1.Accrual_Rate_Type = 'FO';

  //?E4057 JJH 05/04/15 - Revised logic for Flat Load Amount
  //?Process by Billing Activity Type
  CASE;

  // IF PAR.Billing Activity Type is Invoice
  IF PAR.Billing_Activity_Type = '1';

  // OR PAR.Billing Activity Type is Credit Memo
  OR ( PAR.Billing_Activity_Type = '2';

  // AND PAR.OD Full Return to Plant is Yes
  AND PAR.OD_Clm_Full_Return_to_Plt = 'Y' );

  EXECUTE FUNCTION(Val Accrual Exists    RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1957641;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

  }

  CASE;

  // IF LCL.Record Found USR is Record Not Found
  IF LCL.Record_Found_USR = 'N';

  // WRK.Accrual Rate = DB1.Accrual Rate
  WRK.Accrual_Rate = DB1.Accrual_Rate;

  // WRK.Accrual Rate Type = DB1.Accrual Rate Type
  WRK.Accrual_Rate_Type = DB1.Accrual_Rate_Type;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Status - Y or N = CND.no
  WRK.Status_Y_or_N = 'N';

  ENDIF;

  //?Process by Billing Activity Type
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Status - Y or N = CND.no
  WRK.Status_Y_or_N = 'N';

  ENDIF;

  //?Accrual Rate
  // IF DB1.Accrual Rate Type is Flat Load Amount
  IF DB1.Accrual_Rate_Type = 'FL';

  //?E4057 JJH 05/04/15 - Revised logic for Flat Load Amount
  //?Process by Billing Activity Type
  CASE;

  // IF PAR.Billing Activity Type is Invoice
  IF ( PAR.Billing_Activity_Type = '1';

  // AND PAR.Load ID is NE Blank
  AND PAR.Load_ID <> *ZERO );

  // OR PAR.Billing Activity Type is Credit Memo
  OR ( PAR.Billing_Activity_Type = '2';

  // AND PAR.OD Full Return to Plant is Yes
  AND PAR.OD_Clm_Full_Return_to_Plt = 'Y' );

  CASE;

  // IF PAR.Billing Activity Type is Invoice
  IF PAR.Billing_Activity_Type = '1';

  EXECUTE FUNCTION(Val Accrual Exists    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1957652;
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.Accrual_Type);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   EXECUTE FUNCTION(Val Accrual Exists    RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1957641;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Accrual_Code);
   PARAMETER(LCL.Record_Found_USR);
   {
    //?USER: Initialize routine

    // PAR.Record Found USR = CND.Record Not Found
    PAR.Record_Found_USR = 'N';

    //?USER: Process Data record

    // PAR.Record Found USR = CND.Record Found
    PAR.Record_Found_USR = 'Y';

    QUIT;

   }

   CASE;

   // IF LCL.Record Found USR is Record Found
   IF LCL.Record_Found_USR = 'Y';

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

   ENDIF;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Val Accrual Exists    RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1957641;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

  }

  ENDIF;

  CASE;

  // IF LCL.Record Found USR is Record Not Found
  IF LCL.Record_Found_USR = 'N';

  // WRK.Accrual Rate = DB1.Accrual Rate
  WRK.Accrual_Rate = DB1.Accrual_Rate;

  // WRK.Accrual Rate Type = DB1.Accrual Rate Type
  WRK.Accrual_Rate_Type = DB1.Accrual_Rate_Type;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Status - Y or N = CND.no
  WRK.Status_Y_or_N = 'N';

  ENDIF;

  //?Process by Billing Activity Type
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Status - Y or N = CND.no
  WRK.Status_Y_or_N = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  //?If all products flag is no/yes+exceptions, check for item exists
  CASE;

  // IF DB1.All Products (Y/N) is No
  IF DB1.All_Products_Y_N = 'N';

  //?RTV: Accrual Rate
  CASE;

  // IF DB1.Accrual Detail Search is Item
  IF DB1.Accrual_Detail_Search = 'I';

  EXECUTE FUNCTION(RTV & Chk Rate Exists  RT) TYPE(RTVOBJ) FILE(OMHPREP)          AC1222497;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Code);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  //?RTV: Accrual Rate
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Check for item str type/group without the class  RMC 08/07/07
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Check for item str type/group without the class  RMC 08/07/07
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  ENDIF;

  ENDIF;

  //?05/09/08 PKD/SZ Only calculate the Accrual if Rate > 0
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND WRK.Accrual Rate is Entered
  AND WRK.Accrual_Rate <> *ZERO;

  // WRK.Status - Y or N = CND.yes
  WRK.Status_Y_or_N = 'Y';

  ENDIF;

  //?If all products flag is no/yes+exceptions, check for item exists
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If Yes + Exc
  CASE;

  // IF DB1.All Products (Y/N) is Yes + Exceptions
  IF DB1.All_Products_Y_N = 'X';

  //?RTV: Accrual Rate
  CASE;

  // IF DB1.Accrual Detail Search is Item
  IF DB1.Accrual_Detail_Search = 'I';

  EXECUTE FUNCTION(RTV & Chk Rate Exists  RT) TYPE(RTVOBJ) FILE(OMHPREP)          AC1222497;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Code);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  //?RTV: Accrual Rate
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Check for item str type/group without the class  RMC 08/07/07
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Check for item str type/group without the class  RMC 08/07/07
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  ENDIF;

  ENDIF;

  //?Calcualte only if Rate exists
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // WRK.Status - Y or N = CND.yes
  WRK.Status_Y_or_N = 'Y';

  //?11/26/02 Exception may exist as 0 -- then dont calc accrual
  CASE;

  // IF WRK.Accrual Rate is equal to zero
  IF WRK.Accrual_Rate = *ZERO;

  // WRK.Status - Y or N = CND.no
  WRK.Status_Y_or_N = 'N';

  ENDIF;

  //?Calcualte only if Rate exists
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Accrual Rate = DB1.Accrual Rate
  WRK.Accrual_Rate = DB1.Accrual_Rate;

  // WRK.Status - Y or N = CND.yes
  WRK.Status_Y_or_N = 'Y';

  // WRK.Accrual Rate Type = DB1.Accrual Rate Type
  WRK.Accrual_Rate_Type = DB1.Accrual_Rate_Type;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Calc Accrual
  CASE;

  // IF WRK.Status - Y or N is yes
  IF WRK.Status_Y_or_N = 'Y';

  // WRK.Error Status  2 = CND.No
  WRK.Error_Status_2 = 'N';

  EXECUTE FUNCTION(RTV Chk for Rvrs Accru RT) TYPE(RTVOBJ) FILE(OMCRWKP)          AC1337973;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(WRK.Error_Status_2);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Financial Type is Accrual Charge
   IF DB1.Financial_Type = 'A';

   EXECUTE FUNCTION(RTV Reverse Code       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1295589;
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(WRK.Reverse_Accrual_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Accrual Code EQ WRK.Reverse Accrual Code
   IF PAR.Accrual_Code = WRK.Reverse_Accrual_Code;

   // PAR.Error Status  2 = CND.Yes
   PAR.Error_Status_2 = 'Y';

   QUIT;

   ENDIF;

   ENDIF;

  }

  //?Calc Accrual
  CASE;

  // IF WRK.Error Status  2 is No
  IF WRK.Error_Status_2 = 'N';

  // WRK.Error Status  3 = CND.No
  WRK.Error_Status_3 = 'N';

  CASE;

  // IF WRK.Error Status  3 is No
  IF WRK.Error_Status_3 = 'N';

  //?Calculate Extended Amount (which is the Accrual Amount)
  //?E4057 JJH 05/04/15 - Revised logic for Accrual Rates
  //?Calc Accrual
  CASE;

  // IF WRK.Accrual Rate Type is $/Lb
  IF WRK.Accrual_Rate_Type = 'W';

  // AND PAR.Affect Sales Pnds Status is yes
  AND PAR.Affect_Sales_Pnds_Status = 'Y';

  // WRK.Extended Amount = WRK.Accrual Rate * PAR.Weight Shipped Total *
  WRK.Extended_Amount = WRK.Accrual_Rate * PAR.Weight_Shipped_Total;

  //?Calc Accrual
  //?Calc Accrual
  // IF WRK.Accrual Rate Type is $/Quantity
  IF WRK.Accrual_Rate_Type = 'Q';

  // AND PAR.Affect Sales Pnds Status is yes
  AND PAR.Affect_Sales_Pnds_Status = 'Y';

  // WRK.Extended Amount = WRK.Accrual Rate * PAR.Quantity Shipped Total *
  WRK.Extended_Amount = WRK.Accrual_Rate * PAR.Quantity_Shipped_Total;

  //?Calc Accrual
  //?Calc Accrual
  // IF WRK.Accrual Rate Type is % of Net Sales
  IF WRK.Accrual_Rate_Type = 'S';

  // AND PAR.Affect Sales Doll Status is yes
  AND PAR.Affect_Sales_Doll_Status = 'Y';

  //?(RMC Added check for "SS" for new Seidai contract)
  //?Accr Amount = order dtl extended amt - TF Accruals - Absorbed Frt
  EXECUTE FUNCTION(Rtv TF accrl total    RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1712164;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(1);
  PARAMETER(WRK.Total_Amount);
  {
   //?USER: Initialize routine

   // PAR.Total Amount = CON.*ZERO
   PAR.Total_Amount = *ZERO;

   //?USER: Process Data record

   //?11/13/03 Accum Trade Fund Accruals only ...   PK0519
   //?06/18/07 Chg CASE to select Affect Invoice price=Y    DLY029
   CASE;

   // IF DB1.SDA Affect Invoice Price is Yes
   IF DB1.SDA_Affect_Invoice_Price = 'Y';

   // PAR.Total Amount = PAR.Total Amount + DB1.Extended Amount
   PAR.Total_Amount = PAR.Total_Amount + DB1.Extended_Amount;

   ENDIF;

  }

  //?Calculate Absorbed Freight Amount
  // WRK.*Synon (15,5) work field = PAR.Absorbed Freight Rate / CON.100 *Rounded
  WRK.*Synon_155_work_field = PAR.Absorbed_Freight_Rate_CWT / 100 'H';

  // WRK.Absorbed Freight Amount = PAR.Weight Shipped Total * WRK.*Synon (15,5) work field *Rounded
  WRK.Absorbed_Freight_Amount = PAR.Weight_Shipped_Total * WRK.*Synon_155_work_field 'H';

  // Compute: Accr Amt f/Sales
  WRK.Extended_Amount = ( ( PAR.Extended_Amount - WRK.Total_Amount )
  - WRK.Absorbed_Freight_Amount ) * WRK.Accrual_Rate;

  //?Calc Accrual
  //?Calc Accrual
  // IF WRK.Accrual Rate Type is % of Gross Extended Amt
  IF WRK.Accrual_Rate_Type = 'G';

  // AND PAR.Affect Sales Doll Status is yes
  AND PAR.Affect_Sales_Doll_Status = 'Y';

  //?Accrual = gross extended amt from Order dtl * accrual rate
  // WRK.Extended Amount
  WRK.Extended_Amount = ( WRK.Accrual_Rate * PAR.Extended_Amount 'H' ) / 100 'H';

  //?E4057 JJH 06/04/15 - Correction for Flat Load Amount & Invoice
  //?Calc Accrual
  // IF WRK.Accrual Rate Type is Flat Load Amount
  IF ( WRK.Accrual_Rate_Type = 'FL';

  // AND PAR.Billing Activity Type is Credit Memo
  AND PAR.Billing_Activity_Type = '2';

  // AND PAR.OD Full Return to Plant is Yes
  AND PAR.OD_Clm_Full_Return_to_Plt = 'Y' );

  // OR WRK.Accrual Rate Type is Flat Load Amount
  OR ( WRK.Accrual_Rate_Type = 'FL';

  // AND PAR.Billing Activity Type is Invoice
  AND PAR.Billing_Activity_Type = '1' );

  // WRK.Extended Amount = WRK.Accrual Rate
  WRK.Extended_Amount = WRK.Accrual_Rate;

  //?Calc Accrual
  //?Calc Accrual
  //?Change trans amount according to add-on/allowance flag
  // IF PAR.Add-on/Allowance is Allowance
  IF PAR.Add_on_Allowance = 'S';

  // AND PAR.Billing Activity Type is Invoice
  AND ( PAR.Billing_Activity_Type = '1';

  // OR PAR.Billing Activity Type is Debit Memo
  OR PAR.Billing_Activity_Type = '3' );

  // WRK.Extended Amount = CON.*ZERO - WRK.Extended Amount
  WRK.Extended_Amount = *ZERO - WRK.Extended_Amount;

  ENDIF;

  //?Change trans amount according to Credit Memo & Addon allow  4/14/10
  CASE;

  // IF PAR.Billing Activity Type is Credit Memo
  IF PAR.Billing_Activity_Type = '2';

  // AND PAR.Add-on/Allowance is Add-on
  AND PAR.Add_on_Allowance = 'A';

  // WRK.Extended Amount = CON.*ZERO - WRK.Extended Amount
  WRK.Extended_Amount = *ZERO - WRK.Extended_Amount;

  ENDIF;

  // PAR.Item Accrual Amt = WRK.Extended Amount
  PAR.Item_Accrual_Amt = WRK.Extended_Amount;

  // PAR.Sequence Number = PAR.Sequence Number + CON.1
  PAR.Sequence_Number = PAR.Sequence_Number + 1;

  //?db1.accrual percent changed to wrk. context    10/13
  //?db1.company changed to par. context    10/22/04
  //?RMC DLY029 5/23/07 output new fields
  //?** Don't create the record if the accrual amount = zeros  FP1314
  CASE;

  // IF WRK.Extended Amount is not equal to zeros
  IF WRK.Extended_Amount <> *ZERO;

  //?E4057 JJH 04/27/15 - Populate: SDA Atch to Ord ActShpDt
  EXECUTE FUNCTION(CRT OM Ship Dtl Accrul CR) TYPE(CRTOBJ) FILE(OMHRCPP)          AC1337844;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Percent);
  PARAMETER(WRK.Extended_Amount);
  PARAMETER(PAR.Item_Accrual_Amt);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER('Y');
  PARAMETER(PAR.Retro_Comm_Calculated);
  PARAMETER(PAR.Accrual_Type);
  PARAMETER(PAR.Affect_Sales_Realz_Rpt);
  PARAMETER(PAR.Affect_Invoice_Price);
  PARAMETER(PAR.Print_On_Invoice_Y_N);
  PARAMETER(PAR.Invoice_Print_Type);
  PARAMETER(PAR.SDA_Ord_Dtl_Acrl_Seq);
  PARAMETER(PAR.SDA_Atch_to_Ord_ActShpDt);
  PARAMETER(PAR.SDA_Unused_Amt_1);
  PARAMETER(PAR.SDA_Unused_Amt_2);
  PARAMETER(PAR.Post_to_G_L_Y_N);
  PARAMETER(WRK.Accrual_Rate_Type);
  PARAMETER(PAR.Invoice_Date);
  PARAMETER(PAR.Sub_Ledger_Code);
  PARAMETER(PAR.SDA_G_L_Sub_Ledger);
  PARAMETER(PAR.SDA_G_L_Code_Dr);
  PARAMETER(PAR.SDA_G_L_Code_Cr);
  PARAMETER(PAR.SDA_JDE_Account_ID_Dr);
  PARAMETER(PAR.SDA_JDE_Account_ID_Cr);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.Sales_History_Exp_Bucket);
  PARAMETER(PAR.G_L_Sub_Account);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?E4057 JJH 05/04/15 - Revised logic for Accrual Rates
  //?E4057 JJH 05/04/15 - Remove logic for Invoices only on Customer
  //?  Accrual. Will now process all Billing Types to include Invoices,
  //?  Credit Memos, and Debit Memos.
  //?Accrual Type is : Commission
  CASE;

  // IF DB1.Commission/Not Comm Sts is Commission
  IF DB1.Commission_Not_Comm_Sts = '9';

  // AND DB1.Broker Code is Entered
  AND DB1.Broker_Code <> *BLANK;

  //?RMC 4/13/05 check for broker code too before calc'ing.
  // WRK.Status - Y or N = CND.no
  WRK.Status_Y_or_N = 'N';

  //?If all products is Yes
  CASE;

  // IF DB1.All Products (Y/N) is Yes
  IF DB1.All_Products_Y_N = 'Y';

  // WRK.Status - Y or N = CND.yes
  WRK.Status_Y_or_N = 'Y';

  CASE;

  // IF DB1.Accrual Rate Type is All Sales
  IF DB1.Accrual_Rate_Type = 'W'/'S'/'Q'/'G'/'FA';

  //?RMC 08/09/07 add "G" (% of gross ext amt) to All Sales condition
  // WRK.Accrual Rate = DB1.Accrual Rate
  WRK.Accrual_Rate = DB1.Accrual_Rate;

  // WRK.Accrual Rate Type = DB1.Accrual Rate Type
  WRK.Accrual_Rate_Type = DB1.Accrual_Rate_Type;

  // IF DB1.Accrual Rate Type is Flat Load Amount
  IF DB1.Accrual_Rate_Type = 'FL';

  //?RMC Added 9-24-20
  //?Process by Billing Activity Type
  CASE;

  // IF PAR.Billing Activity Type is Invoice
  IF PAR.Billing_Activity_Type = '1';

  // AND PAR.Load ID is NE Blank
  AND PAR.Load_ID <> *ZERO;

  EXECUTE FUNCTION(Val Accrual Exists    RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1957652;
  PARAMETER(PAR.Load_ID);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.Accrual_Type);
  PARAMETER(LCL.Record_Found_USR);
  {
   //?USER: Initialize routine

   // PAR.Record Found USR = CND.Record Not Found
   PAR.Record_Found_USR = 'N';

   //?USER: Process Data record

   EXECUTE FUNCTION(Val Accrual Exists    RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1957641;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(PAR.Accrual_Code);
   PARAMETER(LCL.Record_Found_USR);
   {
    //?USER: Initialize routine

    // PAR.Record Found USR = CND.Record Not Found
    PAR.Record_Found_USR = 'N';

    //?USER: Process Data record

    // PAR.Record Found USR = CND.Record Found
    PAR.Record_Found_USR = 'Y';

    QUIT;

   }

   CASE;

   // IF LCL.Record Found USR is Record Found
   IF LCL.Record_Found_USR = 'Y';

   // PAR.Record Found USR = CND.Record Found
   PAR.Record_Found_USR = 'Y';

   QUIT;

   ENDIF;

  }

  CASE;

  // IF LCL.Record Found USR is Record Not Found
  IF LCL.Record_Found_USR = 'N';

  // WRK.Accrual Rate = DB1.Accrual Rate
  WRK.Accrual_Rate = DB1.Accrual_Rate;

  // WRK.Accrual Rate Type = DB1.Accrual Rate Type
  WRK.Accrual_Rate_Type = DB1.Accrual_Rate_Type;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Status - Y or N = CND.no
  WRK.Status_Y_or_N = 'N';

  // WRK.Accrual Rate = CON.*ZERO
  WRK.Accrual_Rate = *ZERO;

  // WRK.Accrual Rate Type = CND.*NONE
  WRK.Accrual_Rate_Type = *BLANK;

  ENDIF;

  //?Process by Billing Activity Type
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Status - Y or N = CND.no
  WRK.Status_Y_or_N = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  //?If all products flag is no/yes+exceptions, check for item exists
  CASE;

  // IF DB1.All Products (Y/N) is No
  IF DB1.All_Products_Y_N = 'N';

  CASE;

  // IF DB1.Accrual Detail Search is Item
  IF DB1.Accrual_Detail_Search = 'I';

  EXECUTE FUNCTION(RTV & Chk Rate Exists  RT) TYPE(RTVOBJ) FILE(OMHPREP)          AC1222497;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Code);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Check for item str type/group without the class  RMC 08/07/07
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Check for item str type/group without the class  RMC 08/07/07
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  ENDIF;

  ENDIF;

  //?05/09/08 PKD/SZ Only calculate the Accrual if Rate > 0
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // AND WRK.Accrual Rate is Entered
  AND WRK.Accrual_Rate <> *ZERO;

  // WRK.Status - Y or N = CND.yes
  WRK.Status_Y_or_N = 'Y';

  ENDIF;

  //?If all products flag is no/yes+exceptions, check for item exists
  // IF *OTHERWISE
  IF *OTHERWISE;

  //?If Yes + Exc
  CASE;

  // IF DB1.All Products (Y/N) is Yes + Exceptions
  IF DB1.All_Products_Y_N = 'X';

  CASE;

  // IF DB1.Accrual Detail Search is Item
  IF DB1.Accrual_Detail_Search = 'I';

  EXECUTE FUNCTION(RTV & Chk Rate Exists  RT) TYPE(RTVOBJ) FILE(OMHPREP)          AC1222497;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Code);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Check for item str type/group without the class  RMC 08/07/07
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Check for item str type/group without the class  RMC 08/07/07
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(*ZERO);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  ENDIF;

  ENDIF;

  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  // WRK.Status - Y or N = CND.yes
  WRK.Status_Y_or_N = 'Y';

  //?11/26/02 Exception may exist as 0 -- then dont calc accrual
  CASE;

  // IF WRK.Accrual Rate is equal to zero
  IF WRK.Accrual_Rate = *ZERO;

  // WRK.Status - Y or N = CND.no
  WRK.Status_Y_or_N = 'N';

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Accrual Rate = DB1.Accrual Rate
  WRK.Accrual_Rate = DB1.Accrual_Rate;

  // WRK.Status - Y or N = CND.yes
  WRK.Status_Y_or_N = 'Y';

  // WRK.Accrual Rate Type = DB1.Accrual Rate Type
  WRK.Accrual_Rate_Type = DB1.Accrual_Rate_Type;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Calc Accrual
  CASE;

  // IF WRK.Status - Y or N is yes
  IF WRK.Status_Y_or_N = 'Y';

  // WRK.Error Status  2 = CND.No
  WRK.Error_Status_2 = 'N';

  EXECUTE FUNCTION(RTV Chk for Rvrs Accru RT) TYPE(RTVOBJ) FILE(OMCRWKP)          AC1337973;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(WRK.Error_Status_2);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Financial Type is Accrual Charge
   IF DB1.Financial_Type = 'A';

   EXECUTE FUNCTION(RTV Reverse Code       RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1295589;
   PARAMETER(DB1.Accrual_Code);
   PARAMETER(WRK.Reverse_Accrual_Code);
   {
    //?USER: Processing if Data record not found

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF PAR.Accrual Code EQ WRK.Reverse Accrual Code
   IF PAR.Accrual_Code = WRK.Reverse_Accrual_Code;

   // PAR.Error Status  2 = CND.Yes
   PAR.Error_Status_2 = 'Y';

   QUIT;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF WRK.Error Status  2 is No
  IF WRK.Error_Status_2 = 'N';

  // WRK.Error Status  3 = CND.No
  WRK.Error_Status_3 = 'N';

  CASE;

  // IF WRK.Error Status  3 is No
  IF WRK.Error_Status_3 = 'N';

  //?Calculate Extended Amount (which is the Accrual Amount)
  //?4/13/05 Use wrk.accrual rate type since it may come from the item level.
  //?EXPCOM 11/10/04 RMC - New for exp commission And different Rate types
  //?Calc Accrual
  CASE;

  // IF WRK.Accrual Rate Type is $/Lb
  IF WRK.Accrual_Rate_Type = 'W';

  // AND PAR.Affect Sales Pnds Status is yes
  AND PAR.Affect_Sales_Pnds_Status = 'Y';

  // WRK.Extended Amount = WRK.Accrual Rate * PAR.Weight Shipped Total *
  WRK.Extended_Amount = WRK.Accrual_Rate * PAR.Weight_Shipped_Total;

  //?Calc Accrual
  //?Calc Accrual
  // IF WRK.Accrual Rate Type is $/Quantity
  IF WRK.Accrual_Rate_Type = 'Q';

  // AND PAR.Affect Sales Pnds Status is yes
  AND PAR.Affect_Sales_Pnds_Status = 'Y';

  // WRK.Extended Amount = WRK.Accrual Rate * PAR.Quantity Shipped Total *
  WRK.Extended_Amount = WRK.Accrual_Rate * PAR.Quantity_Shipped_Total;

  //?Calc Accrual
  //?Calc Accrual
  // IF WRK.Accrual Rate Type is % of Net Sales
  IF WRK.Accrual_Rate_Type = 'S';

  // AND PAR.Affect Sales Doll Status is yes
  AND PAR.Affect_Sales_Doll_Status = 'Y';

  //?(RMC Added check for "SS" for new Seidai contract)
  //?Accr Amount = order dtl extended amt - TF Accruals - Absorbed Frt
  EXECUTE FUNCTION(Rtv TF accrl total    RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1712164;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(1);
  PARAMETER(WRK.Total_Amount);
  {
   //?USER: Initialize routine

   // PAR.Total Amount = CON.*ZERO
   PAR.Total_Amount = *ZERO;

   //?USER: Process Data record

   //?11/13/03 Accum Trade Fund Accruals only ...   PK0519
   //?06/18/07 Chg CASE to select Affect Invoice price=Y    DLY029
   CASE;

   // IF DB1.SDA Affect Invoice Price is Yes
   IF DB1.SDA_Affect_Invoice_Price = 'Y';

   // PAR.Total Amount = PAR.Total Amount + DB1.Extended Amount
   PAR.Total_Amount = PAR.Total_Amount + DB1.Extended_Amount;

   ENDIF;

  }

  //?Calculate Absorbed Freight Amount
  // WRK.*Synon (15,5) work field = PAR.Absorbed Freight Rate / CON.100 *Rounded
  WRK.*Synon_155_work_field = PAR.Absorbed_Freight_Rate_CWT / 100 'H';

  // WRK.Absorbed Freight Amount = PAR.Weight Shipped Total * WRK.*Synon (15,5) work field *Rounded
  WRK.Absorbed_Freight_Amount = PAR.Weight_Shipped_Total * WRK.*Synon_155_work_field 'H';

  // Compute: Accr Amt f/Sales
  WRK.Extended_Amount = ( ( PAR.Extended_Amount - WRK.Total_Amount )
  - WRK.Absorbed_Freight_Amount ) * WRK.Accrual_Rate;

  //?Calc Accrual
  //?Calc Accrual
  // IF WRK.Accrual Rate Type is % of Gross Extended Amt
  IF WRK.Accrual_Rate_Type = 'G';

  // AND PAR.Affect Sales Doll Status is yes
  AND PAR.Affect_Sales_Doll_Status = 'Y';

  //?Accrual = gross extended amt from Order dtl * accrual rate
  // WRK.Extended Amount = WRK.Accrual Rate * PAR.Extended Amount *
  WRK.Extended_Amount = WRK.Accrual_Rate * PAR.Extended_Amount;

  //?E4057 JJH 06/04/15 - Correction for Flat Load Amount & Invoice
  //?Calc Accrual
  // IF WRK.Accrual Rate Type is Flat Load Amount
  IF ( WRK.Accrual_Rate_Type = 'FL';

  // AND PAR.Billing Activity Type is Credit Memo
  AND PAR.Billing_Activity_Type = '2';

  // AND PAR.OD Full Return to Plant is Yes
  AND PAR.OD_Clm_Full_Return_to_Plt = 'Y' );

  // OR WRK.Accrual Rate Type is Flat Load Amount
  OR ( WRK.Accrual_Rate_Type = 'FL';

  // AND PAR.Billing Activity Type is Invoice
  AND PAR.Billing_Activity_Type = '1' );

  // WRK.Extended Amount = WRK.Accrual Rate
  WRK.Extended_Amount = WRK.Accrual_Rate;

  //?Calc Accrual
  //?Calc Accrual
  //?Change trans amount according to add-on/allowance flag
  // IF PAR.Add-on/Allowance is Allowance
  IF PAR.Add_on_Allowance = 'S';

  // AND PAR.Billing Activity Type is Invoice
  AND ( PAR.Billing_Activity_Type = '1';

  // OR PAR.Billing Activity Type is Debit Memo
  OR PAR.Billing_Activity_Type = '3' );

  // WRK.Extended Amount = CON.*ZERO - WRK.Extended Amount
  WRK.Extended_Amount = *ZERO - WRK.Extended_Amount;

  ENDIF;

  //?Change trans amount according to Credit Memo
  CASE;

  // IF PAR.Billing Activity Type is Credit Memo
  IF PAR.Billing_Activity_Type = '2';

  // AND PAR.Add-on/Allowance is Add-on
  AND PAR.Add_on_Allowance = 'A';

  // WRK.Extended Amount = CON.*ZERO - WRK.Extended Amount
  WRK.Extended_Amount = *ZERO - WRK.Extended_Amount;

  ENDIF;

  CASE;

  // IF DB1.Comm Min Amt /Period is Zero
  IF DB1.Comm_Min_Amt_Period = *ZERO;

  // OR DB1.Comm Retroactive Sts is yes
  OR DB1.Comm_Retroactive_Sts = 'Y';

  // PAR.Item Accrual Amt = WRK.Extended Amount
  PAR.Item_Accrual_Amt = WRK.Extended_Amount;

  ENDIF;

  //?Comm Threshhold is > 0 and Retro Sts is NO
  CASE;

  // IF DB1.Comm Min Amt /Period is Greater than zero
  IF DB1.Comm_Min_Amt_Period > *ZERO;

  // AND DB1.Comm Retroactive Sts is no
  AND DB1.Comm_Retroactive_Sts = 'N';

  CASE;

  // IF DB1.Comm Threshold Period is Calendar Month
  IF DB1.Comm_Threshold_Period = 'CM';

  // LCL.Year Length USR = PAR.Actual Shipped Date / CON.100 *
  LCL.Year_Length_USR = PAR.Actual_Shipped_Date / 100;

  // LCL.AS Date MM/DD = CVTVAR(LCL.Year Length USR)
  LCL.AS_Date_MM_DD = CVTVAR(LCL.Year_Length_USR);

  // LCL.Date (Alpha) USR = CONCAT(LCL.AS Date MM/DD,CON.01,CON.*ZERO)
  LCL.Date_Alpha_USR = LCL.AS_Date_MM_DD + '01' (*ZERO);

  // LCL.Period Beginning Date = CVTVAR(LCL.Date (Alpha) USR)
  LCL.Period_Beginning_Date = CVTVAR(LCL.Date_Alpha_USR);

  // LCL.DD   numeric USR = PAR.Actual Shipped Date *MONTH LENGTH
  LCL.DD_numeric_USR = DATEDTLS(PAR.Actual_Shipped_Date 'ML' 1111111 'NONE' 'N' 1);

  // LCL.DD   alpha   USR = CVTVAR(LCL.DD   numeric USR)
  LCL.DD_alpha_USR = CVTVAR(LCL.DD_numeric_USR);

  // LCL.Date (Alpha) USR = CONCAT(LCL.AS Date MM/DD,LCL.DD   alpha   USR,CON.*ZERO)
  LCL.Date_Alpha_USR = LCL.AS_Date_MM_DD + LCL.DD_alpha_USR (*ZERO);

  // LCL.Period Ending Date = CVTVAR(LCL.Date (Alpha) USR)
  LCL.Period_Ending_Date = CVTVAR(LCL.Date_Alpha_USR);

  // IF DB1.Comm Threshold Period is Accounting Period
  IF DB1.Comm_Threshold_Period = 'AP';

  // Call program RTV Year/Period/Week   XF.
  CALL PROGRAM(RTV Year/Period/Week   XF) ('PDT3XFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(LCL.Accounting_Year_Code);
  PARAMETER(LCL.Accounting_Period_Code);
  PARAMETER(LCL.OM_Week);

  EXECUTE FUNCTION(Rtv Period Start/End  RT) TYPE(RTVOBJ) FILE(CAATREP)           AC1666753;
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Accounting_Year_Code);
  PARAMETER(LCL.Accounting_Period_Code);
  PARAMETER(LCL.Period_Beginning_Date);
  PARAMETER(LCL.Period_Ending_Date);
  {
   //?USER: Initialize routine

   // LCL.First Time Flag = CND.Yes
   LCL.First_Time_Flag = 'Y';

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF LCL.First Time Flag is Yes
   IF LCL.First_Time_Flag = 'Y';

   // PAR.Period Beginning Date = DB1.Period Beginning Date
   PAR.Period_Beginning_Date = DB1.Period_Beginning_Date;

   // LCL.First Time Flag = CND.NO
   LCL.First_Time_Flag = 'N';

   ENDIF;

   // PAR.Period Ending Date = DB1.Period Ending Date
   PAR.Period_Ending_Date = DB1.Period_Ending_Date;

  }

  ENDIF;

  EXECUTE FUNCTION(Rtv Tot Acc p/Per ALL RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1710804;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(LCL.Period_Beginning_Date);
  PARAMETER(LCL.Period_Beginning_Date);
  PARAMETER(LCL.Period_Ending_Date);
  PARAMETER(LCL.Item_Accrual_Amt);
  PARAMETER(WRK.Not_Used_Wgt);
  {
   //?USER: Initialize routine

   // PAR.Item Accrual Amt = CON.*ZERO
   PAR.Item_Accrual_Amt = *ZERO;

   // PAR.Extended Amount = CON.*ZERO
   PAR.Extended_Amount = *ZERO;

   //?USER: Process Data record

   CASE;

   // IF DB1.SDA Actual Ship Date GE PAR.Period Beginning Date
   IF DB1.SDA_Actual_Ship_Date >= PAR.Period_Beginning_Date;

   // AND DB1.SDA Actual Ship Date LE PAR.Period Ending Date
   AND DB1.SDA_Actual_Ship_Date <= PAR.Period_Ending_Date;

   // PAR.Item Accrual Amt = PAR.Item Accrual Amt + DB1.Item Accrual Amt
   PAR.Item_Accrual_Amt = PAR.Item_Accrual_Amt + DB1.Item_Accrual_Amt;

   // PAR.Extended Amount = PAR.Extended Amount + DB1.Extended Amount
   PAR.Extended_Amount = PAR.Extended_Amount + DB1.Extended_Amount;

   // IF *OTHERWISE
   IF *OTHERWISE;

   QUIT;

   ENDIF;

  }

  // LCL.USR amount 1  11.2 = WRK.Extended Amount + LCL.Item Accrual Amt
  LCL.USR_amount_1_11_2 = WRK.Extended_Amount + LCL.Item_Accrual_Amt;

  // PAR.Item Accrual Amt = WRK.Extended Amount
  PAR.Item_Accrual_Amt = WRK.Extended_Amount;

  CASE;

  // IF LCL.USR amount 1  11.2 GT DB1.Comm Min Amt /Period
  IF LCL.USR_amount_1_11_2 > DB1.Comm_Min_Amt_Period;

  // WRK.Extended Amount = LCL.USR amount 1  11.2 - DB1.Comm Min Amt /Period
  WRK.Extended_Amount = LCL.USR_amount_1_11_2 - DB1.Comm_Min_Amt_Period;

  CASE;

  // IF WRK.Extended Amount GT PAR.Item Accrual Amt
  IF WRK.Extended_Amount > PAR.Item_Accrual_Amt;

  // WRK.Extended Amount = PAR.Item Accrual Amt
  WRK.Extended_Amount = PAR.Item_Accrual_Amt;

  ENDIF;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Extended Amount = CON.*ZERO
  WRK.Extended_Amount = *ZERO;

  ENDIF;

  ENDIF;

  CASE;

  // IF DB1.Comm Retroactive Sts is yes
  IF DB1.Comm_Retroactive_Sts = 'Y';

  // PAR.Retro Comm Calculated = CND.no
  PAR.Retro_Comm_Calculated = 'N';

  ENDIF;

  // PAR.Sequence Number = PAR.Sequence Number + CON.1
  PAR.Sequence_Number = PAR.Sequence_Number + 1;

  //?db1.accrual percent changed to wrk. context    10/13
  //?db1.company changed to par. context    10/22/04
  //?RMC DLY029 5/23/07 output new fields
  //?E4057 JJH 05/13/15 - Do not create record if Extended Amt = 0
  //?** Don't create the record if the accrual amount = zeros  FP1314
  CASE;

  // IF WRK.Extended Amount is not equal to zeros
  IF WRK.Extended_Amount <> *ZERO;

  //?E4057 JJH 04/27/15 - Populate: SDA Atch to Ord ActShpDt
  EXECUTE FUNCTION(CRT OM Ship Dtl Accrul CR) TYPE(CRTOBJ) FILE(OMHRCPP)          AC1337844;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(WRK.Accrual_Rate);
  PARAMETER(WRK.Accrual_Percent);
  PARAMETER(WRK.Extended_Amount);
  PARAMETER(PAR.Item_Accrual_Amt);
  PARAMETER(PAR.Item_Code);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(DB1.Broker_Code);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER('Y');
  PARAMETER(PAR.Retro_Comm_Calculated);
  PARAMETER(PAR.Accrual_Type);
  PARAMETER(PAR.Affect_Sales_Realz_Rpt);
  PARAMETER(PAR.Affect_Invoice_Price);
  PARAMETER(PAR.Print_On_Invoice_Y_N);
  PARAMETER(PAR.Invoice_Print_Type);
  PARAMETER(PAR.SDA_Ord_Dtl_Acrl_Seq);
  PARAMETER(PAR.SDA_Atch_to_Ord_ActShpDt);
  PARAMETER(PAR.SDA_Unused_Amt_1);
  PARAMETER(PAR.SDA_Unused_Amt_2);
  PARAMETER(PAR.Post_to_G_L_Y_N);
  PARAMETER(WRK.Accrual_Rate_Type);
  PARAMETER(PAR.Invoice_Date);
  PARAMETER(PAR.Sub_Ledger_Code);
  PARAMETER(PAR.SDA_G_L_Sub_Ledger);
  PARAMETER(PAR.SDA_G_L_Code_Dr);
  PARAMETER(PAR.SDA_G_L_Code_Cr);
  PARAMETER(PAR.SDA_JDE_Account_ID_Dr);
  PARAMETER(PAR.SDA_JDE_Account_ID_Cr);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.Sales_History_Exp_Bucket);
  PARAMETER(PAR.G_L_Sub_Account);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 //?*---------------------------------------------------------------*
 //?***** MAINTENANCE LOG: Order Detail Accrual
 DO;

 //?*---------------------------------------------------------------*
 //?* 10/20/09 PKD Add accrual by Order Detail.
 //?* 12/03/09 PKD FP1322 Added Flat Amount Accrual Rate Type
 //?* 3/23/10 PKD E00648 upd accruals for db/cm
 //?* 4/14/10 RMC E00648 for db/cm look at addon allow flag
 //?* 11/22/11 RMC E1812 Added Rate type "G" % of gross extended and
 //?*                    Added Rate type "QT" $ per qty/ 1000
 //?06/26/14 PKD E3164 Send in Shipping Method as a parameter
 //?E4057 JJH 04/24/14
 //?- Add I parm for: SDA Atch to Ord ActShpDt
 //?- Add I parm for: Affect Sales Doll Status
 //?- Add I parm for: Affect Sales Pnds Status
 //?- Comment out logic for Affect Trade Fund & Affect Commission
 //?- Pass in OD Full Retturn to Plant from Order Detail.  This will
 //?  be used to update accurals for selected Flat Amount calculations.
 //?- Comment out logic for Accrual Rate Type that have never been used
 //?  Order Dtl (W ) $/Lb
 //?  Order Dtl (WR) $/Lb Weight Billed
 //?  Order Dtl (QR) $/Quantity by Qty Shipped
 ENDDO;

 //?Logic only for Regular Sales Orders. CM/DMs are not allowed to
 //?create Order Dtl Accrual.
 EXECUTE FUNCTION(RTV Write Accrual Rcd RT) TYPE(RTVOBJ) FILE(OMHQCPP)           AC1957701;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Extended_Amount);
 PARAMETER(DB1.U_M_Ordered);
 PARAMETER(DB1.Quantity_Shipped_Total);
 PARAMETER(DB1.Weight_Shipped_Total);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Affect_Sales_Doll_Status);
 PARAMETER(DB1.Affect_Sales_Pnds_Status);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Class_Code);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Affect_Trade_Fund);
 PARAMETER(DB1.Affect_Commission);
 PARAMETER(DB1.OD_Clm_Full_Return_to_Plt);
 PARAMETER(PAR.AR_Customer_Number);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Absorbed_Freight_Rate_CWT);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(PAR.Invoice_Date);
 PARAMETER(PAR.Billing_Activity_Type);
 PARAMETER(PAR.Sequence_Number);
 PARAMETER(LCL.SDA_Atch_to_Ord_ActShpDt);
 PARAMETER(PAR.Extended_Amt_Total);
 PARAMETER(PAR.Quantity_Total_S);
 PARAMETER(PAR.Weight_Total_13_2_USR);
 PARAMETER(LCL.Accounting_Company);
 {
  //?USER: Initialize routine

  //?E1812 RMC 11/22/11 Added here: Accrual type -->  % of Gross Ext Amt
  //?                   And  Accrual type -->  $ per Qty/1000      "QT"
  //?06/26/14 PKD E3164 add omit criteria for Exclude Collect Truck/Rail
  //?USER: Process Data record

  // PAR.Retro Comm Calculated = CND.blank
  PAR.Retro_Comm_Calculated = *BLANK;

  // PGM.*Record selected = CND.*YES
  PGM.*Record_selected = 'Y';

  //?E4057 JJH 05/13/15 - Reset Extended Amount to Zero
  // WRK.Extended Amount = CND.equal to zero
  WRK.Extended_Amount = *ZERO;

  EXECUTE FUNCTION(Rtv Accr Prog EXT     RT) TYPE(RTVOBJ) FILE(PBAMREP)           AC2048357;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(NLL.G_L_Account_Category);
  PARAMETER(LCL.APE_Excl_Collect_ShpMthd);
  PARAMETER(NLL.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?OMIT:  Shipping Method = Collect Rail or Truck
  CASE;

  // IF LCL.APE Excl Collect ShpMthd is Yes
  IF LCL.APE_Excl_Collect_ShpMthd = 'Y';

  // AND PAR.Shipping Method is Collect
  AND PAR.Shipping_Method = 'CR'/'CT';

  // PGM.*Record selected = CND.*NO
  PGM.*Record_selected = 'N';

  ENDIF;

  //?Process Accrual Program
  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  EXECUTE FUNCTION(RTV All Values Act NEW RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1823808;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.Accrual_Description);
  PARAMETER(PAR.Automatic_Accrual_Y_N);
  PARAMETER(PAR.Print_On_Invoice_Y_N);
  PARAMETER(PAR.Rate_Usage);
  PARAMETER(PAR.Add_on_Allowance);
  PARAMETER(PAR.Accrual_Type);
  PARAMETER(PAR.Sub_Ledger_Code);
  PARAMETER(PAR.Reverse_Accrual_Code);
  PARAMETER(PAR.UOM_Primary_Dft);
  PARAMETER(PAR.G_L_Code_Dr);
  PARAMETER(PAR.G_L_Code_Cr);
  PARAMETER(PAR.G_L_Sub_Account_Code);
  PARAMETER(PAR.Sales_History_Exp_Bucket);
  PARAMETER(PAR.Post_to_G_L_Y_N);
  PARAMETER(PAR.Accrual_Rate_Type);
  PARAMETER(PAR.Affect_Sales_Realz_Rpt);
  PARAMETER(PAR.Affect_Invoice_Price);
  PARAMETER(PAR.Invoice_Print_Type);
  {
   //?USER: Initialize routine

   //?RMC DLY029 5/23/07 Db Change - this outputs the new fields
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  // PAR.SDA G/L Code Dr = PAR.G/L Code Dr
  PAR.SDA_G_L_Code_Dr = PAR.G_L_Code_Dr;

  // PAR.SDA G/L Code Cr = PAR.G/L Code Cr
  PAR.SDA_G_L_Code_Cr = PAR.G_L_Code_Cr;

  // Call program Val G/L Act Cde 2 HPE XF.
  CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
  PARAMETER(PAR.Accounting_Company);
  PARAMETER(PAR.G_L_Code_Dr);
  PARAMETER(WRK.G_L_Code_Desc_USR);
  PARAMETER(PAR.SDA_JDE_Account_ID_Dr);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Record_Found_USR);

  // Call program Val G/L Act Cde 2 HPE XF.
  CALL PROGRAM(Val G/L Act Cde 2 HPE XF) ('PKVBXFR');
  PARAMETER(PAR.Accounting_Company);
  PARAMETER(PAR.G_L_Code_Cr);
  PARAMETER(WRK.G_L_Code_Desc_USR);
  PARAMETER(PAR.SDA_JDE_Account_ID_Cr);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(LCL.Record_Found_USR);

  EXECUTE FUNCTION(G/L Sub Ledger DRV) TYPE(DRVFLD)                               AC1830688;
  PARAMETER(PAR.SDA_G_L_Sub_Ledger);
  PARAMETER(PAR.Sub_Ledger_Code);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(LCL.Broker_Code);
  {
   //?Calculate derived field

   //?A/R Customer
   CASE;

   // IF PAR.Sub Ledger Code is A/R Customer
   IF PAR.Sub_Ledger_Code = 'A';

   EXECUTE FUNCTION(Rtv g/l Vendor        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1680257;
   PARAMETER(PAR.AR_Customer_Number);
   PARAMETER(PAR.G_L_Sub_Ledger_DRV);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   //?Ship To Customer
   CASE;

   // IF PAR.Sub Ledger Code is Ship To Customer
   IF PAR.Sub_Ledger_Code = 'S';

   EXECUTE FUNCTION(Rtv g/l Vendor        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1680257;
   PARAMETER(PAR.Ship_To_Customer);
   PARAMETER(PAR.G_L_Sub_Ledger_DRV);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

   //?Broker
   CASE;

   // IF PAR.Sub Ledger Code is Broker
   IF PAR.Sub_Ledger_Code = 'B';

   // OR PAR.Sub Ledger Code is Buyer Group
   OR PAR.Sub_Ledger_Code = 'G';

   EXECUTE FUNCTION(Rtv Broker Info       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1675816;
   PARAMETER(PAR.Broker_Code);
   PARAMETER(LCL.Broker_Name);
   PARAMETER(LCL.Broker_Address_Line_1);
   PARAMETER(LCL.Broker_Address_Line_2);
   PARAMETER(LCL.Broker_City);
   PARAMETER(LCL.Broker_State);
   PARAMETER(LCL.Broker_Zip);
   PARAMETER(LCL.Broker_Office_Manager);
   PARAMETER(LCL.Broker_Telephone_Number);
   PARAMETER(LCL.Broker_Fax_Number);
   PARAMETER(LCL.Broker_Email_Address);
   PARAMETER(PAR.G_L_Sub_Ledger_DRV);
   PARAMETER(LCL.Salesperson_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // PAR.Broker Code = CON.*BLANK
  PAR.Broker_Code = *BLANK;

  // PAR.G/L Sub Account = DB1.G/L Sub Account
  PAR.G_L_Sub_Account = DB1.G_L_Sub_Account;

  // PAR.SDA Ord Dtl Acrl Seq = DB1.Sequence Number
  PAR.SDA_Ord_Dtl_Acrl_Seq = DB1.Sequence_Number;

  // WRK.Error Status  3 = CND.No
  WRK.Error_Status_3 = 'N';

  //?E4057 JJH 04/29/15 - Rewrite Calc logic to utizile Affect Sales
  //? Pounds Status and Affect Sales Dollar Status
  //?Calc Accrual
  CASE;

  // IF WRK.Error Status  3 is No
  IF WRK.Error_Status_3 = 'N';

  //?Calculate Extended Amount (which is the Accrual Amount)
  //?Calc Accrual
  CASE;

  //?Calc Accrual
  // IF DB1.Accrual Rate Type is $/Quantity
  IF DB1.Accrual_Rate_Type = 'Q';

  // AND PAR.Affect Sales Pnds Status is yes
  AND PAR.Affect_Sales_Pnds_Status = 'Y';

  // WRK.Extended Amount = DB1.Accrual Rate * PAR.Quantity Shipped Total *
  WRK.Extended_Amount = DB1.Accrual_Rate * PAR.Quantity_Shipped_Total;

  //?Calc Accrual
  //?Calc Accrual
  // IF DB1.Accrual Rate Type is Flat Amount
  IF DB1.Accrual_Rate_Type = 'FA';

  // AND PAR.Affect Sales Doll Status is yes
  AND PAR.Affect_Sales_Doll_Status = 'Y';

  // WRK.Extended Amount = DB1.Accrual Rate
  WRK.Extended_Amount = DB1.Accrual_Rate;

  //?Calc Accrual
  // IF DB1.Accrual Rate Type is % of Gross Extended Amt
  IF DB1.Accrual_Rate_Type = 'G';

  // AND PAR.Affect Sales Doll Status is yes
  AND PAR.Affect_Sales_Doll_Status = 'Y';

  //?Accrual = gross extended amt from Order dtl * accrual rate
  // WRK.Extended Amount
  WRK.Extended_Amount = ( DB1.Accrual_Rate * PAR.Extended_Amount 'H' ) / 100 'H';

  //?Calc Accrual
  // IF DB1.Accrual Rate Type is $/Quantity/1000
  IF DB1.Accrual_Rate_Type = 'QT';

  // AND PAR.Affect Sales Pnds Status is yes
  AND PAR.Affect_Sales_Pnds_Status = 'Y';

  // Compute: Amt/1000 qty
  WRK.Extended_Amount = ( DB1.Accrual_Rate * PAR.Quantity_Shipped_Total ) / 1000;

  ENDIF;

  //?Change trans amount according to add-on/allowance flag
  CASE;

  // IF PAR.Add-on/Allowance is Allowance
  IF PAR.Add_on_Allowance = 'S';

  // AND PAR.Billing Activity Type is Invoice
  AND ( PAR.Billing_Activity_Type = '1';

  // OR PAR.Billing Activity Type is Debit Memo
  OR PAR.Billing_Activity_Type = '3' );

  //?Do for debit memo too     RMC    4/14/10
  // WRK.Extended Amount = CON.*ZERO - WRK.Extended Amount
  WRK.Extended_Amount = *ZERO - WRK.Extended_Amount;

  ENDIF;

  //?Change trans amount according to Credit Memo  - look at add/on 4/14/10
  CASE;

  // IF PAR.Billing Activity Type is Credit Memo
  IF PAR.Billing_Activity_Type = '2';

  // AND PAR.Add-on/Allowance is Add-on
  AND PAR.Add_on_Allowance = 'A';

  //?Before  4/14 wasnt loking at add-on/allowance status -- So
  //?if accrual is Add on, then subtract it for CR Memos (do the opposite)
  // WRK.Extended Amount = CON.*ZERO - WRK.Extended Amount
  WRK.Extended_Amount = *ZERO - WRK.Extended_Amount;

  ENDIF;

  // PAR.Item Accrual Amt = WRK.Extended Amount
  PAR.Item_Accrual_Amt = WRK.Extended_Amount;

  // PAR.Sequence Number = PAR.Sequence Number + CON.1
  PAR.Sequence_Number = PAR.Sequence_Number + 1;

  //?** Don't create the record if the accrual amount = zeros
  CASE;

  // IF WRK.Extended Amount is not equal to zeros
  IF WRK.Extended_Amount <> *ZERO;

  //?E4057 JJH 04/27/15 - Populate: SDA Atch to Ord ActShpDt
  EXECUTE FUNCTION(CRT OM Ship Dtl Accrul CR) TYPE(CRTOBJ) FILE(OMHRCPP)          AC1337844;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Order_Sequence_Number);
  PARAMETER(PAR.Order_Secondary_Line_Seq);
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(DB1.Accrual_Rate);
  PARAMETER(WRK.Accrual_Percent);
  PARAMETER(WRK.Extended_Amount);
  PARAMETER(PAR.Item_Accrual_Amt);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.AR_Customer_Number);
  PARAMETER(PAR.Broker_Code);
  PARAMETER(PAR.Actual_Shipped_Date);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER('Y');
  PARAMETER(PAR.Retro_Comm_Calculated);
  PARAMETER(PAR.Accrual_Type);
  PARAMETER(PAR.Affect_Sales_Realz_Rpt);
  PARAMETER(PAR.Affect_Invoice_Price);
  PARAMETER(PAR.Print_On_Invoice_Y_N);
  PARAMETER(PAR.Invoice_Print_Type);
  PARAMETER(PAR.SDA_Ord_Dtl_Acrl_Seq);
  PARAMETER(PAR.SDA_Atch_to_Ord_ActShpDt);
  PARAMETER(PAR.SDA_Unused_Amt_1);
  PARAMETER(PAR.SDA_Unused_Amt_2);
  PARAMETER(PAR.Post_to_G_L_Y_N);
  PARAMETER(DB1.Accrual_Rate_Type);
  PARAMETER(PAR.Invoice_Date);
  PARAMETER(PAR.Sub_Ledger_Code);
  PARAMETER(PAR.SDA_G_L_Sub_Ledger);
  PARAMETER(PAR.SDA_G_L_Code_Dr);
  PARAMETER(PAR.SDA_G_L_Code_Cr);
  PARAMETER(PAR.SDA_JDE_Account_ID_Dr);
  PARAMETER(PAR.SDA_JDE_Account_ID_Cr);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(PAR.Sales_History_Exp_Bucket);
  PARAMETER(PAR.G_L_Sub_Account);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(WRK.BLANK);
  PARAMETER(JOB.*Job_time);
  PARAMETER(JOB.*USER);
  PARAMETER(JOB.*JOB);
  PARAMETER(JOB.*Job_date);
  {
   //?USER: Processing before Data update

   // DB1.Job Time = JOB.*Job time
   DB1.Job_Time = JOB.*Job_time;

   // DB1.User Id = JOB.*USER
   DB1.User_Id = JOB.*USER;

   // DB1.Job Name = JOB.*JOB
   DB1.Job_Name = JOB.*JOB;

   // DB1.Job Date = JOB.*Job date
   DB1.Job_Date = JOB.*Job_date;

  }

  ENDIF;

  ENDIF;

  ENDIF;

 }

 ENDIF;

}


