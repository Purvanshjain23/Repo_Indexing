// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNN7PVR
// ?Date: 14.08.2025 Time: 03:45:50
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E3328 JJH 10/13/14 - New option to print Quantities Less Than Zero
//? This is a Test Program that is in PRKPLIB.  so pgm is updated
ENDDO;

//?*** Setup Security & Company Title ***
// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.LSP_Accounting_Co);
PARAMETER(PAR.LSP_Prodution_Warehouse);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Load screen

// DTL.LSP Accounting Co = PAR.LSP Accounting Co
DTL.LSP_Accounting_Co = PAR.LSP_Accounting_Co;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.LSP_Accounting_Co);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.USR Radio Button 1 = CND.Select X
DTL.USR_Radio_Button_1 = 'X';

// DTL.Untied Orders Flag USR = CND.No
DTL.Untied_Orders_Flag_USR = 'N';

// DTL.From Date             USR = JOB.*Job date
DTL.From_Date_USR = JOB.*Job_date;

// DTL.To Date               USR = JOB.*Job date
DTL.To_Date_USR = JOB.*Job_date;

//?** Deleted hardcoded warehouse code and replaced with code **
//?** retrieved in the security routine **
// DTL.LSP Prodution Warehouse = PAR.LSP Prodution Warehouse
DTL.LSP_Prodution_Warehouse = PAR.LSP_Prodution_Warehouse;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.LSP_Prodution_Warehouse);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


//?Get date of last work file update.
DO;

EXECUTE FUNCTION(RTV System Value Alpha RT) TYPE(RTVOBJ) FILE(CADPREP)          AC1530745;
PARAMETER('DTALIB');
PARAMETER(PAR.Library);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

//?USER: Process command keys

CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.LSP Accounting Co
IF PGM.*Cursor_field = DTL.LSP_Accounting_Co;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.LSP_Accounting_Co);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.LSP Prodution Warehouse
IF PGM.*Cursor_field = DTL.LSP_Prodution_Warehouse;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.LSP_Prodution_Warehouse);
PARAMETER(DTL.LSP_Accounting_Co);

ENDIF;

ENDIF;

//?USER: Validate fields

//?Validate Company Number.
DO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.LSP_Accounting_Co);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company not found.'
ERROR(USR2831);
MSGPARM(DTL.LSP_Accounting_Co);

ENDIF;

ENDDO;

//?Validate Scheduled Ship Date Range.
DO;

CASE;

// IF DTL.From Date             USR is Entered
IF DTL.From_Date_USR <> *ZERO;

// AND DTL.To Date               USR is Entered
AND DTL.To_Date_USR <> *ZERO;

//?Make sure To is after From.
DO;

CASE;

// IF DTL.From Date             USR GT DTL.To Date               USR
IF DTL.From_Date_USR > DTL.To_Date_USR;

// Send error message - 'From date exceeds to date.  Please re-enter.'
ERROR(USR0319);
MSGPARM(DTL.From_Date_USR);

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Both dates must be entered.
DO;

CASE;

// IF DTL.From Date             USR is Entered
IF DTL.From_Date_USR <> *ZERO;

// AND DTL.To Date               USR is Not Entered
AND DTL.To_Date_USR = *ZERO;

// DTL.To Date               USR = DTL.From Date             USR
DTL.To_Date_USR = DTL.From_Date_USR;

// IF DTL.From Date             USR is Not Entered
IF DTL.From_Date_USR = *ZERO;

// AND DTL.To Date               USR is Entered
AND DTL.To_Date_USR <> *ZERO;

// DTL.From Date             USR = DTL.To Date               USR
DTL.From_Date_USR = DTL.To_Date_USR;

ENDIF;

ENDDO;

ENDIF;

ENDDO;

//?Validate Load ID Range.
DO;

CASE;

// IF DTL.From Load ID  USR is NE Blank
IF DTL.From_Load_ID_USR <> *ZERO;

// AND DTL.To Load ID  USR is NE Blank
AND DTL.To_Load_ID_USR <> *ZERO;

//?Make sure To is after From.
DO;

CASE;

// IF DTL.From Load ID  USR GT DTL.To Load ID  USR
IF DTL.From_Load_ID_USR > DTL.To_Load_ID_USR;

// Send error message - '"To Load ID" must be greater than the "From Load ID".'
ERROR(USR2832);
MSGPARM(DTL.From_Load_ID_USR);

ENDIF;

ENDDO;

// IF *OTHERWISE
IF *OTHERWISE;

//?Both dates must be entered.
DO;

CASE;

// IF DTL.From Load ID  USR is NE Blank
IF DTL.From_Load_ID_USR <> *ZERO;

// AND DTL.To Load ID  USR is Blank
AND DTL.To_Load_ID_USR = *ZERO;

// DTL.To Load ID  USR = DTL.From Load ID  USR
DTL.To_Load_ID_USR = DTL.From_Load_ID_USR;

// IF DTL.From Load ID  USR is Blank
IF DTL.From_Load_ID_USR = *ZERO;

// AND DTL.To Load ID  USR is NE Blank
AND DTL.To_Load_ID_USR <> *ZERO;

// DTL.From Load ID  USR = DTL.To Load ID  USR
DTL.From_Load_ID_USR = DTL.To_Load_ID_USR;

ENDIF;

ENDDO;

ENDIF;

ENDDO;

//?Validate Sort Selection.
DO;

CASE;

// IF DTL.USR Radio Button 1 is Blank
IF DTL.USR_Radio_Button_1 = *BLANK;

// AND DTL.USR Radio Button 2 is Blank
AND DTL.USR_Radio_Button_2 = *BLANK;

// AND DTL.USR Radio Button 3 is Blank
AND DTL.USR_Radio_Button_3 = *BLANK;

// Send error message - 'At least one sort must be selected.'
ERROR(USR2833);
MSGPARM(DTL.USR_Radio_Button_1);
MSGPARM(DTL.USR_Radio_Button_2);
MSGPARM(DTL.USR_Radio_Button_3);

ENDIF;

ENDDO;

EXECUTE FUNCTION(VAL Shipping Co WHS   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714721;
PARAMETER(DTL.LSP_Accounting_Co);
PARAMETER(DTL.LSP_Prodution_Warehouse);
PARAMETER(WRK.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.Warehouse Description is equal to blank
IF WRK.Warehouse_Description = *BLANK;

// Send error message - 'Warehouse &1 Invalid for Co &2.'
ERROR(USR3404);
MSGPARM(DTL.LSP_Prodution_Warehouse);
MSGPARM(DTL.LSP_Accounting_Co);

ENDIF;

//?CALC: Screen function fields

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(DTL.Warehouse_Desc_DRV);
PARAMETER(DTL.LSP_Prodution_Warehouse);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


//?USER: User defined action

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Load Scheduling Summary');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Application_Code);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

//?Submit the Report.
DO;

//?Dynamically override the SBMJOB command
//?with the job queue from the Print Options screen.
// PGM.*Sbmjob override string = CONCAT(CON.JOBQ(,PAR.PRT Night Queue,CND.*None)
PGM.*Sbmjob_override_string = 'JOBQ(' + PAR.PRT_Night_Queue (*ZERO);

// PGM.*Sbmjob override string = CONCAT(PGM.*Sbmjob override string,CON.),CND.*None)
PGM.*Sbmjob_override_string = PGM.*Sbmjob_override_string + ')' (*ZERO);

//?Submit the Report.
//?E3328 JJH 10/13/14 - New parm to print Quantities Less Than Zero
//? Test program that is in PRKPLIB, so program updated
// Call program ZzzPrt Load Schdlng SBMXF.
SBMJOB;
CALL PROGRAM(ZzzPrt Load Schdlng SBMXF) ('PNN9XFR');
PARAMETER(DTL.LSP_Accounting_Co);
PARAMETER(DTL.From_Date_USR);
PARAMETER(DTL.To_Date_USR);
PARAMETER(DTL.From_Load_ID_USR);
PARAMETER(DTL.To_Load_ID_USR);
PARAMETER(DTL.Export_Status);
PARAMETER(DTL.U_M_Load_Scheduling_USR);
PARAMETER(DTL.Load_Grade);
PARAMETER(DTL.Untied_Orders_Flag_USR);
PARAMETER(DTL.USR_Radio_Button_1);
PARAMETER(DTL.USR_Radio_Button_2);
PARAMETER(DTL.USR_Radio_Button_3);
PARAMETER(DTL.LSP_Prodution_Warehouse);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(DTL.Create_Requested);
PARAMETER(DTL.Qty_Less_Than_Zero_USR);
SBMJOBOVR JOB(TESTSCHDLG);
SBMJOBOVR LOG(4;
SBMJOBOVR 99;
SBMJOBOVR *SECLVL);
SBMJOBOVR LOGCLPGM(*JOBD);
SBMJOBOVR LOGOUTPUT(*JOBD);
SBMJOBEND;

//?Send submit message to user.
// Send information message - 'The report has been submitted.'
MESSAGE(USR2720 *INFO);

ENDDO;

ENDIF;

