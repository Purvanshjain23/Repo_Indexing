// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMQZEFR
// ?Date: 14.08.2025 Time: 03:43:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile header

// CTL.Text USR 23 = CON.*BLANK
CTL.Text_USR_23 = *BLANK;

CASE;

// IF PAR.Edit/Display Usr is Displayed Only
IF PAR.Edit_Display_Usr = 'D';

// CTL.Text USR 23 = CON.Display Only
CTL.Text_USR_23 = 'Display Only';

ENDIF;

//?USER: Initialize subfile record (existing record)

//?Search on Broker
CASE;

// IF PAR.Broker Code 1 Usr is Entered
IF PAR.Broker_Code_1_Usr <> *BLANK;

CASE;

// IF DB1.Broker Code EQ PAR.Broker Code 1 Usr
IF DB1.Broker_Code = PAR.Broker_Code_1_Usr;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Initialize subfile record (new record)

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

//?USER: Validate subfile control

CASE;

// IF CTL.*CMD key is CF09
IF CTL.*CMD_key = '09';

// AND PAR.Edit/Display Usr is Displayed Only
AND PAR.Edit_Display_Usr = 'D';

// Send error message - 'Function not allowed.'
ERROR(USR1833);

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// AND PAR.Edit/Display Usr is Displayed Only
AND PAR.Edit_Display_Usr = 'D';

// Call program Dsp Sls Product Type   DF.
CALL PROGRAM(Dsp Sls Product Type   DF) ('PBSNDFR');

// IF CTL.*CMD key is CF10
IF CTL.*CMD_key = '10';

// Call program WW Sls Product Type   DF.
CALL PROGRAM(WW Sls Product Type   DF) ('PMYUDFR');

ENDIF;

//?USER: Validate subfile record fields

//?SEL: Commission Schedule
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.Commission Schedule
IF PGM.*Cursor_field = RCD.Commission_Schedule;

// Call program SEL Accrual Cde b/Typ SR.
CALL PROGRAM(SEL Accrual Cde b/Typ SR) ('PPBKSRR');
PARAMETER(RCD.Commission_Schedule);
PARAMETER('CM');

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

EXECUTE FUNCTION(Rtv Broker Name Act   RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1938855;
PARAMETER(RCD.Broker_Code);
PARAMETER(RCD.Broker_Name_DRV);
PARAMETER(LCL.Record_Status_2_Usr);
{
 //?USER: Initialize routine

 //?modification history
 DO;

 //?E00360 slm 06/16/09 Broker/Inactive rules
 ENDDO;

 // PAR.Record Status = CND.*blank
 PAR.Record_Status = *BLANK;

 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF LCL.Record Status 2 Usr is Inactive
IF LCL.Record_Status_2_Usr = 'I';

// Send error message - 'Broker is Inactive'
ERROR(USR4166);
MSGPARM(RCD.Broker_Code);

ENDIF;

ENDIF;

EXECUTE FUNCTION(Accrual Description DRV) TYPE(DRVFLD)                          AC1706268;
PARAMETER(RCD.Accrual_Description_DRV);
PARAMETER(RCD.Commission_Schedule);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Accrual Descript   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1285204;
 PARAMETER(PAR.Accrual_Code);
 PARAMETER(PAR.Accrual_Description_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Salesperson Name DRV) TYPE(DRVFLD)                             AC1828552;
PARAMETER(RCD.Salesperson_Name_DRV);
PARAMETER(RCD.Salesperson_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Salesperson NmeOnlyRT) TYPE(RTVOBJ) FILE(CAAPREP)          AC1739999;
 PARAMETER(PAR.Salesperson_Code);
 PARAMETER(PAR.Salesperson_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Validate subfile record relations

CASE;

// IF PAR.Edit/Display Usr is Displayed Only
IF PAR.Edit_Display_Usr = 'D';

//?VAL:  Delete not allowed for this function
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

//?VAL:  Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(Val Market Exists     RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1910520;
PARAMETER(RCD.Market_Code);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?VAL: Broker
CASE;

// IF RCD.Broker Code is Entered
IF RCD.Broker_Code <> *BLANK;

CASE;

// IF RCD.Broker Name DRV is blanks
IF RCD.Broker_Name_DRV = *BLANK;

// Send error message - 'Broker News not found.'
ERROR(USR3288);
MSGPARM(RCD.Broker_Code);

// IF *OTHERWISE
IF *OTHERWISE;

ENDIF;

ENDIF;

//?VAL: Salesperson
CASE;

// IF RCD.Salesperson Code is entered
IF RCD.Salesperson_Code <> *BLANK;

CASE;

// IF RCD.Salesperson Name DRV is blanks
IF RCD.Salesperson_Name_DRV = *BLANK;

// Send error message - 'Salesperson not found.'
ERROR(USR0039);
MSGPARM(RCD.Salesperson_Code);

ENDIF;

ENDIF;

//?VAL: Commission Schedule
CASE;

// IF RCD.Commission Schedule is Entered
IF RCD.Commission_Schedule <> *BLANK;

CASE;

// IF RCD.Accrual Description DRV is equal to blank
IF RCD.Accrual_Description_DRV = *BLANK;

// Send error message - 'Commission Schedule Not Found'
ERROR(USR4066);
MSGPARM(RCD.Commission_Schedule);

ENDIF;

ENDIF;

//?5=Display Commission Schedule
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF RCD.Commission Schedule is Entered
IF RCD.Commission_Schedule <> *BLANK;

// Call program WW Accrual Code Usage DF.
CALL PROGRAM(WW Accrual Code Usage DF) ('PPD8DFR');
PARAMETER(RCD.Commission_Schedule);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option is not allowed.'
ERROR(USR2262);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?8=Display Customers
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program Dsp Market Customers  DF.
CALL PROGRAM(Dsp Market Customers  DF) ('PMACDFR');
PARAMETER(RCD.Market_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Sales Market      CR) TYPE(CRTOBJ) FILE(PMDDREP)           AC1859430;
PARAMETER(RCD.Market_Code);
PARAMETER(RCD.Market_Desc);
PARAMETER(RCD.Market_Type);
PARAMETER(RCD.Broker_Code);
PARAMETER(RCD.Salesperson_Code);
PARAMETER(RCD.Regional_Salesperson);
PARAMETER(RCD.Commission_Schedule);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

 //?USER: Processing after Data update

 // Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
 PGM.*Sbmjob_override_string = RTVMSG(USR2684);
 PARAMETER(*JOBD);
 PARAMETER(*JOBD);
 PARAMETER(*JOBD_JOBD_JOBD);
 PARAMETER(*JOBD);

 // Call program Upd DM Chg MktSch     XF.
 SBMJOB;
 CALL PROGRAM(Upd DM Chg MktSch     XF) ('PMA8XFR');
 PARAMETER(DB1.Market_Code);
 SBMJOBEND;

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Sales Market      CH) TYPE(CHGOBJ) FILE(PMDDREP)           AC1859431;
PARAMETER(RCD.Market_Code);
PARAMETER(RCD.Market_Desc);
PARAMETER(RCD.Market_Type);
PARAMETER(RCD.Broker_Code);
PARAMETER(RCD.Salesperson_Code);
PARAMETER(RCD.Regional_Salesperson);
PARAMETER(RCD.Commission_Schedule);
PARAMETER(RCD.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 // Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
 PGM.*Sbmjob_override_string = RTVMSG(USR2684);
 PARAMETER(*JOBD);
 PARAMETER(*JOBD);
 PARAMETER(*JOBD_JOBD_JOBD);
 PARAMETER(*JOBD);

 // Call program Upd DM Chg MktSch     XF.
 SBMJOB;
 CALL PROGRAM(Upd DM Chg MktSch     XF) ('PMA8XFR');
 PARAMETER(DB1.Market_Code);
 SBMJOBEND;

}


//?USER: Extra processing after DBF update

CASE;

// IF PAR.Edit/Display Usr is Displayed Only
IF PAR.Edit_Display_Usr = 'D';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

EXECUTE FUNCTION(Del Sales Market      DL) TYPE(DLTOBJ) FILE(PMDDREP)           AC1859432;
PARAMETER(RCD.Market_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

