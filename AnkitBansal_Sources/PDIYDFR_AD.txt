// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDIYDFR
// ?Date: 14.08.2025 Time: 03:28:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

EXECUTE FUNCTION(RTV Hold Authorities   RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1289411;
PARAMETER(JOB.*USER);
PARAMETER(PAR.Credit_Hold_Authority);
PARAMETER(PAR.Production_Hold_Authority);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PAR.USR Status (Y/N) = CND.no
PAR.USR_Status_Y_N = 'N';

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

//?***** Change log and comments
DO;

//?WI642 JM 02/21/25 Load Order Change Log-USDA FAS 98 and FAS99
//? - Existing bug fix for cancel of credit release scenario
//? if order was previously Credit Released,then make Load Change Type
//? = Credit Release Cancelled
//?E4119 RMC 7/15/16 Dont Calc DDT if MG Created Load is Yes
//?E4119 RMC 5/20/16 Remove live with tpm check
//?*****
//?** 04/12/2013 RMC P0196 if pfs interface is live with ORDONL (Dailys)
//?   Then create PFS Download files for Order if not load tied yet.
//?*****
//?** 03/14/2014 LJB E003028 Create Log record when credit released
//?**   Add option 6 to display Order Header. This will give Accounting
//?**   access to Display Order Change Log so they can see Cred Releases
//?*****
//?** 10/16/2013 RMC E2824 Allow Release Credit Hold independent of Prod Hld
//?*****
//?** 06/05/2013 RMC E002622 Display Sales Rte for selection
//?*****
//?** 06/15/2012 RMC E002148 Display Load Sts for selection
//?*****
//?** 09/20/2011 LJB P001251 Export Order Automation Upload
//?** In lock edit checks, don't allow lock if errors still pending
//?** in the Order Detail record
//?*****
//?** 02/09/2011 RMC E01325
//?** Added Warehouse as a selector.
//?*****
//?** 11/25/2009 LJB W272
//?** Autolock, anyway, without checking the date
//?*****
//?** 09/30/2009 RMC E00495
//?** replace ship with Bill to cust, removed reason, hdr sts, blk ord sts
//?** 09/30/2009 LJB E00495
//?** Change to auto-lock only if shipping today. Also, RTV the
//?** carrier appt date/time, if entered - use for DDD/T calcs.
//?*****
//?** FP1054 07/24/09 RMC
//?** Dont lock load if shipping later than tomorrow, so pass in NO for
//?** Lock Opt override
//?*****
//?** OMSLJB3 02/06/2006 LJB
//?** Change the logical file and put Co# as a lower order key so
//?**   all companies for the selected date sort together.
//?*****
//?** T00014 03/27/2006 LJB
//?** Put blanks in new input parm for the DSP A/R Summary
ENDDO;

//?USER: Initialize subfile control

CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

// CTL.Credit Hold = CND.Yes
CTL.Credit_Hold = 'Y';

ENDIF;

SET CURSOR;

EXECUTE FUNCTION(Warehouse Desc DRV) TYPE(DRVFLD)                               AC1532477;
PARAMETER(CTL.Warehouse_Desc_DRV);
PARAMETER(CTL.Warehouse_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Warehouse_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Warehouse Description = DB1.Warehouse Description
  PAR.Warehouse_Description = DB1.Warehouse_Description;

 }

}


//?USER: Initialize subfile record from DBF record

//?Match company
CASE;

// IF CTL.Company Number is not equal to zero
IF CTL.Company_Number <> *ZERO;

CASE;

// IF DB1.Company Number NE CTL.Company Number
IF DB1.Company_Number <> CTL.Company_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Match warehouse E01325  2/09/2011 RMC
CASE;

// IF CTL.Warehouse Code is Not Blanks
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV 1st Warehouse      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1575817;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(LCL.Warehouse_Code);
{
 //?USER: Process Data record

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

}


CASE;

// IF LCL.Warehouse Code NE CTL.Warehouse Code
IF LCL.Warehouse_Code <> CTL.Warehouse_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Exclude Credit/Debit memos
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Exclude credit/debit memos
CASE;

// IF DB1.Billing Activity Type is Credit or Debit Memo
IF DB1.Billing_Activity_Type = '2'/'3';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV LoadSts/Carrier    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1648402;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Load_Status);
PARAMETER(RCD.Carrier_Code_Usr);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Load_Acceptance_Flag);
PARAMETER(NLL.Deadline_Departure_Date);
PARAMETER(NLL.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


//?Match Load Sts  E2148
CASE;

// IF CTL.Load Status is All but Blank
IF CTL.Load_Status = 'C'/'E'/'I'/'L'/'S'/'U';

CASE;

// IF RCD.Load Status NE CTL.Load Status
IF RCD.Load_Status <> CTL.Load_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// RCD.USR Credit Hold = DB1.Credit Hold
RCD.USR_Credit_Hold = DB1.Credit_Hold;

//?Init screen Credit hold to blank if No.
CASE;

// IF DB1.Credit Hold is No
IF DB1.Credit_Hold = 'N';

// RCD.USR Credit Hold = PAR.Credit Hold
RCD.USR_Credit_Hold = PAR.Credit_Hold;

ENDIF;

//?Init Prod hold to blank if No.
CASE;

// IF DB1.Production Hold is No
IF DB1.Production_Hold = 'N';

// RCD.Production Hold = PAR.Production Hold
RCD.Production_Hold = PAR.Production_Hold;

ENDIF;

//?Init New Cust hold to blank if No.
CASE;

// IF DB1.New Customer Hold is No
IF DB1.New_Customer_Hold = 'N';

// RCD.New Customer Hold = PAR.New Customer Hold
RCD.New_Customer_Hold = PAR.New_Customer_Hold;

ENDIF;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DB1.Bill_to_Customer);
PARAMETER(RCD.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Retrieve Credit Limits.    8/01/02
DO;

//?* A/R Credit Limit *
EXECUTE FUNCTION(RTV Credit Limits      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1280263;
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(LCL.Parent_Customer);
PARAMETER(LCL.Credit_Check_AR_Customer);
PARAMETER(LCL.Credit_Check_Parent_Cust);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(LCL.AR_Credit_Limit);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?* Parent Credit Limit *
EXECUTE FUNCTION(RTV Credit Limits      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1280263;
PARAMETER(LCL.Parent_Customer);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(LCL.Parent_Credit_Limit);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

//?Use Credit Limit based on flags per Tim -- 1/30/03
CASE;

// IF LCL.Credit Check A/R Customer is yes
IF LCL.Credit_Check_AR_Customer = 'Y';

// RCD.Credit Limit = LCL.A/R Credit Limit
RCD.Credit_Limit = LCL.AR_Credit_Limit;

//?Use Credit Limit based on flags per Tim -- 1/30/03
// IF LCL.Credit Check Parent Cust is yes
IF LCL.Credit_Check_Parent_Cust = 'Y';

// RCD.Credit Limit = LCL.Parent Credit Limit
RCD.Credit_Limit = LCL.Parent_Credit_Limit;

ENDIF;

//?Match credit limit              8/4/04
CASE;

// IF CTL.Credit Limit is not equal to zeros
IF CTL.Credit_Limit <> *ZERO;

CASE;

// IF RCD.Credit Limit NE CTL.Credit Limit
IF RCD.Credit_Limit <> CTL.Credit_Limit;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(RCD.Warehouse_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Trans_Contol_AS400_Plant);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV Parent Customer    RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1225254;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Parent_Customer);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Parent Exp f/hdr  RT) TYPE(RTVOBJ) FILE(CABBREP)           AC1781124;
PARAMETER(LCL.Parent_Customer);
PARAMETER(RCD.Total_Company_Exposure);
{
 //?USER: Initialize routine

 //?Initialize Parameters
 // PAR.Total Company Exposure = CND.Zero
 PAR.Total_Company_Exposure = *ZERO;

 //?USER: Process Data record

 //?Here is where we check if confirmed customer
 CASE;

 // IF PAR.Parent Customer EQ DB1.Parent Customer
 IF PAR.Parent_Customer = DB1.Parent_Customer;

 //?A/R Customers only
 CASE;

 // IF DB1.Ship To Customer EQ DB1.A/R Customer Number
 IF DB1.Ship_To_Customer = DB1.AR_Customer_Number;

 EXECUTE FUNCTION(RTV Cust Open Inv Ttl RT) TYPE(RTVOBJ) FILE(ARBDCPP)           AC1781102;
 PARAMETER(WRK.Remaining_Balance_Due);
 PARAMETER(DB1.AR_Customer_Number);
 {
  //?USER: Initialize routine

  // PAR.Remaining Balance Due = CON.*ZERO
  PAR.Remaining_Balance_Due = *ZERO;

  //?USER: Process Data record

  // PAR.Remaining Balance Due = PAR.Remaining Balance Due + DB1.Remaining Balance Due
  PAR.Remaining_Balance_Due = PAR.Remaining_Balance_Due + DB1.Remaining_Balance_Due;

 }

 // PAR.Total Company Exposure = PAR.Total Company Exposure + WRK.Remaining Balance Due
 PAR.Total_Company_Exposure = PAR.Total_Company_Exposure + WRK.Remaining_Balance_Due;

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 QUIT;

 ENDIF;

}


//?USER: Process subfile control (Pre-confirm)

//?Prompts
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

//?BILL TO CUST
CASE;

// IF PGM.*Cursor field <IS> CTL.Bill to Customer
IF PGM.*Cursor_field = CTL.Bill_to_Customer;

// Call program SEL Bill to Customer   SR.
CALL PROGRAM(SEL Bill to Customer   SR) ('PDU1SRR');
PARAMETER(CTL.Bill_to_Customer);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?Sales route
CASE;

// IF PGM.*Cursor field <IS> CTL.Sales Route Code
IF PGM.*Cursor_field = CTL.Sales_Route_Code;

// Call program SEL PD Sales Route Act SR.
CALL PROGRAM(SEL PD Sales Route Act SR) ('PDFWSRR');
PARAMETER(CTL.Sales_Route_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

//?Warehouse
CASE;

// IF PGM.*Cursor field <IS> CTL.Warehouse Code
IF PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL Prod Whse-No Sec   SR.
CALL PROGRAM(SEL Prod Whse-No Sec   SR) ('PMCLSRR');
PARAMETER(CTL.Warehouse_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Ship To Customer
CASE;

// IF PGM.*Cursor field <IS> CTL.Bill to Customer
IF PGM.*Cursor_field = CTL.Bill_to_Customer;

// Call program SEL Ship To Customer   SR.
CALL PROGRAM(SEL Ship To Customer   SR) ('PDR5SRR');
PARAMETER(CTL.Ship_To_Customer);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

QUIT;

ENDIF;

ENDIF;

// PAR.Error Status = CND.no
PAR.Error_Status = 'N';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Process subfile record (Pre-confirm)

//?Ensure that we are using fresh data
DO;

EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Ship_To_Address_Line_1);
PARAMETER(RCD.Ship_To_Address_Line_2);
PARAMETER(RCD.Ship_To_Address_Line_3);
PARAMETER(RCD.Ship_To_City);
PARAMETER(RCD.Ship_To_State_Code);
PARAMETER(RCD.Ship_To_Zip_Postal_Code);
PARAMETER(RCD.Bill_to_Customer);
PARAMETER(RCD.Bill_to_Name);
PARAMETER(RCD.Bill_to_Address_Line_1);
PARAMETER(RCD.Bill_to_Address_Line_2);
PARAMETER(RCD.Bill_to_Address_Line_3);
PARAMETER(RCD.Bill_to_City);
PARAMETER(RCD.Bill_to_State_Code);
PARAMETER(RCD.Bill_to_Zip_Postal_Code);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Requested_Ship_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Cancel_Date);
PARAMETER(RCD.Terms_Code);
PARAMETER(RCD.Special_Instructions);
PARAMETER(RCD.Special_Instructions_2);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Comment_Print_Acknowledge);
PARAMETER(RCD.Comment_Print_Inv_Cr_Memo);
PARAMETER(RCD.Comment_Print_Pick_Slip);
PARAMETER(RCD.Comment_Print_Ship_Doc);
PARAMETER(RCD.Reason_Code);
PARAMETER(RCD.Order_in_Use);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Header_Status_Last);
PARAMETER(RCD.Order_Type_Print_Status);
PARAMETER(RCD.Scheduled_Ship_Date);
PARAMETER(RCD.User_Original_Entry);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Order_Value_Total);
PARAMETER(RCD.Order_Weight_Total);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(RCD.Accounts_Receiv_Ent_1);
PARAMETER(RCD.Accounts_Receiv_Ent_2);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Absorbed_Freight_Rate_CWT);
PARAMETER(RCD.Rated_Freight);
PARAMETER(RCD.LTL_Flag);
PARAMETER(RCD.Price_Audit);
PARAMETER(RCD.Price_Status);
PARAMETER(RCD.Shipping_Method);
PARAMETER(RCD.Export_Status);
PARAMETER(RCD.Palletize);
PARAMETER(RCD.Shrink_Wrap);
PARAMETER(RCD.Slip_Sheet);
PARAMETER(RCD.Age_Code);
PARAMETER(RCD.Reefer_Temperature);
PARAMETER(RCD.Load_Type);
PARAMETER(RCD.Attach_to_Invoice_Number);
PARAMETER(RCD.Load_Plan_Order);
PARAMETER(RCD.Print_Pick_Slip);
PARAMETER(RCD.Resell_Reference_Number);
PARAMETER(RCD.Special_Comment_1);
PARAMETER(RCD.Special_Comment_2);
PARAMETER(RCD.Affect_Auto_Accruals);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(RCD.Manager_Level_Code);
PARAMETER(RCD.VP_Level_Code);
PARAMETER(RCD.Attach_to_Order_Number);
PARAMETER(RCD.Reason_for_Price_Audit);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.Invoice_Date);
PARAMETER(RCD.Event_Code);
PARAMETER(RCD.Trans_Contol_AS400_Plant);
PARAMETER(RCD.Modified_Flag);
PARAMETER(RCD.A_R_order_Value_Total);
PARAMETER(RCD.Billing_Activity_Type);
PARAMETER(RCD.Block_Order_Flag);
PARAMETER(RCD.Order_Certification_Flag);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Init Prod hold to blank if No.
CASE;

// IF RCD.Production Hold is No
IF RCD.Production_Hold = 'N';

// RCD.Production Hold = PAR.Production Hold
RCD.Production_Hold = PAR.Production_Hold;

ENDIF;

//?Init New Cust hold to blank if No.
CASE;

// IF RCD.New Customer Hold is No
IF RCD.New_Customer_Hold = 'N';

// RCD.New Customer Hold = PAR.New Customer Hold
RCD.New_Customer_Hold = PAR.New_Customer_Hold;

ENDIF;

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


ENDDO;

//?Refresh screen
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?Process A/R Summary Inquiry request.
CASE;

// IF RCD.*SFLSEL is *Customer Inquiry
IF RCD.*SFLSEL = '8'/'8';

//?***
//?Change to new A/R Summary Inquiry program
//?RMC 9/16/04  PKTR01
// WRK.USR Check Y/N Status = CND.blank
WRK.USR_Check_Y_N_Status = *BLANK;

// Call program DSP A/R Summary       XF.
CALL PROGRAM(DSP A/R Summary       XF) ('PPG5XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(WRK.USR_Check_Y_N_Status);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PAR.USR Status (Y/N) = CND.yes
PAR.USR_Status_Y_N = 'Y';

ENDIF;

//?Process Order Inquiry Detail request.
CASE;

// IF RCD.*SFLSEL is *Order Inquiry
IF RCD.*SFLSEL = '5'/'5';

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(PAR.Application_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PAR.USR Status (Y/N) = CND.yes
PAR.USR_Status_Y_N = 'Y';

ENDIF;

//?Release credit hold
CASE;

// IF RCD.*SFLSEL is *Release Credit Hold
IF RCD.*SFLSEL = '7'/'7';

CASE;

// IF RCD.Order in Use is yes
IF RCD.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

// IF RCD.Header Status is Cancelled
IF RCD.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

// IF RCD.Credit Hold is Yes
IF RCD.Credit_Hold = 'Y';

// RCD.USR Credit Hold = CND.No
RCD.USR_Credit_Hold = 'N';

//?Change header status - dont care about prod hold 10/13/13 E2824
CASE;

// IF RCD.New Customer Hold is Yes
IF RCD.New_Customer_Hold = 'Y';

// Send information message - 'Order &1 has other holds--only &2 will be released.'
MESSAGE(USR1844 *INFO);
MSGPARM(RCD.Order_Number);
MSGPARM('Cred  Hold');

//?Change header status - dont care about prod hold 10/13/13 E2824
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Header Status Last = RCD.Header Status
RCD.Header_Status_Last = RCD.Header_Status;

// RCD.Header Status = CND.Available
RCD.Header_Status = 'A';

ENDIF;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Order &1 not on Credit Hold--will not be released.'
ERROR(USR1843);
MSGPARM(RCD.Order_Number);
MSGPARM(RCD.*SFLSEL);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

ENDIF;

//?Put order on credit hold
CASE;

// IF RCD.*SFLSEL is *Credit Hold
IF RCD.*SFLSEL = '9'/'9';

CASE;

// IF RCD.Order in Use is yes
IF RCD.Order_in_Use = 'Y';

// Send error message - 'Order &2 in use by another user.'
ERROR(USR0664);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.Order_Number);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

// IF RCD.Header Status is Cancelled
IF RCD.Header_Status = 'X';

// Send error message - 'Order has been cancelled, refresh screen.'
ERROR(USR2341);
MSGPARM(RCD.*SFLSEL);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

// IF RCD.Credit Hold is Yes
IF RCD.Credit_Hold = 'Y';

// Send error message - 'Order &1 already on credit hold--no change will occur.'
ERROR(USR1845);
MSGPARM(RCD.Order_Number);
MSGPARM(RCD.*SFLSEL);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF WRK.Load Status is Locked thru Invoiced
IF WRK.Load_Status = 'I'/'L'/'S';

// Send error message - 'Order is on a locked load, order cannot be placed on hold.'
ERROR(USR2357);
MSGPARM(RCD.*SFLSEL);

// PAR.Error Status = CND.yes
PAR.Error_Status = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Header Status Last = RCD.Header Status
RCD.Header_Status_Last = RCD.Header_Status;

// RCD.Header Status = CND.Hold
RCD.Header_Status = 'H';

// RCD.USR Credit Hold = CND.Yes
RCD.USR_Credit_Hold = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

ENDIF;

//?6=Process Order Header Request to display change log
CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

// Call program Dsp Order Header       PV.
CALL PROGRAM(Dsp Order Header       PV) ('OMB5PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(PAR.Application_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Final processing (Pre-confirm)

//?ERROR STATUS 'YES' - DEFER CONFIRM
CASE;

// IF PAR.Error Status is yes
IF PAR.Error_Status = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?ERROR STATUS 'YES' - DEFER CONFIRM
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Status (Y/N) is no
IF PAR.USR_Status_Y_N = 'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Status (Y/N) = CND.no
PAR.USR_Status_Y_N = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?Release Credit hold
CASE;

// IF RCD.*SFLSEL is *Release Credit Hold
IF RCD.*SFLSEL = '7'/'7';

// RCD.Credit Hold = CND.No
RCD.Credit_Hold = 'N';

EXECUTE FUNCTION(CHG Crd Hld, Sts,Rsn   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1289345;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.USR_Reason_Code);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Header_Status_Last);
PARAMETER(RCD.Credit_Hold);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?If possible Lock Load when Credit Hold is released - OMS272
// WRK.STATUS = CND.No
WRK.STATUS = 'N';

//?Allow this function to autolock without checking the ship date. W272
//?However, don't lock if error still pending in Ord Dtl P001251 9/20/11 LJB
CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

EXECUTE FUNCTION(EDT Lock Load Edit/INF IF) TYPE(EXCINTFUN)                     AC1481296;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.*SFLSEL);
PARAMETER(WRK.STATUS);
PARAMETER(PAR.Error_Status);
PARAMETER('Y');
{
 //?Execute internal function

 //?** Chk for ord detail errors still pending  9.20.2011 P001251 LJB
 //?** Chg lock option override sts to *job date chk   8.23.09 E00495
 //?** Add lock option override sts for sched ship date chk  7.24.09 FP1054
 //?** Add Override Total Load Miles - WRK context     E00207 8/13/08
 EXECUTE FUNCTION(RTV Load for Load Plan RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1264653;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(PAR.Load_Status);
 PARAMETER(WRK.Reefer_Temperature);
 PARAMETER(PAR.Total_Load_Order_Weight);
 PARAMETER(WRK.Flat_Amount);
 PARAMETER(WRK.Allocate_Pounds_Miles);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Truck_Size);
 PARAMETER(WRK.Rated_Freight);
 PARAMETER(WRK.Load_Type);
 PARAMETER(WRK.Schedule_Sequence_Number);
 PARAMETER(WRK.Total_Load_Miles);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(WRK.Ship_From_Warehouse);
 PARAMETER(WRK.Ship_To_State_Code);
 PARAMETER(WRK.Carrier_Broker);
 PARAMETER(PAR.Load_Acceptance_Flag);
 PARAMETER(WRK.Override_Total_Load_Miles);
 PARAMETER(WRK.Shipping_Temp_C_F_txt);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(RTV Any Ord/Blk  on Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1448300;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.USR_Check_Y_N_Status);
 PARAMETER(PAR.Block_Order_Flag);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  // PAR.USR Check Y/N Status = CND.blank
  PAR.USR_Check_Y_N_Status = *BLANK;

  //?OMS203:  need to know if there are any Block orders on load
  // PAR.Block Order Flag = CND.Firm Order
  PAR.Block_Order_Flag = 'F';

  //?USER: Process Data record

  // PAR.USR Check Y/N Status = CND.yes
  PAR.USR_Check_Y_N_Status = 'Y';

  CASE;

  // IF DB1.Block Order Flag is Block Order
  IF DB1.Block_Order_Flag = 'B';

  // PAR.Block Order Flag = DB1.Block Order Flag
  PAR.Block_Order_Flag = DB1.Block_Order_Flag;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(EDT Lock Load Edits-INFIF) TYPE(EXCINTFUN)                     AC1481297;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 PARAMETER(WRK.Scheduled_Ship_Date);
 PARAMETER(PAR.Load_Status);
 PARAMETER(PAR.Total_Load_Order_Weight);
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Truck_Size);
 PARAMETER(PAR.Shipping_Method);
 PARAMETER(PAR.Load_Acceptance_Flag);
 PARAMETER(PAR.*SFLSEL);
 PARAMETER(PAR.Error_Status);
 PARAMETER(PAR.Block_Order_Flag);
 PARAMETER(PAR.STATUS);
 PARAMETER(PAR.Lock_option_override_sts);
 {
  //?Execute internal function

  //?assume will have error
  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  EXECUTE FUNCTION(VAL Set Int.Acc No Hdg IF) TYPE(EXCINTFUN)                     AC1460523;
  PARAMETER('LOCKLD');
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(PAR.Access_Denied_Y_N);
  {
   //?Execute internal function

   // PAR.User Profile Name = JOB.*USER
   PAR.User_Profile_Name = JOB.*USER;

   EXECUTE FUNCTION(VAL User/Appl No Exit  IF) TYPE(EXCINTFUN)                     AC1460535;
   PARAMETER(PAR.User_Profile_Name);
   PARAMETER(PAR.Application_Code);
   PARAMETER(WRK.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Allow_Multi_Company);
   PARAMETER(PAR.Default_Printer);
   PARAMETER(PAR.Salesperson_Code);
   PARAMETER(WRK.Access_Denied_Y_N);
   {
    //?Execute internal function

    //?RMC 5/11/09 Rtv default company from user profile --
    //?  Override user code model company if it exists
    EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Allow_Multi_Company);
    PARAMETER(PAR.Default_Printer);
    PARAMETER(PAR.Salesperson_Code);
    PARAMETER(LCL.Company_Number);
    PARAMETER(PAR.User_Code_Model);
    {
     //?USER: Processing if Data record not found

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    //?User Profile Record Not found
    CASE;

    // IF PGM.*Return code is *Record does not exist
    IF PGM.*Return_code = 'Y2U0005';

    // PAR.Access Denied (Y/N) = CND.yes
    PAR.Access_Denied_Y_N = 'Y';

    //?User Profile Record Not found
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Access Denied (Y/N) = CND.no
    PAR.Access_Denied_Y_N = 'N';

    ENDIF;

    CASE;

    // IF PAR.User Code Model is equal to blank
    IF PAR.User_Code_Model = *BLANK;

    EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
    PARAMETER(PAR.User_Profile_Name);
    PARAMETER(PAR.Application_Code);
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // IF *OTHERWISE
    IF *OTHERWISE;

    EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
    PARAMETER(PAR.User_Code_Model);
    PARAMETER(PAR.Application_Code);
    PARAMETER(PAR.Company_Number);
    PARAMETER(LCL.Warehouse_Code);
    {
     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    ENDIF;

    // PAR.Warehouse Code = LCL.Warehouse Code
    PAR.Warehouse_Code = LCL.Warehouse_Code;

    //?Return code when not normal for Application Profile
    CASE;

    // IF PGM.*Return code is *Normal
    IF PGM.*Return_code = *BLANK;

    // PAR.Access Denied (Y/N) = CND.no
    PAR.Access_Denied_Y_N = 'N';

    //?Return code when not normal for Application Profile
    // IF *OTHERWISE
    IF *OTHERWISE;

    // PAR.Access Denied (Y/N) = CND.yes
    PAR.Access_Denied_Y_N = 'Y';

    ENDIF;

    CASE;

    // IF LCL.Company Number is greater than zero
    IF LCL.Company_Number > *ZERO;

    // PAR.Company Number = LCL.Company Number
    PAR.Company_Number = LCL.Company_Number;

    CASE;

    // IF LCL.Warehouse Code is Not Blanks
    IF LCL.Warehouse_Code <> *BLANK;

    EXECUTE FUNCTION(RTV Prod Whse for Co  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1757887;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(LCL.Shipping_Company);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     CASE;

     // IF DB1.Record Status is Active
     IF DB1.Record_Status = 'A';

     CASE;

     // IF DB1.Production Warehouse Code is Warehouse Code not Blank
     IF DB1.Production_Warehouse_Code <> *BLANK;

     // PAR.Warehouse Code = DB1.Production Warehouse Code
     PAR.Warehouse_Code = DB1.Production_Warehouse_Code;

     QUIT;

     ENDIF;

     ENDIF;

    }

    ENDIF;

    ENDIF;

   }

   // PAR.Company Number = WRK.Company Number
   PAR.Company_Number = WRK.Company_Number;

   // PAR.Access Denied (Y/N) = WRK.Access Denied (Y/N)
   PAR.Access_Denied_Y_N = WRK.Access_Denied_Y_N;

   //?If access denied is no, rtv co. name
   CASE;

   // IF WRK.Access Denied (Y/N) is no
   IF WRK.Access_Denied_Y_N = 'N';

   EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
   PARAMETER(WRK.Company_Number);
   PARAMETER(PAR.Name);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  CASE;

  // IF PAR.Access Denied (Y/N) is yes
  IF PAR.Access_Denied_Y_N = 'Y';

  // Send information message - 'User not allowed to  Lock/Unlock Loads.'
  MESSAGE(USR2543 *INFO);

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(VAL no Stop Entered    RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1295710;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.USR_Orders_on_Load);
  {
   //?USER: Initialize routine

   // PAR.Status - Y or N = CND.no
   PAR.Status_Y_or_N = 'N';

   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   CASE;

   // IF DB1.Stop/Drop is EQ Zero
   IF DB1.Stop_Drop = *ZERO;

   // PAR.Status - Y or N = CND.yes
   PAR.Status_Y_or_N = 'Y';

   QUIT;

   ENDIF;

  }

  //?Validate lock request
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Send information message - 'No orders assigned to load &1; Can't lock'
  MESSAGE(USR2544 *INFO);
  MSGPARM(PAR.Load_ID);
  MSGPARM(PAR.*SFLSEL);

  //?Validate lock request
  // IF PAR.Block Order Flag is Block Order
  IF PAR.Block_Order_Flag = 'B';

  // Send information message - 'Load &2 contains Block Orders--no update allowed.'
  MESSAGE(USR2545 *INFO);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Load Status is Locked thru Invoiced
  IF PAR.Load_Status = 'I'/'L'/'S';

  // Send information message - 'Load &2 cannot be locked due to load status'
  MESSAGE(USR2546 *INFO);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Carrier Code EQ WRK.BLANK
  IF PAR.Carrier_Code = WRK.BLANK;

  // AND PAR.STATUS is No
  AND PAR.STATUS = 'N';

  // Send information message - 'Carrier must be entered for load &2'
  MESSAGE(USR2547 *INFO);
  MSGPARM(PAR.Carrier_Code);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Truck Size EQ WRK.BLANK
  IF PAR.Truck_Size = WRK.BLANK;

  // Send information message - 'Truck size must be entered for load &2'
  MESSAGE(USR2548 *INFO);
  MSGPARM(PAR.Truck_Size);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Shipping Method EQ WRK.BLANK
  IF PAR.Shipping_Method = WRK.BLANK;

  // Send information message - 'Shipping Method required to lock load.'
  MESSAGE(USR2549 *INFO);
  MSGPARM(PAR.Shipping_Method);

  //?Validate lock request
  // IF PAR.USR Orders on Load is yes
  IF PAR.USR_Orders_on_Load = 'Y';

  // Send information message - 'Function not allowed; Load &1 has orders tied to it which are not a
  MESSAGE(USR2550 *INFO);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF PAR.Load Acceptance Flag is Load not Accepted
  IF PAR.Load_Acceptance_Flag = 'U';

  // Send information message - 'Load cannot be locked, it is unaccepted.'
  MESSAGE(USR2551 *INFO);
  MSGPARM(PAR.Load_ID);

  //?Validate lock request
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Hold, Use-by load  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1304327;
  PARAMETER(PAR.Order_in_Use);
  PARAMETER(PAR.Header_Status);
  PARAMETER(PAR.Load_ID);
  {
   //?USER: Initialize routine

   //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?If find 1 order on load which is held/cancelled, set par flag and exit
   CASE;

   // IF DB1.Header Status is Hold
   IF DB1.Header_Status = 'H';

   // PAR.Header Status = DB1.Header Status
   PAR.Header_Status = DB1.Header_Status;

   QUIT;

   //?If find 1 order on load which is held/cancelled, set par flag and exit
   // IF DB1.Header Status is Cancelled
   IF DB1.Header_Status = 'X';

   // PAR.Header Status = DB1.Header Status
   PAR.Header_Status = DB1.Header_Status;

   QUIT;

   //?If find 1 order on load which is held/cancelled, set par flag and exit
   // IF DB1.Order in Use is yes
   IF DB1.Order_in_Use = 'Y';

   // PAR.Order in Use = DB1.Order in Use
   PAR.Order_in_Use = DB1.Order_in_Use;

   QUIT;

   ENDIF;

  }

  //?Error if held/cancelled/in use order(s) on load
  CASE;

  // IF PAR.Header Status is Hold
  IF PAR.Header_Status = 'H';

  // Send information message - 'Load &1 contains orders on Hold.  Load cannot be Locked.'
  MESSAGE(USR2552 *INFO);
  MSGPARM(PAR.Load_ID);
  MSGPARM(PAR.*SFLSEL);

  //?Error if held/cancelled/in use order(s) on load
  // IF PAR.Header Status is Cancelled
  IF PAR.Header_Status = 'X';

  // Send information message - 'Load &1 contains cancelled order(s).  Load cannot be Locked.'
  MESSAGE(USR2553 *INFO);
  MSGPARM(PAR.Load_ID);
  MSGPARM(PAR.*SFLSEL);

  //?Error if held/cancelled/in use order(s) on load
  // IF PAR.Order in Use is yes
  IF PAR.Order_in_Use = 'Y';

  // Send information message - 'Load &2 has order(s) in use; Load cannot be locked.'
  MESSAGE(USR2554 *INFO);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?Error if held/cancelled/in use order(s) on load
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Ord Requires Revw RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC2027682;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Order_Requires_Review);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?** Check for errors in Export Order Automation Upload   P001251
  CASE;

  // IF LCL.Order Requires Review is Yes
  IF LCL.Order_Requires_Review = 'Y';

  //?** Cannot lock load if errors in Order Detail         P001251
  // Send error message - 'Order has detail lines that require review'
  ERROR(USR4464);
  MSGPARM(PAR.*SFLSEL);
  MSGPARM(PAR.Load_ID);

  //?** Check for errors in Export Order Automation Upload   P001251
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Min & Max Pounds  RT) TYPE(RTVOBJ) FILE(OMFKREP)           AC1197715;
  PARAMETER(PAR.Truck_Size);
  PARAMETER(PAR.Maximum_pounds);
  PARAMETER(PAR.Minimum_pounds);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Do not want to lock the load if the Load Weight is not
  //?within range.  -Purva 5/5/99 C0007042
  //?Check minimum and maximum pounds
  CASE;

  // IF PAR.Total Weight LT PAR.Minimum pounds
  IF PAR.Total_Load_Order_Weight < PAR.Minimum_pounds;

  // Send information message - 'Load weight is less than the minimum weight allowed for load &1.'
  MESSAGE(USR1262 *INFO);
  MSGPARM(PAR.Load_ID);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  //?Check minimum and maximum pounds
  // IF *OTHERWISE
  IF *OTHERWISE;

  CASE;

  // IF PAR.Total Weight GT PAR.Maximum pounds
  IF PAR.Total_Load_Order_Weight > PAR.Maximum_pounds;

  // Send information message - 'Load weight is greater than maximum allowed for truck size.'
  MESSAGE(USR2231 *INFO);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Check Sched ship date if not called from a LOCK option  FP1054 7/24/09
  CASE;

  // IF PAR.Lock option override sts is No
  IF PAR.Lock_option_override_sts = 'N';

  // AND PAR.Scheduled Ship Date GT JOB.*Job date
  AND PAR.Scheduled_Ship_Date > JOB.*Job_date;

  // PAR.Error Status = CND.yes
  PAR.Error_Status = 'Y';

  //?Check Sched ship date if not called from a LOCK option  FP1054 7/24/09
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Send information message - 'Locking load pending'
  MESSAGE(USR1273 *INFO);

  // PAR.Error Status = CND.no
  PAR.Error_Status = 'N';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?***** Change Log and Comments
  DO;

  //?*****
  //?** 09/20/2011 LJB P001251  Export Order Automation Upload
  //?** Cannot lock load if there are errors still pending in the
  //?** Order Detail record
  //?*****
  //?** Auto lock if shipping today & no errors            E00495
  ENDDO;

 }

}


//?Lock Load if no errors
CASE;

// IF PAR.Error Status is no
IF PAR.Error_Status = 'N';

EXECUTE FUNCTION(RTV Load Status        RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1297640;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Load_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(UPD Lock Load Update   IF) TYPE(EXCINTFUN)                     AC1451094;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Load Header All,Mg RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2124794;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Total_Stops);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Total_Load_Miles);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Export_Status);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.TXT_field_not_needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(WRK.Numeric_Field_Not_Needed);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.MG_Created_Load);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?.** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 //?Fill in ship from whse deadline depart, if locking load and none entered
 CASE;

 // IF PAR.Ship From Warehouse EQ WRK.BLANK
 IF PAR.Ship_From_Warehouse = WRK.BLANK;

 EXECUTE FUNCTION(Rtv/Chg Whs,ld miles  RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC1471360;
 PARAMETER(PAR.Load_ID);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV First Order Whse   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1397882;
  PARAMETER(DB1.Load_ID);
  PARAMETER(1);
  PARAMETER(PAR.Ship_From_Warehouse);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   EXECUTE FUNCTION(RTV 1st Warehouse/Ctl  RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1360958;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(WRK.TXT_field_not_needed);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Warehouse Control  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304300;
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(PAR.Trans_Contol_AS400_Plant);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     // PGM.*Return code = CND.*Record does not exist
     PGM.*Return_code = 'Y2U0005';

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    MOVE *ALL (To: PAR From: DB1);

    QUIT;

   }

   QUIT;

  }

  CASE;

  // IF DB1.Warehouse Code EQ PAR.Ship From Warehouse
  IF DB1.Warehouse_Code = PAR.Ship_From_Warehouse;

  // PAR.Warehouse Code = CON.*BLANK
  PAR.Warehouse_Code = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Total Load Miles will = zeros if no
  //?** Miles Between Cities record exists
  //?** Override total load miles will take precedence over tlm  E00207
  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  CASE;

  // IF DB1.MG Created Load is Yes
  IF DB1.MG_Created_Load = 'Y';

  // PAR.Total Load Miles = DB1.Total Load Miles
  PAR.Total_Load_Miles = DB1.Total_Load_Miles;

  // PAR.Override Total Load Miles = DB1.Override Total Load Miles
  PAR.Override_Total_Load_Miles = DB1.Override_Total_Load_Miles;

  //?E4119 RMC 7/15/16  Upd miles if NOT MG LOAD
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Override_Total_Load_Miles);

  ENDIF;

  //?** Add override miles to the update            E00207 LJB 08/13/08
  EXECUTE FUNCTION(CHG Ship FrmWhs,ld mls CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1471384;
  PARAMETER(DB1.Load_ID);
  PARAMETER(PAR.Total_Load_Miles);
  PARAMETER(PAR.Ship_From_Warehouse);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Override_Total_Load_Miles);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 CASE;

 // IF PAR.MG Created Load is Not MG Created Load
 IF PAR.MG_Created_Load = *BLANK;

 //?** RTV carrier appt date/time                         E00495
 EXECUTE FUNCTION(RTV 1st Carr Apt Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1954073;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(WRK.LD_Carrier_Appt_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PAR.LD Carrier Appt Date = DB1.LD Carrier Appt Date
  PAR.LD_Carrier_Appt_Date = DB1.LD_Carrier_Appt_Date;

  // PAR.LD Carrier Appt Time = DB1.LD Carrier Appt Time
  PAR.LD_Carrier_Appt_Time = DB1.LD_Carrier_Appt_Time;

  QUIT;

 }

 //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 CASE;

 // IF WRK.LD Carrier Appt Date is Entered
 IF WRK.LD_Carrier_Appt_Date > 0;

 // PAR.Deadline Departure Date = WRK.LD Carrier Appt Date
 PAR.Deadline_Departure_Date = WRK.LD_Carrier_Appt_Date;

 //?** Use carr appt dt/tm, if entered, for DDD/T calcs   E00495
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Rtv 1st Ord Delv Dt/Tm RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456727;
 PARAMETER(PAR.Load_ID);
 PARAMETER(*ZERO);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Requested_Delivery_Time);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Rtv Delivery Date/Time RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1445871;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(WRK.Ship_To_Name);
  PARAMETER(WRK.Ship_To_City);
  PARAMETER(NLL.Ship_To_State_Code);
  PARAMETER(PAR.Requested_Delivery_Date);
  PARAMETER(PAR.Requested_Delivery_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 // PAR.Deadline Departure Time = PAR.Requested Delivery Time * CON.100 *
 PAR.Deadline_Departure_Time = PAR.Requested_Delivery_Time * 100;

 ENDIF;

 EXECUTE FUNCTION(CLC Departure Date/TimeIF) TYPE(EXCINTFUN)                     AC1456426;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 {
  //?Execute internal function

  //?***** Change Log and Comments
  DO;

  //?** The Date and Time being calculated are the latest date and time
  //?** that the truck can leave the warehouse and still make the
  //?** delivery on time.
  //?*****
  //?** E00495 LJB 09.23.2009
  //?** Carrier Appt Date and Time are in the parm Deadline Departure
  //?** date and time, if called from "UPD Ld Mi,Whse,DDD/T IF"
  //?*****
  //?** E00207 LJB 08/11/2008
  //?** Override Total Load Miles has been added to the
  //?** Retrieve Total Load Miles function
  //?*****
  //?** FP1251 LJB 12/26/2007
  //?** If no Miles To Next record, change SSD/T to zeros.
  //?** Scheduled Deliv Date has (should have) Requested Delivery Date in it
  ENDDO;

  EXECUTE FUNCTION(RTV Shipping Method    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1572676;
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Shipping_Method);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Shipping Method is Collect Truck
  IF LCL.Shipping_Method = 'CT';

  // OR LCL.Shipping Method is Collect Rail
  OR LCL.Shipping_Method = 'CR';

  //?** Treat CT & CR the same           FP1251 LJB 12/26/2007
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?** Calc miles between all stops then retrieve 1st stop miles
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  //?** Override miles will be returned, if entered
  // Call program CLC Total Load Miles   XF.
  CALL PROGRAM(CLC Total Load Miles   XF) ('PDW3XFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);

  EXECUTE FUNCTION(RTV 1st Stop Mileage   RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1456048;
  PARAMETER(PAR.Load_ID);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.Miles_to_next_stop);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  ENDIF;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  CASE;

  // IF PAR.Miles to next stop is Not Entered
  IF PAR.Miles_to_next_stop = *ZERO;

  // PAR.Scheduled Delivery Date = CND.not entered
  PAR.Scheduled_Delivery_Date = *ZERO;

  // PAR.Scheduled Delivery Time = CND.Not Entered
  PAR.Scheduled_Delivery_Time = *ZERO;

  //?** 11/16/2007 LJB FP1251 Error if no miles, set SDD/SDT to zeros
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Hours Required = CON.*ZERO
  PAR.Hours_Required = *ZERO;

  // LCL.Hours Required = CON.*ZERO
  LCL.Hours_Required = *ZERO;

  EXECUTE FUNCTION(RTV Legal Run Miles DscRT) TYPE(RTVOBJ) FILE(PDLGCPP)          AC1456042;
  PARAMETER(PAR.Miles_to_next_stop);
  PARAMETER(LCL.Hours_Required);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  //?09/09/11 PKD E1659 Additional Route Hours
  // Call program Rtv Addtnl Route Hrs  XF.
  CALL PROGRAM(Rtv Addtnl Route Hrs  XF) ('PMACXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(LCL.Additional_Route_Hours);

  // PAR.Hours Required = LCL.Hours Required + LCL.Additional Route Hours
  PAR.Hours_Required = LCL.Hours_Required + LCL.Additional_Route_Hours;

  //?get number of whole days + remaining hours
  CASE;

  // IF PAR.Hours Required is Zero
  IF PAR.Hours_Required = *ZERO;

  //?get number of whole days + remaining hours
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.@Days 5 = PAR.Hours Required / CON.24 *
  PAR.@Days_5 = PAR.Hours_Required / 24;

  // WRK.USR Hours 5.0 = PAR.@Days 5 * CON.24 *
  WRK.USR_Hours_5_0 = PAR.@Days_5 * 24;

  // PAR.USR Hours 5.0 = PAR.Hours Required - WRK.USR Hours 5.0
  PAR.USR_Hours_5_0 = PAR.Hours_Required - WRK.USR_Hours_5_0;

  // WRK.@Numeric 6,0 = PAR.USR Hours 5.0 * CON.10000 *
  WRK.@Numeric_60 = PAR.USR_Hours_5_0 * 10000;

  //?Subtract whole days
  CASE;

  // IF PAR.@Days 5 is greater than zero
  IF PAR.@Days_5 > *ZERO;

  // PAR.@Days 5 = PAR.@Days 5 * CON.-1 *
  PAR.@Days_5 = PAR.@Days_5 * -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  ENDIF;

  //?Calculate # whole days + hours left
  CASE;

  // IF WRK.@Numeric 6,0 GE PAR.Scheduled Delivery Time
  IF WRK.@Numeric_60 >= PAR.Scheduled_Delivery_Time;

  // WRK.@Numeric 6,0 = WRK.@Numeric 6,0 - PAR.Scheduled Delivery Time
  WRK.@Numeric_60 = WRK.@Numeric_60 - PAR.Scheduled_Delivery_Time;

  // PAR.@Days 5 = CON.-1
  PAR.@Days_5 = -1;

  // PAR.Scheduled Delivery Date = PAR.Scheduled Delivery Date + PAR.@Days 5 *DAYS
  PAR.Scheduled_Delivery_Date = DATEINCR(PAR.Scheduled_Delivery_Date PAR.@Days_5 'DY'
  1111111 'NONE' 'N' 1);

  // PAR.Scheduled Delivery Time = CON.240000 - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = 240000 - WRK.@Numeric_60;

  //?Calculate # whole days + hours left
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.Scheduled Delivery Time = PAR.Scheduled Delivery Time - WRK.@Numeric 6,0
  PAR.Scheduled_Delivery_Time = PAR.Scheduled_Delivery_Time - WRK.@Numeric_60;

  ENDIF;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(RTV Total Ld Mi/Sts    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1496186;
  PARAMETER(PAR.Load_ID);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Total_Load_Miles);
  PARAMETER(WRK.Override_Total_Load_Miles);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

 }

 ENDIF;

 ENDIF;

 //?---------------------------------------------------------------
 EXECUTE FUNCTION(RTV Last Stop Consign  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1377331;
 PARAMETER(PAR.Load_ID);
 PARAMETER(WRK.Ship_To_Customer);
 PARAMETER(WRK.Ship_To_Name);
 PARAMETER(WRK.Ship_To_Address_Line_1);
 PARAMETER(WRK.Ship_To_Address_Line_2);
 PARAMETER(WRK.Ship_To_Address_Line_3);
 PARAMETER(WRK.Ship_To_City);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(WRK.Ship_To_Zip_Postal_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(RTV for B.O.L. Print   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1377319;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(PAR.Ship_To_Name);
  PARAMETER(PAR.Ship_To_Address_Line_1);
  PARAMETER(PAR.Ship_To_Address_Line_2);
  PARAMETER(PAR.Ship_To_Address_Line_3);
  PARAMETER(PAR.Ship_To_City);
  PARAMETER(PAR.Ship_To_State_Code);
  PARAMETER(PAR.Ship_To_Zip_Postal_Code);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.TXT_field_not_needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  PARAMETER(WRK.Numeric_Field_Not_Needed);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  QUIT;

 }

 //?---------------------------------------------------------------
 //?OMS132:  Fill in Flat Amount as required
 CASE;

 // IF PAR.Total Stops is One Stop
 IF PAR.Total_Stops = 1;

 // AND PAR.Flat Amount EQ WRK.ZERO
 AND PAR.Flat_Amount = WRK.ZERO;

 //?get flat amount for destination city
 EXECUTE FUNCTION(RTV Ship To City/St-Ld RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1454218;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Destination_City);
 PARAMETER(PAR.State_Code);
 {
  //?USER: Initialize routine

  //?05/14/04 SLM PKTR01 Multi-Company - Funct chg remove Company RST or Pos
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // Execute function CVT Str to Upper Alpha US.
 EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
 PARAMETER(PAR.Destination_City);
 PARAMETER(WRK.Destination_City);
 {
  PDWEUFR:  PGM PARM(&STRIN &STROUT)

  CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
 }

 // PAR.Destination City = WRK.Destination City
 PAR.Destination_City = WRK.Destination_City;

 EXECUTE FUNCTION(RTV Destination Amount RT) TYPE(RTVOBJ) FILE(PDLECPP)          AC1454806;
 PARAMETER(PAR.Carrier_Broker);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Destination_City);
 PARAMETER(PAR.State_Code);
 PARAMETER(PAR.Flat_Amount);
 {
  //?USER: Process Data record

  //?only pass out FLAT amt.  (it could now be a ML rate too)  01/03/07
  CASE;

  // IF DB1.CDR Unit of Measure is Flat
  IF DB1.CDR_Unit_of_Measure = 'FL';

  MOVE *ALL (To: PAR From: DB1);

  ENDIF;

 }

 ENDIF;

 //?Calc Load U/M           -- RMC 6/16/06
 DO;

 //?** All boxes=BX, All combos=CB, Any mix of the two=MX   E00239 11/12/08
 // Call program RTV UM/Whs Code,BX Qty XF.
 CALL PROGRAM(RTV UM/Whs Code,BX Qty XF) ('PPYXXFR');
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Load_U_M);

 ENDDO;

 EXECUTE FUNCTION(CHG Lock Load Update   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1454811;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER('L');
 PARAMETER(PAR.Flat_Amount);
 PARAMETER(PAR.Ship_From_Warehouse);
 PARAMETER(PAR.Ship_To_State_Code);
 PARAMETER(PAR.Deadline_Departure_Date);
 PARAMETER(PAR.Deadline_Departure_Time);
 PARAMETER(PAR.Load_U_M);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

 }

 //?OMS261:  if sched to ship today, print prelim pick at all whses
 //?Sched to ship today
 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 EXECUTE FUNCTION(RTV All Whses on Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1483728;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  EXECUTE FUNCTION(RTV All Whses on Order RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1483729;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.USR_CDE_Parm_1);
  PARAMETER(PAR.USR_CDE_Parm_2);
  PARAMETER(PAR.USR_CDE_Parm_3);
  PARAMETER(PAR.USR_CDE_Parm_4);
  PARAMETER(PAR.USR_CDE_Parm_5);
  PARAMETER(PAR.USR_CDE_Parm_6);
  PARAMETER(PAR.USR_CDE_Parm_7);
  PARAMETER(PAR.USR_CDE_Parm_8);
  PARAMETER(PAR.USR_CDE_Parm_9);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Warehouse Code EQ PAR.USR Warehouse Code
   IF DB1.Warehouse_Code = PAR.USR_Warehouse_Code;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 1
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_1;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 2
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_2;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 3
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_3;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 4
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_4;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 5
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_5;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 6
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_6;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 7
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_7;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 8
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_8;

   // IF DB1.Warehouse Code EQ PAR.USR CDE Parm 9
   IF DB1.Warehouse_Code = PAR.USR_CDE_Parm_9;

   // IF *OTHERWISE
   IF *OTHERWISE;

   //?current warehouse not already being used
   //?Fill in first blank warehouse
   CASE;

   // IF PAR.USR Warehouse Code EQ WRK.BLANK
   IF PAR.USR_Warehouse_Code = WRK.BLANK;

   // PAR.USR Warehouse Code = DB1.Warehouse Code
   PAR.USR_Warehouse_Code = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 1 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_1 = WRK.BLANK;

   // PAR.USR CDE Parm 1 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_1 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 2 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_2 = WRK.BLANK;

   // PAR.USR CDE Parm 2 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_2 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 3 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_3 = WRK.BLANK;

   // PAR.USR CDE Parm 3 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_3 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 4 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_4 = WRK.BLANK;

   // PAR.USR CDE Parm 4 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_4 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 5 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_5 = WRK.BLANK;

   // PAR.USR CDE Parm 5 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_5 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 6 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_6 = WRK.BLANK;

   // PAR.USR CDE Parm 6 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_6 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 7 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_7 = WRK.BLANK;

   // PAR.USR CDE Parm 7 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_7 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 8 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_8 = WRK.BLANK;

   // PAR.USR CDE Parm 8 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_8 = DB1.Warehouse_Code;

   //?Fill in first blank warehouse
   // IF PAR.USR CDE Parm 9 EQ WRK.BLANK
   IF PAR.USR_CDE_Parm_9 = WRK.BLANK;

   // PAR.USR CDE Parm 9 = DB1.Warehouse Code
   PAR.USR_CDE_Parm_9 = DB1.Warehouse_Code;

   ENDIF;

   ENDIF;

  }

 }

 // PAR.Company Number Pass   USR = PAR.Company Number
 PAR.Company_Number_Pass_USR = PAR.Company_Number;

 // PAR.Order Number 1  PASS  USR = PAR.Load ID
 PAR.Order_Number_1_PASS_USR = PAR.Load_ID;

 // PAR.Date 1          PASS  USR = PAR.Scheduled Ship Date
 PAR.Date_1_PASS_USR = PAR.Scheduled_Ship_Date;

 // WRK.USR Select/Omit Flag = CND.Select
 WRK.USR_Select_Omit_Flag = 'S';

 // WRK.USR Detail or Summary = CND.Detail
 WRK.USR_Detail_or_Summary = 'D';

 // WRK.AUTO PRINT PRELIM PICK = CND.AUTO PRINT YES
 WRK.AUTO_PRINT_PRELIM_PICK = 'Y';

 //?letting all the other parms default in the CL
 //?If warehouse exists for load then print.
 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // Call program Pass Pre Pick @LoadLockUP.
 CALL PROGRAM(Pass Pre Pick @LoadLockUP) ('PDBDUPC');
 PARAMETER(PAR.Return_Code_Usr);
 PARAMETER('OMS');
 PARAMETER('PDIZPCLP');
 PARAMETER(WRK.USR_Detail_or_Summary);
 PARAMETER('Auto Print Prelim. Pick');
 PARAMETER(WRK.PRT_Printer_Device);
 PARAMETER(WRK.PRT_Hold_Output_Sts);
 PARAMETER(WRK.PRT_Save_Output_Sts);
 PARAMETER(WRK.PRT_Night_Queue_Run_Sts);
 PARAMETER(WRK.PRT_Night_Queue);
 PARAMETER(PAR.Company_Number_Pass_USR);
 PARAMETER(PAR.Date_1_PASS_USR);
 PARAMETER(PAR.Order_Number_1_PASS_USR);
 PARAMETER(WRK.System_Value_Numeric);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.USR_CDE_Parm_1);
 PARAMETER(PAR.USR_CDE_Parm_2);
 PARAMETER(PAR.USR_CDE_Parm_3);
 PARAMETER(PAR.USR_CDE_Parm_4);
 PARAMETER(PAR.USR_CDE_Parm_5);
 PARAMETER(PAR.USR_CDE_Parm_6);
 PARAMETER(PAR.USR_CDE_Parm_7);
 PARAMETER(PAR.USR_CDE_Parm_8);
 PARAMETER(PAR.USR_CDE_Parm_9);
 PARAMETER(WRK.USR_Select_Omit_Flag);
 PARAMETER(WRK.AUTO_PRINT_PRELIM_PICK);

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(EDT Lock Load          IF) TYPE(EXCINTFUN)                     AC1419469;
 PARAMETER(PAR.Load_ID);
 PARAMETER(PAR.Company_Number);
 {
  //?Execute internal function

  //?*** Return Plant Code from first Order Header
  EXECUTE FUNCTION(zzV for Accusort Load  RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1322485;
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Trans_Contol_AS400_Plant);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1305919;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(WRK.Trans_Contol_AS400_Plant);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    EXECUTE FUNCTION(RTV Trans Control      RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1428569;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Order_Number);
    PARAMETER(WRK.Trans_Contol_AS400_Plant);
    {
     //?USER: Process Data record

     CASE;

     // IF DB1.Detail Line Status is Not cancelled
     IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

     EXECUTE FUNCTION(Rtv Desc/Trans Control RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1304130;
     PARAMETER(DB1.Warehouse_Code);
     PARAMETER(WRK.Warehouse_Description);
     PARAMETER(PAR.Trans_Contol_AS400_Plant);
     {
      //?USER: Processing if Data record not found

      MOVE *ALL (To: PAR From: CON);

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

     QUIT;

     ENDIF;

    }

    CASE;

    // IF WRK.Trans Contol AS400/Plant is Plant
    IF WRK.Trans_Contol_AS400_Plant = 'P';

    // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
    PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

    QUIT;

    ENDIF;

   }

   CASE;

   // IF WRK.Trans Contol AS400/Plant is Plant
   IF WRK.Trans_Contol_AS400_Plant = 'P';

   // PAR.Trans Contol AS400/Plant = WRK.Trans Contol AS400/Plant
   PAR.Trans_Contol_AS400_Plant = WRK.Trans_Contol_AS400_Plant;

   QUIT;

   ENDIF;

  }

  EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
  PARAMETER(PAR.Company_Number);
  PARAMETER('LDORDD');
  PARAMETER(LCL.PFS_AccuSort_Active);
  PARAMETER(LCL.PFS_Carlisle_Active);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?UPD:  AccuSort
  CASE;

  // IF LCL.PFS AccuSort Active is Yes
  IF LCL.PFS_AccuSort_Active = 'Y';

  //?AccuSort:  Create Order Header and Order Detail
  CASE;

  // IF PAR.Trans Contol AS400/Plant is Plant
  IF PAR.Trans_Contol_AS400_Plant = 'P';

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('L');

  // Call program Zzz AS Order Hdr/Dtl   XF.
  CALL PROGRAM(Zzz AS Order Hdr/Dtl   XF) ('PDQPXFR');
  PARAMETER(PAR.Load_ID);
  PARAMETER(PAR.Company_Number);

  // Call program Zzz Lock/Unlock Box ID XF.
  CALL PROGRAM(Zzz Lock/Unlock Box ID XF) ('PDXFXFR');
  PARAMETER('U');

  ENDIF;

  ENDIF;

  //?UPD:  Carlisle
  CASE;

  // IF LCL.PFS Carlisle Active is Yes
  IF LCL.PFS_Carlisle_Active = 'Y';

  // Call program PFS Lock Load/Order   XF.
  CALL PROGRAM(PFS Lock Load/Order   XF) ('PPNLXFR');
  PARAMETER(PAR.Load_ID);

  ENDIF;

  //?** 07/28/2017 RMC R131331 if load had a whs with edi wso interchange, then
  // Call program Exc Create EDI f/Lock XF.
  CALL PROGRAM(Exc Create EDI f/Lock XF) ('PUDNXFR');
  PARAMETER(PAR.Load_ID);

 }

 CASE;

 // IF JOB.*PROGRAM is PRT Audit Report
 IF JOB.*PROGRAM = 'PDSNPFR';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Clr Program Message Q  US.
 EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
 {
  * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
  C                     CALL 'Y2CLMSC'
  C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
  C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
  * RESET FIRST MESSAGE ONLY FLAG.
  C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
 }

 //?Sched to ship today
 CASE;

 // IF PAR.Scheduled Ship Date EQ JOB.*Job date
 IF PAR.Scheduled_Ship_Date = JOB.*Job_date;

 CASE;

 // IF PAR.USR Warehouse Code is Warehouse Code not Blank
 IF PAR.USR_Warehouse_Code <> *BLANK;

 // Call program RTV Warehouse Dflt PrtrXF.
 CALL PROGRAM(RTV Warehouse Dflt PrtrXF) ('PDCHXFR');
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(LCL.Include_in_Auto_Pre_Pick);

 //?RMC DLY029 10/30/07 - sndmsg only if Warehouse is set up for auto-print
 CASE;

 // IF LCL.Include in Auto Pre Pick is Incl in Auto Prelim Pick
 IF LCL.Include_in_Auto_Pre_Pick = 'Y';

 // Send information message - 'Preliminary Pick Printing at printer for warehouses: &1 &2 &3 &4 &5
 MESSAGE(USR2565 *INFO);
 MSGPARM(PAR.USR_Warehouse_Code);
 MSGPARM(PAR.USR_CDE_Parm_1);
 MSGPARM(PAR.USR_CDE_Parm_2);
 MSGPARM(PAR.USR_CDE_Parm_3);
 MSGPARM(PAR.USR_CDE_Parm_4);
 MSGPARM(PAR.USR_CDE_Parm_5);
 MSGPARM(PAR.USR_CDE_Parm_6);
 MSGPARM(PAR.USR_CDE_Parm_7);
 MSGPARM(PAR.USR_CDE_Parm_8);
 MSGPARM(PAR.USR_CDE_Parm_9);

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send information message - 'Preliminary Pick not printed, no order details.'
 MESSAGE(USR2715 *INFO);

 ENDIF;

 ENDIF;

 ENDIF;

 //?***** Change Log and comments
 DO;

 //?** 07/15/16  RMC E4119 Dont recalc deadl depart,miles if MG Created Load
 //?** 09/30/2009 LJB E00495
 //?**   Use carrier date/time, if entered, to calc DDD/T
 //?** 11/16/2007 LJB FP1251 Deadline Depart Date and Time will be
 //?** zeros if there is no Miles Between Cities record
 ENDDO;

}


// WRK.Load Change Type = CND.Lock Load
WRK.Load_Change_Type = 'LOCK';

// WRK.Department Control Code = CND.Traffic Dept
WRK.Department_Control_Code = 'TRF';

// Call program CRT Load/Order Chg Log XF.
CALL PROGRAM(CRT Load/Order Chg Log XF) ('PDADXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Load_Change_Type);
PARAMETER(WRK.Department_Control_Code);
PARAMETER(WRK.Load_Status);
PARAMETER('L');
PARAMETER(JOB.*USER);
PARAMETER(JOB.*PROGRAM);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(*ZERO);

// Send information message - 'Load &1 has been locked.'
MESSAGE(USR2559 *INFO);
MSGPARM(RCD.Load_ID);

// RCD.Load Status = CND.Lock
RCD.Load_Status = 'L';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

ENDIF;

CASE;

// IF RCD.Load ID is Blank
IF RCD.Load_ID = *ZERO;

//?P00196 RMC 4/12/14 CAT2 Dailys-Interface Cond "ORDONL" - send orders only
CASE;

// IF DB1.Load ID is Blank
IF DB1.Load_ID = *ZERO;

EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
PARAMETER(RCD.Company_Number);
PARAMETER('ORDONL');
PARAMETER(LCL.PFS_AccuSort_Active);
PARAMETER(LCL.PFS_Carlisle_Active);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF LCL.PFS Carlisle Active is Yes
IF LCL.PFS_Carlisle_Active = 'Y';

// LCL.Load Status = CND.*Blank
LCL.Load_Status = *BLANK;

// Call program Zzz Order Header      XF.
CALL PROGRAM(Zzz Order Header      XF) ('PBEYXFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Load_Status);

ENDIF;

ENDIF;

ENDIF;

// LCL.Change Log Prior Value = CON.Y
LCL.Change_Log_Prior_Value = 'Y';

// LCL.Change Log New Value = CON.N
LCL.Change_Log_New_Value = 'N';

// LCL.Load Change Type = CND.Credit Released
LCL.Load_Change_Type = 'CRDRLS';

// LCL.Department Control Code = CND.Accounting
LCL.Department_Control_Code = 'ACC';

//?* Write Credit Release log record                     E003028
//?Set Load ID to zeros if order is not yet assigned to a load  E003028
CASE;

// IF RCD.Load ID is Blank
IF RCD.Load_ID = *ZERO;

// LCL.Load ID = CND.Blank
LCL.Load_ID = *ZERO;

//?Set Load ID to zeros if order is not yet assigned to a load  E003028
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Load ID = RCD.Load ID
LCL.Load_ID = RCD.Load_ID;

ENDIF;

// LCL.*Date1 (ending) = JOB.*Job date + CON.-90 *DAYS
LCL.*Date1_ending = DATEINCR(JOB.*Job_date '-90' 'DY' 1111111 'NONE' 'N' 1);

// LCL.User Id = JOB.*USER
LCL.User_Id = JOB.*USER;

// Call program CRT LOCL-Ord,no load   X1.
CALL PROGRAM(CRT LOCL-Ord,no load   X1) ('PBL8XFR');
PARAMETER(LCL.*Date1_ending);
PARAMETER(000001);
PARAMETER(LCL.Load_ID);
PARAMETER(*ZERO);
PARAMETER(LCL.Load_Change_Type);
PARAMETER(LCL.Department_Control_Code);
PARAMETER(LCL.Change_Log_Prior_Value);
PARAMETER(LCL.Change_Log_New_Value);
PARAMETER(LCL.User_Id);
PARAMETER(RCD.Job_Name);
PARAMETER(RCD.Carrier_Code);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);

// PGM.*Reload subfile = CND.*NO
PGM.*Reload_subfile = 'N';

ENDIF;

//?Credit Hold
CASE;

// IF RCD.*SFLSEL is *Credit Hold
IF RCD.*SFLSEL = '9'/'9';

// RCD.Credit Hold = CND.Yes
RCD.Credit_Hold = 'Y';

EXECUTE FUNCTION(CHG Crd Hld, Sts,Rsn   CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1289345;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.USR_Reason_Code);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Header_Status_Last);
PARAMETER(RCD.Credit_Hold);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 // Call program TRG Order Hdr CHG Trig XT.
 CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Type_Sales);
 PARAMETER(DB1.AR_Customer_Number);
 PARAMETER(DB1.Ship_To_Customer);
 PARAMETER(DB1.Ship_To_Name);
 PARAMETER(DB1.Ship_To_Address_Line_1);
 PARAMETER(DB1.Ship_To_Address_Line_2);
 PARAMETER(DB1.Ship_To_Address_Line_3);
 PARAMETER(DB1.Ship_To_City);
 PARAMETER(DB1.Ship_To_State_Code);
 PARAMETER(DB1.Ship_To_Zip_Postal_Code);
 PARAMETER(DB1.Bill_to_Customer);
 PARAMETER(DB1.Bill_to_Name);
 PARAMETER(DB1.Bill_to_Address_Line_1);
 PARAMETER(DB1.Bill_to_Address_Line_2);
 PARAMETER(DB1.Bill_to_Address_Line_3);
 PARAMETER(DB1.Bill_to_City);
 PARAMETER(DB1.Bill_to_State_Code);
 PARAMETER(DB1.Bill_to_Zip_Postal_Code);
 PARAMETER(DB1.Customer_Purchase_Order_#);
 PARAMETER(DB1.Order_Date);
 PARAMETER(DB1.Requested_Ship_Date);
 PARAMETER(DB1.Actual_Shipped_Date);
 PARAMETER(DB1.Cancel_Date);
 PARAMETER(DB1.Terms_Code);
 PARAMETER(DB1.Special_Instructions);
 PARAMETER(DB1.Special_Instructions_2);
 PARAMETER(DB1.Carrier_Code);
 PARAMETER(DB1.Comment_Print_Acknowledge);
 PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
 PARAMETER(DB1.Comment_Print_Pick_Slip);
 PARAMETER(DB1.Comment_Print_Ship_Doc);
 PARAMETER(DB1.Reason_Code);
 PARAMETER(DB1.Order_in_Use);
 PARAMETER(DB1.Header_Status);
 PARAMETER(DB1.Header_Status_Last);
 PARAMETER(DB1.Order_Type_Print_Status);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER(DB1.User_Original_Entry);
 PARAMETER(DB1.Date_of_Original_Entry);
 PARAMETER(DB1.Order_Value_Total);
 PARAMETER(DB1.Order_Weight_Total);
 PARAMETER(DB1.Credit_Hold);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(DB1.New_Customer_Hold);
 PARAMETER(DB1.Requested_Delivery_Date);
 PARAMETER(DB1.Requested_Delivery_Time);
 PARAMETER(DB1.Accounts_Receiv_Ent_1);
 PARAMETER(DB1.Accounts_Receiv_Ent_2);
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
 PARAMETER(DB1.Rated_Freight);
 PARAMETER(DB1.LTL_Flag);
 PARAMETER(DB1.Price_Audit);
 PARAMETER(DB1.Price_Status);
 PARAMETER(DB1.Shipping_Method);
 PARAMETER(DB1.Export_Status);
 PARAMETER(DB1.Palletize);
 PARAMETER(DB1.Shrink_Wrap);
 PARAMETER(DB1.Slip_Sheet);
 PARAMETER(DB1.Age_Code);
 PARAMETER(DB1.Reefer_Temperature);
 PARAMETER(DB1.Load_Type);
 PARAMETER(DB1.Attach_to_Invoice_Number);
 PARAMETER(DB1.Load_Plan_Order);
 PARAMETER(DB1.Print_Pick_Slip);
 PARAMETER(DB1.Resell_Reference_Number);
 PARAMETER(DB1.Special_Comment_1);
 PARAMETER(DB1.Special_Comment_2);
 PARAMETER(DB1.Affect_Auto_Accruals);
 PARAMETER(DB1.Sales_Route_Code);
 PARAMETER(DB1.Manager_Level_Code);
 PARAMETER(DB1.VP_Level_Code);
 PARAMETER(DB1.Attach_to_Order_Number);
 PARAMETER(DB1.Reason_for_Price_Audit);
 PARAMETER(DB1.Invoice_Number);
 PARAMETER(DB1.Invoice_Suffix);
 PARAMETER(DB1.Invoice_Date);
 PARAMETER(DB1.Event_Code);
 PARAMETER(DB1.Trans_Contol_AS400_Plant);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 PARAMETER(DB1.Block_Order_Flag);
 PARAMETER(DB1.Order_Certification_Flag);
 PARAMETER(DB1.Invoice_Order_Value_Tot);
 PARAMETER(DB1.Process_Sts_for_3C);
 PARAMETER(DB1.Order_Conf_Fax_Sts);
 PARAMETER(DB1.Manifest_Fax_Sts);
 PARAMETER(DB1.Invoice_Fax_Sts);
 PARAMETER(DB1.Transfer_in_Storage_Ind);
 PARAMETER(DB1.Email_Cust_On_Order_Ship);
 PARAMETER(DB1.Order_Emailed);
 PARAMETER(DB1.Export_Docs_Go_w_Driver);
 PARAMETER(DB1.Shipping_Temp_Code_C_F);
 PARAMETER(DB1.Broker_Order_Status);
 PARAMETER(DB1.Air_Freight_Order);
 PARAMETER(DB1.Order_Requires_Review);
 PARAMETER(DB1.OH_Load_Plan_Ready);
 PARAMETER(DB1.Export_USDA_Approved);
 PARAMETER(DB1.HPB_Ship_to_Warehouse);
 PARAMETER(DB1.OH_TF_Exempt_Code);
 PARAMETER(DB1.OH_Appt_Confirmation_Dt);
 PARAMETER(DB1.JPN_Invoice_Issuance_Date);
 PARAMETER(DB1.Load_Actual_Shipped_Date);
 PARAMETER(DB1.Load_BOL_Complete_Date);
 PARAMETER(DB1.Load_Truck_Departure_Date);
 PARAMETER(DB1.Maximum_Gross_Weight);
 PARAMETER(DB1.Time_of_Original_Entry);
 PARAMETER(DB1.OH_Appt_Confirmation_Tm);
 PARAMETER(DB1.Load_BOL_Complete_Time);
 PARAMETER(DB1.Load_Truck_Departure_Time);
 PARAMETER(DB1.Act_Frt_Reference_Amount);
 PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
 PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
 PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
 PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
 PARAMETER(DB1.Claim_Number);
 PARAMETER(DB1.EDI_Status_1);
 PARAMETER(DB1.EDI_Status_2);
 PARAMETER(DB1.EDI_Status_3);
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);

}


//?* Check for an existing Credit Released record        E003028
// PAR.Load Change Type = CND.Credit Released
PAR.Load_Change_Type = 'CRDRLS';

// LCL.User Id = JOB.*USER
LCL.User_Id = JOB.*USER;

EXECUTE FUNCTION(RTV Get Create DateTimeRT) TYPE(RTVOBJ) FILE(PDLHCPP)          AC2241014;
PARAMETER(PAR.Created_Date);
PARAMETER(PAR.Created_Time);
PARAMETER(RCD.Load_ID);
PARAMETER(PAR.Load_Change_Type);
PARAMETER(RCD.Order_Number);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

 QUIT;

}


//?* If order was previously Credit Released, Cancel it  E003028
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// LCL.Department Control Code = CND.Accounting
LCL.Department_Control_Code = 'ACC';

// LCL.Load Change Type = CND.Credit Release Cancelled
LCL.Load_Change_Type = 'CRDRLX';

// LCL.@Change Type 2 = LCL.Load Change Type
LCL.@Change_Type_2 = LCL.Load_Change_Type;

// Call program CHG LOCL-Ord,no load   XF.
CALL PROGRAM(CHG LOCL-Ord,no load   XF) ('PBMAXFR');
PARAMETER(PAR.Created_Date);
PARAMETER(PAR.Created_Time);
PARAMETER(PAR.Sequence_Number);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Stop_Drop);
PARAMETER(PAR.Load_Change_Type);
PARAMETER(PAR.Department_Control_Code);
PARAMETER(PAR.Change_Log_Prior_Value);
PARAMETER(PAR.Change_Log_New_Value);
PARAMETER(PAR.User_Id);
PARAMETER(PAR.Job_Name);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Carrier_Broker_Carrier_Co);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.@Change_Type_2);

ENDIF;

// PGM.*Reload subfile = CND.*NO
PGM.*Reload_subfile = 'N';

ENDIF;

//?Reload
CASE;

// IF RCD.*SFLSEL is *Reset to blank
IF RCD.*SFLSEL = *BLANK;

CASE;

// IF RCD.USR Reason Code NE RCD.Reason Code
IF RCD.USR_Reason_Code <> RCD.Reason_Code;

// OR RCD.USR Credit Hold NE RCD.Credit Hold
OR RCD.USR_Credit_Hold <> RCD.Credit_Hold;

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');
{
 * CLEAR MESSAGES FROM PROGRAM MESSAGE QUEUE.
 C                     CALL 'Y2CLMSC'
 C                     PARM ##PGM     ZAPGMQ           ALREADY DEFINED
 C                     PARM '*SAME'   ZAPGRL           ALREADY DEFINED
 * RESET FIRST MESSAGE ONLY FLAG.
 C                     MOVEL'Y'       ZAFSMS           ALREADY DEFINED
}


ENDIF;

ENDIF;

CASE;

// IF RCD.Load ID is GT Zero
IF RCD.Load_ID > *ZERO;

//?E4119 RMC 5/20/16 Dont do if MG Created Load
EXECUTE FUNCTION(RTV MG Created Load   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2124762;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.MG_Created_Load);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.MG Created Load is Yes
IF LCL.MG_Created_Load = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Call program CLC Deadline Date/Time XF.
CALL PROGRAM(CLC Deadline Date/Time XF) ('PMP9XFR');
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
PARAMETER(NLL.Requested_Delivery_Date);

EXECUTE FUNCTION(CHG Deadline Dep D/T   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1493670;
PARAMETER(RCD.Load_ID);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(CHG Deadline Date/Time RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1496989;
PARAMETER(RCD.Load_ID);
PARAMETER(*ZERO);
PARAMETER(WRK.Deadline_Departure_Date);
PARAMETER(WRK.Deadline_Departure_Time);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 QUIT;

 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Deadline Date/Time CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1496963;
 PARAMETER(PAR.Load_ID);
 PARAMETER(DB1.Stop_Drop_Sequence_Number);
 PARAMETER(PAR.Deadline_Depart_DT_HDR);
 PARAMETER(PAR.Deadline_Depart_Time_HDR);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Upd Deadline Dte/Tme  RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1648968;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Deadline_Depart_DT_HDR);
  PARAMETER(DB1.Deadline_Depart_Time_HDR);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Deadline Dte/Tme  CH) TYPE(CHGOBJ) FILE(OPBGWKP)           AC1648969;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Order_Number);
   PARAMETER(DB1.Order_Sequence_Number);
   PARAMETER(DB1.Order_Secondary_Line_Seq);
   PARAMETER(PAR.Deadline_Depart_Date_LH);
   PARAMETER(PAR.Deadline_Depart_Time_LH);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*JOB
     PAR.Job_Name = JOB.*JOB;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

 }

}


ENDIF;

ENDIF;

