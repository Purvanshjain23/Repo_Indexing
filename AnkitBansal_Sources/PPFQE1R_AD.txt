// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPFQE1R
// ?Date: 31.08.2025 Time: 22:18:20
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?Force program into add mode if no item present
CASE;

// IF PAR.Item Code is Not Entered
IF PAR.Item_Code = *ZERO;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Initialize key screen

// KEY.Company Number = PAR.Company Number
KEY.Company_Number = PAR.Company_Number;

// KEY.Item Code = PAR.Item Code
KEY.Item_Code = PAR.Item_Code;

//?USER: Initialize detail screen (existing record)

MOVE *ALL (To: PAR From: DB1);

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DB1.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Move of various fields to screens and get descriptions.
DO;

//?Populate descriptions and conditions
// DTL.Condition Desc. 1  USR = Condition name of DTL.Item Type Code
DTL.Condition_Desc_1_USR = RTVCND(DTL.Item_Type_Code);

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


// Call program Rtv Box ID for Item   XF.
CALL PROGRAM(Rtv Box ID for Item   XF) ('PPOEXFR');
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Box_iD);

// PAR.Box iD = DTL.Box iD
PAR.Box_iD = DTL.Box_iD;

ENDDO;

//?allow boxid to be input
CASE;

// IF DTL.Item Type Code is Raw Material
IF DTL.Item_Type_Code = 'RM';

// OR DTL.Item Type Code is Packaging and Supplies
OR DTL.Item_Type_Code = 'PS';

// LCL.Allow BoxId to Chg Usr = CND.no
LCL.Allow_BoxId_to_Chg_Usr = 'N';

//?allow boxid to be input
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Allow BoxId to Chg Usr = CND.yes
LCL.Allow_BoxId_to_Chg_Usr = 'Y';

ENDIF;

//?Unit Weight Rules with Update on Company Item
DO;

//?Set Allow Weight to Yes,
// WRK.Allow Weight Input = CND.yes
WRK.Allow_Weight_Input = 'Y';

CASE;

// IF DTL.Item Type Code is FG/WP
IF DTL.Item_Type_Code = 'FG'/'WP';

//?If Catch Weight Sts = N (Std Weight every time)
//?                        (Unit weight will be maintained at itemlvl
//?If Catch Weight Sts = Y (Unit weight will be maintained at complvl
CASE;

// IF DTL.Catch Weight Status is no
IF DTL.Catch_Weight_Status = 'N';

//?Unit wgt is updated from the chg of Unit Wgt on the Item Default
// WRK.Allow Weight Input = CND.no
WRK.Allow_Weight_Input = 'N';

// IF DTL.Catch Weight Status is yes
IF DTL.Catch_Weight_Status = 'Y';

//?Once a company item has been created then the unit weight will
//?be maintained at the CoItem.  Item default unit's weight
//?will be displayed only.
// WRK.Allow Weight Input = CND.yes
WRK.Allow_Weight_Input = 'Y';

ENDIF;

// IF DTL.Item Type Code is Packaging and Supplies
IF DTL.Item_Type_Code = 'PS';

//?Once a company item has been created then the unit weight will
//?be maintained at the CoItem.  Item default unit's weight
//?will be displayed only.
//?E00221 10/02/08 RMC - for PS: box weights not allowed if "BX" is
//?Included in Misc Tare. those wts are maintained in the edit packaging item
EXECUTE FUNCTION(Rtv Package Item Type RT) TYPE(RTVOBJ) FILE(POARREP)           AC1903459;
PARAMETER(DB1.Company_Number);
PARAMETER(LCL.Pckg_Item_Type);
PARAMETER(DB1.Item_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Pckg Item Type is Bags
 IF DB1.Pckg_Item_Type = 'BG'/'B2'/'B1'/'B4'/'B5'/'B3'/'P1'/'P2';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Incl in Misc Tare RT) TYPE(RTVOBJ) FILE(POCAREP)           AC1865444;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Pckg_Item_Type);
PARAMETER(LCL.Incl_in_Misc_Tare);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.Incl in Misc Tare is Yes
IF LCL.Incl_in_Misc_Tare = 'Y';

// WRK.Allow Weight Input = CND.no
WRK.Allow_Weight_Input = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Allow Weight Input = CND.yes
WRK.Allow_Weight_Input = 'Y';

ENDIF;

// IF DTL.Item Type Code is Raw Material
IF DTL.Item_Type_Code = 'RM';

//?Unit wgt is updated from the chg of Unit Wgt on the Item Default
// WRK.Allow Weight Input = CND.no
WRK.Allow_Weight_Input = 'N';

ENDIF;

ENDDO;

CASE;

// IF WRK.Allow Weight Input is yes
IF WRK.Allow_Weight_Input = 'Y';

//?uom second is lb move unt wgt/conv-1
CASE;

// IF DTL.U/M - Second is Pounds
IF DTL.UOM_Second = 'LB';

// DTL.Conversion Factor 1 = DTL.Unit Weight
DTL.Conversion_Factor_1 = DTL.Unit_Weight;

//?uom second is lb move unt wgt/conv-1
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Conversion Factor 1 = DTL.Conversion Factor 1
DTL.Conversion_Factor_1 = DTL.Conversion_Factor_1;

ENDIF;

//?uom third is lb move unt wgt/conv-2
CASE;

// IF DTL.U/M - Third is Pounds
IF DTL.UOM_Third = 'LB';

// DTL.Conversion Factor 2 = DTL.Unit Weight
DTL.Conversion_Factor_2 = DTL.Unit_Weight;

//?uom third is lb move unt wgt/conv-2
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Conversion Factor 2 = DTL.Conversion Factor 2
DTL.Conversion_Factor_2 = DTL.Conversion_Factor_2;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Rtv CIE for Item      RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1926238;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Produce_on_Sunday_Sts);
PARAMETER(DTL.Produce_on_Monday_Sts);
PARAMETER(DTL.Produce_on_Tuesday_Sts);
PARAMETER(DTL.Produce_on_Wednesday_Sts);
PARAMETER(DTL.Produce_on_Thursday_Sts);
PARAMETER(DTL.Produce_on_Friday_Sts);
PARAMETER(DTL.Produce_on_Saturday_Sts);
PARAMETER(DTL.Plan_Production_Sts);
PARAMETER(DTL.Allocation_Method);
PARAMETER(DTL.CIE_Use_Age_Days_over_Max);
PARAMETER(DTL.CIE_MPR_Report_to_USDA);
PARAMETER(DTL.CIE_Capacity_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Condition Desc. 3  USR = Condition name of DTL.Allocation Method
DTL.Condition_Desc_3_USR = RTVCND(DTL.Allocation_Method);

//?FP1054 Display Produce on Day of week if FG and Converted
CASE;

// IF DB1.Item Type Code is Finished Good
IF DB1.Item_Type_Code = 'FG';

// AND DB1.Base/Conv/Loss Item is Converted
AND DB1.Base_Conv_Loss_Item = 'C';

// LCL.USR Display 1 = CND.Yes
LCL.USR_Display_1 = 'Y';

//?FP1054 Display Produce on Day of week if FG and Converted
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.USR Display 1 = CND.No
LCL.USR_Display_1 = 'N';

ENDIF;

// PAR.USR Output Only Status = CND.no
PAR.USR_Output_Only_Status = 'N';

// DTL.Text USR 23 = CON.*BLANK
DTL.Text_USR_23 = *BLANK;

//?FP1054 Output Plan Prod Sts if allocated orders exist
CASE;

// IF DTL.Plan Production Sts is Yes
IF DTL.Plan_Production_Sts = *BLANK;

EXECUTE FUNCTION(Rtv Orders Alloc y/n  RT) TYPE(RTVOBJ) FILE(PDKNCPP)           AC1943241;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(PAR.USR_Output_Only_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.OD Weight Scheduled is Greater than zero
 IF DB1.OD_Weight_Scheduled > *ZERO;

 // OR DB1.OD Weight Inv Sched is Greater than zero
 OR DB1.OD_Weight_Inv_Sched > *ZERO;

 EXECUTE FUNCTION(RTV Header Status      RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1231329;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Header_Status);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Header Status is Not Comp/Canc/Conf
 IF LCL.Header_Status = 'L'/'A'/'E'/'H';

 // PAR.USR Output Only Status = CND.yes
 PAR.USR_Output_Only_Status = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


CASE;

// IF PAR.USR Output Only Status is yes
IF PAR.USR_Output_Only_Status = 'Y';

// DTL.Text USR 23 = CON.Allocated orders exist.
DTL.Text_USR_23 = 'Allocated orders exist.';

ENDIF;

ENDIF;

// DTL.Condition Desc. 2  USR = Condition name of DTL.Default Workcenter
DTL.Condition_Desc_2_USR = RTVCND(DTL.Default_Workcenter);

EXECUTE FUNCTION(Rtv Record Status     RT) TYPE(RTVOBJ) FILE(OMBYREP)           AC1895967;
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Record_Status_1_Usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Record Status 1 Usr = DB1.Record Status
 PAR.Record_Status_1_Usr = DB1.Record_Status;

}


//?IF Inactve/Deleted and the Item Dft is too, dont allow chg here.RMC 8.22.7
CASE;

// IF DTL.Record Status is Deleted & Inactive
IF DTL.Record_Status = 'D'/'I';

CASE;

// IF DTL.Record Status 1 Usr is Deleted & Inactive
IF DTL.Record_Status_1_Usr = 'D'/'I';

// LCL.Output Only 1 USR = CND.yes
LCL.Output_Only_1_USR = 'Y';

ENDIF;

ENDIF;

// DTL.Text USR 8 = CON.*BLANK
DTL.Text_USR_8 = *BLANK;

//?Populate the record status text for Primal Grp Report
CASE;

// IF DTL.Item Category Code 6 is Entered
IF DTL.Item_Primal_Sched_Report > *BLANK;

// DTL.Item Category Number 6 = CON.06
DTL.Item_Category_Number_6 = 06;

// WRK.Return Code Usr = CON.*BLANK
WRK.Return_Code_Usr = *BLANK;

EXECUTE FUNCTION(Val Item Category     Rt) TYPE(RTVOBJ) FILE(PDJIREP)           AC2045216;
PARAMETER(DTL.Company_Number);
PARAMETER(06);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(WRK.Record_Status_3_usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code Usr = CND.*Record does not exist
 PAR.Return_Code_Usr = 'Y2U0005';

 // PAR.Record Status 3 usr = CND.*blank
 PAR.Record_Status_3_usr = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Return Code Usr = CND.*Blank
 PAR.Return_Code_Usr = *BLANK;

 // PAR.Record Status 3 usr = DB1.Record Status
 PAR.Record_Status_3_usr = DB1.Record_Status;

}


// DTL.Text USR 8 = Condition name of WRK.Record Status 3 usr
DTL.Text_USR_8 = RTVCND(WRK.Record_Status_3_usr);

//?Populate the record status text for Primal Grp Report
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Item Category Number 6 = CON.*ZERO
DTL.Item_Category_Number_6 = 00;

ENDIF;

EXECUTE FUNCTION(RTV PS Prod Cap Desc  RT) TYPE(RTVOBJ) FILE(PBBFREP)           AC2079617;
PARAMETER(DTL.CIE_Capacity_Code);
PARAMETER(DTL.PS_Prod_Capacity_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate detail screen fields

//?F4=Prompt.
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Default Warehouse
IF PGM.*Cursor_field = DTL.Default_Warehouse;

// Call program SEL ShipCo/Warehouse   SR.
CALL PROGRAM(SEL ShipCo/Warehouse   SR) ('PPHQSRR');
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Company_Number);

// IF PGM.*Cursor field <IS> DTL.Item Category Code 6
IF PGM.*Cursor_field = DTL.Item_Primal_Sched_Report;

// Call program Sel Primal Group Rpt  SL.
CALL PROGRAM(Sel Primal Group Rpt  SL) ('PBDYSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(06);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(WRK.Description);

// IF PGM.*Cursor field <IS> DTL.CIE Capacity Code
IF PGM.*Cursor_field = DTL.CIE_Capacity_Code;

// Call program Sel PS Prod Capacity   SL.
CALL PROGRAM(Sel PS Prod Capacity   SL) ('PBK0SRR');
PARAMETER(DTL.CIE_Capacity_Code);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// WRK.Record Status 3 usr = CND.*blank
WRK.Record_Status_3_usr = *BLANK;

//?Move of various fields to screens and get descriptions.
DO;

//?Populate descriptions and conditions
// DTL.Condition Desc. 1  USR = Condition name of DTL.Item Type Code
DTL.Condition_Desc_1_USR = RTVCND(DTL.Item_Type_Code);

// DTL.Status Description = Condition name of DTL.Record Status
DTL.Status_Description = RTVCND(DTL.Record_Status);

//?2nd -- Screen 2
EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


ENDDO;

// DTL.Text USR 8 = CON.*BLANK
DTL.Text_USR_8 = *BLANK;

//?Validate Item Category 06 - Primal Group Report for Scheduling
CASE;

// IF DTL.Item Category Code 6 is Entered
IF DTL.Item_Primal_Sched_Report > *BLANK;

// DTL.Item Category Number 6 = CON.06
DTL.Item_Category_Number_6 = 06;

// WRK.Return Code Usr = CON.*BLANK
WRK.Return_Code_Usr = *BLANK;

EXECUTE FUNCTION(Val Item Category     Rt) TYPE(RTVOBJ) FILE(PDJIREP)           AC2045216;
PARAMETER(DTL.Company_Number);
PARAMETER(06);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(WRK.Record_Status_3_usr);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code Usr = CND.*Record does not exist
 PAR.Return_Code_Usr = 'Y2U0005';

 // PAR.Record Status 3 usr = CND.*blank
 PAR.Record_Status_3_usr = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Return Code Usr = CND.*Blank
 PAR.Return_Code_Usr = *BLANK;

 // PAR.Record Status 3 usr = DB1.Record Status
 PAR.Record_Status_3_usr = DB1.Record_Status;

}


CASE;

// IF WRK.Return Code Usr is Not Blank
IF WRK.Return_Code_Usr <> *BLANK;

// Send error message - 'Item Category &1 not found.'
ERROR(USR4522);
MSGPARM(DTL.Item_Primal_Sched_Report);

ENDIF;

// DTL.Text USR 8 = Condition name of WRK.Record Status 3 usr
DTL.Text_USR_8 = RTVCND(WRK.Record_Status_3_usr);

//?Validate Item Category 06 - Primal Group Report for Scheduling
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Item Category Number 6 = CON.*ZERO
DTL.Item_Category_Number_6 = 00;

ENDIF;

//?Box validation
CASE;

// IF LCL.Allow BoxId to Chg Usr is yes
IF LCL.Allow_BoxId_to_Chg_Usr = 'Y';

EXECUTE FUNCTION(Val Box-Company Item   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1707127;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Box_iD);
{
 //?USER: Initialize routine

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 CASE;

 // IF DB1.Item Type Code is Packaging and Supplies
 IF DB1.Item_Type_Code = 'PS';

 // AND DB1.Package Type Code is Box Kit
 AND DB1.Package_Type_Code = 'B';

 CASE;

 // IF DB1.Record Status is Deleted & Inactive
 IF DB1.Record_Status = 'D'/'I';

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 ENDIF;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Box Id is Not Found or Inactive'
ERROR(USR3375);
MSGPARM(DTL.Box_iD);

// IF *OTHERWISE
IF *OTHERWISE;

//?Check for Box ID  - CO/ITEM validation and NCP
CASE;

// IF DTL.Box iD is Not Entered
IF DTL.Box_iD = *ZERO;

// AND DTL.Item Structure Type Code is NE 900
AND DTL.Item_Structure_Type_Code <> 900;

// Send information message - 'Box Id is not entered.  Please enter one through the Bill of Material
MESSAGE(USR3119 *INFO);
MSGPARM(DTL.Box_iD);

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF DTL.Item Type Code is Packaging and Supplies
IF DTL.Item_Type_Code = 'PS';

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(VAL Shipping Co WHS   RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1714721;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Warehouse_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.Warehouse Description is equal to blank
IF DTL.Warehouse_Description = *BLANK;

// Send error message - 'Warehouse &1 cannot ship from Company &2'
ERROR(USR3362);
MSGPARM(DTL.Default_Warehouse);
MSGPARM(DTL.Company_Number);

ENDIF;

ENDIF;

//?Co-Packer - move unit wgt to conversion factor 1
CASE;

// IF DTL.Item Structure Type Code is NE 900
IF DTL.Item_Structure_Type_Code <> 900;

// DTL.Conversion Factor 1 = DTL.Unit Weight
DTL.Conversion_Factor_1 = DTL.Unit_Weight;

ENDIF;

//?Unit Weight Rules with Update on Company Item
DO;

//?Set Allow Weight to Yes,
// WRK.Allow Weight Input = CND.yes
WRK.Allow_Weight_Input = 'Y';

CASE;

// IF DTL.Item Type Code is FG/WP
IF DTL.Item_Type_Code = 'FG'/'WP';

//?If Catch Weight Sts = N (Std Weight every time)
//?                        (Unit weight will be maintained at itemlvl
//?If Catch Weight Sts = Y (Unit weight will be maintained at complvl
//?susan check
CASE;

// IF DTL.Catch Weight Status is no
IF DTL.Catch_Weight_Status = 'N';

//?Unit wgt is updated from the chg of Unit Wgt on the Item Default
// WRK.Allow Weight Input = CND.no
WRK.Allow_Weight_Input = 'N';

// IF DTL.Catch Weight Status is yes
IF DTL.Catch_Weight_Status = 'Y';

//?Once a company item has been created then the unit weight will
//?be maintained at the CoItem.  Item default unit's weight
//?will be displayed only.
// WRK.Allow Weight Input = CND.yes
WRK.Allow_Weight_Input = 'Y';

ENDIF;

// IF DTL.Item Type Code is Packaging and Supplies
IF DTL.Item_Type_Code = 'PS';

//?Once a company item has been created then the unit weight will
//?be maintained at the CoItem.  Item default unit's weight
//?will be displayed only.
//?E00221 10/02/08 RMC - for PS: box weights not allowed if "BX" is
//?Included in Misc Tare. those wts are maintained in the edit packaging item
EXECUTE FUNCTION(Rtv Package Item Type RT) TYPE(RTVOBJ) FILE(POARREP)           AC1903459;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Pckg_Item_Type);
PARAMETER(DTL.Item_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Pckg Item Type is Bags
 IF DB1.Pckg_Item_Type = 'BG'/'B2'/'B1'/'B4'/'B5'/'B3'/'P1'/'P2';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Incl in Misc Tare RT) TYPE(RTVOBJ) FILE(POCAREP)           AC1865444;
PARAMETER(DTL.Company_Number);
PARAMETER(LCL.Pckg_Item_Type);
PARAMETER(LCL.Incl_in_Misc_Tare);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.Incl in Misc Tare is Yes
IF LCL.Incl_in_Misc_Tare = 'Y';

// WRK.Allow Weight Input = CND.no
WRK.Allow_Weight_Input = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Allow Weight Input = CND.yes
WRK.Allow_Weight_Input = 'Y';

ENDIF;

// IF DTL.Item Type Code is Raw Material
IF DTL.Item_Type_Code = 'RM';

//?Unit wgt is updated from the chg of Unit Wgt on the Item Default
// WRK.Allow Weight Input = CND.no
WRK.Allow_Weight_Input = 'N';

ENDIF;

ENDDO;

CASE;

// IF WRK.Allow Weight Input is yes
IF WRK.Allow_Weight_Input = 'Y';

//?uom second is lb move unt wgt/conv-1
CASE;

// IF DTL.U/M - Second is Pounds
IF DTL.UOM_Second = 'LB';

// DTL.Conversion Factor 1 = DTL.Unit Weight
DTL.Conversion_Factor_1 = DTL.Unit_Weight;

//?uom second is lb move unt wgt/conv-1
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Conversion Factor 1 = DTL.Conversion Factor 1
DTL.Conversion_Factor_1 = DTL.Conversion_Factor_1;

ENDIF;

//?uom third is lb move unt wgt/conv-2
CASE;

// IF DTL.U/M - Third is Pounds
IF DTL.UOM_Third = 'LB';

// DTL.Conversion Factor 2 = DTL.Unit Weight
DTL.Conversion_Factor_2 = DTL.Unit_Weight;

//?uom third is lb move unt wgt/conv-2
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Conversion Factor 2 = DTL.Conversion Factor 2
DTL.Conversion_Factor_2 = DTL.Conversion_Factor_2;

ENDIF;

ENDIF;

EXECUTE FUNCTION(Val Item Fields Rules  IF) TYPE(EXCINTFUN)                     AC1701270;
PARAMETER(PGM.*Program_mode);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third);
PARAMETER(DTL.UOM_Pricing);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Quality_Level);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Minimum_Weight_Per_Case);
PARAMETER(DTL.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Vendor_Item_Default);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(DTL.Transportation_Temp);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(DTL.Package_Type_Code);
PARAMETER(DTL.Fresh_Chilling_Time);
PARAMETER(DTL.Base_Conv_Loss_Item);
PARAMETER(DTL.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(DTL.Std_Weight_Head_Var_Ren);
PARAMETER(DTL.Pieces_Per_Head);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(DTL.Pallet_Tare_Weight);
PARAMETER(DTL.Misc_Tare_Weight);
PARAMETER(DTL.Production_Lead_Days);
PARAMETER(DTL.Packaging_Code);
PARAMETER(DTL.Item_Market_Code);
PARAMETER(DTL.TF_Co_Ownership_Sts);
PARAMETER(DTL.Agrimetrics_group);
PARAMETER(DTL.Agrimetrics_pack);
PARAMETER(DTL.Agrimetrics_grade);
PARAMETER(DTL.PA_Base_Avail_Rpt_Include);
PARAMETER(DTL.PM_Pounds_per_Hour);
PARAMETER(DTL.Item_Frt_Overage_Prc_UOM);
PARAMETER(DTL.Packages_per_case);
PARAMETER(DTL.Use_Freeze_Sell_By_Days);
PARAMETER(DTL.PM_Batch_Size);
PARAMETER(DTL.Package_Level_size);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
PARAMETER(DTL.Std_Costing_Unit_Weight);
PARAMETER(DTL.FP_Std_Green_Weight);
PARAMETER(DTL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(DTL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(DTL.PM_Formula_LBS_Per_Hour);
PARAMETER(DTL.PM_Finished_LBS_Per_Hour);
PARAMETER(DTL.SH_Unused_was_broker);
PARAMETER(DTL.PM_Raw_Material_Type_Code);
PARAMETER(DTL.Seconds_Item);
PARAMETER(DTL.Print_on_Realization_Rpt);
PARAMETER(DTL.Unit_Weight_Change_Sts);
PARAMETER(DTL.Maximum_Audit_Value);
PARAMETER(DTL.Minimum_Audit_Value);
PARAMETER(DTL.Market_Overage);
PARAMETER(DTL.Standard_Overage_Underage);
PARAMETER(DTL.Item_Pricing_Operation);
PARAMETER(DTL.Item_Pricing_Constant);
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Price_Method_Default);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Group_for_Packaging);
PARAMETER(DTL.Item_Category_Number_1);
PARAMETER(DTL.Made_to_Order_Code);
PARAMETER(DTL.Item_Category_Number_2);
PARAMETER(DTL.Transportation_Equip_Type);
PARAMETER(DTL.Item_Category_Number_3);
PARAMETER(DTL.Item_Category_Code_3);
PARAMETER(DTL.Item_Category_Number_4);
PARAMETER(DTL.GL_Sub_Code);
PARAMETER(DTL.Item_Category_Number_5);
PARAMETER(DTL.Item_Structure_Sub_Class);
PARAMETER(DTL.Item_Category_Number_6);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(DTL.Item_Category_Number_7);
PARAMETER(DTL.Item_Exc_Man_Prc_Excp);
PARAMETER(DTL.Item_Category_Number_8);
PARAMETER(DTL.Item_Prod_Sched_Send_PFS);
PARAMETER(DTL.Item_Category_Number_9);
PARAMETER(DTL.Item_Category_Code_9);
PARAMETER(DTL.Item_Category_Number_10);
PARAMETER(DTL.Item_Category_Code_10);
PARAMETER(DTL.PM_Line_Number);
PARAMETER(DTL.Primal_Group_Code);
PARAMETER(DTL.Piece_Count_Item);
PARAMETER(DTL.Pieces_Per_Bag);
PARAMETER(DTL.Bags_Per_Unit);
PARAMETER(DTL.Export_Domestic);
PARAMETER(DTL.Print_On_Schedule);
PARAMETER(DTL.Fresh_Inv_Allocation_Seq);
PARAMETER(DTL.Fresh_Sched_As_Ordered);
PARAMETER(DTL.Frozen_Inv_Allocation_Seq);
PARAMETER(DTL.Item_Meat_Cost_Group_Code);
PARAMETER(DTL.UPC_Code_2);
PARAMETER(DTL.Item_Target_Price);
PARAMETER(DTL.Minimum_Piece_Weight);
PARAMETER(DTL.Maximum_Piece_Weight);
PARAMETER(DTL.Seaboard_Equivalent_Item);
PARAMETER(DTL.Production_Qty_Per_Shift);
PARAMETER(DTL.Scheduling_Position_Grade);
PARAMETER(DTL.Sold_100_Percent_Frozen);
PARAMETER(DTL.Maximum_Shifts);
PARAMETER(DTL.Value_Added_Sts);
PARAMETER(DTL.Label_Type);
PARAMETER(DTL.Item_TF_Exempt_Code);
PARAMETER(DTL.Item_TF_Classification);
PARAMETER(DTL.Default_Workcenter);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER('C');
{
 //?Execute internal function

 //?Special Note will need Catch Weight Sts Before image
 //?when populating the parms.
 //?Field validation without Item Type
 DO;

 //?The following fields are being vaidated for all items with the
 //?exceptions of Co-Packer.  Co-Packer we do not make and the
 //?item structure type = 900.  When you see NCP,
 //?that means only validate on a Non Co-Packer Item
 CASE;

 // IF PR2.Item Type Code is Packaging and Supplies
 IF PR2.Item_Type_Code = 'PS';

 //?dont validate weight and conv factors for BOXES
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Unit weight is required if Active Item
 CASE;

 // IF PR2.Unit Weight is Equal to zero
 IF PR2.Unit_Weight = *ZERO;

 CASE;

 // IF PR2.Record Status is Active
 IF PR2.Record_Status = 'A';

 // Send error message - 'Weight entry required for this item.'
 ERROR(USR0514);
 MSGPARM(PR2.Unit_Weight);

 ENDIF;

 ENDIF;

 //?Unit of measure, conversion, & oper, validation and data changes.
 DO;

 //?If U/M 2 entered then Conv. Factor 1 & operation 1 is required
 CASE;

 // IF PR2.U/M - Second Dft is Entered
 IF PR2.UOM_Second_Dft <> *BLANK;

 CASE;

 // IF PR2.Conversion Factor 1 is Not Entered
 IF PR2.Conversion_Factor_1 = *ZERO;

 // Send error message - 'Conversion Factor 1 is required'
 ERROR(USR0364);
 MSGPARM(PR2.Conversion_Factor_1);

 ENDIF;

 CASE;

 // IF PR2.Operation Factor 1 is Not Entered
 IF PR2.Operation_Factor_1 = *BLANK;

 // Send error message - 'Operation Factor 1 is required'
 ERROR(USR1011);
 MSGPARM(PR2.Operation_Factor_1);

 ENDIF;

 ENDIF;

 //?If U/M 3 entered then U/M 2, Conv. 2 & operation 2 required
 CASE;

 // IF PR2.U/M - Third Dft is Entered
 IF PR2.UOM_Third_Dft <> *BLANK;

 CASE;

 // IF PR2.U/M - Second Dft is Not Entered
 IF PR2.UOM_Second_Dft = *BLANK;

 // Send error message - 'U/M - Second is required if U/M - Third is entered'
 ERROR(USR0886);
 MSGPARM(PR2.UOM_Second_Dft);
 MSGPARM(PR2.Conversion_Factor_1);

 ENDIF;

 CASE;

 // IF PR2.Conversion Factor 2 is Not Entered
 IF PR2.Conversion_Factor_2 = *ZERO;

 // Send error message - 'Conversion Factor 2 is required'
 ERROR(USR0365);
 MSGPARM(PR2.Conversion_Factor_2);

 ENDIF;

 CASE;

 // IF PR2.Operation Factor 2 is Not Entered
 IF PR2.Operation_Factor_2 = *BLANK;

 // Send error message - 'Operation Factor 2 is required'
 ERROR(USR1012);
 MSGPARM(PR2.Operation_Factor_2);

 ENDIF;

 ENDIF;

 //?Clear conversion/operation factor 1 if u/m 2 not entered
 CASE;

 // IF PR2.U/M - Second Dft is Not Entered
 IF PR2.UOM_Second_Dft = *BLANK;

 // PR2.Conversion Factor 1 = CND.Not Entered
 PR2.Conversion_Factor_1 = *ZERO;

 // PR2.Operation Factor 1 = CND.Not Entered
 PR2.Operation_Factor_1 = *BLANK;

 ENDIF;

 //?Clear conversion/operation 2 if u/m 3 not entered
 CASE;

 // IF PR2.U/M - Third Dft is Not Entered
 IF PR2.UOM_Third_Dft = *BLANK;

 // PR2.Conversion Factor 2 = CND.Not Entered
 PR2.Conversion_Factor_2 = *ZERO;

 // PR2.Operation Factor 2 = CND.Not Entered
 PR2.Operation_Factor_2 = *BLANK;

 ENDIF;

 ENDDO;

 //?If Second UM is LB, then Conversion Factor 1 must be = Unit Weight
 CASE;

 // IF PR2.U/M - Second Dft is Pounds
 IF PR2.UOM_Second_Dft = 'LB';

 CASE;

 // IF PR2.Conversion Factor 1 NE PR2.Unit Weight
 IF PR2.Conversion_Factor_1 <> PR2.Unit_Weight;

 // Send error message - 'Conversion Factor 1 must equal to the Unit Weight.'
 ERROR(USR2320);
 MSGPARM(PR2.Conversion_Factor_1);

 ENDIF;

 ENDIF;

 //?If Third UM is LB, then Conversion Factor 1 must be = Unit Weight
 CASE;

 // IF PR2.U/M - Third Dft is Pounds
 IF PR2.UOM_Third_Dft = 'LB';

 CASE;

 // IF PR2.Conversion Factor 2 NE PR2.Unit Weight
 IF PR2.Conversion_Factor_2 <> PR2.Unit_Weight;

 // Send error message - 'Conversion Factor 2 must equal to the Unit Weight.'
 ERROR(USR2321);
 MSGPARM(PR2.Conversion_Factor_2);

 ENDIF;

 ENDIF;

 //?Pricing UOM must be set up as primary, second or third UOM
 CASE;

 // IF PR2.U/M - Pricing Dft NE PR2.U/M - Primary Dft
 IF PR2.UOM_Pricing_Dft <> PR2.UOM_Primary_Dft;

 // AND PR2.U/M - Pricing Dft NE PR2.U/M - Second Dft
 AND PR2.UOM_Pricing_Dft <> PR2.UOM_Second_Dft;

 // AND PR2.U/M - Pricing Dft NE PR2.U/M - Third Dft
 AND PR2.UOM_Pricing_Dft <> PR2.UOM_Third_Dft;

 // Send error message - 'Pricing U/M must be setup as primary, second or third UOM.'
 ERROR(USR0543);
 MSGPARM(PR2.UOM_Pricing_Dft);
 MSGPARM(PR2.UOM_Primary_Dft);
 MSGPARM(PR2.UOM_Second_Dft);
 MSGPARM(PR2.UOM_Third_Dft);

 ENDIF;

 ENDIF;

 //?If Chg mode and Catch wgt sts is chg send info msg - NCP
 CASE;

 // IF PR3.Catch Weight Status NE PR2.Catch Weight Status
 IF PR3.Catch_Weight_Status <> PR2.Catch_Weight_Status;

 // AND PR1.*Program mode is *CHANGE
 AND PR1.*Program_mode = 'CHG';

 // AND PR2.Item Structure Type Code is NE 900
 AND PR2.Item_Structure_Type_Code <> 900;

 EXECUTE FUNCTION(Rtv On Hand Qty Item   RT) TYPE(RTVOBJ) FILE(CAB0REP)          AC1319157;
 PARAMETER(PR2.Item_Code);
 PARAMETER(LCL.Quantity_on_Hand_UOM1);
 {
  //?USER: Initialize routine

  // PAR.Quantity on Hand - U/M1 = CON.*ZERO
  PAR.Quantity_on_Hand_UOM1 = *ZERO;

  //?USER: Process Data record

  // PAR.Quantity on Hand - U/M1 = PAR.Quantity on Hand - U/M1 + DB1.On Hand U/M1 Sum
  PAR.Quantity_on_Hand_UOM1 = PAR.Quantity_on_Hand_UOM1 + DB1.On_Hand_UOM1_Summary;

 }

 CASE;

 // IF LCL.Quantity on Hand - U/M1 is not equal zero
 IF LCL.Quantity_on_Hand_UOM1 <> *ZERO;

 // Send information message - 'WARNING: Catch weight status changed, quantity on hand not 0.'
 MESSAGE(USR1974 *INFO);

 ENDIF;

 ENDIF;

 //?Edit Commodity Group U/M to EQ Pricing U/M
 CASE;

 // IF PR2.Commodity Price Group is Not Blank
 IF PR2.Commodity_Price_Group <> *BLANK;

 EXECUTE FUNCTION(RTV Commod U/M         RT) TYPE(RTVOBJ) FILE(OMFZREP)          AC1366761;
 PARAMETER(PR2.Commodity_Price_Group);
 PARAMETER(LCL.UOM_Pricing);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PR2.U/M - Pricing Dft NE LCL.U/M - Pricing
 IF PR2.UOM_Pricing_Dft <> LCL.UOM_Pricing;

 // Send error message - 'Commodity Group's U/M must equal Pricing U/M.'
 ERROR(USR2165);
 MSGPARM(PR2.Commodity_Price_Group);

 ENDIF;

 ENDIF;

 //?If a Pieces Count Item then Pieces/Bags and Pieces/Unit required
 CASE;

 // IF PR2.Piece Count Item is yes
 IF PR2.Piece_Count_Item = 'Y';

 CASE;

 // IF PR2.Pieces Per Bag is EQ Zero
 IF PR2.Pieces_Per_Bag = *ZERO;

 // Send error message - 'Pieces per Bag required for a Piece Count Item.'
 ERROR(USR2517);
 MSGPARM(PR2.Pieces_Per_Bag);

 ENDIF;

 CASE;

 // IF PR2.Bags Per Unit is EQ Zero
 IF PR2.Bags_Per_Unit = *ZERO;

 // Send error message - 'Bags per Unit required for a Piece Count Item.'
 ERROR(USR2518);
 MSGPARM(PR2.Bags_Per_Unit);

 ENDIF;

 //?If a Pieces Count Item then Pieces/Bags and Pieces/Unit required
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PR2.Pieces Per Bag = CON.*ZERO
 PR2.Pieces_Per_Bag = *ZERO;

 // PR2.Bags Per Unit = CON.*ZERO
 PR2.Bags_Per_Unit = *ZERO;

 ENDIF;

 //?Minimum Audit Value cant be greater than Maximum audit value
 CASE;

 // IF PR2.Minimum Audit Value GT PR2.Maximum Audit Value
 IF PR2.Minimum_Audit_Value > PR2.Maximum_Audit_Value;

 // Send error message - 'Minimum Audit Value cannot be greater than Maximum Audit Value.'
 ERROR(USR3405);
 MSGPARM(PR2.Minimum_Audit_Value);
 MSGPARM(PR2.Maximum_Audit_Value);

 ENDIF;

 //?Variety/Rendered then Std Weight/Head (Var/Ren) is required
 CASE;

 // IF PR2.Variety/Rendered/Cut is Variety/Rendered
 IF PR2.Variety_Rendered_Cut = 'R'/'V';

 CASE;

 // IF PR2.Std Weight/Head (Var/Ren) is Equal to zero
 IF PR2.Std_Weight_Head_Var_Ren = *ZERO;

 // Send error message - 'Standard weight per head can't 0 if Variety/Rend/Cut is Variety or Rendere
 ERROR(USR1866);
 MSGPARM(PR2.Std_Weight_Head_Var_Ren);

 ENDIF;

 ENDIF;

 //?Minimum Wgt Per Case cannot be greater than Maximum Wgt Per Case
 CASE;

 // IF PR2.Minimum Weight Per Case GT PR2.Maximum Weight Per Case
 IF PR2.Minimum_Weight_Per_Case > PR2.Maximum_Weight_Per_Case;

 // Send error message - 'Minimum Case Wgt cannot be greater than Maximum Case Wgt'
 ERROR(USR2274);

 ENDIF;

 //?Wip Item Code is entered, Item Type Code can not be = WIP -NCP
 CASE;

 // IF PR2.WIP Item Code is Entered
 IF PR2.WIP_Item_Code <> *ZERO;

 // AND PR2.Item Structure Type Code is NE 900
 AND PR2.Item_Structure_Type_Code <> 900;

 EXECUTE FUNCTION(Rtv Item Type Code     RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1704065;
 PARAMETER(PR2.WIP_Item_Code);
 PARAMETER(LCL.Item_Type_Code_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

 CASE;

 // IF LCL.Item Type Code USR is Work in Process
 IF LCL.Item_Type_Code_USR = 'WP';

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Invalid WIP Item Code.'
 ERROR(USR3276);
 MSGPARM(PR2.WIP_Item_Code);

 ENDIF;

 ENDIF;

 ENDDO;

 //?Item Type validation rules and field validation
 DO;

 //?The following fields are being vaidated for all items with the
 //?exceptions of Co-Packer.  Co-Packer we do not make and the
 //?item structure type = 900.
 CASE;

 // IF PR2.Item Type Code is Meat
 IF PR2.Item_Type_Code = 'FG'/'RM'/'WP';

 //?If not a finished good, print on realization rpt = N
 CASE;

 // IF PR2.Item Type Code is Not Finished Good
 IF PR2.Item_Type_Code <> 'FG';

 // PR2.Print on Realization Rpt = CND.No
 PR2.Print_on_Realization_Rpt = 'N';

 // PR2.Value Added Sts = CND.no
 PR2.Value_Added_Sts = 'N';

 ENDIF;

 // PR2.Package Type Code = LCL.BLANK
 PR2.Package_Type_Code = LCL.BLANK;

 //?Finished Goods Only
 CASE;

 // IF PR2.Item Type Code is Finished Good
 IF PR2.Item_Type_Code = 'FG';

 //?Variety/Rendered/Cut = Cut then Base/Conv/Loss Item is required
 CASE;

 // IF PR2.Variety/Rendered/Cut is Cut
 IF PR2.Variety_Rendered_Cut = 'C';

 CASE;

 // IF PR2.Base/Conv/Loss Item is Blank
 IF PR2.Base_Conv_Loss_Item = *BLANK;

 // Send error message - 'Base/Converted/Fabricated must be entered if Variety/Rendered/Cut is cut.'
 ERROR(USR1865);
 MSGPARM(PR2.Base_Conv_Loss_Item);

 ENDIF;

 ENDIF;

 //?Validate Minimum Weight Per Case w/Unit Weight
 CASE;

 // IF PR2.Minimum Weight Per Case GT PR2.Unit Weight
 IF PR2.Minimum_Weight_Per_Case > PR2.Unit_Weight;

 // Send error message - 'Minimum Weight Per Case is greater than the Unit Weight.'
 ERROR(USR2285);
 MSGPARM(PR2.Minimum_Weight_Per_Case);

 ENDIF;

 //?Validate Maximum Weight Per Case w/Unit Weight
 CASE;

 // IF PR2.Maximum Weight Per Case LT PR2.Unit Weight
 IF PR2.Maximum_Weight_Per_Case < PR2.Unit_Weight;

 // Send error message - 'Maximum Weight Per Case is less than the Unit Weight.'
 ERROR(USR2286);
 MSGPARM(PR2.Maximum_Weight_Per_Case);

 ENDIF;

 //?Validate Category code 4 (GL Sub Code) is req & must be valid category
 CASE;

 // IF PR2.G/L Sub Code is Not Entered
 IF PR2.GL_Sub_Code = *BLANK;

 // Send error message - 'GL Sub Code is required.'
 ERROR(USR3251);
 MSGPARM(PR2.GL_Sub_Code);

 //?Validate Category code 4 (GL Sub Code) is req & must be valid category
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Item Category /Itm RT) TYPE(RTVOBJ) FILE(PDJIREP)          AC1701444;
 PARAMETER(04);
 PARAMETER(PR2.GL_Sub_Code);
 PARAMETER(LCL.Description);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

  // PAR.Description = DB1.Description
  PAR.Description = DB1.Description;

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 // Send error message - 'GL Sub Code is invalid.'
 ERROR(USR3252);
 MSGPARM(PR2.GL_Sub_Code);

 ENDIF;

 ENDIF;

 //?Check for Label Line 1 empty allow only on CoPacker
 CASE;

 // IF PR2.Item Label Line 1 is Entered
 IF PR2.Item_Label_Line_1 <> *BLANK;

 //?Check for Label Line 1 empty allow only on CoPacker
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PR2.Item Structure Type Code is EQ 900
 IF PR2.Item_Structure_Type_Code = 900;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Item Label required for Finished Goods Item.'
 ERROR(USR3179);
 MSGPARM(PR2.Item_Label_Line_1);

 ENDIF;

 ENDIF;

 //?Convert Label 1 to Upper Case
 CASE;

 // IF PR2.Item Label Line 1 is Entered
 IF PR2.Item_Label_Line_1 <> *BLANK;

 // Execute function CVT to Upper w/SpclChr US.
 EXECUTE FUNCTION(CVT to Upper w/SpclChr US) TYPE(EXCUSRSRC) ('POODUFR');
 PARAMETER(PR2.Item_Label_Line_1);
 PARAMETER(PR2.Item_Label_Line_1);
 {
  E                    AR1        30  1               ARRAY 2
  C                     MOVEA#IMKTX    AR1              LOAD ARRAY
  C                     Z-ADD1         X1      20       SET COUNTER
  C                     Z-ADD1         Y1      20       SET COUNTER
  * * * * * * * CHECK FOR ALPHABETIC CHARACTERS * * * * * * *
  C                     Z-ADD1         Y1
  C           Y1        DOWLT31
  C           AR1,Y1    IFEQ 'a'
  C                     MOVEL'A'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'b'
  C                     MOVEL'B'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'c'
  C                     MOVEL'C'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'd'
  C                     MOVEL'D'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'e'
  C                     MOVEL'E'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'f'
  C                     MOVEL'F'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'g'
  C                     MOVEL'G'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'h'
  C                     MOVEL'H'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'i'
  C                     MOVEL'I'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'j'
  C                     MOVEL'J'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'k'
  C                     MOVEL'K'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'l'
  C                     MOVEL'L'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'm'
  C                     MOVEL'M'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'n'
  C                     MOVEL'N'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'o'
  C                     MOVEL'O'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'p'
  C                     MOVEL'P'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'q'
  C                     MOVEL'Q'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'r'
  C                     MOVEL'R'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 's'
  C                     MOVEL'S'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 't'
  C                     MOVEL'T'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'u'
  C                     MOVEL'U'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'v'
  C                     MOVEL'V'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'w'
  C                     MOVEL'W'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'x'
  C                     MOVEL'X'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'y'
  C                     MOVEL'Y'       AR1,Y1
  C                     ELSE
  C           AR1,Y1    IFEQ 'z'
  C                     MOVEL'Z'       AR1,Y1
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     END
  C                     ADD  1         Y1
  C                     END
  C                     MOVEAAR1       #OMLTX           LOAD OUTPUT
 }

 ENDIF;

 CASE;

 // IF PR4.Item Validation USR is Company Item
 IF PR4.Item_Validation_USR = 'C';

 //?Require Miscellaneous Weight per Damon 2/19/13 if not type 740
 CASE;

 // IF PR2.Misc Tare Weight is equal to zero
 IF PR2.Misc_Tare_Weight = *ZERO;

 // AND PR2.Item Structure Type Code is ne 740
 AND PR2.Item_Structure_Type_Code <> 740;

 // Send error message - 'Miscellaneous Tare Weight Required.'
 ERROR(USR3112);

 ENDIF;

 ENDIF;

 ENDIF;

 //?Finished Goods and Raw Material
 CASE;

 // IF PR2.Item Type Code is Finished Good/Raw Matrl
 IF PR2.Item_Type_Code = 'FG'/'RM';

 //?Export/Domestic is required
 CASE;

 // IF PR2.Export/Domestic EQ LCL.BLANK 1               USR
 IF PR2.Export_Domestic = LCL.BLANK_1_USR;

 // Send error message - 'Export/Domestic required for item type code.'
 ERROR(USR2515);
 MSGPARM(PR2.Export_Domestic);

 ENDIF;

 //?Fresh Inv Allocation Seq is required
 CASE;

 // IF PR2.Fresh Inv Allocation Seq EQ LCL.BLANK 1               USR
 IF PR2.Fresh_Inv_Allocation_Seq = LCL.BLANK_1_USR;

 // Send error message - 'Fresh Inv Allocation Seq required for this Item Type Code.'
 ERROR(USR2521);
 MSGPARM(PR2.Fresh_Inv_Allocation_Seq);

 ENDIF;

 //?Fresh Sched As Ordered is required
 CASE;

 // IF PR2.Fresh Sched As Ordered EQ LCL.BLANK 1               USR
 IF PR2.Fresh_Sched_As_Ordered = LCL.BLANK_1_USR;

 // Send error message - 'Fresh Sched As Ordered required for this Item Type Code.'
 ERROR(USR2519);
 MSGPARM(PR2.Fresh_Sched_As_Ordered);

 ENDIF;

 //?Frozen Sched As Ordered is required
 CASE;

 // IF PR2.Frozen Sched As Ordered EQ LCL.BLANK 1               USR
 IF PR2.Frozen_Inv_Allocation_Seq = LCL.BLANK_1_USR;

 // Send error message - 'Frozen Inventory Allocation Seq required for this Item Type Code.'
 ERROR(USR2520);
 MSGPARM(PR2.Frozen_Inv_Allocation_Seq);

 ENDIF;

 //?Default commodity market basis is required
 CASE;

 // IF PR2.Default Commod Mark basis is Not Entered
 IF PR2.Default_Commod_Mark_basis = *BLANK;

 // Send error message - 'Default commodity market must be enterd for FG/RM item type.'
 ERROR(USR1862);
 MSGPARM(PR2.Default_Commod_Mark_basis);

 ENDIF;

 //?Commodity price group is required
 CASE;

 // IF PR2.Commodity Price Group is Not entered
 IF PR2.Commodity_Price_Group = *BLANK;

 // Send error message - 'Commodity price group must be entered for FG/RM item type.'
 ERROR(USR1863);
 MSGPARM(PR2.Commodity_Price_Group);

 ENDIF;

 //?Validate Market & Price Group combiniation.
 DO;

 CASE;

 // IF PR2.Item Type Code is Finished Good/Raw Matrl
 IF PR2.Item_Type_Code = 'FG'/'RM';

 EXECUTE FUNCTION(RTV Last Market PrcDte RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1557214;
 PARAMETER(PR2.Default_Commod_Mark_basis);
 PARAMETER(PR2.Commodity_Price_Group);
 PARAMETER(LCL.Market_Price_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Prices for this group not available.'
 ERROR(USR2836);
 MSGPARM(PR2.Default_Commod_Mark_basis);
 MSGPARM(PR2.Commodity_Price_Group);

 ENDIF;

 ENDIF;

 ENDDO;

 ENDIF;

 //?Finished Goods and Work in Process
 CASE;

 // IF PR2.Item Type Code is FG/WP
 IF PR2.Item_Type_Code = 'FG'/'WP';

 //?Item Structure Type Code is required
 CASE;

 // IF PR2.Item Structure Type Code is Not Entered
 IF PR2.Item_Structure_Type_Code = *ZERO;

 // Send error message - 'Item Structure Type is required.'
 ERROR(USR3233);
 MSGPARM(PR2.Item_Structure_Type_Code);

 ENDIF;

 //?Item Structure Group Code is required
 CASE;

 // IF PR2.Item Structure Group Code is Not Entered
 IF PR2.Item_Structure_Group_Code = *ZERO;

 // Send error message - 'Item Structure Group is required.'
 ERROR(USR3234);
 MSGPARM(PR2.Item_Structure_Group_Code);

 ENDIF;

 //?Item Structure Class Code is required
 CASE;

 // IF PR2.Item Structure Class Code is Equal Zero
 IF PR2.Item_Structure_Class_Code = *ZERO;

 // Send error message - 'Item Structure Class is required.'
 ERROR(USR3235);
 MSGPARM(PR2.Item_Structure_Class_Code);

 ENDIF;

 //?Partial Item Code & Reject Code Valid - Non CoPacker Item only
 DO;

 CASE;

 // IF PR2.Item Structure Type Code is NE 900
 IF PR2.Item_Structure_Type_Code <> 900;

 //?VAL: Partial Code - Do not validation on Co-Packer
 CASE;

 // IF PR2.Partial Item Code is Entered
 IF PR2.Partial_Item_Code <> *ZERO;

 // Call program Val Itm/Prt or Reject  XF.
 CALL PROGRAM(Val Itm/Prt or Reject  XF) ('PPGBXFR');
 PARAMETER(PR2.Item_Code);
 PARAMETER(PR2.Partial_Item_Code);
 PARAMETER(PR2.Partial_Item_Code);
 PARAMETER(PR2.Partial_Item_Code);
 PARAMETER(LCL.Item_Code_Error_Sts_Usr);

 CASE;

 // IF LCL.Item Code Error Sts Usr is Greater then 5 Positions
 IF LCL.Item_Code_Error_Sts_Usr = 'G';

 // Send error message - 'Partial/WIP Reject Code must be 5 digits or less.'
 ERROR(USR3229);
 MSGPARM(PR2.Partial_Item_Code);

 // IF LCL.Item Code Error Sts Usr is Item Code FG/WIP Error
 IF LCL.Item_Code_Error_Sts_Usr = 'I';

 //?Partial code can not be a finished goods or WIP
 //?Ready by Partial Code -- Item Default By Item code
 // Send error message - 'Partial/WIP Reject Code cannot be an existing Finished or WIP Item Code.'
 ERROR(USR3230);
 MSGPARM(PR2.Partial_Item_Code);

 // IF LCL.Item Code Error Sts Usr is Partial Item Code Fnd Err
 IF LCL.Item_Code_Error_Sts_Usr = 'P';

 //?Partial code can not exist for another Partial code
 //?Ready by Partial Code -- Item Default By Partial Code
 // Send error message - 'Partial/WIP Reject Code already exist on another Finished or WIP Item.'
 ERROR(USR3231);
 MSGPARM(PR2.Partial_Item_Code);

 // IF LCL.Item Code Error Sts Usr is Reject Item Code Fnd Err
 IF LCL.Item_Code_Error_Sts_Usr = 'R';

 //?Partial code can not exist for another Reject
 //?Ready by Partial Code -- Item Default By Reject
 // Send error message - 'Partial/WIP Reject Code already exist on another Finished or WIP Item.'
 ERROR(USR3231);
 MSGPARM(PR2.Partial_Item_Code);

 ENDIF;

 ENDIF;

 //?VAL: Reject Code - Do not validation on Co-Packer
 CASE;

 // IF PR2.WIP Reject Code is Entered
 IF PR2.WIP_Reject_Code <> *ZERO;

 // Call program Val Itm/Prt or Reject  XF.
 CALL PROGRAM(Val Itm/Prt or Reject  XF) ('PPGBXFR');
 PARAMETER(PR2.Item_Code);
 PARAMETER(PR2.WIP_Reject_Code);
 PARAMETER(PR2.WIP_Reject_Code);
 PARAMETER(PR2.WIP_Reject_Code);
 PARAMETER(LCL.Item_Code_Error_Sts_Usr);

 CASE;

 // IF LCL.Item Code Error Sts Usr is Greater then 5 Positions
 IF LCL.Item_Code_Error_Sts_Usr = 'G';

 // Send error message - 'Partial/WIP Reject Code must be 5 digits or less.'
 ERROR(USR3229);
 MSGPARM(PR2.Partial_Item_Code);

 // IF LCL.Item Code Error Sts Usr is Item Code FG/WIP Error
 IF LCL.Item_Code_Error_Sts_Usr = 'I';

 //?Reject code can not be a finished goods or WIP
 //?Ready by Reject Code -- Item Default By Item code
 // Send error message - 'Partial/WIP Reject Code cannot be an existing Finished or WIP Item Code.'
 ERROR(USR3230);
 MSGPARM(PR2.Partial_Item_Code);

 // IF LCL.Item Code Error Sts Usr is Partial Item Code Fnd Err
 IF LCL.Item_Code_Error_Sts_Usr = 'P';

 //?Reject code can not exist for another Partial code
 //?Ready by Reject Code -- Item Default by Partial Code
 // Send error message - 'Partial/WIP Reject Code already exist on another Finished or WIP Item.'
 ERROR(USR3231);
 MSGPARM(PR2.Partial_Item_Code);

 // IF LCL.Item Code Error Sts Usr is Reject Item Code Fnd Err
 IF LCL.Item_Code_Error_Sts_Usr = 'R';

 //?Reject code can not exist for another Reject
 //?Read by Reject Code --_Item Default by Reject Code
 // Send error message - 'Partial/WIP Reject Code already exist on another Finished or WIP Item.'
 ERROR(USR3231);
 MSGPARM(PR2.Partial_Item_Code);

 ENDIF;

 ENDIF;

 ENDIF;

 ENDDO;

 //?Finished Goods and Work in Process
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?If credit item status is yes, item type must be FG or WP
 CASE;

 // IF PR2.Credit Item Status is yes
 IF PR2.Credit_Item_Status = 'Y';

 // Send error message - 'Credit Items must have an item type of 'FG'.'
 ERROR(USR1943);
 MSGPARM(PR2.Credit_Item_Status);

 ENDIF;

 ENDIF;

 //?Variety/Rendered/Cut is Cut, then Base/Conv/Loss Item is req
 CASE;

 // IF PR2.Variety/Rendered/Cut is Cut
 IF PR2.Variety_Rendered_Cut = 'C';

 //?Base/Conv/Loss must be entered
 CASE;

 // IF PR2.Base/Conv/Loss Item is Blank
 IF PR2.Base_Conv_Loss_Item = *BLANK;

 // Send error message - 'Base/Converted/Fabricated must be entered if Variety/Rendered/Cut is cut.'
 ERROR(USR1865);
 MSGPARM(PR2.Base_Conv_Loss_Item);

 ENDIF;

 ENDIF;

 //?Variety/Rendered/Cut must be entered
 CASE;

 // IF PR2.Variety/Rendered/Cut is Not Entered
 IF PR2.Variety_Rendered_Cut = *BLANK;

 // Send error message - 'Variety/Rendering/Cut must be entered for FG/RM Item Type.'
 ERROR(USR1861);
 MSGPARM(PR2.Variety_Rendered_Cut);

 ENDIF;

 //?Default Warehouse
 CASE;

 // IF PR4.Item Validation USR is Company Item
 IF PR4.Item_Validation_USR = 'C';

 //?Warehouse must be entered
 CASE;

 // IF PR2.Default Warehouse is Warehouse Code Blank
 IF PR2.Default_Warehouse = *BLANK;

 // Send error message - 'Warehouse must be entered for Finished Good/Raw Material/Work in Process.'
 ERROR(USR1893);
 MSGPARM(PR2.Default_Warehouse);

 ENDIF;

 ENDIF;

 //?Department code
 CASE;

 // IF PR2.Department Code NE WRK.BLANK
 IF PR2.Department_Code <> WRK.BLANK;

 EXECUTE FUNCTION(Rtv Prod Dept valid   RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1715131;
 PARAMETER(PR2.Department_Code);
 PARAMETER(WRK.Department_Description);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF WRK.Department Description is equal to blank
 IF WRK.Department_Description = *BLANK;

 // Send error message - 'Production Department not found.'
 ERROR(USR1757);
 MSGPARM(PR2.Department_Code);

 ENDIF;

 ENDIF;

 //?Raw Material only
 CASE;

 // IF PR2.Item Type Code is Raw Material
 IF PR2.Item_Type_Code = 'RM';

 //?Base/Conv/Loss Item is required to be Base
 CASE;

 // IF PR2.Base/Conv/Loss Item is Base
 IF PR2.Base_Conv_Loss_Item = 'B';

 //?Base/Conv/Loss Item is required to be Base
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Raw material items must be a base.'
 ERROR(USR2160);
 MSGPARM(PR2.Item_Type_Code);
 MSGPARM(PR2.Base_Conv_Loss_Item);

 ENDIF;

 ENDIF;

 // IF PR2.Item Type Code is Packaging and Supplies
 IF PR2.Item_Type_Code = 'PS';

 //?If not a finished good, print on realization rpt = N
 CASE;

 // IF PR2.Item Type Code is Not Finished Good
 IF PR2.Item_Type_Code <> 'FG';

 // PR2.Print on Realization Rpt = CND.No
 PR2.Print_on_Realization_Rpt = 'N';

 // PR2.Value Added Sts = CND.no
 PR2.Value_Added_Sts = 'N';

 ENDIF;

 //?Package type must be entered for item type 'PS'
 CASE;

 // IF PR2.Package Type Code is *ALL values
 IF PR2.Package_Type_Code = 'B'/'O'/'P';

 //?Package type must be entered for item type 'PS'
 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - 'Package type code must be entered for item type 'PS'.'
 ERROR(USR1906);
 MSGPARM(PR2.Package_Type_Code);

 ENDIF;

 //?If credit item status is yes, item type must be FG or WP
 CASE;

 // IF PR2.Credit Item Status is yes
 IF PR2.Credit_Item_Status = 'Y';

 // Send error message - 'Credit Items must have an item type of 'FG'.'
 ERROR(USR1943);
 MSGPARM(PR2.Credit_Item_Status);

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 ENDIF;

 ENDDO;

}


// DTL.Condition Desc. 2  USR = Condition name of DTL.Default Workcenter
DTL.Condition_Desc_2_USR = RTVCND(DTL.Default_Workcenter);

//?Validation of Item with other BOM
CASE;

// IF DTL.Record Status is Deleted & Inactive
IF DTL.Record_Status = 'D'/'I';

// LCL.Record Found - ItmBom Usr = CND.Blanks
LCL.Record_Found_ItmBom_Usr = *BLANK;

// Call program Val Item Bom Rltnshps XF.
CALL PROGRAM(Val Item Bom Rltnshps XF) ('PNJ9XFR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(LCL.Record_Found_ItmBom_Usr);

CASE;

// IF LCL.Record Found - ItmBom Usr is Record Found
IF LCL.Record_Found_ItmBom_Usr = 'Y';

// Send error message - 'InActive/Delete Item Not allow due to other BOM relationships - verify Wher
ERROR(USR4174);
MSGPARM(DTL.Item_Code);

ENDIF;

ENDIF;

// DTL.Condition Desc. 3  USR = Condition name of DTL.Allocation Method
DTL.Condition_Desc_3_USR = RTVCND(DTL.Allocation_Method);

CASE;

// IF DTL.CIE Capacity Code is Not Entered
IF DTL.CIE_Capacity_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV PS Prod Cap Desc  RT) TYPE(RTVOBJ) FILE(PBBFREP)           AC2079617;
PARAMETER(DTL.CIE_Capacity_Code);
PARAMETER(DTL.PS_Prod_Capacity_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.PS Prod Capacity Desc is equal to blank
IF DTL.PS_Prod_Capacity_Desc = *BLANK;

// Send error message - 'PS Production Capacity not found.'
ERROR(USR4671);
MSGPARM(DTL.CIE_Capacity_Code);

ENDIF;

ENDIF;

//?E3787 JJH 08/04/15 - Validation for Inclu on Prod Schedule
//?SNDERRMSG if Incl on Prod Schedule NE Y or N.
CASE;

// IF DTL.Item Prod Sched Send PFS is Yes
IF DTL.Item_Prod_Sched_Send_PFS = 'Y';

// OR DTL.Item Prod Sched Send PFS is No
OR DTL.Item_Prod_Sched_Send_PFS = 'N';

//?SNDERRMSG if Incl on Prod Schedule NE Y or N.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Incl on Prod Schedule must be Y or N.'
ERROR(USR4812);
MSGPARM(DTL.Item_Prod_Sched_Send_PFS);

ENDIF;

//?USER: Validate detail screen relations

//?F4 on Box Id
CASE;

// IF DTL.*CMD key is CF04
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Box iD
AND PGM.*Cursor_field = DTL.Box_iD;

// Call program SEL Box Items only     SR.
CALL PROGRAM(SEL Box Items only     SR) ('POSGSRR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Box_iD);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Edit Bill of Material
CASE;

// IF DTL.*CMD key is CF09
IF DTL.*CMD_key = '09';

CASE;

// IF DTL.Item Type Code is Packaging and Supplies
IF DTL.Item_Type_Code = 'PS';

//?8/02/01   PK0224  Dont allow for packaging/supplies
// Send error message - 'Function not allowed.'
ERROR(USR1833);

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.BOM Type Usr = CND.Supplies
LCL.BOM_Type_Usr = 'S';

// Call program Edt Bill of Material  ET.
CALL PROGRAM(Edt Bill of Material  ET) ('PPGIETR');
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(LCL.BOM_Type_Usr);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?USER: Change DBF record

EXECUTE FUNCTION(Chg Company Item Spec  IF) TYPE(EXCINTFUN) FILE(CABZREP)       AC1703532;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(DTL.Item_Label_Line_1);
PARAMETER(DTL.Item_Label_Line_2);
PARAMETER(DTL.Item_Label_Line_3);
PARAMETER(DTL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary);
PARAMETER(DTL.Conversion_Factor_1);
PARAMETER(DTL.Operation_Factor_1);
PARAMETER(DTL.UOM_Second);
PARAMETER(DTL.Conversion_Factor_2);
PARAMETER(DTL.Operation_Factor_2);
PARAMETER(DTL.UOM_Third);
PARAMETER(DTL.UOM_Pricing);
PARAMETER(DTL.Unit_Weight);
PARAMETER(DTL.Quality_Level);
PARAMETER(DTL.Item_Level);
PARAMETER(DTL.Production_Date_Control);
PARAMETER(DTL.Catch_Weight_Status);
PARAMETER(DTL.Minimum_Weight_Per_Case);
PARAMETER(DTL.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(DTL.Vendor_Item_Default);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(DTL.Item_Structure_Group_Code);
PARAMETER(DTL.Item_Structure_Type_Code);
PARAMETER(DTL.Default_Commod_Mark_basis);
PARAMETER(DTL.Transportation_Temp);
PARAMETER(DTL.Item_Type_Code);
PARAMETER(DTL.Package_Type_Code);
PARAMETER(DTL.Maximum_Audit_Value);
PARAMETER(DTL.Minimum_Audit_Value);
PARAMETER(DTL.Market_Overage);
PARAMETER(DTL.Standard_Overage_Underage);
PARAMETER(DTL.Commodity_Price_Group);
PARAMETER(DTL.Item_Pricing_Operation);
PARAMETER(DTL.Item_Pricing_Constant);
PARAMETER(DTL.Default_Warehouse);
PARAMETER(DTL.Price_Method_Default);
PARAMETER(DTL.Fresh_Chilling_Time);
PARAMETER(DTL.Base_Conv_Loss_Item);
PARAMETER(DTL.Variety_Rendered_Cut);
PARAMETER(DTL.Frozen_Make_to_Order_Sts);
PARAMETER(DTL.Credit_Item_Status);
PARAMETER(DTL.Std_Weight_Head_Var_Ren);
PARAMETER(DTL.Pieces_Per_Head);
PARAMETER(DTL.Department_Code);
PARAMETER(DTL.Group_for_Packaging);
PARAMETER(DTL.Item_Category_Number_1);
PARAMETER(DTL.Made_to_Order_Code);
PARAMETER(DTL.Item_Category_Number_2);
PARAMETER(DTL.Transportation_Equip_Type);
PARAMETER(DTL.Item_Category_Number_3);
PARAMETER(DTL.Item_Category_Code_3);
PARAMETER(DTL.Item_Category_Number_4);
PARAMETER(DTL.GL_Sub_Code);
PARAMETER(DTL.Item_Category_Number_5);
PARAMETER(DTL.Item_Structure_Sub_Class);
PARAMETER(DTL.Item_Category_Number_6);
PARAMETER(DTL.Item_Primal_Sched_Report);
PARAMETER(DTL.Item_Category_Number_7);
PARAMETER(DTL.Item_Exc_Man_Prc_Excp);
PARAMETER(DTL.Item_Category_Number_8);
PARAMETER(DTL.Item_Prod_Sched_Send_PFS);
PARAMETER(DTL.Item_Category_Number_9);
PARAMETER(DTL.Item_Category_Code_9);
PARAMETER(DTL.Item_Category_Number_10);
PARAMETER(DTL.Item_Category_Code_10);
PARAMETER(DTL.Pallet_Tare_Weight);
PARAMETER(DTL.Misc_Tare_Weight);
PARAMETER(DTL.Production_Lead_Days);
PARAMETER(DTL.Packaging_Code);
PARAMETER(DTL.Item_Market_Code);
PARAMETER(DTL.TF_Co_Ownership_Sts);
PARAMETER(DTL.Agrimetrics_group);
PARAMETER(DTL.Agrimetrics_pack);
PARAMETER(DTL.Agrimetrics_grade);
PARAMETER(DTL.PA_Base_Avail_Rpt_Include);
PARAMETER(DTL.PM_Pounds_per_Hour);
PARAMETER(DTL.Item_Frt_Overage_Prc_UOM);
PARAMETER(DTL.Packages_per_case);
PARAMETER(DTL.Use_Freeze_Sell_By_Days);
PARAMETER(DTL.PM_Batch_Size);
PARAMETER(DTL.Package_Level_size);
PARAMETER(DTL.Partial_Item_Code);
PARAMETER(DTL.WIP_Item_Code);
PARAMETER(DTL.WIP_Reject_Code);
PARAMETER(DTL.Std_Costing_Unit_Weight);
PARAMETER(DTL.FP_Std_Green_Weight);
PARAMETER(DTL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(DTL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(DTL.PM_Formula_LBS_Per_Hour);
PARAMETER(DTL.PM_Finished_LBS_Per_Hour);
PARAMETER(DTL.SH_Unused_was_broker);
PARAMETER(DTL.PM_Raw_Material_Type_Code);
PARAMETER(DTL.PM_Line_Number);
PARAMETER(DTL.Seconds_Item);
PARAMETER(DTL.Print_on_Realization_Rpt);
PARAMETER(DTL.Unit_Weight_Change_Sts);
PARAMETER(DTL.Piece_Count_Item);
PARAMETER(DTL.Pieces_Per_Bag);
PARAMETER(DTL.Bags_Per_Unit);
PARAMETER(DTL.Export_Domestic);
PARAMETER(DTL.Print_On_Schedule);
PARAMETER(DTL.Fresh_Inv_Allocation_Seq);
PARAMETER(DTL.Fresh_Sched_As_Ordered);
PARAMETER(DTL.Frozen_Inv_Allocation_Seq);
PARAMETER(DTL.Primal_Group_Code);
PARAMETER(DTL.Item_Meat_Cost_Group_Code);
PARAMETER(DTL.UPC_Code_2);
PARAMETER(DTL.Item_Target_Price);
PARAMETER(DTL.Minimum_Piece_Weight);
PARAMETER(DTL.Maximum_Piece_Weight);
PARAMETER(DTL.Seaboard_Equivalent_Item);
PARAMETER(DTL.Production_Qty_Per_Shift);
PARAMETER(DTL.Scheduling_Position_Grade);
PARAMETER(DTL.Sold_100_Percent_Frozen);
PARAMETER(DTL.Maximum_Shifts);
PARAMETER(DTL.Value_Added_Sts);
PARAMETER(DTL.Label_Type);
PARAMETER(DTL.Item_TF_Exempt_Code);
PARAMETER(DTL.Item_TF_Classification);
PARAMETER(DTL.Default_Workcenter);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.Description_Line_One);
PARAMETER(PAR.Description_Line_Two);
PARAMETER(PAR.Item_Label_Line_1);
PARAMETER(PAR.Item_Label_Line_2);
PARAMETER(PAR.Item_Label_Line_3);
PARAMETER(PAR.Item_Label_Line_4);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.UOM_Pricing);
PARAMETER(PAR.Unit_Weight);
PARAMETER(PAR.Quality_Level);
PARAMETER(PAR.Item_Level);
PARAMETER(PAR.Production_Date_Control);
PARAMETER(PAR.Catch_Weight_Status);
PARAMETER(PAR.Minimum_Weight_Per_Case);
PARAMETER(PAR.Maximum_Weight_Per_Case);
PARAMETER(PAR.Number_Cases_On_A_Pallet);
PARAMETER(PAR.Vendor_Item_Default);
PARAMETER(PAR.Item_Structure_Class_Code);
PARAMETER(PAR.Item_Structure_Group_Code);
PARAMETER(PAR.Item_Structure_Type_Code);
PARAMETER(PAR.Default_Commod_Mark_basis);
PARAMETER(PAR.Transportation_Temp);
PARAMETER(PAR.Item_Type_Code);
PARAMETER(PAR.Package_Type_Code);
PARAMETER(PAR.Maximum_Audit_Value);
PARAMETER(PAR.Minimum_Audit_Value);
PARAMETER(PAR.Market_Overage);
PARAMETER(PAR.Standard_Overage_Underage);
PARAMETER(PAR.Commodity_Price_Group);
PARAMETER(PAR.Item_Pricing_Operation);
PARAMETER(PAR.Item_Pricing_Constant);
PARAMETER(PAR.Default_Warehouse);
PARAMETER(PAR.Price_Method_Default);
PARAMETER(PAR.Fresh_Chilling_Time);
PARAMETER(PAR.Base_Conv_Loss_Item);
PARAMETER(PAR.Variety_Rendered_Cut);
PARAMETER(PAR.Frozen_Make_to_Order_Sts);
PARAMETER(PAR.Credit_Item_Status);
PARAMETER(PAR.Std_Weight_Head_Var_Ren);
PARAMETER(PAR.Pieces_Per_Head);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Group_for_Packaging);
PARAMETER(PAR.Item_Category_Number_1);
PARAMETER(PAR.Made_to_Order_Code);
PARAMETER(PAR.Item_Category_Number_2);
PARAMETER(PAR.Transportation_Equip_Type);
PARAMETER(PAR.Item_Category_Number_3);
PARAMETER(PAR.Item_Category_Code_3);
PARAMETER(PAR.Item_Category_Number_4);
PARAMETER(PAR.GL_Sub_Code);
PARAMETER(PAR.Item_Category_Number_5);
PARAMETER(PAR.Item_Structure_Sub_Class);
PARAMETER(PAR.Item_Category_Number_6);
PARAMETER(PAR.Item_Primal_Sched_Report);
PARAMETER(PAR.Item_Category_Number_7);
PARAMETER(PAR.Item_Exc_Man_Prc_Excp);
PARAMETER(PAR.Item_Category_Number_8);
PARAMETER(PAR.Item_Prod_Sched_Send_PFS);
PARAMETER(PAR.Item_Category_Number_9);
PARAMETER(PAR.Item_Category_Code_9);
PARAMETER(PAR.Item_Category_Number_10);
PARAMETER(PAR.Item_Category_Code_10);
PARAMETER(PAR.Pallet_Tare_Weight);
PARAMETER(PAR.Misc_Tare_Weight);
PARAMETER(PAR.Production_Lead_Days);
PARAMETER(PAR.Packaging_Code);
PARAMETER(PAR.Item_Market_Code);
PARAMETER(PAR.TF_Co_Ownership_Sts);
PARAMETER(PAR.Agrimetrics_group);
PARAMETER(PAR.Agrimetrics_pack);
PARAMETER(PAR.Agrimetrics_grade);
PARAMETER(PAR.PA_Base_Avail_Rpt_Include);
PARAMETER(PAR.PM_Pounds_per_Hour);
PARAMETER(PAR.Item_Frt_Overage_Prc_UOM);
PARAMETER(PAR.Packages_per_case);
PARAMETER(PAR.Use_Freeze_Sell_By_Days);
PARAMETER(PAR.PM_Batch_Size);
PARAMETER(PAR.Package_Level_size);
PARAMETER(PAR.Partial_Item_Code);
PARAMETER(PAR.WIP_Item_Code);
PARAMETER(PAR.WIP_Reject_Code);
PARAMETER(PAR.Std_Costing_Unit_Weight);
PARAMETER(PAR.FP_Std_Green_Weight);
PARAMETER(PAR.PM_Std_LBS_Man_Per_Hour);
PARAMETER(PAR.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(PAR.PM_Formula_LBS_Per_Hour);
PARAMETER(PAR.PM_Finished_LBS_Per_Hour);
PARAMETER(PAR.SH_Unused_was_broker);
PARAMETER(PAR.PM_Raw_Material_Type_Code);
PARAMETER(PAR.PM_Line_Number);
PARAMETER(PAR.Seconds_Item);
PARAMETER(PAR.Print_on_Realization_Rpt);
PARAMETER(PAR.Unit_Weight_Change_Sts);
PARAMETER(PAR.Piece_Count_Item);
PARAMETER(PAR.Pieces_Per_Bag);
PARAMETER(PAR.Bags_Per_Unit);
PARAMETER(PAR.Export_Domestic);
PARAMETER(PAR.Print_On_Schedule);
PARAMETER(PAR.Fresh_Inv_Allocation_Seq);
PARAMETER(PAR.Fresh_Sched_As_Ordered);
PARAMETER(PAR.Frozen_Inv_Allocation_Seq);
PARAMETER(PAR.Primal_Group_Code);
PARAMETER(DTL.Item_Meat_Cost_Group_Code);
PARAMETER(PAR.Item_Target_Price);
PARAMETER(PAR.Minimum_Piece_Weight);
PARAMETER(PAR.Maximum_Piece_Weight);
PARAMETER(PAR.Seaboard_Equivalent_Item);
PARAMETER(PAR.Production_Qty_Per_Shift);
PARAMETER(PAR.Scheduling_Position_Grade);
PARAMETER(PAR.Sold_100_Percent_Frozen);
PARAMETER(PAR.Maximum_Shifts);
PARAMETER(PAR.Value_Added_Sts);
PARAMETER(PAR.Label_Type);
PARAMETER(PAR.Default_Workcenter);
PARAMETER(PAR.Record_Status);
PARAMETER(DTL.Box_iD);
PARAMETER(PAR.Box_iD);
PARAMETER(DTL.Produce_on_Sunday_Sts);
PARAMETER(DTL.Produce_on_Monday_Sts);
PARAMETER(DTL.Produce_on_Tuesday_Sts);
PARAMETER(DTL.Produce_on_Wednesday_Sts);
PARAMETER(DTL.Produce_on_Thursday_Sts);
PARAMETER(DTL.Produce_on_Friday_Sts);
PARAMETER(DTL.Produce_on_Saturday_Sts);
PARAMETER(DTL.Plan_Production_Sts);
PARAMETER(DTL.Allocation_Method);
PARAMETER(DTL.CIE_Use_Age_Days_over_Max);
PARAMETER(DTL.CIE_MPR_Report_to_USDA);
PARAMETER(DTL.CIE_Capacity_Code);
{
 //?Execute internal function

 EXECUTE FUNCTION(Chg Company Item Spec  CH) TYPE(CHGOBJ) FILE(CABZREP)          AC1701967;
 PARAMETER(PR1.Company_Number);
 PARAMETER(PR1.Item_Code);
 PARAMETER(PR1.Description_Line_One);
 PARAMETER(PR1.Description_Line_Two);
 PARAMETER(PR1.Item_Label_Line_1);
 PARAMETER(PR1.Item_Label_Line_2);
 PARAMETER(PR1.Item_Label_Line_3);
 PARAMETER(PR1.Item_Label_Line_4);
 PARAMETER(PR1.UOM_Primary);
 PARAMETER(PR1.Conversion_Factor_1);
 PARAMETER(PR1.Operation_Factor_1);
 PARAMETER(PR1.UOM_Second);
 PARAMETER(PR1.Conversion_Factor_2);
 PARAMETER(PR1.Operation_Factor_2);
 PARAMETER(PR1.UOM_Third);
 PARAMETER(PR1.UOM_Pricing);
 PARAMETER(PR1.Unit_Weight);
 PARAMETER(PR1.Quality_Level);
 PARAMETER(PR1.Item_Level);
 PARAMETER(PR1.Production_Date_Control);
 PARAMETER(PR1.Catch_Weight_Status);
 PARAMETER(PR1.Minimum_Weight_Per_Case);
 PARAMETER(PR1.Maximum_Weight_Per_Case);
 PARAMETER(PR1.Number_Cases_On_A_Pallet);
 PARAMETER(PR1.Vendor_Item_Default);
 PARAMETER(PR1.Item_Structure_Class_Code);
 PARAMETER(PR1.Item_Structure_Group_Code);
 PARAMETER(PR1.Item_Structure_Type_Code);
 PARAMETER(PR1.Default_Commod_Mark_basis);
 PARAMETER(PR1.Transportation_Temp);
 PARAMETER(PR1.Item_Type_Code);
 PARAMETER(PR1.Package_Type_Code);
 PARAMETER(PR1.Maximum_Audit_Value);
 PARAMETER(PR1.Minimum_Audit_Value);
 PARAMETER(PR1.Market_Overage);
 PARAMETER(PR1.Standard_Overage_Underage);
 PARAMETER(PR1.Commodity_Price_Group);
 PARAMETER(PR1.Item_Pricing_Operation);
 PARAMETER(PR1.Item_Pricing_Constant);
 PARAMETER(PR1.Default_Warehouse);
 PARAMETER(PR1.Price_Method_Default);
 PARAMETER(PR1.Fresh_Chilling_Time);
 PARAMETER(PR1.Base_Conv_Loss_Item);
 PARAMETER(PR1.Variety_Rendered_Cut);
 PARAMETER(PR1.Frozen_Make_to_Order_Sts);
 PARAMETER(PR1.Credit_Item_Status);
 PARAMETER(PR1.Std_Weight_Head_Var_Ren);
 PARAMETER(PR1.Pieces_Per_Head);
 PARAMETER(PR1.Department_Code);
 PARAMETER(PR1.Group_for_Packaging);
 PARAMETER(PR1.Item_Category_Number_1);
 PARAMETER(PR1.Made_to_Order_Code);
 PARAMETER(PR1.Item_Category_Number_2);
 PARAMETER(PR1.Transportation_Equip_Type);
 PARAMETER(PR1.Item_Category_Number_3);
 PARAMETER(PR1.Item_Category_Code_3);
 PARAMETER(PR1.Item_Category_Number_4);
 PARAMETER(PR1.GL_Sub_Code);
 PARAMETER(PR1.Item_Category_Number_5);
 PARAMETER(PR1.Item_Structure_Sub_Class);
 PARAMETER(PR1.Item_Category_Number_6);
 PARAMETER(PR1.Item_Primal_Sched_Report);
 PARAMETER(PR1.Item_Category_Number_7);
 PARAMETER(PR1.Item_Exc_Man_Prc_Excp);
 PARAMETER(PR1.Item_Category_Number_8);
 PARAMETER(PR1.Item_Prod_Sched_Send_PFS);
 PARAMETER(PR1.Item_Category_Number_9);
 PARAMETER(PR1.Item_Category_Code_9);
 PARAMETER(PR1.Item_Category_Number_10);
 PARAMETER(PR1.Item_Category_Code_10);
 PARAMETER(PR1.Pallet_Tare_Weight);
 PARAMETER(PR1.Misc_Tare_Weight);
 PARAMETER(PR1.Production_Lead_Days);
 PARAMETER(PR1.Packaging_Code);
 PARAMETER(PR1.Item_Market_Code);
 PARAMETER(PR1.TF_Co_Ownership_Sts);
 PARAMETER(PR1.Agrimetrics_group);
 PARAMETER(PR1.Agrimetrics_pack);
 PARAMETER(PR1.Agrimetrics_grade);
 PARAMETER(PR1.PA_Base_Avail_Rpt_Include);
 PARAMETER(PR1.PM_Pounds_per_Hour);
 PARAMETER(PR1.Item_Frt_Overage_Prc_UOM);
 PARAMETER(PR1.Packages_per_case);
 PARAMETER(PR1.Use_Freeze_Sell_By_Days);
 PARAMETER(PR1.PM_Batch_Size);
 PARAMETER(PR1.Package_Level_size);
 PARAMETER(PR1.Partial_Item_Code);
 PARAMETER(PR1.WIP_Item_Code);
 PARAMETER(PR1.WIP_Reject_Code);
 PARAMETER(PR1.Std_Costing_Unit_Weight);
 PARAMETER(PR1.FP_Std_Green_Weight);
 PARAMETER(PR1.PM_Std_LBS_Man_Per_Hour);
 PARAMETER(PR1.PM_Raw_Meat_LBS_Per_Hour);
 PARAMETER(PR1.PM_Formula_LBS_Per_Hour);
 PARAMETER(PR1.PM_Finished_LBS_Per_Hour);
 PARAMETER(PR1.SH_Unused_was_broker);
 PARAMETER(PR1.PM_Raw_Material_Type_Code);
 PARAMETER(PR1.PM_Line_Number);
 PARAMETER(PR1.Seconds_Item);
 PARAMETER(PR1.Print_on_Realization_Rpt);
 PARAMETER(PR1.Unit_Weight_Change_Sts);
 PARAMETER(PR1.Piece_Count_Item);
 PARAMETER(PR1.Pieces_Per_Bag);
 PARAMETER(PR1.Bags_Per_Unit);
 PARAMETER(PR1.Export_Domestic);
 PARAMETER(PR1.Print_On_Schedule);
 PARAMETER(PR1.Fresh_Inv_Allocation_Seq);
 PARAMETER(PR1.Fresh_Sched_As_Ordered);
 PARAMETER(PR1.Frozen_Inv_Allocation_Seq);
 PARAMETER(PR1.Primal_Group_Code);
 PARAMETER(PR1.Item_Meat_Cost_Group_Code);
 PARAMETER(PR1.Item_Target_Price);
 PARAMETER(PR1.Minimum_Piece_Weight);
 PARAMETER(PR1.Maximum_Piece_Weight);
 PARAMETER(PR1.Seaboard_Equivalent_Item);
 PARAMETER(PR1.Production_Qty_Per_Shift);
 PARAMETER(PR1.Scheduling_Position_Grade);
 PARAMETER(PR1.Sold_100_Percent_Frozen);
 PARAMETER(PR1.Maximum_Shifts);
 PARAMETER(PR1.Value_Added_Sts);
 PARAMETER(PR1.Label_Type);
 PARAMETER(PR1.Item_TF_Exempt_Code);
 PARAMETER(PR1.Item_TF_Classification);
 PARAMETER(PR1.Default_Workcenter);
 PARAMETER(PR1.EDI_Status_1);
 PARAMETER(PR1.EDI_Status_2);
 PARAMETER(PR1.EDI_Status_3);
 PARAMETER(PR1.Record_Status);
 {
  //?USER: Processing after Data read

  //?Notification of change
  DO;

  // LCL.Company Number Alpha = CVTVAR(DB1.Company Number)
  LCL.Company_Number_Alpha = CVTVAR(DB1.Company_Number);

  // LCL.Item Code Txt = CVTVAR(DB1.Item Code)
  LCL.Item_Code_Txt = CVTVAR(DB1.Item_Code);

  // LCL.Text USR 8 = CONCAT(CON.Type:,DB1.Item Type Code,CON.1)
  LCL.Text_USR_8 = 'Type:' + DB1.Item_Type_Code (1);

  // LCL.Text USR 20 = CONCAT(CON.Changed By:,JOB.*USER,CON.1)
  LCL.Text_USR_20 = 'Changed By:' + JOB.*USER (1);

  // LCL.Note: Text Usr - 50 = CONCAT(CON.CO/ITEM:,LCL.Company Number Alpha,CON.1)
  LCL.Note_Text_Usr_50 = 'CO/ITEM:' + LCL.Company_Number_Alpha (1);

  // LCL.Note: Text Usr - 50 = CONCAT(LCL.Note: Text Usr - 50,LCL.Item Code Txt,CON.1)
  LCL.Note_Text_Usr_50 = LCL.Note_Text_Usr_50 + LCL.Item_Code_Txt (1);

  // LCL.Note: Text Usr - 50 = CONCAT(LCL.Note: Text Usr - 50,LCL.Text USR 8,CON.1)
  LCL.Note_Text_Usr_50 = LCL.Note_Text_Usr_50 + LCL.Text_USR_8 (1);

  // LCL.Note: Text Usr - 50 = CONCAT(LCL.Note: Text Usr - 50,LCL.Text USR 20,CON.1)
  LCL.Note_Text_Usr_50 = LCL.Note_Text_Usr_50 + LCL.Text_USR_20 (1);

  //?Packaging & Supply
  CASE;

  // IF DB1.Item Type Code is Packaging and Supplies
  IF DB1.Item_Type_Code = 'PS';

  //?Box Unit Weight
  CASE;

  // IF DB1.Unit Weight NE PAR.Unit Weight
  IF DB1.Unit_Weight <> PAR.Unit_Weight;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_1 = RTVMSG(USR3138);
  PARAMETER('Unit Weight:');
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(*BLANK);

  ENDIF;

  ENDIF;

  //?Finished Goods
  CASE;

  // IF DB1.Item Type Code is Finished Goods
  IF DB1.Item_Type_Code = 'FG';

  //?Misc Tare Weight
  CASE;

  // IF PAR.Misc Tare Weight NE DB1.Misc Tare Weight
  IF PAR.Misc_Tare_Weight <> DB1.Misc_Tare_Weight;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_1 = RTVMSG(USR3138);
  PARAMETER('Misc Tare Weight:');
  PARAMETER(PAR.Misc_Tare_Weight);
  PARAMETER(',');

  ENDIF;

  //?Minimum Weight Per Case
  CASE;

  // IF PAR.Minimum Weight Per Case NE DB1.Minimum Weight Per Case
  IF PAR.Minimum_Weight_Per_Case <> DB1.Minimum_Weight_Per_Case;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_2 = RTVMSG(USR3138);
  PARAMETER('Min Wt per Case:');
  PARAMETER(PAR.Minimum_Weight_Per_Case);
  PARAMETER(',');

  ENDIF;

  //?Maximum Weight Per Case
  CASE;

  // IF PAR.Maximum Weight Per Case NE DB1.Maximum Weight Per Case
  IF PAR.Maximum_Weight_Per_Case <> DB1.Maximum_Weight_Per_Case;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_3 = RTVMSG(USR3138);
  PARAMETER('Max Wt per Case:');
  PARAMETER(PAR.Maximum_Weight_Per_Case);
  PARAMETER(',');

  ENDIF;

  //?Pieces per Bag
  CASE;

  // IF PAR.Pieces Per Bag NE DB1.Pieces Per Bag
  IF PAR.Pieces_Per_Bag <> DB1.Pieces_Per_Bag;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_4 = RTVMSG(USR3138);
  PARAMETER('Pieces per Bag:');
  PARAMETER(PAR.Pieces_Per_Bag);
  PARAMETER(',');

  ENDIF;

  //?Bags per Unit
  CASE;

  // IF PAR.Bags Per Unit NE DB1.Bags Per Unit
  IF PAR.Bags_Per_Unit <> DB1.Bags_Per_Unit;

  // LCL.Change Flag USR = CND.Yes
  LCL.Change_Flag_USR = 'Y';

  // Retrieve message - '&1 &2 &3'
  LCL.Office_Message_USR_5 = RTVMSG(USR3138);
  PARAMETER('Bags per Unit:');
  PARAMETER(PAR.Bags_Per_Unit);
  PARAMETER(',');

  ENDIF;

  ENDIF;

  CASE;

  // IF LCL.Change Flag USR is Yes
  IF LCL.Change_Flag_USR = 'Y';

  EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
  PARAMETER(DB1.Company_Number);
  PARAMETER('PRKSCHED');
  PARAMETER(WRK.DL_List_ID);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // Call program SND Pager Msg-Long-50 UP.
  CALL PROGRAM(SND Pager Msg-Long-50 UP) ('PPFVUPC');
  PARAMETER(WRK.DL_List_ID);
  PARAMETER(LCL.Note_Text_Usr_50);
  PARAMETER(LCL.Office_Message_USR_1);
  PARAMETER(LCL.Office_Message_USR_2);
  PARAMETER(LCL.Office_Message_USR_3);
  PARAMETER(LCL.Office_Message_USR_4);
  PARAMETER(LCL.Office_Message_USR_5);

  ENDIF;

  ENDDO;

  //?RMC added 2.28.22
  CASE;

  // IF DB1.Record Status NE PAR.Record Status
  IF DB1.Record_Status <> PAR.Record_Status;

  // Call program Rtv Chg Pckg BOM RcdStXF.
  CALL PROGRAM(Rtv Chg Pckg BOM RcdStXF) ('PUV2XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(PAR.Record_Status);

  ENDIF;

  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 //?Plt Floor Intrfc, Item Str Chg, Pricing Audit. BOXID - BOM
 DO;

 // Call program Chg Co/Itm EffOthfls   XF.
 CALL PROGRAM(Chg Co/Itm EffOthfls   XF) ('PPGPXFR');
 PARAMETER(PR1.Company_Number);
 PARAMETER(PR1.Item_Code);
 PARAMETER(PR1.Description_Line_One);
 PARAMETER(PR1.Description_Line_Two);
 PARAMETER(PR1.Item_Label_Line_1);
 PARAMETER(PR1.Item_Label_Line_2);
 PARAMETER(PR1.Item_Label_Line_3);
 PARAMETER(PR1.Item_Label_Line_4);
 PARAMETER(PR1.UOM_Primary);
 PARAMETER(PR1.Conversion_Factor_1);
 PARAMETER(PR1.Operation_Factor_1);
 PARAMETER(PR1.UOM_Second);
 PARAMETER(PR1.Conversion_Factor_2);
 PARAMETER(PR1.Operation_Factor_2);
 PARAMETER(PR1.UOM_Third);
 PARAMETER(PR1.UOM_Pricing);
 PARAMETER(PR1.Unit_Weight);
 PARAMETER(PR1.Quality_Level);
 PARAMETER(PR1.Item_Level);
 PARAMETER(PR1.Production_Date_Control);
 PARAMETER(PR1.Catch_Weight_Status);
 PARAMETER(PR1.Minimum_Weight_Per_Case);
 PARAMETER(PR1.Maximum_Weight_Per_Case);
 PARAMETER(PR1.Number_Cases_On_A_Pallet);
 PARAMETER(PR1.Vendor_Item_Default);
 PARAMETER(PR1.Item_Structure_Class_Code);
 PARAMETER(PR1.Item_Structure_Group_Code);
 PARAMETER(PR1.Item_Structure_Type_Code);
 PARAMETER(PR1.Default_Commod_Mark_basis);
 PARAMETER(PR1.Transportation_Temp);
 PARAMETER(PR1.Item_Type_Code);
 PARAMETER(PR1.Package_Type_Code);
 PARAMETER(PR1.Maximum_Audit_Value);
 PARAMETER(PR1.Minimum_Audit_Value);
 PARAMETER(PR1.Market_Overage);
 PARAMETER(PR1.Standard_Overage_Underage);
 PARAMETER(PR1.Commodity_Price_Group);
 PARAMETER(PR1.Item_Pricing_Operation);
 PARAMETER(PR1.Item_Pricing_Constant);
 PARAMETER(PR1.Default_Warehouse);
 PARAMETER(PR1.Price_Method_Default);
 PARAMETER(PR1.Fresh_Chilling_Time);
 PARAMETER(PR1.Base_Conv_Loss_Item);
 PARAMETER(PR1.Variety_Rendered_Cut);
 PARAMETER(PR1.Frozen_Make_to_Order_Sts);
 PARAMETER(PR1.Credit_Item_Status);
 PARAMETER(PR1.Std_Weight_Head_Var_Ren);
 PARAMETER(PR1.Pieces_Per_Head);
 PARAMETER(PR1.Department_Code);
 PARAMETER(PR1.Group_for_Packaging);
 PARAMETER(PR1.Item_Category_Number_1);
 PARAMETER(PR1.Made_to_Order_Code);
 PARAMETER(PR1.Item_Category_Number_2);
 PARAMETER(PR1.Transportation_Equip_Type);
 PARAMETER(PR1.Item_Category_Number_3);
 PARAMETER(PR1.Item_Category_Code_3);
 PARAMETER(PR1.Item_Category_Number_4);
 PARAMETER(PR1.GL_Sub_Code);
 PARAMETER(PR1.Pallet_Tare_Weight);
 PARAMETER(PR1.Misc_Tare_Weight);
 PARAMETER(PR1.Production_Lead_Days);
 PARAMETER(PR1.Packaging_Code);
 PARAMETER(PR1.Item_Market_Code);
 PARAMETER(PR1.TF_Co_Ownership_Sts);
 PARAMETER(PR1.Agrimetrics_group);
 PARAMETER(PR1.Agrimetrics_pack);
 PARAMETER(PR1.Agrimetrics_grade);
 PARAMETER(PR1.PA_Base_Avail_Rpt_Include);
 PARAMETER(PR1.PM_Pounds_per_Hour);
 PARAMETER(PR1.Item_Frt_Overage_Prc_UOM);
 PARAMETER(PR1.Packages_per_case);
 PARAMETER(PR1.Use_Freeze_Sell_By_Days);
 PARAMETER(PR1.PM_Batch_Size);
 PARAMETER(PR1.Package_Level_size);
 PARAMETER(PR1.Partial_Item_Code);
 PARAMETER(PR1.WIP_Item_Code);
 PARAMETER(PR1.WIP_Reject_Code);
 PARAMETER(PR1.Std_Costing_Unit_Weight);
 PARAMETER(PR1.FP_Std_Green_Weight);
 PARAMETER(PR1.PM_Std_LBS_Man_Per_Hour);
 PARAMETER(PR1.PM_Raw_Meat_LBS_Per_Hour);
 PARAMETER(PR1.PM_Formula_LBS_Per_Hour);
 PARAMETER(PR1.PM_Finished_LBS_Per_Hour);
 PARAMETER(PR1.SH_Unused_was_broker);
 PARAMETER(PR1.PM_Raw_Material_Type_Code);
 PARAMETER(PR1.PM_Line_Number);
 PARAMETER(PR1.Seconds_Item);
 PARAMETER(PR1.Print_on_Realization_Rpt);
 PARAMETER(PR1.Unit_Weight_Change_Sts);
 PARAMETER(PR1.Piece_Count_Item);
 PARAMETER(PR1.Pieces_Per_Bag);
 PARAMETER(PR1.Bags_Per_Unit);
 PARAMETER(PR1.Export_Domestic);
 PARAMETER(PR1.Print_On_Schedule);
 PARAMETER(PR1.Fresh_Inv_Allocation_Seq);
 PARAMETER(PR1.Fresh_Sched_As_Ordered);
 PARAMETER(PR1.Frozen_Inv_Allocation_Seq);
 PARAMETER(PR1.Primal_Group_Code);
 PARAMETER(PR1.Item_Meat_Cost_Group_Code);
 PARAMETER(PR1.UPC_Code_2);
 PARAMETER(PR1.Item_Target_Price);
 PARAMETER(PR1.Minimum_Piece_Weight);
 PARAMETER(PR1.Maximum_Piece_Weight);
 PARAMETER(PR1.Seaboard_Equivalent_Item);
 PARAMETER(PR1.Production_Qty_Per_Shift);
 PARAMETER(PR1.Scheduling_Position_Grade);
 PARAMETER(PR1.Sold_100_Percent_Frozen);
 PARAMETER(PR1.Maximum_Shifts);
 PARAMETER(PR1.Value_Added_Sts);
 PARAMETER(PR1.Label_Type);
 PARAMETER(PR1.Default_Workcenter);
 PARAMETER(PR1.Record_Status);
 PARAMETER(PR2.Company_Number);
 PARAMETER(PR2.Item_Code);
 PARAMETER(PR2.Description_Line_One);
 PARAMETER(PR2.Description_Line_Two);
 PARAMETER(PR2.Item_Label_Line_1);
 PARAMETER(PR2.Item_Label_Line_2);
 PARAMETER(PR2.Item_Label_Line_3);
 PARAMETER(PR2.Item_Label_Line_4);
 PARAMETER(PR2.UOM_Primary);
 PARAMETER(PR2.Conversion_Factor_1);
 PARAMETER(PR2.Operation_Factor_1);
 PARAMETER(PR2.UOM_Second);
 PARAMETER(PR2.Conversion_Factor_2);
 PARAMETER(PR2.Operation_Factor_2);
 PARAMETER(PR2.UOM_Third);
 PARAMETER(PR2.UOM_Pricing);
 PARAMETER(PR2.Unit_Weight);
 PARAMETER(PR2.Quality_Level);
 PARAMETER(PR2.Item_Level);
 PARAMETER(PR2.Production_Date_Control);
 PARAMETER(PR2.Catch_Weight_Status);
 PARAMETER(PR2.Minimum_Weight_Per_Case);
 PARAMETER(PR2.Maximum_Weight_Per_Case);
 PARAMETER(PR2.Number_Cases_On_A_Pallet);
 PARAMETER(PR2.Vendor_Item_Default);
 PARAMETER(PR2.Item_Structure_Class_Code);
 PARAMETER(PR2.Item_Structure_Group_Code);
 PARAMETER(PR2.Item_Structure_Type_Code);
 PARAMETER(PR2.Default_Commod_Mark_basis);
 PARAMETER(PR2.Transportation_Temp);
 PARAMETER(PR2.Item_Type_Code);
 PARAMETER(PR2.Package_Type_Code);
 PARAMETER(PR2.Maximum_Audit_Value);
 PARAMETER(PR2.Minimum_Audit_Value);
 PARAMETER(PR2.Market_Overage);
 PARAMETER(PR2.Standard_Overage_Underage);
 PARAMETER(PR2.Commodity_Price_Group);
 PARAMETER(PR2.Item_Pricing_Operation);
 PARAMETER(PR2.Item_Pricing_Constant);
 PARAMETER(PR2.Default_Warehouse);
 PARAMETER(PR2.Price_Method_Default);
 PARAMETER(PR2.Fresh_Chilling_Time);
 PARAMETER(PR2.Base_Conv_Loss_Item);
 PARAMETER(PR2.Variety_Rendered_Cut);
 PARAMETER(PR2.Frozen_Make_to_Order_Sts);
 PARAMETER(PR2.Credit_Item_Status);
 PARAMETER(PR2.Std_Weight_Head_Var_Ren);
 PARAMETER(PR2.Pieces_Per_Head);
 PARAMETER(PR2.Department_Code);
 PARAMETER(PR2.Group_for_Packaging);
 PARAMETER(PR2.Item_Category_Number_1);
 PARAMETER(PR2.Made_to_Order_Code);
 PARAMETER(PR2.Item_Category_Number_2);
 PARAMETER(PR2.Transportation_Equip_Type);
 PARAMETER(PR2.Item_Category_Number_3);
 PARAMETER(PR2.Item_Category_Code_3);
 PARAMETER(PR2.Item_Category_Number_4);
 PARAMETER(PR2.GL_Sub_Code);
 PARAMETER(PR2.Pallet_Tare_Weight);
 PARAMETER(PR2.Misc_Tare_Weight);
 PARAMETER(PR2.Production_Lead_Days);
 PARAMETER(PR2.Packaging_Code);
 PARAMETER(PR2.Item_Market_Code);
 PARAMETER(PR2.TF_Co_Ownership_Sts);
 PARAMETER(PR2.Agrimetrics_group);
 PARAMETER(PR2.Agrimetrics_pack);
 PARAMETER(PR2.Agrimetrics_grade);
 PARAMETER(PR2.PA_Base_Avail_Rpt_Include);
 PARAMETER(PR2.PM_Pounds_per_Hour);
 PARAMETER(PR2.Item_Frt_Overage_Prc_UOM);
 PARAMETER(PR2.Packages_per_case);
 PARAMETER(PR2.Use_Freeze_Sell_By_Days);
 PARAMETER(PR2.PM_Batch_Size);
 PARAMETER(PR2.Package_Level_size);
 PARAMETER(PR2.Partial_Item_Code);
 PARAMETER(PR2.WIP_Item_Code);
 PARAMETER(PR2.WIP_Reject_Code);
 PARAMETER(PR2.Std_Costing_Unit_Weight);
 PARAMETER(PR2.FP_Std_Green_Weight);
 PARAMETER(PR2.PM_Std_LBS_Man_Per_Hour);
 PARAMETER(PR2.PM_Raw_Meat_LBS_Per_Hour);
 PARAMETER(PR2.PM_Formula_LBS_Per_Hour);
 PARAMETER(PR2.PM_Finished_LBS_Per_Hour);
 PARAMETER(PR2.SH_Unused_was_broker);
 PARAMETER(PR2.PM_Raw_Material_Type_Code);
 PARAMETER(PR2.PM_Line_Number);
 PARAMETER(PR2.Seconds_Item);
 PARAMETER(PR2.Print_on_Realization_Rpt);
 PARAMETER(PR2.Unit_Weight_Change_Sts);
 PARAMETER(PR2.Piece_Count_Item);
 PARAMETER(PR2.Pieces_Per_Bag);
 PARAMETER(PR2.Bags_Per_Unit);
 PARAMETER(PR2.Export_Domestic);
 PARAMETER(PR2.Print_On_Schedule);
 PARAMETER(PR2.Fresh_Inv_Allocation_Seq);
 PARAMETER(PR2.Fresh_Sched_As_Ordered);
 PARAMETER(PR2.Frozen_Inv_Allocation_Seq);
 PARAMETER(PR2.Primal_Group_Code);
 PARAMETER(PR2.Item_Meat_Cost_Group_Code);
 PARAMETER(PR2.UPC_Code_2);
 PARAMETER(PR2.Item_Target_Price);
 PARAMETER(PR2.Minimum_Piece_Weight);
 PARAMETER(PR2.Maximum_Piece_Weight);
 PARAMETER(PR2.Seaboard_Equivalent_Item);
 PARAMETER(PR2.Production_Qty_Per_Shift);
 PARAMETER(PR2.Scheduling_Position_Grade);
 PARAMETER(PR2.Sold_100_Percent_Frozen);
 PARAMETER(PR2.Maximum_Shifts);
 PARAMETER(PR2.Value_Added_Sts);
 PARAMETER(PR2.Label_Type);
 PARAMETER(PR2.Default_Workcenter);
 PARAMETER(PR2.Record_Status);
 PARAMETER(PR3.Box_iD);
 PARAMETER(PR4.Box_iD);

 ENDDO;

 ENDIF;

 //? FP1054 RMC- update the days and plan prod sts, alloc mthd
 //? E2073  RMC- update Use age days over max
 //? E2247  RMC- update CIE MPR report to usda
 //? E2885  RMC- update CIE capacity code
 // Call program Rtv Upd CIE frm ItmSpcXF.
 CALL PROGRAM(Rtv Upd CIE frm ItmSpcXF) ('PMF5XFR');
 PARAMETER(PR1.Company_Number);
 PARAMETER(PR1.Item_Code);
 PARAMETER(PR5.Produce_on_Sunday_Sts);
 PARAMETER(PR5.Produce_on_Monday_Sts);
 PARAMETER(PR5.Produce_on_Tuesday_Sts);
 PARAMETER(PR5.Produce_on_Wednesday_Sts);
 PARAMETER(PR5.Produce_on_Thursday_Sts);
 PARAMETER(PR5.Produce_on_Friday_Sts);
 PARAMETER(PR5.Produce_on_Saturday_Sts);
 PARAMETER(PR5.Plan_Production_Sts);
 PARAMETER(PR5.Allocation_Method);
 PARAMETER(PR5.CIE_Use_Age_Days_over_Max);
 PARAMETER(PR5.CIE_MPR_Report_to_USDA);
 PARAMETER(PR5.CIE_Capacity_Code);

}


//?USER: Process command keys

// WRK.Alpha Zeros = CON.00
WRK.Alpha_Zeros_2 = 00;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

