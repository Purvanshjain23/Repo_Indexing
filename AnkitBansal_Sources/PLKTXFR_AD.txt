// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLKTXFR
// ?Date: 14.08.2025 Time: 02:54:34
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?MODIFICATIONS
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
// WRK.PC Contract Code = WRK.Blank USR
WRK.PC_Contract_Code = WRK.Blank_USR;

// WRK.PSC Sub-Contract Code = WRK.Blank USR
WRK.PSC_Sub_Contract_Code = WRK.Blank_USR;

// WRK.GN Genetic Code = WRK.Blank USR
WRK.GN_Genetic_Code = WRK.Blank_USR;

// WRK.PO Option Code = WRK.Blank USR
WRK.PO_Option_Code = WRK.Blank_USR;

// WRK.CMP Program Code = WRK.Blank USR
WRK.CMP_Program_Code = WRK.Blank_USR;

// WRK.PSC Commodity Market Code = CON.*BLANK
WRK.PSC_Commodity_Market_Code = *BLANK;

// WRK.PSC Commodity Price Group = CON.*BLANK
WRK.PSC_Commodity_Price_Group = *BLANK;

// WRK.PSC Mkt + or - = CON.*ZERO
WRK.PSC_Mkt_+_or = *ZERO;

// WRK.PSC Market Date Method = CON.*BLANK
WRK.PSC_Market_Date_Method = *BLANK;

//?Read by prod/location/kill date/
EXECUTE FUNCTION(Rtv Sb-Ctr BO info-DTEDF) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1269440;
PARAMETER(WRK.PC_Contract_Code);
PARAMETER(WRK.PSC_Sub_Contract_Code);
PARAMETER(PAR.BOH_Kill_Date);
PARAMETER(WRK.PSC_Commodity_Market_Code);
PARAMETER(WRK.PSC_Commodity_Price_Group);
PARAMETER(WRK.PSC_Mkt_+_or);
PARAMETER(WRK.PSC_Market_Date_Method);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(WRK.GN_Genetic_Code);
PARAMETER(WRK.PO_Option_Code);
PARAMETER(WRK.CMP_Program_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Set BO Type
CASE;

// IF WRK.PC Contract Code NE WRK.Blank USR
IF WRK.PC_Contract_Code <> WRK.Blank_USR;

EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.SR Type is External
IF WRK.SR_Type = 'E';

// WRK.BOH Buy Order Type = CND.Contract
WRK.BOH_Buy_Order_Type = 'C';

// IF WRK.SR Type is Internal
IF WRK.SR_Type = 'I';

// WRK.BOH Buy Order Type = CND.Internal
WRK.BOH_Buy_Order_Type = 'I';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.BOH Buy Order Type = CND.Open Market
WRK.BOH_Buy_Order_Type = 'O';

ENDIF;

//?Set BO Type
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
PARAMETER(WRK.SR_Source_Code);
PARAMETER(WRK.SR_Type);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.SR Type is External
IF WRK.SR_Type = 'E';

// WRK.BOH Buy Order Type = CND.Open Market
WRK.BOH_Buy_Order_Type = 'O';

// IF WRK.SR Type is Internal
IF WRK.SR_Type = 'I';

// WRK.BOH Buy Order Type = CND.Internal
WRK.BOH_Buy_Order_Type = 'I';

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.BOH Buy Order Type = CND.Open Market
WRK.BOH_Buy_Order_Type = 'O';

ENDIF;

ENDIF;

CASE;

// IF WRK.PO Option Code EQ WRK.Blank USR
IF WRK.PO_Option_Code = WRK.Blank_USR;

// WRK.PO Option Code = CND.Cash Basis Price
WRK.PO_Option_Code = 'CBP';

ENDIF;

//?this isnt the right one - so leave it blank if ODB
CASE;

// IF WRK.CMP Program Code EQ WRK.Blank USR
IF WRK.CMP_Program_Code = WRK.Blank_USR;

// AND WRK.BOH Buy Order Type is Contract or Internal
AND WRK.BOH_Buy_Order_Type = 'C'/'I';

EXECUTE FUNCTION(Rtv CMP SBD Standard  RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1122932;
PARAMETER(WRK.CMP_Program_Code);
PARAMETER('S');
{
 //?USER: Process Data record

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.CMP_Program_Code = DB1.CMP_Program_Code;

}


ENDIF;

// Call program RTV Year/Period/Week   XF.
CALL PROGRAM(RTV Year/Period/Week   XF) ('PDT3XFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Kill_Date);
PARAMETER(WRK.CW_Year);
PARAMETER(WRK.Accounting_Period_Code);
PARAMETER(WRK.CW_Week_Number);

//?change the producer location and etc fields
//?Buy order header, buy order load, delv sch detail
//?and source code and source type on each delivery record
EXECUTE FUNCTION(Chg Buy Order HeadDSPLIF) TYPE(EXCINTFUN)                      AB1282085;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(WRK.BOH_Buy_Order_Date);
PARAMETER(WRK.BOH_Kill_Date);
PARAMETER(WRK.BOH_Payment_Type);
PARAMETER(WRK.BOH_Buy_Order_Type);
PARAMETER(WRK.PSC_Mkt_+_or);
PARAMETER(WRK.BOH_Status);
PARAMETER(WRK.BOH_Delv_Plan_Printed);
PARAMETER(WRK.BOH_Quote_Price_Type);
PARAMETER(WRK.BOH_Quoted_Base_Mkt_Price);
PARAMETER(WRK.PSC_Commodity_Market_Code);
PARAMETER(WRK.PSC_Commodity_Price_Group);
PARAMETER(WRK.PSC_Market_Date_Method);
PARAMETER(WRK.PPWS_Company_Number);
PARAMETER(WRK.CW_Year);
PARAMETER(WRK.CW_Week_Number);
PARAMETER(PAR.PD_Producer_Code);
PARAMETER(PAR.PL_Location_Code);
PARAMETER(WRK.PC_Contract_Code);
PARAMETER(WRK.PSC_Sub_Contract_Code);
PARAMETER(WRK.GN_Genetic_Code);
PARAMETER(WRK.PO_Option_Code);
PARAMETER(WRK.CMP_Program_Code);
PARAMETER(WRK.HB_Buyer_Code);
{
 //?Execute internal function

 //?Update the producer location information on the buy order header
 //?and update the producer location on the buy order load
 EXECUTE FUNCTION(Chg BOH Prod/Loc      CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1281851;
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOH_Market_Add_Deduct);
 PARAMETER(PAR.BOH_Commodity_Market_Code);
 PARAMETER(PAR.BOH_Commodity_Price_Group);
 PARAMETER(PAR.BOH_Market_Date_Method);
 PARAMETER(PAR.CW_Year);
 PARAMETER(PAR.CW_Week_Number);
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.PC_Contract_Code);
 PARAMETER(PAR.PSC_Sub_Contract_Code);
 PARAMETER(PAR.GN_Genetic_Code);
 PARAMETER(PAR.PO_Option_Code);
 PARAMETER(PAR.CMP_Program_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

  //?USER: Processing after Data update

  EXECUTE FUNCTION(Chg bol Prd/Loc       RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1282148;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Chg BOL PrdLoc        CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1282144;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.BOL_Kill_Date);
   PARAMETER(PAR.PD_Producer_Code);
   PARAMETER(PAR.PL_Location_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

 }

 //?Update the producer location on the delivery sch detail
 //?and the source code and the source type
 EXECUTE FUNCTION(Chg Dlv Sch Dtl PrdLocRT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1281862;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.PL_Location_Code);
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER(PAR.BOH_Buy_Order_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Dlv Sch Dtl PrdLocCH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1281861;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(PAR.PD_Producer_Code);
  PARAMETER(PAR.PL_Location_Code);
  PARAMETER(DB1.DSD_PRD_Srv_Batch_ID);
  PARAMETER(DB1.DSD_PRD_Srv_Sched_ID);
  PARAMETER(DB1.DSD_Ref_1);
  PARAMETER(DB1.DSD_Ref_2);
  PARAMETER(DB1.DSD_Ref_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

   //?When the producer changes the also change the source & source type
   EXECUTE FUNCTION(Rtv Producer Source   RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1295753;
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(DB1.SR_Source_Code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Rtv Source Type       RT) TYPE(RTVOBJ) FILE(PKAAREP)           AB1141829;
   PARAMETER(DB1.SR_Source_Code);
   PARAMETER(DB1.DSD_Source_Type);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

  }

 }

}


