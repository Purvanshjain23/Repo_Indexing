// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPGIETR
// ?Date: 14.08.2025 Time: 03:40:22
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('C/S');

// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

EXECUTE FUNCTION(RTV Box Item code      RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1402262;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(PAR.Item_Code_USR);

//?R9547 DN 03/13/17-Cmp Allow to Edit/Sync SalesYield, Meat$Consmd% & Pump%?
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?Sync will occur for Sales Yield, Meat Cost Consumed %, & Pumped %
//?if 'Sync with Company USR' is populated.
EXECUTE FUNCTION(RTV Numeric Value      RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1394480;
PARAMETER(PAR.Company_Number);
PARAMETER('BOMGROUPU1');
PARAMETER(PAR.Sync_with_Company_USR);

//?Allow Sales Yield, Meat Cost Consumed %, & Pumped % input capable?
EXECUTE FUNCTION(RTV Alpha Value        RT) TYPE(RTVOBJ) FILE(PDKMREP)          AC1381513;
PARAMETER(PAR.Company_Number);
PARAMETER('BOMGROUPE1');
PARAMETER(PAR.Edt_SlsYldPumpMeat$Co);

ENDIF;

//?USER: Load existing header

EXECUTE FUNCTION(Rtv Adj Credit Pieces RT) TYPE(RTVOBJ) FILE(PMFDREP)           AC1973401;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Adjust_Credit_Pieces);

// CTL.Condition Name USR = Condition name of CTL.Adjust Credit Pieces
CTL.Condition_Name_USR = RTVCND(CTL.Adjust_Credit_Pieces);

CASE;

// IF PAR.BOM Type Usr is Meat Items
IF PAR.BOM_Type_Usr = 'C'/'P';

// CTL.BOM Type Description = CON.** Meat BOM **
CTL.BOM_Type_Description = '** Meat BOM **';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.BOM Type Description = CON.** Supplies **
CTL.BOM_Type_Description = '** Supplies **';

ENDIF;

//?USER: Initialize subfile record (old record)

// RCD.Off Line Yield % USR = DB2.BOM Off Line Yield %
RCD.Off_Line_Yield_USR = DB2.BOM_Off_Line_Yield_Pct;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(DB2.Company_Number);
PARAMETER(DB2.Component_Item_Code);
PARAMETER(RCD.USR_Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);

// RCD.Display Flag = CND.No
RCD.Display_Flag = 'N';

//?R9547 DN 03/13/17-Set Sales Yield, Meat Cost Consumed% & Pumped% Edt Flag.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

SET CURSOR;

// RCD.Edt SlsYld,Pump%&Meat$Co? = PAR.Edt SlsYld,Pump%&Meat$Co?
RCD.Edt_SlsYldPumpMeat$Co = PAR.Edt_SlsYldPumpMeat$Co;

ENDIF;

//?Check user authority to maintain BOM Types. 10/01/01 T896
CASE;

// IF PAR.BOM Type Usr is Consumed - Meat
IF ( PAR.BOM_Type_Usr = 'C';

// AND DB2.BOM Type is Supplies
AND DB2.BOM_Type = 'S' );

// OR PAR.BOM Type Usr is Supplies
OR ( PAR.BOM_Type_Usr = 'S';

// AND DB2.BOM Type is Meat Items
AND DB2.BOM_Type = 'C'/'P' );

// RCD.Display Flag = CND.Yes
RCD.Display_Flag = 'Y';

// RCD.Select Status = CND.yes
RCD.Select_Status = 'Y';

//?R9547 DN 03/13/17-Don't Allow Edt of SalesYield, Meat$ Consumed% & Pumped%
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Edt SlsYld,Pump%&Meat$Co? = CND.no
RCD.Edt_SlsYldPumpMeat$Co = 'N';

ENDIF;

ENDIF;

//?USER: Initialize subfile record (new record)

// RCD.Display Flag = CND.No
RCD.Display_Flag = 'N';

// RCD.Select Status = CND.yes
RCD.Select_Status = 'Y';

//?R9547 DN 03/13/17-Set Sales Yield, Meat Cost Consumed% & Pumped% Edt Flag.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Edt SlsYld,Pump%&Meat$Co? = PAR.Edt SlsYld,Pump%&Meat$Co?
RCD.Edt_SlsYldPumpMeat$Co = PAR.Edt_SlsYldPumpMeat$Co;

ENDIF;

//?USER: Validate header non-key fields

// CTL.Condition Name USR = Condition name of CTL.Adjust Credit Pieces
CTL.Condition_Name_USR = RTVCND(CTL.Adjust_Credit_Pieces);

//?USER: Validate subfile record fields

//?DEFAULT: Production Yield Start Weight Calculation Group
CASE;

// IF RCD.Item Code EQ RCD.Component Item Code
IF RCD.Item_Code = RCD.Component_Item_Code;

// RCD.BOM Group Prod Yield = CND.Yes
RCD.BOM_Group_Prod_Yield = 'Y';

//?DEFAULT: Production Yield Start Weight Calculation Group
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.BOM Type is Consumed - Meat
IF RCD.BOM_Type = 'C';

// OR RCD.BOM Type is Supplies
OR RCD.BOM_Type = 'S';

// RCD.BOM Group Prod Yield = CND.No
RCD.BOM_Group_Prod_Yield = *BLANK;

ENDIF;

ENDIF;

//?Prompt for component item control field
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> RCD.Component Item Code
AND PGM.*Cursor_field = RCD.Component_Item_Code;

// Call program SEL Company Item       SR.
CALL PROGRAM(SEL Company Item       SR) ('CAP1SRR');
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Component_Item_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

EXECUTE FUNCTION(Rtv Descriptions      RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1140665;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Component_Item_Code);
PARAMETER(RCD.USR_Item_Description);
PARAMETER(WRK.Description_Line_Two);
PARAMETER(WRK.UOM_Primary);
PARAMETER(WRK.UOM_Second);
PARAMETER(WRK.UOM_Third);

//?06/24/2014 JJH E3160 - Average if WPA is now Upd Standard Production
//?Default Update Standard Production value
CASE;

// IF RCD.BOM Type is Produced - Meat
IF RCD.BOM_Type = 'P';

EXECUTE FUNCTION(Rtv Co Itm Std Prd Dft RT) TYPE(RTVOBJ) FILE(PBBLREP)          AC2092338;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Component_Item_Code);
PARAMETER(RCD.Upd_Standard_Production);

ENDIF;

//?If status is blank, move in active
CASE;

// IF RCD.Record Status EQ WRK.BLANK
IF RCD.Record_Status = WRK.BLANK;

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

ENDIF;

//?10/03/01 T896  CHECK USER AUTHORITY TO MAINTAIN A BOM TYPE
CASE;

// IF RCD.Select Status is yes
IF RCD.Select_Status = 'Y';

// AND RCD.Display Flag is No
AND RCD.Display_Flag = 'N';

//?10/03/01   T896 Check user authority to add a bom type
CASE;

// IF RCD.BOM Type is Meat Items
IF RCD.BOM_Type = 'C'/'P';

//?Cannot enter a Supply bom
CASE;

// IF PAR.BOM Type Usr is Supplies
IF PAR.BOM_Type_Usr = 'S';

// Send error message - 'User cannot maintain this BOM Type.'
ERROR(USR3089);
MSGPARM(RCD.BOM_Type);

ENDIF;

//?10/03/01   T896 Check user authority to add a bom type
// IF RCD.BOM Type is Supplies
IF RCD.BOM_Type = 'S';

//?Cannot enter a C/P bom
CASE;

// IF PAR.BOM Type Usr is Meat Items
IF PAR.BOM_Type_Usr = 'C'/'P';

// Send error message - 'User cannot maintain this BOM Type.'
ERROR(USR3089);
MSGPARM(RCD.BOM_Type);

ENDIF;

ENDIF;

ENDIF;

//?Requirements for BOM type "C"onsumed
CASE;

// IF RCD.BOM Type is Consumed - Meat
IF RCD.BOM_Type = 'C';

//?05/08/08 PKD Changed the validation where if the percent is entered
//?             then only the priority must be entered.
//?VAL: Consume Priority
CASE;

// IF RCD.Consume Priority % is Greater than zero
IF RCD.Consume_Priority_Percent > *ZERO;

// AND RCD.Consume Priority is EQ Zero
AND RCD.Consume_Priority = *ZERO;

// Send error message - 'Consume Pirority is required.'
ERROR(USR3941);
MSGPARM(RCD.Consume_Priority);

ENDIF;

//?VAL: Consume Priority Percent
CASE;

// IF RCD.Consume Priority is NE Zero
IF RCD.Consume_Priority <> *ZERO;

// AND RCD.Consume Priority % is equal to zero
AND RCD.Consume_Priority_Percent = *ZERO;

// Send error message - 'Consume Pirority Percent is required.'
ERROR(USR3942);
MSGPARM(RCD.Consume_Priority_Percent);

ENDIF;

ENDIF;

//?Requirements for BOM type "S" or "P"
CASE;

// IF RCD.BOM Type is Not Consumed
IF RCD.BOM_Type = 'P'/'S';

CASE;

// IF RCD.Consume Priority is NE Zero
IF RCD.Consume_Priority <> *ZERO;

// OR RCD.Consume Priority % is not equal to zeros
OR RCD.Consume_Priority_Percent <> *ZERO;

// Send error message - 'Consume priority and percent not allowed for BOM type.'
ERROR(USR2525);
MSGPARM(RCD.Consume_Priority);
MSGPARM(RCD.Consume_Priority_Percent);

ENDIF;

ENDIF;

//?USER: Validate subfile record relations

CASE;

// IF RCD.*SFLSEL is *Delete request
IF RCD.*SFLSEL = '4'/'4';

//?R9547 DN 03/15/17-Commented out info msg & will use it below.
//?R9547 DN 03/15/17-If Sync with Company USR is Populated, Send Info Msg.
CASE;

// IF PAR.Sync with Company USR is not equal to zero
IF PAR.Sync_with_Company_USR <> *ZERO;

// LCL.Company Number Alpha = CVTVAR(PAR.Sync with Company USR)
LCL.Company_Number_Alpha = CVTVAR(PAR.Sync_with_Company_USR);

// LCL.Generic Message 80 USR = CONCAT(CON.Delete pending. Confirm Y,CON.or N. After delete, check,C
LCL.Generic_Message_80_USR = 'Delete pending. Confirm Y' + 'or N. After delete, check' (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON. Company,CON.*ZERO)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + ' Company' (*ZERO);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,LCL.Company Number Alpha,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + LCL.Company_Number_Alpha (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.BOM.,CON.1)
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + 'BOM.' (1);

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM(LCL.Generic_Message_80_USR);

//?R9547 DN 03/15/17-If Sync with Company USR is Populated, Send Info Msg.
// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Delete pending.  Confirm Y or N.'
MESSAGE(USR0597 *INFO);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Item Type/BsCv    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC2083320;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Component_Item_Code);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(LCL.Base_Conv_Loss_Item);

//?If BOM type is 'C', check for errors
CASE;

// IF RCD.BOM Type is Consumed - Meat
IF RCD.BOM_Type = 'C';

CASE;

// IF CTL.Item Type Code is Finished Goods
IF CTL.Item_Type_Code = 'FG';

CASE;

// IF CTL.Converted/Base Item is Base
IF CTL.Base_Conv_Loss_Item = 'B';

//?Consumed Item must be Raw Material or Work in Process  (PK0318 5/10/01)
CASE;

// IF WRK.Item Type Code is RM/WP
IF WRK.Item_Type_Code = 'RM'/'WP';

// OR WRK.Item Type Code is Finished Good
OR ( WRK.Item_Type_Code = 'FG';

// AND LCL.Base/Conv/Loss Item is Base
AND LCL.Base_Conv_Loss_Item = 'B' );

//?Consumed Item must be Raw Material or Work in Process  (PK0318 5/10/01)
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Consumed Item must be a Raw Material, Work in Process, or Finished Good Bas
ERROR(USR2166);
MSGPARM(RCD.Component_Item_Code);

ENDIF;

// IF CTL.Converted/Base Item is Converted/Fabricated
IF CTL.Base_Conv_Loss_Item = 'C'/'F';

//?Consumed Item must be Finished Goods /Work in process  (PK0318 5/10/01)
CASE;

// IF WRK.Item Type Code is FG/WP
IF WRK.Item_Type_Code = 'FG'/'WP';

//?Consumed Item must be Finished Goods /Work in process  (PK0318 5/10/01)
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Consumed Item must be a Finished Goods or Work in Process.'
ERROR(USR2167);
MSGPARM(RCD.Component_Item_Code);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?If BOM type is 'P', check for errors
CASE;

// IF RCD.BOM Type is Produced - Meat
IF RCD.BOM_Type = 'P';

CASE;

// IF CTL.Item Type Code is Finished Goods
IF CTL.Item_Type_Code = 'FG';

EXECUTE FUNCTION(Rtv Credit Item Sts   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1326370;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Component_Item_Code);
PARAMETER(WRK.Credit_Item_Status);

ENDIF;

ENDIF;

//?If BOM type is 'S', check for errors
CASE;

// IF RCD.BOM Type is Supplies
IF RCD.BOM_Type = 'S';

EXECUTE FUNCTION(Rtv Item Type Code     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1299967;
PARAMETER(CTL.Company_Number);
PARAMETER(RCD.Component_Item_Code);
PARAMETER(WRK.Item_Type_Code);

//?Item type must be 'PS'
CASE;

// IF WRK.Item Type Code is Packaging and Supplies
IF WRK.Item_Type_Code = 'PS';

//?Item type must be 'PS'
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Item type must be packaging/supplies if BOM type is 'S'.'
ERROR(USR1901);
MSGPARM(RCD.BOM_Type);

ENDIF;

//?Packaging quantity must be entered
CASE;

// IF RCD.Packaging Quantity is Equal to zero
IF RCD.Packaging_Quantity = *ZERO;

// Send error message - 'Packaging quantity must be entered for BOM type 'S'.'
ERROR(USR1896);
MSGPARM(RCD.Packaging_Quantity);

ENDIF;

//?Packaging UOM must be entered
CASE;

// IF RCD.U/M - Primary Dft is Not Entered
IF RCD.UOM_Primary_Dft = *BLANK;

// Send error message - 'Packaging UOM must be entered if BOM type is 'S'.'
ERROR(USR1897);
MSGPARM(RCD.UOM_Primary_Dft);

ENDIF;

ENDIF;

//?04/08/09 SLM E00367 add with FP1054
//?04/08/09 SLM Validation move here due not need when
//?user is selecting 4 = delete
CASE;

// IF RCD.BOM Type is Not Consumed
IF RCD.BOM_Type = 'P'/'S';

// RCD.BOM Multi-RM Option = CND.Required
RCD.BOM_Multi_RM_Option = *BLANK;

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

//?Add up sales yield and prod yield for Consumed Items,& consumed pty%
CASE;

// IF RCD.Record Status is Active
IF RCD.Record_Status = 'A';

// AND RCD.BOM Type is Consumed - Meat
AND RCD.BOM_Type = 'C';

CTL.Production_Yield_SUM = SUM(RCD.Production_Yield);

CTL.Sales_Yield_SUM = SUM(RCD.Sales_Yield);

CTL.Meat_Cost_Consume_SUM = SUM(RCD.BOM_Meat_Cost_ConsumedPCT);

//?FP1054 added consumed pty sum  3/17/09
CTL.Consume_Pty_Sum = SUM(RCD.Consume_Priority_Percent);

ENDIF;

//?Add up sales yield and production yield for Produced Items
CASE;

// IF RCD.Record Status is Active
IF RCD.Record_Status = 'A';

// AND RCD.BOM Type is Produced - Meat
AND RCD.BOM_Type = 'P';

CTL.Production_Yield_SUM_2 = SUM(RCD.Production_Yield);

CTL.Sales_Yield_SUM_2 = SUM(RCD.Sales_Yield);

CTL.Off_Line_Yield_SUM = SUM(RCD.Off_Line_Yield_USR);

ENDIF;

EXECUTE FUNCTION(Rtv Item Type/Pack Cd2 RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1608400;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Component_Item_Code);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.Item_Type_Code);
PARAMETER(WRK.Package_Type_Code);
PARAMETER(WRK.Pallet_Tare_Weight);
PARAMETER(WRK.Misc_Tare_Weight);

//?Add up number of boxes
CASE;

// IF WRK.Item Type Code is Packaging and Supplies
IF WRK.Item_Type_Code = 'PS';

//?Process Box Type Code = Box
CASE;

// IF WRK.Package Type Code is Box
IF WRK.Package_Type_Code = 'B';

// WRK.USR number = CON.1
WRK.USR_number = 1;

CTL.Total_Box_Comp_Items_SUM = SUM(WRK.USR_number);

ENDIF;

ENDIF;

//?USER: Validate totals

//?VAL: Consumed Production Yield
CASE;

// IF CTL.Production Yield SUM is 100%
IF CTL.Production_Yield_SUM = 100;

// OR CTL.Production Yield SUM is Equal zero
OR CTL.Production_Yield_SUM = *ZERO;

//?VAL: Consumed Production Yield
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Production yield for consumed items must equal 100%.'
ERROR(USR1900);
MSGPARM(CTL.Production_Yield_SUM);

ENDIF;

//?VAL: Consumed Sales Yield
CASE;

// IF CTL.Sales Yield  SUM is 100%
IF CTL.Sales_Yield_SUM = 100;

// OR CTL.Sales Yield  SUM is Equal zero
OR CTL.Sales_Yield_SUM = *ZERO;

//?VAL: Consumed Sales Yield
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Sales yield for consumed items must equal 100%.'
ERROR(USR1913);
MSGPARM(CTL.Sales_Yield_SUM);

ENDIF;

//?VAL: Produced Production Yield
CASE;

// IF CTL.Production Yield SUM 2 is 100%
IF CTL.Production_Yield_SUM_2 = 100;

// OR CTL.Production Yield SUM 2 is Equal zero
OR CTL.Production_Yield_SUM_2 = *ZERO;

//?VAL: Produced Production Yield
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Production yield for produced items must equal 100%.'
ERROR(USR2168);
MSGPARM(CTL.Production_Yield_SUM_2);

ENDIF;

//?VAL: Meat Cost Consume Percent
CASE;

// IF CTL.Meat Cost Consume% SUM is EQ 100
IF CTL.Meat_Cost_Consume_SUM = 100;

// OR CTL.Meat Cost Consume% SUM is Equal to zero
OR CTL.Meat_Cost_Consume_SUM = *ZERO;

//?VAL: Meat Cost Consume Percent
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Meat Cost Consume Percent must equal 100%.'
ERROR(USR3689);
MSGPARM(CTL.Meat_Cost_Consume_SUM);

ENDIF;

//?VAL: Produced Sales Yield
CASE;

// IF CTL.Sales Yield SUM 2 is 100%
IF CTL.Sales_Yield_SUM_2 = 100;

// OR CTL.Sales Yield SUM 2 is Equal zero
OR CTL.Sales_Yield_SUM_2 = *ZERO;

//?VAL: Produced Sales Yield
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Sales yield for produced items must equal 100%.'
ERROR(USR2169);
MSGPARM(CTL.Sales_Yield_SUM_2);

ENDIF;

//?T12017 DN 11/03/17-Commented Out Off Line Yield Validation.
//?VAL: Boxes
CASE;

// IF CTL.Total Box Comp Items SUM is Greater than 1
IF CTL.Total_Box_Comp_Items_SUM > 1;

// AND NOT PAR.BOM Type Usr is Meat Items
AND ! PAR.BOM_Type_Usr = 'C'/'P';

// Send error message - 'Only one component item with packaging type Box can be entered.'
ERROR(USR1907);

ENDIF;

//?USER: Change header DBF record

EXECUTE FUNCTION(Chg Co/Item BOM-EDT   IF) TYPE(EXCINTFUN) FILE(CABZREP)        AC1973454;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Adjust_Credit_Pieces);

//?USER: Change detail DBF record

EXECUTE FUNCTION(Crt/Chg ITM BOM AllPLN IF) TYPE(EXCINTFUN) FILE(PDIOREP)       AC1705909;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Component_Item_Code);
PARAMETER(RCD.BOM_Type);
PARAMETER(RCD.Sales_Yield);
PARAMETER(RCD.Production_Yield);
PARAMETER(RCD.Packaging_Quantity);
PARAMETER(RCD.UOM_Primary_Dft);
PARAMETER(RCD.Upd_Standard_Production);
PARAMETER(RCD.Consume_Priority);
PARAMETER(RCD.Consume_Priority_Percent);
PARAMETER(RCD.BOM_Pumped_Percent);
PARAMETER(RCD.BOM_Meat_Cost_ConsumedPCT);
PARAMETER(RCD.Off_Line_Yield_USR);
PARAMETER(RCD.BOM_Multi_RM_Option);
PARAMETER(RCD.BOM_Group_Prod_Yield);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(*BLANK);
PARAMETER('Y');
PARAMETER(PAR.Sync_with_Company_USR);

//?USER: Create detail DBF record

EXECUTE FUNCTION(Crt/Chg ITM BOM AllPLN IF) TYPE(EXCINTFUN) FILE(PDIOREP)       AC1705909;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Component_Item_Code);
PARAMETER(RCD.BOM_Type);
PARAMETER(RCD.Sales_Yield);
PARAMETER(RCD.Production_Yield);
PARAMETER(RCD.Packaging_Quantity);
PARAMETER(RCD.UOM_Primary_Dft);
PARAMETER(RCD.Upd_Standard_Production);
PARAMETER(RCD.Consume_Priority);
PARAMETER(RCD.Consume_Priority_Percent);
PARAMETER(RCD.BOM_Pumped_Percent);
PARAMETER(RCD.BOM_Meat_Cost_ConsumedPCT);
PARAMETER(RCD.Off_Line_Yield_USR);
PARAMETER(RCD.BOM_Multi_RM_Option);
PARAMETER(RCD.BOM_Group_Prod_Yield);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER(*BLANK);
PARAMETER('N');
PARAMETER(PAR.Sync_with_Company_USR);

//?USER: Process detail record

//?Process Delete
CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4';

EXECUTE FUNCTION(Crt/Chg ITM BOM AllPLN IF) TYPE(EXCINTFUN)                     AC1705909;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.Component_Item_Code);
PARAMETER(RCD.BOM_Type);
PARAMETER(RCD.Sales_Yield);
PARAMETER(RCD.Production_Yield);
PARAMETER(RCD.Packaging_Quantity);
PARAMETER(RCD.UOM_Primary_Dft);
PARAMETER(RCD.Upd_Standard_Production);
PARAMETER(RCD.Consume_Priority);
PARAMETER(RCD.Consume_Priority_Percent);
PARAMETER(RCD.BOM_Pumped_Percent);
PARAMETER(RCD.BOM_Meat_Cost_ConsumedPCT);
PARAMETER(RCD.Off_Line_Yield_USR);
PARAMETER(RCD.BOM_Multi_RM_Option);
PARAMETER(RCD.BOM_Group_Prod_Yield);
PARAMETER(RCD.EDI_Status_1);
PARAMETER(RCD.EDI_Status_2);
PARAMETER(RCD.EDI_Status_3);
PARAMETER(RCD.Record_Status);
PARAMETER('DEL');
PARAMETER('Y');
PARAMETER(PAR.Sync_with_Company_USR);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?USER: Process command keys

// LCL.Error Status = CND.no
LCL.Error_Status = 'N';

CASE;

// IF CTL.Base/Conv/Loss Item is Converted
IF CTL.Base_Conv_Loss_Item = 'C';

//?VAL: Consume Pty Percent          FP1054 3/17/09
CASE;

// IF CTL.Consume Pty %         Sum is EQ 100
IF CTL.Consume_Pty_Sum = 100;

// LCL.Error Status = CND.no
LCL.Error_Status = 'N';

//?VAL: Consume Pty Percent          FP1054 3/17/09
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Val Consumed Pty Pct  RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1927439;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER('C');
PARAMETER(LCL.Consume_Priority_Percent);
PARAMETER(LCL.Consume_Pty_Sum);

CASE;

// IF LCL.Consume Pty % Sum is NE 100 Pct
IF LCL.Consume_Pty_Sum <> 100;

// Send error message - 'Consume Pty Percent must equal 100%.'
ERROR(USR4128);
MSGPARM(CTL.Consume_Pty_Sum);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

ENDIF;

CASE;

// IF LCL.Consume Priority % is Not Equal to 100 PCt
IF LCL.Consume_Priority_Percent <> 100;

// Send error message - 'Last Consume Pty Percent must equal 100%.'
ERROR(USR4129);
MSGPARM(CTL.Consume_Pty_Sum);

// LCL.Error Status = CND.yes
LCL.Error_Status = 'Y';

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF LCL.Error Status is no
IF LCL.Error_Status = 'N';

// PGM.*Continue transaction = CND.*NO
PGM.*Continue_transaction = 'N';

QUIT;

ENDIF;

//?USER: Exit program processing

EXECUTE FUNCTION(RTV Box Item code      RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1402262;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(WRK.Item_Code_USR);

CASE;

// IF PAR.Item Code USR NE WRK.Item Code USR
IF PAR.Item_Code_USR <> WRK.Item_Code_USR;

// PAR.Item Code USR = WRK.Item Code USR
PAR.Item_Code_USR = WRK.Item_Code_USR;

//?If Box ID is Invalid, then flag to write delete item rcd to carlisle
CASE;

// IF WRK.Item Code USR is Not Entered
IF WRK.Item_Code_USR = *ZERO;

// PAR.AS Add/Change/Delete = CND.Delete
PAR.AS_Add_Change_Delete = 'D';

//?If Box ID is Invalid, then flag to write delete item rcd to carlisle
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.AS Add/Change/Delete = CND.Add
PAR.AS_Add_Change_Delete = 'A';

ENDIF;

// Call program PFS One Prod/Box Rec  XF.
CALL PROGRAM(PFS One Prod/Box Rec  XF) ('PDK1XFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Description_Line_One);
PARAMETER(CTL.Item_Label_Line_1);
PARAMETER(CTL.Item_Label_Line_2);
PARAMETER(CTL.Item_Label_Line_3);
PARAMETER(CTL.Unit_Weight);
PARAMETER(CTL.Catch_Weight_Status);
PARAMETER(CTL.Minimum_Weight_Per_Case);
PARAMETER(CTL.Maximum_Weight_Per_Case);
PARAMETER(CTL.Number_Cases_On_A_Pallet);
PARAMETER(CTL.Item_Type_Code);
PARAMETER(CTL.Package_Type_Code);
PARAMETER(CTL.Default_Warehouse);
PARAMETER(CTL.Fresh_Chilling_Time);
PARAMETER(CTL.Misc_Tare_Weight);
PARAMETER(PAR.AS_Add_Change_Delete);

ENDIF;

