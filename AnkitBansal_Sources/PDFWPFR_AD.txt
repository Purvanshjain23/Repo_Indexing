// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDFWPFR
// ?Date: 14.08.2025 Time: 12:03:50
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Record selection processing

CASE;

// IF DB1.PS Weight Sched Prod is GT Zero
IF DB1.PS_Weight_Sched_Prod > *ZERO;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

// TOP.Production Date = PAR.Production Date
TOP_Production_Date = PAR.Production_Date;

// TOP.Kill Date RGF = PAR.Kill Date RGF
TOP_Kill_Date_RGF = PAR.Kill_Date_RGF;

//?USER: Print required level headings

CASE;

IF NEW Company_Number;
// Print Company Number header format
PRINT Company Number header format;

ENDIF;

CASE;

IF NEW Production_Date;
// SUPPRESSED PRINT Production Date header format

ENDIF;

CASE;

IF NEW Production_Type;
// CUR.Text 1 USR = Condition name of CUR.Production Type
CUR.Text_1_USR = RTVCND(CUR.Production_Type);

// Print Production Type header format
PRINT Production Type header format;

ENDIF;

// SUPPRESSED PRINT Item Structure Group Code header format

// SUPPRESSED PRINT Item Structure Class Code header format

// SUPPRESSED PRINT Item Code header format

//?USER: On print of detail format

EXECUTE FUNCTION(Rtv Desc,Group,Mkt,Whs RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1386175;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(CUR.Description_Line_One);
PARAMETER(WRK.Commodity_Market_Code_USR);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(WRK.Default_Warehouse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CUR.Production Type is Schedule
IF CUR.Production_Type = 'S';

EXECUTE FUNCTION(Rtv Mkt Prc + Ovr CWT IF) TYPE(EXCINTFUN)                      AC1386862;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Commodity_Market_Code_USR);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(PAR.Production_Date);
PARAMETER(WRK.USR_Date_Priced);
PARAMETER(CUR.Market_Price_USR);
PARAMETER(CUR.Standard_Overage_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Market_Price_Date);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(PAR.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Commodity Market Price = DB1.Commodity Market Price
  PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 // Call program CLC Convert Price - CW XF.
 CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(PAR.Market_Price_USR);

 //?Convert Std overage to U/M
 // Call program CLC Convert Price - CW XF.
 CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Standard_Overage_Underage);
 PARAMETER(PAR.Standard_Overage_USR);

}


// CUR.Market Amt / CWT      USR = CUR.Market Price          USR + CUR.Standard Ove
CUR.Market_Amt_CWT_USR = CUR.Market_Price_USR + CUR.Standard_Overage_USR;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Pred Mkt Prc +Ovr IF) TYPE(EXCINTFUN)                      AC1388168;
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Item_Code);
PARAMETER(WRK.Commodity_Market_Code_USR);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(PAR.Production_Date);
PARAMETER(CUR.Market_Price_USR);
PARAMETER(CUR.Standard_Overage_USR);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prdt Mkt Price    RT) TYPE(RTVOBJ) FILE(PDKOREP)           AC1388169;
 PARAMETER(PAR.Default_Commod_Mark_basis);
 PARAMETER(PAR.Commodity_Price_Group);
 PARAMETER(PAR.Market_Price_Date);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(PAR.USR_Date_Priced);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Projected Market Price = DB1.Projected Market Price
  PAR.Projected_Market_Price = DB1.Projected_Market_Price;

  // PAR.USR Date Priced = DB1.Market Price Date
  PAR.USR_Date_Priced = DB1.Market_Price_Date;

  QUIT;

 }

 // Call program CLC Convert Price - CW XF.
 CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Commodity_Market_Price);
 PARAMETER(PAR.Market_Price_USR);

 //?Convert std overage to U/M
 // Call program CLC Convert Price - CW XF.
 CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Standard_Overage_Underage);
 PARAMETER(PAR.Standard_Overage_USR);

}


// CUR.Market Amt / CWT      USR = CUR.Market Price          USR + CUR.Standard Ove
CUR.Market_Amt_CWT_USR = CUR.Market_Price_USR + CUR.Standard_Overage_USR;

ENDIF;

CASE;

// IF CUR.PS Weight Sched Prod is Not Entered
IF CUR.PS_Weight_Sched_Prod = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// Compute:  Market amount
CUR.Extended_Amount = CUR.Market_Amt_CWT_USR * ( CUR.PS_Weight_Sched_Prod / 100 );

ENDIF;

//?USER: Process after print of detail format

NXT.Extended_amount_SUM = SUM(CUR.Extended_Amount);

//?USER: Print required level totals

// SUPPRESSED PRINT Item Code totals format

// SUPPRESSED PRINT Item Structure Class Code totals format

// SUPPRESSED PRINT Item Structure Group Code totals format

CASE;

IF NEW Production_Type;
// Print Production Type totals format
PRINT Production Type totals format;

CASE;

// IF CUR.Production Type is Plan
IF CUR.Production_Type = 'P';

// PAR.Market Amount Plan    USR = CUR.Extended amount       SUM
PAR.Market_Amount_Plan_USR = CUR.Extended_amount_SUM;

ENDIF;

CASE;

// IF CUR.Production Type is Schedule
IF CUR.Production_Type = 'S';

// PAR.Market Amount Sched   USR = CUR.Extended amount       SUM
PAR.Market_Amount_Sched_USR = CUR.Extended_amount_SUM;

ENDIF;

ENDIF;

// SUPPRESSED PRINT Production Date totals format

// SUPPRESSED PRINT Company Number totals format

