// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDTTDFR
// ?Date: 14.08.2025 Time: 03:36:07
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?E14775 JJH 04/03/19 - Correct all Orders not dispaying on screen
//?- Increased the Warehouse Type Array from 100 to 200
//?- Recompile only as no logic changes.
ENDDO;

//?RMC 12/21/07  start display with user dft company
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Rtv/Crt Warehouse Arry RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1470023;
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CRT Warehouse Array    CR) TYPE(CRTOBJ) ARRAY(Warehouses_types)AC1470024;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Warehouse_Type);
 {
  //?USER: Processing if Data record already exists

  QUIT;

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

//?42704 slm Remove Customer Name from sub file control
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

MOVE *ALL (To: CTL From: PAR);

// CTL.Company Number = WRK.Company Number
CTL.Company_Number = WRK.Company_Number;

// CTL.Order Certification Flag = CND.Yes
CTL.Order_Certification_Flag = 'Y';

// PAR.Order Certification Flag = CTL.Order Certification Flag
PAR.Order_Certification_Flag = CTL.Order_Certification_Flag;

// CTL.Text-17               USR = PAR.Customer Name
CTL.Text_17_USR = PAR.Customer_Name;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

// PGM.*Scan limit = CON.1000
PGM.*Scan_limit = 1000;

// LCL.Company Number = CTL.Company Number
LCL.Company_Number = CTL.Company_Number;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(RTV Warehouse type     RT) TYPE(RTVOBJ) ARRAY(Warehouses_types)AC1470026;
PARAMETER(RCD.Warehouse_Code);
PARAMETER(PAR.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF RCD.Order Number EQ LCL.USR Order Number
IF RCD.Order_Number = LCL.USR_Order_Number;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Warehouse Type is Frozen
IF PAR.Warehouse_Type = 'FZ';

EXECUTE FUNCTION(RTV For Freezer Inq    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1552111;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Customer_Name);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Requested_Delivery_Date);
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Order_Certification_Flag);
PARAMETER(RCD.Transfer_in_Storage_Ind);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Selecting by Order Certification Flag
CASE;

// IF CTL.Order Certification Flag is *Blank
IF CTL.Order_Certification_Flag = *BLANK;

//?Selecting by Order Certification Flag
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Order Certification Flag EQ CTL.Order Certification Flag
IF RCD.Order_Certification_Flag = CTL.Order_Certification_Flag;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Selecting by Order Type
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Order Type - Sales is Entered
IF CTL.Order_Type_Sales <> *BLANK;

CASE;

// IF RCD.Order Type - Sales EQ CTL.Order Type - Sales
IF RCD.Order_Type_Sales = CTL.Order_Type_Sales;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Selecting by Ship To Customer Number
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Ship To Customer is not equal to zero
IF CTL.Ship_To_Customer <> *ZERO;

CASE;

// IF RCD.Ship To Customer EQ CTL.Ship To Customer
IF RCD.Ship_To_Customer = CTL.Ship_To_Customer;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Selecting by Requested Delivery Date
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Requested Delivery Date is entered
IF CTL.Requested_Delivery_Date <> *ZERO;

CASE;

// IF RCD.Requested Delivery Date EQ CTL.Requested Delivery Date
IF RCD.Requested_Delivery_Date = CTL.Requested_Delivery_Date;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Selecting by Load ID
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Load ID is NE Blank
IF CTL.Load_ID <> *ZERO;

CASE;

// IF RCD.Load ID EQ CTL.Load ID
IF RCD.Load_ID = CTL.Load_ID;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?Selecting by Header Status
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Header Status is *None
IF CTL.Header_Status = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Header Status EQ CTL.Header Status
IF RCD.Header_Status = CTL.Header_Status;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?**************************************************************************
//?**  PK0070 - Transfer in Storage Indicator
//?**************************************************************************
//?Selecting by TIS Indicator
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// WRK.Text 1 Length USR = CON.*BLANK
WRK.Text_1_Length_USR = *BLANK;

CASE;

// IF CTL.Transfer in Storage Ind NE WRK.Text 1 Length USR
IF CTL.Transfer_in_Storage_Ind <> WRK.Text_1_Length_USR;

CASE;

// IF RCD.Transfer in Storage Ind EQ CTL.Transfer in Storage Ind
IF RCD.Transfer_in_Storage_Ind = CTL.Transfer_in_Storage_Ind;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

// LCL.USR Order Number = DB1.Order Number
LCL.USR_Order_Number = DB1.Order_Number;

ENDIF;

//?CALC: Subfile control function fields

//?Selecting Company
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Company Number
AND PGM.*Cursor_field = CTL.Company_Number;

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(CTL.Company_Number);

//?42704 slm - remove customer name from screen
ENDIF;

//?Select Warehouse
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Warehouse Code
AND PGM.*Cursor_field = CTL.Warehouse_Code;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(CTL.Warehouse_Code);

EXECUTE FUNCTION(RTV Warehouse type     RT) TYPE(RTVOBJ) ARRAY(Warehouses_types)AC1470026;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PAR.Warehouse Type is Frozen
IF PAR.Warehouse_Type = 'FZ';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse Not Frozen.'
ERROR(USR2824);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Verify Active Warehouse
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Warehouse Codes not found.'
ERROR(USR0007);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Verify Frozen Warehouse
CASE;

// IF CTL.Warehouse Code is Warehouse Code not Blank
IF CTL.Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Warehouse type     RT) TYPE(RTVOBJ) ARRAY(Warehouses_types)AC1470026;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(PAR.Warehouse_Type);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF PAR.Warehouse Type is Frozen
IF PAR.Warehouse_Type = 'FZ';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse Not Frozen.'
ERROR(USR2824);
MSGPARM(CTL.Warehouse_Code);

ENDIF;

ENDIF;

//?Select Customer Number
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Ship To Customer
AND PGM.*Cursor_field = CTL.Ship_To_Customer;

//?4/2/04 slm add select shipped to customer with customer name selection
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

ENDIF;

//?Select Shipped Customer Name
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> CTL.Text-17               USR
AND PGM.*Cursor_field = CTL.Text_17_USR;

//?4/025/04 slm add select on shipped to customer with customer name select
// Call program SEL Cust/ShpTo Flag 'Y'SR.
CALL PROGRAM(SEL Cust/ShpTo Flag 'Y'SR) ('PDYSSRR');
PARAMETER(CTL.Ship_To_Customer);

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(CTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.Text-17               USR = CTL.Customer Name
CTL.Text_17_USR = CTL.Customer_Name;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?**************************************************************************
//?*  The user wanted to be able to select records based on Order
//?*  Certification Flag, Order Type, Customer Number, Requested
//?*  Delivery Date, Load ID, and Header Status.  The following state-
//?*  ments allow the program to select on these fields even though
//?*  the aren't on the access path.
//?**************************************************************************
//?Selecting by Company Number
CASE;

// IF CTL.Company Number NE LCL.Company Number
IF CTL.Company_Number <> LCL.Company_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Selecting by Order Certification Flag
CASE;

// IF CTL.Order Certification Flag NE PAR.Order Certification Flag
IF CTL.Order_Certification_Flag <> PAR.Order_Certification_Flag;

// PAR.Order Certification Flag = CTL.Order Certification Flag
PAR.Order_Certification_Flag = CTL.Order_Certification_Flag;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Selecting by Order Type
CASE;

// IF CTL.Order Type - Sales NE PAR.Order Type - Sales
IF CTL.Order_Type_Sales <> PAR.Order_Type_Sales;

// PAR.Order Type - Sales = CTL.Order Type - Sales
PAR.Order_Type_Sales = CTL.Order_Type_Sales;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Selecting by Customer Number
CASE;

// IF CTL.Ship To Customer NE PAR.Ship To Customer
IF CTL.Ship_To_Customer <> PAR.Ship_To_Customer;

// PAR.Ship To Customer = CTL.Ship To Customer
PAR.Ship_To_Customer = CTL.Ship_To_Customer;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Selecting by Requested Delivery Date
CASE;

// IF CTL.Requested Delivery Date NE PAR.Requested Delivery Date
IF CTL.Requested_Delivery_Date <> PAR.Requested_Delivery_Date;

// PAR.Requested Delivery Date = CTL.Requested Delivery Date
PAR.Requested_Delivery_Date = CTL.Requested_Delivery_Date;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Selecting by Load ID
CASE;

// IF CTL.Load ID NE PAR.Load ID
IF CTL.Load_ID <> PAR.Load_ID;

// PAR.Load ID = CTL.Load ID
PAR.Load_ID = CTL.Load_ID;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?Selecting by Header Status
CASE;

// IF CTL.Header Status NE PAR.Header Status
IF CTL.Header_Status <> PAR.Header_Status;

// PAR.Header Status = CTL.Header Status
PAR.Header_Status = CTL.Header_Status;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?**************************************************************************
//?**  PK0070 - Transfer in Storage Indicator
//?**************************************************************************
//?Selecting by TIS Indicator
CASE;

// IF CTL.Transfer in Storage Ind NE PAR.Transfer in Storage Ind
IF CTL.Transfer_in_Storage_Ind <> PAR.Transfer_in_Storage_Ind;

// PAR.Transfer in Storage Ind = CTL.Transfer in Storage Ind
PAR.Transfer_in_Storage_Ind = CTL.Transfer_in_Storage_Ind;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?Option 5 = Order Inquiry Detail
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

CASE;

// IF PAR.Billing Activity Type is Credit or Debit Memo
IF PAR.Billing_Activity_Type = '2'/'3';

EXECUTE FUNCTION(RTV For Freezer Inq    RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1552111;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(PAR.Order_Date);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program DSP Credit/Debit Memo  D1.
CALL PROGRAM(DSP Credit/Debit Memo  D1) ('PDIXD1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Order_Date);

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.Event Code is Shipped Thru 07 History
IF RCD.Event_Code >= '04';
AND RCD.Event_Code <= '07';

// Call program DSP Ord Inq Ship Dtl   DF.
CALL PROGRAM(DSP Ord Inq Ship Dtl   DF) ('PDP3DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(PAR.Application_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Sequence_Number);
PARAMETER(RCD.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

ENDIF;

ENDIF;

//?Option 8=Ordered vs. Shipped Details
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

CASE;

// IF PAR.Billing Activity Type is Credit or Debit Memo
IF PAR.Billing_Activity_Type = '2'/'3';

// Send information message - 'No Shipping Detail for CM/DM'
MESSAGE(USR2328 *INFO);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Customer_Name);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(PAR.Credit_Hold);
PARAMETER(PAR.Production_Hold);
PARAMETER(PAR.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);

ENDIF;

ENDIF;

//?Option 9=Dspl Dispatch/Tracer
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

CASE;

// IF RCD.Load ID is Blank
IF RCD.Load_ID = *ZERO;

// Send error message - 'Load Id is not found'
ERROR(USR2783);
MSGPARM(RCD.Load_ID);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Dispatch/Tracer    DF.
CALL PROGRAM(DSP Dispatch/Tracer    DF) ('PDT3DFR');
PARAMETER(RCD.Load_ID);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

SET CURSOR;

ENDIF;

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

// Call program DSP Item Order Inquiry DF.
CALL PROGRAM(DSP Item Order Inquiry DF) ('PDPSDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(PAR.Order_Date);
PARAMETER(CTL.Header_Status);
PARAMETER(PAR.Credit_Hold);
PARAMETER(PAR.Production_Hold);
PARAMETER(PAR.New_Customer_Hold);
PARAMETER(PAR.Application_Code);

ENDIF;

CASE;

// IF CTL.*CMD key is CF17
IF CTL.*CMD_key = '17';

// Call program WW Order Status Inq    DF.
CALL PROGRAM(WW Order Status Inq    DF) ('PDO3DFR');
PARAMETER('N');

ENDIF;

CASE;

// IF CTL.*CMD key is CF18
IF CTL.*CMD_key = '18';

// WRK.USR Program name = CON.PDDTDFR
WRK.USR_Program_name = 'PDDTDFR';

// Call program DSP Main Ord Inq by Ld DF.
CALL PROGRAM(DSP Main Ord Inq by Ld DF) ('PDMCDFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Type_Sales);
PARAMETER(CTL.Ship_To_Customer);
PARAMETER(WRK.Ship_To_Name);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(CTL.Header_Status);
PARAMETER(CTL.Load_ID);
PARAMETER(WRK.Sales_Route_Code);
PARAMETER(WRK.Event_Code);
PARAMETER(WRK.USR_Program_name);

ENDIF;

