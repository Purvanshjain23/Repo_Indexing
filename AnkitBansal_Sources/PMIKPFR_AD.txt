// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMIKPFR
// ?Date: 14.08.2025 Time: 12:05:35
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Accounts Receivable
PAR.Application_Code = 'A/R';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?** Determine beginning and ending dates for the date range
// WRK.Year Alpha (YYYY) USR = CONCAT(PAR.USR Century,PAR.Year 2A USR,CON.*ZERO)
WRK.Year_Alpha_YYYY_USR = PAR.USR_Century + PAR.Year_2A_USR (*ZERO);

// WRK.Year Code = CVTVAR(WRK.Year Alpha (YYYY) USR)
WRK.Year_Code = CVTVAR(WRK.Year_Alpha_YYYY_USR);

//?** Beginning date:
//?** Retrieve first date of the requested from period/fiscal year
EXECUTE FUNCTION(RTV Per Beg date       RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1831554;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Year_Code);
PARAMETER(PAR.Accounting_Period);
PARAMETER(WRK.Prm_From_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Post to G/L Date = DB1.Post to G/L Date
 PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

 QUIT;

}


//?** Ending date:
//?** Retrieve first date of the requested from period/fiscal year
EXECUTE FUNCTION(RTV Per end date       RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1831553;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Year_Code);
PARAMETER(PAR.Current_Accounting_Period);
PARAMETER(WRK.Prm_To_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Post to G/L Date = DB1.Post to G/L Date
 PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

}


//?USER: Record selection processing

//?** Default blank Accrual Code if it is left blanks
CASE;

// IF PAR.Accrual Code is Not Entered
IF PAR.Accrual_Code = *BLANK;

// WRK.Accrual Code = CND.Broker
WRK.Accrual_Code = 'BRK';

//?** Default blank Accrual Code if it is left blanks
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Accrual Code = PAR.Accrual Code
WRK.Accrual_Code = PAR.Accrual_Code;

ENDIF;

//?** Select by Broker Code if passed in
CASE;

// IF PAR.Broker Code is Entered
IF PAR.Broker_Code <> *BLANK;

CASE;

// IF DB1.Broker Code NE PAR.Broker Code
IF DB1.Broker_Code <> PAR.Broker_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

//?** Validate accrual code if one is entered, else, select all
CASE;

// IF PAR.Accrual Code is Entered
IF PAR.Accrual_Code <> *BLANK;

EXECUTE FUNCTION(VAL correct AcCde-Brkr RT) TYPE(RTVOBJ) FILE(PDICCPP)          AC1831552;
PARAMETER(PAR.Accrual_Type);
PARAMETER(DB1.Broker_Code);
PARAMETER(WRK.Prm_From_Date);
PARAMETER(WRK.Prm_To_Date);
PARAMETER(PAR.Accrual_Code);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.HDA Actual Ship Date LE PAR.Thru Date             USR
 IF DB1.HDA_Actual_Ship_Date <= PAR.Thru_Date_USR;

 CASE;

 // IF DB1.Accrual Code EQ PAR.Accrual Code
 IF DB1.Accrual_Code = PAR.Accrual_Code;

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

 ENDIF;

}


//?** Skip if Broker has no record in history dtl accrl for this accrl code
CASE;

// IF WRK.Record Found USR is Record Not Found
IF WRK.Record_Found_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

EXECUTE FUNCTION(RTV Accrual Info-All   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1825083;
PARAMETER(WRK.Accrual_Code);
PARAMETER(LCL.Accrual_Description);
PARAMETER(LCL.Automatic_Accrual_Y_N);
PARAMETER(LCL.Print_On_Invoice_Y_N);
PARAMETER(LCL.Rate_Usage);
PARAMETER(LCL.Add_on_Allowance);
PARAMETER(LCL.Accrual_Type);
PARAMETER(LCL.Sub_Ledger_Code);
PARAMETER(LCL.Reverse_Accrual_Code);
PARAMETER(LCL.UOM_Primary_Dft);
PARAMETER(LCL.G_L_Code_Dr);
PARAMETER(LCL.G_L_Code_Cr);
PARAMETER(LCL.G_L_Sub_Account_Code);
PARAMETER(LCL.Sales_History_Exp_Bucket);
PARAMETER(LCL.Post_to_G_L_Y_N);
PARAMETER(LCL.All_Products_Y_N);
PARAMETER(LCL.Accrual_Rate);
PARAMETER(LCL.Accrual_Rate_Type);
PARAMETER(LCL.Accrual_Detail_Search);
PARAMETER(LCL.Standard_Schedule_Y_N);
PARAMETER(LCL.Affect_Sales_Realz_Rpt);
PARAMETER(LCL.Affect_Invoice_Price);
PARAMETER(LCL.Invoice_Print_Type);
PARAMETER(LCL.Max_Accrual_Amount);
PARAMETER(LCL.Max_Accrual_Amount_Type);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 MOVE *ALL (To: PAR From: DB1);

}


//?** Select by Ledger Accrual if passed in
CASE;

// IF PAR.Ledger Accrual (Y/N) is Y/N Values
IF PAR.Post_to_G_L_Y_N = 'N'/'Y';

// AND PAR.Ledger Accrual (Y/N) NE LCL.Ledger Accrual (Y/N)
AND PAR.Post_to_G_L_Y_N <> LCL.Post_to_G_L_Y_N;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

// TOP.Accrual Type = PAR.Accrual Type
TOP_Accrual_Type = PAR.Accrual_Type;

// TOP.Ledger Accrual (Y/N) = PAR.Ledger Accrual (Y/N)
TOP_Post_to_G_L_Y_N = PAR.Post_to_G_L_Y_N;

// WRK.Year Alpha (YYYY) USR = CONCAT(PAR.USR Century,PAR.Year 2A USR,CON.*ZERO)
WRK.Year_Alpha_YYYY_USR = PAR.USR_Century + PAR.Year_2A_USR (*ZERO);

// TOP.Accounting Year = CVTVAR(WRK.Year Alpha (YYYY) USR)
TOP_Accounting_Year = CVTVAR(WRK.Year_Alpha_YYYY_USR);

// TOP.Prm From Period = PAR.Accounting Period
TOP_Prm_From_Period = PAR.Accounting_Period;

// TOP.Prm To Period = PAR.Current Accounting Period
TOP_Prm_To_Period = PAR.Current_Accounting_Period;

// TOP.Accrual Code = PAR.Accrual Code
TOP_Accrual_Code = PAR.Accrual_Code;

//?** Accrual Code Description or *all
CASE;

// IF TOP.Accrual Code is Entered
IF TOP_Accrual_Code <> *BLANK;

// TOP.Condition Name 10 USR = Condition name of PAR.Accrual Code
TOP_Condition_Name_10_USR = RTVCND(PAR.Accrual_Code);

//?** Accrual Code Description or *all
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Condition Name 10 USR = CON.*All
TOP_Condition_Name_10_USR = *All;

ENDIF;

// TOP.Broker Code = PAR.Broker Code
TOP_Broker_Code = PAR.Broker_Code;

//?** Broker Name or *All
CASE;

// IF TOP.Broker Code is Entered
IF TOP_Broker_Code <> *BLANK;

EXECUTE FUNCTION(Rtv Broker Name       RT) TYPE(RTVOBJ) FILE(POC5REP)           AC1676428;
PARAMETER(TOP_Broker_Code);
PARAMETER(TOP_Broker_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Broker Name or *All
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Broker Name = CON.*All
TOP_Broker_Name = *All;

ENDIF;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

CASE;

IF NEW Broker_Name;
// SUPPRESSED PRINT Broker Name header format

ENDIF;

//?USER: On print of detail format

// CUR.Broker Name = DB1.Broker Name
CUR.Broker_Name = DB1.Broker_Name;

// CUR.Broker G/L Vendor Number = DB1.Broker G/L Vendor Number
CUR.Broker_G_L_Vendor_Number = DB1.Broker_G_L_Vendor_Number;

//?** Determine beginning and ending dates for the date range
//?** Beginning date:
// WRK.Year Alpha (YYYY) USR = CONCAT(PAR.USR Century,PAR.Year 2A USR,CON.*ZERO)
WRK.Year_Alpha_YYYY_USR = PAR.USR_Century + PAR.Year_2A_USR (*ZERO);

// WRK.Year Code = CVTVAR(WRK.Year Alpha (YYYY) USR)
WRK.Year_Code = CVTVAR(WRK.Year_Alpha_YYYY_USR);

//?** Retrieve first date of the requested from period/fiscal year
EXECUTE FUNCTION(RTV Per Beg date       RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1831554;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Year_Code);
PARAMETER(PAR.Accounting_Period);
PARAMETER(WRK.Prm_From_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Post to G/L Date = DB1.Post to G/L Date
 PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

 QUIT;

}


//?** Ending date:
//?** Retrieve first date of the requested from period/fiscal year
EXECUTE FUNCTION(RTV Per end date       RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1831553;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.Year_Code);
PARAMETER(PAR.Current_Accounting_Period);
PARAMETER(WRK.Prm_To_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PAR.Post to G/L Date = DB1.Post to G/L Date
 PAR.Post_to_G_L_Date = DB1.Post_to_G_L_Date;

}


//?** move the accrual code into a work field
// WRK.Accrual Code = PAR.Accrual Code
WRK.Accrual_Code = PAR.Accrual_Code;

//?** Retrieve the JDE G/L account ID from the History Detail Accrual
EXECUTE FUNCTION(RTV AcctID-Typ/Brkr/Dt RT) TYPE(RTVOBJ) FILE(PDICCPP)          AC1831312;
PARAMETER(WRK.Prm_From_Date);
PARAMETER(PAR.Accrual_Type);
PARAMETER(LCL.SH_Expense_Bucket);
PARAMETER(LCL.G_L_Sub_Account);
PARAMETER(LCL.HDA_Post_to_G_L_Y_N);
PARAMETER(LCL.HDA_Sub_Ledger_Code);
PARAMETER(LCL.HDA_G_L_Sub_Ledger);
PARAMETER(LCL.HDA_G_L_Code_Dr);
PARAMETER(LCL.HDA_G_L_Code_Cr);
PARAMETER(LCL.HDA_JDE_Account_ID_Dr);
PARAMETER(LCL.HDA_JDE_Account_ID_Cr);
PARAMETER(DB1.Broker_Code);
PARAMETER(LCL.Accrual_Code);
PARAMETER(WRK.Accrual_Code);
PARAMETER(WRK.Prm_To_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?** Skip out if past the end date requested
 CASE;

 // IF DB1.HDA Actual Ship Date GT PAR.Prm To Date
 IF DB1.HDA_Actual_Ship_Date > PAR.Prm_To_Date;

 QUIT;

 ENDIF;

 CASE;

 // IF PAR.Accrual Code is Entered
 IF ( PAR.Accrual_Code <> *BLANK;

 // AND DB1.Accrual Code EQ PAR.Accrual Code
 AND DB1.Accrual_Code = PAR.Accrual_Code );

 // OR PAR.Accrual Code is Not Entered
 OR PAR.Accrual_Code = *BLANK;

 //?** Return the last account id for this broker, in case it has changed
 MOVE *ALL (To: PAR From: DB1);

 ENDIF;

}


//?** Retrieve Balance Forward from JDE F0902 file for Broker
//?** Convert the Vendor Number to alpha
// WRK.JDE Sub = CVTVAR(LCL.HDA G/L Sub Ledger)
WRK.JDE_Sub = CVTVAR(LCL.HDA_G_L_Sub_Ledger);

CASE;

// IF LCL.HDA G/L Account # Dr is Entered
IF LCL.HDA_JDE_Account_ID_Dr <> *BLANK;

// Call program RTV Brkr BalFwd F0902  XF.
CALL PROGRAM(RTV Brkr BalFwd F0902  XF) ('PMIXXFR');
PARAMETER(LCL.HDA_JDE_Account_ID_Dr);
PARAMETER(PAR.Century);
PARAMETER(PAR.From_Year_USR);
PARAMETER(WRK.JDE_Sub);
PARAMETER(PAR.USR_Adjustment_Amt_6);

ENDIF;

// CUR.USR Amount 1 9.2 = PAR.USR Adjustment Amt 6
CUR.USR_Amount_1_9_2 = PAR.USR_Adjustment_Amt_6;

//?** Retrieve Summaries for PV, JE, UI from F0911 for Broker
CASE;

// IF LCL.HDA G/L Account # Dr is Entered
IF LCL.HDA_JDE_Account_ID_Dr <> *BLANK;

// Call program RTV Brkr UI,JE,PV F0911XF.
CALL PROGRAM(RTV Brkr UI,JE,PV F0911XF) ('PMIWXFR');
PARAMETER(PAR.Accounting_Period);
PARAMETER(PAR.Current_Accounting_Period);
PARAMETER(PAR.From_Year_USR);
PARAMETER(PAR.Century);
PARAMETER(PAR.USR_Adjustment_Amt_1);
PARAMETER(PAR.USR_Adjustment_Amt_2);
PARAMETER(PAR.USR_Adjustment_Amt_3);
PARAMETER(PAR.USR_Adjustment_Amt_4);
PARAMETER(PAR.USR_Adjustment_Amt_5);
PARAMETER(WRK.JDE_Sub);
PARAMETER(PAR.Accrual_Type);

ENDIF;

//?** Move rtv'd amounts to cur and calculate totals
//?** Move the returned amounts to the report fields
// CUR.USR Amount 2 9.2 = PAR.USR Adjustment Amt 2
CUR.USR_Amount_2_9_2 = PAR.USR_Adjustment_Amt_2;

// CUR.USR Amount 3 9.2 = PAR.USR Adjustment Amt 5
CUR.USR_Amount_3_9_2 = PAR.USR_Adjustment_Amt_5;

// CUR.USR Amount 5 9.2 = PAR.USR Adjustment Amt 1
CUR.USR_Amount_5_9_2 = PAR.USR_Adjustment_Amt_1;

// CUR.USR Amount 6 9.2 = PAR.USR Adjustment Amt 4
CUR.USR_Amount_6_9_2 = PAR.USR_Adjustment_Amt_4;

// CUR.USR Amount 8 9.2 = PAR.USR Adjustment Amt 3
CUR.USR_Amount_8_9_2 = PAR.USR_Adjustment_Amt_3;

//?** Calculate the YTD accrual and paid amounts
// CUR.USR Amount 4 9.2 = CUR.USR Amount 2 9.2 + CUR.USR Amount 3 9.2
CUR.USR_Amount_4_9_2 = CUR.USR_Amount_2_9_2 + CUR.USR_Amount_3_9_2;

// CUR.USR Amount 7 9.2 = CUR.USR Amount 5 9.2 + CUR.USR Amount 6 9.2
CUR.USR_Amount_7_9_2 = CUR.USR_Amount_5_9_2 + CUR.USR_Amount_6_9_2;

//?** Calculate the ending balance:
//?**    Balance Fwd + YTD Accrual + YTD Paid + Adjustments
// CUR.USR Amount 9 9.2 =       *
CUR.USR_Amount_9_9_2 = ( ( CUR.USR_Amount_1_9_2 + CUR.USR_Amount_4_9_2 )                           +
+ CUR.USR_Amount_7_9_2 ) + CUR.USR_Amount_8_9_2;

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

CASE;

// IF PAR.USR Adjustment Amt 1 is equal to zero
IF PAR.USR_Adjustment_Amt_1 = *ZERO;

// AND PAR.USR Adjustment Amt 2 is equal to zero
AND PAR.USR_Adjustment_Amt_2 = *ZERO;

// AND PAR.USR Adjustment Amt 3 is equal to zero
AND PAR.USR_Adjustment_Amt_3 = *ZERO;

// AND PAR.USR Adjustment Amt 4 is equal to zero
AND PAR.USR_Adjustment_Amt_4 = *ZERO;

// AND PAR.USR Adjustment Amt 5 is equal to zero
AND PAR.USR_Adjustment_Amt_5 = *ZERO;

// AND PAR.USR Adjustment Amt 6 is equal to zero
AND PAR.USR_Adjustment_Amt_6 = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?USER: Process after print of detail format

//?** Clear parm variables
// PAR.USR Adjustment Amt 1 = CON.*ZERO
PAR.USR_Adjustment_Amt_1 = *ZERO;

// PAR.USR Adjustment Amt 2 = CON.*ZERO
PAR.USR_Adjustment_Amt_2 = *ZERO;

// PAR.USR Adjustment Amt 3 = CON.*ZERO
PAR.USR_Adjustment_Amt_3 = *ZERO;

// PAR.USR Adjustment Amt 4 = CON.*ZERO
PAR.USR_Adjustment_Amt_4 = *ZERO;

// PAR.USR Adjustment Amt 5 = CON.*ZERO
PAR.USR_Adjustment_Amt_5 = *ZERO;

// PAR.USR Adjustment Amt 6 = CON.*ZERO
PAR.USR_Adjustment_Amt_6 = *ZERO;

//?** Accumulated final totals
// NXT.USR Amount 1 9.2 = NXT.USR Amount 1 9.2 + CUR.USR Amount 1 9.2
NXT.USR_Amount_1_9_2 = NXT.USR_Amount_1_9_2 + CUR.USR_Amount_1_9_2;

// NXT.USR Amount 2 9.2 = NXT.USR Amount 2 9.2 + CUR.USR Amount 2 9.2
NXT.USR_Amount_2_9_2 = NXT.USR_Amount_2_9_2 + CUR.USR_Amount_2_9_2;

// NXT.USR Amount 3 9.2 = NXT.USR Amount 3 9.2 + CUR.USR Amount 3 9.2
NXT.USR_Amount_3_9_2 = NXT.USR_Amount_3_9_2 + CUR.USR_Amount_3_9_2;

// NXT.USR Amount 4 9.2 = NXT.USR Amount 4 9.2 + CUR.USR Amount 4 9.2
NXT.USR_Amount_4_9_2 = NXT.USR_Amount_4_9_2 + CUR.USR_Amount_4_9_2;

// NXT.USR Amount 5 9.2 = NXT.USR Amount 5 9.2 + CUR.USR Amount 5 9.2
NXT.USR_Amount_5_9_2 = NXT.USR_Amount_5_9_2 + CUR.USR_Amount_5_9_2;

// NXT.USR Amount 6 9.2 = NXT.USR Amount 6 9.2 + CUR.USR Amount 6 9.2
NXT.USR_Amount_6_9_2 = NXT.USR_Amount_6_9_2 + CUR.USR_Amount_6_9_2;

// NXT.USR Amount 7 9.2 = NXT.USR Amount 7 9.2 + CUR.USR Amount 7 9.2
NXT.USR_Amount_7_9_2 = NXT.USR_Amount_7_9_2 + CUR.USR_Amount_7_9_2;

// NXT.USR Amount 8 9.2 = NXT.USR Amount 8 9.2 + CUR.USR Amount 8 9.2
NXT.USR_Amount_8_9_2 = NXT.USR_Amount_8_9_2 + CUR.USR_Amount_8_9_2;

// NXT.USR Amount 9 9.2 = NXT.USR Amount 9 9.2 + CUR.USR Amount 9 9.2
NXT.USR_Amount_9_9_2 = NXT.USR_Amount_9_9_2 + CUR.USR_Amount_9_9_2;

//?USER: Print required level totals

CASE;

IF NEW Broker_Name;
// SUPPRESSED PRINT Broker Name totals format

// NXT.USR amount 1  11.2 = NXT.USR amount 1  11.2 + CUR.USR Amount 1 9.2
NXT.USR_amount_1_11_2 = NXT.USR_amount_1_11_2 + CUR.USR_Amount_1_9_2;

// NXT.USR amount 2  11.2 = NXT.USR amount 2  11.2 + CUR.USR Amount 2 9.2
NXT.USR_amount_2_11_2 = NXT.USR_amount_2_11_2 + CUR.USR_Amount_2_9_2;

// NXT.USR Amount 3   11.2 = NXT.USR Amount 3   11.2 + CUR.USR Amount 3 9.2
NXT.USR_Amount_3_11_2 = NXT.USR_Amount_3_11_2 + CUR.USR_Amount_3_9_2;

// NXT.USR Amount 4   11.2 = NXT.USR Amount 4   11.2 + CUR.USR Amount 4 9.2
NXT.USR_Amount_4_11_2 = NXT.USR_Amount_4_11_2 + CUR.USR_Amount_4_9_2;

// NXT.USR Amount 5   11.2 = NXT.USR Amount 5   11.2 + CUR.USR Amount 5 9.2
NXT.USR_Amount_5_11_2 = NXT.USR_Amount_5_11_2 + CUR.USR_Amount_5_9_2;

// NXT.USR Amount 6   11.2 = NXT.USR Amount 6   11.2 + CUR.USR Amount 6 9.2
NXT.USR_Amount_6_11_2 = NXT.USR_Amount_6_11_2 + CUR.USR_Amount_6_9_2;

// NXT.USR Amount 7   11.2 = NXT.USR Amount 7   11.2 + CUR.USR Amount 7 9.2
NXT.USR_Amount_7_11_2 = NXT.USR_Amount_7_11_2 + CUR.USR_Amount_7_9_2;

// NXT.USR Amount 8   11.2 = NXT.USR Amount 8   11.2 + CUR.USR Amount 8 9.2
NXT.USR_Amount_8_11_2 = NXT.USR_Amount_8_11_2 + CUR.USR_Amount_8_9_2;

// NXT.USR Amount 9   11.2 = NXT.USR Amount 9   11.2 + CUR.USR Amount 9 9.2
NXT.USR_Amount_9_11_2 = NXT.USR_Amount_9_11_2 + CUR.USR_Amount_9_9_2;

ENDIF;

