// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PSPSD1R
// ?Date: 14.08.2025 Time: 03:47:10
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?E1630 RMC 09/15/11 New pgm for display only -- for those sans app PKGUPD
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Load detail screen from DBF record

CASE;

// IF DTL.Pckg Item Type is Box types
IF DTL.Pckg_Item_Type = 'BX'/'CB';

// LCL.USR Display 1 = CND.Yes
LCL.USR_Display_1 = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// LCL.USR Display 1 = CND.No
LCL.USR_Display_1 = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Box Pkg Values     RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1655255;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Item_Code);
PARAMETER(DTL.Description_Line_One);
PARAMETER(DTL.Description_Line_Two);
PARAMETER(LCL.Item_Label_Line_1);
PARAMETER(LCL.Item_Label_Line_2);
PARAMETER(LCL.Item_Label_Line_3);
PARAMETER(LCL.Item_Label_Line_4);
PARAMETER(DTL.UOM_Primary);
PARAMETER(LCL.Conversion_Factor_1);
PARAMETER(LCL.Operation_Factor_1);
PARAMETER(LCL.UOM_Second);
PARAMETER(LCL.Conversion_Factor_2);
PARAMETER(LCL.Operation_Factor_2);
PARAMETER(LCL.UOM_Third);
PARAMETER(DTL.UOM_Pricing);
PARAMETER(DTL.Unit_Weight);
PARAMETER(LCL.Quality_Level);
PARAMETER(LCL.Item_Level);
PARAMETER(LCL.Production_Date_Control);
PARAMETER(LCL.Catch_Weight_Status);
PARAMETER(LCL.Minimum_Weight_Per_Case);
PARAMETER(DTL.Maximum_Weight_Per_Case);
PARAMETER(DTL.Number_Cases_On_A_Pallet);
PARAMETER(LCL.Vendor_Item_Default);
PARAMETER(DTL.Item_Structure_Class_Code);
PARAMETER(LCL.Item_Structure_Group_Code);
PARAMETER(LCL.Item_Structure_Type_Code);
PARAMETER(LCL.Default_Commod_Mark_basis);
PARAMETER(LCL.Transportation_Temp);
PARAMETER(LCL.Item_Type_Code);
PARAMETER(LCL.Package_Type_Code);
PARAMETER(LCL.Maximum_Audit_Value);
PARAMETER(LCL.Minimum_Audit_Value);
PARAMETER(LCL.Market_Overage);
PARAMETER(LCL.Standard_Overage_Underage);
PARAMETER(LCL.Commodity_Price_Group);
PARAMETER(LCL.Item_Pricing_Operation);
PARAMETER(LCL.Item_Pricing_Constant);
PARAMETER(LCL.Default_Warehouse);
PARAMETER(LCL.Price_Method_Default);
PARAMETER(LCL.Fresh_Chilling_Time);
PARAMETER(LCL.Base_Conv_Loss_Item);
PARAMETER(LCL.Variety_Rendered_Cut);
PARAMETER(LCL.Frozen_Make_to_Order_Sts);
PARAMETER(LCL.Credit_Item_Status);
PARAMETER(LCL.Std_Weight_Head_Var_Ren);
PARAMETER(LCL.Pieces_Per_Head);
PARAMETER(LCL.Department_Code);
PARAMETER(LCL.Group_for_Packaging);
PARAMETER(LCL.Item_Category_Number_1);
PARAMETER(LCL.Made_to_Order_Code);
PARAMETER(LCL.Item_Category_Number_2);
PARAMETER(LCL.Transportation_Equip_Type);
PARAMETER(LCL.Item_Category_Number_3);
PARAMETER(LCL.Item_Category_Code_3);
PARAMETER(LCL.Item_Category_Number_4);
PARAMETER(LCL.GL_Sub_Code);
PARAMETER(LCL.Item_Category_Number_5);
PARAMETER(LCL.Item_Structure_Sub_Class);
PARAMETER(LCL.Item_Category_Number_6);
PARAMETER(LCL.Item_Primal_Sched_Report);
PARAMETER(LCL.Item_Category_Number_7);
PARAMETER(LCL.Item_Exc_Man_Prc_Excp);
PARAMETER(LCL.Item_Category_Number_8);
PARAMETER(LCL.Item_Prod_Sched_Send_PFS);
PARAMETER(LCL.Item_Category_Number_9);
PARAMETER(LCL.Item_Category_Code_9);
PARAMETER(LCL.Item_Category_Number_10);
PARAMETER(LCL.Item_Category_Code_10);
PARAMETER(DTL.Pallet_Tare_Weight);
PARAMETER(LCL.Misc_Tare_Weight);
PARAMETER(LCL.Production_Lead_Days);
PARAMETER(LCL.Packaging_Code);
PARAMETER(LCL.Item_Market_Code);
PARAMETER(LCL.TF_Co_Ownership_Sts);
PARAMETER(LCL.Agrimetrics_group);
PARAMETER(LCL.Agrimetrics_pack);
PARAMETER(LCL.Agrimetrics_grade);
PARAMETER(LCL.PA_Base_Avail_Rpt_Include);
PARAMETER(LCL.PM_Pounds_per_Hour);
PARAMETER(LCL.Item_Frt_Overage_Prc_UOM);
PARAMETER(LCL.Packages_per_case);
PARAMETER(LCL.Use_Freeze_Sell_By_Days);
PARAMETER(LCL.PM_Batch_Size);
PARAMETER(LCL.Package_Level_size);
PARAMETER(LCL.Partial_Item_Code);
PARAMETER(LCL.WIP_Item_Code);
PARAMETER(LCL.WIP_Reject_Code);
PARAMETER(LCL.Std_Costing_Unit_Weight);
PARAMETER(LCL.FP_Std_Green_Weight);
PARAMETER(LCL.PM_Std_LBS_Man_Per_Hour);
PARAMETER(LCL.PM_Raw_Meat_LBS_Per_Hour);
PARAMETER(LCL.PM_Formula_LBS_Per_Hour);
PARAMETER(LCL.PM_Finished_LBS_Per_Hour);
PARAMETER(LCL.SH_Unused_was_broker);
PARAMETER(LCL.PM_Raw_Material_Type_Code);
PARAMETER(LCL.PM_Line_Number);
PARAMETER(LCL.Seconds_Item);
PARAMETER(LCL.Print_on_Realization_Rpt);
PARAMETER(LCL.Unit_Weight_Change_Sts);
PARAMETER(LCL.Piece_Count_Item);
PARAMETER(LCL.Pieces_Per_Bag);
PARAMETER(LCL.Bags_Per_Unit);
PARAMETER(LCL.Export_Domestic);
PARAMETER(LCL.Print_On_Schedule);
PARAMETER(LCL.Fresh_Inv_Allocation_Seq);
PARAMETER(LCL.Fresh_Sched_As_Ordered);
PARAMETER(LCL.Frozen_Inv_Allocation_Seq);
PARAMETER(LCL.Primal_Group_Code);
PARAMETER(LCL.Item_Meat_Cost_Group_Code);
PARAMETER(LCL.UPC_Code_2);
PARAMETER(LCL.Item_Target_Price);
PARAMETER(LCL.Minimum_Piece_Weight);
PARAMETER(LCL.Maximum_Piece_Weight);
PARAMETER(LCL.Seaboard_Equivalent_Item);
PARAMETER(LCL.Production_Qty_Per_Shift);
PARAMETER(LCL.Scheduling_Position_Grade);
PARAMETER(LCL.Sold_100_Percent_Frozen);
PARAMETER(LCL.Maximum_Shifts);
PARAMETER(DTL.Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Unit Weight Change Sts = CND.No
LCL.Unit_Weight_Change_Sts = 'NO';

// LCL.Unit Weight = DTL.Pckg Tare Weight
LCL.Unit_Weight = DTL.Pckg_Tare_Weight;

// LCL.Item Code = DTL.Item Code
LCL.Item_Code = DTL.Item_Code;

// DTL.Condition Desc. 5  USR = Condition name of DB1.Pckg Type Class
DTL.Condition_Desc_5_USR = RTVCND(DB1.Pckg_Type_Class);

EXECUTE FUNCTION(Rtv Pckgng Grp Desc   RT) TYPE(RTVOBJ) FILE(POCCREP)           AC1652185;
PARAMETER(DTL.Pckg_Group_Category);
PARAMETER(DTL.Condition_Desc_6_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Pckng Reprtng Grp RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1652186;
PARAMETER(DTL.Pckg_Reporting_Group);
PARAMETER(DTL.Condition_Desc_4_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Incl in Misc Tare RT) TYPE(RTVOBJ) FILE(POCAREP)           AC1865444;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Pckg_Item_Type);
PARAMETER(LCL.Incl_in_Misc_Tare);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.Incl in Misc Tare = LCL.Incl in Misc Tare
DTL.Incl_in_Misc_Tare = LCL.Incl_in_Misc_Tare;

CASE;

// IF DTL.Pre-printed Bag Sts EQ WRK.Blank for 4           USR
IF DTL.Pre_printed_Bag_Sts = WRK.Blank_for_4_USR;

// DTL.Pre-printed Bag Sts = CND.No
DTL.Pre_printed_Bag_Sts = 'N';

ENDIF;

CASE;

// IF DTL.Pckg Modified Weight EQ WRK.Blank for 4           USR
IF DTL.Pckg_Modified_Weight = WRK.Blank_for_4_USR;

// DTL.Pckg Modified Weight = CND.No
DTL.Pckg_Modified_Weight = 'N';

ENDIF;

