// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POWFXFR
// ?Date: 14.08.2025 Time: 03:39:20
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Credit Item are created only for Bone-In Loin and Butts Line.
EXECUTE FUNCTION(Exc Crt Credit Prdctn RT) TYPE(RTVOBJ) FILE(POCTCPP)           AC1667279;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
{
 //?USER: Process Data record

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

 EXECUTE FUNCTION(Rtv Base/Cnv/Lss sts   RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1644638;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Base_Conv_Loss_Item);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?02/06/14 PKD Don't do it.  Messed up the yield on Trim becuase
 //?             Curt changed some items that were converted to base.
 //?03/08/2007 PKD Product Code 37077 was moved to Dept/Line: LOINS/CREDIT
 //?               The original Dept/Line: CUT/BONEIN
 CASE;

 // IF PGM.*Record selected is *YES
 IF PGM.*Record_selected = 'Y';

 //?* 04/06/04 PKD According to Nathan we should be using Total Weight.
 // Total Lbs Produced
 LCL.Production_Weight = ( ( DB1.RM_Production_Wgt - DB1.Beginning_WIP_Inv_Wgt )
 + DB1.Ending_WIP_Inv_Wgt ) - DB1.Product_Delete_Wgt;

 EXECUTE FUNCTION(Rtv Item Prod Yield   RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1325623;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.Production_Yield);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 // Weight Consumed
 LCL.SM_Weight_Need_USR = LCL.Production_Weight / ( LCL.Production_Yield / 100 'H' ) 'H';

 EXECUTE FUNCTION(Crt Secondary Prodctn RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1664796;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(LCL.SM_Weight_Need_USR);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Item_Type_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Class_Code);
 {
  //?USER: Process Data record

  //?03/08/2007 PKD Product Code 37077 was moved to Dept/Line: LOINS/CREDIT
  //?               The original Dept/Line: CUT/BONEIN
  //?               The Bone-In Loin line needs to get credit for 37077.
  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  //?Produced Item
  CASE;

  // IF DB1.BOM Type is Produced - Meat
  IF DB1.BOM_Type = 'P';

  // AND DB1.Item Code NE DB1.Component Item Code
  AND DB1.Item_Code <> DB1.Component_Item_Code;

  // LCL.Weight Scheduled
  LCL.Weight_Scheduled = PAR.SM_Weight_Need_USR * ( DB1.Production_Yield / 100 'H' ) 'H';

  EXECUTE FUNCTION(Rtv Item Yield Info   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1672890;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(NLL.Item_Type_Code);
  PARAMETER(NLL.Credit_Item_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?LCL.Quantity Scheduled
  CASE;

  // IF LCL.Unit Weight is Greater than zero
  IF LCL.Unit_Weight > *ZERO;

  // LCL.Quantity Scheduled = LCL.Weight Scheduled / LCL.Unit Weight *Rounded
  LCL.Quantity_Scheduled = LCL.Weight_Scheduled / LCL.Unit_Weight 'H';

  //?LCL.Quantity Scheduled
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Quantity Scheduled = CON.*ZERO
  LCL.Quantity_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Upd Secondary Prodctn RT) TYPE(RTVOBJ) FILE(POCTCPP)           AC1664804;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(*ZERO);
  PARAMETER('Y');
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Production_Qty);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Yld Dly Prod Sum  CR) TYPE(CRTOBJ) FILE(POCTCPP)           AC1664743;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Partial_Item_Code);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Production_Qty);
   PARAMETER(PAR.RM_Production_Wgt);
   PARAMETER(PAR.Beginning_WIP_Inv_Qty);
   PARAMETER(PAR.Beginning_WIP_Inv_Wgt);
   PARAMETER(PAR.Ending_WIP_Inv_Qty);
   PARAMETER(PAR.Ending_WIP_Inv_Wgt);
   PARAMETER(PAR.Product_Delete_Qty);
   PARAMETER(PAR.Product_Delete_Wgt);
   PARAMETER(PAR.YDS_Comment);
   PARAMETER('O');
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // LCL.Production Qty = DB1.Production Qty + PAR.Production Qty
   LCL.Production_Qty = DB1.Production_Qty + PAR.Production_Qty;

   // LCL.Production Wgt = DB1.Production Wgt + PAR.Production Wgt
   LCL.RM_Production_Wgt = DB1.RM_Production_Wgt + PAR.RM_Production_Wgt;

   EXECUTE FUNCTION(Chg Secondary Prodctn CH) TYPE(CHGOBJ) FILE(POCTCPP)           AC1664805;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Production_Qty);
   PARAMETER(LCL.RM_Production_Wgt);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

  ENDIF;

 }

 CASE;

 // IF PAR.Production Line Code is Bone-In Loin
 IF PAR.Production_Line_Code = 'BILOIN';

 CASE;

 // IF LCL.Base/Conv/Loss Item is Converted
 IF LCL.Base_Conv_Loss_Item = 'C';

 EXECUTE FUNCTION(Rtv First Consumed Itm RT) TYPE(RTVOBJ) FILE(PDIOREP)          AC1559427;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER('C');
 PARAMETER(LCL.Component_Item_Code);
 {
  //?USER: Initialize routine

  EXECUTE FUNCTION(Rtv Base Values PA    RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1416510;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(WRK.Description_Line_One);
  PARAMETER(WRK.Description_Line_Two);
  PARAMETER(WRK.UOM_Primary);
  PARAMETER(WRK.Conversion_Factor_1);
  PARAMETER(WRK.Operation_Factor_1);
  PARAMETER(WRK.UOM_Second);
  PARAMETER(WRK.Conversion_Factor_2);
  PARAMETER(WRK.Operation_Factor_2);
  PARAMETER(WRK.UOM_Third);
  PARAMETER(WRK.UOM_Pricing);
  PARAMETER(WRK.Unit_Weight);
  PARAMETER(WRK.Production_Date_Control);
  PARAMETER(WRK.Catch_Weight_Status);
  PARAMETER(WRK.Fresh_Chilling_Time);
  PARAMETER(LCL.Base_Conv_Loss_Item);
  PARAMETER(WRK.Piece_Count_Item);
  PARAMETER(WRK.Pieces_Per_Bag);
  PARAMETER(WRK.Bags_Per_Unit);
  PARAMETER(WRK.Record_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?USER: Processing if Data record not found

  // PAR.Component Item Code = PAR.Item Code
  PAR.Component_Item_Code = PAR.Item_Code;

  //?USER: Process Data record

  CASE;

  // IF DB1.Consume Priority is NE Zero
  IF DB1.Consume_Priority <> *ZERO;

  MOVE *ALL (To: PAR From: DB1);

  CASE;

  // IF LCL.Base/Conv/Loss Item is Base
  IF LCL.Base_Conv_Loss_Item = 'B';

  // PAR.Component Item Code = DB1.Item Code
  PAR.Component_Item_Code = DB1.Item_Code;

  ENDIF;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Item Prod Yield   RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1325623;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Component_Item_Code);
 PARAMETER(LCL.Component_Item_Code);
 PARAMETER(LCL.Production_Yield);
 PARAMETER(LCL.Record_Found_USR);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PAR.Record Found USR = CND.Record Not Found
  PAR.Record_Found_USR = 'N';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.Record Found USR = CND.Record Found
  PAR.Record_Found_USR = 'Y';

 }

 CASE;

 // IF LCL.Record Found USR is Record Found
 IF LCL.Record_Found_USR = 'Y';

 // Weight Consumed
 LCL.SM_Weight_Need_USR = LCL.SM_Weight_Need_USR / ( LCL.Production_Yield / 100 'H' ) 'H';

 EXECUTE FUNCTION(Crt Secondary Prodctn RT) TYPE(RTVOBJ) FILE(PDIOREP)           AC1664796;
 PARAMETER(DB1.Company_Number);
 PARAMETER(LCL.Component_Item_Code);
 PARAMETER(LCL.SM_Weight_Need_USR);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Line_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(DB1.Item_Type_Code);
 PARAMETER(DB1.Item_Structure_Type_Code);
 PARAMETER(DB1.Item_Structure_Group_Code);
 PARAMETER(DB1.Item_Structure_Class_Code);
 {
  //?USER: Process Data record

  //?03/08/2007 PKD Product Code 37077 was moved to Dept/Line: LOINS/CREDIT
  //?               The original Dept/Line: CUT/BONEIN
  //?               The Bone-In Loin line needs to get credit for 37077.
  CASE;

  // IF PGM.*Record selected is *YES
  IF PGM.*Record_selected = 'Y';

  //?Produced Item
  CASE;

  // IF DB1.BOM Type is Produced - Meat
  IF DB1.BOM_Type = 'P';

  // AND DB1.Item Code NE DB1.Component Item Code
  AND DB1.Item_Code <> DB1.Component_Item_Code;

  // LCL.Weight Scheduled
  LCL.Weight_Scheduled = PAR.SM_Weight_Need_USR * ( DB1.Production_Yield / 100 'H' ) 'H';

  EXECUTE FUNCTION(Rtv Item Yield Info   RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1672890;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(LCL.Unit_Weight);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(NLL.Item_Type_Code);
  PARAMETER(NLL.Credit_Item_Status);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?LCL.Quantity Scheduled
  CASE;

  // IF LCL.Unit Weight is Greater than zero
  IF LCL.Unit_Weight > *ZERO;

  // LCL.Quantity Scheduled = LCL.Weight Scheduled / LCL.Unit Weight *Rounded
  LCL.Quantity_Scheduled = LCL.Weight_Scheduled / LCL.Unit_Weight 'H';

  //?LCL.Quantity Scheduled
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Quantity Scheduled = CON.*ZERO
  LCL.Quantity_Scheduled = *ZERO;

  ENDIF;

  EXECUTE FUNCTION(Upd Secondary Prodctn RT) TYPE(RTVOBJ) FILE(POCTCPP)           AC1664804;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Department_Code);
  PARAMETER(PAR.Production_Line_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Production_Shift);
  PARAMETER(DB1.Component_Item_Code);
  PARAMETER(PAR.Item_Type_Code);
  PARAMETER(*ZERO);
  PARAMETER('Y');
  PARAMETER(LCL.Item_Structure_Type_Code);
  PARAMETER(LCL.Item_Structure_Group_Code);
  PARAMETER(LCL.Item_Structure_Class_Code);
  PARAMETER(LCL.Production_Qty);
  PARAMETER(LCL.Weight_Scheduled);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Yld Dly Prod Sum  CR) TYPE(CRTOBJ) FILE(POCTCPP)           AC1664743;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Department_Code);
   PARAMETER(PAR.Production_Line_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Production_Shift);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Item_Type_Code);
   PARAMETER(PAR.Partial_Item_Code);
   PARAMETER(PAR.Credit_Item_Status);
   PARAMETER(PAR.Item_Structure_Type_Code);
   PARAMETER(PAR.Item_Structure_Group_Code);
   PARAMETER(PAR.Item_Structure_Class_Code);
   PARAMETER(PAR.Production_Qty);
   PARAMETER(PAR.RM_Production_Wgt);
   PARAMETER(PAR.Beginning_WIP_Inv_Qty);
   PARAMETER(PAR.Beginning_WIP_Inv_Wgt);
   PARAMETER(PAR.Ending_WIP_Inv_Qty);
   PARAMETER(PAR.Ending_WIP_Inv_Wgt);
   PARAMETER(PAR.Product_Delete_Qty);
   PARAMETER(PAR.Product_Delete_Wgt);
   PARAMETER(PAR.YDS_Comment);
   PARAMETER('O');
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // LCL.Production Qty = DB1.Production Qty + PAR.Production Qty
   LCL.Production_Qty = DB1.Production_Qty + PAR.Production_Qty;

   // LCL.Production Wgt = DB1.Production Wgt + PAR.Production Wgt
   LCL.RM_Production_Wgt = DB1.RM_Production_Wgt + PAR.RM_Production_Wgt;

   EXECUTE FUNCTION(Chg Secondary Prodctn CH) TYPE(CHGOBJ) FILE(POCTCPP)           AC1664805;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Department_Code);
   PARAMETER(DB1.Production_Line_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Production_Shift);
   PARAMETER(DB1.Item_Code);
   PARAMETER(LCL.Production_Qty);
   PARAMETER(LCL.RM_Production_Wgt);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  ENDIF;

  ENDIF;

 }

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


