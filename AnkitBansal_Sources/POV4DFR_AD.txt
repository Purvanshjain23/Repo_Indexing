// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POV4DFR
// ?Date: 14.08.2025 Time: 03:39:16
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Set Access            IF) TYPE(EXCINTFUN)                      AC1667888;
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);
PARAMETER(PAR.Output_Production_USR);
PARAMETER(PAR.Output_Begin_Inv_USR);
PARAMETER(PAR.Output_Not_Used_USR);
PARAMETER(PAR.Output_Partial_Prod_USR);
PARAMETER(PAR.Output_Head_Cut_Wgt_USR);
PARAMETER(PAR.Output_Conv_Start_Wgt);
PARAMETER(PAR.Output_Comment_USR);
PARAMETER(PAR.Add_Partial_USR);
PARAMETER(PAR.Calculate_Yield_USR);
PARAMETER(PAR.Publish_Yield_USR);
{
 //?Execute internal function

 //?** Accounting has all access **
 // PAR.Output Production USR = CND.no
 PAR.Output_Production_USR = 'N';

 // PAR.Output Begin Inv USR = CND.no
 PAR.Output_Begin_Inv_USR = 'N';

 // PAR.Output Not Used USR = CND.no
 PAR.Output_Not_Used_USR = 'N';

 // PAR.Output Partial Prod USR = CND.no
 PAR.Output_Partial_Prod_USR = 'N';

 // PAR.Output Head Cut/Wgt USR = CND.no
 PAR.Output_Head_Cut_Wgt_USR = 'N';

 // PAR.Output Conv Start Wgt = CND.no
 PAR.Output_Conv_Start_Wgt = 'N';

 // PAR.Output Comment USR = CND.no
 PAR.Output_Comment_USR = 'N';

 // PAR.Add Partial USR = CND.yes
 PAR.Add_Partial_USR = 'Y';

 // PAR.Calculate Yield USR = CND.yes
 PAR.Calculate_Yield_USR = 'Y';

 // PAR.Publish Yield USR = CND.yes
 PAR.Publish_Yield_USR = 'Y';

 CASE;

 // IF PAR.User Department is Production
 IF PAR.User_Department = 'PR';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 //?* Cannot enter Head Cut/Cold Weight *
 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // IF PAR.User Department is Main Break
 IF PAR.User_Department = 'MB';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // IF PAR.User Department is Converting
 IF PAR.User_Department = 'CV';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 // IF PAR.User Department is Product Manager
 IF PAR.User_Department = 'PM';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 ENDIF;

}


//?Set Publish Access based on Status
CASE;

// IF PAR.User Department is Production
IF PAR.User_Department = 'PR';

CASE;

// IF PAR.YDL Process Status is 03=Yield Approved PR
IF PAR.YDL_Process_Status = '03';

// OR PAR.YDL Process Status is 04=Yield Approved AC
OR PAR.YDL_Process_Status = '04';

// PAR.Publish Yield USR = CND.no
PAR.Publish_Yield_USR = 'N';

ENDIF;

//?Set Publish Access based on Status
// IF PAR.User Department is Accounting
IF PAR.User_Department = 'AC';

CASE;

// IF PAR.YDL Process Status is 04=Yield Approved AC
IF PAR.YDL_Process_Status = '04';

// PAR.Publish Yield USR = CND.no
PAR.Publish_Yield_USR = 'N';

ENDIF;

ENDIF;

//?USER: Initialize subfile control

MOVE *ALL (To: CTL From: PAR);

EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Department Desc DRV) TYPE(DRVFLD)                              AC1666904;
PARAMETER(CTL.Department_Desc_DRV);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Department_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Production Line Desc DRV) TYPE(DRVFLD)                         AC1666905;
PARAMETER(CTL.Production_Line_Desc_DRV);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Line Desc    RT) TYPE(RTVOBJ) FILE(POCMREP)           AC1666906;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Line_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Rtv Head Cut/Cold Wgt RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1665520;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Head_Cut);
PARAMETER(CTL.Cold_Weight);
PARAMETER(CTL.Avg_Cold_Weight);
PARAMETER(LCL.Start_Weight);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Line Yld Info     RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1670640;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Start_Weight);
PARAMETER(CTL.Start_Pieces);
PARAMETER(CTL.Pct_Pieces_Converted);
PARAMETER(CTL.Total_Line_Weight);
PARAMETER(CTL.Production_Standard_Yld);
PARAMETER(CTL.Actual_Yield);
PARAMETER(CTL.Yield_Variance);
PARAMETER(CTL.Weight_Variance);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Components        RT) TYPE(RTVOBJ) FILE(POC0CPP)           AC1670650;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Yld_Component_Desc_1_USR);
PARAMETER(CTL.Yld_Component_Desc_2_USR);
PARAMETER(CTL.Yld_Component_Desc_3_USR);
PARAMETER(CTL.Yld_Component_Desc_4_USR);
PARAMETER(CTL.Yld_Component_Desc_5_USR);
PARAMETER(CTL.Yld_Component_Desc_6_USR);
PARAMETER(CTL.Yld_Comp_Weight_1_USR);
PARAMETER(CTL.Yld_Comp_Weight_2_USR);
PARAMETER(CTL.Yld_Comp_Weight_3_USR);
PARAMETER(CTL.Yld_Comp_Weight_4_USR);
PARAMETER(CTL.Yld_Comp_Weight_5_USR);
PARAMETER(CTL.Yld_Comp_Weight_6_USR);
PARAMETER(CTL.YDL_Yld_Standard_Pct_1);
PARAMETER(CTL.YDL_Yld_Weight_Diff_1);
PARAMETER(CTL.YDL_Yld_Standard_Pct_2);
PARAMETER(CTL.YDL_Yld_Weight_Diff_2);
PARAMETER(CTL.YDL_Yld_Standard_Pct_3);
PARAMETER(CTL.YDL_Yld_Weight_Diff_3);
PARAMETER(CTL.YDL_Yld_Standard_Pct_4);
PARAMETER(CTL.YDL_Yld_Weight_Diff_4);
PARAMETER(CTL.YDL_Yld_Standard_Pct_5);
PARAMETER(CTL.YDL_Yld_Weight_Diff_5);
PARAMETER(CTL.YDL_Yld_Standard_Pct_6);
PARAMETER(CTL.YDL_Yld_Weight_Diff_6);
PARAMETER(CTL.YDL_Yld_Mix_Percent_1);
PARAMETER(CTL.YDL_Yld_Mix_Percent_2);
PARAMETER(CTL.YDL_Yld_Mix_Percent_3);
PARAMETER(CTL.YDL_Yld_Mix_Percent_4);
PARAMETER(CTL.YDL_Yld_Mix_Percent_5);
PARAMETER(CTL.YDL_Yld_Mix_Percent_6);
PARAMETER(CTL.Yld_Comp_Weight_7_USR);
PARAMETER(CTL.YDL_Yld_Weight_Diff_7);
PARAMETER(CTL.Yld_Component_Desc_7_USR);
PARAMETER(CTL.YDL_Yld_Standard_Pct_7);
PARAMETER(CTL.YDL_Yld_Mix_Percent_7);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 // LCL.Count USR = CON.1
 LCL.Count_USR = 1;

 //?USER: Process Data record

 CASE;

 // IF DB1.YDL Yld Comp Weight is Not equal zero
 IF DB1.YDL_Yld_Comp_Weight <> *ZERO;

 // OR DB1.YDL Yld Standard Pct is not equal to zeros
 OR DB1.YDL_Yld_Standard_Pct <> *ZERO;

 EXECUTE FUNCTION(Rtv Comp Desc         RT) TYPE(RTVOBJ) FILE(POCYREP)           AC1670001;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Yld_Component_Code);
 PARAMETER(LCL.Yld_Component_Desc);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Count USR is One
 IF LCL.Count_USR = 1;

 // PAR.Yld Component Desc 1 USR = LCL.Yld Component Desc
 PAR.Yld_Component_Desc_1_USR = LCL.Yld_Component_Desc;

 // PAR.Yld Comp Weight 1 USR = DB1.YDL Yld Comp Weight
 PAR.Yld_Comp_Weight_1_USR = DB1.YDL_Yld_Comp_Weight;

 // PAR.YDL Yld Standard Pct 1 = DB1.YDL Yld Standard Pct
 PAR.YDL_Yld_Standard_Pct_1 = DB1.YDL_Yld_Standard_Pct;

 // PAR.YDL Yld Weight Diff 1 = DB1.YDL Yld Weight Diff
 PAR.YDL_Yld_Weight_Diff_1 = DB1.YDL_Yld_Weight_Diff;

 // PAR.YDL Yld Mix Percent 1 = DB1.YDL Yld Mix Percent
 PAR.YDL_Yld_Mix_Percent_1 = DB1.YDL_Yld_Mix_Percent;

 // IF LCL.Count USR is Two
 IF LCL.Count_USR = 2;

 // PAR.Yld Component Desc 2 USR = LCL.Yld Component Desc
 PAR.Yld_Component_Desc_2_USR = LCL.Yld_Component_Desc;

 // PAR.Yld Comp Weight 2 USR = DB1.YDL Yld Comp Weight
 PAR.Yld_Comp_Weight_2_USR = DB1.YDL_Yld_Comp_Weight;

 // PAR.YDL Yld Standard Pct 2 = DB1.YDL Yld Standard Pct
 PAR.YDL_Yld_Standard_Pct_2 = DB1.YDL_Yld_Standard_Pct;

 // PAR.YDL Yld Weight Diff 2 = DB1.YDL Yld Weight Diff
 PAR.YDL_Yld_Weight_Diff_2 = DB1.YDL_Yld_Weight_Diff;

 // PAR.YDL Yld Mix Percent 2 = DB1.YDL Yld Mix Percent
 PAR.YDL_Yld_Mix_Percent_2 = DB1.YDL_Yld_Mix_Percent;

 // IF LCL.Count USR is Three
 IF LCL.Count_USR = 3;

 // PAR.Yld Component Desc 3 USR = LCL.Yld Component Desc
 PAR.Yld_Component_Desc_3_USR = LCL.Yld_Component_Desc;

 // PAR.Yld Comp Weight 3 USR = DB1.YDL Yld Comp Weight
 PAR.Yld_Comp_Weight_3_USR = DB1.YDL_Yld_Comp_Weight;

 // PAR.YDL Yld Standard Pct 3 = DB1.YDL Yld Standard Pct
 PAR.YDL_Yld_Standard_Pct_3 = DB1.YDL_Yld_Standard_Pct;

 // PAR.YDL Yld Weight Diff 3 = DB1.YDL Yld Weight Diff
 PAR.YDL_Yld_Weight_Diff_3 = DB1.YDL_Yld_Weight_Diff;

 // PAR.YDL Yld Mix Percent 3 = DB1.YDL Yld Mix Percent
 PAR.YDL_Yld_Mix_Percent_3 = DB1.YDL_Yld_Mix_Percent;

 // IF LCL.Count USR is Four
 IF LCL.Count_USR = 4;

 // PAR.Yld Component Desc 4 USR = LCL.Yld Component Desc
 PAR.Yld_Component_Desc_4_USR = LCL.Yld_Component_Desc;

 // PAR.Yld Comp Weight 4 USR = DB1.YDL Yld Comp Weight
 PAR.Yld_Comp_Weight_4_USR = DB1.YDL_Yld_Comp_Weight;

 // PAR.YDL Yld Standard Pct 4 = DB1.YDL Yld Standard Pct
 PAR.YDL_Yld_Standard_Pct_4 = DB1.YDL_Yld_Standard_Pct;

 // PAR.YDL Yld Weight Diff 4 = DB1.YDL Yld Weight Diff
 PAR.YDL_Yld_Weight_Diff_4 = DB1.YDL_Yld_Weight_Diff;

 // PAR.YDL Yld Mix Percent 4 = DB1.YDL Yld Mix Percent
 PAR.YDL_Yld_Mix_Percent_4 = DB1.YDL_Yld_Mix_Percent;

 // IF LCL.Count USR is Five
 IF LCL.Count_USR = 5;

 // PAR.Yld Component Desc 5 USR = LCL.Yld Component Desc
 PAR.Yld_Component_Desc_5_USR = LCL.Yld_Component_Desc;

 // PAR.Yld Comp Weight 5 USR = DB1.YDL Yld Comp Weight
 PAR.Yld_Comp_Weight_5_USR = DB1.YDL_Yld_Comp_Weight;

 // PAR.YDL Yld Standard Pct 5 = DB1.YDL Yld Standard Pct
 PAR.YDL_Yld_Standard_Pct_5 = DB1.YDL_Yld_Standard_Pct;

 // PAR.YDL Yld Weight Diff 5 = DB1.YDL Yld Weight Diff
 PAR.YDL_Yld_Weight_Diff_5 = DB1.YDL_Yld_Weight_Diff;

 // PAR.YDL Yld Mix Percent 5 = DB1.YDL Yld Mix Percent
 PAR.YDL_Yld_Mix_Percent_5 = DB1.YDL_Yld_Mix_Percent;

 // IF LCL.Count USR is Six
 IF LCL.Count_USR = 6;

 // PAR.Yld Component Desc 6 USR = LCL.Yld Component Desc
 PAR.Yld_Component_Desc_6_USR = LCL.Yld_Component_Desc;

 // PAR.Yld Comp Weight 6 USR = DB1.YDL Yld Comp Weight
 PAR.Yld_Comp_Weight_6_USR = DB1.YDL_Yld_Comp_Weight;

 // PAR.YDL Yld Standard Pct 6 = DB1.YDL Yld Standard Pct
 PAR.YDL_Yld_Standard_Pct_6 = DB1.YDL_Yld_Standard_Pct;

 // PAR.YDL Yld Weight Diff 6 = DB1.YDL Yld Weight Diff
 PAR.YDL_Yld_Weight_Diff_6 = DB1.YDL_Yld_Weight_Diff;

 // PAR.YDL Yld Mix Percent 6 = DB1.YDL Yld Mix Percent
 PAR.YDL_Yld_Mix_Percent_6 = DB1.YDL_Yld_Mix_Percent;

 // IF LCL.Count USR is Seven
 IF LCL.Count_USR = 7;

 // PAR.Yld Component Desc 7 USR = LCL.Yld Component Desc
 PAR.Yld_Component_Desc_7_USR = LCL.Yld_Component_Desc;

 // PAR.Yld Comp Weight 7 USR = DB1.YDL Yld Comp Weight
 PAR.Yld_Comp_Weight_7_USR = DB1.YDL_Yld_Comp_Weight;

 // PAR.YDL Yld Standard Pct 7 = DB1.YDL Yld Standard Pct
 PAR.YDL_Yld_Standard_Pct_7 = DB1.YDL_Yld_Standard_Pct;

 // PAR.YDL Yld Weight Diff 7 = DB1.YDL Yld Weight Diff
 PAR.YDL_Yld_Weight_Diff_7 = DB1.YDL_Yld_Weight_Diff;

 // PAR.YDL Yld Mix Percent 7 = DB1.YDL Yld Mix Percent
 PAR.YDL_Yld_Mix_Percent_7 = DB1.YDL_Yld_Mix_Percent;

 ENDIF;

 // LCL.Count USR = LCL.Count USR + CON.1
 LCL.Count_USR = LCL.Count_USR + 1;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Totals            RT) TYPE(RTVOBJ) FILE(POCTCPP)           AC1667207;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Wgt_Produced_USR);
PARAMETER(CTL.Wgt_Begin_Inv_USR);
PARAMETER(CTL.Wgt_Ending_Inv_USR);
PARAMETER(CTL.Wgt_Pending_USR);
PARAMETER(CTL.Wgt_Total_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Wgt Produced USR = PAR.Wgt Produced USR + DB1.Production Wgt
 PAR.Wgt_Produced_USR = PAR.Wgt_Produced_USR + DB1.RM_Production_Wgt;

 // PAR.Wgt Begin Inv USR = PAR.Wgt Begin Inv USR + DB1.Beginning WIP Inv Wgt
 PAR.Wgt_Begin_Inv_USR = PAR.Wgt_Begin_Inv_USR + DB1.Beginning_WIP_Inv_Wgt;

 // PAR.Wgt Ending Inv USR = PAR.Wgt Ending Inv USR + DB1.Ending WIP Inv Wgt
 PAR.Wgt_Ending_Inv_USR = PAR.Wgt_Ending_Inv_USR + DB1.Ending_WIP_Inv_Wgt;

 // PAR.Wgt Pending USR = PAR.Wgt Pending USR + DB1.Product Delete Wgt
 PAR.Wgt_Pending_USR = PAR.Wgt_Pending_USR + DB1.Product_Delete_Wgt;

 // PAR.Wgt Total USR =       *
 PAR.Wgt_Total_USR = PAR.Wgt_Total_USR + ( ( ( DB1.RM_Production_Wgt
 - DB1.Beginning_WIP_Inv_Wgt ) + DB1.Ending_WIP_Inv_Wgt ) - DB1.Product_Delete_Wgt );

}


//?USER: Initialize subfile record from DBF record

// Total Lbs Produced
RCD.Wgt_Total_USR = RCD.Wgt_Total_USR + ( ( ( DB1.RM_Production_Wgt                                +
- DB1.Beginning_WIP_Inv_Wgt ) + DB1.Ending_WIP_Inv_Wgt ) - DB1.Product_Delete_Wgt );

EXECUTE FUNCTION(Item Desc DRV) TYPE(DRVFLD)                                    AC1505592;
PARAMETER(RCD.Item_Desc_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Item Descriptions  RT) TYPE(RTVOBJ) FILE(OMBYREP)          AC1341279;
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Item_Desc_DRV);
 PARAMETER(WRK.Description_Line_Two);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Item Code DRV) TYPE(DRVFLD)                                    AC1670444;
PARAMETER(RCD.Item_Code_DRV);
PARAMETER(RCD.Item_Code);
{
 //?Calculate derived field

 // LCL.Number 5,0            USR = PAR.Item Code
 LCL.Number_50_USR = PAR.Item_Code;

 // LCL.Text USR 5 = CVTVAR(LCL.Number 5,0            USR)
 LCL.Text_USR_5 = CVTVAR(LCL.Number_50_USR);

 // PAR.Item Code DRV = LCL.Text USR 5
 PAR.Item_Code_DRV = LCL.Text_USR_5;

}


//?USER: Process subfile control (Pre-confirm)

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?USER: Process command keys

//?F8=NEXT
CASE;

// IF CTL.*CMD key is SUBMIT/NEXT
IF CTL.*CMD_key = '08';

CASE;

// IF PAR.YDL Process Status is Yield Not Calculated
IF PAR.YDL_Process_Status = *BLANK/'01';

// Send error message - 'Yield not calculated for &3 Production and Shift &4 for &2 Line.'
ERROR(USR3279);
MSGPARM(CTL.Department_Code);
MSGPARM(CTL.Production_Line_Code);
MSGPARM(CTL.Production_Date);
MSGPARM(CTL.Production_Shift);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Publish Yield USR is yes
IF PAR.Publish_Yield_USR = 'Y';

CASE;

// IF PAR.User Department is Production
IF PAR.User_Department = 'PR';

EXECUTE FUNCTION(Chg Process Status    CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1665842;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(03);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


// IF PAR.User Department is Accounting
IF PAR.User_Department = 'AC';

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// DOW PGM.*Return code is *Normal
DOW PGM.*Return_code = *BLANK;

// Call program Zzz Next Date/Shift   PV.
CALL PROGRAM(Zzz Next Date/Shift   PV) ('POWKPVR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(PAR.YDL_Process_Status);
PARAMETER(PAR.Record_Found_USR);
PARAMETER(PAR.Yld_Program_USR);

ENDDO;

EXECUTE FUNCTION(Chg Process Status    CH) TYPE(CHGOBJ) FILE(POCSCPP)           AC1665842;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER('P');
PARAMETER(04);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

}


EXECUTE FUNCTION(Rtv Dept Open Line    RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1673376;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.YDL Post Status is Open
 IF DB1.YDL_Post_Status = 'O';

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

 ENDIF;

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

EXECUTE FUNCTION(Chg Post Status       RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1673260;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER('P');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Post Status       CH) TYPE(CHGOBJ) FILE(POCRCPP)           AC1673261;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Department_Code);
 PARAMETER(DB1.Production_Date);
 PARAMETER(DB1.Production_Shift);
 PARAMETER(PAR.YDH_Post_Status);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

 }

}


ENDIF;

//?************ Perform Auto End Of Shift for Cut TRIM/MISC     4/1/04
CASE;

// IF CTL.Department Code is CUT
IF CTL.Department_Code = 'CUT';

// Call program Zzz Auto End Of Shift XF.
CALL PROGRAM(Zzz Auto End Of Shift XF) ('PPEDXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

ENDIF;

//?************
// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

ENDIF;

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

RETURN;

ENDIF;

//?F7=BACK
CASE;

// IF CTL.*CMD key is BACK
IF CTL.*CMD_key = '07';

CASE;

// IF PAR.YDL Post Status is Posted
IF PAR.YDL_Post_Status = 'P';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Yld Program USR = CND.Yield Calculation
PAR.Yld_Program_USR = 'YC';

ENDIF;

RETURN;

ENDIF;

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

RETURN;

ENDIF;

