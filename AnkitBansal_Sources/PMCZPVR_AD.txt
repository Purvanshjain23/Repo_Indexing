// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMCZPVR
// ?Date: 14.08.2025 Time: 03:42:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Company Number = CND.St. Joseph
PAR.Company_Number = 960;

// PAR.First Time Flag = CND.Yes
PAR.First_Time_Flag = 'Y';

//?***** Change Log and Comments
DO;

//?** 06/05/2013 RMC E2621
//?** Allow for Guymon too
//?** 10/07/2008 LJB E00224
//?** Change to allow either Fresh or Frozen or Both. Change validations
//?** to accommodate all three selections.
ENDDO;

//?USER: Load screen

//?** Load St. Joe company number into screen field
CASE;

// IF PAR.First Time Flag is Yes
IF PAR.First_Time_Flag = 'Y';

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

//?** Default dates to next day and exclude Sundays
// DTL.Scheduled Ship Date = JOB.*Job date + CON.1 *DAYS
DTL.Scheduled_Ship_Date = DATEINCR(JOB.*Job_date 1 'DY' 1111110 'NONE' 'N' 1);

// DTL.Requested Ship Date = JOB.*Job date + CON.1 *DAYS
DTL.Requested_Ship_Date = DATEINCR(JOB.*Job_date 1 'DY' 1111110 'NONE' 'N' 1);

// DTL.Requested Delivery Date = JOB.*Job date + CON.1 *DAYS
DTL.Requested_Delivery_Date = DATEINCR(JOB.*Job_date 1 'DY' 1111110 'NONE' 'N' 1);

// PAR.First Time Flag = CND.NO
PAR.First_Time_Flag = 'N';

ENDIF;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Validate fields

//?** F4 seletcted
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Customer Number       NBR
IF PGM.*Cursor_field = DTL.Customer_Number_NBR;

// Call program SEL Shipto & A/R Cust  SR.
CALL PROGRAM(SEL Shipto & A/R Cust  SR) ('PDY5SRR');
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(LCL.AR_Customer_Number);

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Validate Customer Number
CASE;

// IF DTL.Customer Number       NBR is not equal 0
IF DTL.Customer_Number_NBR <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer is not found.'
ERROR(USR0525);
MSGPARM(DTL.Customer_Number_NBR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Validate Customer Number
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Customer is not found.'
ERROR(USR0525);
MSGPARM(DTL.Customer_Number_NBR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Validate Customer has product for the trans type requested
CASE;

// IF DTL.Trans Type 1 PASS     USR is Fresh
IF DTL.Trans_Type_1_PASS_USR = 'FR';

//?** Validate Transfer Template Order Customer - Fresh
CASE;

// IF DTL.Customer Number       NBR is not equal 0
IF DTL.Customer_Number_NBR <> *ZERO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Val Transf Templ Cust  RT) TYPE(RTVOBJ) FILE(PMAGREP)          AC1807754;
PARAMETER(DTL.Company_Number);
PARAMETER('FR');
PARAMETER(DTL.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer has no Transfer Template fresh item codes'
ERROR(USR3685);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Validate Customer has product for the trans type requested
// IF DTL.Trans Type 1 PASS     USR is Frozen
IF DTL.Trans_Type_1_PASS_USR = 'FZ';

//?** Validate Transfer Template Order Customer - Frozen
CASE;

// IF DTL.Customer Number       NBR is not equal 0
IF DTL.Customer_Number_NBR <> *ZERO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Val Transf Templ Cust  RT) TYPE(RTVOBJ) FILE(PMAGREP)          AC1807754;
PARAMETER(DTL.Company_Number);
PARAMETER('FZ');
PARAMETER(DTL.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer has no Transfer Template frozen item codes'
ERROR(USR3686);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Validate Customer has product for the trans type requested
// IF DTL.Trans Type 1 PASS     USR is not entered
IF DTL.Trans_Type_1_PASS_USR = *BLANK;

//?** If trans type is blanks, product must exist for both
//?** Validate Transfer Template Order Customer - Fresh
CASE;

// IF DTL.Customer Number       NBR is not equal 0
IF DTL.Customer_Number_NBR <> *ZERO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Val Transf Templ Cust  RT) TYPE(RTVOBJ) FILE(PMAGREP)          AC1807754;
PARAMETER(DTL.Company_Number);
PARAMETER('FR');
PARAMETER(DTL.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer has no Transfer Template fresh item codes'
ERROR(USR3685);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Validate Transfer Template Order Customer - Frozen
CASE;

// IF DTL.Customer Number       NBR is not equal 0
IF DTL.Customer_Number_NBR <> *ZERO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Val Transf Templ Cust  RT) TYPE(RTVOBJ) FILE(PMAGREP)          AC1807754;
PARAMETER(DTL.Company_Number);
PARAMETER('FZ');
PARAMETER(DTL.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer has no Transfer Template frozen item codes'
ERROR(USR3686);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?** Scheduled Ship Date cannot be before today
CASE;

// IF DTL.Scheduled Ship Date LT JOB.*Job date
IF DTL.Scheduled_Ship_Date < JOB.*Job_date;

// DTL.Scheduled Ship Date = JOB.*Job date + CON.1 *DAYS
DTL.Scheduled_Ship_Date = DATEINCR(JOB.*Job_date 1 'DY' 1111110 'NONE' 'N' 1);

// Send error message - 'Sched Ship Date must be in the future.'
ERROR(USR3022);
MSGPARM(DTL.Scheduled_Ship_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Requested Ship Date cannot be before Scheduled Ship date
CASE;

// IF DTL.Requested Ship Date LT DTL.Scheduled Ship Date
IF DTL.Requested_Ship_Date < DTL.Scheduled_Ship_Date;

// DTL.Requested Ship Date = DTL.Scheduled Ship Date
DTL.Requested_Ship_Date = DTL.Scheduled_Ship_Date;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Requested Delivery Date cannot be before Scheduled Ship date
CASE;

// IF DTL.Requested Delivery Date LT DTL.Scheduled Ship Date
IF DTL.Requested_Delivery_Date < DTL.Scheduled_Ship_Date;

// DTL.Requested Delivery Date = DTL.Scheduled Ship Date
DTL.Requested_Delivery_Date = DTL.Scheduled_Ship_Date;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Requested Delivery Date cannot be before Requested ship Date
CASE;

// IF DTL.Requested Delivery Date LT DTL.Requested Ship Date
IF DTL.Requested_Delivery_Date < DTL.Requested_Ship_Date;

// DTL.Requested Delivery Date = DTL.Requested Ship Date
DTL.Requested_Delivery_Date = DTL.Requested_Ship_Date;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Validate relations

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Validate company number
CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

// Send error message - 'Company Number not found'
ERROR(USR0163);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Retrieve customer name
CASE;

// IF DTL.Customer Number       NBR is not equal 0
IF DTL.Customer_Number_NBR <> *ZERO;

EXECUTE FUNCTION(RTV Customer Name      RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1108159;
PARAMETER(DTL.Customer_Number_NBR);
PARAMETER(DTL.Customer_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Customer number must be entered and valid
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer is not found.'
ERROR(USR0525);
MSGPARM(DTL.Customer_Number_NBR);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Validate Customer has product for the trans type requested
CASE;

// IF DTL.Trans Type 1 PASS     USR is Fresh
IF DTL.Trans_Type_1_PASS_USR = 'FR';

//?** Validate Transfer Template Order Customer - Fresh
CASE;

// IF DTL.Customer Number       NBR is not equal 0
IF DTL.Customer_Number_NBR <> *ZERO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Val Transf Templ Cust  RT) TYPE(RTVOBJ) FILE(PMAGREP)          AC1807754;
PARAMETER(DTL.Company_Number);
PARAMETER('FR');
PARAMETER(DTL.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer has no Transfer Template fresh item codes'
ERROR(USR3685);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Validate Customer has product for the trans type requested
// IF DTL.Trans Type 1 PASS     USR is Frozen
IF DTL.Trans_Type_1_PASS_USR = 'FZ';

//?** Validate Transfer Template Order Customer - Frozen
CASE;

// IF DTL.Customer Number       NBR is not equal 0
IF DTL.Customer_Number_NBR <> *ZERO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Val Transf Templ Cust  RT) TYPE(RTVOBJ) FILE(PMAGREP)          AC1807754;
PARAMETER(DTL.Company_Number);
PARAMETER('FZ');
PARAMETER(DTL.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer has no Transfer Template frozen item codes'
ERROR(USR3686);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Validate Customer has product for the trans type requested
// IF DTL.Trans Type 1 PASS     USR is not entered
IF DTL.Trans_Type_1_PASS_USR = *BLANK;

//?** If trans type is blanks, product must exist for both
//?** Validate Transfer Template Order Customer - Fresh
CASE;

// IF DTL.Customer Number       NBR is not equal 0
IF DTL.Customer_Number_NBR <> *ZERO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Val Transf Templ Cust  RT) TYPE(RTVOBJ) FILE(PMAGREP)          AC1807754;
PARAMETER(DTL.Company_Number);
PARAMETER('FR');
PARAMETER(DTL.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer has no Transfer Template fresh item codes'
ERROR(USR3685);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?** Validate Transfer Template Order Customer - Frozen
CASE;

// IF DTL.Customer Number       NBR is not equal 0
IF DTL.Customer_Number_NBR <> *ZERO;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

EXECUTE FUNCTION(Val Transf Templ Cust  RT) TYPE(RTVOBJ) FILE(PMAGREP)          AC1807754;
PARAMETER(DTL.Company_Number);
PARAMETER('FZ');
PARAMETER(DTL.Customer_Number_NBR);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Customer has no Transfer Template frozen item codes'
ERROR(USR3686);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?** Scheduled Ship Date cannot be before today
CASE;

// IF DTL.Scheduled Ship Date LT JOB.*Job date
IF DTL.Scheduled_Ship_Date < JOB.*Job_date;

// DTL.Scheduled Ship Date = JOB.*Job date + CON.1 *DAYS
DTL.Scheduled_Ship_Date = DATEINCR(JOB.*Job_date 1 'DY' 1111110 'NONE' 'N' 1);

// Send error message - 'Sched Ship Date must be in the future.'
ERROR(USR3022);
MSGPARM(DTL.Scheduled_Ship_Date);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Requested Ship Date cannot be before Scheduled Ship date
CASE;

// IF DTL.Requested Ship Date LT DTL.Scheduled Ship Date
IF DTL.Requested_Ship_Date < DTL.Scheduled_Ship_Date;

// DTL.Requested Ship Date = DTL.Scheduled Ship Date
DTL.Requested_Ship_Date = DTL.Scheduled_Ship_Date;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Requested Delivery Date cannot be before Scheduled Ship date
CASE;

// IF DTL.Requested Delivery Date LT DTL.Scheduled Ship Date
IF DTL.Requested_Delivery_Date < DTL.Scheduled_Ship_Date;

// DTL.Requested Delivery Date = DTL.Scheduled Ship Date
DTL.Requested_Delivery_Date = DTL.Scheduled_Ship_Date;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Requested Delivery Date cannot be before Requested ship Date
CASE;

// IF DTL.Requested Delivery Date LT DTL.Requested Ship Date
IF DTL.Requested_Delivery_Date < DTL.Requested_Ship_Date;

// DTL.Requested Delivery Date = DTL.Requested Ship Date
DTL.Requested_Delivery_Date = DTL.Requested_Ship_Date;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: User defined action

// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number;

// PAR.Customer Number Pass  USR = DTL.Customer Number       NBR
PAR.Customer_Number_Pass_USR = DTL.Customer_Number_NBR;

// PAR.Date 1          PASS  USR = DTL.Scheduled Ship Date
PAR.Date_1_PASS_USR = DTL.Scheduled_Ship_Date;

// PAR.Date 2          PASS  USR = DTL.Requested Ship Date
PAR.Date_2_PASS_USR = DTL.Requested_Ship_Date;

// PAR.From Date Pass        USR = DTL.Requested Delivery Date
PAR.From_Date_Pass_USR = DTL.Requested_Delivery_Date;

// PAR.Order Number 1  PASS  USR = CND.Equal to zero
PAR.Order_Number_1_PASS_USR = *ZERO;

// PAR.Order Number 2  PASS  USR = CND.Equal to zero
PAR.Order_Number_2_PASS_USR = *ZERO;

// PAR.System Value Numeric = CND.Equal to zero
PAR.System_Value_Numeric = *ZERO;

// Call program Crt Templt Xfr Orders  CL.
CALL PROGRAM(Crt Templt Xfr Orders  CL) ('PMC8UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.Order_Number_2_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Trans_Type_1_PASS_USR);

// WRK.USR Order Number = PAR.Order Number 1  PASS  USR
WRK.USR_Order_Number = PAR.Order_Number_1_PASS_USR;

// WRK.USR Next Order Number = PAR.Order Number 2  PASS  USR
WRK.USR_Next_Order_Number = PAR.Order_Number_2_PASS_USR;

// WRK.Load ID USR = PAR.System Value Numeric
WRK.Load_ID_USR = PAR.System_Value_Numeric;

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Transfer Template Load: &3, Fresh Ordr: &1, Frozen Ordr: &2 created'
MESSAGE(USR3683 *INFO);
MSGPARM(WRK.USR_Order_Number);
MSGPARM(WRK.USR_Next_Order_Number);
MSGPARM(WRK.Load_ID_USR);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Transfer Template Order ended in error - not created'
ERROR(USR3684);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?USER: Exit program processing

//?** Exit requested
CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

PGM.*Return_code = 'Y2U9999';

RETURN;

ENDIF;

