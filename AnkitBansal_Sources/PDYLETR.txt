// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDYLETR
// ?Date: 14.08.2025 Time: 03:30:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?PIO 11/26/24 We are recompiling the Program as new field is added to WHS
//?RMC 5/10/23 CHANGED TO RPGSQL FOR SPAN CHANGE TO DDL
//?OMS001 AB Changes: Once OMFJCPL6 is converted to view, program is changed
//?to SQLRPG, and there due to Synon bug it is not initializing the fields
//?of both the views of SPAN access path, so re-initialized both the RCDFMT
//?of SPAN access path
EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

// WRK.Display Flag = CND.No
WRK.Display_Flag = 'N';

//?** determine maximum miles between any 2 stops
EXECUTE FUNCTION(CLC Maximum Load Miles RT) TYPE(RTVOBJ) FILE(OMFLCPP)          AC1291273;
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Maximum_Miles);
PARAMETER(PAR.@Number_to_Rank);

EXECUTE FUNCTION(Clc Rate Per Pound     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1291308;
PARAMETER(PAR.Carrier_Broker);
PARAMETER(PAR.Unused_Rate_Per_Stop);
PARAMETER(PAR.Unused_Weight_Rate_1);
PARAMETER(PAR.Total_Load_Order_Weight);

// Call program RTV Last Load Dtl Seq  XF.
CALL PROGRAM(RTV Last Load Dtl Seq  XF) ('PDYBXFR');
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Stop_Drop_Sequence_Number);

//?OMS001 AB - Initialize OMFJCPL6 file's both the record formats
// Execute function Inz_SPN_ACP_RCDFMT     US.
EXECUTE FUNCTION(Inz_SPN_ACP_RCDFMT     US) TYPE(EXCUSRSRC) ('PVGZUFR');

//?USER: Initialize screen for old transaction

// CTL.Flat Amount = PAR.Flat Amount
CTL.Flat_Amount = PAR.Flat_Amount;

// CTL.Allocate Pounds/Miles = PAR.Allocate Pounds/Miles
CTL.Allocate_Pounds_Miles = PAR.Allocate_Pounds_Miles;

// CTL.Text USR 5 = Condition name of CTL.LH Power Only Load
CTL.Text_USR_5 = RTVCND(CTL.LH_Power_Only_Load);

//?** Override miles will take precedence             E00207 08/13/2008
CASE;

// IF PAR.Override Total Load Miles is Entered
IF PAR.Override_Total_Load_Miles <> *ZERO;

// CTL.Total Load Miles = PAR.Override Total Load Miles
CTL.Total_Load_Miles = PAR.Override_Total_Load_Miles;

//?** Override miles will take precedence             E00207 08/13/2008
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Total Load Miles = PAR.Total Load Miles
CTL.Total_Load_Miles = PAR.Total_Load_Miles;

ENDIF;

//?first time processing
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

// Send information message - 'Base/Stop costs may have changed.  Confirm to update with current cos
MESSAGE(USR2144 *INFO);

ENDIF;

//?USER: Load existing header

//?** Rate Hierarchy:
DO;

//?** 1. Flat Amount from the Load Header is entered
//?**    then use this amount instead of any other amounts
//?** 2. If Flat Rate for carr/whs to Dest City/State - select, done
//?** 3. If Per Mile rate for carr/whs to Dest City/State - select, done
//?** 4. If Flat Rate for carr/whs to State/State - then select, done
//?** 5. If Per Mile Rate for carr/whs to State/State - then select, done
//?** 6. If Region rates, - then select, done
//?** 7. If Minimum Charge is GT 4,5,or 6, use minimum instead
ENDDO;

// LCL.CDR Unit of Measure = CND.Blanks
LCL.CDR_Unit_of_Measure = *BLANK;

// CTL.Name = PAR.Name
CTL.Name = PAR.Name;

// CTL.Allocate Pounds/Miles = PAR.Allocate Pounds/Miles
CTL.Allocate_Pounds_Miles = PAR.Allocate_Pounds_Miles;

// CTL.Maximum Miles = PAR.Maximum Miles
CTL.Maximum_Miles = PAR.Maximum_Miles;

// CTL.Total Weight = PAR.Total Weight
CTL.Total_Load_Order_Weight = PAR.Total_Load_Order_Weight;

//?** Use Override Total Load Miles if entered           E00207 8/11/08
CASE;

// IF DB1.Override Total Load Miles is Entered
IF DB1.Override_Total_Load_Miles <> *ZERO;

// CTL.Total Load Miles = DB1.Override Total Load Miles
CTL.Total_Load_Miles = DB1.Override_Total_Load_Miles;

// WRK.Display Flag = CND.Yes
WRK.Display_Flag = 'Y';

//?** Use Override Total Load Miles if entered           E00207 8/11/08
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Total Load Miles = DB1.Total Load Miles
CTL.Total_Load_Miles = DB1.Total_Load_Miles;

ENDIF;

// WRK.Total Miles = DB1.Total Load Miles
WRK.Total_Miles = DB1.Total_Load_Miles;

//?TRF015 RMC 11/3/06 Get minimum charge for carrier
EXECUTE FUNCTION(Rtv Carrier Frt Chr   RT) TYPE(RTVOBJ) FILE(PMABREP)           AC1799112;
PARAMETER(DB1.Carrier_Code);
PARAMETER('MINIM');
PARAMETER(*ZERO);
PARAMETER(CTL.CFC_Charge_Amount);
PARAMETER(LCL.CFC_Unit_of_Measure);
PARAMETER(JOB.*Job_date);

//?** Get Export info from Order Header Extension       FP1101  07/10/2007
// Call program RTV ExpOrd Info for LD XF.
CALL PROGRAM(RTV ExpOrd Info for LD XF) ('PMJMXFR');
PARAMETER(NLL.Order_Number);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(LCL.Ship_To_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Carrier_Code);
PARAMETER(DB1.Load_ID);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Export_Docs_Go_w_Driver);
PARAMETER(NLL.Air_Freight_Order);
PARAMETER(NLL.Export_USDA_Approved);
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Stop_Drop_Sequence_Number);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.OHE_City);
PARAMETER(NLL.OHE_Vessel_Airline);
PARAMETER(NLL.OHE_Voyage_Flight);
PARAMETER(NLL.OHE_Booking_Number);
PARAMETER(NLL.OHE_Discharge_Port_Airprt);
PARAMETER(NLL.OHE_Sail_Flight_Date);
PARAMETER(NLL.OHE_Port_Cut_Date);
PARAMETER(NLL.OHE_Arrival_Date);
PARAMETER(NLL.OHE_Late_Delivery_Code);
PARAMETER(NLL.OHE_Ship_Status);
PARAMETER(NLL.OHE_Container_Number);
PARAMETER(NLL.OHE_Comment_1);
PARAMETER(NLL.OHE_Comment_2);
PARAMETER(LCL.Port_City);
PARAMETER(NLL.Port_Address_Line_1);
PARAMETER(NLL.Port_Address_Line_2);
PARAMETER(LCL.Sail_Port_State);
PARAMETER(NLL.Port_Zip_Postal_Code);
PARAMETER(NLL.Port_Phone_Number);
PARAMETER(NLL.Port_Fax_Number);

//?** Get Dest City and state from either export or load detail
CASE;

// IF LCL.Ship To State Code is International Accounts
IF LCL.Ship_To_State_Code = '.';

// LCL.Ship To State Code = LCL.Sail Port State
LCL.Ship_To_State_Code = LCL.Sail_Port_State;

// LCL.Destination City = LCL.Port City
LCL.Destination_City = LCL.Port_City;

//?** Get Dest City and state from either export or load detail
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Last Stop Info    RT) TYPE(RTVOBJ) FILE(OMFLCPP)           AC1604222;
PARAMETER(DB1.Load_ID);
PARAMETER(NLL.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(LCL.Destination_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Salesperson_Name);

ENDIF;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(LCL.Destination_City);
PARAMETER(LCL.Destination_City);

//?Original code: get the flat rate per carr/city/state
//?New code:     get the flat rate per carr/whse/city/state    TRF015
//?RMC 12/19  if rate not found for city/st
//?New code:     get the frt rate per carr/whse/State/state    TRF015
EXECUTE FUNCTION(Rtv Destination Rates RT) TYPE(RTVOBJ) FILE(PDLECPP)           AC1634972;
PARAMETER(DB1.Carrier_Code);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(LCL.Destination_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Flat_Rate);
PARAMETER(LCL.CDR_Unit_of_Measure);
PARAMETER(LCL.Bulk_Rate);
PARAMETER(WRK.Export_Fresh_Flat_Amt);
PARAMETER(WRK.Export_Frozen_Flat_Amt);
PARAMETER(WRK.Double_Fuel_Surcharge_Sts);

//?  Set the Dest city = State Code to get rate for entire state.
//?If found, this is used before the Rate per Region for rated frt calc.
//?** if no city/state, look for state/state
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// LCL.Destination City = LCL.Ship To State Code
LCL.Destination_City = LCL.Ship_To_State_Code;

EXECUTE FUNCTION(Rtv Destination Rates RT) TYPE(RTVOBJ) FILE(PDLECPP)           AC1634972;
PARAMETER(DB1.Carrier_Code);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(LCL.Destination_City);
PARAMETER(LCL.Ship_To_State_Code);
PARAMETER(LCL.Freight_Rate_USR);
PARAMETER(LCL.CDR_Unit_of_Measure);
PARAMETER(LCL.Bulk_Rate);
PARAMETER(WRK.Export_Fresh_Flat_Amt);
PARAMETER(WRK.Export_Frozen_Flat_Amt);
PARAMETER(WRK.Double_Fuel_Surcharge_Sts);

ENDIF;

// CTL.CDR Unit of Measure = LCL.CDR Unit of Measure
CTL.CDR_Unit_of_Measure = LCL.CDR_Unit_of_Measure;

// CTL.Rate Per Stop = PAR.Rate Per Stop
CTL.Unused_Rate_Per_Stop = PAR.Unused_Rate_Per_Stop;

// CTL.Bulk Rate = LCL.Bulk Rate
CTL.Bulk_Rate = LCL.Bulk_Rate;

// CTL.Carrier Broker = PAR.Carrier Broker
CTL.Carrier_Broker = PAR.Carrier_Broker;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(CTL.Carrier_Broker);
PARAMETER(CTL.Description);
PARAMETER(WRK.Record_Status);

//?** Bulk rate is for odd, left over items
CASE;

// IF CTL.Load Type is Bulk
IF CTL.Load_Type = 'B';

CASE;

// IF LCL.Flat Rate is GT Zero
IF LCL.Flat_Rate > *ZERO;

CASE;

// IF LCL.CDR Unit of Measure is Flat
IF LCL.CDR_Unit_of_Measure = 'FL';

// CTL.Flat Amount = LCL.Flat Rate
CTL.Flat_Amount = LCL.Flat_Rate;

ENDIF;

ENDIF;

ENDIF;

//?Retrieve total freight entered on Order Header Financial  ELB Load Plan
//?** (Note - total weight work is hidden on the ctl record)
EXECUTE FUNCTION(Rtv Order Freight ELB  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1568402;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Order_Freight_USR);
PARAMETER(PAR.Total_Weight_Work);

// CTL.Total Weight Work = CTL.Total Weight - PAR.Total Weight Work
CTL.Total_Weight_Work = CTL.Total_Load_Order_Weight - PAR.Total_Weight_Work;

//?Pounds/Miles/Ton computation - Also, Flat Rate for City or State
CASE;

// IF CTL.Flat Amount is GT Zero
IF CTL.Flat_Amount > *ZERO;

//?** Flat Amount from Load Hdr takes precedence in the calcs
// PGM.*Synon (15,5) work field = CON.*ZERO
PGM.*Synon_155_work_field = *ZERO;

// CTL.Total Base Cost = CTL.Flat Amount
CTL.Total_Base_Cost = CTL.Flat_Amount;

//?Pounds/Miles/Ton computation - Also, Flat Rate for City or State
// IF LCL.Destination City NE LCL.Ship To State Code
IF LCL.Destination_City <> LCL.Ship_To_State_Code;

// AND LCL.Flat Amount is GT Zero
AND LCL.Flat_Amount > *ZERO;

//?** City calcs
CASE;

// IF CTL.CDR Unit of Measure is Flat
IF CTL.CDR_Unit_of_Measure = 'FL';

//?** Default in flat rate from carrier destination rates calcs
// CTL.Freight Rate USR = CON.*ZERO
CTL.Freight_Rate_USR = *ZERO;

// CTL.Flat Amount = LCL.Flat Rate
CTL.Flat_Amount = LCL.Flat_Rate;

// PGM.*Synon (15,5) work field = LCL.Flat Rate
PGM.*Synon_155_work_field = LCL.Flat_Rate;

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

//?** City calcs
// IF CTL.CDR Unit of Measure is Mile
IF CTL.CDR_Unit_of_Measure = 'ML';

//?** Replace carrier rate w/flat rate from carrier destination rates calcs
// CTL.Unused Mile Rate 1 = LCL.Flat Rate
CTL.Unused_Mile_Rate_1 = LCL.Flat_Rate;

// PGM.*Synon (15,5) work field = CTL.Total Load Miles * CTL.Unused Mile Rate 1 *Rounded
PGM.*Synon_155_work_field = CTL.Total_Load_Miles * CTL.Unused_Mile_Rate_1 'H';

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?Pounds/Miles/Ton computation - Also, Flat Rate for City or State
// IF LCL.Destination City EQ LCL.Ship To State Code
IF LCL.Destination_City = LCL.Ship_To_State_Code;

// AND LCL.Freight Rate USR NE WRK.ZERO
AND LCL.Freight_Rate_USR <> WRK.ZERO;

//?** State to State calcs
CASE;

// IF CTL.CDR Unit of Measure is Flat
IF CTL.CDR_Unit_of_Measure = 'FL';

// CTL.Freight Rate USR = LCL.Freight Rate USR
CTL.Freight_Rate_USR = LCL.Freight_Rate_USR;

// PGM.*Synon (15,5) work field = LCL.Freight Rate USR
PGM.*Synon_155_work_field = LCL.Freight_Rate_USR;

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

//?** State to State calcs
// IF CTL.CDR Unit of Measure is Mile
IF CTL.CDR_Unit_of_Measure = 'ML';

// CTL.Unused Mile Rate 1 = LCL.Freight Rate USR
CTL.Unused_Mile_Rate_1 = LCL.Freight_Rate_USR;

// CTL.Freight Rate USR = LCL.Freight Rate USR
CTL.Freight_Rate_USR = LCL.Freight_Rate_USR;

//?** ctl.tlm will contain either override miles or total load miles E00207
// PGM.*Synon (15,5) work field = CTL.Total Load Miles * CTL.Unused Mile Rate 1 *Rounded
PGM.*Synon_155_work_field = CTL.Total_Load_Miles * CTL.Unused_Mile_Rate_1 'H';

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?Pounds/Miles/Ton computation - Also, Flat Rate for City or State
// IF CTL.Allocate Pounds/Miles is Miles
IF CTL.Allocate_Pounds_Miles = 'M';

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(LCL.Shipping_Company);

// Call program CLC Mile Rate          XF.
CALL PROGRAM(CLC Mile Rate          XF) ('PDELXFR');
PARAMETER(LCL.Shipping_Company);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(PAR.Carrier_Broker);
PARAMETER(CTL.Total_Load_Miles);
PARAMETER(PAR.Unused_Mile_Rate_1);
PARAMETER(LCL.Ship_To_State_Code);

// CTL.Unused Mile Rate 1 = PAR.Unused Mile Rate 1
CTL.Unused_Mile_Rate_1 = PAR.Unused_Mile_Rate_1;

//?Calc from Region Rate or State Rate
CASE;

// IF CTL.Freight Rate USR is Equal to Zero
IF CTL.Freight_Rate_USR = *ZERO;

CASE;

// IF LCL.CDR Unit of Measure is Mile
IF LCL.CDR_Unit_of_Measure = 'ML';

// AND LCL.Flat Rate is GT Zero
AND LCL.Flat_Rate > *ZERO;

//?** ctl.tlm will contain either override miles or total load miles E00207
// PGM.*Synon (15,5) work field = CTL.Total Load Miles * LCL.Flat Rate *Rounded
PGM.*Synon_155_work_field = CTL.Total_Load_Miles * LCL.Flat_Rate 'H';

// CTL.Unused Mile Rate 1 = LCL.Flat Rate
CTL.Unused_Mile_Rate_1 = LCL.Flat_Rate;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Synon (15,5) work field = CTL.Total Load Miles * CTL.Unused Mile Rate 1 *Rounded
PGM.*Synon_155_work_field = CTL.Total_Load_Miles * CTL.Unused_Mile_Rate_1 'H';

ENDIF;

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

//?Calc from Region Rate or State Rate
// IF *OTHERWISE
IF *OTHERWISE;

//?TRF015 RMC 11/3/6 new calc
//?** ctl.tlm will contain either override miles or total load miles E00207
// PGM.*Synon (15,5) work field = CTL.Total Load Miles * CTL.Freight Rate USR *Rounded
PGM.*Synon_155_work_field = CTL.Total_Load_Miles * CTL.Freight_Rate_USR 'H';

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?Pounds/Miles/Ton computation - Also, Flat Rate for City or State
//?Pounds/Miles/Ton computation - Also, Flat Rate for City or State
// IF CTL.Allocate Pounds/Miles is Ton
IF CTL.Allocate_Pounds_Miles = 'T';

//?09/18/01 PKP T860
// Synon (15,5) work field =       * Allocate Ton
PGM.*Synon_155_work_field = ( CTL.Total_Load_Order_Weight / 2000 'H' ) * LCL.Bulk_Rate             +
 'H';

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

//?Pounds/Miles/Ton computation - Also, Flat Rate for City or State
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Synon (15,5) work field = CON.*ZERO
PGM.*Synon_155_work_field = *ZERO;

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?Remove Order freight for Elberton.
CASE;

// IF CTL.Flat Amount GE PAR.Order Freight  USR
IF CTL.Flat_Amount >= PAR.Order_Freight_USR;

// Remove Order Freight ELB
CTL.Total_Base_Cost_USR = CTL.Total_Base_Cost - PAR.Order_Freight_USR;

//?Remove Order freight for Elberton.
// IF *OTHERWISE
IF *OTHERWISE;

// Remove Order Freight ELB
CTL.Total_Base_Cost_USR = CTL.Total_Base_Cost - CTL.Flat_Amount;

ENDIF;

// CTL.Rated Freight = CTL.Total Base Cost
CTL.Rated_Freight = CTL.Total_Base_Cost;

//?TRF015 11/3/6 RMC dont know if we need this????
// CTL.Rated Freight USR = CTL.Total Base Cost  USR
CTL.Rated_Freight_USR = CTL.Total_Base_Cost_USR;

//?*******************
// CTL.USR Display field = CND.no
CTL.USR_Display_field = 'N';

//?TRF015 RMC 11/3/6 Use Carrier Minimum Charge if flat amt=0 and ...
CASE;

// IF CTL.Flat Amount is EQ Zero
IF CTL.Flat_Amount = 0;

//?Minimum charge is found for carrier
CASE;

// IF CTL.CFC Charge Amount is GT Zero
IF CTL.CFC_Charge_Amount > *ZERO;

//?and Rated Freight is < minimum charge
CASE;

// IF CTL.Rated Freight LT CTL.CFC Charge Amount
IF CTL.Rated_Freight < CTL.CFC_Charge_Amount;

// CTL.Rated Freight = CTL.CFC Charge Amount
CTL.Rated_Freight = CTL.CFC_Charge_Amount;

// CTL.Total Base Cost  USR = CTL.CFC Charge Amount
CTL.Total_Base_Cost_USR = CTL.CFC_Charge_Amount;

// CTL.Rated Freight USR = CTL.CFC Charge Amount
CTL.Rated_Freight_USR = CTL.CFC_Charge_Amount;

// CTL.USR Display field = CND.yes
CTL.USR_Display_field = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?*******************
//?E1647 PKD 0/28/11 PKD If Load is identified as a Power Only Load
//?                      and Flat Amount is not entered, then do
//?                      not calculate the Rated Freight.
//?                      not calculate the Rated Freight.
//?OVERRIDE Rated Freight: Power Only Load
CASE;

// IF CTL.Flat Amount is EQ Zero
IF CTL.Flat_Amount = 0;

CASE;

// IF CTL.LH Power Only Load is Yes
IF CTL.LH_Power_Only_Load = 'Y';

// CTL.Rated Freight = CON.*ZERO
CTL.Rated_Freight = *ZERO;

// CTL.Total Base Cost = CON.*ZERO
CTL.Total_Base_Cost = *ZERO;

// CTL.Total Base Cost  USR = CON.*ZERO
CTL.Total_Base_Cost_USR = *ZERO;

// CTL.Rated Freight USR = CON.*ZERO
CTL.Rated_Freight_USR = *ZERO;

// CTL.USR Display field = CND.yes
CTL.USR_Display_field = 'Y';

ENDIF;

ENDIF;

//?*******************
// PAR.Stop/Drop = CON.*ZERO
PAR.Stop_Drop = *ZERO;

// PAR.@Rated Freight = CON.*ZERO
PAR.@Rated_Freight = *ZERO;

//?USER: Initialize subfile record (old record)

//?Retrieve order freight from Order Header Financial  ELB Load Plan
EXECUTE FUNCTION(RTV Ttl Frght for Ord  RT) TYPE(RTVOBJ) FILE(OMCQWKP)          AC1568403;
PARAMETER(DB2.Company_Number);
PARAMETER(DB2.Order_Number);
PARAMETER(RCD.Order_Freight_USR);

EXECUTE FUNCTION(RTV Order Type         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1564834;
PARAMETER(DB2.Company_Number);
PARAMETER(DB2.Order_Number);
PARAMETER(PAR.Order_Type_Sales);

//?If sample order or order header has freight, rated freight = 0 ELB Load Pl
CASE;

// IF RCD.Order Freight  USR is Not Zero
IF RCD.Order_Freight_USR <> *ZERO;

// OR PAR.Order Type - Sales is Sample Order
OR PAR.Order_Type_Sales = 'SA';

// RCD.Rated Freight = DB2.Freight Misc. Charge
RCD.Rated_Freight = DB2.Freight_Misc_Charge;

// RCD.USR Freight Misc. Cost = DB2.Freight Misc. Charge
RCD.USR_Freight_Misc_Cost = DB2.Freight_Misc_Charge;

EXECUTE FUNCTION(RTV Order Weight       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1292006;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.USR_Order_Weight);

//?If sample order or order header has freight, rated freight = 0 ELB Load Pl
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.USR Freight Misc. Cost = DB2.Freight Misc. Charge
RCD.USR_Freight_Misc_Cost = DB2.Freight_Misc_Charge;

EXECUTE FUNCTION(RTV Order Weight       RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1292006;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.USR_Order_Weight);

//?Stop break
CASE;

// IF DB2.Stop/Drop NE PAR.Stop/Drop
IF DB2.Stop_Drop <> PAR.Stop_Drop;

// Call program CLC Stop Totals        XF.
CALL PROGRAM(CLC Stop Totals        XF) ('PDJKXFR');
PARAMETER(PAR.Load_ID);
PARAMETER(DB2.Stop_Drop);
PARAMETER(PAR.USR_Orders_on_Stop);
PARAMETER(PAR.USR_Stop_Total_Weight);
PARAMETER(WRK.Numeric_Field_Not_Needed);

// PAR.Stop/Drop = DB2.Stop/Drop
PAR.Stop_Drop = DB2.Stop_Drop;

ENDIF;

//?Stop charge
CASE;

// IF DB2.Stop/Drop EQ PAR.@Number to Rank
IF DB2.Stop_Drop = PAR.@Number_to_Rank;

// PAR.Freight Stop Charge = CON.*ZERO
PAR.Freight_Stop_Charge = *ZERO;

//?Stop charge
// IF RCD.Stop/Drop EQ PAR.@Number to Rank
IF RCD.Stop_Drop = PAR.@Number_to_Rank;

// PAR.Freight Stop Charge = CON.*ZERO
PAR.Freight_Stop_Charge = *ZERO;

//?Stop charge
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.USR Orders on Stop EQ WRK.ZERO
IF PAR.USR_Orders_on_Stop = WRK.ZERO;

// PAR.Freight Stop Charge = CON.*ZERO
PAR.Freight_Stop_Charge = *ZERO;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Freight Stop Charge = CTL.Rate Per Stop / PAR.USR Orders on Stop *Rounded
PAR.Freight_Stop_Charge = CTL.Unused_Rate_Per_Stop / PAR.USR_Orders_on_Stop 'H';

ENDIF;

ENDIF;

// RCD.Freight Stop Charge = PAR.Freight Stop Charge
RCD.Freight_Stop_Charge = PAR.Freight_Stop_Charge;

//?Compute rated freight
DO;

//?Compute ratio
CASE;

// IF CTL.Total Weight Work EQ WRK.ZERO
IF CTL.Total_Weight_Work = WRK.ZERO;

// PAR.@Percent 9/6 = CON.*ZERO
PAR.@Percent_9_6 = *ZERO;

//?Compute ratio
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.@Percent 9/6 = RCD.USR Order Weight / CTL.Total Weight Work *Rounded
PAR.@Percent_9_6 = RCD.USR_Order_Weight / CTL.Total_Weight_Work 'H';

ENDIF;

// Synon (17,5) work field =       * Compute Rated Freight
PGM.*Synon_175_work_field = ( ( PAR.@Percent_9_6 * CTL.Total_Base_Cost_USR 'H' )                   +
 + DB2.Freight_Misc_Charge ) + PAR.Freight_Stop_Charge;

ENDDO;

// RCD.Rated Freight = CON.1 * PGM.*Synon (17,5) work field *Rounded
RCD.Rated_Freight = 1 * PGM.*Synon_175_work_field 'H';

// PAR.@Rated Freight = PAR.@Rated Freight + RCD.Rated Freight
PAR.@Rated_Freight = PAR.@Rated_Freight + RCD.Rated_Freight;

//?Adjust last detail if necessary
CASE;

// IF DB2.Stop/Drop Sequence Number EQ PAR.Stop/Drop Sequence Number
IF DB2.Stop_Drop_Sequence_Number = PAR.Stop_Drop_Sequence_Number;

//?Adjust last load detail's rated freight if necessary
CASE;

// IF PAR.@Rated Freight NE CTL.Rated Freight USR
IF PAR.@Rated_Freight <> CTL.Rated_Freight_USR;

// WRK.Adjustment Amount = CTL.Rated Freight USR - PAR.@Rated Freight
WRK.Adjustment_Amount = CTL.Rated_Freight_USR - PAR.@Rated_Freight;

// RCD.Rated Freight = RCD.Rated Freight + WRK.Adjustment Amount
RCD.Rated_Freight = RCD.Rated_Freight + WRK.Adjustment_Amount;

ENDIF;

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// PGM.*Re-read Subfile Record = CND.*YES
PGM.*Re_read_Subfile_Record = 1;

//?USER: Validate header non-key fields

//?** CTL.Total Load Miles will have override miles if they exist
EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(CTL.Warehouse_Code);
PARAMETER(LCL.Shipping_Company);

// Call program CLC Mile Rate          XF.
CALL PROGRAM(CLC Mile Rate          XF) ('PDELXFR');
PARAMETER(LCL.Shipping_Company);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(PAR.Carrier_Broker);
PARAMETER(CTL.Total_Load_Miles);
PARAMETER(PAR.Unused_Mile_Rate_1);
PARAMETER(LCL.Ship_To_State_Code);

// CTL.Total Weight = PAR.Total Weight
CTL.Total_Load_Order_Weight = PAR.Total_Load_Order_Weight;

// CTL.Maximum Miles = PAR.Maximum Miles
CTL.Maximum_Miles = PAR.Maximum_Miles;

// CTL.Rate Per Stop = PAR.Rate Per Stop
CTL.Unused_Rate_Per_Stop = PAR.Unused_Rate_Per_Stop;

//?** Carrier Rate:
// CTL.Unused Mile Rate 1 = PAR.Unused Mile Rate 1
CTL.Unused_Mile_Rate_1 = PAR.Unused_Mile_Rate_1;

// CTL.Bulk Rate = LCL.Bulk Rate
CTL.Bulk_Rate = LCL.Bulk_Rate;

// PAR.Stop/Drop = CON.*ZERO
PAR.Stop_Drop = *ZERO;

// PAR.@Rated Freight = CON.*ZERO
PAR.@Rated_Freight = *ZERO;

//?Pounds/Miles/Ton computation
CASE;

// IF CTL.Flat Amount is GT Zero
IF CTL.Flat_Amount > *ZERO;

//?** Flat amount from Load Header takes precedence in calcs - DLY029 LJB
// PGM.*Synon (15,5) work field = CON.*ZERO
PGM.*Synon_155_work_field = *ZERO;

// CTL.Total Base Cost = CTL.Flat Amount
CTL.Total_Base_Cost = CTL.Flat_Amount;

//?Pounds/Miles/Ton computation
// IF LCL.Destination City NE LCL.Ship To State Code
IF LCL.Destination_City <> LCL.Ship_To_State_Code;

// AND LCL.Flat Amount is GT Zero
AND LCL.Flat_Amount > *ZERO;

//?** City calcs                            dly029 07/16/2007 ljb
CASE;

// IF CTL.CDR Unit of Measure is Flat
IF CTL.CDR_Unit_of_Measure = 'FL';

//?** Default in the Flat Rate Amount from Carrier Dest Rates
// CTL.Freight Rate USR = CON.*ZERO
CTL.Freight_Rate_USR = *ZERO;

// CTL.Flat Amount = LCL.Flat Rate
CTL.Flat_Amount = LCL.Flat_Rate;

// PGM.*Synon (15,5) work field = LCL.Flat Rate
PGM.*Synon_155_work_field = LCL.Flat_Rate;

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

//?** City calcs                            dly029 07/16/2007 ljb
// IF CTL.CDR Unit of Measure is Mile
IF CTL.CDR_Unit_of_Measure = 'ML';

//?** Replace Carrier Rate with Flat Rate Amount
// CTL.Unused Mile Rate 1 = LCL.Flat Rate
CTL.Unused_Mile_Rate_1 = LCL.Flat_Rate;

//?** ctl.total load miles may have override miles in it     E00207
// PGM.*Synon (15,5) work field = CTL.Total Load Miles * CTL.Unused Mile Rate 1 *Rounded
PGM.*Synon_155_work_field = CTL.Total_Load_Miles * CTL.Unused_Mile_Rate_1 'H';

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?Pounds/Miles/Ton computation
// IF LCL.Destination City EQ LCL.Ship To State Code
IF LCL.Destination_City = LCL.Ship_To_State_Code;

// AND LCL.Freight Rate USR NE WRK.ZERO
AND LCL.Freight_Rate_USR <> WRK.ZERO;

//?** State to State calcs
CASE;

// IF CTL.CDR Unit of Measure is Flat
IF CTL.CDR_Unit_of_Measure = 'FL';

// CTL.Freight Rate USR = LCL.Freight Rate USR
CTL.Freight_Rate_USR = LCL.Freight_Rate_USR;

// PGM.*Synon (15,5) work field = LCL.Freight Rate USR
PGM.*Synon_155_work_field = LCL.Freight_Rate_USR;

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

//?** State to State calcs
// IF CTL.CDR Unit of Measure is Mile
IF CTL.CDR_Unit_of_Measure = 'ML';

//?** Replace Carrier Rate with State Freight Rate Amount
// CTL.Unused Mile Rate 1 = LCL.Freight Rate USR
CTL.Unused_Mile_Rate_1 = LCL.Freight_Rate_USR;

// CTL.Freight Rate USR = LCL.Freight Rate USR
CTL.Freight_Rate_USR = LCL.Freight_Rate_USR;

//?** ctl.total load miles may have override miles in it     E00207
// PGM.*Synon (15,5) work field = CTL.Total Load Miles * CTL.Unused Mile Rate 1 *Rounded
PGM.*Synon_155_work_field = CTL.Total_Load_Miles * CTL.Unused_Mile_Rate_1 'H';

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?Pounds/Miles/Ton computation
// IF CTL.Allocate Pounds/Miles is Miles
IF CTL.Allocate_Pounds_Miles = 'M';

EXECUTE FUNCTION(RTV Shipping Co        RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1695057;
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(LCL.Shipping_Company);

// Call program CLC Mile Rate          XF.
CALL PROGRAM(CLC Mile Rate          XF) ('PDELXFR');
PARAMETER(LCL.Shipping_Company);
PARAMETER(PAR.Ship_From_Warehouse);
PARAMETER(PAR.Carrier_Broker);
PARAMETER(CTL.Total_Load_Miles);
PARAMETER(PAR.Unused_Mile_Rate_1);
PARAMETER(LCL.Ship_To_State_Code);

// CTL.Unused Mile Rate 1 = PAR.Unused Mile Rate 1
CTL.Unused_Mile_Rate_1 = PAR.Unused_Mile_Rate_1;

//?Calc from Region Rate or State Rate
CASE;

// IF CTL.Freight Rate USR is Equal to Zero
IF CTL.Freight_Rate_USR = *ZERO;

CASE;

// IF LCL.CDR Unit of Measure is Mile
IF LCL.CDR_Unit_of_Measure = 'ML';

// AND LCL.Flat Rate is GT Zero
AND LCL.Flat_Rate > *ZERO;

//?** ctl.total load miles may have override miles in it     E00207
// PGM.*Synon (15,5) work field = CTL.Total Load Miles * LCL.Flat Rate *Rounded
PGM.*Synon_155_work_field = CTL.Total_Load_Miles * LCL.Flat_Rate 'H';

// CTL.Unused Mile Rate 1 = LCL.Flat Rate
CTL.Unused_Mile_Rate_1 = LCL.Flat_Rate;

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Synon (15,5) work field = CTL.Total Load Miles * CTL.Unused Mile Rate 1 *Rounded
PGM.*Synon_155_work_field = CTL.Total_Load_Miles * CTL.Unused_Mile_Rate_1 'H';

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?Calc from Region Rate or State Rate
// IF *OTHERWISE
IF *OTHERWISE;

//?TRF015 RMC 11/3/6 new calc
//?** ctl.total load miles may have override miles in it     E00207
// PGM.*Synon (15,5) work field = CTL.Total Load Miles * CTL.Freight Rate USR *Rounded
PGM.*Synon_155_work_field = CTL.Total_Load_Miles * CTL.Freight_Rate_USR 'H';

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

ENDIF;

//?Pounds/Miles/Ton computation
//?Pounds/Miles/Ton computation
// IF CTL.Allocate Pounds/Miles is Ton
IF CTL.Allocate_Pounds_Miles = 'T';

// Synon (15,5) work field =       * Allocate Ton
PGM.*Synon_155_work_field = ( CTL.Total_Load_Order_Weight / 2000 'H' ) * CTL.Bulk_Rate             +
 'H';

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

//?Pounds/Miles/Ton computation
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Synon (15,5) work field = CON.*ZERO
PGM.*Synon_155_work_field = *ZERO;

// CTL.Total Base Cost = PGM.*Synon (15,5) work field
CTL.Total_Base_Cost = PGM.*Synon_155_work_field;

// Send error message - 'Value Required'
ERROR(USR1852);
MSGPARM(CTL.Allocate_Pounds_Miles);

ENDIF;

//?Remove Order freight for Elberton.
CASE;

// IF CTL.Flat Amount GE PAR.Order Freight  USR
IF CTL.Flat_Amount >= PAR.Order_Freight_USR;

// Remove order freight ELB
CTL.Total_Base_Cost_USR = CTL.Total_Base_Cost - PAR.Order_Freight_USR;

//?Remove Order freight for Elberton.
// IF *OTHERWISE
IF *OTHERWISE;

// Remove Order Freight ELB
CTL.Total_Base_Cost_USR = CTL.Total_Base_Cost - CTL.Flat_Amount;

ENDIF;

// CTL.Rated Freight = CTL.Total Base Cost
CTL.Rated_Freight = CTL.Total_Base_Cost;

// CTL.Rated Freight USR = CTL.Total Base Cost  USR
CTL.Rated_Freight_USR = CTL.Total_Base_Cost_USR;

//?Reload if flat rate, allocation or total miles have changed
CASE;

// IF PAR.Flat Amount NE CTL.Flat Amount
IF PAR.Flat_Amount <> CTL.Flat_Amount;

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

//?Reload if flat rate, allocation or total miles have changed
// IF PAR.Allocate Pounds/Miles NE CTL.Allocate Pounds/Miles
IF PAR.Allocate_Pounds_Miles <> CTL.Allocate_Pounds_Miles;

//?OMS186:  only set for update if flat amount not entered  PLL 2/97
CASE;

// IF PAR.Flat Amount EQ WRK.ZERO
IF PAR.Flat_Amount = WRK.ZERO;

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

ENDIF;

//?Reload if flat rate, allocation or total miles have changed
// IF PAR.Total Load Miles NE CTL.Total Load Miles
IF PAR.Total_Load_Miles <> CTL.Total_Load_Miles;

// PAR.USR Update Flag = CND.Yes
PAR.USR_Update_Flag = 'Y';

//?Reload if flat rate, allocation or total miles have changed
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?*******************
// CTL.USR Display field = CND.no
CTL.USR_Display_field = 'N';

//?TRF015 RMC 11/3/6 Use Carrier Minimum Charge if flat amt=0 and ...
CASE;

// IF CTL.Flat Amount is EQ Zero
IF CTL.Flat_Amount = 0;

//?Minimim charge is found for carrier
CASE;

// IF CTL.CFC Charge Amount is GT Zero
IF CTL.CFC_Charge_Amount > *ZERO;

//?and Rated Freight is < minimum charge
CASE;

// IF CTL.Rated Freight LT CTL.CFC Charge Amount
IF CTL.Rated_Freight < CTL.CFC_Charge_Amount;

// CTL.Rated Freight = CTL.CFC Charge Amount
CTL.Rated_Freight = CTL.CFC_Charge_Amount;

// CTL.Total Base Cost  USR = CTL.CFC Charge Amount
CTL.Total_Base_Cost_USR = CTL.CFC_Charge_Amount;

// CTL.Rated Freight USR = CTL.CFC Charge Amount
CTL.Rated_Freight_USR = CTL.CFC_Charge_Amount;

// CTL.USR Display field = CND.yes
CTL.USR_Display_field = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?*******************
//?OVERRIDE Rated Freight: Power Only Load
CASE;

// IF CTL.Flat Amount is EQ Zero
IF CTL.Flat_Amount = 0;

CASE;

// IF CTL.LH Power Only Load is Yes
IF CTL.LH_Power_Only_Load = 'Y';

// CTL.Rated Freight = CON.*ZERO
CTL.Rated_Freight = *ZERO;

// CTL.Total Base Cost = CON.*ZERO
CTL.Total_Base_Cost = *ZERO;

// CTL.Total Base Cost  USR = CON.*ZERO
CTL.Total_Base_Cost_USR = *ZERO;

// CTL.Rated Freight USR = CON.*ZERO
CTL.Rated_Freight_USR = *ZERO;

// CTL.USR Display field = CND.yes
CTL.USR_Display_field = 'Y';

ENDIF;

ENDIF;

//?*******************
// PAR.Allocate Pounds/Miles = CTL.Allocate Pounds/Miles
PAR.Allocate_Pounds_Miles = CTL.Allocate_Pounds_Miles;

// PAR.Flat Amount = CTL.Flat Amount
PAR.Flat_Amount = CTL.Flat_Amount;

//?** Only update total load miles if override miles is zeros  E00207
CASE;

// IF PAR.Override Total Load Miles is Not Entered
IF PAR.Override_Total_Load_Miles = *ZERO;

// PAR.Total Load Miles = CTL.Total Load Miles
PAR.Total_Load_Miles = CTL.Total_Load_Miles;

ENDIF;

// PAR.Rated Freight = CTL.Rated Freight
PAR.Rated_Freight = CTL.Rated_Freight;

// CTL.Name = PAR.Name
CTL.Name = PAR.Name;

//?USER: Validate subfile record fields

//?CTL Flat Amt or type of alloc have changed
CASE;

// IF PAR.USR Update Flag is Yes
IF PAR.USR_Update_Flag = 'Y';

EXECUTE FUNCTION(RTV Order Type         RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1564834;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(PAR.Order_Type_Sales);

//?Retrieve total freight entered on Order Header Financial  ELB Load Plan
EXECUTE FUNCTION(Rtv Order Freight ELB  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1568402;
PARAMETER(CTL.Load_ID);
PARAMETER(PAR.Order_Freight_USR);
PARAMETER(WRK.Total_Weight_Work);

//?If sample order or order header has freight, rated freight <>0 ELB Load Pl
CASE;

// IF RCD.Order Freight  USR is Not Zero
IF RCD.Order_Freight_USR <> *ZERO;

// OR PAR.Order Type - Sales is Sample Order
OR PAR.Order_Type_Sales = 'SA';

// RCD.Rated Freight = RCD.Freight Misc. Charge
RCD.Rated_Freight = RCD.Freight_Misc_Charge;

//?If sample order or order header has freight, rated freight <>0 ELB Load Pl
// IF *OTHERWISE
IF *OTHERWISE;

//?Stop break
CASE;

// IF RCD.Stop/Drop NE PAR.Stop/Drop
IF RCD.Stop_Drop <> PAR.Stop_Drop;

// Call program CLC Stop Totals        XF.
CALL PROGRAM(CLC Stop Totals        XF) ('PDJKXFR');
PARAMETER(PAR.Load_ID);
PARAMETER(RCD.Stop_Drop);
PARAMETER(PAR.USR_Orders_on_Stop);
PARAMETER(PAR.USR_Stop_Total_Weight);
PARAMETER(WRK.Numeric_Field_Not_Needed);

// PAR.Stop/Drop = RCD.Stop/Drop
PAR.Stop_Drop = RCD.Stop_Drop;

ENDIF;

//?Stop charge
CASE;

// IF CTL.Flat Amount NE WRK.ZERO
IF CTL.Flat_Amount <> WRK.ZERO;

// PAR.Freight Stop Charge = CON.*ZERO
PAR.Freight_Stop_Charge = *ZERO;

//?Stop charge
// IF RCD.Stop/Drop EQ PAR.@Number to Rank
IF RCD.Stop_Drop = PAR.@Number_to_Rank;

// PAR.Freight Stop Charge = CON.*ZERO
PAR.Freight_Stop_Charge = *ZERO;

//?Stop charge
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Freight Stop Charge = CTL.Rate Per Stop / PAR.USR Orders on Stop *Rounded
PAR.Freight_Stop_Charge = CTL.Unused_Rate_Per_Stop / PAR.USR_Orders_on_Stop 'H';

ENDIF;

// RCD.Freight Stop Charge = PAR.Freight Stop Charge
RCD.Freight_Stop_Charge = PAR.Freight_Stop_Charge;

//?Compute rated freight
DO;

//?Compute ratio
CASE;

// IF CTL.Total Weight Work EQ WRK.ZERO
IF CTL.Total_Weight_Work = WRK.ZERO;

// PAR.@Percent 9/6 = CON.*ZERO
PAR.@Percent_9_6 = *ZERO;

//?Compute ratio
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.@Percent 9/6 = RCD.USR Order Weight / CTL.Total Weight Work *Rounded
PAR.@Percent_9_6 = RCD.USR_Order_Weight / CTL.Total_Weight_Work 'H';

ENDIF;

// Synon (17,5) work field =       * Compute Rated Freight
PGM.*Synon_175_work_field = ( ( PAR.@Percent_9_6 * CTL.Total_Base_Cost_USR 'H' )                   +
 + RCD.Freight_Misc_Charge ) + PAR.Freight_Stop_Charge;

ENDDO;

// RCD.Rated Freight = CON.1 * PGM.*Synon (17,5) work field *Rounded
RCD.Rated_Freight = 1 * PGM.*Synon_175_work_field 'H';

// PAR.@Rated Freight = PAR.@Rated Freight + RCD.Rated Freight
PAR.@Rated_Freight = PAR.@Rated_Freight + RCD.Rated_Freight;

//?Adjust last detail if necessary
CASE;

// IF RCD.Stop/Drop Sequence Number EQ PAR.Stop/Drop Sequence Number
IF RCD.Stop_Drop_Sequence_Number = PAR.Stop_Drop_Sequence_Number;

//?Adjust last load detail's rated freight if necessary
CASE;

// IF PAR.@Rated Freight NE CTL.Rated Freight USR
IF PAR.@Rated_Freight <> CTL.Rated_Freight_USR;

// WRK.Adjustment Amount = CTL.Rated Freight USR - PAR.@Rated Freight
WRK.Adjustment_Amount = CTL.Rated_Freight_USR - PAR.@Rated_Freight;

// RCD.Rated Freight = RCD.Rated Freight + WRK.Adjustment Amount
RCD.Rated_Freight = RCD.Rated_Freight + WRK.Adjustment_Amount;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

//?CALC: Header function fields

// CTL.Text USR 5 = Condition name of CTL.LH Power Only Load
CTL.Text_USR_5 = RTVCND(CTL.LH_Power_Only_Load);

//?USER: Validate totals

// PAR.USR Update Flag = CND.No
PAR.USR_Update_Flag = *BLANK;

//?USER: Change header DBF record

EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1292149;
PARAMETER(CTL.Load_ID);
PARAMETER(CTL.Flat_Amount);
PARAMETER(CTL.Allocate_Pounds_Miles);
PARAMETER(CTL.Rated_Freight);
PARAMETER(WRK.Total_Miles);
PARAMETER(PAR.Override_Total_Load_Miles);
PARAMETER(CTL.LH_Power_Only_Load);

//?USER: Change detail DBF record

EXECUTE FUNCTION(CHG Recovery Freight   CH) TYPE(CHGOBJ) FILE(OMFLCPP)          AC1292118;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Stop_Drop_Sequence_Number);
PARAMETER(RCD.Miles_to_next_stop);
PARAMETER(RCD.Freight_Misc_Charge);
PARAMETER(RCD.Freight_Stop_Charge);
PARAMETER(RCD.Rated_Freight);

//?USER: Process detail record

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Execute function Clr Program Message Q  US.
EXECUTE FUNCTION(Clr Program Message Q  US) TYPE(EXCUSRSRC) ('USGDUFR');

// Execute function SET Off Indics 99,35,36US.
EXECUTE FUNCTION(SET Off Indics 99,35,36US) TYPE(EXCUSRSRC) ('PDN7UFR');

ENDIF;

// PAR.Flat Amount = CTL.Flat Amount
PAR.Flat_Amount = CTL.Flat_Amount;

// PAR.Allocate Pounds/Miles = CTL.Allocate Pounds/Miles
PAR.Allocate_Pounds_Miles = CTL.Allocate_Pounds_Miles;

//?** Only update total load miles if override miles is zeros   E00207
CASE;

// IF PAR.Override Total Load Miles is Not Entered
IF PAR.Override_Total_Load_Miles = *ZERO;

// PAR.Total Load Miles = CTL.Total Load Miles
PAR.Total_Load_Miles = CTL.Total_Load_Miles;

ENDIF;

// PAR.Rated Freight = CTL.Rated Freight
PAR.Rated_Freight = CTL.Rated_Freight;

EXECUTE FUNCTION(CHG Rated Freight      CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1293468;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Rated_Freight);

EXECUTE FUNCTION(Chg Adjust Rated Frt   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1294363;
PARAMETER(RCD.Load_ID);

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// IF *OTHERWISE
IF *OTHERWISE;

QUIT;

ENDIF;

