// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNTVXFR
// ?Date: 14.08.2025 Time: 03:46:31
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// PAR.Company Number = PAR.PFS Company Number
PAR.Company_Number = PAR.PFS_Company_Number;

// PAR.Order Number = PAR.PFS Order Number
PAR.Order_Number = PAR.PFS_Order_Number;

// PAR.Load ID = PAR.PFS Load ID
PAR.Load_ID = PAR.PFS_Load_ID;

EXECUTE FUNCTION(RTV Delete Ship Event  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1307170;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('04');
{
 //?USER: Process Data record

 EXECUTE FUNCTION(DLT Ship Event         DL) TYPE(DLTOBJ) FILE(OPEYCPP)          AC1307165;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Event_Number);
}


EXECUTE FUNCTION(RTV Next Event Number  RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1306444;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Event_Number);
{
 //?USER: Processing if Data record not found

 // PAR.Event Number = CON.1
 PAR.Event_Number = 1;

 //?USER: Process Data record

 // PAR.Event Number = DB1.Event Number
 PAR.Event_Number = DB1.Event_Number;

}


EXECUTE FUNCTION(RTV Event Code         RT) TYPE(RTVOBJ) FILE(OPEYCPP)          AC1314202;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Event_Number);
PARAMETER(LCL.Event_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?WI517 DN 10/04/23-Added 'Called From Program' as Input Parm.
//?- Added 'Send Email f/Failed API U' Output Parm.
EXECUTE FUNCTION(UPD Unship Ship Detail RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1419530;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Event_Code);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Trans_Contol_AS400_Plant);
PARAMETER(PAR.Billing_Activity_Type);
PARAMETER(PAR.Called_From_Program);
PARAMETER(PAR.Send_Email_f_Failed_API_U);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Confirmed
 IF DB1.Detail_Line_Status = 'R';

 // AND DB1.Item Code is Not Fuel Surcharge
 AND DB1.Item_Code <> 99400;

 // PAR.Detail Line Status = DB1.Detail Line Status
 PAR.Detail_Line_Status = DB1.Detail_Line_Status;

 // PAR.Price Audit = DB1.Price Audit
 PAR.Price_Audit = DB1.Price_Audit;

 // PAR.Price Audit Reason Code = DB1.Price Audit Reason Code
 PAR.Price_Audit_Reason_Code = DB1.Price_Audit_Reason_Code;

 //?If qty and weight are zero then make price audit "N".
 CASE;

 // IF DB1.Quantity Shipped Total is Equal to zero
 IF DB1.Quantity_Shipped_Total = *ZERO;

 // AND DB1.Weight Shipped Total is Equal to zero
 AND DB1.Weight_Shipped_Total = *ZERO;

 // PAR.Price Audit = CND.Needs Price Audit
 PAR.Price_Audit = 'N';

 // PAR.Price Audit Reason Code = CND.Substitution
 PAR.Price_Audit_Reason_Code = 'SUB';

 ENDIF;

 //?Set Quantity/Weight shipped to 0 if this is a Plant order
 CASE;

 // IF PAR.Trans Contol AS400/Plant is Plant
 IF PAR.Trans_Contol_AS400_Plant = 'P';

 // PAR.Quantity Shipped Total = CON.*ZERO
 PAR.Quantity_Shipped_Total = *ZERO;

 // PAR.Weight Shipped Total = CON.*ZERO
 PAR.Weight_Shipped_Total = *ZERO;

 //?Set Quantity/Weight shipped to 0 if this is a Plant order
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Quantity Shipped Total = DB1.Quantity Shipped Total
 PAR.Quantity_Shipped_Total = DB1.Quantity_Shipped_Total;

 // PAR.Weight Shipped Total = DB1.Weight Shipped Total
 PAR.Weight_Shipped_Total = DB1.Weight_Shipped_Total;

 ENDIF;

 //?Reverse Issue
 CASE;

 // IF DB1.Quantity Shipped Total is not equal zero
 IF DB1.Quantity_Shipped_Total <> *ZERO;

 // OR DB1.Weight Shipped Total is Not equal zero
 OR DB1.Weight_Shipped_Total <> *ZERO;

 CASE;

 // IF PAR.Billing Activity Type is Warehouse Transfer
 IF PAR.Billing_Activity_Type = '4';

 EXECUTE FUNCTION(Rtv Default Warehouse  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1323141;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.USR_Warehouse_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?12/04/06 PKD Added Inter-Plant Transfer Processing.
 EXECUTE FUNCTION(Rtv Warehouse SHP     RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1801521;
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(LCL.Trans_Contol_AS400_Plant);
 PARAMETER(LCL.Warehouse_Location);
 PARAMETER(LCL.Shipping_Company);
 PARAMETER(LCL.Accounting_Company);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Inter-Plant Transfer?
 CASE;

 // IF LCL.Warehouse Location is Internal (Plant)
 IF LCL.Warehouse_Location = 'I';

 // AND LCL.WHS Live w/Carlisle is Yes
 AND LCL.WHS_Live_with_Carlisle = 'Y';

 // PAR.Inter-Plant Transfer USR = CND.Yes
 PAR.Inter_Plant_Transfer_USR = 'Y';

 //?Inter-Plant Transfer?
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Inter-Plant Transfer USR = CND.No
 PAR.Inter_Plant_Transfer_USR = 'N';

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Inter-Plant Transfer USR = CND.No
 PAR.Inter_Plant_Transfer_USR = 'N';

 ENDIF;

 //?WI517 DN 10/04/23-Added 'Called From Program' as Input Parm.
 //?- Added 'Send Email f/Failed API U' Output Parm.
 EXECUTE FUNCTION(UPD Inv From Unship    RT) TYPE(RTVOBJ) FILE(OMFNCPP)          AC1477203;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.U_M_Ordered);
 PARAMETER(PAR.Billing_Activity_Type);
 PARAMETER(PAR.USR_Warehouse_Code);
 PARAMETER(PAR.Inter_Plant_Transfer_USR);
 PARAMETER(PAR.Called_From_Program);
 PARAMETER(LCL.Send_Email_f_Failed_API_U);
 {
  //?USER: Initialize routine

  // PAR.First Time Flag = CND.Yes
  PAR.First_Time_Flag = 'Y';

  // PAR.Quantity Shipped Total = CON.*ZERO
  PAR.Quantity_Shipped_Total = *ZERO;

  // PAR.Weight Shipped Total = CON.*ZERO
  PAR.Weight_Shipped_Total = *ZERO;

  // PAR.Weight Billed = CON.*ZERO
  PAR.Weight_Billed = *ZERO;

  // PAR.Shift Number = CON.1
  PAR.Shift_Number = 1;

  // Call program RTV System Date/Time   UP.
  CALL PROGRAM(RTV System Date/Time   UP) ('PDGFUPC');
  PARAMETER(LCL.Current_System_Date);
  PARAMETER(LCL.Current_System_Time);

  //?WI517 DN 10/04/23-Initialize Flags.
  // LCL.API was Called? U = CND.No
  LCL.API_was_Called_U = 'N';

  // LCL.Inventory Updated USR = CND.No
  LCL.Inventory_Updated_USR = 'N';

  // LCL.First Time Through USR = CND.Yes
  LCL.First_Time_Through_USR = 'Y';

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?Set production date for break usage & rtv item info
  CASE;

  // IF PAR.First Time Flag is Yes
  IF PAR.First_Time_Flag = 'Y';

  // PAR.Production Date = DB1.Production Date
  PAR.Production_Date = DB1.Production_Date;

  // PAR.Label Date = DB1.Label Date
  PAR.Label_Date = DB1.Label_Date;

  EXECUTE FUNCTION(Rtv Base Values        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1125011;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Description_Line_One);
  PARAMETER(PAR.Description_Line_Two);
  PARAMETER(PAR.UOM_Primary);
  PARAMETER(PAR.Conversion_Factor_1);
  PARAMETER(PAR.Operation_Factor_1);
  PARAMETER(PAR.UOM_Second);
  PARAMETER(PAR.Conversion_Factor_2);
  PARAMETER(PAR.Operation_Factor_2);
  PARAMETER(PAR.UOM_Third);
  PARAMETER(PAR.UOM_Pricing);
  PARAMETER(PAR.Unit_Weight);
  PARAMETER(PAR.Production_Date_Control);
  PARAMETER(PAR.Catch_Weight_Status);
  PARAMETER(PAR.Fresh_Chilling_Time);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Set unit of measure for cost
  CASE;

  // IF PAR.Catch Weight Status is yes
  IF PAR.Catch_Weight_Status = 'Y';

  // PAR.U/M - Cost = CND.Pounds
  PAR.UOM_Cost = 'LB';

  //?Set unit of measure for cost
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.U/M - Cost = PAR.U/M - Primary
  PAR.UOM_Cost = PAR.UOM_Primary;

  ENDIF;

  // WRK.Order Number Alpha = CVTVAR(PAR.Order Number)
  WRK.Order_Number_Alpha = CVTVAR(PAR.Order_Number);

  // WRK.Description 14A      USR = CON.Unship Order
  WRK.Description_14A_USR = 'Unship Order';

  // PAR.Description = CONCAT(WRK.Description 14A      USR,WRK.Order Number Alpha,CON
  PAR.Description = WRK.Description_14A_USR + WRK.Order_Number_Alpha (1);

  // PAR.First Time Flag = CND.NO
  PAR.First_Time_Flag = 'N';

  ENDIF;

  //?When production date changes update inventory files
  CASE;

  // IF PAR.Production Date NE DB1.Production Date
  IF PAR.Production_Date <> DB1.Production_Date;

  CASE;

  // IF PAR.Billing Activity Type is Invoice
  IF PAR.Billing_Activity_Type = '1';

  //?07/07/23 DN WI517-Added 'Upd Both Legacy & WIM USR=Y'.
  //?  Added 'Inventory Updated USR', 'API was Called? U' &
  //?  'Called From Program' Parms.
  // Call program Upd Balances Issue/Adj XF.
  CALL PROGRAM(Upd Balances Issue/Adj XF) ('PDQRXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('I');
  PARAMETER('IO');
  PARAMETER(LCL.Current_System_Date);
  PARAMETER(PAR.Production_Date);
  PARAMETER('OP');
  PARAMETER(PAR.Description);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.Label_Date);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER('Y');
  PARAMETER('Y');
  PARAMETER(LCL.Inventory_Updated_USR);
  PARAMETER(LCL.API_was_Called_U);
  PARAMETER(PAR.Called_From_Program);

  //?WI517 DN 10/04/23-Set 'Send Email f/Failed API U' for Failed API Call.
  CASE;

  // IF LCL.API was Called? U is Yes
  IF LCL.API_was_Called_U = 'Y';

  // AND LCL.Inventory Updated USR is No
  AND LCL.Inventory_Updated_USR = 'N';

  // AND LCL.First Time Through USR is Yes
  AND LCL.First_Time_Through_USR = 'Y';

  // LCL.First Time Through USR = CND.No
  LCL.First_Time_Through_USR = 'N';

  // PAR.Send Email f/Failed API U = CND.Yes
  PAR.Send_Email_f_Failed_API_U = 'Y';

  ENDIF;

  // IF PAR.Billing Activity Type is Warehouse Transfer
  IF PAR.Billing_Activity_Type = '4';

  //?WI517 DN 10/05/23-Added 'Inventory Updated USR', 'API was Called? U'
  //?  & 'Called From Program' Parms.
  // Call program Upd Balances Transfer  XF.
  CALL PROGRAM(Upd Balances Transfer  XF) ('PDQTXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('T');
  PARAMETER('TW');
  PARAMETER(LCL.Current_System_Date);
  PARAMETER(PAR.Production_Date);
  PARAMETER('OP');
  PARAMETER(PAR.Description);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.Label_Date);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER('Y');
  PARAMETER(PAR.Inter_Plant_Transfer_USR);
  PARAMETER(LCL.Inventory_Updated_USR);
  PARAMETER(LCL.API_was_Called_U);
  PARAMETER(PAR.Called_From_Program);

  //?WI517 DN 10/05/23-Set 'Send Email f/Failed API U' for Failed API Call.
  CASE;

  // IF LCL.API was Called? U is Yes
  IF LCL.API_was_Called_U = 'Y';

  // AND LCL.Inventory Updated USR is No
  AND LCL.Inventory_Updated_USR = 'N';

  // AND LCL.First Time Through USR is Yes
  AND LCL.First_Time_Through_USR = 'Y';

  // LCL.First Time Through USR = CND.No
  LCL.First_Time_Through_USR = 'N';

  // PAR.Send Email f/Failed API U = CND.Yes
  PAR.Send_Email_f_Failed_API_U = 'Y';

  ENDIF;

  ENDIF;

  // PAR.Production Date = DB1.Production Date
  PAR.Production_Date = DB1.Production_Date;

  EXECUTE FUNCTION(RTV Label Date         RT) TYPE(RTVOBJ) FILE(CAB1REP)          AC1479448;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Label_Date);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?If item bal detail doesn't exist, use manifest label date
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // PAR.Label Date = DB1.Label Date
  PAR.Label_Date = DB1.Label_Date;

  ENDIF;

  // PAR.Quantity Shipped Total = CON.*ZERO
  PAR.Quantity_Shipped_Total = *ZERO;

  // PAR.Weight Shipped Total = CON.*ZERO
  PAR.Weight_Shipped_Total = *ZERO;

  ENDIF;

  //?Add up quantity and weight for production date
  // PAR.Quantity Shipped Total = PAR.Quantity Shipped Total + DB1.Case Quantity
  PAR.Quantity_Shipped_Total = PAR.Quantity_Shipped_Total + DB1.Case_Quantity;

  // PAR.Weight Shipped Total = PAR.Weight Shipped Total + DB1.Case Weight
  PAR.Weight_Shipped_Total = PAR.Weight_Shipped_Total + DB1.Case_Weight;

  // PAR.Weight Billed = PAR.Weight Billed + DB1.Case Weight
  PAR.Weight_Billed = PAR.Weight_Billed + DB1.Case_Weight;

  //?USER: Exit processing

  //?Update inventory for last production date read
  CASE;

  // IF PAR.Billing Activity Type is Invoice
  IF PAR.Billing_Activity_Type = '1';

  //?07/07/23 DN WI517-Added 'Upd Both Legacy & WIM USR=Y'.
  //?  Added 'Inventory Updated USR', 'API was Called? U' &
  //?  'Called From Program' Parms.
  // Call program Upd Balances Issue/Adj XF.
  CALL PROGRAM(Upd Balances Issue/Adj XF) ('PDQRXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('I');
  PARAMETER('IO');
  PARAMETER(LCL.Current_System_Date);
  PARAMETER(PAR.Production_Date);
  PARAMETER('OP');
  PARAMETER(PAR.Description);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.Label_Date);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER('Y');
  PARAMETER('Y');
  PARAMETER(LCL.Inventory_Updated_USR);
  PARAMETER(LCL.API_was_Called_U);
  PARAMETER(PAR.Called_From_Program);

  //?WI517 DN 10/04/23-Set 'Send Email f/Failed API U' for Failed API Call.
  CASE;

  // IF LCL.API was Called? U is Yes
  IF LCL.API_was_Called_U = 'Y';

  // AND LCL.Inventory Updated USR is No
  AND LCL.Inventory_Updated_USR = 'N';

  // AND LCL.First Time Through USR is Yes
  AND LCL.First_Time_Through_USR = 'Y';

  // LCL.First Time Through USR = CND.No
  LCL.First_Time_Through_USR = 'N';

  // PAR.Send Email f/Failed API U = CND.Yes
  PAR.Send_Email_f_Failed_API_U = 'Y';

  ENDIF;

  //?Update inventory for last production date read
  // IF PAR.Billing Activity Type is Warehouse Transfer
  IF PAR.Billing_Activity_Type = '4';

  //?WI517 DN 10/05/23-Added 'Inventory Updated USR', 'API was Called? U'
  //?  & 'Called From Program' Parms.
  // Call program Upd Balances Transfer  XF.
  CALL PROGRAM(Upd Balances Transfer  XF) ('PDQTXFR');
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('T');
  PARAMETER('TW');
  PARAMETER(LCL.Current_System_Date);
  PARAMETER(PAR.Production_Date);
  PARAMETER('OP');
  PARAMETER(PAR.Description);
  PARAMETER(*BLANK);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Shift_Number);
  PARAMETER(PAR.Label_Date);
  PARAMETER(PAR.USR_Warehouse_Code);
  PARAMETER(PAR.Weight_Shipped_Total);
  PARAMETER(PAR.Quantity_Shipped_Total);
  PARAMETER('Y');
  PARAMETER(PAR.Inter_Plant_Transfer_USR);
  PARAMETER(LCL.Inventory_Updated_USR);
  PARAMETER(LCL.API_was_Called_U);
  PARAMETER(PAR.Called_From_Program);

  //?WI517 DN 10/05/23-Set 'Send Email f/Failed API U' for Failed API Call.
  CASE;

  // IF LCL.API was Called? U is Yes
  IF LCL.API_was_Called_U = 'Y';

  // AND LCL.Inventory Updated USR is No
  AND LCL.Inventory_Updated_USR = 'N';

  // AND LCL.First Time Through USR is Yes
  AND LCL.First_Time_Through_USR = 'Y';

  // LCL.First Time Through USR = CND.No
  LCL.First_Time_Through_USR = 'N';

  // PAR.Send Email f/Failed API U = CND.Yes
  PAR.Send_Email_f_Failed_API_U = 'Y';

  ENDIF;

  ENDIF;

 }

 //?WI517 DN 10/06/23-Set 'Send Email f/Failed API U' for Failed API Call.
 CASE;

 // IF LCL.Send Email f/Failed API U is Yes
 IF LCL.Send_Email_f_Failed_API_U = 'Y';

 // PAR.Send Email f/Failed API U = LCL.Send Email f/Failed API U
 PAR.Send_Email_f_Failed_API_U = LCL.Send_Email_f_Failed_API_U;

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(CHG for UnShip         CH) TYPE(CHGOBJ) FILE(OPBGWKP)          AC1204805;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
 PARAMETER('A');
 PARAMETER(PAR.Detail_Line_Status);
 PARAMETER(PAR.Price_Audit);
 PARAMETER(PAR.Price_Audit_Reason_Code);
 PARAMETER(PAR.Quantity_Shipped_Total);
 PARAMETER(PAR.Weight_Shipped_Total);
 PARAMETER(*ZERO);
 PARAMETER(DB1.Affect_Inventory_Status);
 PARAMETER(PAR.Event_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*JOB
   PAR.Job_Name = JOB.*JOB;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // DB1.Job Name = CON.UNSHIP
  DB1.Job_Name = 'UNSHIP';

 }

 ENDIF;

}


//?** FP1127 Use Load ID for Lot# if Ext Whse, not PFS, Lot Trk=Y
EXECUTE FUNCTION(Cnf Order Ship/Unship IF) TYPE(EXCINTFUN)                      AC1514467;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('U');
{
 //?Execute internal function

 EXECUTE FUNCTION(Cnf Order Ship/Unship RT) TYPE(RTVOBJ) FILE(PDL8CPP)           AC1513142;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.OIA_Allocation_Sts);
 {
  //?USER: Initialize routine

  // LCL.First Time Flag = CND.Yes
  LCL.First_Time_Flag = 'Y';

  //?USER: Process Data record

  // PAR.Quantity Loc Trans USR = CON.*ZERO
  PAR.Quantity_Loc_Trans_USR = *ZERO;

  // PAR.Weight Order 2 usr = CON.*ZERO
  PAR.Weight_Order_2_usr = *ZERO;

  //?1ST:  First time process
  CASE;

  // IF LCL.First Time Flag is Yes
  IF LCL.First_Time_Flag = 'Y';

  // PAR.Item Code = DB1.Item Code
  PAR.Item_Code = DB1.Item_Code;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  // PAR.Production Date = DB1.Production Date
  PAR.Production_Date = DB1.Production_Date;

  // PAR.Lot Number = DB1.Lot Number
  PAR.Lot_Number = DB1.Lot_Number;

  // PAR.Location Code = DB1.Location Code
  PAR.Location_Code = DB1.Location_Code;

  // PAR.Location Level = DB1.Location Level
  PAR.Location_Level = DB1.Location_Level;

  // LCL.First Time Flag = CND.NO
  LCL.First_Time_Flag = 'N';

  ENDIF;

  //?CHG: Item, Whs, PDte, Lot, Loc, Level
  CASE;

  // IF PAR.Item Code NE DB1.Item Code
  IF PAR.Item_Code <> DB1.Item_Code;

  // OR PAR.Warehouse Code NE DB1.Warehouse Code
  OR PAR.Warehouse_Code <> DB1.Warehouse_Code;

  // OR PAR.Production Date NE DB1.Production Date
  OR PAR.Production_Date <> DB1.Production_Date;

  // OR PAR.Lot Number NE DB1.Lot Number
  OR PAR.Lot_Number <> DB1.Lot_Number;

  // OR PAR.Location Code NE DB1.Location Code
  OR PAR.Location_Code <> DB1.Location_Code;

  // OR PAR.Location Level NE DB1.Location Level
  OR PAR.Location_Level <> DB1.Location_Level;

  CASE;

  // IF PAR.LLT Trans Qty is NE Zero
  IF PAR.LLT_Transaction_Qty <> *ZERO;

  EXECUTE FUNCTION(Crt Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1510270;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Order_Number);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(Upd Qty On-Hand,wgt   RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC2146712;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Location_Code);
    PARAMETER(PAR.WLT_Type_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
    PARAMETER(PAR.WLT_Type_Code);
    PARAMETER(PAR.WLT_Type_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
    PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
    1111111 'NONE' 'N' 1);

   }

   EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(LCL.Quality_Level);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Crt Item Loc          CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1505603;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.Location_Level);
   PARAMETER(PAR.Quantity_Loc_Trans_USR);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(PAR.ILL_Co_Packer_Lot_Num);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   PARAMETER(PAR.ILL_Unused_Qty_3);
   PARAMETER(PAR.ILL_Unused_Wgt_3);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   PARAMETER(PAR.ILL_Unused_Date_1);
   PARAMETER(PAR.ILL_Unused_Date_2);
   PARAMETER(PAR.ILL_Unused_Nbr_1);
   PARAMETER(PAR.ILL_Customer_Code);
   PARAMETER('A');
   PARAMETER(PAR.ILL_Unused_Sts_1);
   PARAMETER(PAR.ILL_Unused_Sts_2);
   PARAMETER(PAR.ILL_Unused_Sts_3);
   PARAMETER(PAR.Inv_Hold_Reason_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.ILL Item Qty On-Hand = DB1.ILL Item Qty On-Hand + PAR.Quantity Loc Trans USR
   PAR.ILL_Item_Qty_On_Hand = DB1.ILL_Item_Qty_On_Hand + PAR.Quantity_Loc_Trans_USR;

   // PAR.ILl Item Wgt On-Hand = DB1.ILl Item Wgt On-Hand + PAR.Weight Order 2 usr
   PAR.ILL_Item_Wgt_On_Hand = DB1.ILL_Item_Wgt_On_Hand + PAR.Weight_Order_2_usr;

   CASE;

   // IF PAR.ILL Item Qty On-Hand is GT Zero
   IF PAR.ILL_Item_Qty_On_Hand > *ZERO;

   EXECUTE FUNCTION(Chg Quantity On-Hn,wg CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC2146713;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Lot_Number);
   PARAMETER(DB1.Location_Code);
   PARAMETER(DB1.Location_Level);
   PARAMETER(PAR.ILL_Item_Qty_On_Hand);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Del Item Location     DL) TYPE(DLTOBJ) FILE(PDL5CPP)           AC1517026;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Lot_Number);
   PARAMETER(DB1.Location_Code);
   PARAMETER(DB1.Location_Level);
   EXECUTE FUNCTION(Del Item Balance Dtl  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1544110;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Quantity on Hand - U/M1 is Equal to zero
    IF DB1.Quantity_on_Hand_UOM1 = *ZERO;

    EXECUTE FUNCTION(Del Item Balance Dtl  DL) TYPE(DLTOBJ) FILE(CAB1REP)           AC1544111;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Production_Date);
    ENDIF;

   }

   ENDIF;

  }

  ENDIF;

  // PAR.Item Code = DB1.Item Code
  PAR.Item_Code = DB1.Item_Code;

  // PAR.Warehouse Code = DB1.Warehouse Code
  PAR.Warehouse_Code = DB1.Warehouse_Code;

  // PAR.Production Date = DB1.Production Date
  PAR.Production_Date = DB1.Production_Date;

  // PAR.Lot Number = DB1.Lot Number
  PAR.Lot_Number = DB1.Lot_Number;

  // PAR.Location Code = DB1.Location Code
  PAR.Location_Code = DB1.Location_Code;

  // PAR.Location Level = DB1.Location Level
  PAR.Location_Level = DB1.Location_Level;

  // PAR.LLT Trans Qty = CON.*ZERO
  PAR.LLT_Transaction_Qty = *ZERO;

  // PAR.LLT Trans Wgt = CON.*ZERO
  PAR.LLT_Transaction_Wgt = *ZERO;

  ENDIF;

  //?PRC:  Accumulate Quantity
  CASE;

  // IF PAR.OIA Allocation Sts is Shipped
  IF PAR.OIA_Allocation_Sts = 'S';

  // PAR.Quantity Loc Trans USR = DB1.OIA Alloc/Shipped Qty * CON.-1 *
  PAR.Quantity_Loc_Trans_USR = DB1.OIA_Alloc_Shipped_Qty * -1;

  // PAR.LLT Trans Qty = PAR.LLT Trans Qty + PAR.Quantity Loc Trans USR
  PAR.LLT_Transaction_Qty = PAR.LLT_Transaction_Qty + PAR.Quantity_Loc_Trans_USR;

  //?RMC 1/9/17 reduce weight too
  // PAR.Weight Order 2 usr = DB1.OIA Alloc/Shipped Wgt * CON.-1 *
  PAR.Weight_Order_2_usr = DB1.OIA_Alloc_Shipped_Wgt * -1;

  // PAR.LLT Trans Wgt = PAR.LLT Trans Wgt + PAR.Weight Order 2 usr
  PAR.LLT_Transaction_Wgt = PAR.LLT_Transaction_Wgt + PAR.Weight_Order_2_usr;

  EXECUTE FUNCTION(Chg Allocation Sts    CH) TYPE(CHGOBJ) FILE(PDL8CPP)           AC1513143;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Allocation_Seq_#);
  PARAMETER(PAR.OIA_Allocation_Sts);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  //?PRC:  Accumulate Quantity
  // IF PAR.OIA Allocation Sts is Unshipped
  IF PAR.OIA_Allocation_Sts = 'U';

  // PAR.LLT Trans Qty = PAR.LLT Trans Qty + DB1.OIA Alloc/Shipped Qty
  PAR.LLT_Transaction_Qty = PAR.LLT_Transaction_Qty + DB1.OIA_Alloc_Shipped_Qty;

  //?RMC 1/9/17 increase weight too
  // PAR.LLT Trans Wgt = PAR.LLT Trans Wgt + DB1.OIA Alloc/Shipped Wgt
  PAR.LLT_Transaction_Wgt = PAR.LLT_Transaction_Wgt + DB1.OIA_Alloc_Shipped_Wgt;

  EXECUTE FUNCTION(Chg Allocation Sts    CH) TYPE(CHGOBJ) FILE(PDL8CPP)           AC1513143;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Sequence_Number);
  PARAMETER(DB1.Order_Secondary_Line_Seq);
  PARAMETER(DB1.Allocation_Seq_#);
  PARAMETER(PAR.OIA_Allocation_Sts);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

  ENDIF;

  //?USER: Exit processing

  //?Do if qty> 0    ----RMC 2/15/06
  CASE;

  // IF PAR.LLT Trans Qty is NE Zero
  IF PAR.LLT_Transaction_Qty <> *ZERO;

  EXECUTE FUNCTION(Crt Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1510270;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER('S');
  PARAMETER(JOB.*Job_date);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(DB1.Order_Number);
  PARAMETER('P');
  PARAMETER(WRK.LTT_Unused_Sts_1);
  PARAMETER(WRK.LTT_Unused_Sts_2);
  {
   //?Execute internal function

   EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   {
    //?USER: Processing if Data record not found

    // PAR.LLT Sequence # = CON.1
    PAR.LLT_Sequence_Number = 1;

    //?USER: Process Data record

    // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
    PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

    QUIT;

   }

   EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.LLT_Transaction_Type);
   PARAMETER(PAR.LLT_Transaction_Date);
   PARAMETER(PAR.LLT_Sequence_Number);
   PARAMETER(PAR.LLT_Production_Date);
   PARAMETER(PAR.LLT_Transaction_Qty);
   PARAMETER(PAR.LLT_Transaction_Wgt);
   PARAMETER(PAR.LLT_Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.LLT_Location_Level);
   PARAMETER(PAR.Transfer_Warehouse_Code);
   PARAMETER(PAR.LLT_Transfer_Lot_Number);
   PARAMETER(PAR.Transfer_Location_Code);
   PARAMETER(PAR.LLT_Transfer_Loc_Level);
   PARAMETER(PAR.Order_Number);
   PARAMETER(PAR.LLT_Status);
   PARAMETER(PAR.LTT_Unused_Sts_1);
   PARAMETER(PAR.LTT_Unused_Sts_2);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

  }

  EXECUTE FUNCTION(Upd Qty On-Hand,wgt   RT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC2146712;
  PARAMETER(DB1.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.Production_Date);
  PARAMETER(PAR.Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.Location_Level);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Clc Loc Avail Shp Dte IF) TYPE(EXCINTFUN)                      AC1510130;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   {
    //?Execute internal function

    EXECUTE FUNCTION(Rtv Loc Type          RT) TYPE(RTVOBJ) FILE(PDL2REP)           AC1510129;
    PARAMETER(PAR.Warehouse_Code);
    PARAMETER(PAR.Location_Code);
    PARAMETER(PAR.WLT_Type_Code);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    EXECUTE FUNCTION(Rtv Chill Time        RT) TYPE(RTVOBJ) FILE(PDL3REP)           AC1510134;
    PARAMETER(PAR.WLT_Type_Code);
    PARAMETER(PAR.WLT_Type_Chill_Time);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    // PAR.ILL Avail Ship Date = PAR.Production Date + PAR.WLT Type Chill Time *DAYS
    PAR.ILL_Avail_Ship_Date = DATEINCR(PAR.Production_Date PAR.WLT_Type_Chill_Time 'DY'
    1111111 'NONE' 'N' 1);

   }

   EXECUTE FUNCTION(RTV Unit Weight        RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1298772;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(LCL.Quality_Level);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   EXECUTE FUNCTION(Crt Item Loc          CR) TYPE(CRTOBJ) FILE(PDL5CPP)           AC1505603;
   PARAMETER(PAR.Company_Number);
   PARAMETER(PAR.Item_Code);
   PARAMETER(PAR.Warehouse_Code);
   PARAMETER(PAR.Production_Date);
   PARAMETER(PAR.Lot_Number);
   PARAMETER(PAR.Location_Code);
   PARAMETER(PAR.Location_Level);
   PARAMETER(PAR.Quantity_Loc_Trans_USR);
   PARAMETER(PAR.ILL_Unit_Weight);
   PARAMETER(PAR.ILL_Co_Packer_Lot_Num);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   PARAMETER(PAR.ILL_Unused_Qty_3);
   PARAMETER(PAR.ILL_Unused_Wgt_3);
   PARAMETER(PAR.ILL_Avail_Ship_Date);
   PARAMETER(PAR.ILL_Unused_Date_1);
   PARAMETER(PAR.ILL_Unused_Date_2);
   PARAMETER(PAR.ILL_Unused_Nbr_1);
   PARAMETER(PAR.ILL_Customer_Code);
   PARAMETER('A');
   PARAMETER(PAR.ILL_Unused_Sts_1);
   PARAMETER(PAR.ILL_Unused_Sts_2);
   PARAMETER(PAR.ILL_Unused_Sts_3);
   PARAMETER(PAR.Inv_Hold_Reason_Code);
   PARAMETER(PAR.EDI_Status_1);
   PARAMETER(PAR.EDI_Status_2);
   PARAMETER(PAR.EDI_Status_3);
   PARAMETER(PAR.Record_Status);
   PARAMETER(PAR.Job_Time);
   PARAMETER(PAR.User_Id);
   PARAMETER(PAR.Job_Name);
   PARAMETER(PAR.Job_Date);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Record Status = CND.Active
     PAR.Record_Status = 'A';

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   //?USER: Process Data record

   // PAR.ILL Item Qty On-Hand = DB1.ILL Item Qty On-Hand + PAR.Quantity Loc Trans USR
   PAR.ILL_Item_Qty_On_Hand = DB1.ILL_Item_Qty_On_Hand + PAR.Quantity_Loc_Trans_USR;

   // PAR.ILl Item Wgt On-Hand = DB1.ILl Item Wgt On-Hand + PAR.Weight Order 2 usr
   PAR.ILL_Item_Wgt_On_Hand = DB1.ILL_Item_Wgt_On_Hand + PAR.Weight_Order_2_usr;

   CASE;

   // IF PAR.ILL Item Qty On-Hand is GT Zero
   IF PAR.ILL_Item_Qty_On_Hand > *ZERO;

   EXECUTE FUNCTION(Chg Quantity On-Hn,wg CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC2146713;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Lot_Number);
   PARAMETER(DB1.Location_Code);
   PARAMETER(DB1.Location_Level);
   PARAMETER(PAR.ILL_Item_Qty_On_Hand);
   PARAMETER(PAR.ILL_Item_Wgt_On_Hand);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
    PARAMETER(DB1.Job_Time);
    PARAMETER(DB1.User_Id);
    PARAMETER(DB1.Job_Name);
    PARAMETER(DB1.Job_Date);
    {
     //?Execute internal function

     // PAR.Job Time = JOB.*Job time
     PAR.Job_Time = JOB.*Job_time;

     // PAR.User Id = JOB.*USER
     PAR.User_Id = JOB.*USER;

     // PAR.Job Name = JOB.*PROGRAM
     PAR.Job_Name = JOB.*PROGRAM;

     // PAR.Job Date = JOB.*Job date
     PAR.Job_Date = JOB.*Job_date;

    }

   }

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(Del Item Location     DL) TYPE(DLTOBJ) FILE(PDL5CPP)           AC1517026;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   PARAMETER(DB1.Lot_Number);
   PARAMETER(DB1.Location_Code);
   PARAMETER(DB1.Location_Level);
   EXECUTE FUNCTION(Del Item Balance Dtl  RT) TYPE(RTVOBJ) FILE(CAB1REP)           AC1544110;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Warehouse_Code);
   PARAMETER(DB1.Production_Date);
   {
    //?USER: Process Data record

    CASE;

    // IF DB1.Quantity on Hand - U/M1 is Equal to zero
    IF DB1.Quantity_on_Hand_UOM1 = *ZERO;

    EXECUTE FUNCTION(Del Item Balance Dtl  DL) TYPE(DLTOBJ) FILE(CAB1REP)           AC1544111;
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Warehouse_Code);
    PARAMETER(DB1.Production_Date);
    ENDIF;

   }

   ENDIF;

  }

  ENDIF;

 }

}


// Call program CLC Tot Ord Val Ship   XF.
CALL PROGRAM(CLC Tot Ord Val Ship   XF) ('PDP1XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(WRK.USR_Order_Value);
PARAMETER(WRK.USR_Order_Weight);
PARAMETER(WRK.USR_Production);
PARAMETER(WRK.USR_Update_Flag);

EXECUTE FUNCTION(UPD Unship Load Status RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1369493;
PARAMETER(PAR.Load_ID);
{
 //?USER: Process Data record

 //?11/12/02  zero out actual ship date
 CASE;

 // IF DB1.Load Status is Shipped
 IF DB1.Load_Status = 'S';

 EXECUTE FUNCTION(CHG Load when UnshippedCH) TYPE(CHGOBJ) FILE(OMFJCPP)          AC1466438;
 PARAMETER(DB1.Load_ID);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Scheduled_Ship_Date);
 PARAMETER('L');
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

  // DB1.Job Name = JOB.*JOB
  DB1.Job_Name = JOB.*JOB;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

 }

 ENDIF;

}


EXECUTE FUNCTION(PFS Unship Order      RT) TYPE(RTVOBJ) FILE(OPBFCPP)           AC1745893;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.Event_Code);
{
 //?USER: Process Data record

 // LCL.Header Status Last = DB1.Header Status
 LCL.Header_Status_Last = DB1.Header_Status;

 // LCL.Header Status = CND.Available
 LCL.Header_Status = 'A';

 EXECUTE FUNCTION(CHG for Unship         CH) TYPE(CHGOBJ) FILE(OPBFCPP)          AC1307225;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(*ZERO);
 PARAMETER('N');
 PARAMETER(LCL.Header_Status);
 PARAMETER(LCL.Header_Status_Last);
 PARAMETER(DB1.Production_Hold);
 PARAMETER(PAR.Event_Code);
 PARAMETER(DB1.Modified_Flag);
 PARAMETER(DB1.A_R_order_Value_Total);
 PARAMETER(DB1.Billing_Activity_Type);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Set Date/Time Stamp.PgmIF) TYPE(EXCINTFUN)                     AC1425284;
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);
  {
   //?Execute internal function

   // PAR.Job Time = JOB.*Job time
   PAR.Job_Time = JOB.*Job_time;

   // PAR.User Id = JOB.*USER
   PAR.User_Id = JOB.*USER;

   // PAR.Job Name = JOB.*PROGRAM
   PAR.Job_Name = JOB.*PROGRAM;

   // PAR.Job Date = JOB.*Job date
   PAR.Job_Date = JOB.*Job_date;

  }

  // Call program TRG Order Hdr CHG Trig XT.
  CALL PROGRAM(TRG Order Hdr CHG Trig XT) ('PDW9XFR');
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Order_Number);
  PARAMETER(DB1.Order_Type_Sales);
  PARAMETER(DB1.AR_Customer_Number);
  PARAMETER(DB1.Ship_To_Customer);
  PARAMETER(DB1.Ship_To_Name);
  PARAMETER(DB1.Ship_To_Address_Line_1);
  PARAMETER(DB1.Ship_To_Address_Line_2);
  PARAMETER(DB1.Ship_To_Address_Line_3);
  PARAMETER(DB1.Ship_To_City);
  PARAMETER(DB1.Ship_To_State_Code);
  PARAMETER(DB1.Ship_To_Zip_Postal_Code);
  PARAMETER(DB1.Bill_to_Customer);
  PARAMETER(DB1.Bill_to_Name);
  PARAMETER(DB1.Bill_to_Address_Line_1);
  PARAMETER(DB1.Bill_to_Address_Line_2);
  PARAMETER(DB1.Bill_to_Address_Line_3);
  PARAMETER(DB1.Bill_to_City);
  PARAMETER(DB1.Bill_to_State_Code);
  PARAMETER(DB1.Bill_to_Zip_Postal_Code);
  PARAMETER(DB1.Customer_Purchase_Order_#);
  PARAMETER(DB1.Order_Date);
  PARAMETER(DB1.Requested_Ship_Date);
  PARAMETER(DB1.Actual_Shipped_Date);
  PARAMETER(DB1.Cancel_Date);
  PARAMETER(DB1.Terms_Code);
  PARAMETER(DB1.Special_Instructions);
  PARAMETER(DB1.Special_Instructions_2);
  PARAMETER(DB1.Carrier_Code);
  PARAMETER(DB1.Comment_Print_Acknowledge);
  PARAMETER(DB1.Comment_Print_Inv_Cr_Memo);
  PARAMETER(DB1.Comment_Print_Pick_Slip);
  PARAMETER(DB1.Comment_Print_Ship_Doc);
  PARAMETER(DB1.Reason_Code);
  PARAMETER(DB1.Order_in_Use);
  PARAMETER(DB1.Header_Status);
  PARAMETER(DB1.Header_Status_Last);
  PARAMETER(DB1.Order_Type_Print_Status);
  PARAMETER(DB1.Scheduled_Ship_Date);
  PARAMETER(DB1.User_Original_Entry);
  PARAMETER(DB1.Date_of_Original_Entry);
  PARAMETER(DB1.Order_Value_Total);
  PARAMETER(DB1.Order_Weight_Total);
  PARAMETER(DB1.Credit_Hold);
  PARAMETER(DB1.Production_Hold);
  PARAMETER(DB1.New_Customer_Hold);
  PARAMETER(DB1.Requested_Delivery_Date);
  PARAMETER(DB1.Requested_Delivery_Time);
  PARAMETER(DB1.Accounts_Receiv_Ent_1);
  PARAMETER(DB1.Accounts_Receiv_Ent_2);
  PARAMETER(DB1.Load_ID);
  PARAMETER(DB1.Absorbed_Freight_Rate_CWT);
  PARAMETER(DB1.Rated_Freight);
  PARAMETER(DB1.LTL_Flag);
  PARAMETER(DB1.Price_Audit);
  PARAMETER(DB1.Price_Status);
  PARAMETER(DB1.Shipping_Method);
  PARAMETER(DB1.Export_Status);
  PARAMETER(DB1.Palletize);
  PARAMETER(DB1.Shrink_Wrap);
  PARAMETER(DB1.Slip_Sheet);
  PARAMETER(DB1.Age_Code);
  PARAMETER(DB1.Reefer_Temperature);
  PARAMETER(DB1.Load_Type);
  PARAMETER(DB1.Attach_to_Invoice_Number);
  PARAMETER(DB1.Load_Plan_Order);
  PARAMETER(DB1.Print_Pick_Slip);
  PARAMETER(DB1.Resell_Reference_Number);
  PARAMETER(DB1.Special_Comment_1);
  PARAMETER(DB1.Special_Comment_2);
  PARAMETER(DB1.Affect_Auto_Accruals);
  PARAMETER(DB1.Sales_Route_Code);
  PARAMETER(DB1.Manager_Level_Code);
  PARAMETER(DB1.VP_Level_Code);
  PARAMETER(DB1.Attach_to_Order_Number);
  PARAMETER(DB1.Reason_for_Price_Audit);
  PARAMETER(DB1.Invoice_Number);
  PARAMETER(DB1.Invoice_Suffix);
  PARAMETER(DB1.Invoice_Date);
  PARAMETER(DB1.Event_Code);
  PARAMETER(DB1.Trans_Contol_AS400_Plant);
  PARAMETER(DB1.Modified_Flag);
  PARAMETER(DB1.A_R_order_Value_Total);
  PARAMETER(DB1.Billing_Activity_Type);
  PARAMETER(DB1.Block_Order_Flag);
  PARAMETER(DB1.Order_Certification_Flag);
  PARAMETER(DB1.Invoice_Order_Value_Tot);
  PARAMETER(DB1.Process_Sts_for_3C);
  PARAMETER(DB1.Order_Conf_Fax_Sts);
  PARAMETER(DB1.Manifest_Fax_Sts);
  PARAMETER(DB1.Invoice_Fax_Sts);
  PARAMETER(DB1.Transfer_in_Storage_Ind);
  PARAMETER(DB1.Email_Cust_On_Order_Ship);
  PARAMETER(DB1.Order_Emailed);
  PARAMETER(DB1.Export_Docs_Go_w_Driver);
  PARAMETER(DB1.Shipping_Temp_Code_C_F);
  PARAMETER(DB1.Broker_Order_Status);
  PARAMETER(DB1.Air_Freight_Order);
  PARAMETER(DB1.Order_Requires_Review);
  PARAMETER(DB1.OH_Load_Plan_Ready);
  PARAMETER(DB1.Export_USDA_Approved);
  PARAMETER(DB1.HPB_Ship_to_Warehouse);
  PARAMETER(DB1.OH_TF_Exempt_Code);
  PARAMETER(DB1.OH_Appt_Confirmation_Dt);
  PARAMETER(DB1.JPN_Invoice_Issuance_Date);
  PARAMETER(DB1.Load_Actual_Shipped_Date);
  PARAMETER(DB1.Load_BOL_Complete_Date);
  PARAMETER(DB1.Load_Truck_Departure_Date);
  PARAMETER(DB1.Maximum_Gross_Weight);
  PARAMETER(DB1.Time_of_Original_Entry);
  PARAMETER(DB1.OH_Appt_Confirmation_Tm);
  PARAMETER(DB1.Load_BOL_Complete_Time);
  PARAMETER(DB1.Load_Truck_Departure_Time);
  PARAMETER(DB1.Act_Frt_Reference_Amount);
  PARAMETER(DB1.Act_Non_Ref_Frt_Amount);
  PARAMETER(DB1.OH_Fuel_Surcharge_Amount);
  PARAMETER(DB1.OH_Total_Non_Ref_Frt_Amt);
  PARAMETER(DB1.OH_Total_Ref_Frt_Amt);
  PARAMETER(DB1.Claim_Number);
  PARAMETER(DB1.EDI_Status_1);
  PARAMETER(DB1.EDI_Status_2);
  PARAMETER(DB1.EDI_Status_3);
  PARAMETER(DB1.Job_Time);
  PARAMETER(DB1.User_Id);
  PARAMETER(DB1.Job_Name);
  PARAMETER(DB1.Job_Date);

 }

}


//?remove sched ship date as input. 12/10/14
EXECUTE FUNCTION(CHG Load Sts/ActShp   CH) TYPE(CHGOBJ) FILE(OMFJCPP)           AC2101287;
PARAMETER(PAR.Load_ID);
PARAMETER('L');
PARAMETER(*ZERO);
{
 //?USER: Processing before Data update

 // DB1.Job Time = JOB.*Job time
 DB1.Job_Time = JOB.*Job_time;

 // DB1.User Id = JOB.*USER
 DB1.User_Id = JOB.*USER;

 // DB1.Job Name = JOB.*JOB
 DB1.Job_Name = JOB.*JOB;

 // DB1.Job Date = JOB.*Job date
 DB1.Job_Date = JOB.*Job_date;

}


//?S00619 RMC 01/06/09 Del exp doc dtls
EXECUTE FUNCTION(Rtv & Dlt for Cancel  RT) TYPE(RTVOBJ) FILE(PDMSREP)           AC1612159;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Del Exp Doc Order Dtl  DL) TYPE(DLTOBJ) FILE(PDMSREP)          AC1524037;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(DB1.ED_Export_Document_Type);
 PARAMETER(DB1.Country_Code);
 PARAMETER(DB1.Order_Sequence_Number);
 PARAMETER(DB1.Order_Secondary_Line_Seq);
}


EXECUTE FUNCTION(UPD Err Transactions   RT) TYPE(RTVOBJ) FILE(CAB7CPP)          AC1482356;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(CHG Reason Code        CH) TYPE(CHGOBJ) FILE(CAB7CPP)          AC1482357;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(DB1.Inventory_Trans_ID);
 PARAMETER(DB1.Inventory_Trans_Type);
 PARAMETER(DB1.Transaction_Date_Code);
 PARAMETER(DB1.ITD_Sequence_Number);
 PARAMETER(DB1.Sequence_Number);
 PARAMETER(*BLANK);
 {
  //?USER: Processing before Data update

  //?01/29/02 PKD Do not change the Record Stamp per Tom Dye. This
  //?             causes inaccurate reporting on the Item Transaction
  //?             Journal.
 }

}


// PAR.PFS Process Status = CND.Processed
PAR.PFS_Process_Status = 1;

//?** Mark Previous Transactions with Process Status = 3 **
EXECUTE FUNCTION(Upd Detail -Unshipped RT) TYPE(RTVOBJ) FILE(PPBMCPP)           AC1768567;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Order_Number);
PARAMETER(PAR.PFS_Transaction_Date);
PARAMETER(PAR.PFS_Transaction_Time);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.PFS Transaction Date EQ PAR.PFS Transaction Date
 IF DB1.PFS_Transaction_Date = PAR.PFS_Transaction_Date;

 // AND DB1.PFS Transaction Time EQ PAR.PFS Transaction Time
 AND DB1.PFS_Transaction_Time = PAR.PFS_Transaction_Time;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg PrcSts/ErrRsn     CH) TYPE(CHGOBJ) FILE(PPBMCPP)           AC1736042;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Transaction_Date);
 PARAMETER(DB1.PFS_Transaction_Time);
 PARAMETER(DB1.PFS_Transaction_Seq);
 PARAMETER(DB1.PFS_Order_Number);
 PARAMETER(DB1.PFS_Order_Line_Item_Nbr);
 PARAMETER(DB1.PFS_Substitution_Line_Nbr);
 PARAMETER(3);
 PARAMETER('REOPN');
 ENDIF;

}


EXECUTE FUNCTION(Upd Status -ReOpn Trk RT) TYPE(RTVOBJ) FILE(PPBKCPP)           AC1768713;
PARAMETER(PAR.PFS_Company_Number);
PARAMETER(PAR.PFS_Load_ID);
PARAMETER(PAR.PFS_Transaction_Date);
PARAMETER(PAR.PFS_Transaction_Time);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.PFS Transaction Date EQ PAR.PFS Transaction Date
 IF DB1.PFS_Transaction_Date = PAR.PFS_Transaction_Date;

 // AND DB1.PFS Transaction Time EQ PAR.PFS Transaction Time
 AND DB1.PFS_Transaction_Time = PAR.PFS_Transaction_Time;

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(Chg PrcSts/ErrRsn     CH) TYPE(CHGOBJ) FILE(PPBKCPP)           AC1735978;
 PARAMETER(DB1.PFS_Company_Number);
 PARAMETER(DB1.PFS_Transaction_Date);
 PARAMETER(DB1.PFS_Transaction_Time);
 PARAMETER(DB1.PFS_Transaction_Seq);
 PARAMETER(3);
 PARAMETER('REOPN');
 ENDIF;

}


