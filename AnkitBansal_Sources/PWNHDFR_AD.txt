// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWNHDFR
// ?Date: 14.08.2025 Time: 02:57:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//? 6/08/2021 JBB SDD619 - Repayment by Business User
//?               P17058   Function created. Copied from WW Balance
//?                        to Kill (PKTJDFR).  This function only
//?                        shows a specific tattoo record.
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


// LCL.Held Over Records Y/N = CND.No
LCL.Held_Over_Records_Y_N = 'N';

//?USER: Initialize subfile control

// CTL.BOH Company Number = PAR.BOH Company Number
CTL.BOH_Company_Number = PAR.BOH_Company_Number;

// CTL.TRH Repayment ID = PAR.TRH Repayment ID
CTL.TRH_Repayment_ID = PAR.TRH_Repayment_ID;

// CTL.BOH Buy Order Number = PAR.BOH Buy Order Number
CTL.BOH_Buy_Order_Number = PAR.BOH_Buy_Order_Number;

// CTL.BOL Load Number = PAR.BOL Load Number
CTL.BOL_Load_Number = PAR.BOL_Load_Number;

// CTL.TH Tattoo Number = PAR.TH Tattoo Number
CTL.TH_Tattoo_Number = PAR.TH_Tattoo_Number;

// CTL.TH Kill Date = PAR.TH Kill Date
CTL.TH_Kill_Date = PAR.TH_Kill_Date;

//?First time processing
CASE;

// IF LCL.First Time Flag Usr is No
IF LCL.First_Time_Flag_Usr = 'N';

// CTL.CC Company Number = CTL.BOH Company Number
CTL.CC_Company_Number = CTL.BOH_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// LCL.First Time Flag Usr = CND.Yes
LCL.First_Time_Flag_Usr = 'Y';

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


// LCL.Company Value Code    USR = CND.HPE Receiving Prc Type
LCL.Company_Value_Code_USR = 'HPERCVBTH';

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(LCL.Company_Value_Code_USR);
PARAMETER(LCL.HPERCVTYPE_Alpha_Usr);

//?USER: Initialize subfile record from DBF record

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

//?only for specify kill date
CASE;

// IF DB1.TH Kill Date EQ CTL.TH Kill Date
IF DB1.TH_Kill_Date = CTL.TH_Kill_Date;

//?only for specify kill date
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?ONLY FOR SELECTED BALANCE OR ERROR RECORD, OR ALL
CASE;

// IF DB1.TH Kill Balancing Sts EQ CTL.TH Kill Balancing Sts
IF DB1.TH_Kill_Balancing_Sts = CTL.TH_Kill_Balancing_Sts;

//?ONLY FOR SELECTED BALANCE OR ERROR RECORD, OR ALL
// IF CTL.TH Kill Balancing Sts EQ WRK.Blank Usr 1 fld Usr
IF CTL.TH_Kill_Balancing_Sts = WRK.Blank_Usr_1_fld_Usr;

//?ONLY FOR SELECTED BALANCE OR ERROR RECORD, OR ALL
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?OMT:  Hog Class Type = Resale
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Only select Market, or subject
//?Do not select any resale hogs,
//?No resale hogs
CASE;

// IF DB1.TH Hog Class Type is Resale
IF DB1.TH_Hog_Class_Type = 'R';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Reverse Image Tattoo
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Check if there are any error for this tattoo, If so this routine
//?will check which error and flag field in reverse image.
EXECUTE FUNCTION(RTV Check for Error   RT) TYPE(RTVOBJ) FILE(PKB6CPP)           AB1111032;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(999999);
PARAMETER('H');
PARAMETER(RCD.Error_Type_1_Usr);
PARAMETER(RCD.Error_Type_2_Usr);
PARAMETER(RCD.Error_Type_3_Usr);
PARAMETER(RCD.Error_Type_4_Usr);
PARAMETER(RCD.Error_Type_5_Usr);
PARAMETER(WRK.Error_Type_Found);
PARAMETER(WRK.Error_Type_6_Usr);
PARAMETER(WRK.Error_Type_7_Usr);
{
 //?USER: Initialize routine

 // PAR.Error Type 1 Usr = CND.No
 PAR.Error_Type_1_Usr = 'N';

 // PAR.Error Type 2 Usr = CND.No
 PAR.Error_Type_2_Usr = 'N';

 // PAR.Error Type 3 Usr = CND.No
 PAR.Error_Type_3_Usr = 'N';

 // PAR.Error Type 4 Usr = CND.No
 PAR.Error_Type_4_Usr = 'N';

 // PAR.Error Type 5 Usr = CND.No
 PAR.Error_Type_5_Usr = 'N';

 // PAR.Error Type Found = CND.No
 PAR.Error_Type_Found = 'N';

 // PAR.Error Type 6 Usr = CND.No
 PAR.Error_Type_6_Usr = 'N';

 // PAR.Error Type 7 Usr = CND.No
 PAR.Error_Type_7_Usr = 'N';

 //?USER: Process Data record

 EXECUTE FUNCTION(Rtv Eval Val Error    RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1111051;
 PARAMETER(DB1.KV_Error_Code);
 PARAMETER(WRK.EV_Description);
 PARAMETER(WRK.EV_Minimum);
 PARAMETER(WRK.EV_Maximum);
 PARAMETER(WRK.EV_Type);
 {
  //?USER: Processing if Data record not found

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Description = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Minimum = *ZERO;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Maximum = *ZERO;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.EV_Type = *BLANK;

  QUIT;

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Check for Type of Error to Send back Flag
 CASE;

 // IF WRK.EV Type is Carcass Weights
 IF WRK.EV_Type = 'C';

 // PAR.Error Type 1 Usr = CND.Critical Error
 PAR.Error_Type_1_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is % Rule for Head Killed
 IF WRK.EV_Type = 'P';

 // PAR.Error Type 5 Usr = CND.Critical Error
 PAR.Error_Type_5_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is % Lean
 IF WRK.EV_Type = 'L';

 // PAR.Error Type 2 Usr = CND.Critical Error
 PAR.Error_Type_2_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Yield
 IF WRK.EV_Type = 'Y';

 // OR DB1.KV Error Code is Yield Parameter Error
 OR DB1.KV_Error_Code = 'YLD';

 // PAR.Error Type 3 Usr = CND.Critical Error
 PAR.Error_Type_3_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Missing Transaction
 IF WRK.EV_Type = 'B';

 // PAR.Error Type 4 Usr = CND.Critical Error
 PAR.Error_Type_4_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Backfat
 IF WRK.EV_Type = 'F';

 // PAR.Error Type 6 Usr = CND.Critical Error
 PAR.Error_Type_6_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 //?Check for Type of Error to Send back Flag
 // IF WRK.EV Type is Loin Eye
 IF WRK.EV_Type = 'E';

 // PAR.Error Type 7 Usr = CND.Critical Error
 PAR.Error_Type_7_Usr = 'Y';

 // PAR.Error Type Found = CND.Critical Error
 PAR.Error_Type_Found = 'Y';

 ENDIF;

}


CASE;

// IF RCD.Net Head Usr NE RCD.TH Head Killed
IF RCD.Net_Head_Usr <> RCD.TH_Head_Killed;

// RCD.Error Type 5 Usr = CND.Critical Error
RCD.Error_Type_5_Usr = 'Y';

ENDIF;

ENDIF;

CASE;

// IF DB1.TH Recalc Live Wgt is Greater than 0
IF DB1.TH_Recalc_Live_Wgt > *ZERO;

// RCD.Status 1 = CND.Yes
RCD.Status_1 = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Status 1 = CND.No
RCD.Status_1 = 'N';

ENDIF;

CASE;

// IF LCL.Held Over Records Y/N is Yes
IF LCL.Held_Over_Records_Y_N = 'Y';

CASE;

// IF RCD.TH Held Over is greater than 0
IF RCD.TH_Held_Over > *ZERO;

// OR RCD.TH Held Over Record is Yes
OR RCD.TH_Held_Over_Record = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.*CMD key is Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

CASE;

// IF CTL.*CMD key is CF08
IF CTL.*CMD_key = '08';

CASE;

// IF LCL.Held Over Records Y/N is Yes
IF LCL.Held_Over_Records_Y_N = 'Y';

// LCL.Held Over Records Y/N = CND.No
LCL.Held_Over_Records_Y_N = 'N';

// IF LCL.Held Over Records Y/N is No
IF LCL.Held_Over_Records_Y_N = 'N';

// LCL.Held Over Records Y/N = CND.Yes
LCL.Held_Over_Records_Y_N = 'Y';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?F21-Print Bal to Kill Report
CASE;

// IF CTL.*CMD key is Print List
IF CTL.*CMD_key = '21';

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Print Balance to Kill');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// WRK.Date Alpha USR = CVTVAR(CTL.TH Kill Date)
WRK.Date_Alpha_USR = CVTVAR(CTL.TH_Kill_Date);

// Execute command - 'SBM Prt Balance to Kill Report'
EXECUTE COMMAND(PRK0686);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(WRK.Date_Alpha_USR);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(CTL.TH_Schedule_Kill_Shift);

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

//?Get Producer name
//?Calculate Net Head
// RCD.Net Head Usr = RCD.TH Head Received - RCD.TH Yard Deads
RCD.Net_Head_Usr = RCD.TH_Head_Received - RCD.TH_Yard_Deads;

// RCD.Net Head Usr = RCD.Net Head Usr - RCD.TH Head Condemned
RCD.Net_Head_Usr = RCD.Net_Head_Usr - RCD.TH_Head_Condemned;

//?USER: Process subfile record (Pre-confirm)

// WRK.Requested by User to Bal = CND.No
WRK.Requested_by_User_to_Bal = 'N';

//?Subfile selection User
CASE;

// IF RCD.*SFLSEL NE WRK.Blank USR
IF RCD.*SFLSEL <> WRK.Blank_USR;

//?E9815 JBB  3/29/17  Check if company excluded from subfile option.
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER('XCOPAYHIST');
PARAMETER(LCL.Exclude_Flag);

// PAR.Bal to Kill Executed Y/N = CND.No
PAR.Bal_to_Kill_Executed_Y_N = 'N';

//?Valid Option
CASE;

//?Valid Option
// IF RCD.*SFLSEL is *Option 7 request
IF RCD.*SFLSEL = '7'/'7';

//?display historical avg
// Call program Dsp Prcdr Histrcl Avg DF.
CALL PROGRAM(Dsp Prcdr Histrcl Avg DF) ('PKT0DFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Valid Option
// IF RCD.*SFLSEL is Select Option 8
IF RCD.*SFLSEL = '8'/'8';

//?Display Error
// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Dsp Error             DF.
CALL PROGRAM(Dsp Error             DF) ('PKEUDFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(*ZERO);
PARAMETER('H');

//?Valid Option
//?Valid Option
// IF RCD.*SFLSEL is *Option 13 (Reusable)
IF RCD.*SFLSEL = '13';

//?Display Additional Tattoo Info
EXECUTE FUNCTION(Rtv Prdcr Name, Sts   RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1165413;
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(WRK.PD_Name);
PARAMETER(RCD.RS_Record_Status);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// Call program Dsp Add Tattoo Info   D1.
CALL PROGRAM(Dsp Add Tattoo Info   D1) ('PKRXD1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(WRK.PD_Name);

//?Valid Option
//?Valid Option
//?Valid Option
// IF *OTHERWISE
IF *OTHERWISE;

//?Option Valid Prior to Payment.
CASE;

// IF RCD.THP Process Code is Receiving
IF RCD.THP_Process_Code = 'RECV';

// OR RCD.THP Process Code is Slaughter
OR RCD.THP_Process_Code = 'SLG';

CASE;

// IF RCD.*SFLSEL is *Option 11 (Reusable)
IF RCD.*SFLSEL = '11';

CASE;

// IF RCD.TH Held Over is greater than 0
IF RCD.TH_Held_Over > *ZERO;

// OR RCD.TH Held Over Record is Yes
OR RCD.TH_Held_Over_Record = 'Y';

// Send error message - 'Option not allowed'
ERROR(PRK0648);
MSGPARM(RCD.*SFLSEL);

// IF *OTHERWISE
IF *OTHERWISE;

//?Re-Balance Tattoo
// Call program Edt Tattoo Comment    EF.
CALL PROGRAM(Edt Tattoo Comment    EF) ('PKIVEFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('B');
PARAMETER(CTL.Oms_System_Value_Alpha);

EXECUTE FUNCTION(Val Comment Exist     RT) TYPE(RTVOBJ) FILE(PKA4CPP)           AB1230876;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER('B');
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

EXECUTE FUNCTION(Rtv Validation Rules  RT) TYPE(RTVOBJ) FILE(PKBOREP)           AB1126427;
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.EV Validation Code is Carcass has Double Weight
 IF DB1.EV_Validation_Code = 'CDB';

 //?Carcass double weight
 // PAR.Carcass Dbw Min = DB1.EV Minimum
 PAR.Carcass_Dbw_Min = DB1.EV_Minimum;

 // PAR.Carcass Dbw Max = DB1.EV Maximum
 PAR.Carcass_Dbw_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Carcass is Light Weight
 IF DB1.EV_Validation_Code = 'CLT';

 //?Carcass light weight
 // PAR.Carcass Lgt Min = DB1.EV Minimum
 PAR.Carcass_Lgt_Min = DB1.EV_Minimum;

 // PAR.Carcass Lgt Max = DB1.EV Maximum
 PAR.Carcass_Lgt_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is high
 IF DB1.EV_Validation_Code = 'BHI';

 //?backfat is high
 // PAR.BackFat High Min = DB1.EV Minimum
 PAR.BackFat_High_Min = DB1.EV_Minimum;

 // PAR.BackFat High Max = DB1.EV Maximum
 PAR.BackFat_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Backfat is Low
 IF DB1.EV_Validation_Code = 'BLW';

 //?Backfat is low
 // PAR.BackFat Low Min = DB1.EV Minimum
 PAR.BackFat_Low_Min = DB1.EV_Minimum;

 // PAR.Backfat Low Max = DB1.EV Maximum
 PAR.Backfat_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is High
 IF DB1.EV_Validation_Code = 'LHI';

 //?loineye is high
 // PAR.LoinEye High Min = DB1.EV Minimum
 PAR.LoinEye_High_Min = DB1.EV_Minimum;

 // PAR.LoinEye High Max = DB1.EV Maximum
 PAR.LoinEye_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Loineye is Low
 IF DB1.EV_Validation_Code = 'LLW';

 //?loineye is low
 // PAR.LoinEye Low Min = DB1.EV Minimum
 PAR.LoinEye_Low_Min = DB1.EV_Minimum;

 // PAR.LoinEye Low Max = DB1.EV Maximum
 PAR.LoinEye_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is high
 IF DB1.EV_Validation_Code = 'PLH';

 //?% Lean High
 // PAR.%Lean High Min = DB1.EV Minimum
 PAR.Lean_High_Min = DB1.EV_Minimum;

 // PAR.%Lean High Max = DB1.EV Maximum
 PAR.Lean_High_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Percent Lean is Low
 IF DB1.EV_Validation_Code = 'PLL';

 //?% Lean Low
 // PAR.%Lean Low Min = DB1.EV Minimum
 PAR.Lean_Low_Min = DB1.EV_Minimum;

 // PAR.%Lean Low Max = DB1.EV Maximum
 PAR.Lean_Low_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is < % Allowed
 IF DB1.EV_Validation_Code = 'HLP';

 //?Head < Percent
 // PAR.Head < Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head < Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is #Head is > % Allowed
 IF DB1.EV_Validation_Code = 'HHP';

 //?Head > Percent
 // PAR.Head > Percent Min = DB1.EV Minimum
 PAR.Head_Percent_Min = DB1.EV_Minimum;

 // PAR.Head > Percent Max = DB1.EV Maximum
 PAR.Head_Percent_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is High
 IF DB1.EV_Validation_Code = 'YHI';

 //?Yield High
 // PAR.High Yield Min = DB1.EV Minimum
 PAR.High_Yield_Min = DB1.EV_Minimum;

 // PAR.High Yield Max = DB1.EV Maximum
 PAR.High_Yield_Max = DB1.EV_Maximum;

 // IF DB1.EV Validation Code is Yield Amount is Low
 IF DB1.EV_Validation_Code = 'YLW';

 //?Yield Low
 // PAR.Low Yield Min = DB1.EV Minimum
 PAR.Low_Yield_Min = DB1.EV_Minimum;

 // PAR.Low Yield Max = DB1.EV Maximum
 PAR.Low_Yield_Max = DB1.EV_Maximum;

 ENDIF;

}


// Call program Bal/Val Tattoo        XF.
CALL PROGRAM(Bal/Val Tattoo        XF) ('PKAAXFR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Live_Gross_Amt);
PARAMETER(RCD.TH_LIve_Net_Amt);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Held_Over);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Head_Adds);
PARAMETER(RCD.TH_Head_Accepted);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Adj_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Live_Wgt);
PARAMETER(RCD.TH_Avg_Hot_Wgt);
PARAMETER(RCD.TH_Avg_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Lean_Percent);
PARAMETER(RCD.TH_Avg_Loin_Eye_Depth);
PARAMETER(RCD.TH_Avg_Backfat);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_Adj_Actual_Yield);
PARAMETER(RCD.TH_Yield_Difference);
PARAMETER(RCD.TH_Recalc_Live_Wgt);
PARAMETER(RCD.TH_CM_Market_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Sort_Discount_Amt);
PARAMETER(RCD.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Total_Net_WO_Adds);
PARAMETER(RCD.TH_Carcass_Net_Amt);
PARAMETER(RCD.TH_Additions_Amt);
PARAMETER(RCD.TH_Payment_Gross);
PARAMETER(RCD.Th_Payment_Net_Amt);
PARAMETER(RCD.TH_AP_Voucher_Document#);
PARAMETER(RCD.TH_Freight_Amount);
PARAMETER(RCD.TH_Accrual_Amount);
PARAMETER(RCD.TH_Fixed_Cost_Amount);
PARAMETER(RCD.TH_Calc_Net_Sts);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Bal_to_Kill_Gen);
PARAMETER(RCD.TH_Commission_A_P_Voucher);
PARAMETER(RCD.TH_Voucher_Payment_Date);
PARAMETER(RCD.TH_User_Error_Override);
PARAMETER(RCD.TH_Held_Over_Record);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_Held_Ovr_Completed_Dte);
PARAMETER(RCD.TH_Commission_Paid_Date);
PARAMETER(RCD.TH_Actual_Check_Date);
PARAMETER(RCD.TH_Shipped_Weight);
PARAMETER(RCD.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(RCD.TH_FFLI);
PARAMETER(RCD.TH_Kill_Product_Value);
PARAMETER(RCD.TH_Cut_Product_Value);
PARAMETER(RCD.TH_Render_Product_Value);
PARAMETER(RCD.TH_Head_Excluded);
PARAMETER(RCD.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(RCD.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(RCD.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(RCD.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(RCD.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(RCD.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(RCD.TH_CM_Crc_Val_Live_CWT);
PARAMETER(RCD.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(RCD.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(RCD.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(RCD.TH_CM_Gross_Live_CWT);
PARAMETER(RCD.TH_CM_Gross_Carc_CWT);
PARAMETER(RCD.TH_Source_Type);
PARAMETER(RCD.TH_Scale_Ticket_Sts);
PARAMETER(RCD.TH_Payment_Type);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER(RCD.TH_Source_Code);
PARAMETER(RCD.TH_Hog_Class_Type);
PARAMETER(RCD.TH_Posted_to_HPS_Flag);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(RCD.TH_Shift_Held_Over);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.HB_Buyer_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(LCL.Carcass_Dbw_Min);
PARAMETER(LCL.Carcass_Dbw_Max);
PARAMETER(LCL.Carcass_Lgt_Min);
PARAMETER(LCL.Carcass_Lgt_Max);
PARAMETER(LCL.Lean_High_Min);
PARAMETER(LCL.Lean_High_Max);
PARAMETER(LCL.Lean_Low_Min);
PARAMETER(LCL.Lean_Low_Max);
PARAMETER(LCL.High_Yield_Min);
PARAMETER(LCL.High_Yield_Max);
PARAMETER(LCL.Low_Yield_Min);
PARAMETER(LCL.Low_Yield_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.Head_Percent_Min);
PARAMETER(LCL.Head_Percent_Max);
PARAMETER(LCL.BackFat_High_Min);
PARAMETER(LCL.BackFat_High_Max);
PARAMETER(LCL.BackFat_Low_Min);
PARAMETER(LCL.Backfat_Low_Max);
PARAMETER(LCL.LoinEye_High_Min);
PARAMETER(LCL.LoinEye_High_Max);
PARAMETER(LCL.LoinEye_Low_Min);
PARAMETER(LCL.LoinEye_Low_Max);
PARAMETER('N');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('N');
PARAMETER(LCL.Balance_First_Day_USR);

// PAR.Bal to Kill Executed Y/N = CND.Yes
PAR.Bal_to_Kill_Executed_Y_N = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Re-Balance Reason is Required.'
ERROR(PRK0929);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

// IF RCD.*SFLSEL is *Option 18
IF RCD.*SFLSEL = '18';

//?transfer carcs
CASE;

// IF RCD.TH Held Over Record is Yes
IF RCD.TH_Held_Over_Record = 'Y';

// Call program Pmt Trnsfr H/O Crcss  PV.
CALL PROGRAM(Pmt Trnsfr H/O Crcss  PV) ('PKTZPVR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(RCD.TH_Purchase_Date);
PARAMETER(RCD.TH_Group_Reference);
PARAMETER(RCD.TH_Live_Purchase_UOM);
PARAMETER(RCD.TH_Live_Purchase_Price);
PARAMETER(RCD.TH_Live_Gross_Amt);
PARAMETER(RCD.TH_LIve_Net_Amt);
PARAMETER(RCD.TH_Resale_UOM);
PARAMETER(RCD.TH_Recalc_Live_Wgt_Yld);
PARAMETER(RCD.TH_Pricing_Date);
PARAMETER(RCD.TH_Resale_Spread_Sts);
PARAMETER(RCD.TH_Dead_On_Arrival);
PARAMETER(RCD.TH_Head_Received);
PARAMETER(RCD.TH_Yard_Deads);
PARAMETER(RCD.TH_Held_Over);
PARAMETER(RCD.TH_Head_Condemned);
PARAMETER(RCD.TH_Head_Killed);
PARAMETER(RCD.TH_Head_Adds);
PARAMETER(RCD.TH_Head_Accepted);
PARAMETER(RCD.TH_Live_Wgt);
PARAMETER(RCD.TH_Adj_Live_Wgt);
PARAMETER(RCD.TH_Hot_Wgt);
PARAMETER(RCD.TH_Tot_Loin_Eye_Depth);
PARAMETER(RCD.TH_Tot_Backfat_Inches);
PARAMETER(RCD.TH_Tot_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Live_Wgt);
PARAMETER(RCD.TH_Avg_Hot_Wgt);
PARAMETER(RCD.TH_Avg_Light_Reflectance);
PARAMETER(RCD.TH_Avg_Lean_Percent);
PARAMETER(RCD.TH_Avg_Loin_Eye_Depth);
PARAMETER(RCD.TH_Avg_Backfat);
PARAMETER(RCD.TH_Std_Yield_Percent);
PARAMETER(RCD.TH_Actual_Yield);
PARAMETER(RCD.TH_Adj_Actual_Yield);
PARAMETER(RCD.TH_Yield_Difference);
PARAMETER(RCD.TH_Recalc_Live_Wgt);
PARAMETER(RCD.TH_CM_Market_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price);
PARAMETER(RCD.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(RCD.TH_CM_Sort_Discount_Amt);
PARAMETER(RCD.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(RCD.TH_CM_Base_Carcass_Value);
PARAMETER(RCD.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(RCD.TH_CM_Carcass_Gross_Amt);
PARAMETER(RCD.TH_Deduction_Amt);
PARAMETER(RCD.TH_Total_Net_WO_Adds);
PARAMETER(RCD.TH_Carcass_Net_Amt);
PARAMETER(RCD.TH_Additions_Amt);
PARAMETER(RCD.TH_Payment_Gross);
PARAMETER(RCD.Th_Payment_Net_Amt);
PARAMETER(RCD.TH_AP_Voucher_Document#);
PARAMETER(RCD.TH_Freight_Amount);
PARAMETER(RCD.TH_Accrual_Amount);
PARAMETER(RCD.TH_Fixed_Cost_Amount);
PARAMETER(RCD.TH_Calc_Net_Sts);
PARAMETER(RCD.TH_Payment_Sts);
PARAMETER(RCD.TH_Bal_to_Kill_Gen);
PARAMETER(RCD.TH_Commission_A_P_Voucher);
PARAMETER(RCD.TH_Voucher_Payment_Date);
PARAMETER(RCD.TH_User_Error_Override);
PARAMETER(RCD.TH_Held_Over_Record);
PARAMETER(RCD.TH_Sex);
PARAMETER(RCD.TH_Held_Ovr_Completed_Dte);
PARAMETER(RCD.TH_Commission_Paid_Date);
PARAMETER(RCD.TH_Actual_Check_Date);
PARAMETER(RCD.TH_Shipped_Weight);
PARAMETER(RCD.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(RCD.TH_FFLI);
PARAMETER(RCD.TH_Kill_Product_Value);
PARAMETER(RCD.TH_Cut_Product_Value);
PARAMETER(RCD.TH_Render_Product_Value);
PARAMETER(RCD.TH_Head_Excluded);
PARAMETER(RCD.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(RCD.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(RCD.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(RCD.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(RCD.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(RCD.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(RCD.TH_CM_Crc_Val_Live_CWT);
PARAMETER(RCD.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(RCD.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(RCD.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(RCD.TH_CM_Gross_Live_CWT);
PARAMETER(RCD.TH_CM_Gross_Carc_CWT);
PARAMETER(RCD.TH_Source_Type);
PARAMETER(RCD.TH_Scale_Ticket_Sts);
PARAMETER(RCD.TH_Payment_Type);
PARAMETER(RCD.TH_HPS_Movement_Ref_#);
PARAMETER(RCD.TH_Source_Code);
PARAMETER(RCD.TH_Hog_Class_Type);
PARAMETER(RCD.TH_Posted_to_HPS_Flag);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(RCD.TH_Shift_Held_Over);
PARAMETER(RCD.TH_Head_Identified);
PARAMETER(RCD.TH_Percent_Identified);
PARAMETER(RCD.TH_Percent_Accepted);
PARAMETER(RCD.DF_Defect_Code);
PARAMETER(RCD.THP_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.HB_Buyer_Code);
PARAMETER(RCD.GN_Genetic_Code);
PARAMETER(RCD.HC_Class_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option allowed for held over tattoo only.'
ERROR(PRK0918);
MSGPARM(RCD.*SFLSEL);

ENDIF;

ENDIF;

//?Option Valid Prior to Payment.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Invalid Processed Code for this function'
ERROR(PRK0405);
MSGPARM(RCD.TH_Tattoo_Number);
MSGPARM(RCD.THP_Process_Code);

ENDIF;

ENDIF;

ENDIF;

//?USER: Exit program processing

//?Pass return code back to repayment program
// PGM.*Return code = LCL.*Return code
PGM.*Return_code = LCL.*Return_code;

