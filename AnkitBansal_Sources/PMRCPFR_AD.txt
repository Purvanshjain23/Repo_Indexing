// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PMRCPFR
// ?Date: 14.08.2025 Time: 12:05:41
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?RMC T14912 6/6/19 change ULSD Company to EPA RFS Company ID #
//?****
//?9/24/12 RMC E2265 Print whse desc "Via" in producer sold from box
//?****
//?FP1110 High Plain Bioenergy invoice only
//?RMC 4/28/08  Print Remit to line: usr compressed line 15
//?RMC 4/20/11  Print ord desc line 2
EXECUTE FUNCTION(RTV Info for Invc Prt  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1324121;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Type_Sales);
PARAMETER(PAR.AR_Customer_Number);
PARAMETER(PAR.Ship_To_Customer);
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
PARAMETER(PAR.Customer_Purchase_Order_#);
PARAMETER(PAR.Order_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Terms_Code);
PARAMETER(PAR.Carrier_Code);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(PAR.Order_Weight_Total);
PARAMETER(PAR.Load_ID);
PARAMETER(PAR.Sales_Route_Code);
PARAMETER(PAR.Invoice_Number);
PARAMETER(PAR.Invoice_Date);
PARAMETER(PAR.Billing_Activity_Type);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Ensure that there is an invoice date
CASE;

// IF PAR.Invoice Date EQ WRK.ZERO
IF PAR.Invoice_Date = WRK.ZERO;

// PAR.Invoice Date = JOB.*Job date
PAR.Invoice_Date = JOB.*Job_date;

ENDIF;

//?** Rtv fax number from new Cust Distr Entry file in TOP  P000198
//?** This is done in TOP
// PAR.USR Display field = CND.yes
PAR.USR_Display_field = 'Y';

EXECUTE FUNCTION(RTV Last Ord Seqs notX RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1502729;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Retrieve Field Security display flag. If it is "NO" then
//?** do not display selected fields. In this case, do not print
//?** dollar amount fields.                            2/3/2006 LJB
// Call program Rtv Field Security    XF.
CALL PROGRAM(Rtv Field Security    XF) ('PDL1XFR');
PARAMETER(WRK.Display_Flag);

//?USER: Record selection processing

CASE;

// IF PAR.Order Value Total is equal to zero
IF PAR.Order_Value_Total = *ZERO;

// AND PAR.Order Weight Total is Equal to zero
AND PAR.Order_Weight_Total = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

//?Calculate Due Date.
CASE;

// IF PAR.Billing Activity Type is Credit or Debit Memo
IF PAR.Billing_Activity_Type = '2'/'3';

//?**** CR/DR Memos use the Invoice Date to calc the Due Date. ****
// Call program CLC Terms Values       XF.
CALL PROGRAM(CLC Terms Values       XF) ('CAC9XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Terms_Code);
PARAMETER(WRK.Discount_Due_Date);
PARAMETER(TOP_Due_Date);
PARAMETER(PAR.Invoice_Date);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(WRK.Discount_Amount);

//?Calculate Due Date.
// IF *OTHERWISE
IF *OTHERWISE;

//?**** All others use the Actual Ship Date to calc the Due Date. ****
// Call program CLC Terms Values       XF.
CALL PROGRAM(CLC Terms Values       XF) ('CAC9XFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Terms_Code);
PARAMETER(WRK.Discount_Due_Date);
PARAMETER(TOP_Due_Date);
PARAMETER(PAR.Actual_Shipped_Date);
PARAMETER(PAR.Order_Value_Total);
PARAMETER(WRK.Discount_Amount);

ENDIF;

//?Ensure due date filled
CASE;

// IF TOP.Due Date EQ WRK.ZERO
IF TOP_Due_Date = WRK.ZERO;

// TOP.Due Date = PAR.Invoice Date
TOP_Due_Date = PAR.Invoice_Date;

ENDIF;

//?** Rtv fax number from new Cust Distr Entry file      P000198
//?** (this number is hidden on this invoice)
EXECUTE FUNCTION(RTV CDE 1st Fax only  IF) TYPE(EXCINTFUN)                      AC1981538;
PARAMETER(DB1.AR_Customer_Number);
PARAMETER('AR-INVOICE');
PARAMETER(*ZERO);
PARAMETER(WRK.CDE_Name);
PARAMETER(WRK.CDE_Destination);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV CDE 1st Fax only  RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC1981532;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Distribution_Code);
 PARAMETER(PAR.CDE_Sequence_Number);
 PARAMETER(PAR.CDE_Name);
 PARAMETER(PAR.CDE_Destination);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?Return 1st active record with a fax number
  CASE;

  // IF DB1.CDE Destination Type is Fax
  IF DB1.CDE_Destination_Type = 'F';

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

  ENDIF;

 }

}


//?** Put 1st fax into Fax Number or blanks              P000198
CASE;

// IF WRK.CDE Destination is Blanks
IF WRK.CDE_Destination = *BLANK;

// TOP.Credit Contact Fax Number = CND.Equal to blanks
TOP_Credit_Contact_Fax_Number = *BLANK;

//?** Put 1st fax into Fax Number or blanks              P000198
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Credit Contact Fax Number = WRK.CDE Destination
TOP_Credit_Contact_Fax_Number = WRK.CDE_Destination;

ENDIF;

// TOP.A/R Customer Number = PAR.A/R Customer Number
TOP_AR_Customer_Number = PAR.AR_Customer_Number;

// TOP.Order Number = PAR.Order Number
TOP_Order_Number = PAR.Order_Number;

// TOP.Load ID = PAR.Load ID
TOP_Load_ID = PAR.Load_ID;

// TOP.Sales Route Code = PAR.Sales Route Code
TOP_Sales_Route_Code = PAR.Sales_Route_Code;

// TOP.Order Date = PAR.Order Date
TOP_Order_Date = PAR.Order_Date;

// TOP.Actual Shipped Date = PAR.Actual Shipped Date
TOP_Actual_Shipped_Date = PAR.Actual_Shipped_Date;

// TOP.Invoice Number = PAR.Invoice Number
TOP_Invoice_Number = PAR.Invoice_Number;

// TOP.Invoice Date = PAR.Invoice Date
TOP_Invoice_Date = PAR.Invoice_Date;

// TOP.Customer Purchase Order # = PAR.Customer Purchase Order #
TOP_Customer_Purchase_Order_# = PAR.Customer_Purchase_Order_#;

//?4/25/05 print carrier name starting with pos. 6 - dont print scac code
EXECUTE FUNCTION(RTV Name, Status       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1260598;
PARAMETER(PAR.Carrier_Code);
PARAMETER(WRK.Name);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Execute function *Move-Right.
EXECUTE FUNCTION(*Move-Right) TYPE(EXCUSRSRC) ('PDUIUFR');
PARAMETER(WRK.Text_1_USR);
PARAMETER(WRK.Name);
{
 C                     MOVE #IPANA    #OO9NA
}


// TOP.USR Carrier Short = WRK.Text 1 USR
TOP_USR_Carrier_Short = WRK.Text_1_USR;

EXECUTE FUNCTION(RTV Retrieve Terms     RT) TYPE(RTVOBJ) FILE(CAAOREP)          AC1255765;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Terms_Code);
PARAMETER(TOP_USR_Terms_Desc_Short);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?4/17/02 Use Bill to Remittance Flag, instead of Ship To
EXECUTE FUNCTION(RTV Alt Remittance Flg RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1348485;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Bill_to_Customer);
PARAMETER(PAR.Alt_Remittance_Flag);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Default chicago   5/29/03
CASE;

// IF PAR.Alt Remittance Flag EQ WRK.Blank 6 USR
IF PAR.Alt_Remittance_Flag = WRK.Blank_6_USR;

// PAR.Alt Remittance Flag = CND.Chicago Lockbox
PAR.Alt_Remittance_Flag = 2;

ENDIF;

EXECUTE FUNCTION(RTV Country Code       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1395144;
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(PAR.Country_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(PAR.Country_Code);
PARAMETER(WRK.Country_Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Execute function RTV Comprs Nme/Add/CtryUS.
EXECUTE FUNCTION(RTV Comprs Nme/Add/CtryUS) TYPE(EXCUSRSRC) ('PDRYUFR');
PARAMETER(PAR.Bill_to_Name);
PARAMETER(PAR.Bill_to_Address_Line_1);
PARAMETER(PAR.Bill_to_Address_Line_2);
PARAMETER(PAR.Bill_to_Address_Line_3);
PARAMETER(PAR.Bill_to_City);
PARAMETER(PAR.Bill_to_State_Code);
PARAMETER(PAR.Bill_to_Zip_Postal_Code);
PARAMETER(WRK.Country_Description);
PARAMETER(TOP_USR_Compressed_Address_1);
PARAMETER(TOP_USR_Compressed_Address_2);
PARAMETER(TOP_USR_Compressed_Address_3);
PARAMETER(TOP_USR_Compressed_Address_4);
PARAMETER(TOP_USR_Compressed_Address_5);
PARAMETER(TOP_USR_Compressed_Address_16);
{
 * Use this function to compress name/address information
 *
 E                    UAD         6 34               Name/Address
 *
 C                     MOVEL#IADTX    UUADTX           Name
 C                     MOVEL#IACNA    UUACNA           Address 1
 C                     MOVEL#IADNA    UUADNA           Address 2
 C                     MOVEL#IAENA    UUAENA           Address 3
 C                     MOVEL#IAJNA    UUAJNA           City
 C                     MOVEL#IEINA    UUEINA           State
 C                     MOVEL#IBTTX    UUBTTX           Zip
 C                     MOVEL#IDATX    UUDATX           Country
 C                     EXSR UJ1UF
 C                     MOVELUAD,1     #OEJNA
 C                     MOVELUAD,2     #OEKNA
 C                     MOVELUAD,3     #OELNA
 C                     MOVELUAD,4     #OEMNA
 C                     MOVELUAD,5     #OENNA
 C                     MOVELUAD,6     #OKSTX
 C           UJ1UF     BEGSR
 *============================================================
 * UJ1UF - COMPRESS NAME/ADDRESS/COUNTRY INFORMATION
 *============================================================
 *
 C           *LIKE     DEFN #IADTX    UUADTX
 C           *LIKE     DEFN #IACNA    UUACNA
 C           *LIKE     DEFN #IADNA    UUADNA
 C           *LIKE     DEFN #IAENA    UUAENA
 C           *LIKE     DEFN #IAJNA    UUAJNA
 C           *LIKE     DEFN #IEINA    UUEINA
 C           *LIKE     DEFN #IBTTX    UUBTTX- 1
 C           *LIKE     DEFN #IDATX    UUDATX
 * CLEAR OUTPUT ARRAY
 C                     MOVE *BLANK    UAD
 C                     Z-ADD1         UX      20
 C                     MOVELUUADTX    UAD,UX
 C                     ADD  1         UX
 C           UUACNA    IFNE *BLANK
 C                     MOVELUUACNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUADNA    IFNE *BLANK
 C                     MOVELUUADNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUAENA    IFNE *BLANK
 C                     MOVELUUAENA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C                     MOVE *BLANK    UUCSTZ 34
 C                     MOVELUUAJNA    UUCST  23
 C                     MOVE UUEINA    UUCST
 C                     MOVELUUCST     UUCSTZ
 C                     MOVE UUBTTX    UUCSTZ
 C                     MOVELUUCSTZ    UAD,UX
 C           UUDATX    IFNE *BLANK
 C                     ADD  1         UX
 C                     MOVELUUDATX    UAD,UX
 C                     END
 C                     ENDSR
}


EXECUTE FUNCTION(RTV Country/ItemRefSts RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1631724;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(PAR.Country_Code);
PARAMETER(PAR.Item_Reference_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Desc, Status       RT) TYPE(RTVOBJ) FILE(OME5REP)          AC1261065;
PARAMETER(PAR.Country_Code);
PARAMETER(WRK.Country_Description);
PARAMETER(WRK.TXT_field_not_needed);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Execute function RTV Comprs Nme/Add/CtryUS.
EXECUTE FUNCTION(RTV Comprs Nme/Add/CtryUS) TYPE(EXCUSRSRC) ('PDRYUFR');
PARAMETER(PAR.Ship_To_Name);
PARAMETER(PAR.Ship_To_Address_Line_1);
PARAMETER(PAR.Ship_To_Address_Line_2);
PARAMETER(PAR.Ship_To_Address_Line_3);
PARAMETER(PAR.Ship_To_City);
PARAMETER(PAR.Ship_To_State_Code);
PARAMETER(PAR.Ship_To_Zip_Postal_Code);
PARAMETER(WRK.Country_Description);
PARAMETER(TOP_USR_Compressed_Address_6);
PARAMETER(TOP_USR_Compressed_Address_7);
PARAMETER(TOP_USR_Compressed_Address_8);
PARAMETER(TOP_USR_Compressed_Address_9);
PARAMETER(TOP_USR_Compressed_Address_10);
PARAMETER(TOP_USR_Compressed_Address_17);
{
 * Use this function to compress name/address information
 *
 E                    UAD         6 34               Name/Address
 *
 C                     MOVEL#IADTX    UUADTX           Name
 C                     MOVEL#IACNA    UUACNA           Address 1
 C                     MOVEL#IADNA    UUADNA           Address 2
 C                     MOVEL#IAENA    UUAENA           Address 3
 C                     MOVEL#IAJNA    UUAJNA           City
 C                     MOVEL#IEINA    UUEINA           State
 C                     MOVEL#IBTTX    UUBTTX           Zip
 C                     MOVEL#IDATX    UUDATX           Country
 C                     EXSR UJ1UF
 C                     MOVELUAD,1     #OEJNA
 C                     MOVELUAD,2     #OEKNA
 C                     MOVELUAD,3     #OELNA
 C                     MOVELUAD,4     #OEMNA
 C                     MOVELUAD,5     #OENNA
 C                     MOVELUAD,6     #OKSTX
 C           UJ1UF     BEGSR
 *============================================================
 * UJ1UF - COMPRESS NAME/ADDRESS/COUNTRY INFORMATION
 *============================================================
 *
 C           *LIKE     DEFN #IADTX    UUADTX
 C           *LIKE     DEFN #IACNA    UUACNA
 C           *LIKE     DEFN #IADNA    UUADNA
 C           *LIKE     DEFN #IAENA    UUAENA
 C           *LIKE     DEFN #IAJNA    UUAJNA
 C           *LIKE     DEFN #IEINA    UUEINA
 C           *LIKE     DEFN #IBTTX    UUBTTX- 1
 C           *LIKE     DEFN #IDATX    UUDATX
 * CLEAR OUTPUT ARRAY
 C                     MOVE *BLANK    UAD
 C                     Z-ADD1         UX      20
 C                     MOVELUUADTX    UAD,UX
 C                     ADD  1         UX
 C           UUACNA    IFNE *BLANK
 C                     MOVELUUACNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUADNA    IFNE *BLANK
 C                     MOVELUUADNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUAENA    IFNE *BLANK
 C                     MOVELUUAENA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C                     MOVE *BLANK    UUCSTZ 34
 C                     MOVELUUAJNA    UUCST  23
 C                     MOVE UUEINA    UUCST
 C                     MOVELUUCST     UUCSTZ
 C                     MOVE UUBTTX    UUCSTZ
 C                     MOVELUUCSTZ    UAD,UX
 C           UUDATX    IFNE *BLANK
 C                     ADD  1         UX
 C                     MOVELUUDATX    UAD,UX
 C                     END
 C                     ENDSR
}


EXECUTE FUNCTION(Rtv A/R Remittance    RT) TYPE(RTVOBJ) FILE(POA7REP)           AC1621765;
PARAMETER(PAR.Alt_Remittance_Flag);
PARAMETER(PAR.Name);
PARAMETER(PAR.Address_Line_1);
PARAMETER(PAR.Address_Line_2);
PARAMETER(PAR.Address_Line_3);
PARAMETER(PAR.City);
PARAMETER(PAR.State_Code);
PARAMETER(PAR.Zip_Postal_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?international
CASE;

// IF PAR.Address Line 2 is eq .
IF PAR.Address_Line_2 = '.';

// PAR.Address Line 2 = CON.*BLANK
PAR.Address_Line_2 = *BLANK;

ENDIF;

//?international
CASE;

// IF PAR.Address Line 3 is eq .
IF PAR.Address_Line_3 = '.';

// PAR.Address Line 3 = CON.*BLANK
PAR.Address_Line_3 = *BLANK;

ENDIF;

// Execute function RTV Comprs Nme/Add/CtryUS.
EXECUTE FUNCTION(RTV Comprs Nme/Add/CtryUS) TYPE(EXCUSRSRC) ('PDRYUFR');
PARAMETER(PAR.Name);
PARAMETER(PAR.Address_Line_1);
PARAMETER(PAR.Address_Line_2);
PARAMETER(PAR.Address_Line_3);
PARAMETER(PAR.City);
PARAMETER(PAR.State_Code);
PARAMETER(PAR.Zip_Postal_Code);
PARAMETER(*BLANK);
PARAMETER(TOP_USR_Compressed_Address_11);
PARAMETER(TOP_USR_Compressed_Address_12);
PARAMETER(TOP_USR_Compressed_Address_13);
PARAMETER(TOP_USR_Compressed_Address_14);
PARAMETER(TOP_USR_Compressed_Address_15);
PARAMETER(WRK.USR_Country_Description);
{
 * Use this function to compress name/address information
 *
 E                    UAD         6 34               Name/Address
 *
 C                     MOVEL#IADTX    UUADTX           Name
 C                     MOVEL#IACNA    UUACNA           Address 1
 C                     MOVEL#IADNA    UUADNA           Address 2
 C                     MOVEL#IAENA    UUAENA           Address 3
 C                     MOVEL#IAJNA    UUAJNA           City
 C                     MOVEL#IEINA    UUEINA           State
 C                     MOVEL#IBTTX    UUBTTX           Zip
 C                     MOVEL#IDATX    UUDATX           Country
 C                     EXSR UJ1UF
 C                     MOVELUAD,1     #OEJNA
 C                     MOVELUAD,2     #OEKNA
 C                     MOVELUAD,3     #OELNA
 C                     MOVELUAD,4     #OEMNA
 C                     MOVELUAD,5     #OENNA
 C                     MOVELUAD,6     #OKSTX
 C           UJ1UF     BEGSR
 *============================================================
 * UJ1UF - COMPRESS NAME/ADDRESS/COUNTRY INFORMATION
 *============================================================
 *
 C           *LIKE     DEFN #IADTX    UUADTX
 C           *LIKE     DEFN #IACNA    UUACNA
 C           *LIKE     DEFN #IADNA    UUADNA
 C           *LIKE     DEFN #IAENA    UUAENA
 C           *LIKE     DEFN #IAJNA    UUAJNA
 C           *LIKE     DEFN #IEINA    UUEINA
 C           *LIKE     DEFN #IBTTX    UUBTTX- 1
 C           *LIKE     DEFN #IDATX    UUDATX
 * CLEAR OUTPUT ARRAY
 C                     MOVE *BLANK    UAD
 C                     Z-ADD1         UX      20
 C                     MOVELUUADTX    UAD,UX
 C                     ADD  1         UX
 C           UUACNA    IFNE *BLANK
 C                     MOVELUUACNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUADNA    IFNE *BLANK
 C                     MOVELUUADNA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C           UUAENA    IFNE *BLANK
 C                     MOVELUUAENA    UAD,UX
 C                     ADD  1         UX
 C                     END
 C                     MOVE *BLANK    UUCSTZ 34
 C                     MOVELUUAJNA    UUCST  23
 C                     MOVE UUEINA    UUCST
 C                     MOVELUUCST     UUCSTZ
 C                     MOVE UUBTTX    UUCSTZ
 C                     MOVELUUCSTZ    UAD,UX
 C           UUDATX    IFNE *BLANK
 C                     ADD  1         UX
 C                     MOVELUUDATX    UAD,UX
 C                     END
 C                     ENDSR
}


//?quit if zeros
CASE;

// IF PAR.Order Value Total is equal to zero
IF PAR.Order_Value_Total = *ZERO;

// AND PAR.Order Weight Total is Equal to zero
AND PAR.Order_Weight_Total = *ZERO;

QUIT;

ENDIF;

EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1801010;
PARAMETER(DB1.Company_Number);
PARAMETER(TOP_Order_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(LCL.Shipping_Company);
PARAMETER(LCL.Accounting_Company);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 EXECUTE FUNCTION(RTV OD Whs/ShpCo/AccCo RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1801011;
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER(PAR.Shipping_Company);
 PARAMETER(PAR.Accounting_Company);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Warehouse Code = DB1.Warehouse Code
 PAR.Warehouse_Code = DB1.Warehouse_Code;

 QUIT;

 ENDIF;

}


EXECUTE FUNCTION(Rtv Produced by co    RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826122;
PARAMETER(LCL.Accounting_Company);
PARAMETER(TOP_Produced_By_Sts_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.CDI Produced by co = DB1.CDI Produced by co
 PAR.CDI_Produced_by_co = DB1.CDI_Produced_by_co;

}


//?Load producer address and other details
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Co Addr & Phone FaxRT) TYPE(RTVOBJ) FILE(CAABREP)          AC1833051;
PARAMETER(LCL.Accounting_Company);
PARAMETER(TOP_Name);
PARAMETER(TOP_USR_Compressed_Address_21);
PARAMETER(LCL.Address_Line_2);
PARAMETER(LCL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(LCL.Telephone_Number_FF);
PARAMETER(LCL.Fax_Number_FF);
PARAMETER(LCL.State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.USR Compressed Address 22 = CONCAT(LCL.City,LCL.State Code,CON.1)
LCL.USR_Compressed_Address_22 = LCL.City + LCL.State_Code (1);

// TOP.USR Compressed Address 22 = CONCAT(LCL.USR Compressed Address 22,LCL.Zip/Postal Code,CON.1)
TOP_USR_Compressed_Address_22 = LCL.USR_Compressed_Address_22 + LCL.Zip_Postal_Code (1);

// TOP.USR Compressed Address 23 = LCL.Telephone Number FF
TOP_USR_Compressed_Address_23 = LCL.Telephone_Number_FF;

EXECUTE FUNCTION(RTV Co infor w/o FuelCdRT) TYPE(RTVOBJ) FILE(PMCAREP)          AC1861292;
PARAMETER(LCL.Accounting_Company);
PARAMETER(NLL.COA_Bio_dsl_Fuel_Cd_Descr);
PARAMETER(TOP_COA_Producer_Regist_Nbr);
PARAMETER(TOP_COA_Employer_ID);
PARAMETER(NLL.COA_Sold_From_Address);
PARAMETER(NLL.COA_Sold_From_Name);
PARAMETER(TOP_COA_ULSD_Company_#);
PARAMETER(TOP_COA_ULSD_Facility_#);
PARAMETER(NLL.COA_RIN_Equivalence_Valu);
PARAMETER(NLL.COA_RIN_Renewable_Enrgy);
PARAMETER(NLL.COA_RIN_Type_Flag);
PARAMETER(NLL.COA_Density_Loadout);
PARAMETER(NLL.COA_Density_Reference);
PARAMETER(NLL.COA_Temperature_Loadout);
PARAMETER(NLL.COA_Temperature_Ref);
PARAMETER(NLL.COA_BOL_Percent);
PARAMETER(NLL.COA_Sale_Location);
PARAMETER(NLL.COA_Active_Whse_Tank_1);
PARAMETER(NLL.COA_Active_Whse_Tank_2);
PARAMETER(NLL.COA_Active_Whse_Tank_3);
PARAMETER(NLL.COA_Active_Whse_Tank_4);
PARAMETER(NLL.COA_Active_Whse_Tank_5);
PARAMETER(NLL.COA_Active_Whse_Tank_6);
PARAMETER(NLL.COA_Temp_Conv_Factor_1);
PARAMETER(NLL.Operation_Factor_1);
PARAMETER(NLL.COA_Temp_Conv_Factor_2);
PARAMETER(NLL.Operation_Factor_2);
PARAMETER(NLL.COA_RFS_Renew_Fuel_Code);
PARAMETER(NLL.COA_RFS_Rnwbl_Feedstock);
PARAMETER(NLL.Record_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?get 1st rcd with matching input company
 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF TOP.COA Producer Regist Nbr is Entered
IF TOP_COA_Producer_Regist_Nbr > *BLANK;

// TOP.Text 4 USR = CON.Producer Registration #:
TOP_Text_4_USR = 'Producer Registration #:';

// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Text 4 USR = CON.*BLANK
TOP_Text_4_USR = *BLANK;

ENDIF;

ENDIF;

// TOP.ULSD Comp bill to hdg = CON.EPA RFS Company ID #:
TOP_ULSD_Comp_bill_to_hdg = 'EPA RFS Company ID #:';

// TOP.ULSD Comp ship to hdg = CON.EPA RFS Company ID #:
TOP_ULSD_Comp_ship_to_hdg = 'EPA RFS Company ID #:';

EXECUTE FUNCTION(Rtv HPB Cust Fields   RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1858717;
PARAMETER(DB1.Company_Number);
PARAMETER(TOP_AR_Customer_Number);
PARAMETER(TOP_Employer_ID_bill_to_#);
PARAMETER(TOP_ULSD_Comp_bill_to_#);
PARAMETER(TOP_ULSD_Facility_bill_#);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv HPB Cust Fields   RT) TYPE(RTVOBJ) FILE(PDNIREP)           AC1858717;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(TOP_Employer_ID_ship_to_#);
PARAMETER(TOP_ULSD_Comp_ship_to_#);
PARAMETER(TOP_ULSD_Facility_ship_#);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?****
//?9/24/12 RMC E2265 Print whse desc "Via" in producer sold from box
// TOP.Text USR 4 = CON.Via:
TOP_Text_USR_4 = 'Via:';

EXECUTE FUNCTION(RTV Warehouse Address  RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1211418;
PARAMETER(LCL.Warehouse_Code);
PARAMETER(TOP_COA_Station_Name);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(LCL.City);
PARAMETER(LCL.Zip_Postal_Code);
PARAMETER(LCL.State_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// LCL.Address 1 = CONCAT(LCL.City,LCL.State Code,CON.1)
LCL.Address_1 = LCL.City + LCL.State_Code (1);

// TOP.Address 1 = CONCAT(LCL.Address 1,LCL.Zip/Postal Code,CON.1)
TOP_Address_1 = LCL.Address_1 + LCL.Zip_Postal_Code (1);

//?USER: Print required level headings

// SUPPRESSED PRINT Accounting Company Number header format

//?USER: On print of detail format

//?set attr. so fax number only prints on page 1
// PAR.USR Display field = CND.no
PAR.USR_Display_field = 'N';

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Inv/MemoDtlHPB8LPI PO
EXECUTE FUNCTION(PRT Inv/MemoDtlHPB8LPI PO) TYPE(PRTOBJ);
PARAMETER(CUR.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(CUR.Billing_Activity_Type);
PARAMETER(NXT.USR_Quantity);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.Item_Reference_Status);
PARAMETER(NXT.Quantity_7_0_USR);
PARAMETER(NXT.Weight_Invoiced_usr);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Embedded PRTOBJ : PRT Inv/MemoHdrComm    PO
EXECUTE FUNCTION(PRT Inv/MemoHdrComm    PO) TYPE(PRTOBJ);
PARAMETER(NXT.Company_Number);
PARAMETER(CUR.Order_Number);
PARAMETER('IN');
PARAMETER(*ZERO);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

CASE;

// IF PAR.Printed Status is no
IF PAR.Printed_Status = 'N';

//?** Set fax invoice flag so the wf record isn't deleted
//?** before it is faxed or emailed.                     P000198
// PAR.Fax Invoice Flag = CND.Automatically Fax Invoice
PAR.Fax_Invoice_Flag = 'Y';

EXECUTE FUNCTION(CRT PD Invoice List Wk CR) TYPE(CRTOBJ) FILE(PDJ4CPP)          AC1339739;
PARAMETER(JOB.*JOB);
PARAMETER(CUR.Order_Number);
PARAMETER(DB1.Order_Value_Total);
PARAMETER(DB1.Order_Weight_Total);
PARAMETER(DB1.Ship_To_Name);
PARAMETER(DB1.Bill_to_Name);
PARAMETER(PAR.Fax_Invoice_Flag);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Invoice_Number);
PARAMETER(DB1.Invoice_Suffix);
{
 //?USER: Processing if Data record already exists

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


ENDIF;

//?USER: Print required level totals

CASE;

IF NEW Company_Number;
//?Print Original Inv and Order if CM/DM      7/23/02
CASE;

// IF CUR.Billing Activity Type is Credit or Debit Memo
IF CUR.Billing_Activity_Type = '2'/'3';

//?Print Original Inv and Order if CM/DM      7/23/02
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

// Print Accounting Company Number totals format
PRINT Accounting Company Number totals format;

//?Embedded PRTOBJ : Prt AddOn/All Tot-HPB PO
EXECUTE FUNCTION(Prt AddOn/All Tot-HPB PO) TYPE(PRTOBJ);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER('IN');
{
 //?USER: Processing if Data record already exists

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


// NXT.Quantity 7.0 USR = CUR.Quantity 7.0 USR
NXT.Quantity_7_0_USR = CUR.Quantity_7_0_USR;

// NXT.Weight Invoiced   usr = CUR.Weight Invoiced   usr
NXT.Weight_Invoiced_usr = CUR.Weight_Invoiced_usr;

// NXT.USR Quantity = CUR.USR Quantity
NXT.USR_Quantity = CUR.USR_Quantity;

// NXT.USR Quantity Shipped 10,2 = CUR.USR Quantity Shipped 10,2
NXT.USR_Quantity_Shipped_102 = CUR.USR_Quantity_Shipped_102;

// NXT.USR Weight 10,2 = CUR.USR Weight 10,2
NXT.USR_Weight_102 = CUR.USR_Weight_102;

ENDIF;

//?PRTOBJ calls before print of final totals format

//?Embedded PRTOBJ : PRT Brokers on Invoice PO
EXECUTE FUNCTION(PRT BrkOnInvoice       PO) TYPE(PRTOBJ);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
{
 //?USER: Processing if Data record already exists

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?USER: On print of final totals format

CASE;

// IF PAR.Billing Activity Type is Credit Memo
IF PAR.Billing_Activity_Type = '2';

// CUR.Order Value Total = CON.*ZERO - PAR.Order Value Total
CUR.Order_Value_Total = *ZERO - PAR.Order_Value_Total;

// CUR.Extended Amount = CON.*ZERO - PAR.Order Value Total
CUR.Extended_Amount = *ZERO - PAR.Order_Value_Total;

// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Order Value Total = PAR.Order Value Total
CUR.Order_Value_Total = PAR.Order_Value_Total;

// CUR.Extended Amount = PAR.Order Value Total
CUR.Extended_Amount = PAR.Order_Value_Total;

ENDIF;

EXECUTE FUNCTION(Rtv Inv AddOn/Allow   RT) TYPE(RTVOBJ) FILE(OMHRCPP)           AC1844822;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(LCL.USR_Amount_Applied);
{
 //?USER: Initialize routine

 // PAR.USR Amount Applied = CON.*ZERO
 PAR.USR_Amount_Applied = *ZERO;

 //?USER: Process Data record

 // PAR.USR Amount Applied = PAR.USR Amount Applied + DB1.Extended Amount
 PAR.USR_Amount_Applied = PAR.USR_Amount_Applied + DB1.Extended_Amount;

}


// CUR.Order Value Total = CUR.Order Value Total + LCL.USR Amount Applied
CUR.Order_Value_Total = CUR.Order_Value_Total + LCL.USR_Amount_Applied;

//?USER: Process after print of final totals format

RETURN;

