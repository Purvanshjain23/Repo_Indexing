// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKWEXFR
// ?Date: 14.08.2025 Time: 02:53:09
// ?------------------------------------------------------------------------------------------------

//?Execute user function

// Call program Rtv System Date       UP.
CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
PARAMETER(PAR.MPR_Reporting_Date);

//?03/26/09 PKD/RMC Do not need to check the Kill Day Sts.  Handled
//?                 by the scheduled job on the PC.
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
// LCL.Invalid Y/N USR = CND.No
LCL.Invalid_Y_N_USR = 'N';

//?Quit if the Current Date is not a Kill Day
CASE;

// IF LCL.Invalid Y/N USR is Yes
IF LCL.Invalid_Y_N_USR = 'Y';

// PAR.MPR Day Sts USR = CND.No
PAR.MPR_Day_Sts_USR = 'N';

QUIT;

ENDIF;

// LCL.BOH MPR Reporting Time = PAR.MPR Reporting Time
LCL.BOH_MPR_Reporting_Time = PAR.MPR_Reporting_Time;

// PAR.MPR Day Sts USR = CND.Yes
PAR.MPR_Day_Sts_USR = 'Y';

//?* Retrieve Plant Establishment Number from the Company Values *
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.Company_Number_USR);
PARAMETER('PLTESTNO');
PARAMETER(PAR.MPR_Identification_Num);

//?Read BOH for Actual BOL Plan Head Delivered per MPR Purchase Type
//?           IR Company
//?           IR Reporting Date
//?           IR Reporting Time
//?           S  Buy Order Type is not Internal
// LCL.BOH MPR Reporting Time = PAR.MPR Reporting Time
LCL.BOH_MPR_Reporting_Time = PAR.MPR_Reporting_Time;

//?Read Estimated Purchases for Estimated Head per MPR Purchase Type
EXECUTE FUNCTION(Rtv MPR Estmtd 1 day  RT) TYPE(RTVOBJ) FILE(PKE4CPP)           AB1235913;
PARAMETER(PAR.Company_Number_USR);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(PAR.MPR_Est_Purch_Type_1_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_2_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_3_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_4_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_5_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_6_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_7_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_8_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_10_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_11_Hd);
{
 //?USER: Process Data record

 // WRK.MPR Purchase Type = DB1.MPR Purchase Type Code
 WRK.MPR_Purchase_Type = DB1.MPR_Purchase_Type_Code;

 CASE;

 // IF WRK.MPR Purchase Type is Negotiated
 IF WRK.MPR_Purchase_Type = 1;

 // PAR.MPR Est Purch Type 1 Hd = DB1.MPR Estimated Head
 PAR.MPR_Est_Purch_Type_1_Hd = DB1.MPR_Estimated_Head;

 // IF WRK.MPR Purchase Type is Oth Mkt Formula
 IF WRK.MPR_Purchase_Type = 2;

 // PAR.MPR Est Purch Type 2 Hd = DB1.MPR Estimated Head
 PAR.MPR_Est_Purch_Type_2_Hd = DB1.MPR_Estimated_Head;

 // IF WRK.MPR Purchase Type is Pork Mkt Formula
 IF WRK.MPR_Purchase_Type = 3;

 // PAR.MPR Est Purch Type 3 Hd = DB1.MPR Estimated Head
 PAR.MPR_Est_Purch_Type_3_Hd = DB1.MPR_Estimated_Head;

 // IF WRK.MPR Purchase Type is Oth Purchase Arng
 IF WRK.MPR_Purchase_Type = 4;

 // PAR.MPR Est Purch Type 4 Hd = DB1.MPR Estimated Head
 PAR.MPR_Est_Purch_Type_4_Hd = DB1.MPR_Estimated_Head;

 // IF WRK.MPR Purchase Type is PckSld Negotiated
 IF WRK.MPR_Purchase_Type = 5;

 // PAR.MPR Est Purch Type 5 Hd = DB1.MPR Estimated Head
 PAR.MPR_Est_Purch_Type_5_Hd = DB1.MPR_Estimated_Head;

 // IF WRK.MPR Purchase Type is PckSld Oth Mkt Formula
 IF WRK.MPR_Purchase_Type = 6;

 // PAR.MPR Est Purch Type 6 Hd = DB1.MPR Estimated Head
 PAR.MPR_Est_Purch_Type_6_Hd = DB1.MPR_Estimated_Head;

 // IF WRK.MPR Purchase Type is PckSld Pork Mkt Formula
 IF WRK.MPR_Purchase_Type = 7;

 // PAR.MPR Est Purch Type 7 Hd = DB1.MPR Estimated Head
 PAR.MPR_Est_Purch_Type_7_Hd = DB1.MPR_Estimated_Head;

 // IF WRK.MPR Purchase Type is PckSld Oth Purchase Arng
 IF WRK.MPR_Purchase_Type = 8;

 // PAR.MPR Est Purch Type 8 Hd = DB1.MPR Estimated Head
 PAR.MPR_Est_Purch_Type_8_Hd = DB1.MPR_Estimated_Head;

 // IF WRK.MPR Purchase Type is Other Neg Formula
 IF WRK.MPR_Purchase_Type = 10;

 // PAR.MPR Est Purch Type 10 Hd = DB1.MPR Estimated Head
 PAR.MPR_Est_Purch_Type_10_Hd = DB1.MPR_Estimated_Head;

 // IF WRK.MPR Purchase Type is PckSld Neg Formula
 IF WRK.MPR_Purchase_Type = 11;

 // PAR.MPR Est Purch Type 11 Hd = DB1.MPR Estimated Head
 PAR.MPR_Est_Purch_Type_11_Hd = DB1.MPR_Estimated_Head;

 ENDIF;

}


//?RMC 11.28.17 add BOH with reporting day=today=kill day to estimates.
EXECUTE FUNCTION(Rtv MPR Dly PrSm-Est  RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1342201;
PARAMETER(PAR.Company_Number_USR);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(LCL.BOH_MPR_Reporting_Time);
PARAMETER(PAR.MPR_Est_Purch_Type_1_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_2_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_3_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_4_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_5_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_6_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_7_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_8_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_10_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_11_Hd);
{
 //?USER: Process Data record

 //?R7805 11/04/16 RMC R7805 Use new BOH Purch Type
 //?S11998 11/28/17 RMC Reporting date=today and kill=today -- means
 //?  these are not in the estimated head already. so add them here
 //?RMC 5/21/19 Above only true for not NEG purch types (not 1,5) SO
 //?  add OR to CASE to report them when the BOH was reported
 //?RMC 6/03/19 do above it not prev reported - added status 2=BOH MPR EST RPT
 //?Use New purch type from BOH if there
 CASE;

 // IF DB1.BOH MPR Purchase Type is *ALL values
 IF DB1.BOH_MPR_Purchase_Type = '01'/'02'/'03'/'04'/'05'/'06'/'07'/'08'/'09'/'10'/'11';

 // WRK.MPR Purchase Type = CVTVAR(DB1.BOH MPR Purchase Type)
 WRK.MPR_Purchase_Type = CVTVAR(DB1.BOH_MPR_Purchase_Type);

 //?Use New purch type from BOH if there
 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV MPR Prdcr Purch TpRT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235599;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(WRK.MPR_Purchase_Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // WRK.MPR Purchase Type = WRK.MPR Purchase Type Code
 WRK.MPR_Purchase_Type = WRK.MPR_Purchase_Type_Code;

 ENDIF;

 CASE;

 // IF DB1.BOH Kill Date EQ PAR.BOH MPR Reporting Date
 IF DB1.BOH_Kill_Date = PAR.BOH_MPR_Reporting_Date;

 // OR WRK.MPR Purchase Type is Negotiated
 OR ( WRK.MPR_Purchase_Type = 1;

 // OR WRK.MPR Purchase Type is PckSld Negotiated
 OR WRK.MPR_Purchase_Type = 5 );

 //?Do if not previously reported
 CASE;

 // IF DB1.BOH Status 2 is Not Yes
 IF DB1.BOH_MPR_EST_RPT_STS = *BLANK;

 EXECUTE FUNCTION(Rtv Head Delv Pln MPR RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1237896;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(WRK.Buy_Order_Head_Total_USR);
 {
  //?USER: Initialize routine

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Buy_Order_Head_Total_USR = *ZERO;

  //?USER: Process Data record

  // PAR.Buy Order Head Total  USR = PAR.Buy Order Head Total  USR + DB1.BOL Pln Head Delv
  PAR.Buy_Order_Head_Total_USR = PAR.Buy_Order_Head_Total_USR + DB1.BOL_Pln_Head_Delv;

 }

 CASE;

 // IF WRK.MPR Purchase Type is Negotiated
 IF WRK.MPR_Purchase_Type = 1;

 // PAR.MPR Est Purch Type 1 Hd = PAR.MPR Est Purch Type 1 Hd + WRK.Buy Order Head Total  USR
 PAR.MPR_Est_Purch_Type_1_Hd = PAR.MPR_Est_Purch_Type_1_Hd + WRK.Buy_Order_Head_Total_USR;

 // IF WRK.MPR Purchase Type is Oth Mkt Formula
 IF WRK.MPR_Purchase_Type = 2;

 // PAR.MPR Est Purch Type 2 Hd = PAR.MPR Est Purch Type 2 Hd + WRK.Buy Order Head Total  USR
 PAR.MPR_Est_Purch_Type_2_Hd = PAR.MPR_Est_Purch_Type_2_Hd + WRK.Buy_Order_Head_Total_USR;

 // IF WRK.MPR Purchase Type is Pork Mkt Formula
 IF WRK.MPR_Purchase_Type = 3;

 // PAR.MPR Est Purch Type 3 Hd = PAR.MPR Est Purch Type 3 Hd + WRK.Buy Order Head Total  USR
 PAR.MPR_Est_Purch_Type_3_Hd = PAR.MPR_Est_Purch_Type_3_Hd + WRK.Buy_Order_Head_Total_USR;

 // IF WRK.MPR Purchase Type is Oth Purchase Arng
 IF WRK.MPR_Purchase_Type = 4;

 // PAR.MPR Est Purch Type 4 Hd = PAR.MPR Est Purch Type 4 Hd + WRK.Buy Order Head Total  USR
 PAR.MPR_Est_Purch_Type_4_Hd = PAR.MPR_Est_Purch_Type_4_Hd + WRK.Buy_Order_Head_Total_USR;

 // IF WRK.MPR Purchase Type is PckSld Negotiated
 IF WRK.MPR_Purchase_Type = 5;

 // PAR.MPR Est Purch Type 5 Hd = PAR.MPR Est Purch Type 5 Hd + WRK.Buy Order Head Total  USR
 PAR.MPR_Est_Purch_Type_5_Hd = PAR.MPR_Est_Purch_Type_5_Hd + WRK.Buy_Order_Head_Total_USR;

 // IF WRK.MPR Purchase Type is PckSld Oth Mkt Formula
 IF WRK.MPR_Purchase_Type = 6;

 // PAR.MPR Est Purch Type 6 Hd = PAR.MPR Est Purch Type 6 Hd + WRK.Buy Order Head Total  USR
 PAR.MPR_Est_Purch_Type_6_Hd = PAR.MPR_Est_Purch_Type_6_Hd + WRK.Buy_Order_Head_Total_USR;

 // IF WRK.MPR Purchase Type is PckSld Pork Mkt Formula
 IF WRK.MPR_Purchase_Type = 7;

 // PAR.MPR Est Purch Type 7 Hd = PAR.MPR Est Purch Type 7 Hd + WRK.Buy Order Head Total  USR
 PAR.MPR_Est_Purch_Type_7_Hd = PAR.MPR_Est_Purch_Type_7_Hd + WRK.Buy_Order_Head_Total_USR;

 // IF WRK.MPR Purchase Type is PckSld Oth Purchase Arng
 IF WRK.MPR_Purchase_Type = 8;

 // PAR.MPR Est Purch Type 8 Hd = PAR.MPR Est Purch Type 8 Hd + WRK.Buy Order Head Total  USR
 PAR.MPR_Est_Purch_Type_8_Hd = PAR.MPR_Est_Purch_Type_8_Hd + WRK.Buy_Order_Head_Total_USR;

 // IF WRK.MPR Pur Purchase Type is Other Neg Formula
 IF WRK.MPR_Pur_Purchase_Type = 10;

 // PAR.MPR Est Purch Type 10 Hd = PAR.MPR Est Purch Type 10 Hd + WRK.Buy Order Head Total  USR
 PAR.MPR_Est_Purch_Type_10_Hd = PAR.MPR_Est_Purch_Type_10_Hd
 + WRK.Buy_Order_Head_Total_USR;

 // IF WRK.MPR Pur Purchase Type is PckSld Neg Formula
 IF WRK.MPR_Pur_Purchase_Type = 11;

 // PAR.MPR Est Purch Type 11 Hd = PAR.MPR Est Purch Type 11 Hd + WRK.Buy Order Head Total  USR
 PAR.MPR_Est_Purch_Type_11_Hd = PAR.MPR_Est_Purch_Type_11_Hd
 + WRK.Buy_Order_Head_Total_USR;

 ENDIF;

 EXECUTE FUNCTION(Chg BOH MPR Est Sts   CH) TYPE(CHGOBJ) FILE(PKAWCPP)           AB1351990;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER('Y');
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // PAR.RS Date Changed = JOB.*Job date
   PAR.RS_Date_Changed = JOB.*Job_date;

   // PAR.RS Time Changed = JOB.*Job time
   PAR.RS_Time_Changed = JOB.*Job_time;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

 ENDIF;

 ENDIF;

}


//?Create/Change MPR Daily Detail Record      LS119B
EXECUTE FUNCTION(Rtv MPR DlyPrchDtlCrt RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1236087;
PARAMETER(PAR.Company_Number_USR);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(LCL.BOH_MPR_Reporting_Time);
PARAMETER(PAR.MPR_Reporting_Time);
PARAMETER(LCL.Record_Added_Usr);
{
 //?USER: Initialize routine

 //?S13526  RMC 8/1/18 add company value for when to use state code from
 //? the site on the 1st mkt tattoo on the load
 //?PK0254  Create MPR Daily Purchase Detail File
 //?RMC 11/29/06 Changes to report Triumph Open daily buys
 //?  Initialize constant fields
 // PAR.MPR Class Code = CND.Barrows/Gilts
 PAR.MPR_Class_Code = 1;

 // PAR.MPR Reporting Date = PAR.BOH MPR Reporting Date
 PAR.MPR_Reporting_Date = PAR.BOH_MPR_Reporting_Date;

 // PAR.MPR Live Weight = CON.*ZERO
 PAR.MPR_Live_Weight = *ZERO;

 // PAR.MPR Base Price = CON.*ZERO
 PAR.MPR_Base_Price = *ZERO;

 //?* Retrieve Plant Establishment Number from the Company Values *
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('PLTESTNO');
 PARAMETER(PAR.MPR_Identification_Num);

 //?* Use state code on Site? currently 440 only- from Company Values *
 // Call program Rtv Company Values    XF.
 CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
 PARAMETER(PAR.BOH_Company_Number);
 PARAMETER('MPRORGST');
 PARAMETER(PAR.MPR_Origin_from_Site_USR);

 // PAR.Record Added Usr = CND.No
 PAR.Record_Added_Usr = 'N';

 //?USER: Process Data record

 //?R7805 11/04/16 RMC R7805 Use new BOH Purch Type
 CASE;

 // IF DB1.BOH MPR Purchase Type is *ALL values
 IF DB1.BOH_MPR_Purchase_Type = '01'/'02'/'03'/'04'/'05'/'06'/'07'/'08'/'09'/'10'/'11';

 // PAR.MPR Purchase Type = CVTVAR(DB1.BOH MPR Purchase Type)
 PAR.MPR_Purchase_Type = CVTVAR(DB1.BOH_MPR_Purchase_Type);

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV MPR Prdcr Purch TpRT) TYPE(RTVOBJ) FILE(PKE3CPP)           AB1235599;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(WRK.MPR_Purchase_Type_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // PAR.MPR Purchase Type = WRK.MPR Purchase Type Code
 PAR.MPR_Purchase_Type = WRK.MPR_Purchase_Type_Code;

 ENDIF;

 EXECUTE FUNCTION(Rtv PL State          RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1236090;
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(PAR.MPR_Origin);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // PAR.MPR Base Price = DB1.BOH Quoted Base Mkt Price
 PAR.MPR_Base_Price = DB1.BOH_Quoted_Base_Mkt_Price;

 //?Original code before HEDGE  - E3577 RMC 11/6/14
 CASE;

 // IF DB1.BOH Buy Order Type is Not Hedge
 IF DB1.BOH_Buy_Order_Type = 'C'/'I'/'O';

 CASE;

 // IF PAR.MPR Purchase Type is Packer Owned
 IF PAR.MPR_Purchase_Type = 9;

 //?Exclude '9' per jerry   11/29/16
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?11/30/16 added parms
 EXECUTE FUNCTION(Rtv Crt MPR Dly Dtl   RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1236092;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(PAR.MPR_Identification_Num);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(PAR.MPR_Reporting_Time);
 PARAMETER(PAR.MPR_Purchase_Type);
 PARAMETER(PAR.MPR_Live_Weight);
 PARAMETER(PAR.MPR_Class_Code);
 PARAMETER(PAR.MPR_Base_Price);
 PARAMETER(PAR.MPR_Origin);
 PARAMETER(PAR.Record_Added_Usr);
 PARAMETER(DB1.BOH_Payment_Type);
 PARAMETER(DB1.BOH_Buy_Order_Type);
 PARAMETER(DB1.BOH_Market_Add_Deduct);
 PARAMETER(DB1.BOH_Quote_Price_Type);
 PARAMETER(DB1.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(DB1.BOH_Commodity_Market_Code);
 PARAMETER(DB1.BOH_Commodity_Price_Group);
 PARAMETER(DB1.BOH_Market_Date_Method);
 PARAMETER(DB1.PC_Contract_Code);
 PARAMETER(DB1.PSC_Sub_Contract_Code);
 PARAMETER(DB1.PO_Option_Code);
 PARAMETER(DB1.CMP_Program_Code);
 PARAMETER(PAR.MPR_Origin_from_Site_USR);
 {
  //?USER: Process Data record

  //?RMC S11374 8.1.17 added chk to Reported to USDA, dont report again
  CASE;

  // IF DB1.RS Record Status is Active
  IF DB1.RS_Record_Status = 'A';

  // AND DB1.Reported to USDA is Blank
  AND DB1.Reported_to_USDA = *BLANK;

  //?rmc added the record status check 04/23/07
  // WRK.Buy Order Number Alpha = CVTVAR(DB1.BOH Buy Order Number)
  WRK.Buy_Order_Number_Alpha = CVTVAR(DB1.BOH_Buy_Order_Number);

  // WRK.Buy Order Load Alpha = CVTVAR(DB1.BOL Load Number)
  WRK.Buy_Order_Load_Alpha = CVTVAR(DB1.BOL_Load_Number);

  // PAR.MPR Lot Identification = CONCAT(WRK.Buy Order Number Alpha,WRK.Buy Order Load Alpha,CON.*ZE
  PAR.MPR_Lot_Identification = WRK.Buy_Order_Number_Alpha + WRK.Buy_Order_Load_Alpha (0);

  //?11/9/17
  CASE;

  // IF DB1.BOL Head Received is GT Zero
  IF DB1.BOL_Head_Received > *ZERO;

  // PAR.MPR Head = DB1.BOL Head Received
  PAR.MPR_Head = DB1.BOL_Head_Received;

  //?11/9/17
  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.MPR Head = DB1.BOL Pln Head Delv
  PAR.MPR_Head = DB1.BOL_Pln_Head_Delv;

  ENDIF;

  //?New code as of 11/29/06               RMC per Mike Lynch
  CASE;

  // IF PAR.MPR Base Price is Entered
  IF PAR.MPR_Base_Price <> 0;

  CASE;

  // IF PAR.BOH Buy Order Type is Open Market
  IF PAR.BOH_Buy_Order_Type = 'O';

  CASE;

  // IF PAR.BOH Quote Price Type is Carcass Price
  IF PAR.BOH_Quote_Price_Type = 'CP';

  // LCL.MPR Origin = PAR.MPR Origin
  LCL.MPR_Origin = PAR.MPR_Origin;

  //?Get state from site on first mkt tattoo
  CASE;

  // IF PAR.MPR Origin from Site USR is Yes
  IF PAR.MPR_Origin_from_Site_USR = 'Y';

  EXECUTE FUNCTION(Rtv Site ID f/mkt tt   RT) TYPE(RTVOBJ) FILE(PKDNCPP)          AB1346192;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.PS_State);
  {
   //?USER: Initialize routine

   // PAR.PS State = CON.*BLANK
   PAR.PS_State = *BLANK;

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?get the state for the site on the 1st mkt tattoo
   CASE;

   // IF DB1.PS Site ID is Not Blank
   IF DB1.PS_Site_ID <> *BLANK;

   EXECUTE FUNCTION(Rtv Class Type        RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1346193;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.TH_Hog_Class_Type);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.TH Hog Class Type is Market
   IF WRK.TH_Hog_Class_Type = 'M';

   EXECUTE FUNCTION(Rtv Site State WRTN   RT) TYPE(RTVOBJ) FILE(PLATREP)           AB1298470;
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(DB1.PS_Site_ID);
   PARAMETER(WRK.PS_State);
   PARAMETER(WRK.*Return_code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF WRK.PS State is Entered
   IF WRK.PS_State <> *BLANK;

   // PAR.PS State = WRK.PS State
   PAR.PS_State = WRK.PS_State;

   QUIT;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF WRK.PS State is Entered
  IF WRK.PS_State <> *BLANK;

  // LCL.MPR Origin = WRK.PS State
  LCL.MPR_Origin = WRK.PS_State;

  ENDIF;

  //?Get state from site on first mkt tattoo
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv State f/mpr       RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1346828;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.TH_State);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Market
   IF DB1.TH_Hog_Class_Type = 'M';

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  CASE;

  // IF WRK.TH State is Entered
  IF WRK.TH_State <> *BLANK;

  // LCL.MPR Origin = WRK.TH State
  LCL.MPR_Origin = WRK.TH_State;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(Rtv Crt/Chg Daily Dtl RT) TYPE(RTVOBJ) FILE(PKE9CPP)           AB1235939;
  PARAMETER(PAR.MPR_Identification_Num);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Reporting_Time);
  PARAMETER(PAR.MPR_Lot_Identification);
  PARAMETER(PAR.MPR_Purchase_Type);
  PARAMETER(PAR.MPR_Live_Weight);
  PARAMETER(PAR.MPR_Class_Code);
  PARAMETER(PAR.MPR_Head);
  PARAMETER(PAR.MPR_Base_Price);
  PARAMETER(LCL.MPR_Origin);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Daily Purch Dtl   CR) TYPE(CRTOBJ) FILE(PKE9CPP)           AB1235717;
   PARAMETER(PAR.MPR_Identification_Num);
   PARAMETER(PAR.MPR_Reporting_Date);
   PARAMETER(PAR.MPR_Reporting_Time);
   PARAMETER(PAR.MPR_Lot_Identification);
   PARAMETER(PAR.MPR_Purchase_Type);
   PARAMETER(PAR.MPR_Live_Weight);
   PARAMETER(PAR.MPR_Class_Code);
   PARAMETER(PAR.MPR_Head);
   PARAMETER(PAR.MPR_Base_Price);
   PARAMETER(PAR.MPR_Origin);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(PAR.RS_Job);
   PARAMETER(PAR.RS_Program);
   PARAMETER(PAR.RS_User_Added);
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Daily Purch Dtl   CH) TYPE(CHGOBJ) FILE(PKE9CPP)           AB1235718;
   PARAMETER(DB1.MPR_Identification_Num);
   PARAMETER(DB1.MPR_Reporting_Date);
   PARAMETER(DB1.MPR_Reporting_Time);
   PARAMETER(PAR.MPR_Lot_Identification);
   PARAMETER(PAR.MPR_Purchase_Type);
   PARAMETER(PAR.MPR_Live_Weight);
   PARAMETER(PAR.MPR_Class_Code);
   PARAMETER(PAR.MPR_Head);
   PARAMETER(PAR.MPR_Base_Price);
   PARAMETER(PAR.MPR_Origin);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?RMC 8.1.17 S11374 added so BOLs dont get reported twice
  EXECUTE FUNCTION(Chg Report to USDA    CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1237897;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('Y');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  CASE;

  // IF PAR.Record Added Usr is No
  IF PAR.Record_Added_Usr = 'N';

  // PAR.Record Added Usr = CND.Yes
  PAR.Record_Added_Usr = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

  //?Add New code as of 11/10/16 RMC per USDA: report what was on LS118C
  CASE;

  // IF PAR.MPR Base Price is EQ zero
  IF PAR.MPR_Base_Price = *ZERO;

  //?RMC 11.27.17  init  to -0-
  // WRK.TH CM Base Mkt Price = CON.*ZERO
  WRK.TH_CM_Base_Mkt_Price = *ZERO;

  EXECUTE FUNCTION(Rtv Base Prc/Hd f/MPR RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1329123;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.TH_Avg_Live_Wgt);
  PARAMETER(WRK.TH_CM_Base_Mkt_Price);
  PARAMETER(WRK.MPR_Pur_Head);
  {
   //?USER: Initialize routine

   // PAR.MPR Pur Head = CON.*ZERO
   PAR.MPR_Pur_Head = *ZERO;

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.TH CM Base Mkt Price is Not Zeros
   IF DB1.TH_CM_Base_Mkt_Price <> *ZERO;

   // PAR.TH CM Base Mkt Price = DB1.TH CM Base Mkt Price
   PAR.TH_CM_Base_Mkt_Price = DB1.TH_CM_Base_Mkt_Price;

   ENDIF;

   CASE;

   // IF DB1.TH Hog Class Type is Market
   IF DB1.TH_Hog_Class_Type = 'M';

   // PAR.MPR Pur Head = PAR.MPR Pur Head + DB1.TH Head Received
   PAR.MPR_Pur_Head = PAR.MPR_Pur_Head + DB1.TH_Head_Received;

   // PAR.TH Avg Live Wgt = DB1.TH Avg Live Wgt
   PAR.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

   ENDIF;

  }

  //?RMC 11/14/17 use delv head if recvd not there and kill date is reached
  CASE;

  // IF DB1.BOL Kill Date LE PAR.MPR Reporting Date
  IF DB1.BOL_Kill_Date <= PAR.MPR_Reporting_Date;

  CASE;

  // IF WRK.MPR Pur Head is eq Zero
  IF WRK.MPR_Pur_Head = *ZERO;

  // WRK.MPR Pur Head = DB1.BOL Pln Head Delv
  WRK.MPR_Pur_Head = DB1.BOL_Pln_Head_Delv;

  ENDIF;

  //?RMC 11/14/17 use delv head if recvd not there and kill date is reached
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.MPR Pur Head = CON.*ZERO
  WRK.MPR_Pur_Head = 0;

  ENDIF;

  //?Added 11/30/16 to get price for held over tt
  CASE;

  // IF WRK.TH CM Base Mkt Price is Zeros
  IF WRK.TH_CM_Base_Mkt_Price = *ZERO;

  EXECUTE FUNCTION(Rtv Base Price        RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1238247;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.BOL_Kill_Date);
  PARAMETER(LCL.TH_Avg_Live_Wgt);
  PARAMETER(WRK.TH_CM_Base_Mkt_Price);
  PARAMETER(PAR.BOH_Market_Add_Deduct);
  PARAMETER(PAR.BOH_Quote_Price_Type);
  PARAMETER(PAR.BOH_Quoted_Base_Mkt_Price);
  PARAMETER(PAR.BOH_Commodity_Market_Code);
  PARAMETER(PAR.BOH_Commodity_Price_Group);
  PARAMETER(PAR.BOH_Market_Date_Method);
  PARAMETER(PAR.PC_Contract_Code);
  PARAMETER(PAR.PSC_Sub_Contract_Code);
  PARAMETER(PAR.PO_Option_Code);
  PARAMETER(PAR.CMP_Program_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?S12837 RMC - get sub-ctr info for price calc. 3/26/18 cpy here from rcdfnd
   // LCL.PSC Market Percent   NU = CON.*ZERO
   LCL.PSC_Market_Percent_NU = *ZERO;

   // LCL.PSC Mkt Percent = CON.*ZERO
   LCL.PSC_Mkt_Percent = *ZERO;

   // LCL.PSC Break Even Percent = CON.*ZERO
   LCL.PSC_Break_Even_Percent = *ZERO;

   EXECUTE FUNCTION(Rtv PrSb-Cont Carc/Sm RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1259622;
   PARAMETER(PAR.PC_Contract_Code);
   PARAMETER(PAR.PSC_Sub_Contract_Code);
   PARAMETER(LCL.PSC_Market_Percent_NU);
   PARAMETER(LCL.PSC_Break_Even_Percent);
   PARAMETER(LCL.PSC_Mkt_Percent);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Call program Clc Base Mkt Price    XF.
   CALL PROGRAM(Clc Base Mkt Price    XF) ('PKJ7XFR');
   PARAMETER(PAR.BOH_Market_Add_Deduct);
   PARAMETER(PAR.BOH_Quote_Price_Type);
   PARAMETER(PAR.BOH_Quoted_Base_Mkt_Price);
   PARAMETER(PAR.BOH_Commodity_Market_Code);
   PARAMETER(PAR.BOH_Commodity_Price_Group);
   PARAMETER(PAR.BOH_Market_Date_Method);
   PARAMETER(PAR.PC_Contract_Code);
   PARAMETER(PAR.PSC_Sub_Contract_Code);
   PARAMETER(PAR.PO_Option_Code);
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.BOH_Buy_Order_Number);
   PARAMETER(PAR.BOL_Load_Number);
   PARAMETER(LCL.TH_Tattoo_Number);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(PAR.TH_Kill_Date);
   PARAMETER(LCL.TH_Live_Wgt);
   PARAMETER(PAR.TH_CM_Base_Mkt_Price);
   PARAMETER(LCL.PSC_Floor_Price);
   PARAMETER(LCL.PSC_Ceiling_Price);
   PARAMETER(LCL.PSC_Market_Percent_NU);
   PARAMETER(LCL.PSC_Mkt_Percent);
   PARAMETER(LCL.Market_Price_USR);
   PARAMETER(LCL.Pricing_UOM_USR);
   PARAMETER(LCL.Pricing_Date_USR);

   CASE;

   // IF PAR.TH CM Base Mkt Price EQ PAR.BOH Market Add/Deduct
   IF PAR.TH_CM_Base_Mkt_Price = PAR.BOH_Market_Add_Deduct;

   // PAR.TH CM Base Mkt Price = CON.*ZERO
   PAR.TH_CM_Base_Mkt_Price = *ZERO;

   ENDIF;

   //?11/01/17 RMC also check for date being hit with market date method=PPI
   CASE;

   // IF PAR.TH Kill Date GT JOB.*Job date
   IF PAR.TH_Kill_Date > JOB.*Job_date;

   //?11/9/17  dont chk market date method. its true for PP1 and  CUR
   CASE;

   // IF PAR.BOH Quoted Base Mkt Price is Zeros
   IF PAR.BOH_Quoted_Base_Mkt_Price = *ZERO;

   //?04/12/18 report a quoted base market priced load- dont zero it out
   // PAR.TH CM Base Mkt Price = CON.*ZERO
   PAR.TH_CM_Base_Mkt_Price = *ZERO;

   ENDIF;

   ENDIF;

   //?USER: Process Data record

   //?S00313 RMC - get sub-ctr info for price calc. it was 000000
   // LCL.PSC Market Percent   NU = CON.*ZERO
   LCL.PSC_Market_Percent_NU = *ZERO;

   // LCL.PSC Mkt Percent = CON.*ZERO
   LCL.PSC_Mkt_Percent = *ZERO;

   // LCL.PSC Break Even Percent = CON.*ZERO
   LCL.PSC_Break_Even_Percent = *ZERO;

   EXECUTE FUNCTION(Rtv PrSb-Cont Carc/Sm RT) TYPE(RTVOBJ) FILE(PKAQCPP)           AB1259622;
   PARAMETER(PAR.PC_Contract_Code);
   PARAMETER(PAR.PSC_Sub_Contract_Code);
   PARAMETER(LCL.PSC_Market_Percent_NU);
   PARAMETER(LCL.PSC_Break_Even_Percent);
   PARAMETER(LCL.PSC_Mkt_Percent);
   {
    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   // Call program Clc Base Mkt Price    XF.
   CALL PROGRAM(Clc Base Mkt Price    XF) ('PKJ7XFR');
   PARAMETER(PAR.BOH_Market_Add_Deduct);
   PARAMETER(PAR.BOH_Quote_Price_Type);
   PARAMETER(PAR.BOH_Quoted_Base_Mkt_Price);
   PARAMETER(PAR.BOH_Commodity_Market_Code);
   PARAMETER(PAR.BOH_Commodity_Price_Group);
   PARAMETER(PAR.BOH_Market_Date_Method);
   PARAMETER(PAR.PC_Contract_Code);
   PARAMETER(PAR.PSC_Sub_Contract_Code);
   PARAMETER(PAR.PO_Option_Code);
   PARAMETER(PAR.CMP_Program_Code);
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(DB1.TH_Kill_Date);
   PARAMETER(DB1.TH_Purchase_Date);
   PARAMETER(DB1.TH_Live_Wgt);
   PARAMETER(PAR.TH_CM_Base_Mkt_Price);
   PARAMETER(LCL.PSC_Floor_Price);
   PARAMETER(LCL.PSC_Ceiling_Price);
   PARAMETER(LCL.PSC_Market_Percent_NU);
   PARAMETER(LCL.PSC_Mkt_Percent);
   PARAMETER(LCL.Market_Price_USR);
   PARAMETER(LCL.Pricing_UOM_USR);
   PARAMETER(LCL.Pricing_Date_USR);

   //?IF PRICE = + - DED, THEN ZERO IT OUT
   CASE;

   // IF PAR.TH CM Base Mkt Price EQ PAR.BOH Market Add/Deduct
   IF PAR.TH_CM_Base_Mkt_Price = PAR.BOH_Market_Add_Deduct;

   // OR PAR.TH CM Base Mkt Price is LT 1.00
   OR PAR.TH_CM_Base_Mkt_Price < 1;

   //?RMC 4/25/06 added comp lt 1
   // PAR.TH CM Base Mkt Price = CON.*ZERO
   PAR.TH_CM_Base_Mkt_Price = *ZERO;

   ENDIF;

   //?11/01/17 RMC also check for date being hit with market date method=PPI
   CASE;

   // IF DB1.TH Purchase Date GT JOB.*Job date
   IF DB1.TH_Purchase_Date > JOB.*Job_date;

   CASE;

   // IF PAR.BOH Quoted Base Mkt Price is Zeros
   IF PAR.BOH_Quoted_Base_Mkt_Price = *ZERO;

   //?04/12/18 report a quoted base market priced load- dont zero it out
   //?11/9/17  dont chk market date method. its true for PP1 and  CUR
   // PAR.TH CM Base Mkt Price = CON.*ZERO
   PAR.TH_CM_Base_Mkt_Price = *ZERO;

   ENDIF;

   ENDIF;

   // PAR.TH Avg Live Wgt = DB1.TH Avg Live Wgt
   PAR.TH_Avg_Live_Wgt = DB1.TH_Avg_Live_Wgt;

   QUIT;

  }

  ENDIF;

  CASE;

  // IF WRK.MPR Pur Head is ne Zero
  IF WRK.MPR_Pur_Head <> 0;

  // AND WRK.TH CM Base Mkt Price is Not Zeros
  AND WRK.TH_CM_Base_Mkt_Price <> *ZERO;

  //?RMC 11/21/17 added chk for price too
  //?RMC 11.22.16 dont output live wgt since this is Carcass priced
  // LCL.MPR Origin = PAR.MPR Origin
  LCL.MPR_Origin = PAR.MPR_Origin;

  //?Get state from site on first mkt tattoo
  CASE;

  // IF PAR.MPR Origin from Site USR is Yes
  IF PAR.MPR_Origin_from_Site_USR = 'Y';

  EXECUTE FUNCTION(Rtv Site ID f/mkt tt   RT) TYPE(RTVOBJ) FILE(PKDNCPP)          AB1346192;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.PS_State);
  {
   //?USER: Initialize routine

   // PAR.PS State = CON.*BLANK
   PAR.PS_State = *BLANK;

   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   //?get the state for the site on the 1st mkt tattoo
   CASE;

   // IF DB1.PS Site ID is Not Blank
   IF DB1.PS_Site_ID <> *BLANK;

   EXECUTE FUNCTION(Rtv Class Type        RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1346193;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.TH_Hog_Class_Type);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF WRK.TH Hog Class Type is Market
   IF WRK.TH_Hog_Class_Type = 'M';

   EXECUTE FUNCTION(Rtv Site State WRTN   RT) TYPE(RTVOBJ) FILE(PLATREP)           AB1298470;
   PARAMETER(DB1.PD_Producer_Code);
   PARAMETER(DB1.PS_Site_ID);
   PARAMETER(WRK.PS_State);
   PARAMETER(WRK.*Return_code);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   CASE;

   // IF WRK.PS State is Entered
   IF WRK.PS_State <> *BLANK;

   // PAR.PS State = WRK.PS State
   PAR.PS_State = WRK.PS_State;

   QUIT;

   ENDIF;

   ENDIF;

   ENDIF;

  }

  CASE;

  // IF WRK.PS State is Entered
  IF WRK.PS_State <> *BLANK;

  // LCL.MPR Origin = WRK.PS State
  LCL.MPR_Origin = WRK.PS_State;

  ENDIF;

  //?Get state from site on first mkt tattoo
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv State f/mpr       RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1346828;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(WRK.TH_State);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   CASE;

   // IF DB1.TH Hog Class Type is Market
   IF DB1.TH_Hog_Class_Type = 'M';

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

   ENDIF;

  }

  CASE;

  // IF WRK.TH State is Entered
  IF WRK.TH_State <> *BLANK;

  // LCL.MPR Origin = WRK.TH State
  LCL.MPR_Origin = WRK.TH_State;

  ENDIF;

  ENDIF;

  EXECUTE FUNCTION(Rtv Crt/Chg Daily Dtl RT) TYPE(RTVOBJ) FILE(PKE9CPP)           AB1235939;
  PARAMETER(PAR.MPR_Identification_Num);
  PARAMETER(PAR.MPR_Reporting_Date);
  PARAMETER(PAR.MPR_Reporting_Time);
  PARAMETER(PAR.MPR_Lot_Identification);
  PARAMETER(PAR.MPR_Purchase_Type);
  PARAMETER(*ZERO);
  PARAMETER(PAR.MPR_Class_Code);
  PARAMETER(WRK.MPR_Pur_Head);
  PARAMETER(WRK.TH_CM_Base_Mkt_Price);
  PARAMETER(LCL.MPR_Origin);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing if Data record not found

   EXECUTE FUNCTION(Crt Daily Purch Dtl   CR) TYPE(CRTOBJ) FILE(PKE9CPP)           AB1235717;
   PARAMETER(PAR.MPR_Identification_Num);
   PARAMETER(PAR.MPR_Reporting_Date);
   PARAMETER(PAR.MPR_Reporting_Time);
   PARAMETER(PAR.MPR_Lot_Identification);
   PARAMETER(PAR.MPR_Purchase_Type);
   PARAMETER(PAR.MPR_Live_Weight);
   PARAMETER(PAR.MPR_Class_Code);
   PARAMETER(PAR.MPR_Head);
   PARAMETER(PAR.MPR_Base_Price);
   PARAMETER(PAR.MPR_Origin);
   PARAMETER(*BLANK);
   PARAMETER(*ZERO);
   PARAMETER(*ZERO);
   PARAMETER(PAR.RS_Record_Status);
   PARAMETER(PAR.RS_Job);
   PARAMETER(PAR.RS_Program);
   PARAMETER(PAR.RS_User_Added);
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?Execute internal function

     // PAR.RS Record Status = CND.Active
     PAR.RS_Record_Status = 'A';

     // PAR.RS User Added = JOB.*USER
     PAR.RS_User_Added = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Added);
     PARAMETER(PAR.RS_Time_Added);

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Daily Purch Dtl   CH) TYPE(CHGOBJ) FILE(PKE9CPP)           AB1235718;
   PARAMETER(DB1.MPR_Identification_Num);
   PARAMETER(DB1.MPR_Reporting_Date);
   PARAMETER(DB1.MPR_Reporting_Time);
   PARAMETER(PAR.MPR_Lot_Identification);
   PARAMETER(PAR.MPR_Purchase_Type);
   PARAMETER(PAR.MPR_Live_Weight);
   PARAMETER(PAR.MPR_Class_Code);
   PARAMETER(PAR.MPR_Head);
   PARAMETER(PAR.MPR_Base_Price);
   PARAMETER(PAR.MPR_Origin);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // Call program Rtv System Date & Tim UP.
     CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
     PARAMETER(PAR.RS_Date_Changed);
     PARAMETER(PAR.RS_Time_Changed);

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?RMC 8.1.17 S11374 added so BOLs dont get reported twice
  EXECUTE FUNCTION(Chg Report to USDA    CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1237897;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER('Y');
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  CASE;

  // IF PAR.Record Added Usr is No
  IF PAR.Record_Added_Usr = 'N';

  // PAR.Record Added Usr = CND.Yes
  PAR.Record_Added_Usr = 'Y';

  ENDIF;

  ENDIF;

  ENDIF;

  ENDIF;

 }

 ENDIF;

 ENDIF;

}


//?Rcd may not been added if this is a rerun, so if rcds exist, set to Yes
CASE;

// IF LCL.Record Added Usr is No
IF LCL.Record_Added_Usr = 'N';

EXECUTE FUNCTION(Rtv Val to Add        RT) TYPE(RTVOBJ) FILE(PKE9CPP)           AB1339594;
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(PAR.MPR_Reporting_Time);
PARAMETER(LCL.Record_Added_Usr);
{
 //?USER: Processing if Data record not found

 // PAR.Record Added Usr = CND.No
 PAR.Record_Added_Usr = 'N';

 //?USER: Process Data record

 // PAR.Record Added Usr = CND.Yes
 PAR.Record_Added_Usr = 'Y';

}


ENDIF;

//?If no record was added, set flag
CASE;

// IF LCL.Record Added Usr is No
IF LCL.Record_Added_Usr = 'N';

// PAR.MPR LS119B file created = CND.No
PAR.MPR_LS119B_file_created = 'N';

//?If no record was added, set flag
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.MPR LS119B file created = CND.Yes
PAR.MPR_LS119B_file_created = 'Y';

EXECUTE FUNCTION(Rtv Act for Summary   RT) TYPE(RTVOBJ) FILE(PKE9CPP)           AB1276772;
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(PAR.MPR_Reporting_Time);
PARAMETER(PAR.MPR_Act_Purch_Type_5_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_6_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_7_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_11_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_11_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_8_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_1_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_2_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_3_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_4_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_10_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_10_Hd);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.MPR Purchase Type is Negotiated
 IF DB1.MPR_Purchase_Type = 1;

 // PAR.MPR Act Purch Type 1 Hd = PAR.MPR Act Purch Type 1 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_1_Hd = PAR.MPR_Act_Purch_Type_1_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is Oth Mkt Formula
 IF DB1.MPR_Purchase_Type = 2;

 // PAR.MPR Act Purch Type 2 Hd = PAR.MPR Act Purch Type 2 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_2_Hd = PAR.MPR_Act_Purch_Type_2_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is Pork Mkt Formula
 IF DB1.MPR_Purchase_Type = 3;

 // PAR.MPR Act Purch Type 3 Hd = PAR.MPR Act Purch Type 3 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_3_Hd = PAR.MPR_Act_Purch_Type_3_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is Oth Purchase Arng
 IF DB1.MPR_Purchase_Type = 4;

 // PAR.MPR Act Purch Type 4 Hd = PAR.MPR Act Purch Type 4 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_4_Hd = PAR.MPR_Act_Purch_Type_4_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is PckSld Negotiated
 IF DB1.MPR_Purchase_Type = 5;

 // PAR.MPR Act Purch Type 5 Hd = PAR.MPR Act Purch Type 5 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_5_Hd = PAR.MPR_Act_Purch_Type_5_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is PckSld Oth Mkt Formula
 IF DB1.MPR_Purchase_Type = 6;

 // PAR.MPR Act Purch Type 6 Hd = PAR.MPR Act Purch Type 6 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_6_Hd = PAR.MPR_Act_Purch_Type_6_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is PckSld Pork Mkt Formula
 IF DB1.MPR_Purchase_Type = 7;

 // PAR.MPR Act Purch Type 7 Hd = PAR.MPR Act Purch Type 7 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_7_Hd = PAR.MPR_Act_Purch_Type_7_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is PckSld Oth Purchase Arng
 IF DB1.MPR_Purchase_Type = 8;

 // PAR.MPR Act Purch Type 8 Hd = PAR.MPR Act Purch Type 8 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_8_Hd = PAR.MPR_Act_Purch_Type_8_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is Packer Owned
 IF DB1.MPR_Purchase_Type = 9;

 //?punt
 // IF DB1.MPR Purchase Type is Other Neg Formula
 IF DB1.MPR_Purchase_Type = 10;

 // PAR.MPR Act Purch Type 10 Hd = PAR.MPR Act Purch Type 10 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_10_Hd = PAR.MPR_Act_Purch_Type_10_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is PckSld Neg Formula
 IF DB1.MPR_Purchase_Type = 11;

 // PAR.MPR Act Purch Type 11 Hd = PAR.MPR Act Purch Type 11 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_11_Hd = PAR.MPR_Act_Purch_Type_11_Hd + DB1.MPR_Head;

 ENDIF;

}


ENDIF;

//?RMC 02/16/07 If afternoon Reportng Time (=2),add morning's actuals to summ
CASE;

// IF PAR.MPR Reporting Time is Afternoon Reporting Time
IF PAR.MPR_Reporting_Time = 2;

// WRK.MPR Reporting Time = CND.Morning Reporting Time
WRK.MPR_Reporting_Time = 1;

EXECUTE FUNCTION(Rtv Act for Summary   RT) TYPE(RTVOBJ) FILE(PKE9CPP)           AB1276772;
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(WRK.MPR_Reporting_Time);
PARAMETER(PAR.MPR_Act_Purch_Type_5_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_6_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_7_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_11_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_11_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_8_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_1_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_2_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_3_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_4_Hd);
PARAMETER(PAR.MPR_Est_Purch_Type_10_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_10_Hd);
{
 //?USER: Process Data record

 CASE;

 // IF DB1.MPR Purchase Type is Negotiated
 IF DB1.MPR_Purchase_Type = 1;

 // PAR.MPR Act Purch Type 1 Hd = PAR.MPR Act Purch Type 1 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_1_Hd = PAR.MPR_Act_Purch_Type_1_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is Oth Mkt Formula
 IF DB1.MPR_Purchase_Type = 2;

 // PAR.MPR Act Purch Type 2 Hd = PAR.MPR Act Purch Type 2 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_2_Hd = PAR.MPR_Act_Purch_Type_2_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is Pork Mkt Formula
 IF DB1.MPR_Purchase_Type = 3;

 // PAR.MPR Act Purch Type 3 Hd = PAR.MPR Act Purch Type 3 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_3_Hd = PAR.MPR_Act_Purch_Type_3_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is Oth Purchase Arng
 IF DB1.MPR_Purchase_Type = 4;

 // PAR.MPR Act Purch Type 4 Hd = PAR.MPR Act Purch Type 4 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_4_Hd = PAR.MPR_Act_Purch_Type_4_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is PckSld Negotiated
 IF DB1.MPR_Purchase_Type = 5;

 // PAR.MPR Act Purch Type 5 Hd = PAR.MPR Act Purch Type 5 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_5_Hd = PAR.MPR_Act_Purch_Type_5_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is PckSld Oth Mkt Formula
 IF DB1.MPR_Purchase_Type = 6;

 // PAR.MPR Act Purch Type 6 Hd = PAR.MPR Act Purch Type 6 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_6_Hd = PAR.MPR_Act_Purch_Type_6_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is PckSld Pork Mkt Formula
 IF DB1.MPR_Purchase_Type = 7;

 // PAR.MPR Act Purch Type 7 Hd = PAR.MPR Act Purch Type 7 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_7_Hd = PAR.MPR_Act_Purch_Type_7_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is PckSld Oth Purchase Arng
 IF DB1.MPR_Purchase_Type = 8;

 // PAR.MPR Act Purch Type 8 Hd = PAR.MPR Act Purch Type 8 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_8_Hd = PAR.MPR_Act_Purch_Type_8_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is Packer Owned
 IF DB1.MPR_Purchase_Type = 9;

 //?punt
 // IF DB1.MPR Purchase Type is Other Neg Formula
 IF DB1.MPR_Purchase_Type = 10;

 // PAR.MPR Act Purch Type 10 Hd = PAR.MPR Act Purch Type 10 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_10_Hd = PAR.MPR_Act_Purch_Type_10_Hd + DB1.MPR_Head;

 // IF DB1.MPR Purchase Type is PckSld Neg Formula
 IF DB1.MPR_Purchase_Type = 11;

 // PAR.MPR Act Purch Type 11 Hd = PAR.MPR Act Purch Type 11 Hd + DB1.MPR Head
 PAR.MPR_Act_Purch_Type_11_Hd = PAR.MPR_Act_Purch_Type_11_Hd + DB1.MPR_Head;

 ENDIF;

}


ENDIF;

//?Create/Change MPR Daily Summary Record  LS119A (must go with LS119B)
//?create blank rcd -- for all plants now. use this sts to control 8.1.17
// LCL.Status 1 = CND.Yes
LCL.Status_1 = 'Y';

//?Crt file if necessary, dont create blank record. Crt blank for both 8.1.17
CASE;

// IF PAR.MPR Act Purch Type 1 Hd is ne Zero
IF PAR.MPR_Act_Purch_Type_1_Hd <> 0;

// OR PAR.MPR Act Purch Type 2 Hd is ne Zero
OR PAR.MPR_Act_Purch_Type_2_Hd <> 0;

// OR PAR.MPR Act Purch Type 3 Hd is ne Zero
OR PAR.MPR_Act_Purch_Type_3_Hd <> 0;

// OR PAR.MPR Act Purch Type 4 Hd is ne Zero
OR PAR.MPR_Act_Purch_Type_4_Hd <> 0;

// OR PAR.MPR Act Purch Type 5 Hd is ne Zero
OR PAR.MPR_Act_Purch_Type_5_Hd <> 0;

// OR PAR.MPR Act Purch Type 6 Hd is ne Zero
OR PAR.MPR_Act_Purch_Type_6_Hd <> 0;

// OR PAR.MPR Act Purch Type 7 Hd is ne Zero
OR PAR.MPR_Act_Purch_Type_7_Hd <> 0;

// OR PAR.MPR Act Purch Type 8 Hd is ne Zero
OR PAR.MPR_Act_Purch_Type_8_Hd <> 0;

// OR PAR.MPR Est Purch Type 1 Hd is ne Zero
OR PAR.MPR_Est_Purch_Type_1_Hd <> 0;

// OR PAR.MPR Est Purch Type 2 Hd is ne Zero
OR PAR.MPR_Est_Purch_Type_2_Hd <> 0;

// OR PAR.MPR Est Purch Type 3 Hd is ne Zero
OR PAR.MPR_Est_Purch_Type_3_Hd <> 0;

// OR PAR.MPR Est Purch Type 4 Hd is ne Zero
OR PAR.MPR_Est_Purch_Type_4_Hd <> 0;

// OR PAR.MPR Est Purch Type 5 Hd is ne Zero
OR PAR.MPR_Est_Purch_Type_5_Hd <> 0;

// OR PAR.MPR Est Purch Type 6 Hd is ne Zero
OR PAR.MPR_Est_Purch_Type_6_Hd <> 0;

// OR PAR.MPR Est Purch Type 7 Hd is ne Zero
OR PAR.MPR_Est_Purch_Type_7_Hd <> 0;

// OR PAR.MPR Est Purch Type 8 Hd is ne Zero
OR PAR.MPR_Est_Purch_Type_8_Hd <> 0;

// OR PAR.MPR LS119B file created is Yes
OR PAR.MPR_LS119B_file_created = 'Y';

// OR LCL.Status 1 is Yes
OR LCL.Status_1 = 'Y';

// OR PAR.MPR Act Purch Type 10 Hd is ne Zero
OR PAR.MPR_Act_Purch_Type_10_Hd <> 0;

// OR PAR.MPR Act Purch Type 11 Hd is ne Zero
OR PAR.MPR_Act_Purch_Type_11_Hd <> 0;

// OR PAR.MPR Est Purch Type 10 Hd is ne Zero
OR PAR.MPR_Est_Purch_Type_10_Hd <> 0;

// OR PAR.MPR Est Purch Type 11 Hd is ne Zero
OR PAR.MPR_Est_Purch_Type_11_Hd <> 0;

// PAR.MPR LS119A file created = CND.Yes
PAR.MPR_LS119A_file_created = 'Y';

//?For afternoon run, the Actual also goes in to the Estimated Hd
//?For AM run, the estimated is the estimated              11/03/17
//?RMC 8/19/20 Jerry L wants the Est to be the Actual on the AM run too
//?as of NOW 11/3/17   -- changed 8/19/20 AM and afternoon run- both actual
CASE;

// IF PAR.MPR Reporting Time is Morning Reporting Time
IF PAR.MPR_Reporting_Time = 1;

EXECUTE FUNCTION(Rtv Crt/Chg Daily Sm  RT) TYPE(RTVOBJ) FILE(PKE8CPP)           AB1235938;
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(PAR.MPR_Reporting_Time);
PARAMETER(PAR.MPR_Act_Purch_Type_5_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_6_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_7_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_8_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_5_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_6_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_7_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_11_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_11_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_8_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_1_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_2_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_3_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_4_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_1_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_2_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_3_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_4_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_10_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_10_Hd);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Daily Purch Sum   CR) TYPE(CRTOBJ) FILE(PKE8CPP)           AB1235720;
 PARAMETER(PAR.MPR_Identification_Num);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(PAR.MPR_Reporting_Time);
 PARAMETER(PAR.MPR_Est_Purch_Type_5_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_6_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_7_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_8_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_5_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_6_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_7_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_11_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_11_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_8_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_1_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_2_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_3_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_4_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_1_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_2_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_3_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_4_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_10_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_10_Hd);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Daily Purch Sum   CH) TYPE(CHGOBJ) FILE(PKE8CPP)           AB1235721;
 PARAMETER(DB1.MPR_Identification_Num);
 PARAMETER(DB1.MPR_Reporting_Date);
 PARAMETER(DB1.MPR_Reporting_Time);
 PARAMETER(PAR.MPR_Est_Purch_Type_5_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_6_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_7_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_8_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_5_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_6_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_7_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_11_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_11_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_8_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_1_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_2_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_3_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_4_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_1_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_2_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_3_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_4_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_10_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_10_Hd);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


//?as of NOW 11/3/17   -- changed 8/19/20 AM and afternoon run- both actual
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Crt/Chg Daily Sm  RT) TYPE(RTVOBJ) FILE(PKE8CPP)           AB1235938;
PARAMETER(PAR.MPR_Identification_Num);
PARAMETER(PAR.MPR_Reporting_Date);
PARAMETER(PAR.MPR_Reporting_Time);
PARAMETER(PAR.MPR_Act_Purch_Type_5_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_6_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_7_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_8_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_5_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_6_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_7_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_11_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_11_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_8_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_1_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_2_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_3_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_4_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_1_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_2_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_3_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_4_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_10_Hd);
PARAMETER(PAR.MPR_Act_Purch_Type_10_Hd);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
{
 //?USER: Processing if Data record not found

 EXECUTE FUNCTION(Crt Daily Purch Sum   CR) TYPE(CRTOBJ) FILE(PKE8CPP)           AB1235720;
 PARAMETER(PAR.MPR_Identification_Num);
 PARAMETER(PAR.MPR_Reporting_Date);
 PARAMETER(PAR.MPR_Reporting_Time);
 PARAMETER(PAR.MPR_Est_Purch_Type_5_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_6_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_7_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_8_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_5_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_6_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_7_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_11_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_11_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_8_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_1_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_2_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_3_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_4_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_1_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_2_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_3_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_4_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_10_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_10_Hd);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp-Sys Dt  IF) TYPE(EXCINTFUN)                      AB1237005;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Added);
   PARAMETER(PAR.RS_Time_Added);

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 //?USER: Process Data record

 EXECUTE FUNCTION(Chg Daily Purch Sum   CH) TYPE(CHGOBJ) FILE(PKE8CPP)           AB1235721;
 PARAMETER(DB1.MPR_Identification_Num);
 PARAMETER(DB1.MPR_Reporting_Date);
 PARAMETER(DB1.MPR_Reporting_Time);
 PARAMETER(PAR.MPR_Est_Purch_Type_5_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_6_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_7_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_8_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_5_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_6_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_7_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_11_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_11_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_8_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_1_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_2_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_3_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_4_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_1_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_2_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_3_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_4_Hd);
 PARAMETER(PAR.MPR_Est_Purch_Type_10_Hd);
 PARAMETER(PAR.MPR_Act_Purch_Type_10_Hd);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  {
   //?Execute internal function

   // PAR.RS User Changed = JOB.*USER
   PAR.RS_User_Changed = JOB.*USER;

   // Call program Rtv System Date & Tim UP.
   CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
   PARAMETER(PAR.RS_Date_Changed);
   PARAMETER(PAR.RS_Time_Changed);

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

  }

 }

}


ENDIF;

//?Crt file if necessary, dont create blank record. Crt blank for both 8.1.17
// IF *OTHERWISE
IF *OTHERWISE;

// PAR.MPR LS119A file created = CND.No
PAR.MPR_LS119A_file_created = 'N';

ENDIF;

