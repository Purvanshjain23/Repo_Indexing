// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPGSEFR
// ?Date: 14.08.2025 Time: 03:40:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('C/S');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?***** Change Log and Comments
DO;

//?*****
//?** 05/02/2007 LJB OMS011
//?** Remove Mix, Vol Margins, and Vol Pounds from the file and
//?** the screen. Pass TF Class Group to the Header edit pgm.
//?*****
ENDDO;

//?USER: Initialize subfile record (new record)

// RCD.Record Status = CND.Active
RCD.Record_Status = 'A';

//?CALC: Subfile control function fields

CASE;

// IF CTL.TF Classification Code is Entered
IF CTL.TF_Classification_Code <> *BLANK;

// AND CTL.Sequence Number is zero
AND CTL.Sequence_Number = *ZERO;

EXECUTE FUNCTION(Rtv TF Class Info     RT) TYPE(RTVOBJ) FILE(PPAMREP)           AC1719727;
PARAMETER(CTL.TF_Classification_Code);
PARAMETER(CTL.Sequence_Number);
PARAMETER(NLL.TF_Class_Group);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Validate subfile control

CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program Prt TF Class          PV.
CALL PROGRAM(Prt TF Class          PV) ('PPHXPVR');

ENDIF;

//?USER: Validate subfile record fields

//?5=Edit Margin Adjustment Header
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

//?** Pass TF Class Group to the Header edit pgm   05/03/2007 LJB
// Call program Edt TF Margin Adj Hdr EF.
CALL PROGRAM(Edt TF Margin Adj Hdr EF) ('PPGWEFR');
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(RCD.Sequence_Number);
PARAMETER(RCD.TF_Class_Group);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?4=Delete function (Handle and not at the normal delete)
CASE;

// IF RCD.*SFLSEL is *Delete#1
IF RCD.*SFLSEL = '4';

// LCL.Confirmed Intr Msg Usr = CON.Delete TF Classification
LCL.Confirmed_Intr_Msg_Usr_1 = 'Delete TF Classification';

// LCL.Confirmed Intr Msg Usr = CONCAT(LCL.Confirmed Intr Msg Usr,RCD.TF Classification Code,CON.1)
LCL.Confirmed_Intr_Msg_Usr_1 = LCL.Confirmed_Intr_Msg_Usr_1 + RCD.TF_Classification_Code (1);

// LCL.Confirmed Intr Msg Usr = CONCAT(LCL.Confirmed Intr Msg Usr,CON.?,CON.*ZERO)
LCL.Confirmed_Intr_Msg_Usr_1 = LCL.Confirmed_Intr_Msg_Usr_1 + '?' (0);

// Call program Pmt Confirmed IntrSel PV.
CALL PROGRAM(Pmt Confirmed IntrSel PV) ('PMS6PVR');
PARAMETER(LCL.Confirmed_Intr_Usr);
PARAMETER(LCL.Confirmed_Intr_Msg_Usr_1);
PARAMETER(LCL.Confirmed_Intr_Msg_Usr_2);
PARAMETER(LCL.Confirmed_Intr_Msg_Usr_3);

CASE;

// IF LCL.Confirmed Intr Usr is Confirm
IF LCL.Confirmed_Intr_Usr = 'Y';

EXECUTE FUNCTION(Del TF Classification DL) TYPE(DLTOBJ) FILE(PPAMREP)           AC1707546;
PARAMETER(RCD.TF_Classification_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Del TF Margin Adj Hdr RT) TYPE(RTVOBJ) FILE(PPANREP)           AC1707768;
 PARAMETER(PAR.TF_Classification_Code);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Del TF Margin Adj Dtl RT) TYPE(RTVOBJ) FILE(PPAOREP)           AC1707769;
  PARAMETER(DB1.TF_Classification_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   EXECUTE FUNCTION(Del Margin Adj Item   RT) TYPE(RTVOBJ) FILE(PPAPREP)           AC1707770;
   PARAMETER(DB1.TF_Classification_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.Record_Status);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Del Margin Adj Item   DL) TYPE(DLTOBJ) FILE(PPAPREP)           AC1707647;
    PARAMETER(DB1.TF_Classification_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Item_Code);
    //?** Set return code to normal if no items to delete
    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

   EXECUTE FUNCTION(Del TF Margin Adj Dtl DL) TYPE(DLTOBJ) FILE(PPAOREP)           AC1707578;
   PARAMETER(DB1.TF_Classification_Code);
   PARAMETER(DB1.Item_Structure_Type_Code);
   PARAMETER(DB1.Item_Structure_Group_Code);
   PARAMETER(DB1.Item_Structure_Class_Code);
   PARAMETER(DB1.TF_Class_Group);
   PARAMETER(DB1.Mix_Sub_Group_Code);
   PARAMETER(DB1.Sequence_Number);
   PARAMETER(DB1.Include_Sts);
   PARAMETER(DB1.Include_In_Mix);
   PARAMETER(DB1.Include_In_Vol_Margins);
   PARAMETER(DB1.Include_In_Inventory);
   PARAMETER(DB1.Converted_Raw_Material);
   PARAMETER(DB1.TFMC_Group_Code);
   PARAMETER(*MISSING);
   PARAMETER(DB1.Co_Own_Producing_Co_Code);
   PARAMETER(DB1.TFMAGD_Unused_Sts_2);
   PARAMETER(DB1.TFMAGD_Unused_Sts_3);
   PARAMETER(DB1.TFMAGD_Unused_Sts_4);
   PARAMETER(DB1.TFMAGD_Unused_Sts_5);
   PARAMETER(DB1.TFMAGD_Unused_Sts_6);
   PARAMETER(DB1.TFMAGD_Unused_Sts_7);
   PARAMETER(DB1.TFMAGD_Unused_Sts_8);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(*MISSING);
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Create_Date);
   PARAMETER(DB1.Create_Time);
   PARAMETER(DB1.Create_User);
   PARAMETER(DB1.Create_Program);
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Del Margin Adj Item   RT) TYPE(RTVOBJ) FILE(PPAPREP)           AC1707770;
    PARAMETER(PAR.TF_Classification_Code);
    PARAMETER(PAR.Item_Structure_Type_Code);
    PARAMETER(PAR.Item_Structure_Group_Code);
    PARAMETER(PAR.Item_Structure_Class_Code);
    PARAMETER(PAR.Record_Status);
    {
     //?USER: Process Data record

     EXECUTE FUNCTION(Del Margin Adj Item   DL) TYPE(DLTOBJ) FILE(PPAPREP)           AC1707647;
     PARAMETER(DB1.TF_Classification_Code);
     PARAMETER(DB1.Item_Structure_Type_Code);
     PARAMETER(DB1.Item_Structure_Group_Code);
     PARAMETER(DB1.Item_Structure_Class_Code);
     PARAMETER(DB1.Item_Code);
     //?** Set return code to normal if no items to delete
     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    // PGM.*Return code = CND.*Normal
    PGM.*Return_code = *BLANK;

   }

  }

  EXECUTE FUNCTION(Del TF Margin Adj Hdr DL) TYPE(DLTOBJ) FILE(PPANREP)           AC1707636;
  PARAMETER(DB1.TF_Classification_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Del TF Margin Adj Dtl RT) TYPE(RTVOBJ) FILE(PPAOREP)           AC1707769;
   PARAMETER(PAR.TF_Classification_Code);
   PARAMETER(PAR.Item_Structure_Type_Code);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Del Margin Adj Item   RT) TYPE(RTVOBJ) FILE(PPAPREP)           AC1707770;
    PARAMETER(DB1.TF_Classification_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.Record_Status);
    {
     //?USER: Process Data record

     EXECUTE FUNCTION(Del Margin Adj Item   DL) TYPE(DLTOBJ) FILE(PPAPREP)           AC1707647;
     PARAMETER(DB1.TF_Classification_Code);
     PARAMETER(DB1.Item_Structure_Type_Code);
     PARAMETER(DB1.Item_Structure_Group_Code);
     PARAMETER(DB1.Item_Structure_Class_Code);
     PARAMETER(DB1.Item_Code);
     //?** Set return code to normal if no items to delete
     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

    EXECUTE FUNCTION(Del TF Margin Adj Dtl DL) TYPE(DLTOBJ) FILE(PPAOREP)           AC1707578;
    PARAMETER(DB1.TF_Classification_Code);
    PARAMETER(DB1.Item_Structure_Type_Code);
    PARAMETER(DB1.Item_Structure_Group_Code);
    PARAMETER(DB1.Item_Structure_Class_Code);
    PARAMETER(DB1.TF_Class_Group);
    PARAMETER(DB1.Mix_Sub_Group_Code);
    PARAMETER(DB1.Sequence_Number);
    PARAMETER(DB1.Include_Sts);
    PARAMETER(DB1.Include_In_Mix);
    PARAMETER(DB1.Include_In_Vol_Margins);
    PARAMETER(DB1.Include_In_Inventory);
    PARAMETER(DB1.Converted_Raw_Material);
    PARAMETER(DB1.TFMC_Group_Code);
    PARAMETER(*MISSING);
    PARAMETER(DB1.Co_Own_Producing_Co_Code);
    PARAMETER(DB1.TFMAGD_Unused_Sts_2);
    PARAMETER(DB1.TFMAGD_Unused_Sts_3);
    PARAMETER(DB1.TFMAGD_Unused_Sts_4);
    PARAMETER(DB1.TFMAGD_Unused_Sts_5);
    PARAMETER(DB1.TFMAGD_Unused_Sts_6);
    PARAMETER(DB1.TFMAGD_Unused_Sts_7);
    PARAMETER(DB1.TFMAGD_Unused_Sts_8);
    PARAMETER(*MISSING);
    PARAMETER(*MISSING);
    PARAMETER(*MISSING);
    PARAMETER(*MISSING);
    PARAMETER(*MISSING);
    PARAMETER(DB1.Record_Status);
    PARAMETER(DB1.Create_Date);
    PARAMETER(DB1.Create_Time);
    PARAMETER(DB1.Create_User);
    PARAMETER(DB1.Create_Program);
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Del Margin Adj Item   RT) TYPE(RTVOBJ) FILE(PPAPREP)           AC1707770;
     PARAMETER(PAR.TF_Classification_Code);
     PARAMETER(PAR.Item_Structure_Type_Code);
     PARAMETER(PAR.Item_Structure_Group_Code);
     PARAMETER(PAR.Item_Structure_Class_Code);
     PARAMETER(PAR.Record_Status);
     {
      //?USER: Process Data record

      EXECUTE FUNCTION(Del Margin Adj Item   DL) TYPE(DLTOBJ) FILE(PPAPREP)           AC1707647;
      PARAMETER(DB1.TF_Classification_Code);
      PARAMETER(DB1.Item_Structure_Type_Code);
      PARAMETER(DB1.Item_Structure_Group_Code);
      PARAMETER(DB1.Item_Structure_Class_Code);
      PARAMETER(DB1.Item_Code);
      //?** Set return code to normal if no items to delete
      // PGM.*Return code = CND.*Normal
      PGM.*Return_code = *BLANK;

     }

     // PGM.*Return code = CND.*Normal
     PGM.*Return_code = *BLANK;

    }

   }

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

 }

}


ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?CALC: Subfile record function fields

// WRK.USR Blank Field = CON.*BLANK
WRK.USR_Blank_Field = *BLANK;

//?** Activate/Inactivate - domino down
CASE;

// IF RCD.Record Status NE WRK.USR Blank Field
IF RCD.Record_Status <> WRK.USR_Blank_Field;

// Call program RTV/CHG TF M Adj Hdr   XF.
CALL PROGRAM(RTV/CHG TF M Adj Hdr   XF) ('PMGTXFR');
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(RCD.Record_Status);

// Call program RTV/CHG Classification XF.
CALL PROGRAM(RTV/CHG Classification XF) ('PMGSXFR');
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(RCD.Record_Status);

// Call program RTV/CHG for Classifi   XF.
CALL PROGRAM(RTV/CHG for Classifi   XF) ('PMGUXFR');
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(RCD.Record_Status);

ENDIF;

//?USER: Validate subfile record relations

CASE;

// IF RCD.TF Class Group is Not Entered
IF RCD.TF_Class_Group = *BLANK;

// Send error message - 'TF Class Group cannot be left blank.'
ERROR(USR3749);
MSGPARM(RCD.TF_Class_Group);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt TF Classification CR) TYPE(CRTOBJ) FILE(PPAMREP)           AC1707544;
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(RCD.TF_Classification_Desc);
PARAMETER(RCD.Sequence_Number);
PARAMETER(RCD.TF_Class_Group);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg TF Classification CH) TYPE(CHGOBJ) FILE(PPAMREP)           AC1707545;
PARAMETER(RCD.TF_Classification_Code);
PARAMETER(RCD.TF_Classification_Desc);
PARAMETER(RCD.Sequence_Number);
PARAMETER(RCD.TF_Class_Group);
PARAMETER(RCD.Record_Status);
PARAMETER(RCD.Create_Date);
PARAMETER(RCD.Create_Time);
PARAMETER(RCD.Create_User);
PARAMETER(RCD.Create_Program);
PARAMETER(RCD.Change_Date);
PARAMETER(RCD.Change_Time);
PARAMETER(RCD.Change_User);
PARAMETER(RCD.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Upd Sequence Number   RT) TYPE(RTVOBJ) FILE(PPAOREP)           AC1746697;
 PARAMETER(DB1.TF_Classification_Code);
 PARAMETER(DB1.Sequence_Number);
 {
  //?USER: Process Data record

  EXECUTE FUNCTION(Chg Sequence Number   CH) TYPE(CHGOBJ) FILE(PPAOREP)           AC1746698;
  PARAMETER(DB1.TF_Classification_Code);
  PARAMETER(DB1.Item_Structure_Type_Code);
  PARAMETER(DB1.Item_Structure_Group_Code);
  PARAMETER(DB1.Item_Structure_Class_Code);
  PARAMETER(DB1.TF_Class_Group);
  PARAMETER(DB1.Mix_Sub_Group_Code);
  PARAMETER(PAR.Sequence_Number);
  PARAMETER(DB1.Converted_Raw_Material);
  PARAMETER(DB1.TFMC_Group_Code);
  PARAMETER(*MISSING);
  PARAMETER(DB1.Co_Own_Producing_Co_Code);
  PARAMETER(DB1.TFMAGD_Unused_Sts_2);
  PARAMETER(DB1.TFMAGD_Unused_Sts_3);
  PARAMETER(DB1.TFMAGD_Unused_Sts_4);
  PARAMETER(DB1.TFMAGD_Unused_Sts_5);
  PARAMETER(DB1.TFMAGD_Unused_Sts_6);
  PARAMETER(DB1.TFMAGD_Unused_Sts_7);
  PARAMETER(DB1.TFMAGD_Unused_Sts_8);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

  }

 }

}


//?USER: Extra processing after DBF update

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

