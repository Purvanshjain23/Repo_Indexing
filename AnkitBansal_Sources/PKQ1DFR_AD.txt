// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKQ1DFR
// ?Date: 14.08.2025 Time: 02:51:27
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 - ISE - 01/24/21 - Increased the length from 5 to 7 and corrected
//?                          alignment for Buy Order Number field.
ENDDO;

EXECUTE FUNCTION(HPE063 Frt Exp/Accruals) TYPE(EXCINTFUN)                       AB1192166;
{
 //?Execute internal function

 //?2/26/96  HPE063   Allow the expense for freight to be paid
 //?                  by either Seaboard(us) or the producer
 //?                  Allow the system to process accruals thru
 //?                  the General Ledger.
}


// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?USER: Initialize subfile record from DBF record

// RCD.Trucker Pay Sel Desc = Condition name of DB1.BOL Trucker Payment Sts
RCD.Trucker_Pay_Sel_Desc = RTVCND(DB1.BOL_Trucker_Payment_Sts);

//?USER: Process subfile control (Pre-confirm)

//?F14=Review Check
CASE;

// IF CTL.*CMD key is Review Check
IF CTL.*CMD_key = '14';

//?Read the kill dates for the marked loads. If the dates differ,
//?the Status will be set to *NO.
EXECUTE FUNCTION(Rtv Kill Dates per TkrRT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1144246;
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(CTL.TRK_Trucker_Code);
PARAMETER(WRK.@Status_YES_NO);
{
 //?USER: Initialize routine

 // *MO.VE             1183529*Bu = ilt. in functions
 WRK.Date_USR = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_YES_NO = *YES;

 //?USER: Process Data record

 //?Retrieve Kill dates. If the dates for the loads differ, set the
 //?Status to *NO
 CASE;

 // IF WRK.Date USR EQ WRK.Zero USR
 IF WRK.Date_USR = WRK.Zero_USR;

 // *MO.VE             1183529*Bu = ilt. in functions
 WRK.Date_USR = DB1.BOL_Kill_Date;

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF WRK.Date USR NE DB1.BOL Kill Date
 IF WRK.Date_USR <> DB1.BOL_Kill_Date;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.@Status_YES_NO = *NO;

 ENDIF;

 ENDIF;

}


CASE;

// IF WRK.@Status (*YES/*NO ) is *No
IF WRK.@Status_YES_NO = *NO;

// Send error message - 'Cannot Process Request.  Loads must have the same kill date.'
ERROR(PRK0403);

// IF *OTHERWISE
IF *OTHERWISE;

//?Generate Check
// Call program Zzz Freight Checks    XF.
CALL PROGRAM(Zzz Freight Checks    XF) ('PKJHXFR');
PARAMETER(CTL.TRK_Trucker_Code);
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(WRK.VCH_Header_Number);
PARAMETER(WRK.VCH_Batch_Number);
PARAMETER(WRK.@Status_Yes_No);

CASE;

// IF WRK.@Status (Yes/No) is No
IF WRK.@Status_Yes_No = 'N';

// Send error message - 'No records have been marked for payment.'
ERROR(PRK0394);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz Voucher-Trucker   ET.
CALL PROGRAM(Zzz Voucher-Trucker   ET) ('PKRBETR');
PARAMETER(CTL.BOH_Company_Number);
PARAMETER(WRK.VCH_Batch_Number);
PARAMETER(WRK.VCH_Header_Number);
PARAMETER(CTL.TRK_Trucker_Code);
PARAMETER(PAR.Oms_System_Value_Alpha);

// *MO.VE             1183529*Bu = ilt. in functions
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is Mark for Payment
IF RCD.*SFLSEL = '1'/'1';

EXECUTE FUNCTION(Chg Buy Order Detail  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1100531;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.BOL_Kill_Date);
PARAMETER(RCD.BOL_Pln_Delv_Start_Time);
PARAMETER(RCD.BOL_Pln_Delv_End_Time);
PARAMETER(RCD.BOL_Pln_Head_Delv);
PARAMETER(RCD.BOL_Shipped_Wgt);
PARAMETER(RCD.BOL_Pln_Delv_Date);
PARAMETER(RCD.BOL_Freight_UOM);
PARAMETER(RCD.BOL_Freight_Unit_Amt);
PARAMETER(RCD.BOL_Freight_Amt);
PARAMETER(RCD.BOL_Freight_Allocation);
PARAMETER(RCD.BOL_Head_Received);
PARAMETER(RCD.BOL_Live_Wgt_Received);
PARAMETER('MT');
PARAMETER(RCD.BOL_Trucker_Check_Number);
PARAMETER(RCD.BOL_Trucker_Check_Date);
PARAMETER(RCD.BOL_AP_Voucher);
PARAMETER(RCD.BOL_Trailer);
PARAMETER(RCD.BOL_Freight_Exp_Paid_By);
PARAMETER(RCD.BOL_Scheduled_Kill_Shift);
PARAMETER(RCD.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(RCD.BOL_Violated_Auth_Tme_Sts);
PARAMETER(RCD.TRK_Trucker_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is Unmark for Payment
IF RCD.*SFLSEL = '9'/'9';

EXECUTE FUNCTION(Chg Buy Order Detail  CH) TYPE(CHGOBJ) FILE(PKAXCPP)           AB1100531;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.BOL_Kill_Date);
PARAMETER(RCD.BOL_Pln_Delv_Start_Time);
PARAMETER(RCD.BOL_Pln_Delv_End_Time);
PARAMETER(RCD.BOL_Pln_Head_Delv);
PARAMETER(RCD.BOL_Shipped_Wgt);
PARAMETER(RCD.BOL_Pln_Delv_Date);
PARAMETER(RCD.BOL_Freight_UOM);
PARAMETER(RCD.BOL_Freight_Unit_Amt);
PARAMETER(RCD.BOL_Freight_Amt);
PARAMETER(RCD.BOL_Freight_Allocation);
PARAMETER(RCD.BOL_Head_Received);
PARAMETER(RCD.BOL_Live_Wgt_Received);
PARAMETER('ST');
PARAMETER(RCD.BOL_Trucker_Check_Number);
PARAMETER(RCD.BOL_Trucker_Check_Date);
PARAMETER(RCD.BOL_AP_Voucher);
PARAMETER(RCD.BOL_Trailer);
PARAMETER(RCD.BOL_Freight_Exp_Paid_By);
PARAMETER(RCD.BOL_Scheduled_Kill_Shift);
PARAMETER(RCD.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(RCD.BOL_Violated_Auth_Tme_Sts);
PARAMETER(RCD.TRK_Trucker_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF RCD.*SFLSEL is Edit
IF RCD.*SFLSEL = '2'/'2';

EXECUTE FUNCTION(Chk tatto Paid for Bol RT) TYPE(RTVOBJ) FILE(PKA1CPP)          AB1183687;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(WRK.Tattoo_is_paid_Usr);
PARAMETER(WRK.Held_Over_Records_Y_N);
PARAMETER(WRK.Tot_Frt_Spdb_aft_pay_Usr);
{
 //?USER: Initialize routine

 // PAR.Tot Frt Spdb aft pay Usr = CON.*ZERO
 PAR.Tot_Frt_Spdb_aft_pay_Usr = *ZERO;

 // PAR.Held Over Records Y/N = CND.No
 PAR.Held_Over_Records_Y_N = 'N';

 // PAR.Tattoo is paid Usr = CND.No
 PAR.Tattoo_is_paid_Usr = 'N';

 //?USER: Process Data record

 //?If one tattoo is paid but freight was spread then accumulate
 //?what is paid, for held over respread problem
 //?when this probelm goes away, then just flag that there is one paid
 CASE;

 // IF DB1.TH Payment Sts is Paid Anything
 IF DB1.TH_Payment_Sts = 'PL'/'PC'/'NC'/'NL';

 //?CHECK IF FREIGHT AMOUNT IS IN RECORD
 CASE;

 // IF DB1.TH Freight Amount is Not Zeros
 IF DB1.TH_Freight_Amount <> *ZERO;

 // PAR.Tattoo is paid Usr = CND.Yes
 PAR.Tattoo_is_paid_Usr = 'Y';

 ENDIF;

 // PAR.Tot Frt Spdb aft pay Usr = PAR.Tot Frt Spdb aft pay Usr + DB1.TH Freight Amo
 PAR.Tot_Frt_Spdb_aft_pay_Usr = PAR.Tot_Frt_Spdb_aft_pay_Usr + DB1.TH_Freight_Amount;

 // IF *OTHERWISE
 IF *OTHERWISE;

 //?CHECK FOR HELD OVER RECORD
 CASE;

 // IF DB1.TH Held Over Record is Yes
 IF DB1.TH_Held_Over_Record = 'Y';

 // OR DB1.TH Held Over is greater than 0
 OR DB1.TH_Held_Over > *ZERO;

 // PAR.Held Over Records Y/N = CND.Yes
 PAR.Held_Over_Records_Y_N = 'Y';

 ENDIF;

 ENDIF;

}


CASE;

// IF RCD.BOL Freight Allocation is Freight is Allocated
IF RCD.BOL_Freight_Allocation = 'Y';

// AND WRK.Tattoo is paid Usr is Yes
AND WRK.Tattoo_is_paid_Usr = 'Y';

// Send error message - 'Invalid selection. Freight has been allocated.'
ERROR(PRK0390);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt Buy Order Load    E1.
CALL PROGRAM(Edt Buy Order Load    E1) ('PKLZE1R');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(WRK.Name_USR);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

