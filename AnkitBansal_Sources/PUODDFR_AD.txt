// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUODDFR
// ?Date: 14.08.2025 Time: 03:50:56
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// PAR.Application Code = CND.Order Management System
PAR.Application_Code = 'OMS';

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER(PAR.Application_Code);
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

// PGM.*Scan limit = CND.50000
PGM.*Scan_limit = 50000;

//?USER: Initialize subfile control

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

// LCL.Ship From Warehouse = CTL.Ship From Warehouse
LCL.Ship_From_Warehouse = CTL.Ship_From_Warehouse;

// LCL.Header Status = CTL.Header Status
LCL.Header_Status = CTL.Header_Status;

// LCL.Load ID = CTL.Load ID
LCL.Load_ID = CTL.Load_ID;

// LCL.Customer Purchase Order # = CTL.Customer Purchase Order #
LCL.Customer_Purchase_Order_# = CTL.Customer_Purchase_Order_#;

// LCL.Load Status = CTL.Load Status
LCL.Load_Status = CTL.Load_Status;

// LCL.Scheduled Ship Date = CTL.Scheduled Ship Date
LCL.Scheduled_Ship_Date = CTL.Scheduled_Ship_Date;

// LCL.Actual Shipped Date = CTL.Actual Shipped Date
LCL.Actual_Shipped_Date = CTL.Actual_Shipped_Date;

// LCL.Ship To Customer = CTL.Ship To Customer
LCL.Ship_To_Customer = CTL.Ship_To_Customer;

// LCL.Ship To Name (15A) USR = CTL.Ship To Name (15A) USR
LCL.Ship_To_Name_15A_USR = CTL.Ship_To_Name_15A_USR;

// LCL.OHE EDI 856 Action = CTL.OHE EDI 856 Action
LCL.OHE_EDI_856_Action = CTL.OHE_EDI_856_Action;

//?USER: Initialize subfile record from DBF record

//?Select Only Regular Orders 'OR'.
CASE;

// IF DB1.Order Type - Sales is Regular Order
IF DB1.Order_Type_Sales = 'OR';

//?Select Only Regular Orders 'OR'.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select Only Confirmed 'R' or Invoiced 'C' Orders.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF RCD.Header Status is Confirmed & Complete
IF RCD.Header_Status = 'C'/'R';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select Customer Setup for EDI 856 & Warehouse Live w/Carlisle & Internal.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Val Cust Setup 4/856 V2IF) TYPE(EXCINTFUN)                     AC2178250;
PARAMETER(LCL.Create_EDI_ASN_856_V2_USR);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Bill_to_Customer);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(NLL.Country_Code);
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(NLL.Warehouse_Location);
PARAMETER(*BLANK);
{
 //?Execute internal function

 //?VALIDATIONS: Is Bill To Customer Setup for EDI 856 ASN V2?
 CASE;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Create EDI ASN 856 V2 USR = CND.No
 PAR.Create_EDI_ASN_856_V2_USR = 'N';

 EXECUTE FUNCTION(RTV EDI ASN 856 Info  RT) TYPE(RTVOBJ) FILE(PNGQREP)           AC2177034;
 PARAMETER(PAR.Bill_to_Customer);
 PARAMETER('ADVSN');
 PARAMETER(PAR.EDI_Trading_Partner_No);
 PARAMETER(LCL.EDI_Detailed_ASN_856_Rqd);
 PARAMETER(LCL.Record_Status);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 //?Do Not Check Customer & Warehouse if Coming From PDN2XFR Program.
 CASE;

 //?Do Not Check Customer & Warehouse if Coming From PDN2XFR Program.
 // IF *OTHERWISE
 IF *OTHERWISE;

 //?Bill To Customer Must Be Active & Setup for EDI 856.
 CASE;

 // IF LCL.EDI Detailed ASN 856 Rqd is Yes
 IF LCL.EDI_Detailed_ASN_856_Rqd = 'Y';

 // AND LCL.Record Status is Active
 AND LCL.Record_Status = 'A';

 // PAR.Create EDI ASN 856 V2 USR = CND.Yes
 PAR.Create_EDI_ASN_856_V2_USR = 'Y';

 ENDIF;

 //?WI609_2 Check Internal or External Warehouse Qualifies for 856 ASN.
 CASE;

 // IF PAR.Create EDI ASN 856 V2 USR is Yes
 IF PAR.Create_EDI_ASN_856_V2_USR = 'Y';

 EXECUTE FUNCTION(RTV 1st Whse/Country   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC1426676;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(1);
 PARAMETER(1);
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(PAR.Country_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 EXECUTE FUNCTION(Rtv EDI 856 ASN Info RT) TYPE(RTVOBJ) FILE(CAADREP)            AC2234972;
 PARAMETER(LCL.Warehouse_Code);
 PARAMETER(LCL.Warehouse_Location);
 PARAMETER(LCL.WHS_Live_with_Carlisle);
 PARAMETER(NLL.WHS_PFS_Interface);
 PARAMETER(LCL.Crt_856_ASN_for_3PL_Whse);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.Warehouse Location = LCL.Warehouse Location
 PAR.Warehouse_Location = LCL.Warehouse_Location;

 CASE;

 // IF LCL.Warehouse Location is Internal (Plant)
 IF LCL.Warehouse_Location = 'I';

 // AND LCL.WHS Live w/Carlisle is Yes
 AND LCL.WHS_Live_with_Carlisle = 'Y';

 // PAR.Create EDI ASN 856 V2 USR = CND.Yes
 PAR.Create_EDI_ASN_856_V2_USR = 'Y';

 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Create EDI ASN 856 V2 USR = CND.No
 PAR.Create_EDI_ASN_856_V2_USR = 'N';

 //?WI609_2 JM 10/08/24-Allow External 3PL Warehouses to Receive EDI 856 ASN.
 CASE;

 // IF LCL.Warehouse Location is External
 IF LCL.Warehouse_Location = 'E';

 CASE;

 // IF LCL.Crt 856 ASN for 3PL Whse is Yes
 IF LCL.Crt_856_ASN_for_3PL_Whse = 'Y';

 // PAR.Create EDI ASN 856 V2 USR = CND.Yes
 PAR.Create_EDI_ASN_856_V2_USR = 'Y';

 // PAR.Warehouse Code = LCL.Warehouse Code
 PAR.Warehouse_Code = LCL.Warehouse_Code;

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

 //?WI609_2 JM 10/08/24-Check EDI Manual PO.
 CASE;

 // IF PAR.Create EDI ASN 856 V2 USR is Yes
 IF PAR.Create_EDI_ASN_856_V2_USR = 'Y';

 // Call program Rtv EDI Manual PO Sts XF.
 CALL PROGRAM(Rtv EDI Manual PO Sts XF) ('PUTBXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER('ADVSN');
 PARAMETER(LCL.Send_EDI_Document_Y_N);

 //?If Send EDI Documents = N, set Create EDI ASN 856 V2 USR = N
 CASE;

 // IF LCL.Send EDI Document Y/N is No
 IF LCL.Send_EDI_Document_Y_N = 'N';

 // PAR.Create EDI ASN 856 V2 USR = CND.No
 PAR.Create_EDI_ASN_856_V2_USR = 'N';

 ENDIF;

 ENDIF;

 ENDIF;

 ENDIF;

}


//?Customer Not Setup For EDI 856 ASN, Do Not Select.
CASE;

// IF LCL.Create EDI ASN 856 V2 USR is No
IF LCL.Create_EDI_ASN_856_V2_USR = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Get/Set EDI 856/824 Status Info.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV EDI 856/824 OHE StsRT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2237029;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.OHE_EDI_Error_Reasons);
PARAMETER(RCD.OHE_EDI_Error_Reasons_2);
PARAMETER(RCD.OHE_EDI_856_Action);
PARAMETER(RCD.OHE_EDI_824_Action);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Set EDI 856 Action Desc.
CASE;

// IF RCD.OHE EDI 856 Action is Blanks
IF RCD.OHE_EDI_856_Action = *BLANK;

// RCD.EDI 856 Action Dsc USR = CON.*BLANK
RCD.EDI_856_Action_Dsc_USR = *BLANK;

//?Set EDI 856 Action Desc.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.EDI 856 Action Dsc USR = Condition name of RCD.OHE EDI 856 Action
RCD.EDI_856_Action_Dsc_USR = RTVCND(RCD.OHE_EDI_856_Action);

ENDIF;

//?Set EDI Error Reason Desc.
CASE;

// IF RCD.OHE EDI Error Reasons 2 is Blank
IF RCD.OHE_EDI_Error_Reasons_2 = *BLANK;

// RCD.Condition Desc. 2  USR = CND.not entered
RCD.Condition_Desc_2_USR = *BLANK;

//?Set EDI Error Reason Desc.
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Condition Desc. 2  USR = Condition name of RCD.OHE EDI Error Reasons 2
RCD.Condition_Desc_2_USR = RTVCND(RCD.OHE_EDI_Error_Reasons_2);

ENDIF;

ENDIF;

//?Select by User Defined Selectors.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?Select By Ship From Warehouse.
CASE;

// IF CTL.Ship From Warehouse is Blanks
IF CTL.Ship_From_Warehouse = *BLANK;

// OR CTL.Ship From Warehouse EQ RCD.Ship From Warehouse
OR CTL.Ship_From_Warehouse = RCD.Ship_From_Warehouse;

//?Select By Ship From Warehouse.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Header Status.
CASE;

// IF CTL.Header Status is *None
IF CTL.Header_Status = *BLANK;

// OR CTL.Header Status EQ RCD.Header Status
OR CTL.Header_Status = RCD.Header_Status;

//?Select By Header Status.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Ship to customer
CASE;

// IF CTL.Ship To Customer is equal to zero
IF CTL.Ship_To_Customer = *ZERO;

// OR CTL.Ship To Customer EQ RCD.Ship To Customer
OR CTL.Ship_To_Customer = RCD.Ship_To_Customer;

//?Select By Ship to customer
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select by Customer Name.                      R17040 DN 02/25/21
CASE;

// IF CTL.Ship To Name (15A) USR NE WRK.BLANK
IF CTL.Ship_To_Name_15A_USR <> WRK.BLANK;

// Execute function CVT Str to Upper Alpha US.
EXECUTE FUNCTION(CVT Str to Upper Alpha US) TYPE(EXCUSRSRC) ('PDWEUFR');
PARAMETER(CTL.Ship_To_Name_15A_USR);
PARAMETER(CTL.Ship_To_Name_15A_USR);
{
 PDWEUFR:  PGM PARM(&STRIN &STROUT)

 CHGVAR VAR(&FLDOUT) VALUE('%XLATE(UPTEXT &STRIN)')
}


// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Ship_To_Name);
PARAMETER(30);
PARAMETER(1);
PARAMETER(CTL.Ship_To_Name_15A_USR);
PARAMETER(15);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select By Load ID.
CASE;

// IF CTL.Load ID is Blank
IF CTL.Load_ID = *ZERO;

// OR CTL.Load ID EQ RCD.Load ID
OR CTL.Load_ID = RCD.Load_ID;

//?Select By Load ID.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Scheduled Ship Date.
CASE;

// IF CTL.Scheduled Ship Date is not entered
IF CTL.Scheduled_Ship_Date = *ZERO;

// OR CTL.Scheduled Ship Date EQ RCD.Scheduled Ship Date
OR CTL.Scheduled_Ship_Date = RCD.Scheduled_Ship_Date;

//?Select By Scheduled Ship Date.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Actual Shipped Date.
CASE;

// IF CTL.Actual Shipped Date is not entered
IF CTL.Actual_Shipped_Date = *ZERO;

// OR CTL.Actual Shipped Date EQ RCD.Actual Shipped Date
OR CTL.Actual_Shipped_Date = RCD.Actual_Shipped_Date;

//?Select By Actual Shipped Date.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?Select By Load Status.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(RTV Load Status 2      RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC2141306;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Load_Status);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Select By Load Status.
CASE;

// IF CTL.Load Status is *Blank
IF CTL.Load_Status = *BLANK;

// OR CTL.Load Status EQ RCD.Load Status
OR CTL.Load_Status = RCD.Load_Status;

//?Select By Load Status.
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Select By EDI 856 Action Status.              R17040 DN 02/26/21
CASE;

// IF CTL.OHE EDI 856 Action is Blanks
IF CTL.OHE_EDI_856_Action = *BLANK;

// OR CTL.OHE EDI 856 Action EQ RCD.OHE EDI 856 Action
OR CTL.OHE_EDI_856_Action = RCD.OHE_EDI_856_Action;

//?Select By EDI 856 Action Status.              R17040 DN 02/26/21
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?Sum Quantity & Populate Other Screen Data.
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

EXECUTE FUNCTION(Rtv Sum Qty Ord/Ship   RT) TYPE(RTVOBJ) FILE(OPBGWKP)          AC2141352;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Quantity_Ordered_Tot1_USR);
PARAMETER(RCD.Quantity_Shipped_Tot1_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Detail Line Status is Not cancelled
 IF DB1.Detail_Line_Status = 'L'/'A'/'C'/'R'/'E'/'H'/'I';

 // PAR.Total Quantity Ordered = PAR.Total Quantity Ordered + DB1.Quantity Ordered
 PAR.Total_Quantity_Ordered = PAR.Total_Quantity_Ordered + DB1.Quantity_Ordered;

 // PAR.Total Quantity Ship  USR = PAR.Total Quantity Ship  USR + DB1.Quantity Shipped Total
 PAR.Total_Quantity_Ship_USR = PAR.Total_Quantity_Ship_USR + DB1.Quantity_Shipped_Total;

 ENDIF;

}


//?Get Other Info.
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

//?R17040 DN 02/26/21-Commented Out & Moved 856/824 Logic Above.
EXECUTE FUNCTION(RTV Departure DT/TM   RT) TYPE(RTVOBJ) FILE(OMFJCPP)           AC2062272;
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.Truck_Departure_Date);
PARAMETER(LCL.Truck_Departure_Time);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 QUIT;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

CASE;

// IF CTL.Ship From Warehouse NE LCL.Ship From Warehouse
IF CTL.Ship_From_Warehouse <> LCL.Ship_From_Warehouse;

// OR CTL.Load ID NE LCL.Load ID
OR CTL.Load_ID <> LCL.Load_ID;

// OR CTL.Scheduled Ship Date NE LCL.Scheduled Ship Date
OR CTL.Scheduled_Ship_Date <> LCL.Scheduled_Ship_Date;

// OR CTL.Header Status NE LCL.Header Status
OR CTL.Header_Status <> LCL.Header_Status;

// OR CTL.Load Status NE LCL.Load Status
OR CTL.Load_Status <> LCL.Load_Status;

// OR CTL.Actual Shipped Date NE LCL.Actual Shipped Date
OR CTL.Actual_Shipped_Date <> LCL.Actual_Shipped_Date;

// OR CTL.Ship To Customer NE LCL.Ship To Customer
OR CTL.Ship_To_Customer <> LCL.Ship_To_Customer;

// OR CTL.Customer Purchase Order # NE LCL.Customer Purchase Order #
OR CTL.Customer_Purchase_Order_# <> LCL.Customer_Purchase_Order_#;

// OR CTL.Ship To Name (15A) USR NE LCL.Ship To Name (15A) USR
OR CTL.Ship_To_Name_15A_USR <> LCL.Ship_To_Name_15A_USR;

// OR CTL.OHE EDI 856 Action NE LCL.OHE EDI 856 Action
OR CTL.OHE_EDI_856_Action <> LCL.OHE_EDI_856_Action;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?10/8/19 DN-Not sure if we need new SEQUEL or not??
//?USER: Process subfile record (Pre-confirm)

//?Subfile Option Processing.
CASE;

// IF RCD.*SFLSEL is *Display
IF RCD.*SFLSEL = '5'/'5';

//?Display Order Inquiry.
CASE;

// IF RCD.Event Code is Shipped Thru 07 History
IF RCD.Event_Code >= '04';
AND RCD.Event_Code <= '07';

// Call program DSP Ord Inq Ship Dtl   DF.
CALL PROGRAM(DSP Ord Inq Ship Dtl   DF) ('PDP3DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(NLL.Order_Sequence_Number);
PARAMETER(PAR.Application_Code);

//?Display Order Inquiry.
// IF *OTHERWISE
IF *OTHERWISE;

// Call program DSP Ord Inquiry Detail DF.
CALL PROGRAM(DSP Ord Inquiry Detail DF) ('PDPZDFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(NLL.Order_Sequence_Number);
PARAMETER(NLL.Order_Secondary_Line_Seq);
PARAMETER(PAR.Application_Code);

ENDIF;

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program DSP Order vs. Ship Dtl DF.
CALL PROGRAM(DSP Order vs. Ship Dtl DF) ('PDP7DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Order_Type_Sales);
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(RCD.Ship_To_Name);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Order_Date);
PARAMETER(RCD.Actual_Shipped_Date);
PARAMETER(RCD.Header_Status);
PARAMETER(RCD.Credit_Hold);
PARAMETER(RCD.Production_Hold);
PARAMETER(RCD.New_Customer_Hold);
PARAMETER(RCD.Sales_Route_Code);
PARAMETER(PAR.Application_Code);

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 16
IF RCD.*SFLSEL = '16';

// Call program Dsp Order Header       PV.
CALL PROGRAM(Dsp Order Header       PV) ('OMB5PVR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Customer_Purchase_Order_#);
PARAMETER(RCD.Date_of_Original_Entry);
PARAMETER(RCD.Requested_Delivery_Time);
PARAMETER(PAR.Application_Code);

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Option Processing.
// IF RCD.*SFLSEL is Option 17
IF RCD.*SFLSEL = '17';

//?WI609_2 JM 11/12/24-Show error for invalid SSCID pallet.
CASE;

// IF RCD.OHE EDI Error Reasons is Invalid Pallet SSCID
IF RCD.OHE_EDI_Error_Reasons = 'SSCID';

// LCL.Generic Message 80 USR = CONCAT(CON.Invalid pallet SSCID,EDI,CON. 856 ASN can't be created,CO
LCL.Generic_Message_80_USR = 'Invalid pallet SSCID,EDI' + ' 856 ASN can't be created' (*ZERO);

// Send error message - '&1'
ERROR(USR5117);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.Load_ID);

//?WI609_2 JM 11/12/24-Show error for invalid SSCID pallet.
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv EDI 856 ASN Info RT) TYPE(RTVOBJ) FILE(CAADREP)            AC2234972;
PARAMETER(RCD.Ship_From_Warehouse);
PARAMETER(LCL.Warehouse_Location);
PARAMETER(NLL.WHS_Live_with_Carlisle);
PARAMETER(NLL.WHS_PFS_Interface);
PARAMETER(LCL.Crt_856_ASN_for_3PL_Whse);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?WI609_2 JM 11/12/24-Do not process where Crt 856 ASN for 3PL Whse is No
CASE;

// IF LCL.Warehouse Location is External
IF LCL.Warehouse_Location = 'E';

// AND NOT LCL.Crt 856 ASN for 3PL Whse is Yes
AND ! LCL.Crt_856_ASN_for_3PL_Whse = 'Y';

// LCL.Generic Message 80 USR = CONCAT(CON.Create 856 ASN for 3PL,CON.warehouse is No,,CON.1)
LCL.Generic_Message_80_USR = 'Create 856 ASN for 3PL' + 'warehouse is No,' (1);

// LCL.Generic Message 80 USR = CONCAT(LCL.Generic Message 80 USR,CON.856 ASN can't be created.,CON.
LCL.Generic_Message_80_USR = LCL.Generic_Message_80_USR + '856 ASN can't be created.' (1);

// Send error message - '&1'
ERROR(USR5117);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.Load_ID);

//?WI609_2 JM 11/12/24-Do not process where Crt 856 ASN for 3PL Whse is No
// IF *OTHERWISE
IF *OTHERWISE;

//?WI609_2 JM 02/27/25-Checkfor Load/BTC#/Co that AllOrders Have Been shipped
CASE;

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Val All Orders Shipped XF.
CALL PROGRAM(Val All Orders Shipped XF) ('PVJ5XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Bill_to_Customer);
PARAMETER(RCD.Load_ID);
PARAMETER(LCL.All_Orders_Shipped_2_USR);

CASE;

// IF LCL.All Orders Shipped 2 USR is No
IF LCL.All_Orders_Shipped_2_USR = 'N';

// Send information message - 'Load &1 has Unshipped Orders,ASN 856 can't be created.'
MESSAGE(USR5545 *INFO);
MSGPARM(RCD.Load_ID);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Chg EDI 856 Sts  RT) TYPE(RTVOBJ) FILE(PMAMREP)            AC2196374;
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(RCD.Bill_to_Customer);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Val Recreate 856 ASN   RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC2241573;
 PARAMETER(DB1.Load_ID);
 PARAMETER(PAR.Bill_to_Customer);
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(LCL.Match_Found_USR);
 {
  //?USER: Initialize routine

  // PAR.Match Found USR = CND.No
  PAR.Match_Found_USR = 'N';

  //?USER: Process Data record

  // PAR.Match Found USR = CND.Yes
  PAR.Match_Found_USR = 'Y';

  QUIT;

 }

 CASE;

 // IF LCL.Match Found USR is Yes
 IF LCL.Match_Found_USR = 'Y';

 CASE;

 // IF DB1.OHE EDI 856 Action is Sent
 IF DB1.OHE_EDI_856_Action = 'S';

 EXECUTE FUNCTION(CHG OHE EDI 856 Error  CH) TYPE(CHGOBJ) FILE(PMAMREP)          AC2177297;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Order_Number);
 PARAMETER(PAR.OHE_EDI_Error_Reasons_2);
 PARAMETER(PAR.OHE_EDI_856_Action);
 {
  //?USER: Processing before Data update

  // DB1.Job Time = JOB.*Job time
  DB1.Job_Time = JOB.*Job_time;

  // DB1.Job Date = JOB.*Job date
  DB1.Job_Date = JOB.*Job_date;

  // DB1.Job Name = JOB.*PROGRAM
  DB1.Job_Name = JOB.*PROGRAM;

  // DB1.User Id = JOB.*USER
  DB1.User_Id = JOB.*USER;

 }

 ENDIF;

 ENDIF;

}


// LCL.F17 Pressed USR = CND.Yes
LCL.F17_Pressed_USR = 'Y';

// Call program Exc Crt EDI 856 ASN V2 XF.
CALL PROGRAM(Exc Crt EDI 856 ASN V2 XF) ('PUOIXFR');
PARAMETER(RCD.Load_ID);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Bill_to_Customer);
PARAMETER(LCL.F17_Pressed_USR);

//?Get EDI 856 Sts if Blank.
CASE;

// IF RCD.EDI 856 Action Dsc USR is Blank
IF RCD.EDI_856_Action_Dsc_USR = *BLANK;

EXECUTE FUNCTION(RTV EDI 856/824 Sts    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2176913;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.OHE_EDI_Error_Reasons_2);
PARAMETER(RCD.OHE_EDI_856_Action);
PARAMETER(NLL.OHE_EDI_824_Action);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

ENDIF;

ENDIF;

ENDIF;

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Subfile Option Processing.
// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

EXECUTE FUNCTION(Rtv Last EDI 856 f/Ord RT) TYPE(RTVOBJ) FILE(ECP140)           AC2176970;
PARAMETER(RCD.Order_Number);
PARAMETER(LCL.EDI_SURROGATE_NUMBER);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?Record Exist. Call WW.
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Call program WW ASN HDR            DF.
CALL PROGRAM(WW ASN HDR            DF) ('PUN5DFR');
PARAMETER(LCL.EDI_SURROGATE_NUMBER);

//?Get EDI 856 Sts if Blank.
CASE;

// IF RCD.EDI 856 Action Dsc USR is Blank
IF RCD.EDI_856_Action_Dsc_USR = *BLANK;

EXECUTE FUNCTION(RTV EDI 856/824 Sts    RT) TYPE(RTVOBJ) FILE(PMAMREP)          AC2176913;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.OHE_EDI_Error_Reasons_2);
PARAMETER(RCD.OHE_EDI_856_Action);
PARAMETER(NLL.OHE_EDI_824_Action);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Record Exist. Call WW.
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.Generic Message 80 USR = CONCAT(CON.EDI 856 ASN detail not fo,CON.und. Option not allowed.,CO
LCL.Generic_Message_80_USR = 'EDI 856 ASN detail not fo' + 'und. Option not allowed.' (*ZERO);

// Send error message - '&1'
ERROR(USR5117);
MSGPARM(LCL.Generic_Message_80_USR);
MSGPARM(RCD.Load_ID);

// CTL.Order Number = RCD.Order Number
CTL.Order_Number = RCD.Order_Number;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Reload
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// PAR.PRT Hold Output Sts = CND.*NO
PAR.PRT_Hold_Output_Sts = *NO;

// PAR.PRT Save Output Sts = CND.*NO
PAR.PRT_Save_Output_Sts = *NO;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// PAR.PRT Night Queue = CND.Not entered
PAR.PRT_Night_Queue = *BLANK;

// PAR.System Value Numeric = CON.1
PAR.System_Value_Numeric = 1;

// PAR.PRT Description = CON.Shipped Whs Transfer Rpt
PAR.PRT_Description = 'Shipped Whs Transfer Rpt';

//?!!!We don't need the From / To Date...
//?!!!Resetup Ship From/To Warehouse...
ENDIF;

