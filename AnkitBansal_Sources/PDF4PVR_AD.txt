// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDF4PVR
// ?Date: 14.08.2025 Time: 03:34:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.PRT Printer Device = CND.Not entered
PAR.PRT_Printer_Device = *BLANK;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

//?USER: Load screen

CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

// DTL.Report Type -Sch or Deadl = CND.By Schedule Ship Date
DTL.Report_Type_Sch_or_Deadl = 1;

//?** Calculate the current 4 digit year
DO;

// WRK.Alpha Zeros 2 = CVTVAR(JOB.*Job year)
WRK.Alpha_Zeros_2 = CVTVAR(JOB.*Job_year);

// WRK.Numeral 1             USR = CON.1
WRK.Numeral_1_USR = 1;

CASE;

// IF JOB.*Job century EQ WRK.Numeral 1             USR
IF JOB.*Job_century = WRK.Numeral_1_USR;

// WRK.Century. . . . . . . . . = CON.20
WRK.Century = 20;

// WRK.Alpha Zeroes 2.2      USR = CVTVAR(WRK.Century. . . . . . . . .)
WRK.Alpha_Zeroes_2_2_USR = CVTVAR(WRK.Century);

// IF *OTHERWISE
IF *OTHERWISE;

// WRK.Century. . . . . . . . . = CON.19
WRK.Century = 19;

// WRK.Alpha Zeroes 2.2      USR = CVTVAR(WRK.Century. . . . . . . . .)
WRK.Alpha_Zeroes_2_2_USR = CVTVAR(WRK.Century);

ENDIF;

// WRK.Year Alpha (YYYY) USR = CONCAT(WRK.Alpha Zeroes 2.2      USR,WRK.Alpha Zeros 2,CON.*ZERO)
WRK.Year_Alpha_YYYY_USR = WRK.Alpha_Zeroes_2_2_USR + WRK.Alpha_Zeros_2 (*ZERO);

// DTL.YEAR 1 USR = CVTVAR(WRK.Year Alpha (YYYY) USR)
DTL.YEAR_1_USR = CVTVAR(WRK.Year_Alpha_YYYY_USR);

ENDDO;

//?USER: Validate fields

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number CDE
IF PGM.*Cursor_field = DTL.Company_Number_CDE;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company - plants   SR.
CALL PROGRAM(SEL Company - plants   SR) ('PPF2SRR');
PARAMETER(DTL.Company_Number_CDE);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?** Rtv company name
CASE;

// IF DTL.Company Number CDE is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?** Rtv company name
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Name = CON.*BLANK
DTL.Company_Name = *BLANK;

ENDIF;

//?Process F4 on Carrier Code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Carrier Code
AND PGM.*Cursor_field = DTL.Carrier_Code;

// Call program SEL Carrier Name       SR.
CALL PROGRAM(SEL Carrier Name       SR) ('PDWHSRR');
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Name);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on State Code
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.USR State Code
AND PGM.*Cursor_field = DTL.USR_State_Code;

// Call program SEL State              SR.
CALL PROGRAM(SEL State              SR) ('CAAHSRR');
PARAMETER(DTL.USR_State_Code);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?Process F4 on up to 10 Warehouses                     E000528
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?Warehouse 1
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 1 USR
IF PGM.*Cursor_field = DTL.Warehouse_1_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_1_USR);

ENDIF;

//?Warehouse 2
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 2 USR
IF PGM.*Cursor_field = DTL.Warehouse_2_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_2_USR);

ENDIF;

//?Warehouse 3
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 3 USR
IF PGM.*Cursor_field = DTL.Warehouse_3_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_3_USR);

ENDIF;

//?Warehouse 4
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 4 USR
IF PGM.*Cursor_field = DTL.Warehouse_4_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_4_USR);

ENDIF;

//?Warehouse 5
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 5 USR
IF PGM.*Cursor_field = DTL.Warehouse_5_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_5_USR);

ENDIF;

//?Warehouse 6
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 6 USR
IF PGM.*Cursor_field = DTL.Warehouse_6_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_6_USR);

ENDIF;

//?Warehouse 7
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 7 USR
IF PGM.*Cursor_field = DTL.Warehouse_7_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_7_USR);

ENDIF;

//?Warehouse 8
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 8 USR
IF PGM.*Cursor_field = DTL.Warehouse_8_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_8_USR);

ENDIF;

//?Warehouse 9
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 9 USR
IF PGM.*Cursor_field = DTL.Warehouse_9_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_9_USR);

ENDIF;

//?Warehouse 10
CASE;

// IF PGM.*Cursor field <IS> DTL.Warehouse 10 USR
IF PGM.*Cursor_field = DTL.Warehouse_10_USR;

// Call program SEL Warehouse          SR.
CALL PROGRAM(SEL Warehouse          SR) ('CAANSRR');
PARAMETER(DTL.Warehouse_10_USR);

ENDIF;

ENDIF;

//?USER: Validate relations

// DTL.Name = CON.*BLANK
DTL.Name = *BLANK;

//?Validate company if entered
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number_CDE <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(DTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is Company not found
IF PGM.*Return_code = 'USR0003';

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

SET CURSOR;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Plant Co Status   RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1761084;
PARAMETER(DTL.Company_Number_CDE);
PARAMETER(LCL.Plant_Company_Sts);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Check for plant company
CASE;

// IF LCL.Plant Company Sts is Plant Company
IF LCL.Plant_Company_Sts = 'P';

//?Check for plant company
// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Company Number = DTL.Company Number CDE
DTL.Company_Number = DTL.Company_Number_CDE;

SET CURSOR;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

ENDIF;

//?Validate Carrier Code
CASE;

// IF DTL.Carrier Code is entered
IF DTL.Carrier_Code <> *BLANK;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Name);
PARAMETER(WRK.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?Carrier not found
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier doesn't exist'
ERROR(USR1252);
MSGPARM(DTL.Carrier_Code);

ENDIF;

ENDIF;

// DTL.Load Type Desc = Condition name of DTL.Load Type
DTL.Load_Type_Desc = RTVCND(DTL.Load_Type);

//?Validate a date is entered   1/3/3
CASE;

// IF DTL.USR To Date is not entered
IF DTL.USR_To_Date = *ZERO;

// AND DTL.Date To               USR is Not Entered
AND DTL.Date_To_USR = *ZERO;

// AND DTL.YEAR 1 USR is equal to zero
AND DTL.YEAR_1_USR = *ZERO;

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.USR_To_Date);

ENDIF;

//?Validate Week ending date as a Saturday     1/3/3
CASE;

// IF DTL.USR To Date is Entered
IF DTL.USR_To_Date <> *ZERO;

EXECUTE FUNCTION(RTV Week Begin/End Dts RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1445981;
PARAMETER(PAR.Company_Number);
PARAMETER(DTL.USR_To_Date);
PARAMETER(PAR.Day_of_Week);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PAR.Day of Week is Saturday
IF PAR.Day_of_Week = '7';

//?5/16/01  Include Saturday, so subtract 6 days for the From date
// DTL.USR From Date = DTL.USR To Date + CON.-6 *DAYS
DTL.USR_From_Date = DATEINCR(DTL.USR_To_Date '-6' 'DY' 1111111 'NONE' 'N' 1);

// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Week Ending Date must be a Saturday'
ERROR(USR2427);
MSGPARM(DTL.USR_To_Date);

ENDIF;

ENDIF;

//?If Month ending date, set from date  1/3/3
CASE;

// IF DTL.Date To               USR is Entered
IF DTL.Date_To_USR <> *ZERO;

// WRK.Date To Alpha         USR = CVTVAR(DTL.Date To               USR)
WRK.Date_To_Alpha_USR = CVTVAR(DTL.Date_To_USR);

// WRK.Text USR 5 = WRK.Date To Alpha         USR
WRK.Text_USR_5 = WRK.Date_To_Alpha_USR;

// WRK.Date (Alpha) USR = CONCAT(WRK.Text USR 5,CON.01,CON.*ZERO)
WRK.Date_Alpha_USR = WRK.Text_USR_5 + '01' (*ZERO);

// DTL.USR From Date = CVTVAR(WRK.Date (Alpha) USR)
DTL.USR_From_Date = CVTVAR(WRK.Date_Alpha_USR);

// WRK.Status - Y or N = CND.no
WRK.Status_Y_or_N = 'N';

ENDIF;

//?If w/e or m/e and year entered - blank out year        11/01/2006 LJB
CASE;

// IF DTL.USR To Date is Entered
IF DTL.USR_To_Date <> *ZERO;

// AND DTL.YEAR 1 USR is Greater than zero
AND DTL.YEAR_1_USR > *ZERO;

// OR DTL.Date To               USR is Entered
OR DTL.Date_To_USR <> *ZERO;

// AND DTL.YEAR 1 USR is Greater than zero
AND DTL.YEAR_1_USR > *ZERO;

// DTL.YEAR 1 USR = CON.*ZERO
DTL.YEAR_1_USR = *ZERO;

ENDIF;

//?If Year is entered, set from date          11/01/2006 LJB
CASE;

// IF DTL.YEAR 1 USR is Greater than zero
IF DTL.YEAR_1_USR > *ZERO;

//?** numeric to alpha then extract 2 digit year
// WRK.Year Alpha (YYYY) USR = CVTVAR(DTL.YEAR 1 USR)
WRK.Year_Alpha_YYYY_USR = CVTVAR(DTL.YEAR_1_USR);

// WRK.Year Alpha (YY) USR = SUBSTRING(WRK.Year Alpha (YYYY) USR,CON.3,CON.2)
WRK.Year_Alpha_YY_USR = SUBSTRING(WRK.Year_Alpha_YYYY_USR:3:2);

//?** create valid date for first of the year
// WRK.Date (Alpha) USR = CONCAT(CON.1,WRK.Year Alpha (YY) USR,CON.*ZERO)
WRK.Date_Alpha_USR = '1' + WRK.Year_Alpha_YY_USR (*ZERO);

// WRK.Date (Alpha) USR = CONCAT(WRK.Date (Alpha) USR,CON.0101,CON.*ZERO)
WRK.Date_Alpha_USR = WRK.Date_Alpha_USR + '0101' (*ZERO);

// DTL.USR From Date = CVTVAR(WRK.Date (Alpha) USR)
DTL.USR_From_Date = CVTVAR(WRK.Date_Alpha_USR);

//?** create valid date for last of the year
// WRK.Date (Alpha) USR = CON.*BLANK
WRK.Date_Alpha_USR = *BLANK;

// WRK.Date (Alpha) USR = CONCAT(CON.1,WRK.Year Alpha (YY) USR,CON.*ZERO)
WRK.Date_Alpha_USR = '1' + WRK.Year_Alpha_YY_USR (*ZERO);

// WRK.Date (Alpha) USR = CONCAT(WRK.Date (Alpha) USR,CON.1231,CON.*ZERO)
WRK.Date_Alpha_USR = WRK.Date_Alpha_USR + '1231' (*ZERO);

//?** convert to valid numeric, then convert to 15.5 to pass
// WRK.Thru Date             USR = CVTVAR(WRK.Date (Alpha) USR)
WRK.Thru_Date_USR = CVTVAR(WRK.Date_Alpha_USR);

// WRK.Thru Date Pass        USR = WRK.Thru Date             USR
WRK.Thru_Date_Pass_USR = WRK.Thru_Date_USR;

// WRK.Status - Y or N = CND.no
WRK.Status_Y_or_N = 'N';

ENDIF;

//?Validate state code
CASE;

// IF DTL.USR State Code is State code not Blanks
IF DTL.USR_State_Code <> *BLANK;

EXECUTE FUNCTION(RTV State Description  RT) TYPE(RTVOBJ) FILE(CAACREP)          AC1227485;
PARAMETER(DTL.USR_State_Code);
PARAMETER(DTL.State_Description);
PARAMETER(LCL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF DTL.State Description is equal to blank
IF DTL.State_Description = *BLANK;

// Send error message - 'State Master not found.'
ERROR(USR0005);

ENDIF;

ENDIF;

//?Validate Warehouse 1, if entered                      E000528
CASE;

// IF DTL.Warehouse 1 USR is Entered
IF DTL.Warehouse_1_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_1_USR);
PARAMETER(DTL.Description_1_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_1_USR);

ENDIF;

ENDIF;

//?Validate Warehouse 2, if entered                      E000528
CASE;

// IF DTL.Warehouse 2 USR is Entered
IF DTL.Warehouse_2_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_2_USR);
PARAMETER(DTL.Description_2_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_2_USR);

ENDIF;

ENDIF;

//?Validate Warehouse 3, if entered                      E000528
CASE;

// IF DTL.Warehouse 3 USR is Entered
IF DTL.Warehouse_3_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_3_USR);
PARAMETER(DTL.Description_3_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_3_USR);

ENDIF;

ENDIF;

//?Validate Warehouse 4, if entered                      E000528
CASE;

// IF DTL.Warehouse 4 USR is Entered
IF DTL.Warehouse_4_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_4_USR);
PARAMETER(DTL.Description_4_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_4_USR);

ENDIF;

ENDIF;

//?Validate Warehouse 5, if entered                      E000528
CASE;

// IF DTL.Warehouse 5 USR is Entered
IF DTL.Warehouse_5_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_5_USR);
PARAMETER(DTL.Description_5_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_5_USR);

ENDIF;

ENDIF;

//?Validate Warehouse 6, if entered                      E000528
CASE;

// IF DTL.Warehouse 6 USR is Entered
IF DTL.Warehouse_6_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_6_USR);
PARAMETER(DTL.Description_6_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_6_USR);

ENDIF;

ENDIF;

//?Validate Warehouse 7, if entered                      E000528
CASE;

// IF DTL.Warehouse 7 USR is Entered
IF DTL.Warehouse_7_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_7_USR);
PARAMETER(DTL.Description_7_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_7_USR);

ENDIF;

ENDIF;

//?Validate Warehouse 8, if entered                      E000528
CASE;

// IF DTL.Warehouse 8 USR is Entered
IF DTL.Warehouse_8_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_8_USR);
PARAMETER(DTL.Description_8_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_8_USR);

ENDIF;

ENDIF;

//?Validate Warehouse 9, if entered                      E000528
CASE;

// IF DTL.Warehouse 9 USR is Entered
IF DTL.Warehouse_9_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_9_USR);
PARAMETER(DTL.Description_9_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_9_USR);

ENDIF;

ENDIF;

//?Validate Warehouse 10, if entered                      E000528
CASE;

// IF DTL.Warehouse 10 USR is Entered
IF DTL.Warehouse_10_USR <> *BLANK;

EXECUTE FUNCTION(RTV Whse Descrip       RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1257603;
PARAMETER(DTL.Warehouse_10_USR);
PARAMETER(DTL.Description_10_usr);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Warehouse not found'
ERROR(USR0372);
MSGPARM(DTL.Warehouse_10_USR);

ENDIF;

ENDIF;

//?USER: User defined action

//?Submit job for Print
// PAR.Company Number Pass   USR = DTL.Company Number CDE
PAR.Company_Number_Pass_USR = DTL.Company_Number_CDE;

// PAR.From Date Pass        USR = DTL.USR From Date
PAR.From_Date_Pass_USR = DTL.USR_From_Date;

//?** Fill in Thru Date Pass field
CASE;

// IF DTL.YEAR 1 USR is Greater than zero
IF DTL.YEAR_1_USR > *ZERO;

// PAR.Thru Date Pass        USR = WRK.Thru Date Pass        USR
PAR.Thru_Date_Pass_USR = WRK.Thru_Date_Pass_USR;

//?** Fill in Thru Date Pass field
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF DTL.USR To Date is Entered
IF DTL.USR_To_Date <> *ZERO;

// PAR.Thru Date Pass        USR = DTL.USR To Date
PAR.Thru_Date_Pass_USR = DTL.USR_To_Date;

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Thru Date Pass        USR = DTL.Date To               USR
PAR.Thru_Date_Pass_USR = DTL.Date_To_USR;

ENDIF;

ENDIF;

// WRK.Current System Date = DTL.YEAR 1 USR
WRK.Current_System_Date = DTL.YEAR_1_USR;

//?** Option 3 added for Actual Ship Date          E00076  11/10/2008
// Call program PMT&Pass Load tally rptUP.
CALL PROGRAM(PMT&Pass Load tally rptUP) ('PDF5UPC');
PARAMETER(PGM.*Return_code);
PARAMETER('TRF');
PARAMETER('PDF5PCLP');
PARAMETER('LOAD TALLY REPORT');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(DTL.YEAR_1_USR);
PARAMETER(PAR.From_Date_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(DTL.Report_Type_Sch_or_Deadl);
PARAMETER(WRK.Status_Y_or_N);
PARAMETER(DTL.Carrier_Code);
PARAMETER(DTL.Load_Type);
PARAMETER(DTL.USR_State_Code);
PARAMETER(*MISSING);
PARAMETER(DTL.Warehouse_1_USR);
PARAMETER(*MISSING);
PARAMETER(DTL.Warehouse_2_USR);
PARAMETER(*MISSING);
PARAMETER(DTL.Warehouse_3_USR);
PARAMETER(*MISSING);
PARAMETER(DTL.Warehouse_4_USR);
PARAMETER(*MISSING);
PARAMETER(DTL.Warehouse_5_USR);
PARAMETER(*MISSING);
PARAMETER(DTL.Warehouse_6_USR);
PARAMETER(*MISSING);
PARAMETER(DTL.Warehouse_7_USR);
PARAMETER(*MISSING);
PARAMETER(DTL.Warehouse_8_USR);
PARAMETER(*MISSING);
PARAMETER(DTL.Warehouse_9_USR);
PARAMETER(*MISSING);
PARAMETER(DTL.Warehouse_10_USR);

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

