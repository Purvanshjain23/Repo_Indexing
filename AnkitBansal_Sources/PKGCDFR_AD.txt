// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKGCDFR
// ?Date: 14.08.2025 Time: 02:51:21
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?HISTORY
DO;

//?H16749 SLM 08/19/2020 Replace Job Date w/System Date
//?on the tattloo detail
//?E13964 JJH 10/23/18 - Edit Drive Card
//?- Do not allow Option 9=Edit Drive Card if User Application
//?  Profile is assigned Application Code = NDRVCD (Do not allow Edit
//?  Drive Card)
//?E0000 SLM 10/24/2018 *NEVER GOT INSTALL INTO PRODUCTION     N
//?E0000 SLM 10/24/2018 *REMOVE THE FOLLOWING CHANGES FOR 5/14
//?E0000 SLM 05/10/2014  MULTIPLE USERS ARE ON AT THE SAME TIME,
//?This was causing issues with the drive card number on the Pen
//?like the drive card # does not match the drive card on the tattoo
//?detail
//?Solultion: Jancie G, will speak with the group
//?and we will verify the drive card from the pen to the
//?drive card in the tattoo detail
//?if different then update the drive card from the TD into the Pen
//?and only 1 drive card number from the tattoo detail is allowed
//?if we more drive card #'s then we leave all alone
//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//? from 5 to 7.
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.Pen_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF PAR.Oms Access Denied (Y/N) is Yes
IF PAR.Oms_Access_Denied_Y_N = 'Y';

RETURN;

ENDIF;

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// CTL.Pen Company Number = WRK.Pen Company Number
CTL.Pen_Company_Number = WRK.Pen_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

// CTL.RS Record Status = CND.Active
CTL.RS_Record_Status = 'A';

// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(CTL.Pen_Company_Number);
PARAMETER(CTL.Name_USR);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv Tattoos in a pen  RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1198621;
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(WRK.Tattoo_1_USR);
PARAMETER(WRK.Tattoo_2_USR);
PARAMETER(WRK.Tattoo_3_USR);
PARAMETER(WRK.Tattoo_4_USR);
PARAMETER(WRK.tattoo_5_USR);
PARAMETER(WRK.@Status_+);
PARAMETER(RCD.TH_Schedule_Kill_Shift);
PARAMETER(RCD.BOL_Truck_Scale_Weigh_Sts);
{
 //?USER: Initialize routine

 // WRK.Count USR = CON.*ZERO
 WRK.Count_USR = *ZERO;

 // PAR.@Status +/- = WRK.Blank USR
 PAR.@Status_+ = WRK.Blank_USR;

 // PAR.Tattoo 1              USR = CON.*BLANK
 PAR.Tattoo_1_USR = *BLANK;

 // PAR.Tattoo 2              USR = CON.*BLANK
 PAR.Tattoo_2_USR = *BLANK;

 // PAR.Tattoo 3              USR = CON.*BLANK
 PAR.Tattoo_3_USR = *BLANK;

 // PAR.Tattoo 4              USR = CON.*BLANK
 PAR.Tattoo_4_USR = *BLANK;

 // PAR.tattoo 5              USR = CON.*BLANK
 PAR.tattoo_5_USR = *BLANK;

 // PAR.First Time Flag Usr = CND.Yes
 PAR.First_Time_Flag_Usr = 'Y';

 //?USER: Process Data record

 // WRK.Count USR = WRK.Count USR + CON.1
 WRK.Count_USR = WRK.Count_USR + 1;

 // WRK.Tattoo Nbr 4          USR = DB1.TH Tattoo Number
 WRK.Tattoo_Nbr_4_USR = DB1.TH_Tattoo_Number;

 //?Set up Tattoo's
 CASE;

 // IF WRK.Count USR is One
 IF WRK.Count_USR = 1;

 // PAR.Tattoo 1              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_1_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 EXECUTE FUNCTION(Rtv Shift,HldOvrShft  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1195857;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(PAR.TH_Schedule_Kill_Shift);
 PARAMETER(WRK.TH_Shift_Held_Over);
 PARAMETER(WRK.TH_Shift_Held_Over_Head);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 //?Set up Tattoo's
 // IF WRK.Count USR is Two
 IF WRK.Count_USR = 2;

 // PAR.Tattoo 2              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_2_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 //?Set up Tattoo's
 // IF WRK.Count USR is Three
 IF WRK.Count_USR = 3;

 // PAR.Tattoo 3              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_3_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 //?Set up Tattoo's
 // IF WRK.Count USR is Four
 IF WRK.Count_USR = 4;

 // PAR.Tattoo 4              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.Tattoo_4_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 //?Set up Tattoo's
 // IF WRK.Count USR is Five
 IF WRK.Count_USR = 5;

 // PAR.tattoo 5              USR = CVTVAR(WRK.Tattoo Nbr 4          USR)
 PAR.tattoo_5_USR = CVTVAR(WRK.Tattoo_Nbr_4_USR);

 //?Set up Tattoo's
 // IF WRK.Count USR is Six
 IF WRK.Count_USR = 6;

 // PAR.@Status +/- = CND.Add
 PAR.@Status_+ = '+';

 ENDIF;

 //?Truck Weight Status
 CASE;

 // IF PAR.First Time Flag Usr is Yes
 IF PAR.First_Time_Flag_Usr = 'Y';

 EXECUTE FUNCTION(Rtv BOL Truck Wgh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214496;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.#Num_USR);
 PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // PAR.First Time Flag Usr = CND.No
 PAR.First_Time_Flag_Usr = 'N';

 //?Truck Weight Status
 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF PAR.BOL Truck Scale Weigh Sts is Spread
 IF PAR.BOL_Truck_Scale_Weigh_Sts = 'S';

 EXECUTE FUNCTION(Rtv BOL Truck Wgh Sts RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1214496;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(WRK.#Num_USR);
 PARAMETER(PAR.BOL_Truck_Scale_Weigh_Sts);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

 ENDIF;

}


//?slm remove 5/14 code due to not ever installed 10/24
// Retrieve message - '&1 &2 &3 &4 &5&6'
RCD.Condition_Name_1_USR = RTVMSG(PRK0743);
PARAMETER(WRK.Tattoo_1_USR);
PARAMETER(WRK.Tattoo_2_USR);
PARAMETER(WRK.Tattoo_3_USR);
PARAMETER(WRK.Tattoo_4_USR);
PARAMETER(WRK.tattoo_5_USR);
PARAMETER(WRK.@Status_+);

CASE;

// IF RCD.BOL Truck Scale Weigh Sts is None
IF RCD.BOL_Truck_Scale_Weigh_Sts = *BLANK;

// RCD.Text 10 1 USR = CON.*BLANK
RCD.Text_10_1_USR = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.BOL Truck Scale Weigh Sts is Spread
IF RCD.BOL_Truck_Scale_Weigh_Sts = 'S';

// RCD.Text 10 1 USR = Condition name of RCD.BOL Truck Scale Weigh Sts
RCD.Text_10_1_USR = RTVCND(RCD.BOL_Truck_Scale_Weigh_Sts);

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Text 10 1 USR = CON.Not Spread
RCD.Text_10_1_USR = 'Not Spread';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?F16=WW Pen Avail
CASE;

// IF CTL.*CMD key is CF16
IF CTL.*CMD_key = '16';

// Call program WW Pen Availability   DF.
CALL PROGRAM(WW Pen Availability   DF) ('PKGGDFR');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21=Print List
CASE;

// IF CTL.*CMD key is Print List
IF CTL.*CMD_key = '21';

// Call program Pmt Print Options     XF.
CALL PROGRAM(Pmt Print Options     XF) ('PDG0PVR');
PARAMETER('Print Drive Card List');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('P/S');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Execute command - 'SBM Prt Drive Card List'
EXECUTE COMMAND(PRK0340);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(CTL.RS_Record_Status);
PARAMETER(CTL.Pen_Company_Number);
PARAMETER(CTL.Name_USR);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?F5=Refreash
CASE;

// IF CTL.*CMD key is Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

CASE;

// IF RCD.*SFLSEL is Edit Drive Card
IF RCD.*SFLSEL = '2';

//?E13964 JJH 10/23/18 - Edit Drive Card
// Call program Ext Appl Allowed      XF.
CALL PROGRAM(Ext Appl Allowed      XF) ('PUJWXFR');
PARAMETER(JOB.*USER);
PARAMETER('NDRVCD');
PARAMETER(LCL.Return_Code_USR);

CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

// RCD.*SFLSEL = CND.*Reset to blanks
RCD.*SFLSEL = *BLANK;

// Send error message - 'Option not allowed for user &1'
ERROR(PRK1126);
MSGPARM(JOB.*USER);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt Drive Card        EF.
CALL PROGRAM(Edt Drive Card        EF) ('PKGJEFR');
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Current_Drive_Card_No);
PARAMETER(RCD.Pen_Number);
PARAMETER(PAR.Oms_System_Value_Alpha);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

// IF RCD.*SFLSEL is Sent to Kill
IF RCD.*SFLSEL = '9'/'9';

EXECUTE FUNCTION(Rtv Td to Val SntToKl RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1198031;
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Number);
PARAMETER(RCD.Pen_Current_Drive_Card_No);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Initialize routine

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 // Send error message - 'Pen &1 has changed since last refresh.'
 ERROR(PRK0740);
 MSGPARM(PAR.Pen_Number);

 QUIT;

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

 QUIT;

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

ENDIF;

//?USER: Final processing (Pre-confirm)

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.*SFLSEL is Sent to Kill
IF RCD.*SFLSEL = '9'/'9';

//?H16749 SLM 8/14/2020 replace change date w/system date tattoo dtl
EXECUTE FUNCTION(Exc Ttt Sent to Kill   If) TYPE(EXCINTFUN)                     AB1182837;
PARAMETER(RCD.Pen_Number);
PARAMETER(RCD.Pen_Company_Number);
PARAMETER(RCD.Pen_Current_Drive_Card_No);
{
 //?Execute internal function

 //?Retreive/Change the Pen's Tattoo Dtls: Process code     AND
 //? Held Over Processing for any Tattoo Dtls with Held Over Status = Y
 //?IS MESSAGE INFORMATION  Tattoo Detail to be read
 DO;

 // Retrieve message - '&1 DC &8 PN &9 &10 DS &12 BOL &2-&3-&4 &5 DSEQ &6 HD &7'
 WRK.Is_Message = RTVMSG(PRK0730);
 PARAMETER('TD Parms');
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TD_Pen_Head);
 PARAMETER(PAR.Pen_Current_Drive_Card_No);
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(WRK.Pen_Sts);
 PARAMETER(*ZERO);

 EXECUTE FUNCTION(Get Next Number) TYPE(RTVOBJ) FILE(PKDXCPP)                    AB1196478;
 PARAMETER(WRK.Is_Message_Log_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Is Message Log Number = CON.1
  PAR.Is_Message_Log_Number = 1;

  //?USER: Process Data record

  // PAR.Is Message Log Number = DB1.Is Message Log Number + CON.1
  PAR.Is_Message_Log_Number = DB1.Is_Message_Log_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Create IS Message Log) TYPE(CRTOBJ) FILE(PKDXCPP)              AB1196475;
 PARAMETER(WRK.Is_Message_Log_Number);
 PARAMETER(WRK.Is_Message);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.RS_Record_Status);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDDO;

 //?H16749 SLM 08/14/2020
 //?H16749 SLM tattoo detail change date upd with system date
 EXECUTE FUNCTION(Rtv/Chg TttDtl Kill   Rt) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1183091;
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Current_Drive_Card_No);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Initialize routine

  // WRK.First Time Flag Usr = CND.Yes
  WRK.First_Time_Flag_Usr = 'Y';

  //?USER: Processing if Data record not found

  //?is not found
  DO;

  // Retrieve message - '&1 DC &8 PN &9 &10 DS &12 BOL &2-&3-&4 &5 DSEQ &6 HD &7'
  WRK.Is_Message = RTVMSG(PRK0730);
  PARAMETER('TD NF');
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(PAR.TD_Drive_Card_Number);
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(WRK.Pen_Sts);
  PARAMETER(*ZERO);

  EXECUTE FUNCTION(Get Next Number) TYPE(RTVOBJ) FILE(PKDXCPP)                    AB1196478;
  PARAMETER(WRK.Is_Message_Log_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.Is Message Log Number = CON.1
   PAR.Is_Message_Log_Number = 1;

   //?USER: Process Data record

   // PAR.Is Message Log Number = DB1.Is Message Log Number + CON.1
   PAR.Is_Message_Log_Number = DB1.Is_Message_Log_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Create IS Message Log) TYPE(CRTOBJ) FILE(PKDXCPP)              AB1196475;
  PARAMETER(WRK.Is_Message_Log_Number);
  PARAMETER(WRK.Is_Message);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDDO;

  //?USER: Process Data record

  //?is tattoo detail found
  DO;

  // Retrieve message - '&1 DC &8 PN &9 &10 DS &12 BOL &2-&3-&4 &5 DSEQ &6 HD &7'
  WRK.Is_Message = RTVMSG(PRK0730);
  PARAMETER('TD read');
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.Pen_Sts);
  PARAMETER(*ZERO);

  EXECUTE FUNCTION(Get Next Number) TYPE(RTVOBJ) FILE(PKDXCPP)                    AB1196478;
  PARAMETER(WRK.Is_Message_Log_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.Is Message Log Number = CON.1
   PAR.Is_Message_Log_Number = 1;

   //?USER: Process Data record

   // PAR.Is Message Log Number = DB1.Is Message Log Number + CON.1
   PAR.Is_Message_Log_Number = DB1.Is_Message_Log_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Create IS Message Log) TYPE(CRTOBJ) FILE(PKDXCPP)              AB1196475;
  PARAMETER(WRK.Is_Message_Log_Number);
  PARAMETER(WRK.Is_Message);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDDO;

  // WRK.TDP Process Code = CND.Driven to Kill/Resold
  WRK.TDP_Process_Code = 'K';

  // WRK.Td Pen Head Org Usr = DB1.TD Pen Head
  WRK.Td_Pen_Head_Org_Usr = DB1.TD_Pen_Head;

  // WRK.td Pen Head Wgt Org Usr = DB1.TD Live Wgt
  WRK.td_Pen_Head_Wgt_Org_Usr = DB1.TD_Live_Wgt;

  // WRK.TD Live Wgt = CON.*ZERO
  WRK.TD_Live_Wgt = *ZERO;

  // WRK.Head Held Over Usr = CON.*ZERO
  WRK.Head_Held_Over_Usr = *ZERO;

  //?Held Over Processing
  CASE;

  // IF DB1.TD Held Over Status is Ready-Hld Over Processing
  IF DB1.TD_Held_Over_Status = 'Y';

  //?Take care of the carcass detail
  //?  HEAD REC - YARD DEADS, HELD OVER = NET HEAD
  DO;

  // WRK.Net Head Usr = DB1.TD Pen Head - DB1.TD Yard Dead
  WRK.Net_Head_Usr = DB1.TD_Pen_Head - DB1.TD_Yard_Dead;

  // WRK.Net Head Usr = WRK.Net Head Usr - DB1.TD Held Over
  WRK.Net_Head_Usr = WRK.Net_Head_Usr - DB1.TD_Held_Over;

  ENDDO;

  // WRK.TD Held Over Status = CND.Blank
  WRK.TD_Held_Over_Status = *BLANK;

  CASE;

  // IF DB1.TD Pen Head EQ DB1.TD Held Over
  IF DB1.TD_Pen_Head = DB1.TD_Held_Over;

  //?Held over all of tattoo detail
  // WRK.TD Pen Head = DB1.TD Held Over
  WRK.TD_Pen_Head = DB1.TD_Held_Over;

  // WRK.TD Live Wgt = DB1.TD Live Wgt
  WRK.TD_Live_Wgt = DB1.TD_Live_Wgt;

  // IF *OTHERWISE
  IF *OTHERWISE;

  //?Held over only paritial  new record
  // WRK.TD Pen Head = DB1.TD Held Over
  WRK.TD_Pen_Head = DB1.TD_Held_Over;

  // WRK.TD Live Wgt = DB1.TD Held Over * DB1.TD Avg Live Wgt *
  WRK.TD_Live_Wgt = DB1.TD_Held_Over * DB1.TD_Avg_Live_Wgt;

  ENDIF;

  // WRK.Date USR = DB1.TH Kill Date
  WRK.Date_USR = DB1.TH_Kill_Date;

  // WRK.Yard Dead             USR = DB1.TD Yard Dead
  WRK.Yard_Dead_USR = DB1.TD_Yard_Dead;

  // WRK.Head Held Over Usr = WRK.TD Pen Head
  WRK.Head_Held_Over_Usr = WRK.TD_Pen_Head;

  // WRK.Held Over Pen Co      USR = DB1.Held Over Pen Company Num
  WRK.Held_Over_Pen_Co_USR = DB1.Held_Over_Pen_Company_Num;

  // WRK.Held Over Pen Nbr     USR = DB1.Held Over Pen Number
  WRK.Held_Over_Pen_Nbr_USR = DB1.Held_Over_Pen_Number;

  // Call program Rtv Nxt Kill Dt 2 OMS XF.
  CALL PROGRAM(Rtv Nxt Kill Dt 2 OMS XF) ('PDUXXFR');
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.TH_Kill_Date);
  PARAMETER(WRK.Next_Kill_Date);

  //?Create Tattoo dtl with same tattoo, held over pen & head, nxt kill dt
  //? and recalc live wgt
  EXECUTE FUNCTION(Create Tattoo Detail) TYPE(CRTOBJ) FILE(PKA2CPP)               AB1101750;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.Next_Kill_Date);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(WRK.TD_Live_Wgt);
  PARAMETER(WRK.TD_Pen_Head);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*MISSING);
  PARAMETER(*ZERO);
  PARAMETER(DB1.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER('Y');
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(DB1.TD_Drive_Date);
  PARAMETER(DB1.Held_Over_Pen_Company_Num);
  PARAMETER(DB1.Held_Over_Pen_Number);
  PARAMETER('O');
  PARAMETER(*ZERO);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  //?Tattoo hdr:  Reduce hd rcvd by the held over head & recalc live wgt
  //?Create Tattoo hdr with same tattoo, held over head, nxt kill dt
  //? and recalc live wgt
  //?This routine will split the information into the tattoo hdr
  //?for the held over record and change the org record
  //?Or if you want to call this the split routine.
  //?This routine will split out the tattoo headers, and
  //?  the tattoo ded/add, and the Tattoo Header Ext
  // Call program Rtv/Chg Split Tto Rcd XF.
  CALL PROGRAM(Rtv/Chg Split Tto Rcd XF) ('PKFAXFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.Date_USR);
  PARAMETER(WRK.Head_Held_Over_Usr);
  PARAMETER(WRK.Next_Kill_Date);

  //?Recount Held Over Pen Head and Chg the Pen
  EXECUTE FUNCTION(Rtv Dtl hd/Chg Pen    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1110385;
  PARAMETER(WRK.Held_Over_Pen_Co_USR);
  PARAMETER(WRK.Held_Over_Pen_Nbr_USR);
  {
   //?USER: Initialize routine

   EXECUTE FUNCTION(Set Pen Totals to Zeros) TYPE(RTVOBJ) FILE(PKA3REP)            AB1110376;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.Pen_Number);
   PARAMETER(*ZERO);
   {
    //?USER: Process Data record

    EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
    PARAMETER(DB1.Pen_Company_Number);
    PARAMETER(DB1.Pen_Number);
    PARAMETER(WRK.Blank_USR);
    PARAMETER(DB1.Pen_Maximun_Capacity);
    PARAMETER(*ZERO);
    PARAMETER(DB1.Pen_Current_Drive_Card_No);
    PARAMETER(DB1.Pen_Sts);
    PARAMETER(DB1.Pen_Drive_Sequence);
    PARAMETER(DB1.Pen_Type);
    PARAMETER(DB1.Pen_Adjustment);
    PARAMETER(WRK.Blank_USR);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   //?USER: Processing if Data record not found

   // WRK.Pen Description = CON.*BLANK
   WRK.Pen_Description = *BLANK;

   // WRK.GN Genetic Code = CON.*BLANK
   WRK.GN_Genetic_Code = *BLANK;

   EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.Pen_Number);
   PARAMETER(WRK.Pen_Description);
   PARAMETER(WRK.GN_Genetic_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

   //?USER: Process Data record

   EXECUTE FUNCTION(Rtv/Chg Pen Totals    RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1110372;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(DB1.TD_Pen_Head);
   PARAMETER(DB1.TD_Yard_Dead);
   {
    //?USER: Process Data record

    // WRK.Pen Current Head = PAR.TD Pen Head + DB1.Pen Current Head
    WRK.Pen_Current_Head = PAR.TD_Pen_Head + DB1.Pen_Current_Head;

    // WRK.Pen Current Head = WRK.Pen Current Head - PAR.TD Yard Dead
    WRK.Pen_Current_Head = WRK.Pen_Current_Head - PAR.TD_Yard_Dead;

    EXECUTE FUNCTION(Chg Pen               CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1102758;
    PARAMETER(DB1.Pen_Company_Number);
    PARAMETER(DB1.Pen_Number);
    PARAMETER(DB1.Pen_Description);
    PARAMETER(DB1.Pen_Maximun_Capacity);
    PARAMETER(WRK.Pen_Current_Head);
    PARAMETER(DB1.Pen_Current_Drive_Card_No);
    PARAMETER(DB1.Pen_Sts);
    PARAMETER(DB1.Pen_Drive_Sequence);
    PARAMETER(DB1.Pen_Type);
    PARAMETER(DB1.Pen_Adjustment);
    PARAMETER(DB1.GN_Genetic_Code);
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Record_Status);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    PARAMETER(DB1.RS_User_Added);
    PARAMETER(DB1.RS_Date_Added);
    PARAMETER(DB1.RS_Time_Added);
    {
     //?USER: Processing before Data update

     EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
     PARAMETER(DB1.RS_User_Changed);
     PARAMETER(DB1.RS_Date_Changed);
     PARAMETER(DB1.RS_Time_Changed);
     PARAMETER(DB1.RS_Job);
     PARAMETER(DB1.RS_Program);
     {
      //?Execute internal function

      // PAR.RS User Changed = JOB.*USER
      PAR.RS_User_Changed = JOB.*USER;

      // PAR.RS Date Changed = JOB.*Job date
      PAR.RS_Date_Changed = JOB.*Job_date;

      // PAR.RS Time Changed = JOB.*Job time
      PAR.RS_Time_Changed = JOB.*Job_time;

      // PAR.RS Job = JOB.*JOB
      PAR.RS_Job = JOB.*JOB;

      // PAR.RS Program = JOB.*PROGRAM
      PAR.RS_Program = JOB.*PROGRAM;

     }

    }

   }

   //?USER: Exit processing

   // WRK.Pen Description = CON.*BLANK
   WRK.Pen_Description = *BLANK;

   // WRK.GN Genetic Code = CON.*BLANK
   WRK.GN_Genetic_Code = *BLANK;

   EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.Pen_Number);
   PARAMETER(WRK.Pen_Description);
   PARAMETER(WRK.GN_Genetic_Code);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    //?USER: Process Data record

    CASE;

    // IF DB1.TDP Process Code is Drive Card Printed
    IF DB1.TDP_Process_Code = 'D';

    // OR DB1.TDP Process Code is Open
    OR DB1.TDP_Process_Code = 'O';

    EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
    PARAMETER(DB1.BOH_Company_Number);
    PARAMETER(DB1.BOH_Buy_Order_Number);
    PARAMETER(DB1.BOL_Load_Number);
    PARAMETER(DB1.TH_Tattoo_Number);
    PARAMETER(WRK.Genetic_Code_USR);
    PARAMETER(WRK.Pen_Desc_USR);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Genetic_Code = *BLANK;

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.Pen_Description = *BLANK;

     //?USER: Process Data record

     // PAR.GN Genetic Code = DB1.GN Genetic Code
     PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

     EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
     PARAMETER(DB1.GN_Genetic_Code);
     PARAMETER(PAR.Pen_Description);
     {
      //?USER: Processing if Data record not found

      // *MO.VE             1183529*Bu = ilt. in functions
      PAR.GN_Description = *BLANK;

      //?USER: Process Data record

      MOVE *ALL (To: PAR From: DB1);

     }

    }

    CASE;

    // IF PAR.GN Genetic Code is BLANKS
    IF PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = WRK.Pen_Desc_USR;

    // IF *OTHERWISE
    IF *OTHERWISE;

    CASE;

    // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
    IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = 'MIXED';

    ENDIF;

    ENDIF;

    ENDIF;

   }

   EXECUTE FUNCTION(Chg Pen Genetics      CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1119678;
   PARAMETER(PAR.BOH_Company_Number);
   PARAMETER(PAR.Pen_Number);
   PARAMETER(WRK.Pen_Description);
   PARAMETER(WRK.GN_Genetic_Code);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?kill plan held overs
  EXECUTE FUNCTION(Rtv/Chg Hld Ovr       RT) TYPE(RTVOBJ) FILE(PKAOCPP)           AB1140778;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(WRK.Date_USR);
  PARAMETER(1);
  PARAMETER(WRK.Head_Held_Over_Usr);
  {
   //?USER: Process Data record

   // WRK.KP Head Hold Over = DB1.KP Head Hold Over + PAR.KP Head Hold Over
   WRK.KP_Head_Hold_Over = DB1.KP_Head_Hold_Over + PAR.KP_Head_Hold_Over;

   EXECUTE FUNCTION(Chg Head Hld Ovr      CH) TYPE(CHGOBJ) FILE(PKAOCPP)           AB1140825;
   PARAMETER(DB1.KP_Company_Number);
   PARAMETER(DB1.KP_Kill_Cut_Date);
   PARAMETER(DB1.KP_Shift);
   PARAMETER(WRK.KP_Head_Hold_Over);
   PARAMETER(DB1.KP_Cut_Avg_Cold_Wgt);
   PARAMETER(DB1.KP_Planned_Cut);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
    PARAMETER(DB1.RS_User_Changed);
    PARAMETER(DB1.RS_Date_Changed);
    PARAMETER(DB1.RS_Time_Changed);
    PARAMETER(DB1.RS_Job);
    PARAMETER(DB1.RS_Program);
    {
     //?Execute internal function

     // PAR.RS User Changed = JOB.*USER
     PAR.RS_User_Changed = JOB.*USER;

     // PAR.RS Date Changed = JOB.*Job date
     PAR.RS_Date_Changed = JOB.*Job_date;

     // PAR.RS Time Changed = JOB.*Job time
     PAR.RS_Time_Changed = JOB.*Job_time;

     // PAR.RS Job = JOB.*JOB
     PAR.RS_Job = JOB.*JOB;

     // PAR.RS Program = JOB.*PROGRAM
     PAR.RS_Program = JOB.*PROGRAM;

    }

   }

  }

  //?Held Over Processing
  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Date USR = DB1.TH Kill Date
  WRK.Date_USR = DB1.TH_Kill_Date;

  // WRK.Yard Dead             USR = DB1.TD Yard Dead
  WRK.Yard_Dead_USR = DB1.TD_Yard_Dead;

  // WRK.Held Over Pen Co      USR = DB1.Held Over Pen Company Num
  WRK.Held_Over_Pen_Co_USR = DB1.Held_Over_Pen_Company_Num;

  // WRK.Held Over Pen Nbr     USR = DB1.Held Over Pen Number
  WRK.Held_Over_Pen_Nbr_USR = DB1.Held_Over_Pen_Number;

  // WRK.TD Pen Head = DB1.TD Pen Head
  WRK.TD_Pen_Head = DB1.TD_Pen_Head;

  // WRK.TD Held Over Status = DB1.TD Held Over Status
  WRK.TD_Held_Over_Status = DB1.TD_Held_Over_Status;

  ENDIF;

  //?remainder
  // WRK.TD Live Wgt = WRK.td Pen Head Wgt Org Usr - WRK.TD Live Wgt
  WRK.TD_Live_Wgt = WRK.td_Pen_Head_Wgt_Org_Usr - WRK.TD_Live_Wgt;

  // WRK.TD Pen Head = WRK.Td Pen Head Org Usr - WRK.Head Held Over Usr
  WRK.TD_Pen_Head = WRK.Td_Pen_Head_Org_Usr - WRK.Head_Held_Over_Usr;

  //?is tattoo detail updated
  DO;

  // Retrieve message - '&1 DC &8 PN &9 &10 DS &12 BOL &2-&3-&4 &5 DSEQ &6 HD &7'
  WRK.Is_Message = RTVMSG(PRK0730);
  PARAMETER('TD Updated');
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.Date_USR);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(DB1.TD_Pen_Head);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.Pen_Sts);
  PARAMETER(*ZERO);

  EXECUTE FUNCTION(Get Next Number) TYPE(RTVOBJ) FILE(PKDXCPP)                    AB1196478;
  PARAMETER(WRK.Is_Message_Log_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.Is Message Log Number = CON.1
   PAR.Is_Message_Log_Number = 1;

   //?USER: Process Data record

   // PAR.Is Message Log Number = DB1.Is Message Log Number + CON.1
   PAR.Is_Message_Log_Number = DB1.Is_Message_Log_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Create IS Message Log) TYPE(CRTOBJ) FILE(PKDXCPP)              AB1196475;
  PARAMETER(WRK.Is_Message_Log_Number);
  PARAMETER(WRK.Is_Message);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(WRK.RS_Record_Status);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*BLANK);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
   PARAMETER(DB1.RS_Record_Status);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   PARAMETER(DB1.RS_User_Added);
   PARAMETER(DB1.RS_Date_Added);
   PARAMETER(DB1.RS_Time_Added);
   {
    //?Execute internal function

    // PAR.RS Record Status = CND.Active
    PAR.RS_Record_Status = 'A';

    // PAR.RS User Added = JOB.*USER
    PAR.RS_User_Added = JOB.*USER;

    // PAR.RS Date Added = JOB.*Job date
    PAR.RS_Date_Added = JOB.*Job_date;

    // PAR.RS Time Added = JOB.*Job time
    PAR.RS_Time_Added = JOB.*Job_time;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

   }

  }

  ENDDO;

  //?*---------------------------------------------------------*
  //?* 08/30/00 PKP  Job Date/time was being passed into the CHGOBJ.
  //?*               This was resuling in inaccurate calculation of
  //?*               Rest Time on the Rest Time Evaluation report.
  // Call program Rtv System Date       UP.
  CALL PROGRAM(Rtv System Date       UP) ('PKPSUPR');
  PARAMETER(LCL.TD_Drive_Date);

  // Execute function Rtv Current Time      US.
  EXECUTE FUNCTION(Rtv Current Time      US) TYPE(EXCUSRSRC) ('PKM1UFR');
  PARAMETER(LCL.TD_Drive_Time);
  {
   C                     TIME           #OA1TM
  }

  // LCL.TD Drive Hour = LCL.TD Drive Time / CON.10000 *
  LCL.TD_Drive_Hour = LCL.TD_Drive_Time / 10000;

  //?*---------------------------------------------------------*
  //?H16749 slm 8/14/2020
  //?H16749 replace chg date with chg system date
  EXECUTE FUNCTION(Chg Tattoo Detail   SydCH) TYPE(CHGOBJ) FILE(PKA2CPP)          AB1353953;
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.Date_USR);
  PARAMETER(DB1.TD_Sequence_Number);
  PARAMETER(WRK.TD_Live_Wgt);
  PARAMETER(WRK.TD_Pen_Head);
  PARAMETER(WRK.Yard_Dead_USR);
  PARAMETER(WRK.Head_Held_Over_Usr);
  PARAMETER(WRK.TD_Held_Over_Status);
  PARAMETER(LCL.TD_Drive_Time);
  PARAMETER(LCL.TD_Drive_Hour);
  PARAMETER(DB1.TD_Drive_Card_Number);
  PARAMETER(DB1.TD_Avg_Live_Wgt);
  PARAMETER(DB1.TD_Gen_Bal_To_Kill);
  PARAMETER(DB1.TD_Recs_Created_for_HO);
  PARAMETER(DB1.TD_User_Status_2);
  PARAMETER(DB1.TD_User_Status_3);
  PARAMETER(DB1.TD_User_Date_1);
  PARAMETER(DB1.TD_User_Date_2);
  PARAMETER(LCL.TD_Drive_Date);
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(WRK.TDP_Process_Code);
  PARAMETER(WRK.Held_Over_Pen_Co_USR);
  PARAMETER(WRK.Held_Over_Pen_Nbr_USR);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp-SysDtIF) TYPE(EXCINTFUN)                      AB1237006;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // Call program Rtv System Date & Tim UP.
    CALL PROGRAM(Rtv System Date & Tim UP) ('PKWDUPC');
    PARAMETER(PAR.RS_Date_Changed);
    PARAMETER(PAR.RS_Time_Changed);

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  CASE;

  // IF WRK.First Time Flag Usr is Yes
  IF WRK.First_Time_Flag_Usr = 'Y';

  // Call program Crt Tattoo Action Comm XF.
  CALL PROGRAM(Crt Tattoo Action Comm XF) ('PKV4XFR');
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.TH_Tattoo_Number);
  PARAMETER(WRK.Date_USR);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER(*ZERO);
  PARAMETER('SK');
  PARAMETER(*BLANK);

  // WRK.First Time Flag Usr = CND.Blank
  WRK.First_Time_Flag_Usr = *BLANK;

  ENDIF;

 }

 //?Rtv/Chg the Pen: Drive card nbr & seq, hd adj., and status 'O'pen
 //?and Recount Pen Head
 //?IS MESSAGE INFORMATION  Pen information to be read
 DO;

 // Retrieve message - '&1 DC &8 PN &9 &10 DS &12 BOL &2-&3-&4 &5 DSEQ &6 HD &7'
 WRK.Is_Message = RTVMSG(PRK0730);
 PARAMETER('Pen Parms');
 PARAMETER(PAR.BOH_Buy_Order_Number);
 PARAMETER(PAR.BOL_Load_Number);
 PARAMETER(PAR.TH_Tattoo_Number);
 PARAMETER(PAR.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(PAR.TD_Pen_Head);
 PARAMETER(PAR.Pen_Current_Drive_Card_No);
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Number);
 PARAMETER(WRK.Pen_Sts);
 PARAMETER(*ZERO);

 EXECUTE FUNCTION(Get Next Number) TYPE(RTVOBJ) FILE(PKDXCPP)                    AB1196478;
 PARAMETER(WRK.Is_Message_Log_Number);
 {
  //?USER: Processing if Data record not found

  // PAR.Is Message Log Number = CON.1
  PAR.Is_Message_Log_Number = 1;

  //?USER: Process Data record

  // PAR.Is Message Log Number = DB1.Is Message Log Number + CON.1
  PAR.Is_Message_Log_Number = DB1.Is_Message_Log_Number + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Create IS Message Log) TYPE(CRTOBJ) FILE(PKDXCPP)              AB1196475;
 PARAMETER(WRK.Is_Message_Log_Number);
 PARAMETER(WRK.Is_Message);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(WRK.RS_Record_Status);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDDO;

 EXECUTE FUNCTION(Upd Re-Open Pen       RT) TYPE(RTVOBJ) FILE(PKA3REP)           AB1196537;
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Number);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  // PAR.Pen Sts = CND.Open
  PAR.Pen_Sts = 'O';

  EXECUTE FUNCTION(Chg Re-Open Pen       CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1196538;
  PARAMETER(DB1.Pen_Company_Number);
  PARAMETER(DB1.Pen_Number);
  PARAMETER(PAR.Pen_Description);
  PARAMETER(PAR.Pen_Current_Head);
  PARAMETER(PAR.Pen_Current_Drive_Card_No);
  PARAMETER(PAR.Pen_Sts);
  PARAMETER(PAR.Pen_Drive_Sequence);
  PARAMETER(PAR.Pen_Adjustment);
  PARAMETER(PAR.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

 EXECUTE FUNCTION(Upd Pen CurHd/Genetic IF) TYPE(EXCINTFUN)                      AB1196534;
 PARAMETER(PAR.Pen_Company_Number);
 PARAMETER(PAR.Pen_Number);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Pen Head Total    RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1196535;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(PAR.Pen_Current_Head);
  {
   //?USER: Initialize routine

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // Pen Current Head
   PAR.Pen_Current_Head = PAR.Pen_Current_Head + ( DB1.TD_Pen_Head - DB1.TD_Yard_Dead );

  }

  CASE;

  // IF PAR.Pen Current Head is *Zeros
  IF PAR.Pen_Current_Head = *ZERO;

  // PAR.Pen Description = CON.*BLANK
  PAR.Pen_Description = *BLANK;

  // PAR.GN Genetic Code = CON.*BLANK
  PAR.GN_Genetic_Code = *BLANK;

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(Rtv Pen GENETICS      RT) TYPE(RTVOBJ) FILE(PKA2CPP)           AB1107816;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(PAR.Pen_Description);
  PARAMETER(PAR.GN_Genetic_Code);
  {
   //?USER: Processing if Data record not found

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = *BLANK;

   //?USER: Process Data record

   CASE;

   // IF DB1.TDP Process Code is Drive Card Printed
   IF DB1.TDP_Process_Code = 'D';

   // OR DB1.TDP Process Code is Open
   OR DB1.TDP_Process_Code = 'O';

   EXECUTE FUNCTION(Rtv Tattoo GENETICS) TYPE(RTVOBJ) FILE(PKA1CPP)                AB1107783;
   PARAMETER(DB1.BOH_Company_Number);
   PARAMETER(DB1.BOH_Buy_Order_Number);
   PARAMETER(DB1.BOL_Load_Number);
   PARAMETER(DB1.TH_Tattoo_Number);
   PARAMETER(WRK.Genetic_Code_USR);
   PARAMETER(WRK.Pen_Desc_USR);
   {
    //?USER: Processing if Data record not found

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.GN_Genetic_Code = *BLANK;

    // *MO.VE             1183529*Bu = ilt. in functions
    PAR.Pen_Description = *BLANK;

    //?USER: Process Data record

    // PAR.GN Genetic Code = DB1.GN Genetic Code
    PAR.GN_Genetic_Code = DB1.GN_Genetic_Code;

    EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
    PARAMETER(DB1.GN_Genetic_Code);
    PARAMETER(PAR.Pen_Description);
    {
     //?USER: Processing if Data record not found

     // *MO.VE             1183529*Bu = ilt. in functions
     PAR.GN_Description = *BLANK;

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

   }

   CASE;

   // IF PAR.GN Genetic Code is BLANKS
   IF PAR.GN_Genetic_Code = *BLANK;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.GN_Genetic_Code = WRK.Genetic_Code_USR;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = WRK.Pen_Desc_USR;

   // IF *OTHERWISE
   IF *OTHERWISE;

   CASE;

   // IF WRK.Genetic Code USR NE PAR.GN Genetic Code
   IF WRK.Genetic_Code_USR <> PAR.GN_Genetic_Code;

   // *MO.VE             1183529*Bu = ilt. in functions
   PAR.Pen_Description = 'MIXED';

   ENDIF;

   ENDIF;

   ENDIF;

  }

  ENDIF;

  EXECUTE FUNCTION(Chg Pen CurHd/Genetic CH) TYPE(CHGOBJ) FILE(PKA3REP)           AB1196536;
  PARAMETER(PAR.BOH_Company_Number);
  PARAMETER(PAR.Pen_Number);
  PARAMETER(PAR.Pen_Description);
  PARAMETER(PAR.Pen_Current_Head);
  PARAMETER(PAR.GN_Genetic_Code);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

 }

}


// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

