      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * SYSTEM:      Triumph Foods
      * PROGRAM:     TF430
      * TITLE:       Work with Charge Codes
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/02/05
      *
      * FUNCTION: This is a Work With that displays the records in the Charge Code
      *           Master file.
      *
      *           Positioners:
      *               Charge code
      *
      *           Selectors:
      *               Company number
      *               GL code-debit
      *               GL code-credit
      *               Charge frequency code
      *               User-controlled flag
      *               Include in invoice total flag
      *               System module code
      *               Active/inactive status
      *
      *  NOTE: When the user takes F7 to print a listing, the listing will use
      *        the positioner/selector values in the control record as the listing
      *        selections.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 05/06/09  LeAnne Ramsey
      *           Changed the Print logic to match Meat Costing.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Ftfd430    cf   e             workstn sfile(tf430s1:hdrrn1)
     F                                     infds(iofeed)
      *
      *
     Ftfp005    if   e           k disk    infds(dbfeed)
      *   Charge codes
      *
      *
     Ftfl021a   if   e           k disk
      *   Invoice charges
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D create          c                   'CREATE'
     D revise          c                   'REVISE'
     D delete          c                   'DELETE'
     D yes             c                   'Y'
     D no              c                   'N'
     D set1            c                   'SET1  '
     D edit1           c                   'EDIT1 '
     D scrn1           c                   'SCRN1 '
     D exit            c                   'EXIT  '
      *
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  Compile time array for SBMJOB used in QCMDEXC - F7-list
      *---------------------------------------------------------------
     D cmd             s              1    dim(80) ctdata perrcd(80)
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      * Standard fields
      *
     D mode            s              6
     D pgm             s             10
     D msgfl           s             10
     D maxmsg          s              2  0  inz(20)
     D routne          s              6
     D maxrrn          s              4  0
     D reset           s              1    inz('N')
     D norecs          s              1    inz('N')
     D count           s              2  0
     D wkflow          s                   like(idflow)
     D rtncd           s              2    inz('00')
     D svrrn1          s                   like(hdrrn1)
      *
      *
      *  Parms for use with QCMDEXC.  'LENGTH' is the length of the
      *  command that will be issued with QCMDEXC.  QCMDEXC requires
      *  the field containing length to be defined as 15 with 5 decimal
      *  positions.  The field 'CMDSBM' will hold the values of the
      *  submit job command when passed as a parm on the call to
      *  QCMDEXC.
      *
     D length          s             15  5 inz(80)
     D cmdsbm          s             80
      *
      *
      * Workfields required for subfile paging--see initialization
      * subroutine.
      *
     D wkplin          s              2  0
     D wkrlin          s              2  0
      *
      *
      * Control fields
      *
     D procfl          s              1a
     D dblen           s              1  0
     D crlen           s              1  0
      *
      *
      * Save fields for positioners and selectors
      *
     D svcccd          s                   like(c1cccd)
     D svcono          s                   like(c1cono)
      *
     D svgldbcd        s                   like(c1gldbcd)
     D svglcrcd        s                   like(c1glcrcd)
      *
     D svcfqcd         s                   like(c1cfqcd)
     D svucfl          s                   like(c1ucfl)
     D svinfl          s                   like(c1infl)
     D svsmcd          s                   like(c1smcd)
     D svaist          s                   like(c1aist)
      *
      *
      * Parms
      *
     D xxcono          s                   like(d1cono)
     D xxglcd          s                   like(d1gldbcd)
     D xxglcdds        s             25
      *
     D xxynfl          s                   like(c1aist)
     D xxaist          s                   like(c1aist)
      *
     D xxcfqcd         s                   like(c1cfqcd)
     D xxcfqds         s             10
     D xxsmcd          s                   like(c1smcd)
     D xxsmds          s             20
      *
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * standard error message handling data structures
      *---------------------------------------------------------------
      *
      * For error message handling, a packed index (3) is required.
      * For program readability, define a corresponding error count
      * field called 'error'
      *
     D                 ds                  inz
     D  error                         2p 0
     D   e                            2p 0 overlay(error)
      *
      * This data structure supplies the name of the message file to
      * the message handling CL program.  The field name MSGFIL must be
      * constant. The value in quotes is the name of the specific
      * message file containing the user defined messages.
      *
     D                 ds                  inz
     D  msgfil                       10    inz('HSMSGF    ')
      *
      *---------------------------------------------------------------
      *  Standard message data structures
      *---------------------------------------------------------------
      *
      * The following 3 data structures are used to speed message
      * handling since it is faster to clear data structures than
      * arrays.  Each is associated with a standard message array.
      *
     D mgi             ds                  inz
     D  mgid                          7    dim(20)
      *
     D mgd             ds                  inz
     D  mgdt                         50    dim(20)
      *
     D mgwk            ds                  inz
     D  mgw                           1    dim(50)
      *
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Standard workstation information data structure
      *---------------------------------------------------------------
      *    externally defined as UTWSFR (record format: UTIDFRR)
     D iofeed        e ds                  extname(utwsfr)
      *
      *
      *---------------------------------------------------------------
      * Standard database file information data structure
      *---------------------------------------------------------------
      *    externally defined as UTDBGR (record format: FDBCKD)
     D dbfeed        e ds                  extname(utdbfr)
      *
      *
      *---------------------------------------------------------------
      * Standard subfile option conversion
      *---------------------------------------------------------------
     D                 ds                  inz
     D d1opt                          2
     D   wkopt1                       1    overlay(d1opt)
     D   wkopt2                       1    overlay(d1opt:2)
      *
      *---------------------------------------------------------------
      *  LDA
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldcccd                 1     10
     D  ldcono                11     13  0
     D  ldgldbcd              14     21
     D  ldglcrcd              22     29
     D  ldcfqcd               30     30
     D  lducfl                31     31
     D  ldinfl                32     32
     D  ldsmcd                33     34
     D  ldaist                35     35
      *
     D  ldoutq               401    410
     D  ldhold               411    414
     D  ldsave               415    418
     D  ldcopy               419    419  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
     C                   eval      routne = set1
      *
     C     *inlr         doweq     *off                                         Main do loop
     C     routne        caseq     set1          $set1
     C     routne        caseq     scrn1         $scrn1
     C     routne        caseq     edit1         $edit1
     C     routne        caseq     exit          $exit
     C                   endcs
     C                   enddo                                                  Main do loop
      /EJECT
      *----------------------------------------------------------------
      * Set environment for screen 1
      *----------------------------------------------------------------
      *
     C     $set1         begsr
      *
      * Clear and fill the subfile
      *
     C                   exsr      $clr1
     C                   exsr      $frsh1
      *
      * Set routine to display screen
      *
     C                   eval      routne = scrn1
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Perform operator I/O for screen 1
      *----------------------------------------------------------------
      *
     C     $scrn1        begsr
      *
      * Write the error messages from the error arrays to the
      * error message subfile
      *
     C                   exsr      $wrmsg
      *
      *
      * This subfile has Fold/Unfold capabilities.  The DDS uses the keywords
      * (SFLDROP, SFLFOLD) to determine whether the user is folded or unfolded
      * and to redisplay the screen in the same mode as when he last saw it.
      * Indicators 78 and 79 are assigned in the DDS to the keywords.
      *
     C                   setoff                                       7879
     C                   if        fold = '0'
     C                   seton                                        78
     C                   else
     C                   seton                                        79
     C                   endif
      *
      * Write screen 1 to crt
      *
     C                   write     tf430k1
     C                   write     tf430ec
     C                   exfmt     tf430c1
      *
      * Save the value of the lowest subfile rrn on the screen for
      * later repositioning of the subfile
      *
     C                   eval      wkflow = idflow
      *
      * Clear the messages from the message data structures and
      * program message queue
      *
     C                   exsr      $clmsg
      *
      * Get user's entry and set next routine
      *
     C                   select
     C                   when      *in03 = *on                                  F3-exit
     C                   eval      routne = exit
      *
     C                   when      *in04 = *on                                  F4-prompt
     C                   exsr      $f4s1
     C                   eval      routne = scrn1
      *
     C                   when      *in05 = *on                                  F5-refresh
     C                   movel     yes           reset
     C                   eval      routne = set1
      *
     C                   when      *in06 = *on                                  F6-create
     C                   exsr      $creat
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in07 = *on                                  F7-listing
     C                   exsr      $list
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
     C                   when      *in17 = *on                                  F17-print opt
     C                   call      'RO890'
     C                   eval      routne = scrn1
      *
     C                   when      *in20 = *on                                  F20-wrksplf
     C                   call      'QEZOUTPT'                                       API
     C                   z-add     wkflow        hdpag1
     C                   eval      routne = scrn1
      *
      * Reposition the subfile if the user has changed any of the positioners
      * or selectors in the control record.
      *
     C                   when      svcccd <> c1cccd or
     C                             svcono <> c1cono or
     C                             svgldbcd <> c1gldbcd or
     C                             svglcrcd <> c1glcrcd or
     C                             svcfqcd <> c1cfqcd or
     C                             svucfl <> c1ucfl or
     C                             svinfl <> c1infl or
     C                             svsmcd <> c1smcd or
     C                             svaist <> c1aist
     C                   exsr      $chksv
      *
     C                   when      *in25 = *on                                  F25-rollup
     C                   exsr      $load1
     C                   other
      *
      * User has pressed enter
      *
     C                   if        norecs = yes                                 If empty sfl
     C                   eval      routne = set1
     C                   else
     C                   eval      routne = edit1
     C                   endif                                                  If empty sfl
      *
     C                   endsl
      *
      * Bring in the LDA to pick up any printer changes the user may
      * have made from called programs
      *
     C                   in        lda
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Save the control record positioners/selectors
      *----------------------------------------------------------------
      *
     C     $chksv        begsr
      *
     C                   movel     no            reset
     C                   eval      routne = set1
      *
     C                   move      c1cccd        svcccd
     C                   z-add     c1cono        svcono
     C                   move      c1cfqcd       svcfqcd
     C                   move      c1ucfl        svucfl
     C                   move      c1infl        svinfl
     C                   move      c1smcd        svsmcd
     C                   move      c1aist        svaist
      *
      *
      * Prepare to scan on GL Debit Code
      *  1) trim leading/trailing blanks
      *  2) find first non-blank position from right
      *
     C                   eval      c1gldbcd = %trim(c1gldbcd)
     C     ' '           checkr    c1gldbcd      dblen
     C                   movel     c1gldbcd      svgldbcd
      *
      * Prepare to scan on GL Credit Code
      *  1) trim leading/trailing blanks
      *  2) find first non-blank position from right
      *
     C                   eval      c1glcrcd = %trim(c1glcrcd)
     C     ' '           checkr    c1glcrcd      crlen
     C                   movel     c1glcrcd      svglcrcd
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Edit input fields for screen 1
      *----------------------------------------------------------------
      *
     C     $edit1        begsr
      *
      * First, edit all the selections entered by the user in the
      * subfile option field to see that valid selections were input
      *
     C                   exsr      $edop1
      *
      * If there are no errors in the subfile option selectors entered
      * by the user, then execute the subroutine to reread and process
      * the records selected by the user.  After completing the
      * subroutine, set the routine to start over.
      *
     C                   if        error = 0                                    If no error
     C                   exsr      $proc1
      *
     C                   if        rtncd = '00'
     C                   eval      routne = set1
     C                   else
     C                   eval      hdpag1 = wkflow
     C                   eval      routne = scrn1
     C                   endif
      *
      * else there were errors in the subfile options entered,
      * so set to redisplay screen with errors to user
      *
     C                   else
     C                   eval      routne = scrn1
     C                   endif                                                  If no error
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Clear subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $clr1         begsr
      *
     C                   z-add     0             svrrn1
      *
     C                   clear                   tf430s1
     C                   seton                                        83        sflclr
     C                   write     tf430c1
     C                   setoff                                       818283
      *                                                    81=sfldsp
      *                                                    82=sflend
      *                                                    83=sflclr
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Refresh/fill the subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $frsh1        begsr
      *
      * Set position in file
      *
     C     c1cccd        setll     tfp005
      *
      *
      * The field 'reset' is a flag field to indicate whether you are
      * attempting to reposition the user close to where he was in the
      * subfile.
      * The lowest subfile RRN on the screen from the DSPF feedbcdk
      * area (IDFLOW) was retrieved earlier and put in WKFLOW.
      * Add to WKFLOW the number of lines on your subfile page or the
      * number less 1 to determine a subfile RRN to reposition to.
      *
      *
     C                   if        reset = yes
     C                   eval      maxrrn = wkflow + wkrlin
     C                   else
      *
      * Don't try to reposition the user, just start the subfile over
      *
     C                   eval      maxrrn = wkplin
     C                   endif
      *
      * Load the subfile until you have the required number of records.
      * The number will depend on whether uou are repositioning the
      * subfile or not. Stop if you get to the end of the subfile.
      *
     C                   dou       svrrn1 >= maxrrn or *in82 = *on
     C                   exsr      $load1
     C                   enddo
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Load subfile for screen 1
      *---------------------------------------------------------------
      *
     C     $load1        begsr
      *
     C                   z-add     svrrn1        hdrrn1
      *
      * Set the count of records on the subfile page to zero.
      *
     C                   eval      count = 0
      *
      * Fill the subfile until the end of the database file or
      * you have filled all the lines on the subfile page.
      *
     C                   setoff                                       82
     C                   dou       *in82 = *on or count >= wkplin               Do fill
     C                   read      tfp005                                 82
     C                   if        *in82 = *off                                 If read
      *
     C                   move      yes           procfl
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1gldbcd <> *blank
     C     c1gldbcd:dblenscan      ccgldbcd                               92
     C                   if        *in92 = *off
     C                   move      no            procfl
     C                   endif
     C                   endif
      *
     C                   if        c1glcrcd <> *blank
     C     c1glcrcd:crlenscan      ccglcrcd                               92
     C                   if        *in92 = *off
     C                   move      no            procfl
     C                   endif
     C                   endif
      *
      *
      * Only include records that match the user's selectors
      *
     C                   if        c1cono <> 0 and
     C                             c1cono <> cccono
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1cfqcd <> *blank and
     C                             c1cfqcd <> cccfqcd
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1ucfl <> *blank and
     C                             c1ucfl <> ccucfl
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1infl <> *blank and
     C                             c1infl <> ccinfl
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1smcd <> *blank and
     C                             c1smcd <> ccsmcd
     C                   move      no            procfl
     C                   endif
      *
     C                   if        c1aist <> *blank and
     C                             c1aist <> ccaist
     C                   move      no            procfl
     C                   endif
      *
     C                   if        procfl = yes                                 If process
     C                   add       1             count
     C                   add       1             hdrrn1
     C                   move      *blank        d1opt
     C                   move      cccccd        d1cccd
     C                   z-add     cccono        d1cono
     C                   move      ccgldbcd      d1gldbcd
     C                   move      ccglcrcd      d1glcrcd
     C                   move      cccfqcd       d1cfqcd
     C                   move      ccucfl        d1ucfl
     C                   move      ccinfl        d1infl
     C                   move      ccsmcd        d1smcd
     C                   move      ccaist        d1aist
     C                   move      ccccds        d1ccds
      *
     C                   write     tf430s1
     C                   seton                                        81
      *
      * For positioning, place the subfile relative record number into
      * the sflrcdnbr field (hdpag1)
      *
     C                   z-add     hdrrn1        hdpag1
      *
     C                   endif                                                  If process
     C                   endif                                                  If read
     C                   enddo                                                  Do fill loop
      *
      * If no records were written to the subfile, then issue
      * the standard message 'No data to Display'.
      *
     C                   if        hdrrn1 = 0                                   If no recs
     C                   movel     yes           norecs
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09002'
     C                   endif
      *
     C                   else
     C                   movel     no            norecs
     C                   endif                                                  If no recs
      *
     C                   z-add     hdrrn1        svrrn1
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Call the maintenance program when the user takes F6
      *---------------------------------------------------------------
      *
     C     $creat        begsr
      *
     C                   call      'TF130'
     C                   parm      create        mode
     C                   parm      *blank        d1cccd
     C                   parm      ' '           d1ucfl
     C                   parm      '00'          rtncd
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Read and edit changed subfile records for valid
      *          subfile options on screen 1
      *---------------------------------------------------------------
      *
     C     $edop1        begsr
      *
     C                   z-add     0             error
      *
      * Read all changed subfile records, editing for valid options
      *
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do readc
     C                   readc     tf430s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
      * Set off error indicator for subfile option field
      *
     C                   setoff                                       30
      *
      * Convert option user entered to standard format. For example,
      * a ' 1', '01', and '1 ' must be standardized to ' 1'.
      *
     C                   if        wkopt2 = *blank                              If 2 = blank
     C                   eval      wkopt2 = wkopt1
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 2 = blank
      *
     C                   if        wkopt1 = *zero                               If 1 is zero
     C                   eval      wkopt1 = *blank
     C                   endif                                                  If 1 is zero
      *
      * Test for valid subfile option entry on all changed records
      *
     C                   if        d1opt <> ' 2' and                            If bad opt
     C                             d1opt <> ' 4' and
     C                             d1opt <> ' 5' and
     C                             d1opt <> '  '
     C                   seton                                        3085
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09006'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If bad opt
      *
      * Make additional checks when deleting
      *
     C                   select
     C                   when      d1opt = ' 4'
     C                   exsr      $opt4
     C                   endsl
      *
      *
      * Rewrite the subfile record with the modified data tag on so it
      * will be reread and processed.
      *
     C                   if        error = 0 and d1opt = *blank
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif
      *
     C                   update    tf430s1
     C                   setoff                                       8530
     C                   endif                                                  If rec read
     C                   enddo                                                  Do readc
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------------------------------
      * Edits for Option 4
      *---------------------------------------------------------------------------------------
      *
      * You cannot delete a Charge Code record if it:
      *  1) Is not User-Controlled
      *  2) Has already been used on a Invoice Charges record
      *
     C     $opt4         begsr
      *
      * User-controlled
     C                   if        d1ucfl <> yes
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08016'
     C                   exsr      $err1
     C                   endif
     C                   endif
      *
      * Already used
      *
     C     d1cccd        chain     tfl021a                            92
     C                   if        *in92 = *off                                 If used
     C                   seton                                        30
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS08015'
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If used
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Read subfile records and process user selections for screen 1
      *---------------------------------------------------------------
      *
     C     $proc1        begsr
      *
     C                   z-add     0             error
     C                   movel     '00'          rtncd
      *
      * Read all the changed subfile records processing the subfile
      * selection
     C                   setoff                                       80
     C                   dou       *in80 = *on                                  Do process
     C                   readc     tf430s1                                80
     C                   if        *in80 = *off                                 If rec read
      *
     C                   if        rtncd = '00'                                 If enter
      *
      * If user selected option 2=revise,
      * set the flag 'reset' to YES so that when you return to this
      * Work With you will reposition to the same place in the subfile
      *
      *
     C                   select
     C                   when      d1opt = ' 2'
     C                   movel     yes           reset
     C                   call      'TF130'
     C                   parm      revise        mode
     C                   parm                    d1cccd
     C                   parm                    d1ucfl
     C                   parm                    rtncd
      *
      * If user selected Option 4=delete,
      * set the flag 'reset' to YES so that when you return to this
      * Work With you will reposition to the same place in the subfile
      *
     C                   when      d1opt = ' 4'
     C                   movel     yes           reset
     C                   call      'TF130'
     C                   parm      delete        mode
     C                   parm                    d1cccd
     C                   parm                    d1ucfl
     C                   parm                    rtncd
      *
      * If user selected option 5=view,
      * set the flag 'reset' to YES so that when you return to this
      * Work With you will reposition to the same place in the subfile
      *
     C                   when      d1opt = ' 5'
     C                   movel     yes           reset
     C                   call      'TF730'
     C                   parm                    d1cccd
     C                   parm                    rtncd
     C                   endsl
      *
      * Upon returning from the called program,
      * clear the subfile option selected by the user and rewrite
      * the subfile record.
      *
     C                   move      *blank        d1opt
     C                   setoff                                       85
     C                   else
     C                   seton                                        85
     C                   endif                                                  If enter
      *
     C                   update    tf430s1
      *
     C                   endif                                                  If rec read
     C                   enddo                                                  Do process
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Print listing of production data
      *---------------------------------------------------------------
      *
     C     $list         begsr
      *
      * Move submission values into LDA
      *
     C                   move      c1cccd        ldcccd
     C                   z-add     c1cono        ldcono
     C                   move      c1gldbcd      ldgldbcd
     C                   move      c1glcrcd      ldglcrcd
     C                   move      c1cfqcd       ldcfqcd
     C                   move      c1ucfl        lducfl
     C                   move      c1infl        ldinfl
     C                   move      c1smcd        ldsmcd
     C                   move      c1aist        ldaist
      *
     C                   out       lda
      *
      * Move the 80-character compile time array 'CMD' to an
      * 80-character field for passing as a parm with QCMDEXC.
      *
     C                   movea     cmd           cmdsbm
     C                   call      'QCMDEXC'
     C                   parm                    cmdsbm
     C                   parm                    length
      *
      * Issue the standard request submission message
      *
     C                   if        error < maxmsg
     C                   add       1             error
     C                   eval      mgid(e) = 'HS09003'
     C                   endif
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * F4 prompt on screen 1
      *---------------------------------------------------------------
      *
     C     $f4s1         begsr
      *
     C                   select
      * GL Code--Debit
     C                   when      fld = 'C1GLDBCD'
     C                   seton                                        51
     C                   call      'TF511'
     C                   parm      c1cono        xxcono
     C                   parm      *blank        xxglcd
     C                   parm      *blank        xxglcdds
      *
     C                   if        xxglcd <> *blank
     C                   move      xxglcd        c1gldbcd
     C                   endif
      *
      *
      * GL Code--Credit
      *
     C                   when      fld = 'C1GLCRCD'
     C                   seton                                        52
     C                   call      'TF511'
     C                   parm      c1cono        xxcono
     C                   parm      *blank        xxglcd
     C                   parm      *blank        xxglcdds
      *
     C                   if        xxglcd <> *blank
     C                   move      xxglcd        c1glcrcd
     C                   endif
      *
      *
      * Charge frequency code
      *
     C                   when      fld = 'C1CFQCD'
     C                   call      'TF508'
     C                   parm      *blank        xxcfqcd
     C                   parm      *blank        xxcfqds
     C                   seton                                        53
     C                   if        xxcfqcd <> *blank
     C                   movel     xxcfqcd       c1cfqcd
     C                   endif
      *
      * User controlled flag
      *
     C                   when      fld = 'C1UCFL'
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
     C                   seton                                        54
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1ucfl
     C                   endif
      *
      * Include in invoice total flag
      *
     C                   when      fld = 'C1INFL'
     C                   call      'HP522'
     C                   parm      *blank        xxynfl
     C                   seton                                        55
     C                   if        xxynfl <> *blank
     C                   movel     xxynfl        c1infl
     C                   endif
      *
      * System module
     C                   when      fld = 'C1SMCD'
     C                   call      'TF509'
     C                   parm      *blank        xxsmcd
     C                   parm      *blank        xxsmds
     C                   seton                                        56
     C                   if        xxsmcd <> *blank
     C                   movel     xxsmcd        c1smcd
     C                   endif
      *
      * Active/inactive status
      *
     C                   when      fld = 'C1AIST'
     C                   call      'HP512'
     C                   parm      *blank        xxaist
     C                   seton                                        57
     C                   if        xxaist <> *blank
     C                   movel     xxaist        c1aist
     C                   endif
     C                   other
      *
      * F4 not valid for this field...issue message
      *
     C                   if        error < maxmsg
     C                   add       1             error                                        013
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   endsl
      *
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Set the subfile to redisplay at the first page that has errors
      *---------------------------------------------------------------
      *
     C     $err1         begsr
      *
     C                   if        error = 1
     C                   eval      hdpag1 = hdrrn1
     C                   endif
      *
     C                   endsr
      *
      *---------------------------------------------------------------
      * Set on last record and end job
      *---------------------------------------------------------------
      *
     C     $exit         begsr
     C                   seton                                        LR
     C                   endsr
      /EJECT
      *---------------------------------------------------------------
      * Write error messages
      *---------------------------------------------------------------
      *
     C     $wrmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm                    mgid
     C                   parm                    mgdt
     C                   parm                    error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on. So, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      *
      *----------------------------------------------------------------
      * Clear messages
      *----------------------------------------------------------------
      *
     C     $clmsg        begsr
      *
     C                   call      'UT80045J'                           43
     C                   parm      *blank        mgi
     C                   parm      *blank        mgd
     C                   parm      *zero         error
     C                   parm      sdpgm         pgm
     C                   parm      msgfil        msgfl
      *
      * If call to UT80045J failed, a message hardcoded in the DSPF
      * command line format will be set on; so, redisplay screen.
      *
     C                   if        *in43 = *on
     C                   eval      routne = set1
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Parm lists
      *   none
      *
      * Key lists
      *   none
      *
      * Retrieve/initialize "printer" fields in the LDA
      *
     C                   call      'RO891CL'
     C                   in        lda
      *
      * Initialize LDA
     C                   z-add     0             ldcono
     C                   out       lda
      *
      * To support F5-Refresh, logic requires the number of lines on
      * the subfile page and also the number of lines less 1.  By
      * setting these values up as constant work fields, the processing
      * logic can be standardized between programs.
      *
     C                   z-add     12            wkplin                         sflpag
     C     wkplin        sub       1             wkrlin                         sflpag - 1
      *
      *
      * The following standard code must be included to make the
      * standard error message handling program function properly.
      * This code sets and clears the program message queue.
      *
     C                   movel     '*'           msgpgm
     C                   exsr      $clmsg
      *
     C                   endsr
      /EJECT
      *****************************************************************
      * COMPILE TIME ARRAY 'CMD' USED IN QCMDEXC
      *****************************************************************
** CMD table 'CMD' submits listing when F7 selected
SBMJOB CMD(CALL PGM(TF430CL )) JOB(CHRGLIST) JOBQ(*JOBD)
