// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPV8PFR
// ?Date: 14.08.2025 Time: 12:06:42
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('I/C');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


//?USER: Process top of page

MOVE *ALL (To: TOP From: PAR);

//?USER: Print required level headings

// SUPPRESSED PRINT PFS Company Number header format

// SUPPRESSED PRINT PFS Transaction Date header format

// SUPPRESSED PRINT PFS Warehouse Code header format

// SUPPRESSED PRINT PFS Item Code header format

// SUPPRESSED PRINT PFS Location Code header format

// SUPPRESSED PRINT PFS Receive/Located Date header format

//?USER: On print of detail format

//?--- Receive date = Lot Loc Production Date ---
EXECUTE FUNCTION(CVT *YYMD to *CYMD    IF) TYPE(EXCINTFUN)                      AC1929228;
PARAMETER(LCL.Production_Date);
PARAMETER(DB1.PFS_Production_Date);
{
 //?Execute internal function

 //?** YEAR **
 // PAR.Year Code = PAR.DATE / CON.10000 *
 PAR.Year_Code = PAR.DATE / 10000;

 // PAR.Year  NBR USR = PAR.Year Code
 PAR.Year_NBR_USR = PAR.Year_Code;

 // PAR.Year  (Char) USR = CVTVAR(PAR.Year  NBR USR)
 PAR.Year_Char_USR = CVTVAR(PAR.Year_NBR_USR);

 //?** MONTH **
 // PAR.Month                 USR = PAR.DATE / CON.100 *
 PAR.Month_USR = PAR.DATE / 100;

 // PAR.Month (Char) USR = CVTVAR(PAR.Month                 USR)
 PAR.Month_Char_USR = CVTVAR(PAR.Month_USR);

 //?** DAY **
 // PAR.Day of Month USR = PAR.DATE
 PAR.Day_of_Month_USR = PAR.DATE;

 // PAR.Day   (Char) USR = CVTVAR(PAR.Day of Month USR)
 PAR.Day_Char_USR = CVTVAR(PAR.Day_of_Month_USR);

 //?CENTURY+YEAR
 CASE;

 // IF PAR.Year Code is Twentieth Century
 IF PAR.Year_Code <= 1999;

 // PAR.Date (Alpha) USR = CONCAT(CON.0,PAR.Year  (Char) USR,CON.*ZERO)
 PAR.Date_Alpha_USR = '0' + PAR.Year_Char_USR (*ZERO);

 //?CENTURY+YEAR
 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Date (Alpha) USR = CONCAT(CON.1,PAR.Year  (Char) USR,CON.*ZERO)
 PAR.Date_Alpha_USR = '1' + PAR.Year_Char_USR (*ZERO);

 ENDIF;

 // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Month (Char) USR,CON.*ZERO)
 PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Month_Char_USR (*ZERO);

 // PAR.Date (Alpha) USR = CONCAT(PAR.Date (Alpha) USR,PAR.Day   (Char) USR,CON.*ZERO)
 PAR.Date_Alpha_USR = PAR.Date_Alpha_USR + PAR.Day_Char_USR (*ZERO);

 // PAR.Date                  USR = CVTVAR(PAR.Date (Alpha) USR)
 PAR.Date_USR = CVTVAR(PAR.Date_Alpha_USR);

}


EXECUTE FUNCTION(Rtv Lot/Loc/Lvl Qty,WgRT) TYPE(RTVOBJ) FILE(PDL5CPP)           AC1769678;
PARAMETER(DB1.PFS_Company_Number);
PARAMETER(DB1.PFS_Item_Code);
PARAMETER(DB1.PFS_From_Warehouse_Code);
PARAMETER(LCL.Production_Date);
PARAMETER(*ZERO);
PARAMETER(7777);
PARAMETER(CUR.ILL_Item_Qty_On_Hand);
PARAMETER(CUR.ILL_Item_Wgt_On_Hand);
PARAMETER(WRK.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


// CUR.Weight Prod 1 USR = CUR.PFS On Hand Weight - CUR.ILl Item Wgt On-Hand
CUR.Weight_Prod_1_USR = CUR.PFS_On_Hand_Weight - CUR.ILL_Item_Wgt_On_Hand;

// CUR.Quantity Avail USR = CUR.PFS On Hand Quantity - CUR.ILL Item Qty On-Hand
CUR.Quantity_Avail_USR = CUR.PFS_On_Hand_Quantity - CUR.ILL_Item_Qty_On_Hand;

CASE;

// IF CUR.Quantity Avail USR is EQ Zero
IF CUR.Quantity_Avail_USR = *ZERO;

// AND CUR.Weight Prod 1 USR is Equal to zero
AND CUR.Weight_Prod_1_USR = *ZERO;

// PGM.*Print format = CND.Do not print format
PGM.*Print_format = 'N';

ENDIF;

//?USER: Process after print of detail format

NXT.Qty_Adjusted_SUM = SUM(CUR.Quantity_Avail_USR);

NXT.Weight_Scheduled_SUM = SUM(CUR.Weight_Prod_1_USR);

NXT.Quantity_Loc_On_Hand_SUM = SUM(CUR.ILL_Item_Qty_On_Hand);

NXT.Weight_1_SUM = SUM(CUR.ILL_Item_Wgt_On_Hand);

NXT.Quantity_Loc_Trans_SUM = SUM(CUR.PFS_On_Hand_Quantity);

NXT.Weight_2_1_SUM = SUM(CUR.PFS_On_Hand_Weight);

//?USER: Print required level totals

// SUPPRESSED PRINT PFS Receive/Located Date totals format

// SUPPRESSED PRINT PFS Location Code totals format

// SUPPRESSED PRINT PFS Item Code totals format

// SUPPRESSED PRINT PFS Warehouse Code totals format

// SUPPRESSED PRINT PFS Transaction Date totals format

CASE;

IF NEW PFS_Company_Number;
// Print PFS Company Number totals format
PRINT PFS Company Number totals format;

//?Embedded PRTOBJ : Prt Lot Loc n/in Rest PO
EXECUTE FUNCTION(Prt Lot Loc n/in Rest PO) TYPE(PRTOBJ);
PARAMETER(CUR.PFS_Company_Number);
PARAMETER(CUR.PFS_From_Warehouse_Code);
PARAMETER(WRK.Weight_Scheduled_SUM);
PARAMETER(WRK.Qty_Adjusted_SUM);
PARAMETER(PAR.PFS_Transaction_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


// NXT.Qty Adjusted SUM = NXT.Qty Adjusted SUM + WRK.Qty Adjusted SUM
NXT.Qty_Adjusted_SUM = NXT.Qty_Adjusted_SUM + WRK.Qty_Adjusted_SUM;

// NXT.Weight Scheduled SUM = NXT.Weight Scheduled SUM + WRK.Weight Scheduled SUM
NXT.Weight_Scheduled_SUM = NXT.Weight_Scheduled_SUM + WRK.Weight_Scheduled_SUM;

//?These are negative coming from the prtobj, so SUB them to add them
//?to the Lot Location column totals
// NXT.Quantity Loc On-Hand SUM = NXT.Quantity Loc On-Hand SUM - WRK.Qty Adjusted SUM
NXT.Quantity_Loc_On_Hand_SUM = NXT.Quantity_Loc_On_Hand_SUM - WRK.Qty_Adjusted_SUM;

// NXT.Weight 1 SUM = NXT.Weight 1 SUM - WRK.Weight Scheduled SUM
NXT.Weight_1_SUM = NXT.Weight_1_SUM - WRK.Weight_Scheduled_SUM;

NXT.Weight_Scheduled_SUM = SUM(CUR.Weight_Scheduled_SUM);

NXT.Qty_Adjusted_SUM = SUM(CUR.Qty_Adjusted_SUM);

NXT.Quantity_Loc_On_Hand_SUM = SUM(CUR.Quantity_Loc_On_Hand_SUM);

NXT.Weight_1_SUM = SUM(CUR.Weight_1_SUM);

NXT.Quantity_Loc_Trans_SUM = SUM(CUR.Quantity_Loc_Trans_SUM);

NXT.Weight_2_1_SUM = SUM(CUR.Weight_2_1_SUM);

ENDIF;

