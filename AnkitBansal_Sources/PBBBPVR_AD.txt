// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBBBPVR
// ?Date: 14.08.2025 Time: 03:47:16
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PAR.Billing Activity Type = CND.Invoice
PAR.Billing_Activity_Type = 1;

// PAR.Process Cust Types Usr = CND.3rd Party Customer(s)
PAR.Process_Cust_Types_Usr = 'TP';

//?** Default Inter-Company to *ALL companies
CASE;

// IF PAR.Process Cust Types Usr is Inter-Co Customer's
IF PAR.Process_Cust_Types_Usr = 'IC';

// PAR.Company Number = CND.Equal to zero
PAR.Company_Number = *ZERO;

ENDIF;

//?***** Change Log and Comments
DO;

//?*****
//?** 01/05/2012 E1814 RMC New pmt to complete HPB Transfer orders
//?**
ENDDO;

//?USER: Load screen

// DTL.Company Number = PAR.Company Number
DTL.Company_Number = PAR.Company_Number;

CASE;

// IF DTL.Company Number is Equal to zero
IF DTL.Company_Number = *ZERO;

// DTL.Name = CON.*ALL
DTL.Name = *ALL;

// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?USER: Validate fields

//?Process F4 on Company Number
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Company Number
IF PGM.*Cursor_field = DTL.Company_Number;

CASE;

// IF PAR.Allow Multi-Company is yes
IF PAR.Allow_Multi_Company = 'Y';

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(DTL.Company_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Prompt not allowed on output field.'
ERROR(USR2410);

ENDIF;

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Validate relations

//?** Validate company if entered
CASE;

// IF DTL.Company Number is not equal to zero
IF DTL.Company_Number <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Company Number not found'
ERROR(USR0163);

ENDIF;

ENDIF;

// WRK.Error Status = CND.no
WRK.Error_Status = 'N';

//?** Validate Order Number if entered
CASE;

// IF DTL.Order Number is Greater then zero
IF DTL.Order_Number > *ZERO;

EXECUTE FUNCTION(RTV All Header Fields  RT) TYPE(RTVOBJ) FILE(OPBFCPP)          AC1326885;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Order_Number);
PARAMETER(NLL.Order_Type_Sales);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(NLL.Ship_To_Name);
PARAMETER(NLL.Ship_To_Address_Line_1);
PARAMETER(NLL.Ship_To_Address_Line_2);
PARAMETER(NLL.Ship_To_Address_Line_3);
PARAMETER(NLL.Ship_To_City);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Ship_To_Zip_Postal_Code);
PARAMETER(NLL.Bill_to_Customer);
PARAMETER(NLL.Bill_to_Name);
PARAMETER(NLL.Bill_to_Address_Line_1);
PARAMETER(NLL.Bill_to_Address_Line_2);
PARAMETER(NLL.Bill_to_Address_Line_3);
PARAMETER(NLL.Bill_to_City);
PARAMETER(NLL.Bill_to_State_Code);
PARAMETER(NLL.Bill_to_Zip_Postal_Code);
PARAMETER(NLL.Customer_Purchase_Order_#);
PARAMETER(NLL.Order_Date);
PARAMETER(NLL.Requested_Ship_Date);
PARAMETER(NLL.Actual_Shipped_Date);
PARAMETER(NLL.Cancel_Date);
PARAMETER(NLL.Terms_Code);
PARAMETER(NLL.Special_Instructions);
PARAMETER(NLL.Special_Instructions_2);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Comment_Print_Acknowledge);
PARAMETER(NLL.Comment_Print_Inv_Cr_Memo);
PARAMETER(NLL.Comment_Print_Pick_Slip);
PARAMETER(NLL.Comment_Print_Ship_Doc);
PARAMETER(NLL.Reason_Code);
PARAMETER(NLL.Order_in_Use);
PARAMETER(WRK.Header_Status);
PARAMETER(NLL.Header_Status_Last);
PARAMETER(NLL.Order_Type_Print_Status);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.User_Original_Entry);
PARAMETER(NLL.Date_of_Original_Entry);
PARAMETER(NLL.Order_Value_Total);
PARAMETER(NLL.Order_Weight_Total);
PARAMETER(NLL.Credit_Hold);
PARAMETER(NLL.Production_Hold);
PARAMETER(NLL.New_Customer_Hold);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Requested_Delivery_Time);
PARAMETER(NLL.Accounts_Receiv_Ent_1);
PARAMETER(NLL.Accounts_Receiv_Ent_2);
PARAMETER(NLL.Load_ID);
PARAMETER(NLL.Absorbed_Freight_Rate_CWT);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Price_Audit);
PARAMETER(NLL.Price_Status);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Palletize);
PARAMETER(NLL.Shrink_Wrap);
PARAMETER(NLL.Slip_Sheet);
PARAMETER(NLL.Age_Code);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Load_Type);
PARAMETER(NLL.Attach_to_Invoice_Number);
PARAMETER(NLL.Load_Plan_Order);
PARAMETER(NLL.Print_Pick_Slip);
PARAMETER(NLL.Resell_Reference_Number);
PARAMETER(NLL.Special_Comment_1);
PARAMETER(NLL.Special_Comment_2);
PARAMETER(NLL.Affect_Auto_Accruals);
PARAMETER(NLL.Sales_Route_Code);
PARAMETER(NLL.Manager_Level_Code);
PARAMETER(NLL.VP_Level_Code);
PARAMETER(NLL.Attach_to_Order_Number);
PARAMETER(NLL.Reason_for_Price_Audit);
PARAMETER(NLL.Invoice_Number);
PARAMETER(NLL.Invoice_Suffix);
PARAMETER(NLL.Invoice_Date);
PARAMETER(WRK.Event_Code);
PARAMETER(NLL.Trans_Contol_AS400_Plant);
PARAMETER(NLL.Modified_Flag);
PARAMETER(NLL.A_R_order_Value_Total);
PARAMETER(NLL.Billing_Activity_Type);
PARAMETER(NLL.Block_Order_Flag);
PARAMETER(NLL.Order_Certification_Flag);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Co/Customer Type) TYPE(RTVOBJ) FILE(CAEOREP)               AC1758338;
PARAMETER(DTL.Company_Number);
PARAMETER(WRK.Ship_To_Customer);
PARAMETER(WRK.Type_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 // PAR.Type Code = CON.*BLANK
 PAR.Type_Code = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 QUIT;

}


//?** Error if header status is "C"omplete or event code is 06 or 07
CASE;

// IF WRK.Header Status is Complete
IF WRK.Header_Status = 'C';

// Send error message - 'Order not Avail for Invoicing'
ERROR(USR2210);
MSGPARM(DTL.Order_Number);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

//?** Error if header status is "C"omplete or event code is 06 or 07
// IF WRK.Event Code is Invoiced thru History
IF WRK.Event_Code >= '06';
AND WRK.Event_Code <= '07';

// Send error message - 'Order not Avail for Invoicing'
ERROR(USR2210);
MSGPARM(DTL.Order_Number);

// WRK.Error Status = CND.yes
WRK.Error_Status = 'Y';

ENDIF;

CASE;

// IF WRK.Type Code is Inter Company
IF WRK.Type_Code = 'IC';

// Send error message - 'Order cannot be for Inter-Co customer'
ERROR(USR3630);

ENDIF;

ENDIF;

//?** Require and then validate Actual Ship Date for 3rd Party
CASE;

// IF DTL.Requested Ship Date is entered
IF DTL.Requested_Ship_Date <> *ZERO;

EXECUTE FUNCTION(VAL Date               RT) TYPE(RTVOBJ) FILE(CAAFREP)          AC1418516;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Requested_Ship_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


//?** Date must be in the Calendar file
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Date entered is not found in the Calendar file'
ERROR(USR0567);
MSGPARM(DTL.Requested_Ship_Date);

//?** Date must be in the Calendar file
// IF *OTHERWISE
IF *OTHERWISE;

//?** Date cannot be in the future
CASE;

// IF DTL.Requested Ship Date GT JOB.*Job date
IF DTL.Requested_Ship_Date > JOB.*Job_date;

// Send error message - 'Date must be less than or equal to the current date.'
ERROR(USR3001);
MSGPARM(DTL.Requested_Ship_Date);

ENDIF;

ENDIF;

//?** Require and then validate Actual Ship Date for 3rd Party
// IF *OTHERWISE
IF *OTHERWISE;

//?** No Date error is for 3rd party only
CASE;

// IF PAR.Process Cust Types Usr is Not Inter-Co Customer's
IF PAR.Process_Cust_Types_Usr = 'BT'/'OR'/'TP';

// Send error message - 'Date must be entered.'
ERROR(USR0231);
MSGPARM(DTL.Requested_Ship_Date);

ENDIF;

ENDIF;

//?USER: User defined action

CASE;

// IF WRK.Error Status is yes
IF WRK.Error_Status = 'Y';

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

MOVE *ALL (To: PAR From: DTL);

// PAR.Billing Activity Type = CND.Warehouse Transfer
PAR.Billing_Activity_Type = 4;

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Print Option  SHR  PV.
CALL PROGRAM(PMT Print Option  SHR  PV) ('PDG0PVR');
PARAMETER('Prt Completed Transfers');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('OMS');

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Company Number Pass   USR = DTL.Company Number
PAR.Company_Number_Pass_USR = DTL.Company_Number;

// PAR.System Value Numeric = PAR.PRT Number of Copies
PAR.System_Value_Numeric = PAR.PRT_Number_of_Copies;

//?** (Order Number 1 Pass Usr contains the Order#-zeors for all)
//?** (Thru Date Pass Usr contains the Actual Ship Date)
// PAR.Order Number 1  PASS  USR = DTL.Order Number
PAR.Order_Number_1_PASS_USR = DTL.Order_Number;

// PAR.Thru Date Pass        USR = DTL.Requested Ship Date
PAR.Thru_Date_Pass_USR = DTL.Requested_Ship_Date;

//?**
// PAR.PRT Description = CON.Prnt Third Party Invoices
PAR.PRT_Description = 'Prnt Third Party Invoices';

// LCL.Job Number USR = CVTVAR(JOB.*Job number)
LCL.Job_Number_USR = CVTVAR(JOB.*Job_number);

// PAR.Job Name = CONCAT(CON.TPIN,LCL.Job Number USR,CON.*ZERO)
PAR.Job_Name = 'TPIN' + LCL.Job_Number_USR (*ZERO);

// Call program UPD Complete Txfr HPB CLP.
SBMJOB;
CALL PROGRAM(UPD Complete Txfr HPB CLP) ('PBBDUPC');
PARAMETER(PGM.*Return_code);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(PAR.Company_Number_Pass_USR);
PARAMETER(PAR.Thru_Date_Pass_USR);
PARAMETER(PAR.Order_Number_1_PASS_USR);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER(PAR.Process_Cust_Types_Usr);
SBMJOBOVR JOB(HPBCMPTRB);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

//?** Send print submitted message
CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

//?** Send print submitted message
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

// Execute function SET Off Indics 99,35,36US.
EXECUTE FUNCTION(SET Off Indics 99,35,36US) TYPE(EXCUSRSRC) ('PDN7UFR');
{
 C                     SETOF                     99    SETOFF INDIC
 C                     SETOF                     35    SETOFF INDIC
 C                     SETOF                     36    SETOFF INDIC
}


ENDIF;

ENDIF;

ENDIF;

