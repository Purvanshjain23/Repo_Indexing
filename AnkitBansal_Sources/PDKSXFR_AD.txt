// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDKSXFR
// ?Date: 14.08.2025 Time: 03:28:38
// ?------------------------------------------------------------------------------------------------

//?Execute user function

EXECUTE FUNCTION(RTV Item Price Struct  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1230472;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Item_Code);
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(WRK.UOM_Pricing);
PARAMETER(WRK.Unit_Weight);
PARAMETER(WRK.Market_Overage);
PARAMETER(WRK.Standard_Overage_Underage);
PARAMETER(WRK.Commodity_Price_Group);
PARAMETER(WRK.Item_Pricing_Operation);
PARAMETER(WRK.Item_Pricing_Constant);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Converted Item Qty RT) TYPE(EXCINTFUN)                     AC1298740;
PARAMETER(PAR.UOM_Primary);
PARAMETER(PAR.Conversion_Factor_1);
PARAMETER(PAR.Operation_Factor_1);
PARAMETER(PAR.UOM_Second);
PARAMETER(PAR.Conversion_Factor_2);
PARAMETER(PAR.Operation_Factor_2);
PARAMETER(PAR.UOM_Third);
PARAMETER(PAR.U_M_Ordered);
PARAMETER(PAR.Quantity_Ordered);
PARAMETER(PAR.Quantity_based_on_U_M1_S);
PARAMETER(PAR.Quantity_based_on_U_M2_S);
PARAMETER(PAR.Quantity_based_on_U_M3_S);
{
 //?Execute internal function

 //?Clear output parameters
 // PAR.Quantity based on U/M1 = CON.*ZERO
 PAR.USR_Qty_based_on_U_M1 = *ZERO;

 // PAR.Quantity based on U/M2 = CON.*ZERO
 PAR.USR_Qty_based_on_U_M2 = *ZERO;

 // PAR.Quantity based on U/M3 = CON.*ZERO
 PAR.USR_Qty_based_on_U_M3 = *ZERO;

 //?Process based on transaction U/M
 CASE;

 // IF PAR.U/M - Primary EQ PAR.U/M - Transaction
 IF PAR.UOM_Primary = PAR.UOM_Transaction;

 // PAR.Quantity based on U/M1 = PAR.Transaction Quantity
 PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity;

 //?Process entered U/M2
 CASE;

 // IF PAR.U/M - Second is Entered
 IF PAR.UOM_Second <> *BLANK;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
 PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
 PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

 // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
 PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

 ENDIF;

 //?Process entered U/M3
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S * PAR.Multiplier Two
 PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_2
 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Quantity based on U/M3 S = PAR.Quantity based on U/M2 S / PAR.Conversion Fac
 PAR.Quantity_based_on_U_M3_S = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_2
 'H';

 ENDIF;

 ENDIF;

 // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
 PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

 ENDIF;

 //?Process based on transaction U/M
 // IF PAR.U/M - Second EQ PAR.U/M - Transaction
 IF PAR.UOM_Second = PAR.UOM_Transaction;

 // PAR.Quantity based on U/M2 = PAR.Transaction Quantity
 PAR.USR_Qty_based_on_U_M2 = PAR.Transaction_Quantity;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Quantity based on U/M1 = PAR.Transaction Quantity / PAR.Conversion Factor 1
 PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Quantity based on U/M1 = PAR.Transaction Quantity * PAR.Conversion Factor 1
 PAR.USR_Qty_based_on_U_M1 = PAR.Transaction_Quantity * PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Process entered U/M3
 CASE;

 // IF PAR.U/M - Third is Entered
 IF PAR.UOM_Third <> *BLANK;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity * PAR.Conversion Factor
 PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Quantity based on U/M3 S = PAR.Transaction Quantity / PAR.Conversion Factor
 PAR.Quantity_based_on_U_M3_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

 ENDIF;

 ENDIF;

 // PAR.Quantity based on U/M3 = PAR.Quantity based on U/M3 S
 PAR.USR_Qty_based_on_U_M3 = PAR.Quantity_based_on_U_M3_S;

 ENDIF;

 //?Process based on transaction U/M
 // IF PAR.U/M - Third EQ PAR.U/M - Transaction
 IF PAR.UOM_Third = PAR.UOM_Transaction;

 // PAR.Quantity based on U/M3 = PAR.Transaction Quantity
 PAR.USR_Qty_based_on_U_M3 = PAR.Transaction_Quantity;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 2 is Multiply
 IF PAR.Operation_Factor_2 = 'M';

 CASE;

 // IF PAR.Conversion Factor 2 is Entered
 IF PAR.Conversion_Factor_2 <> *ZERO;

 // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity / PAR.Conversion Factor
 PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity / PAR.Conversion_Factor_2 'H';

 ENDIF;

 //?Convert based on operation factor
 // IF PAR.Operation Factor 2 is Divide
 IF PAR.Operation_Factor_2 = 'D';

 // PAR.Quantity based on U/M2 S = PAR.Transaction Quantity * PAR.Conversion Factor
 PAR.Quantity_based_on_U_M2_S = PAR.Transaction_Quantity * PAR.Conversion_Factor_2 'H';

 ENDIF;

 // PAR.Quantity based on U/M2 = PAR.Quantity based on U/M2 S
 PAR.USR_Qty_based_on_U_M2 = PAR.Quantity_based_on_U_M2_S;

 //?Convert based on operation factor
 CASE;

 // IF PAR.Operation Factor 1 is Multiply
 IF PAR.Operation_Factor_1 = 'M';

 CASE;

 // IF PAR.Conversion Factor 1 is Entered
 IF PAR.Conversion_Factor_1 <> *ZERO;

 // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S / PAR.Conversion Facto
 PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S / PAR.Conversion_Factor_1 'H';

 ENDIF;

 //?Convert based on operation factor
 // IF PAR.Operation Factor 1 is Divide
 IF PAR.Operation_Factor_1 = 'D';

 // PAR.Quantity based on U/M1 = PAR.Quantity based on U/M2 S * PAR.Conversion Facto
 PAR.USR_Qty_based_on_U_M1 = PAR.Quantity_based_on_U_M2_S * PAR.Conversion_Factor_1 'H';

 ENDIF;

 ENDIF;

}


