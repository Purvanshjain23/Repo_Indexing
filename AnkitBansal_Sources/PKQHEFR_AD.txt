// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKQHEFR
// ?Date: 14.08.2025 Time: 02:52:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?                      length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(WRK.Oms_Warehouse_Code);
PARAMETER(CTL.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(WRK.Oms_SalesPerson_Code);
PARAMETER(WRK.Oms_Allow_Multi_Company);
PARAMETER(WRK.Oms_Default_Printer);
PARAMETER(WRK.Oms_Name);
PARAMETER(WRK.Oms_System_Value_Alpha);
PARAMETER(WRK.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


CASE;

// IF WRK.Oms Access Denied (Y/N) is Yes
IF WRK.Oms_Access_Denied_Y_N = 'Y';

PGM.*Return_code = *BLANK;

RETURN;

ENDIF;

// PAR.First Time Flag Usr = CND.Yes
PAR.First_Time_Flag_Usr = 'Y';

//?USER: Initialize subfile header

CASE;

// IF PAR.First Time Flag Usr is Yes
IF PAR.First_Time_Flag_Usr = 'Y';

// CTL.Status 1 = CND.No
CTL.Status_1 = 'N';

// PAR.First Time Flag Usr = CND.No
PAR.First_Time_Flag_Usr = 'N';

ENDIF;

//?USER: Initialize subfile record (existing record)

CASE;

// IF CTL.Status 1 is No
IF CTL.Status_1 = 'N';

CASE;

// IF RCD.RS Record Status is InActive
IF RCD.RS_Record_Status = 'I';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *NO
IF PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.@Description 16 Usr = Condition name of RCD.TB Trim Area
RCD.@Description_16_Usr = RTVCND(RCD.TB_Trim_Area);

// RCD.UOM Desc Usr = Condition name of RCD.TB Trim Location
RCD.UOM_Desc_Usr = RTVCND(RCD.TB_Trim_Location);

// RCD.@TXT 7 postions user = Condition name of RCD.TB Extent
RCD.@TXT_7_postions_user = RTVCND(RCD.TB_Extent);

ENDIF;

//?USER: Validate subfile control

CASE;

// IF CTL.*CMD key is Toggle
IF CTL.*CMD_key = '10';

CASE;

// IF CTL.Status 1 is No
IF CTL.Status_1 = 'N';

// CTL.Status 1 = CND.Yes
CTL.Status_1 = 'Y';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Status 1 = CND.No
CTL.Status_1 = 'N';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?USER: Validate subfile record fields

CASE;

// IF RCD.*SFLSEL is *Delete
IF RCD.*SFLSEL = '4'/'4';

// RCD.RS Record Status = CND.InActive
RCD.RS_Record_Status = 'I';

ENDIF;

CASE;

// IF RCD.*SFLSEL is Edit
IF RCD.*SFLSEL = '2'/'2';

CASE;

// IF CTL.Status 1 is Yes
IF CTL.Status_1 = 'Y';

// RCD.RS Record Status = CND.Active
RCD.RS_Record_Status = 'A';

ENDIF;

ENDIF;

//?USER: Validate subfile record relations

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// RCD.RS Record Status = CND.Active
RCD.RS_Record_Status = 'A';

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Trim Button        CR) TYPE(CRTOBJ) FILE(PKEKCPP)          AB1215605;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(RCD.TB_Trim_Area);
PARAMETER(RCD.TB_Trim_Location);
PARAMETER(RCD.TB_Extent);
PARAMETER(RCD.Loss_Percent);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Trim Button        CH) TYPE(CHGOBJ) FILE(PKEKCPP)          AB1215606;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.TB_Trim_Area);
PARAMETER(RCD.TB_Trim_Location);
PARAMETER(RCD.TB_Extent);
PARAMETER(RCD.Loss_Percent);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


