// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PUDBE1R
// ?Date: 14.08.2025 Time: 03:50:01
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification History
DO;

//?5/25/2018 JBB E13083 - Bring screens to Seaboard standards
//?- This new screen is called from the WW ShipTo Intrchg DF function
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(LCL.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?If incoming EDI ShipTo Customer is blank, change to ADD Mode
CASE;

// IF PAR.EDI ShipTo Customer EQ LCL.EDI ShipTo Customer
IF PAR.EDI_ShipTo_Customer = LCL.EDI_ShipTo_Customer;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?USER: Validate key screen

EXECUTE FUNCTION(RTV Ship To-All Flds  RT) TYPE(RTVOBJ) FILE(CABBREP)           AC2052413;
PARAMETER(KEY.EDI_ShipTo_Customer);
PARAMETER(NLL.Customer_Name);
PARAMETER(NLL.Address_Line_1);
PARAMETER(NLL.Address_Line_2);
PARAMETER(NLL.Address_Line_3);
PARAMETER(NLL.City);
PARAMETER(NLL.State_Code);
PARAMETER(NLL.County_Code);
PARAMETER(NLL.Zip_Postal_Code);
PARAMETER(NLL.Telephone_Number_FF);
PARAMETER(NLL.Fax_Number_FF);
PARAMETER(NLL.Alpha_Search);
PARAMETER(NLL.Federal_Tax_Id);
PARAMETER(NLL.New_Customer_Status);
PARAMETER(NLL.SIC_Number);
PARAMETER(NLL.D_B_Number);
PARAMETER(NLL.D_B_Rating);
PARAMETER(NLL.Date_of_D_B_Rating);
PARAMETER(NLL.Credit_Line_Expire_Date);
PARAMETER(NLL.AR_Customer_Number);
PARAMETER(NLL.Parent_Customer);
PARAMETER(NLL.Credit_Check_AR_Customer);
PARAMETER(NLL.Credit_Check_Parent_Cust);
PARAMETER(NLL.Country_Code);
PARAMETER(NLL.EDI_Invoice_Sts);
PARAMETER(NLL.Order_Entry_Hold);
PARAMETER(NLL.Parent_Credit_Limit);
PARAMETER(NLL.AR_Credit_Limit);
PARAMETER(NLL.Order_Entry_Hold_Date);
PARAMETER(LCL.Ship_To_Customer_Flag);
PARAMETER(NLL.Field_vs_In_House_flag);
PARAMETER(NLL.Email_When_Order_Shipped);
PARAMETER(NLL.Print_Invoice_Sts);
PARAMETER(NLL.Item_Reference_Status);
PARAMETER(NLL.Statement_Print_Frequency);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

}


//?If Ship To Flag is No, send error message
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Ship To Customer not found or inactive.'
ERROR(USR5080);
MSGPARM(KEY.EDI_ShipTo_Customer);

//?If Ship To Flag is No, send error message
// IF LCL.Ship To Customer Flag is No Use as Ship to Cust
IF LCL.Ship_To_Customer_Flag = 'N';

// Send error message - 'Customer is not a Ship To Customer.'
ERROR(USR5079);
MSGPARM(KEY.EDI_ShipTo_Customer);

//?If Ship To Flag is No, send error message
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
PARAMETER(KEY.EDI_ShipTo_Customer);
PARAMETER(NLL.Internet_Password);
PARAMETER(NLL.Email_Address);
PARAMETER(NLL.Email_User_ID);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(LCL.EDI_Cust_Duns_Number);
PARAMETER(NLL.EDI_Warehouse_Store_No);
PARAMETER(NLL.State_Tax_ID);
PARAMETER(NLL.Cust_Shipping_Temp_C_F);
PARAMETER(NLL.One_Invoice_Per_PO);
PARAMETER(NLL.EDI_Advanced_Ship_Notice);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If DUNS Number is not entered, send error message
CASE;

// IF LCL.EDI Cust Duns Number is Not Entered
IF LCL.EDI_Cust_Duns_Number = *BLANK;

// Send error message - 'Ship To Customer does not have an EDI DUNS Number.'
ERROR(USR5081);
MSGPARM(KEY.EDI_ShipTo_Customer);

ENDIF;

ENDIF;

//?USER: Initialize detail screen (new record)

EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
PARAMETER(DTL.EDI_ShipTo_Customer);
PARAMETER(NLL.Internet_Password);
PARAMETER(NLL.Email_Address);
PARAMETER(NLL.Email_User_ID);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(DTL.EDI_ShipTo_DUNS);
PARAMETER(NLL.EDI_Warehouse_Store_No);
PARAMETER(NLL.State_Tax_ID);
PARAMETER(NLL.Cust_Shipping_Temp_C_F);
PARAMETER(NLL.One_Invoice_Per_PO);
PARAMETER(NLL.EDI_Advanced_Ship_Notice);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If EDI DUNS Number retrieved, protect screen field
CASE;

// IF DTL.EDI ShipTo DUNS is Entered
IF DTL.EDI_ShipTo_DUNS <> *BLANK;

// LCL.Protect Screen Field = CND.Yes
LCL.Protect_Screen_Field = 'Y';

ENDIF;

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

//?USER: Validate detail screen fields

//?F4=Prompt
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

//?If cursor is on Alt Customer Number
CASE;

// IF PGM.*Cursor field <IS> DTL.EDI Alt ST Cust Number
IF PGM.*Cursor_field = DTL.EDI_Alt_ST_Cust_Number;

// Call program Sel EDI ShipTo Intrchg SR.
CALL PROGRAM(Sel EDI ShipTo Intrchg SR) ('PUC7SRR');
PARAMETER(DTL.EDI_Alt_ST_Cust_Number);

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?If EDI Alt ShipTo Customer entered, validate the field
CASE;

// IF DTL.EDI Alt ST Cust Number EQ DTL.EDI ShipTo Customer
IF DTL.EDI_Alt_ST_Cust_Number = DTL.EDI_ShipTo_Customer;

// Send error message - 'Alt Ship To Customer cannot be the same as the Ship To Customer.'
ERROR(USR5083);
MSGPARM(DTL.EDI_Alt_ST_Cust_Number);

//?If EDI Alt ShipTo Customer entered, validate the field
// IF DTL.EDI Alt ST Cust Number is Greater than zero
IF DTL.EDI_Alt_ST_Cust_Number > 0;

// LCL.Ship To Customer = DTL.EDI Alt ST Cust Number
LCL.Ship_To_Customer = DTL.EDI_Alt_ST_Cust_Number;

EXECUTE FUNCTION(RTV Ship To Flag       RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1464722;
PARAMETER(LCL.Ship_To_Customer);
PARAMETER(LCL.Ship_To_Customer_Flag);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If Ship To Flag is No, send error message
CASE;

// IF NOT PGM.*Return code is *Normal
IF ! PGM.*Return_code = *BLANK;

// Send error message - 'Ship To Customer not found or inactive.'
ERROR(USR5080);
MSGPARM(DTL.EDI_Alt_ST_Cust_Number);

//?If Ship To Flag is No, send error message
// IF LCL.Ship To Customer Flag is No Use as Ship to Cust
IF LCL.Ship_To_Customer_Flag = 'N';

// Send error message - 'Customer is not a Ship To Customer.'
ERROR(USR5079);
MSGPARM(DTL.EDI_Alt_ST_Cust_Number);

//?If Ship To Flag is No, send error message
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
PARAMETER(DTL.EDI_Alt_ST_Cust_Number);
PARAMETER(NLL.Internet_Password);
PARAMETER(NLL.Email_Address);
PARAMETER(NLL.Email_User_ID);
PARAMETER(NLL.EDI_Trading_Partner_No);
PARAMETER(LCL.EDI_Alt_Cust_Duns_Number);
PARAMETER(NLL.EDI_Warehouse_Store_No);
PARAMETER(NLL.State_Tax_ID);
PARAMETER(NLL.Cust_Shipping_Temp_C_F);
PARAMETER(NLL.One_Invoice_Per_PO);
PARAMETER(NLL.EDI_Advanced_Ship_Notice);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If DUNS Number is not entered, send error message
CASE;

// IF LCL.EDI Alt Cust Duns Number is Not Entered
IF LCL.EDI_Alt_Cust_Duns_Number = *BLANK;

// Send error message - 'Ship To Customer does not have an EDI DUNS Number.'
ERROR(USR5081);
MSGPARM(DTL.EDI_Alt_ST_Cust_Number);

//?If DUNS Number is not entered, send error message
// IF LCL.EDI Cust Duns Number NE LCL.EDI Alt Cust Duns Number
IF LCL.EDI_Cust_Duns_Number <> LCL.EDI_Alt_Cust_Duns_Number;

// Send error message - 'The Alternate Customer DUNS# must be the same as the Primary DUNS#.'
ERROR(USR5082);
MSGPARM(DTL.EDI_Alt_ST_Cust_Number);

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt EDI ShipTo Interc CR) TYPE(CRTOBJ) FILE(PUAHREP)           AC2138803;
PARAMETER(DTL.EDI_ShipTo_Customer);
PARAMETER(DTL.EDI_ShipTo_DUNS);
PARAMETER(DTL.EDI_Unused_Code_2_1);
PARAMETER(DTL.EDI_Unused_Code_3_2);
PARAMETER(DTL.EDI_Unused_Sts_1_1);
PARAMETER(DTL.EDI_Unused_Sts_2_1);
PARAMETER(DTL.EDI_Unused_Sts_3_2);
PARAMETER(DTL.EDI_unused_text_14);
PARAMETER(DTL.EDI_unused_text_15);
PARAMETER(DTL.EDI_unused_text_25);
PARAMETER(DTL.EDI_unused_text_30);
PARAMETER(DTL.EDI_Alt_ST_Cust_Number);
PARAMETER(DTL.EDI_unused_nbr_15);
PARAMETER(DTL.EDI_Email_Address);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg EDI ShipTo Interc CH) TYPE(CHGOBJ) FILE(PUAHREP)           AC2138804;
PARAMETER(DTL.EDI_ShipTo_Customer);
PARAMETER(DTL.EDI_ShipTo_DUNS);
PARAMETER(DTL.EDI_Unused_Code_2_1);
PARAMETER(DTL.EDI_Unused_Code_3_2);
PARAMETER(DTL.EDI_Unused_Sts_1_1);
PARAMETER(DTL.EDI_Unused_Sts_2_1);
PARAMETER(DTL.EDI_Unused_Sts_3_2);
PARAMETER(DTL.EDI_unused_text_14);
PARAMETER(DTL.EDI_unused_text_15);
PARAMETER(DTL.EDI_unused_text_25);
PARAMETER(DTL.EDI_unused_text_30);
PARAMETER(DTL.EDI_Alt_ST_Cust_Number);
PARAMETER(DTL.EDI_unused_nbr_15);
PARAMETER(DTL.EDI_Email_Address);
PARAMETER(DTL.Record_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  // PAR.Change Date = JOB.*Job date
  PAR.Change_Date = JOB.*Job_date;

  // PAR.Change Time = JOB.*Job time
  PAR.Change_Time = JOB.*Job_time;

  // PAR.Change User = JOB.*USER
  PAR.Change_User = JOB.*USER;

  // PAR.Change Program = JOB.*PROGRAM
  PAR.Change_Program = JOB.*PROGRAM;

 }

}


