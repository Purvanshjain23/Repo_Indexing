      *****************  RPG PROGRAM HEADING  ************************
     h option(*SRCSTMT:*NODEBUGIO)
      ****************************************************************
      *
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP204UN- Build JDE Upload file: HPS Units
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     10/03/01
      *
      * FUNCTION: This program builds an upload file of current period
      *           data that will be interfaced to JDE.
      *
      *           This program is called from HP204CLUN which is called
      *           from the upload driver CL HP404CL..which is submitted from
      *           HP404.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 02/28/02  LeAnne Fedor
      *           The users have requested that 'pig days' be put into a separate function.
      *           So, we removed the 'pig day' logic from this program.
      *
      * 07/24/02  LeAnne Fedor
      *           Added new 'semen doses' logic to function.
      *
      * 07/31/02  LeAnne Fedor
      *           Removed 'semen doses' logic. It is now a separate function.
      *
      * 08/01/02  LeAnne Fedor
      *           Removed 'transfer out different phase' logic. It is now a separate
      *           function.
      *
      * 02/03/05  LeAnne Fedor
      *           Recompile only. New field "Transferred In Open Gilts" add
      *           to BGF Weekly Production file.
      *
      * 06/06/05  LeAnne Fedor
      *           Recompile only. Received Date was added as a key field on
      *           HSL084C.
      *
      * 08/23/05  LeAnne Fedor
      *           Recompile only. New field "Man Hours" added to BGF Daily and Weekly
      *           Production files.
      *
      * 06/15/06  LeAnne Ramsey
      *           Recompile only. New field "Avg Gilt Weight @ 28 Weeks" added
      *           to BGF Weekly Production file.
      *
      * 08/01/08  LeAnne Ramsey
      *           Recompile only. Removed fields from BGF Weekly Production file.
      *
      * 07/06/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      *
      * 01/06/10  LeAnne Ramsey
      *           It is 8:00pm at night; I'm at home; the users can't close the period
      *           because the Gilt/Sow Ending Inventory is not pulling.
      *           I will try a temp fix to this program and HP204CLUN.
      *           Here, I will change the code to use the HPS Week out of the call to
      *           Synon program (POF3XFR)...instead of the Calendar Week
      *
      * 01/06/10  LeAnne Ramsey
      *           Removed the temp changes above...they didn't work. The users will
      *           manually get the Ending Inventory into JDE.  I need to anlayze this
      *           prior to the close of Period 1 of 2010.
      *
      * 01/11/10  LeAnne Ramsey
      *           Analysis of the Gilt/Sow Ending Inventory issue shows that use the
      *           Synon Calendar file will never work in the 'Week 53' years. So, I removed
      *           the call to POF3XFR. We will determine "last week" of the period for the
      *           Gilt/Sow Ending Inventory by using the BGF Weekly Production file.
      *
      * 01/06/11  LeAnne Ramsey (E1248)
      *           Guess what...the Gilt/Sow Ending Inventory issue showed up again.
      *           Our logic from last year grabbed Week 51...when is should have grabbed
      *           Week 52.  Since nothing seems to work and MTECH is coming, Steph Allen
      *           and I decided to just hardcode for this year (2010 Period 12).
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      * 02/28/16  Barb Gutierrez(E5290)
      *           Added logic to handle new company Iowa Farms.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     Fhsl018i   if   e           k disk
      *    Farm site
      *    (records selected in open query)
      *
      *
     Fhsl034d   if   e           k disk
      *  Hog group
      *
      *
     Fhsl064b   if   e           k disk
      *  Check detail
      *
      *
     Fhsl068c   if   e           k disk
      *  Killed/dead hogs
      *  (records selected in open query)
      *
      *
     Fhsl069d   if   e           k disk
      *  Inventory adjustments
      *  (records selected in open query)
      *
      *
     Fhsl074h   if   e           k disk
      *  Transfer movement header
      *  (records selected in open query)
      *
      *
     Fhsp075    if   e           k disk
      *  Transfer movement detail
      *
      *
     Fhsl084c   if   e           k disk
      *  Sales movement header
      *  (records selected in open query)
      *
      *
     Fhsp085    if   e           k disk
      *  Sales movement detail
      *
      *
     Fhsl092a   if   e           k disk    rename(bprec:bpreca) prefix(p3)
      *    BGF Weekly production
      *
      *
     Fhsl092b   if   e           k disk
      *    BGF Weekly production
      *    (records selected in open query)
      *
      *
     Fhsl092d   if   e           k disk    rename(bprec:bprecd) prefix(p2)
      *    BGF Weekly production
      *
      *
     Fhsl369c   if   e           k disk
      *    Workfile: Inventory reports
      *
      *
     Fhsp204    uf a e           k disk
      *    HPS to JDE upload file
      *
      *
     Fhsl204a   if a e           k disk    rename(hjrec:hjreca) prefix(p1)
      *    HPS to JDE upload file
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      *---------------------------------------------------------------
      * STANDALONE FIELDS
      *---------------------------------------------------------------
      *
      * Control fields
      *
     D svcocd          s                   like(fscocd)
     D svmcu           s                   like(fscjd)
     D svdesc          s                   like(hjdesc)
     D svre            s                   like(hjre)
     D svacwk          s                   like(bpacwk)
     D first           s              1    inz('Y')
      *
      *
      * Workfields
      *
     D wkmcu           s                   like(hjmcu)
     D wksptohd        s                   like(hjhpsval)
     D wkdohd          s                   like(hjhpsval)
     D wkinvhd         s                   like(hjhpsval)
     D wkcuhd          s                   like(hjhpsval)
     D wkadjhd         s                   like(hjhpsval)
     D wkslhd          s                   like(hjhpsval)
     D wkhpsval        s                   like(hjhpsval)
     D wkjdeval        s                   like(hjjdeval)
      *
      *
      * Workfields for interim calculations
      *
     D wkhd            s                   like(mdqlhd)
     D wkavlb          s              7  2
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldacyr                 1      4  0
     D  ldacpe                 5      6  0
     D  ldbpdt                 7     14  0
     D  ldepdt                15     22  0
     D  ldhucd                23     24
      *
     D  ldhuds               100    129
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAINLINE
      ****************************************************************
      *
      * Perform BGF processing
      *
     C                   exsr      $bgf
      *
      *
      * Perform Finisher processing (Nursery and Grow Finish)
      *
     C                   exsr      $fin
      *
      * Write offsetting entries
      *
     C                   exsr      $offset
      *
      *
      * Set 'new batch number' and 'new document number' flags
      *
     C                   exsr      $flags
      *
     C                   seton                                        lr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Process all BGF farms
      *--------------------------------------------------------------------------------------
      *
     C     $bgf          begsr
      *
     C     *loval        setll     hsl018i
      *
      * Process all BGF farms
      *
     C                   dou       *in90 = *on                                  Do BGF farms
     C                   read      hsl018i                                90
     C                   if        *in90 = *off and fsppcd = 'BGF  '            If not EOF
      *
     C                   if        first = yes
     C                   exsr      $first
     C                   endif
      *
      * Control break on company number
      *   a) write BGF records to interface file
      *   b) clear accumulators and save cost center
      *   c) Set new batch number and new document flags
      *   e) Write offsetting entries for company
      *
     C                   select
     C***                when      svcocd <> fscocd
     C***                exsr      $bgfjde
     C***                exsr      $flags
     C***                exsr      $offset
     C***                exsr      $clear
     C***                move      fscocd        svcocd
      *
      * Control break on cost center
      *   a) write BGF records to interface file
      *   b) clear accumulators and save cost center
      *
     C                   when      svmcu <> fscjd
     C                   exsr      $bgfjde
     C                   exsr      $clear
     C                   move      fscjd         svmcu
     C                   move      fscocd        svcocd
     C                   endsl
      *
      * Accumulate detail values for the farm.
      *
     C                   exsr      $bgffarm
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do BGF farms
      *
      * Last record processing for BGF farms
      *
     C                   exsr      $bgfjde
     C                   exsr      $clear
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Retrieve units values for a BGF farm
      *--------------------------------------------------------------------------------------
      *
     C     $bgffarm      begsr
      *
      * You will need BGF Weekly Production data for:
      *    1) Total piglet deaths (We will add DOA's to this later.)
      *    2) Gilt and sow ending inventory (only use data from the last week)
      *
     C     fsfscd        setll     hsl092b
     C                   dou       *in91 = *on                                  Do weekly prod
     C     fsfscd        reade     hsl092b                                91
     C                   if        *in91 = *off                                 If EOF
     C                   add       bptolshd      wkdohd
      *
      * Last Week
     C                   if        bpacwk = svacwk
     C                   add       bpglsohd      wkinvhd
     C                   endif
      *
     C                   endif                                                  If EOF
     C                   enddo                                                  Do weekly prod
      *
      *
      * This is our quick work-around for 2010 Period 12 for the Gilt/Sow
      * Ending Inventory.  (E1248)
      *
     C                   if        ldacyr = 2010 and ldacpe = 12
     C     key02         chain     hsl092a                            92
     C                   if        *in92 = *off
     C                   z-add     p3bpglsohd    wkinvhd
     C                   endif
     C                   endif
      *
      *
      * You will need Transfer movement data for:
      *    1) DOA's to add to Total Piglet Deaths
      *
     C                   exsr      $bgftran
      *
      *
      * You will need BGF sales movement data for:
      *    1) BGF cull sale head
      *    2) DOA's to add to Total Piglet Deaths
      *
     C                   exsr      $bgfsale
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Retrieve BGF Transfer data
      *--------------------------------------------------------------------------------------
      *
     C     $bgftran      begsr
      *
      * Read all transfer movement headers out of this farm for this period.
      *
     C     fsfscd        setll     hsl074h
      *
     C                   dou       *in91 = *on                                  Do tran hdr
     C     fsfscd        reade     hsl074h                                91
     C                   if        *in91 = *off                                 If not EOF
      *
     C     mhmvsn        setll     hsp075
     C                   dou       *in93 = *on                                  Do tran dtl
     C     mhmvsn        reade     hsp075                                 93
     C                   if        *in93 = *off                                 If record
      *
      *
      * Retrieve DOAs for Total Piglet Deaths.
      * We make this logic match the logic used to populate the fields in the
      * Datamart files since Randy Rolf checks the Total Piglet Deaths against
      * COGNOS.  Accumulate DOA head when:
      *       a) the origin group IS NOT a GDU group and
      *       b) the destination phase is 'nursery' or
      *       c) the destination phase is 'grow finish' or 'BGF' and
      *          the 'average received pounds' is 20 pounds or less
      *
      * Determine if origin group is GDU.
      *
     C     mdorsn        chain     hsl034d                            92
     C                   if        *in92 = *off and hggtcd <> 'G'               If not GDU
      *
      * Calculate average received pounds when the destination phase is
      * Grow Finish or BGF.
      *
     C                   z-add     0             wkavlb
     C                   if        mhdnpp = 'GF   ' or mhdnpp = 'BGF  '         If grow finish
     C     mdrjhd        add       mdqlhd        wkhd
     C                   if        wkhd <> 0
     C                   eval(h)   wkavlb = (mdqllb + mdrjlb) / wkhd
     C                   endif
     C                   endif                                                  If grow finish
      *
     C                   if        (mhdnpp = 'GF   ' and wkavlb <= 20) or       If OK
     C                             (mhdnpp = 'BGF  ' and wkavlb <= 20) or
     C                              mhdnpp = 'NUR  '
     C                   add       mddohd        wkdohd
     C                   endif                                                  If OK
      *
     C                   endif                                                  If not GDU
     C                   endif                                                  If record
     C                   enddo                                                  Do tran dtl
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do tran hdr
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Retrieve BGF Sales data
      *--------------------------------------------------------------------------------------
      *
     C     $bgfsale      begsr
      *
     C     fsfscd        setll     hsl084c
      *
      * Process each Sales Movement header
      *
     C                   dou       *in91 = *on                                  Do sales header
     C     fsfscd        reade     hsl084c                                91
     C                   if        *in91 = *off                                 If not EOF
      *
      *
      * When it is a CULL sale, read all check detail accumulating 'live' head
      * for the 'cull head' units value.
      *
     C                   select                                                 Select Cull/DOA
     C                   when      shstcd = 'CULLS'
     C     shmvsn        setll     hsl064b
      *
     C                   dou       *in93 = *on                                  Do checks
     C     shmvsn        reade     hsl064b                                93
     C                   if        *in93 = *off                                 If record
     C                   add       cdlvhd        wkcuhd
     C                   endif                                                  If record
     C                   enddo                                                  Do checks
     C                   other
      *
      *
      * When it is NOT a CULL sale, read the sales detail records to accumulate
      * DOA head to add to the Total Piglet Deaths.
      * We make this logic exactly match the logic used to populate the fields in the
      * Datamart files since Randy Rolf checks the Total Piglet Deaths against COGNOS.
      * So, accumulate DOA when:
      *       a) the origin group IS NOT a GDU group and
      *       b) the 'average received pounds' is 20 pounds or less
      *
      *
     C     shmvsn        setll     hsp085
     C                   dou       *in93 = *on                                  Do sales detail
     C     shmvsn        reade     hsp085                                 93
     C                   if        *in93 = *off                                 If more detail
      *
      * Determine if origin group is GDU.
      *
     C     sghgsn        chain     hsl034d                            92
     C                   if        *in92 = *off and hggtcd <> 'G'               If not GDU
      *
     C                   z-add     0             wkavlb
      *
      * Calculate average live pounds (use received or shipped values
      * depending on whether the movement is 'fully paid' or not.)
      *
     C                   select
     C                   when      (shmscd = 'FP' or shmscd = 'PP') and
     C                             sglvhd <> 0
     C                   eval(h)   wkavlb = sglvlb / sglvhd
      *
     C                   when      sgshhd <> 0
     C                   eval(h)   wkavlb = sgshlb / sgshhd
     C                   endsl
      *
      * If we think this is a piglet...based on average pounds, accumulate
      * DOA head.
     C                   if        wkavlb <= 20 and                             If piglets
     C                             (shmscd = 'FP' or shmscd = 'PP')
     C                   add       sgdohd        wkdohd
     C                   endif                                                  If piglets
      *
     C                   endif                                                  If not GDU
     C                   endif                                                  If more detail
     C                   enddo                                                  Do sales detail
      *
     C                   endsl                                                  Select Cull/DOA
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do sales header
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Write records to the upload file for a BGF cost center
      *--------------------------------------------------------------------------------------
      *
     C     $bgfjde       begsr
      *
      * Total piglet deaths
      *
     C                   if        wkdohd <> 0
     C                   z-add     wkdohd        hjhpsval
     C     100           mult      wkdohd        hjjdeval
     C                   eval      hjdesc = 'Total Piglet Deaths'
     C                   eval      hjobj = '6016'
     C                   move      *blank        hjre
     C                   exsr      $write204
     C                   endif
      *
      * Gilt and sow ending inventory (reversing entry)
      *
     C                   if        wkinvhd <> 0
     C                   z-add     wkinvhd       hjhpsval
     C     100           mult      wkinvhd       hjjdeval
     C                   eval      hjdesc = 'Gilt & Sow Ending Inventory'
     C                   eval      hjobj = '6010'
     C                   move      'R'           hjre
     C                   exsr      $write204
     C                   endif
      *
      * Culls
     C                   if        wkcuhd <> 0
     C                   z-add     wkcuhd        hjhpsval
     C     100           mult      wkcuhd        hjjdeval
     C                   eval      hjdesc = 'Culls'
     C                   eval      hjobj = '6015'
     C                   move      *blank        hjre
     C                   exsr      $write204
     C                   endif
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Process each Nursery and Grow Finish Farm
      *--------------------------------------------------------------------------------------
      *
     C     $fin          begsr
      *
     C                   move      yes           first
     C     *loval        setll     hsl018i
      *
     C                   dou       *in90 = *on                                  Do nur/gf farms
     C                   read      hsl018i                                90
     C                   if        *in90 = *off and                             If not EOF
     C                             (fsppcd = 'NUR  ' or fsppcd = 'GF   ')
      *
     C                   if        first = yes
     C                   exsr      $first
     C                   endif
      *
      * Control break on company number
      *   a) write finisher records to interface file
      *   b) clear accumulators and save cost center
      *   c) Set new batch number and new document flags
      *   e) Write offsetting entries for company
      *
     C                   select
     C***                when      svcocd <> fscocd
     C***                exsr      $finjde
     C***                exsr      $flags
     C***                exsr      $offset
     C***                exsr      $clear
     C***                move      fscocd        svcocd
      *
      *
      * Control break on cost center
      *   a) write Finisher records to interface file
      *   b) clear accumulators and save cost center
      *
     C                   when      svmcu <> fscjd
     C                   exsr      $finjde
     C                   exsr      $clear
     C                   move      fscjd         svmcu
     C                   move      fscocd        svcocd
     C                   endsl
      *
      *
      * Accumulate detail values for the farm.
      *
     C                   exsr      $finfarm
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do nur/gf farms
      *
      * Last record processing for Finisher farms
      *
     C                   exsr      $finjde
     C                   exsr      $clear
      *
     C                   endsr
      /EJECT
      *-----------------------------------------------------------------------------------------
      * Accumulate period values for a Finisher farm from Datamart Fin: Weekly Group Detail file
      *-----------------------------------------------------------------------------------------
      *
     C     $finfarm      begsr
      *
      * Deads (This subroutine retrieves the daily deads; we'll add DOA's later.)
      *
     C     fsfscd        setll     hsl068c
     C                   dou       *in91 = *on                                  Do daily dead
     C     fsfscd        reade     hsl068c                                91
     C                   if        *in91 = *off                                 If not EOF
     C                   add       kdkdhd        wkdohd
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do daily dead
      *
      *
      * Inventory adjustments
      *
     C     fsfscd        setll     hsl069d
     C                   dou       *in91 = *on                                  Do adj
     C     fsfscd        reade     hsl069d                                91
     C                   if        *in91 = *off                                 If not EOF
     C     -1            mult      iaiahd        iaiahd
     C                   add       iaiahd        wkadjhd
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do adj
      *
      *
      * Inventory balance
      *
     C     fsfscd        setll     hsl369c
     C                   dou       *in91 = *on                                  Do balance
     C     fsfscd        reade     hsl369c                                91
     C                   if        *in91 = *off                                 If not EOF
     C                   add       wgeihd        wkinvhd
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do balance
      *
      * Cull head
      * Sold head
     C                   exsr      $finsale
      *
      * Transfer out same phase head
      *
     C                   exsr      $fintran
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Retrieve Finisher transfer data
      *--------------------------------------------------------------------------------------
      *
     C     $fintran      begsr
      *
     C     fsfscd        setll     hsl074h
      *
     C                   dou       *in91 = *on                                  Do trans out
     C     fsfscd        reade     hsl074h                                91
     C                   if        *in91 = *off                                 If transfer
      *
      *
     C     mhmvsn        setll     hsp075
     C                   dou       *in93 = *on                                  Do tran dtl
     C     mhmvsn        reade     hsp075                                 93
     C                   if        *in93 = *off                                 If record
      *
      * Accumulate DOA head
      *
     C                   add       mddohd        wkdohd
      *
      *
      * Accumulate Transfer Out Same Phase head
      *
     C                   select
     C                   when      mhorpp = mhdnpp
     C                   add       mdqlhd        wksptohd
     C                   add       mdrjhd        wksptohd
     C                   endsl
      *
     C                   endif                                                  If record
     C                   enddo                                                  Do tran dtl
      *
     C                   endif                                                  If transfer
     C                   enddo                                                  Do trans out
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Retrieve Finisher sales data
      *--------------------------------------------------------------------------------------
      *
     C     $finsale      begsr
      *
     C     fsfscd        setll     hsl084c
      *
      * Read each sales movement header record for the farm.
      *
     C                   dou       *in91 = *on                                  Do sales move
     C     fsfscd        reade     hsl084c                                91
     C                   if        *in91 = *off                                 If not EOF
      *
      * Read all movement detail accumulating DOA head.
      *
     C     shmvsn        setll     hsp085
      *
     C                   dou       *in93 = *on                                  Do sale dtl
     C     shmvsn        reade     hsp085                                 93
     C                   if        *in93 = *off
     C                   add       sgdohd        wkdohd
     C                   endif
     C                   enddo                                                  Do sale dtl
      *
      *
      * Read all check detail accumulating 'live' head.
      *
     C     shmvsn        setll     hsl064b
      *
     C                   dou       *in93 = *on                                  Do chk dtl
     C     shmvsn        reade     hsl064b                                93
     C                   select
     C                   when      *in93 = *on
     C                   when      shstcd = 'CULLS'
     C                   add       cdlvhd        wkcuhd
     C                   other
     C                   add       cdlvhd        wkslhd
     C                   endsl
     C                   enddo                                                  Do chk dtl
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do header
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Write records to the interface file for a Finisher cost center
      *--------------------------------------------------------------------------------------
      *
     C     $finjde       begsr
      *
      * Culls
     C                   if        wkcuhd <> 0
     C                   z-add     wkcuhd        hjhpsval
     C     100           mult      wkcuhd        hjjdeval
     C                   eval      hjdesc = 'Culls'
     C                   eval      hjobj = '6015'
     C                   move      *blank        hjre
     C                   exsr      $write204
     C                   endif
      *
      * Deads
     C                   if        wkdohd <> 0
     C                   z-add     wkdohd        hjhpsval
     C     100           mult      wkdohd        hjjdeval
     C                   eval      hjdesc = 'Deads'
     C                   eval      hjobj = '6016'
     C                   move      *blank        hjre
     C                   exsr      $write204
     C                   endif
      *
      * Inventory adjustments
      *
     C                   if        wkadjhd <> 0
     C                   z-add     wkadjhd       hjhpsval
     C     100           mult      wkadjhd       hjjdeval
     C                   eval      hjdesc = 'Inventory Adjustments'
     C                   eval      hjobj = '6018'
     C                   move      *blank        hjre
     C                   exsr      $write204
     C                   endif
      *
      *
      * Inventory balance (reversing entry)
      *
     C                   if        wkinvhd <> 0
     C                   z-add     wkinvhd       hjhpsval
     C     100           mult      wkinvhd       hjjdeval
     C                   eval      hjdesc = 'Inventory Balance'
     C                   eval      hjobj = '6010'
     C                   move      'R'           hjre
     C                   exsr      $write204
     C                   endif
      *
      *
      * Sold head
     C                   if        wkslhd <> 0
     C                   z-add     wkslhd        hjhpsval
     C     100           mult      wkslhd        hjjdeval
     C                   eval      hjdesc = 'Sold Head'
     C                   eval      hjobj = '6014'
     C                   move      *blank        hjre
     C                   exsr      $write204
     C                   endif
      *
      * Transfer out same phase
      *
     C                   if        wksptohd <> 0
     C                   z-add     wksptohd      hjhpsval
     C     100           mult      wksptohd      hjjdeval
     C                   eval      hjdesc = 'Transfer OUT - Same Phase'
     C                   eval      hjobj = '6012'
     C                   move      *blank        hjre
     C                   exsr      $write204
     C                   endif
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Write record to interface file
      *--------------------------------------------------------------------------------------
      *
     C     $write204     begsr
      *
     C                   eval      hjexa = hjdesc
     C                   move      'AU'          hjtype
     C                   move      no            hjoffset
     C                   z-add     0             hjbatval
     C                   move      svmcu         hjmcu
     C                   move      *blank        hjsub
     C                   z-add     ldacyr        hjacyr
     C                   z-add     ldacpe        hjacpe
     C                   move      svcocd        hjcocd
      *
     C                   write     hjrec
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Clear accumulators
      *--------------------------------------------------------------------------------------
      *
     C     $clear        begsr
      *
     C                   z-add     0             wksptohd
     C                   z-add     0             wkdohd
     C                   z-add     0             wkinvhd
     C                   z-add     0             wkcuhd
     C                   z-add     0             wkadjhd
     C                   z-add     0             wkslhd
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Process interface records and populate 'new batch number' and 'new doc number' flags
      *--------------------------------------------------------------------------------------
      *
      * The interface file is used by several HPS programs. But, we have written only 1 JDE
      * program to read the file and write its records into JDE. And, each 'upload' seems to
      * have different requirements on the number of 'batches' and 'documents'. So, we
      * customize the 'flag' logic here so that the JDE program can be 'generic'.
      *
      * For the HPS upload of 'Units' to JDE, we will ultimately:
      *    1) create a new JDE batch for each unique 'description' per company
      *    2) retrieve a new JDE 'document' number for each unique 'description'
      *
      *
     C     $flags        begsr
      *
     C                   move      *blank        svdesc
     C                   move      *blank        svre
     C                   move      *blanks       svcocd
     C     *loval        setll     hsp204
      *
     C                   dou       *in91 = *on                                  Do flag loop
     C                   read      hsp204                                 91
     C                   if        *in91 = *off                                 If not EOF
      *
     C                   select
     C                   when      svdesc <> hjdesc or
     C                             svcocd <> hjcocd
     C                   move      hjdesc        svdesc
     C                   move      hjre          svre
     C                   move      hjcocd        svcocd
     C                   move      yes           hjnewbat
     C                   move      yes           hjnewdoc
     C                   other
     C                   move      no            hjnewbat
     C                   move      no            hjnewdoc
     C                   endsl
      *
     C                   update    hjrec
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do flag loop
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Process interface records and write offsetting records
      *--------------------------------------------------------------------------------------
      *
     C     $offset       begsr
      *
     C                   move      yes           first
     C     *loval        setll     hsl204a
      *
     C                   dou       *in91 = *on                                  Do offsets
     C                   read      hsl204a                                91
     C                   if        *in91 = *off                                 If not EOF
      *
     C                   if        first = yes
     C                   move      no            first
     C                   move      p1hjdesc      svdesc
     C                   move      p1hjre        svre
     C                   move      p1hjcocd      svcocd
     C                   endif
      *
      * Control break on description
      *   a) write offsetting record to interface file
      *   b) clear accumulator and save description
      *
     C                   if        svdesc <> p1hjdesc or
     C                             svcocd <> p1hjcocd
     C                   exsr      $writeoff
     C                   endif
      *
      * Detail processing
     C                   add       p1hjhpsval    wkhpsval
     C                   add       p1hjjdeval    wkjdeval
      *
     C                   endif                                                  If not EOF
     C                   enddo                                                  Do offsets
      *
      *  Write offsetting record for last description
      *
     C                   if        first = no
     C                   exsr      $writeoff
     C                   endif
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Write offset records to interface file
      *--------------------------------------------------------------------------------------
      *
     C     $writeoff     begsr
      *
     C                   move      no            hjnewbat
     C                   move      no            hjnewdoc
      *
     C                   z-add     ldacyr        hjacyr
     C                   z-add     ldacpe        hjacpe
     C                   move      'AU'          hjtype
     C                   move      svcocd        wkmcu
     C                   eval      hjmcu = wkmcu
     C                   eval      hjobj = '6020'
     C                   move      *blank        hjsub
     C                   move      yes           hjoffset
      *
     C                   move      svdesc        hjdesc
     C                   move      svre          hjre
     C                   move      svcocd        hjcocd
     C                   eval      hjexa = hjdesc
     C     -1            mult      wkhpsval      hjhpsval
     C     -1            mult      wkjdeval      hjjdeval
      *
      * Populate the 'batch header value' field with the 'offset' value. Force the
      * number to be positive.
      *
     C                   select
     C                   when      hjjdeval >= 0
     C                   z-add     hjjdeval      hjbatval
     C                   other
     C     -1            mult      hjjdeval      hjbatval
     C                   endsl
      *
     C                   write     hjrec
      *
     C                   z-add     0             wkhpsval
     C                   z-add     0             wkjdeval
     C                   move      p1hjdesc      svdesc
     C                   move      p1hjre        svre
     C                   move      p1hjcocd      svcocd
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Subroutine for first time for BGF and first time for Finisher logic
      *--------------------------------------------------------------------------------------
      *
     C     $first        begsr
      *
     C                   move      fscjd         svmcu
     C                   move      fscocd        svcocd
     C                   move      no            first
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Initialization subroutine
      *--------------------------------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    ldacyr
     C                   kfld                    ldacpe
      *
      *
     C     key02         klist
     C                   kfld                    fsfscd
     C                   kfld                    ldacyr
     C                   kfld                    svacwk
      *
      *
      * For the Gilt/Sow Ending Inventory, we only want the data for the "last week of the Period".
      * To determine "last week", we will position GT the Year/Period being closed and then READPE
      * on the Year/Period in the BGF Weekly Production file.
      *
     C     key01         setgt     hsl092d
     C     key01         readpe    hsl092d                                92
     C                   if        *in92 = *off
     C                   z-add     p2bpacwk      svacwk
     C                   endif
      *
      * We will override 2010 Period 12 to get it correct so the users can go forward.
      * We hope MTech will be in place by next year. (E1248)
      *
     C                   if        ldacyr = 2010 and ldacpe = 12
     C                   z-add     52            svacwk
     C                   endif
      *
     C                   endsr
      /EJECT
