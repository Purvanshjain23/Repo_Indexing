// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKLQXFR
// ?Date: 14.08.2025 Time: 02:49:53
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//? length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(RTV Tattoo Record     RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1111223;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.TH_Purchase_Date);
PARAMETER(WRK.TH_Group_Reference);
PARAMETER(WRK.TH_Live_Purchase_UOM);
PARAMETER(WRK.TH_Live_Purchase_Price);
PARAMETER(WRK.TH_Resale_UOM);
PARAMETER(WRK.TH_Recalc_Live_Wgt_Yld);
PARAMETER(WRK.TH_Pricing_Date);
PARAMETER(WRK.TH_Resale_Spread_Sts);
PARAMETER(WRK.TH_Dead_On_Arrival);
PARAMETER(WRK.TH_Head_Received);
PARAMETER(WRK.TH_Yard_Deads);
PARAMETER(WRK.TH_Held_Over);
PARAMETER(WRK.TH_Head_Condemned);
PARAMETER(WRK.TH_Head_Killed);
PARAMETER(WRK.TH_Head_Adds);
PARAMETER(WRK.TH_Head_Accepted);
PARAMETER(WRK.TH_Live_Wgt);
PARAMETER(WRK.TH_Hot_Wgt);
PARAMETER(WRK.TH_Tot_Loin_Eye_Depth);
PARAMETER(WRK.TH_Tot_Backfat_Inches);
PARAMETER(WRK.TH_Tot_Light_Reflectance);
PARAMETER(WRK.TH_Avg_Live_Wgt);
PARAMETER(WRK.TH_Avg_Hot_Wgt);
PARAMETER(WRK.TH_Avg_Light_Reflectance);
PARAMETER(WRK.TH_Avg_Lean_Percent);
PARAMETER(WRK.TH_Avg_Loin_Eye_Depth);
PARAMETER(WRK.TH_Avg_Backfat);
PARAMETER(WRK.TH_Std_Yield_Percent);
PARAMETER(WRK.TH_Actual_Yield);
PARAMETER(WRK.TH_Yield_Difference);
PARAMETER(WRK.TH_Recalc_Live_Wgt);
PARAMETER(WRK.TH_CM_Base_Mkt_Price);
PARAMETER(WRK.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(WRK.TH_CM_Sort_Discount_Amt);
PARAMETER(WRK.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(WRK.TH_CM_Base_Carcass_Value);
PARAMETER(WRK.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(WRK.TH_CM_Carcass_Gross_Amt);
PARAMETER(WRK.TH_Deduction_Amt);
PARAMETER(WRK.TH_Total_Net_WO_Adds);
PARAMETER(WRK.TH_Carcass_Net_Amt);
PARAMETER(WRK.TH_Additions_Amt);
PARAMETER(WRK.TH_Accrual_Amount);
PARAMETER(WRK.TH_Fixed_Cost_Amount);
PARAMETER(WRK.TH_Payment_Sts);
PARAMETER(WRK.TH_Header_Error_Sts);
PARAMETER(WRK.TH_Detail_Error_Sts);
PARAMETER(WRK.TH_Kill_Balancing_Sts);
PARAMETER(WRK.TH_Bal_to_Kill_Gen);
PARAMETER(WRK.TH_Commission_A_P_Voucher);
PARAMETER(WRK.TH_Voucher_Payment_Date);
PARAMETER(WRK.TH_User_Error_Override);
PARAMETER(WRK.TH_Held_Over_Record);
PARAMETER(WRK.TH_Sex);
PARAMETER(WRK.TH_Held_Ovr_Completed_Dte);
PARAMETER(WRK.TH_Commission_Paid_Date);
PARAMETER(WRK.TH_Actual_Check_Date);
PARAMETER(WRK.TH_Shipped_Weight);
PARAMETER(WRK.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(WRK.TH_FFLI);
PARAMETER(WRK.TH_Kill_Product_Value);
PARAMETER(WRK.TH_Cut_Product_Value);
PARAMETER(WRK.TH_Render_Product_Value);
PARAMETER(WRK.TH_Shift_Held_Over_Head);
PARAMETER(WRK.DF_Defect_Code);
PARAMETER(WRK.THP_Process_Code);
PARAMETER(WRK.HB_Buyer_Code);
PARAMETER(WRK.GN_Genetic_Code);
PARAMETER(WRK.HC_Class_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Find Ev Avg Rec#  RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1106193;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.ET_Carcass_Number);
PARAMETER(WRK.ET_Carcass_Number_Insert);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(WRK.TH_Avg_Hot_Wgt);
{
 //?USER: Processing if Data record not found

 // PAR.ET Carcass Number = CON.1
 PAR.ET_Carcass_Number = 1;

 // PAR.ET Carcass Number Insert = CON.*ZERO
 PAR.ET_Carcass_Number_Insert = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.ET Record Add/Del Sts is Delete
 IF DB1.ET_Record_Add_Del_Sts = 'D';

 // IF DB1.RS Record Status is InActive
 IF DB1.RS_Record_Status = 'I';

 // IF DB1.RS Record Status is Flag for Purge
 IF DB1.RS_Record_Status = 'D';

 // IF *OTHERWISE
 IF *OTHERWISE;

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

}


// Calculate Net Head
WRK.Net_Head_Usr = ( WRK.TH_Head_Received - WRK.TH_Yard_Deads ) - WRK.TH_Head_Condemned;

EXECUTE FUNCTION(Rtv Eval Next#        RT) TYPE(RTVOBJ) FILE(PKBVCPP)           AB1135496;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.ET_Scale_Sequence_Number);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.ET_Scale_Sequence_Number = 1;

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF DB1.ET Scale Sequence Number is Entry Allowed
 IF DB1.ET_Scale_Sequence_Number >= 000001;
 AND DB1.ET_Scale_Sequence_Number <= 699999;

 // PAR.ET Scale Sequence Number = DB1.ET Scale Sequence Number + CON.1
 PAR.ET_Scale_Sequence_Number = DB1.ET_Scale_Sequence_Number + 1;

 QUIT;

 ENDIF;

}


//?Sequence of 900000 - 999999 check for add records
CASE;

// IF WRK.ET Scale Sequence Number is Add Records
IF WRK.ET_Scale_Sequence_Number >= 900000;
AND WRK.ET_Scale_Sequence_Number <= 999999;

//?Sequence of 900000 - 999999 check for add records
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.ET Scale Sequence Number = WRK.ET Scale Sequence Number + CON.900000
WRK.ET_Scale_Sequence_Number = WRK.ET_Scale_Sequence_Number + 900000;

ENDIF;

// DOW WRK.TH Head Killed LT WRK.Net Head Usr
DOW WRK.TH_Head_Killed < WRK.Net_Head_Usr;

// WRK.TH Head Killed = WRK.TH Head Killed + CON.1
WRK.TH_Head_Killed = WRK.TH_Head_Killed + 1;

// WRK.ET Scale Number = WRK.ET Scale Number + CON.1
WRK.ET_Scale_Sequence_Number = WRK.ET_Scale_Sequence_Number + 1;

// WRK.ET Carcass Number Insert = WRK.ET Carcass Number Insert + CON.1
WRK.ET_Carcass_Number_Insert = WRK.ET_Carcass_Number_Insert + 1;

// WRK.Calculate All Usr = CND.Yes
WRK.Calculate_All_Usr = 'Y';

// Call program Clc Inch to MM/Lean%FOM.
CALL PROGRAM(Clc Inch to MM/Lean%FOM) ('PKINMMLP');
PARAMETER(WRK.TH_Avg_Lean_Percent);
PARAMETER(WRK.TH_Avg_Backfat);
PARAMETER(WRK.TH_Avg_Loin_Eye_Depth);
PARAMETER(WRK.TH_Avg_Light_Reflectance);
PARAMETER(WRK.CD_Backfat_Thickness_MM);
PARAMETER(WRK.CD_Loin_Eye_Depth_MM);
PARAMETER(WRK.CD_Light_Reflectance_MM);
PARAMETER(WRK.CD_Lean_Percent_MM);
PARAMETER(WRK.Calculate_All_Usr);

EXECUTE FUNCTION(Create Evaluation Transac) TYPE(CRTOBJ) FILE(PKBVCPP)          AB1102931;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.ET_Scale_Sequence_Number);
PARAMETER(WRK.ET_Carcass_Number);
PARAMETER(WRK.ET_Carcass_Number_Insert);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(1);
PARAMETER(WRK.TH_Avg_Hot_Wgt);
PARAMETER(WRK.TH_Avg_Backfat);
PARAMETER(WRK.TH_Avg_Loin_Eye_Depth);
PARAMETER(WRK.TH_Avg_Lean_Percent);
PARAMETER(WRK.CD_Backfat_Thickness_MM);
PARAMETER(WRK.CD_Loin_Eye_Depth_MM);
PARAMETER(WRK.CD_Light_Reflectance_MM);
PARAMETER(WRK.CD_Lean_Percent_MM);
PARAMETER(WRK.TH_Avg_Light_Reflectance);
PARAMETER(WRK.ET_Trim_Area);
PARAMETER(WRK.TH_Sex);
PARAMETER(*BLANK);
PARAMETER('A');
PARAMETER(*BLANK);
PARAMETER('M');
PARAMETER('N');
PARAMETER(WRK.ET_Adjust_Add_Type);
PARAMETER(WRK.ET_Broken_Back_Sts);
PARAMETER(WRK.ET_Unused_Sts_2);
PARAMETER(WRK.ET_Adjust_Add_Source);
PARAMETER(WRK.ET_Unused_Sts_4);
PARAMETER(WRK.ET_Unused_Sts_5);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER('A');
PARAMETER(JOB.*JOB);
PARAMETER(JOB.*PROGRAM);
PARAMETER(JOB.*USER);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
PARAMETER(JOB.*Job_date);
PARAMETER(JOB.*Job_time);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(*MISSING);
 PARAMETER(*MISSING);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


ENDDO;

