// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBWYDFR
// ?Date: 14.08.2025 Time: 03:49:36
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Change Log
DO;

//?E5262 JJH 08/23/16 - Rebill
//?- Add 4=Dsp Notes   To display the A/R Header Notes
//?** 06/21/16  JBB E5262 Recompile for Drop Down List for CND 'RB'.
//?*****
//?E5262 JJH 04/21/16 - Rebill
//?- This function is a copy of the PDC1DFR - DSP Header Inq All    DF
//?- 3=Rebill is new option that allows user to "Close Out" Invoice
//?  Suffix of CB (Chargeback) and then create a RB (Rebill).
//?- Change Screen Title: Work With Chargebacks and Rebills
//?- Comment out logic for Option 2=Open Invoice
//?- Call EDT Adjust. for CB/RBL E1 - A/R Detail to create the
//?  A/R Detail with Adjust Tupe Code=RBL to Close Out CB.
//?** 11/01/13  RMC E2855 chg from lf arbdcplx to use lf by invoice only
//?** 03/27/2006 LJB
//?** Put blanks in new input parm for the DSP A/R Summary
ENDDO;

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Initialize subfile control

// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(RTV Num. of Payments   RT) TYPE(RTVOBJ) FILE(ARBECPP)          AC1357699;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(1);
PARAMETER(LCL.USR_Number_of_Payments);
{
 //?USER: Initialize routine

 // PAR.USR Number of Payments = CND.Equal zero
 PAR.USR_Number_of_Payments = *ZERO;

 //?USER: Processing if Data record not found

 QUIT;

 //?USER: Process Data record

 CASE;

 // IF DB1.Cash/Adj is Cash Adjustment
 IF DB1.Cash_Adj = 'CSH';

 // PAR.USR Number of Payments = CON.1 + PAR.USR Number of Payments
 PAR.USR_Number_of_Payments = 1 + PAR.USR_Number_of_Payments;

 ENDIF;

}


CASE;

// IF LCL.USR Number of Payments is Greater Than 1
IF LCL.USR_Number_of_Payments > 1;

// RCD.Text 1 Length USR = CON.*
RCD.Text_1_Length_USR = *;

ENDIF;

// RCD.USR Transaction Qty 9.2 = DB1.Transaction Amount
RCD.USR_Transaction_Qty_9_2 = DB1.Transaction_Amount;

EXECUTE FUNCTION(Rtv Note Exists       RT) TYPE(RTVOBJ) FILE(PMEDCPP)           AC1899753;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Found
IF LCL.Record_Found_USR = 'Y';

// RCD.STATUS = CND.Yes
RCD.STATUS = 'Y';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.STATUS = CND.No
RCD.STATUS = 'N';

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

//?Prompt Print Reconcile
CASE;

// IF CTL.*CMD key is *Print List
IF CTL.*CMD_key = '21';

// Call program PMT A/R Cust Reconcile PV.
CALL PROGRAM(PMT A/R Cust Reconcile PV) ('PPN1PVR');

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?E5262 JJH 04/25/16 - Comment out logic for Option 2=Open Invoice
//?E5262 JJH 04/25/16 - Add Option 3=Rebill
//?3=Rebill
CASE;

// IF RCD.*SFLSEL is *Copy
IF RCD.*SFLSEL = '3';

CASE;

// IF RCD.Purge Status is History
IF RCD.Purge_Status = 'H';

// Send error message - 'Option 3=Rebill is not allowed for Purge Status "H=History."'
ERROR(USR4926);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF RCD.Invoice Suffix is Charge Backs
IF RCD.Invoice_Suffix = 'CB';

// AND RCD.Remaining Balance Due is equal to zero
AND RCD.Remaining_Balance_Due = *ZERO;

// Send error message - 'Rebill not allowed because Chargeback has zero Amount Due.'
ERROR(USR4927);
MSGPARM(RCD.Remaining_Balance_Due);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

// IF RCD.Invoice Suffix is Charge Backs
IF RCD.Invoice_Suffix = 'CB';

// PGM.*Defer confirm = CND.Proceed to confirm
PGM.*Defer_confirm = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option 3=Rebill is allowed for Invoice Suffix = CB with Purge Status = H.'
ERROR(USR4920);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

ENDIF;

//?Display A/R Header Notes
CASE;

// IF RCD.*SFLSEL is *Delete#1
IF RCD.*SFLSEL = '4';

// Call program WW Invoice Notes      DF.
CALL PROGRAM(WW Invoice Notes      DF) ('PMX6DFR');
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Sales_Route_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?Display A/R Header Detail
CASE;

// IF RCD.*SFLSEL is Option 5
IF RCD.*SFLSEL = '5'/'5';

// Call program DSP A/R Header Detail  D1.
CALL PROGRAM(DSP A/R Header Detail  D1) ('PDC0D1R');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?Print Reconcile
CASE;

// IF RCD.*SFLSEL is Option 6
IF RCD.*SFLSEL = '6'/'6';

// PAR.PRT Night Queue Run Sts = CND.no
PAR.PRT_Night_Queue_Run_Sts = 'N';

// Call program PMT Prt Opt w/PSz SHR  PV.
CALL PROGRAM(PMT Prt Opt w/PSz SHR  PV) ('PDV8PVR');
PARAMETER('Print A/R Cust Reconcile');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Number_of_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('A/R');
PARAMETER(*MISSING);
PARAMETER(1);

CASE;

// IF PGM.*Return code is *User QUIT requested
IF PGM.*Return_code = 'Y2U9999';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.Customer Number Pass  USR = CON.*ZERO
PAR.Customer_Number_Pass_USR = *ZERO;

// PAR.Date 1          PASS  USR = CON.*ZERO
PAR.Date_1_PASS_USR = *ZERO;

// PAR.Date 2          PASS  USR = CON.*ZERO
PAR.Date_2_PASS_USR = *ZERO;

// PAR.Invoice Number Alpha USR = RCD.Invoice Number
PAR.Invoice_Number_Alpha_USR = RCD.Invoice_Number;

// WRK.System Value Numeric = PAR.PRT Number of Copies
WRK.System_Value_Numeric = PAR.PRT_Number_of_Copies;

// Call program PRT A/R Cust Reconcile UP.
SBMJOB;
CALL PROGRAM(PRT A/R Cust Reconcile UP) ('PPN2UPC');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('A/R');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.Customer_Number_Pass_USR);
PARAMETER(PAR.Date_1_PASS_USR);
PARAMETER(PAR.Date_2_PASS_USR);
PARAMETER(WRK.System_Value_Numeric);
PARAMETER(PAR.Invoice_Number_Alpha_USR);
PARAMETER(*BLANK);
SBMJOBEND;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?Display Adjustment Detail Records
CASE;

// IF RCD.*SFLSEL is Option 8
IF RCD.*SFLSEL = '8'/'8';

// Call program DSP Detail for Header  DF.
CALL PROGRAM(DSP Detail for Header  DF) ('PDT2DFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(*ZERO);
PARAMETER(RCD.Bank_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?Display A/R Summary
CASE;

// IF RCD.*SFLSEL is Opt 7
IF RCD.*SFLSEL = '7'/'7';

//?RMC 9/16/04  PKTR01
//?** Put blanks in new input parm for the DSP A/R Summary  03/27/06 LJB
// WRK.USR Check Y/N Status = CND.blank
WRK.USR_Check_Y_N_Status = *BLANK;

// Call program DSP A/R Summary       XF.
CALL PROGRAM(DSP A/R Summary       XF) ('PPG5XFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(WRK.USR_Check_Y_N_Status);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?Edit Explanation
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Edt Explanation       EF.
CALL PROGRAM(Edt Explanation       EF) ('PONREFR');
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(*ZERO);
PARAMETER(RCD.Bank_Code);

// RCD.*SFLSEL = CND.*Reset to blank
RCD.*SFLSEL = *BLANK;

ENDIF;

//?USER: Process subfile record (Post-confirm)

CASE;

// IF RCD.*SFLSEL is *Edit
IF RCD.*SFLSEL = '2'/'2';

EXECUTE FUNCTION(CHG Purge Status       CH) TYPE(CHGOBJ) FILE(ARBDCPP)          AC1381033;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER('O');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?E5262 JJH 04/25/16 - Add Option 3=Rebill
//?3=Copy Post Confirm
CASE;

// IF RCD.*SFLSEL is *Copy
IF RCD.*SFLSEL = '3';

//?3=Rebill is new option that allows user to "Close Out" Invoice
//?Suffix of CB (Chargeback) and then create a RB (Rebill).
//?Call the Edit Charhgebacks and Rebills (PBW7E1R)
// Call program EDT Chargeback/Rebill  E1.
CALL PROGRAM(EDT Chargeback/Rebill  E1) ('PBW7E1R');
PARAMETER(LCL.Remaining_Balance_Due);
PARAMETER(RCD.AR_Customer_Number);
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Invoice_Number);
PARAMETER(RCD.Invoice_Suffix);
PARAMETER(LCL.Sequence_Number);
PARAMETER(RCD.Remaining_Balance_Due);
PARAMETER(LCL.Invoice_Number_RB);

//?Position the Subfile on the Company and Invoice Number
// CTL.Company Number = RCD.Company Number
CTL.Company_Number = RCD.Company_Number;

// CTL.A/R Customer Number = CON.*ZERO
CTL.AR_Customer_Number = *ZERO;

// CTL.Invoice Number = CON.*ZERO
CTL.Invoice_Number = *ZERO;

// CTL.Invoice Suffix = CND.Blank
CTL.Invoice_Suffix = *BLANK;

// CTL.Purge Status = CND.Blank
CTL.Purge_Status = *BLANK;

// CTL.Order Number Ref = RCD.Order Number Ref
CTL.Order_Number_Ref = RCD.Order_Number_Ref;

// CTL.Salesperson Code = CON.*BLANK
CTL.Salesperson_Code = *BLANK;

// CTL.A/R Check Number = CON.*BLANK
CTL.A_R_Check_Number = *BLANK;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

CASE;

// IF LCL.Invoice Number RB is GT Zero
IF LCL.Invoice_Number_RB > *ZERO;

CASE;

// IF LCL.Remaining Balance Due is equal to zero
IF LCL.Remaining_Balance_Due = *ZERO;

// Send information message - 'Chargeback (CB) &1 closed and Rebill (RB) &2 created.'
MESSAGE(USR4921 *INFO);
MSGPARM(RCD.Invoice_Number);
MSGPARM(LCL.Invoice_Number_RB);

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Chargeback (CB) &1 remains open and Rebill (RB) &2 created.'
MESSAGE(USR4955 *INFO);
MSGPARM(RCD.Invoice_Number);
MSGPARM(LCL.Invoice_Number_RB);

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// Send information message - 'Rebill for Chargeback &1 cancelled.'
MESSAGE(USR4938 *INFO);
MSGPARM(RCD.Invoice_Number);

ENDIF;

ENDIF;

