// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLB9ETR
// ?Date: 14.08.2025 Time: 02:53:44
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(CTL.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


//?E2423 Mtech Not Live will use this HPS program
//?Get the MTech Live Yes or No
DO;

//?Mtech Live Yes or no
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.CC_Company_Number);
PARAMETER('MTECHLIVE');
PARAMETER(WRK.System_Value_Alpha_USR);

// LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

ENDDO;

//?We will come back to this one when we put in the
//?data base changes for Mtech
//?Vist later validation on Farm Site.
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
//?USER: Load existing header

CASE;

// IF CTL.DSD Source Type is Internal
IF CTL.DSD_Source_Type = 'I';

CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

// Call program Val HPS Farm Site DS  UP.
CALL PROGRAM(Val HPS Farm Site DS  UP) ('HP271');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(CTL.DSD_Farm_Site_Code);
PARAMETER(CTL.Farm_site_Name_f_HPS_USR);
PARAMETER(WRK.State);
PARAMETER(CTL.DSD_Transportation_Office);
PARAMETER(CTL.DT_Trucker_Code_HPS);
PARAMETER(CTL.DT_Loading_Crew);
PARAMETER(CTL.DT_Driver);
PARAMETER(NLL.MTech_Farm_Site_Ref);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Load_Crew_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

// Call program Val HPS Farm Site DS  UP.
CALL PROGRAM(Val HPS Farm Site DS  UP) ('HP271');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(CTL.DSD_Farm_Site_Code);
PARAMETER(CTL.Farm_site_Name_f_HPS_USR);
PARAMETER(WRK.State);
PARAMETER(CTL.DSD_Transportation_Office);
PARAMETER(CTL.DT_Trucker_Code_HPS);
PARAMETER(CTL.DT_Loading_Crew);
PARAMETER(CTL.DT_Driver);
PARAMETER(NLL.MTech_Farm_Site_Ref);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Load_Crew_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

ENDIF;

ENDIF;

//?USER: Initialize subfile record (old record)

//?RMC 2/15/05 - save for later comparison
// RCD.DT Building = RCD.DSS Building
RCD.DT_Building = RCD.DSS_Building;

// RCD.DT Room = RCD.DSS Room
RCD.DT_Room = RCD.DSS_Room;

//?USER: Validate header non-key fields

CASE;

// IF CTL.PD Producer Code is SEABOA
IF CTL.PD_Producer_Code = 'SEABOA';

//?E2423 MTech REGARDLESS This validation should only be done
//?for Seaboard Not on other producers
//?F4=Prompt
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.DSD Farm Site Code
IF PGM.*Cursor_field = CTL.DSD_Farm_Site_Code;

//?E2423 MTech
//?Can use the same program here for Live or Not Live with Mtech
// Call program Sel HPS Farm Site     UP.
CALL PROGRAM(Sel HPS Farm Site     UP) ('HP5003');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(CTL.DSD_Farm_Site_Code);
PARAMETER(CTL.Farm_site_Name_f_HPS_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);

ENDIF;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

// Call program Val HPS Farm Site DS  UP.
CALL PROGRAM(Val HPS Farm Site DS  UP) ('HP271');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(CTL.DSD_Farm_Site_Code);
PARAMETER(CTL.Farm_site_Name_f_HPS_USR);
PARAMETER(WRK.State);
PARAMETER(CTL.DSD_Transportation_Office);
PARAMETER(CTL.DT_Trucker_Code_HPS);
PARAMETER(CTL.DT_Loading_Crew);
PARAMETER(CTL.DT_Driver);
PARAMETER(NLL.MTech_Farm_Site_Ref);
PARAMETER(NLL.MTech_Trucker_Ref);
PARAMETER(NLL.MTech_Load_Crew_Ref);
PARAMETER(NLL.MTech_Driver_Ref);

CASE;

// IF LCL.Return Code USR is Error Found
IF LCL.Return_Code_USR = 'ERROR';

// Send error message - 'Farm Site &1 invalid.'
ERROR(PRK0688);
MSGPARM(CTL.DSD_Farm_Site_Code);

ENDIF;

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

//?e2423 QUESTION DELIVERY SPLIT WITH TRANSPORTATION????
//?e2423 I don't think we will have splits in the DELIVERY SCH SPLIT
//?E2423 MTech
// Call program Rtv HPS Farm Inf-Mtech UP.
CALL PROGRAM(Rtv HPS Farm Inf-Mtech UP) ('HP293');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(CTL.Farm_site_Name_f_HPS_USR);
PARAMETER(CTL.DSD_Farm_Site_Code);
PARAMETER(NLL.HPS_FS_Comp_Relation_USR);
PARAMETER(WRK.State);
PARAMETER(NLL.HPS_Farm_County);
PARAMETER(NLL.HPS_Cell_Manager_Code_USR);
PARAMETER(NLL.HPS_Cell_Manager_Nm_USR);
PARAMETER(NLL.MTech_Farm_Site_Ref);
PARAMETER(NLL.MTech_Cell_Manager_Ref);

CASE;

// IF LCL.Return Code USR is Error Found
IF LCL.Return_Code_USR = 'ERROR';

// Send error message - 'Farm Site &1 invalid.'
ERROR(PRK0688);
MSGPARM(CTL.DSD_Farm_Site_Code);

ENDIF;

ENDIF;

ENDIF;

//?USER: Validate subfile record fields

CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

//?SEL:  Bldng/room
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> RCD.DSS Building
IF PGM.*Cursor_field = RCD.DSS_Building;

// OR PGM.*Cursor field <IS> RCD.DSS Room
OR PGM.*Cursor_field = RCD.DSS_Room;

// Call program Z1Sel HPS Building/RoomUP.
CALL PROGRAM(Z1Sel HPS Building/RoomUP) ('HP5950');
PARAMETER(CTL.DSD_Farm_Site_Code);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(RCD.DSS_Building);
PARAMETER(RCD.DSS_Room);
PARAMETER(RCD.DSS_Hog_Group_Code);
PARAMETER(WRK.HPS_Hog_Group_Status);
PARAMETER(WRK.HPS_Hog_Production_Phase);
PARAMETER(WRK.HPS_Hog_Production_Type);

ENDIF;

ENDIF;

//?VAL:  Building & Room  - rmc 2/15/05 if changed and entered
CASE;

// IF RCD.DSS Building NE RCD.DT Building
IF ( RCD.DSS_Building <> RCD.DT_Building;

// OR RCD.DSS Room NE RCD.DT Room
OR RCD.DSS_Room <> RCD.DT_Room );

// AND RCD.DSS Building is Entered
AND ( RCD.DSS_Building <> *BLANK;

// OR RCD.DSS Room is Entered
OR RCD.DSS_Room <> *BLANK );

// Call program Z1Val HPS Building/RoomUP.
CALL PROGRAM(Z1Val HPS Building/RoomUP) ('HP274');
PARAMETER(LCL.Return_Code_USR);
PARAMETER(CTL.DSD_Delivery_Date);
PARAMETER(CTL.DSD_Farm_Site_Code);
PARAMETER(RCD.DSS_Building);
PARAMETER(RCD.DSS_Room);
PARAMETER(RCD.DSS_Hog_Group_Code);
PARAMETER(RCD.DSS_Sire_Line_Code);

CASE;

// IF LCL.Return Code USR is *Normal
IF LCL.Return_Code_USR = *BLANK;

// RCD.DT Building = RCD.DSS Building
RCD.DT_Building = RCD.DSS_Building;

// RCD.DT Room = RCD.DSS Room
RCD.DT_Room = RCD.DSS_Room;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF LCL.Return Code USR is Error Found
IF LCL.Return_Code_USR = 'ERROR';

// Send error message - 'Building/Room not valid.'
ERROR(PRK1077);
MSGPARM(RCD.DSS_Building);
MSGPARM(RCD.DSS_Room);

// IF LCL.Return Code USR is Multiple group no selectn
IF LCL.Return_Code_USR = 'SELECT';

// Send error message - 'Building/Room has multiple groups. Please select one.'
ERROR(PRK1129);
MSGPARM(RCD.DSS_Building);
MSGPARM(RCD.DSS_Room);

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?CALC: Subfile record function fields

CTL.Scheduled_Head_SUM = SUM(RCD.DSS_Scheduled_Head);

CTL.Load_Count_CNT = CNT(RCD.DSS_Split_Sequence));

//?USER: Validate totals

CASE;

// IF CTL.Load Count CNT is Eq Zero
IF CTL.Load_Count_CNT = *ZERO;

// CTL.DSD Full/Split Load = CND.Full
CTL.DSD_Full_Split_Load = 'F';

// IF CTL.Load Count CNT is GT 1
IF CTL.Load_Count_CNT > 1;

// CTL.DSD Full/Split Load = CND.Split
CTL.DSD_Full_Split_Load = 'S';

// CTL.DSD Building = CON.*BLANK
CTL.DSD_Building = *BLANK;

// CTL.DSD Room = CON.*BLANK
CTL.DSD_Room = *BLANK;

// CTL.DSD Sire Line Code = CON.*BLANK
CTL.DSD_Sire_Line_Code = *BLANK;

// CTL.DSD Hog Group Code = CON.*BLANK
CTL.DSD_Hog_Group_Code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Need more then one Building/Room for Split.'
ERROR(PRK1074);

ENDIF;

//?USER: Change header DBF record

EXECUTE FUNCTION(Chg Split Info        CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1248337;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(CTL.DSD_Delivery_Date);
PARAMETER(CTL.DSD_Delivery_Time);
PARAMETER(CTL.DSD_Delivery_Time_Seq);
PARAMETER(CTL.DSD_Farm_Site_Code);
PARAMETER(CTL.DSD_Building);
PARAMETER(CTL.DSD_Room);
PARAMETER(CTL.DSD_Sire_Line_Code);
PARAMETER(CTL.DSD_Hog_Group_Code);
PARAMETER(CTL.Scheduled_Head_SUM);
PARAMETER(CTL.DSD_Transportation_Office);
PARAMETER(CTL.DT_Trucker_Code_HPS);
PARAMETER(CTL.DT_Driver);
PARAMETER(CTL.DT_Loading_Crew);
PARAMETER(CTL.CHR_Code);
PARAMETER(CTL.DSD_Full_Split_Load);
PARAMETER(CTL.DSD_Truck_ID);
PARAMETER(CTL.DSD_Trailer_ID);
PARAMETER('I');
PARAMETER('SBD');
PARAMETER('SEABOA');
PARAMETER('SB01');
PARAMETER(CTL.DSD_PRD_Srv_Batch_ID);
PARAMETER(CTL.DSD_PRD_Srv_Sched_ID);
PARAMETER(CTL.DSD_Ref_1);
PARAMETER(CTL.DSD_Ref_2);
PARAMETER(CTL.DSD_Ref_Status);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


//?USER: Delete detail DBF record

EXECUTE FUNCTION(Del Delv Sched Split  DL) TYPE(DLTOBJ) FILE(PLAGCPP)           AB1244778;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.DSS_Split_Sequence);

//?USER: Change detail DBF record

EXECUTE FUNCTION(Chg Delv Sched Split  CH) TYPE(CHGOBJ) FILE(PLAGCPP)           AB1244777;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.DSS_Split_Sequence);
PARAMETER(RCD.DSS_Building);
PARAMETER(RCD.DSS_Room);
PARAMETER(RCD.DSS_Sire_Line_Code);
PARAMETER(RCD.DSS_Hog_Group_Code);
PARAMETER(RCD.DSS_Scheduled_Head);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 EXECUTE FUNCTION(Rtv Chg Post Sts      RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1249412;
 PARAMETER(DB1.CC_Company_Number);
 PARAMETER(DB1.DSH_Kill_Date);
 PARAMETER(DB1.DSD_Delivery_Date);
 PARAMETER(DB1.DSD_Delivery_Time);
 PARAMETER(DB1.DSD_Delivery_Time_Seq);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.DSD HPS Post Status is Error
  IF DB1.DSD_HPS_Post_Status = 'E';

  // OR DB1.DSD HPS Post Status is Posted
  OR DB1.DSD_HPS_Post_Status = 'P';

  // LCL.DSD Movement Printed = DB1.DSD Movement Printed
  LCL.DSD_Movement_Printed = DB1.DSD_Movement_Printed;

  CASE;

  // IF DB1.DSD Movement Printed is Printed
  IF DB1.DSD_Movement_Printed = 'P';

  // LCL.DSD Movement Printed = CND.Reprint
  LCL.DSD_Movement_Printed = 'R';

  ENDIF;

  EXECUTE FUNCTION(Chg Delv Sched Dtl    CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1244728;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(DB1.DSD_Scheduled_Hour);
  PARAMETER(DB1.DSD_Farm_Site_Code);
  PARAMETER(DB1.DSD_Building);
  PARAMETER(DB1.DSD_Room);
  PARAMETER(DB1.DSD_Sire_Line_Code);
  PARAMETER(DB1.DSD_Hog_Group_Code);
  PARAMETER(DB1.DSD_Unused_Head);
  PARAMETER(DB1.DSD_Scheduled_Delv_Head);
  PARAMETER(DB1.DSD_Scheduled_Kill_Head);
  PARAMETER(DB1.DSD_Transportation_Office);
  PARAMETER(DB1.DSD_Trucker_Code_HPS);
  PARAMETER(DB1.DSD_Driver);
  PARAMETER(DB1.DSD_Loading_Crew);
  PARAMETER(DB1.CHR_Code);
  PARAMETER(DB1.DSD_Load_Type);
  PARAMETER(DB1.DSD_Full_Split_Load);
  PARAMETER(DB1.DSD_Movement_Number);
  PARAMETER(DB1.DSD_Truck_ID);
  PARAMETER(DB1.DSD_Trailer_ID);
  PARAMETER(LCL.DSD_Movement_Printed);
  PARAMETER(DB1.DSD_Sched_Route_Start_Pnt);
  PARAMETER(DB1.DSD_Sched_Route_Start_Dte);
  PARAMETER(DB1.DSD_Sched_Route_Start_Tim);
  PARAMETER(DB1.DSD_Sch_Farm_Arrival_Date);
  PARAMETER(DB1.DSD_Sch_Farm_Arrival_Time);
  PARAMETER(DB1.DSD_Sch_Start_Load_Date);
  PARAMETER(DB1.DSD_Sch_Start_Load_Time);
  PARAMETER(DB1.DSD_Receiving_Shift);
  PARAMETER(DB1.DSD_Kill_Shift);
  PARAMETER(DB1.DSD_BOL_Kill_Shift);
  PARAMETER('R');
  PARAMETER(DB1.DSD_HPE_Post_Status);
  PARAMETER(DB1.DSD_Lock_Status);
  PARAMETER(DB1.DSD_Source_Type);
  PARAMETER(DB1.DSD_Transfer_Sts);
  PARAMETER(DB1.DSD_Unused_Date);
  PARAMETER(DB1.DSD_Unused_Time);
  PARAMETER(DB1.SR_Source_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.DSD_PRD_Srv_Batch_ID);
  PARAMETER(DB1.DSD_PRD_Srv_Sched_ID);
  PARAMETER(DB1.DSD_Ref_1);
  PARAMETER(DB1.DSD_Ref_2);
  PARAMETER(DB1.DSD_Ref_Status);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

}


//?USER: Create detail DBF record

EXECUTE FUNCTION(Crt Delv Sched Split  IF) TYPE(EXCINTFUN) FILE(PLAGCPP)        AB1248297;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.DSS_Building);
PARAMETER(RCD.DSS_Room);
PARAMETER(RCD.DSS_Sire_Line_Code);
PARAMETER(RCD.DSS_Hog_Group_Code);
PARAMETER(RCD.DSS_Scheduled_Head);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Next Seq Num      RT) TYPE(RTVOBJ) FILE(PLAGCPP)           AB1248300;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DSD_Delivery_Date);
 PARAMETER(PAR.DSD_Delivery_Time);
 PARAMETER(PAR.DSD_Delivery_Time_Seq);
 PARAMETER(PAR.DSS_Split_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.DSS Split Sequence = CON.1
  PAR.DSS_Split_Sequence = 1;

  //?USER: Process Data record

  // PAR.DSS Split Sequence = DB1.DSS Split Sequence + CON.1
  PAR.DSS_Split_Sequence = DB1.DSS_Split_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Crt Delv Sched Split  CR) TYPE(CRTOBJ) FILE(PLAGCPP)           AB1244776;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DSD_Delivery_Date);
 PARAMETER(PAR.DSD_Delivery_Time);
 PARAMETER(PAR.DSD_Delivery_Time_Seq);
 PARAMETER(PAR.DSS_Split_Sequence);
 PARAMETER(PAR.DSS_Building);
 PARAMETER(PAR.DSS_Room);
 PARAMETER(PAR.DSS_Sire_Line_Code);
 PARAMETER(PAR.DSS_Hog_Group_Code);
 PARAMETER(PAR.DSS_Scheduled_Head);
 PARAMETER(PAR.RS_User_Changed);
 PARAMETER(PAR.RS_Date_Changed);
 PARAMETER(PAR.RS_Time_Changed);
 PARAMETER(PAR.RS_Record_Status);
 PARAMETER(PAR.RS_Job);
 PARAMETER(PAR.RS_Program);
 PARAMETER(PAR.RS_User_Added);
 PARAMETER(PAR.RS_Date_Added);
 PARAMETER(PAR.RS_Time_Added);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 EXECUTE FUNCTION(Rtv Chg Post Sts      RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1249412;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.DSH_Kill_Date);
 PARAMETER(PAR.DSD_Delivery_Date);
 PARAMETER(PAR.DSD_Delivery_Time);
 PARAMETER(PAR.DSD_Delivery_Time_Seq);
 {
  //?USER: Process Data record

  CASE;

  // IF DB1.DSD HPS Post Status is Error
  IF DB1.DSD_HPS_Post_Status = 'E';

  // OR DB1.DSD HPS Post Status is Posted
  OR DB1.DSD_HPS_Post_Status = 'P';

  // LCL.DSD Movement Printed = DB1.DSD Movement Printed
  LCL.DSD_Movement_Printed = DB1.DSD_Movement_Printed;

  CASE;

  // IF DB1.DSD Movement Printed is Printed
  IF DB1.DSD_Movement_Printed = 'P';

  // LCL.DSD Movement Printed = CND.Reprint
  LCL.DSD_Movement_Printed = 'R';

  ENDIF;

  EXECUTE FUNCTION(Chg Delv Sched Dtl    CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1244728;
  PARAMETER(DB1.CC_Company_Number);
  PARAMETER(DB1.DSH_Kill_Date);
  PARAMETER(DB1.DSD_Delivery_Date);
  PARAMETER(DB1.DSD_Delivery_Time);
  PARAMETER(DB1.DSD_Delivery_Time_Seq);
  PARAMETER(DB1.DSD_Scheduled_Hour);
  PARAMETER(DB1.DSD_Farm_Site_Code);
  PARAMETER(DB1.DSD_Building);
  PARAMETER(DB1.DSD_Room);
  PARAMETER(DB1.DSD_Sire_Line_Code);
  PARAMETER(DB1.DSD_Hog_Group_Code);
  PARAMETER(DB1.DSD_Unused_Head);
  PARAMETER(DB1.DSD_Scheduled_Delv_Head);
  PARAMETER(DB1.DSD_Scheduled_Kill_Head);
  PARAMETER(DB1.DSD_Transportation_Office);
  PARAMETER(DB1.DSD_Trucker_Code_HPS);
  PARAMETER(DB1.DSD_Driver);
  PARAMETER(DB1.DSD_Loading_Crew);
  PARAMETER(DB1.CHR_Code);
  PARAMETER(DB1.DSD_Load_Type);
  PARAMETER(DB1.DSD_Full_Split_Load);
  PARAMETER(DB1.DSD_Movement_Number);
  PARAMETER(DB1.DSD_Truck_ID);
  PARAMETER(DB1.DSD_Trailer_ID);
  PARAMETER(LCL.DSD_Movement_Printed);
  PARAMETER(DB1.DSD_Sched_Route_Start_Pnt);
  PARAMETER(DB1.DSD_Sched_Route_Start_Dte);
  PARAMETER(DB1.DSD_Sched_Route_Start_Tim);
  PARAMETER(DB1.DSD_Sch_Farm_Arrival_Date);
  PARAMETER(DB1.DSD_Sch_Farm_Arrival_Time);
  PARAMETER(DB1.DSD_Sch_Start_Load_Date);
  PARAMETER(DB1.DSD_Sch_Start_Load_Time);
  PARAMETER(DB1.DSD_Receiving_Shift);
  PARAMETER(DB1.DSD_Kill_Shift);
  PARAMETER(DB1.DSD_BOL_Kill_Shift);
  PARAMETER('R');
  PARAMETER(DB1.DSD_HPE_Post_Status);
  PARAMETER(DB1.DSD_Lock_Status);
  PARAMETER(DB1.DSD_Source_Type);
  PARAMETER(DB1.DSD_Transfer_Sts);
  PARAMETER(DB1.DSD_Unused_Date);
  PARAMETER(DB1.DSD_Unused_Time);
  PARAMETER(DB1.SR_Source_Code);
  PARAMETER(DB1.PD_Producer_Code);
  PARAMETER(DB1.PL_Location_Code);
  PARAMETER(DB1.BOH_Company_Number);
  PARAMETER(DB1.BOH_Buy_Order_Number);
  PARAMETER(DB1.BOL_Load_Number);
  PARAMETER(DB1.DSD_PRD_Srv_Batch_ID);
  PARAMETER(DB1.DSD_PRD_Srv_Sched_ID);
  PARAMETER(DB1.DSD_Ref_1);
  PARAMETER(DB1.DSD_Ref_2);
  PARAMETER(DB1.DSD_Ref_Status);
  PARAMETER(DB1.RS_User_Changed);
  PARAMETER(DB1.RS_Date_Changed);
  PARAMETER(DB1.RS_Time_Changed);
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
   PARAMETER(DB1.RS_User_Changed);
   PARAMETER(DB1.RS_Date_Changed);
   PARAMETER(DB1.RS_Time_Changed);
   PARAMETER(DB1.RS_Job);
   PARAMETER(DB1.RS_Program);
   {
    //?Execute internal function

    // PAR.RS User Changed = JOB.*USER
    PAR.RS_User_Changed = JOB.*USER;

    // PAR.RS Date Changed = JOB.*Job date
    PAR.RS_Date_Changed = JOB.*Job_date;

    // PAR.RS Time Changed = JOB.*Job time
    PAR.RS_Time_Changed = JOB.*Job_time;

    // PAR.RS Job = JOB.*JOB
    PAR.RS_Job = JOB.*JOB;

    // PAR.RS Program = JOB.*PROGRAM
    PAR.RS_Program = JOB.*PROGRAM;

   }

  }

  ENDIF;

 }

}


//?USER: Process command keys

PGM.*Return_code = 'Y2U9999';

RETURN;

