      *****************  RPG PROGRAM HEADING  ***********************
      *
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP173
      * TITLE:       MAINTAIN FARM COSTS
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     06/28/94
      *
      * FUNCTION: THIS PROGRAM USES A SUBFILE TO MAINTAIN FARM COSTS
      *           FOR A USER-SPECIFIED DATE AND FARM SITE BUSINESS
      *           OFFICE.
      *
      *           THE PROGRAM WILL CREATE, DELETE AND UPDATE RECORDS
      *           FOR A PARTICULAR EFFECTIVE DATE AND FARM
      *
      *           THIS PROGRAM IS CALLED FROM HP473-SPECIFY FARM COSTS
      *           TO MAINTAIN.
      *
      *           IT IS RESTRICTED TO THE FARM SITE BUSINESS OFFICE
      *              AND DATE KEYED BY THE USER IN HP473.
      *           IT DOES NOT HAVE SELECTORS OR POSITIONERS.
      *           IT DOES HAVE F4-PROMPT LOGIC.
      *           IT LOADS THE SUBFILE A PAGE AT A TIME.
      *           IT USES THE STANDARD MESSAGE HANDLING PROGRAM.
      *           IT HAS STANDARD SUBFILE OPTION EDITING.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 11/07/94  LEANNE FEDOR
      *           A NEW FIELD, COST PER POUND, WAS ADDED TO THE
      *           FARM COST FILE.  IT WILL BE USED WITH GF FARMS.
      *
      * 04/21/95  LEANNE FEDOR
      *           CHANGED FARM SITE CODE FROM ALPHA TO NUMERIC.
      *
      * 07/23/02  LeAnne Fedor
      *           In preparation for allowing groups on a single farm to have different
      *           production phases, we changed the edits. The user can now enter either/both
      *           a cost-per-head and a cost-per-pound value.  Also, removed Production Phase
      *           from screen.
      *
      * 11/11/04  LeAnne Fedor
      *           Since we rewrote the EOP/Costing function in 2003, HPS logic only uses
      *           HSP028 records for BGF Farms and these BGF records have to have a 'cost per
      *           head' value. No HPS logic now uses the 'cost per pound' value from the
      *           HSP028 record.
      *           So, we have modified this screen/program to:
      *             1) only allow BGF farms
      *             2) require a 'cost per head' value to be entered
      *             3) never display/edit the 'cost per pound' field.
      *
      * 03/21/05  LeAnne Fedor
      *           Field "Cost per Head" changed from 5,2 to 7,2.
      *
      * 10/15/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD173    CF   E             WORKSTN
     F                                     SFILE(HP173S1:HDRRN1)
     F                                     INFDS(IOFEED)
      *
     FHSP009    IF   E           K DISK
      *    BUSINESS OFFICE
      *
      *
     FHSP018    IF   E           K DISK
      *    FARM SITE
      *
      *
     FHSL028A   IF   E           K DISK    RENAME(FCREC:FCRECA)
     F                                     INFDS(DBFEED)
      *  FARM COSTS
      *
      *
     FHSP028    UF A E           K DISK
      *  FARM COSTS
      *
      /EJECT
      ****************************************************************
      * TABLE AND ARRAY SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      *  STANDARD MESSAGE ARRAYS
      *---------------------------------------------------------------
      *
      /EJECT
      ****************************************************************
      * INPUT SPECIFICATIONS
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'. ALSO DEFINE CURSOR LOCATION FIELDS.
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      * STANDARD DATABASE FILE INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTDBFR (RECORD FORMAT: FDBCKD)
     D DBFEED        E DS                  EXTNAME(UTDBFR)
      *
      *---------------------------------------------------------------
      * STANDARD SUBFILE OPTION CONVERSION
      *---------------------------------------------------------------
     D                 DS
     D  DFOPT                  1      2
     D  WKOPT1                 1      1
     D  WKOPT2                 2      2
      *
      *---------------------------------------------------------------
      *  DATE FORMATS
      *---------------------------------------------------------------
      *
      * DATE IN MMDDYY FORMAT
      *
     D                 DS
     D  WKMDY                  1      6  0
     D  WKMM                   1      2  0
     D  WKDD                   3      4  0
     D  WKYY                   5      6  0
      *
      * DATE IN CCYYMMDD FORMAT
      *
     D                 DS
     D  WKCYMD                 1      8  0
     D  WKCEN                  1      2  0
     D  WKYER                  3      4  0
     D  WKMON                  5      6  0
     D  WKDAY                  7      8  0
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D CREATE          C                   CONST('CREATE')
     D REVISE          C                   CONST('REVISE')
     D DELETE          C                   CONST('DELETE')
     D VIEW            C                   CONST('VIEW  ')
     D SELECT          C                   CONST('SELECT')
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
     D UPDATE          C                   CONST('UPDATE')
      *
     D                 DS
     D  DUMMYD                 1      1
      *  THE PRECEDING DUMMY DATA STRUCTURE IS ONLY TO KEEP THE I-SPEC
      *  INFO FROM RUNNING OVER INTO THE 'CALC SPECS' ON THE COMPILE
      *  LISTING.  IT SERVES NO OTHER PURPOSE AND CAN BE DELETED
      *  AT ANY TIME!!!
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
      *
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     EDIT1         $EDIT1
      *
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      *
      /EJECT
      *----------------------------------------------------------------
      * SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      * VERIFY THAT THE BUSINESS OFFICE THE USER SELECTED STILL EXISTS.
      *
     C     DFFSBO        CHAIN     HSP009                             90
     C     *IN90         IFEQ      *ON                                          IF NOT FOUND
     C                   MOVEL     YES           NOTFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS00149'     MGID(E)
     C                   CLEAR                   MGW
     C                   MOVEA     DFFSBO        MGW(1)
     C                   MOVEA     MGW           MGDT(E)
     C                   ENDIF
     C                   ELSE
     C                   MOVEL(P)  BOBODS        DFBODS
     C                   ENDIF                                                  IF NOT FOUND
      *
      *  CLEAR/FILL THE SUBFILE
      *
     C                   EXSR      $CLR1
     C                   EXSR      $FRSH1
      *
      *  SET ROUTINE TO DISPLAY SCREEN
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      *  WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP173K1
     C                   WRITE     HP173EC
     C                   EXFMT     HP173C1
      *
      * SET THE 'RESET' FLAG TO NO.  THIS FLAG IS USED TO DETERMINE
      * WHETHER TO REPOSITION THE USER TO A PARTICULAR PLACE IN THE
      * SUBFILE (RESET=YES) OR TO PLACE THE USER AT THE BEGINNNING OF
      * THE SUBFILE (RESET=NO)
      *
     C                   MOVEL     NO            RESET
      *
      * RETRIEVE THE LOWEST SUBFILE RRN ON THE SCREEN FROM THE DSPF
      * FEEDBACK AREA (IDFLOW) AND MOVE IT TO A WORK FIELD.  THIS VALUE
      * WILL BE USED LATER TO CONTROL THE REPOSITIONING OF THE SUBFILE.
      *
     C                   Z-ADD     IDFLOW        WKFLOW
      *
      * CLEAR ALL MESSAGES
      *
     C                   EXSR      $CLMSG
      *
      * GET USER'S ENTRY AND RESET STANDARD RESPONSE
      *
     C                   SELECT
      *
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C                   MOVEL     '03'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN04         WHENEQ    *ON                                          F4-PROMPT
     C                   EXSR      $F4S1
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     *IN05         WHENEQ    *ON                                          F5-REFRESH
     C     MODE          IFEQ      REVISE
     C                   MOVEL     YES           RESET
     C                   ENDIF
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN06         WHENEQ    *ON                                          F6-CREATE
     C                   MOVEL     CREATE        MODE
     C                   MOVEL     CREATE        DFMODE
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN12         WHENEQ    *ON                                          F12-PREVIOUS
     C     MODE          IFEQ      REVISE
     C                   MOVEL     '12'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
     C                   ELSE
     C                   MOVEL     REVISE        MODE
     C                   MOVEL     REVISE        DFMODE
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C     *IN25         WHENEQ    *ON                                          F25-ROLLUP
     C                   EXSR      $LOAD1
     C                   MOVEL     SCRN1         ROUTNE
     C                   OTHER
      *
      * USER PRESSED 'ENTER'
      *
     C     MODE          IFEQ      REVISE                                       IF NOTHING
     C     HDRRN1        ANDEQ     0
     C                   MOVEL     EXIT          ROUTNE
     C                   ELSE
     C                   MOVEL     EDIT1         ROUTNE
     C                   ENDIF                                                  IF NOTHING
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * EDIT INPUT FIELDS FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDIT1        BEGSR
      *
      *
      * FIRST, EDIT ALL THE SELECTIONS ENTERED BY THE USER IN THE
      * SUBFILE OPTION FIELD, TO SEE THAT VALID SELECTIONS WERE INPUT
      *
     C     MODE          IFEQ      REVISE
     C                   EXSR      $EDOP1
     C                   ENDIF
      *
      * IF THERE ARE NO ERRORS IN THE SUBFILE OPTIONS ENTERED
      * BY THE USER, THEN READ THE SELECTED SUBFILE RECORDS AND PROCESS
      *
     C     ERROR         IFEQ      0                                            IF NO ERROR
     C                   EXSR      $PROC1
     C                   ENDIF                                                  IF NO ERROR
      *
      * IF THERE ARE NO ERRORS,
      *    IF THE USER IS IN REVISE MODE, EXIT THE PROGRAM
      *    IF THE USER IS IN CREATE MODE, GO TO REVISE MODE
      *
     C     ERROR         IFEQ      0                                            IF STILL OK
      *
     C     MODE          IFEQ      CREATE                                       IF CREATE
     C                   MOVEL     REVISE        MODE
     C                   MOVEL     REVISE        DFMODE
     C                   MOVEL     SET1          ROUTNE
     C                   ELSE
      *
     C                   SELECT
     C     RTNCD         WHENEQ    '12'
     C                   Z-ADD     WKFLOW        HDPAG1
     C                   MOVEL     SCRN1         ROUTNE
      *
     C     RTNCD         WHENEQ    '03'
     C                   MOVEL     EXIT          ROUTNE
      *
     C     DELFLG        WHENEQ    YES
     C                   MOVEL     NO            DELFLG
     C                   MOVEL     YES           RESET
     C                   MOVEL     SET1          ROUTNE
     C                   OTHER
      *
     C                   MOVEL     EXIT          ROUTNE
     C                   ENDSL
      *
     C                   ENDIF                                                  IF CREATE
     C                   ELSE
      *
      * IF THERE ARE SUBFILE ERRORS, SET THE SCREEN TO REDISPLAY
      *
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF                                                  IF STILL OK
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * CLEAR THE SUBFILE ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $CLR1         BEGSR
      *
     C                   Z-ADD     0             SVRRN1
      *
     C                   CLEAR                   HP173S1
     C                   SETON                                        83        SFLCLR
     C                   WRITE     HP173C1
     C                   SETOFF                                       818283
      *                                                    81=SFLDSP
      *                                                    82=SFLEND
      *                                                    83=SFLCLR
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * REFRESH/FILL THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $FRSH1        BEGSR
      *
      * SET INDICATORS TO CONTROL DSPF DISPLAY
      *
     C     MODE          IFEQ      CREATE
     C                   SETON                                        61
     C                   ELSE
     C                   SETON                                        60
     C                   ENDIF
      *
      *  IF THE FARM SITE RECORD HAS BEEN DELETED OUT FROM UNDER
      *  THE USER, THEN SET *IN90 BACK ON TO CONTROL AVAILABLE FUNCTION
      *  KEYS AND INPUT FIELDS.  (*IN90 WAS SET OFF ABOVE WHEN THE
      *  SUBFILE WAS CLEARED)
      *
     C     NOTFLG        IFEQ      YES                                          IF NOT FOUND
     C                   SETON                                        90
     C                   ENDIF                                                  IF NOT FOUND
      *
      * SET POSITION IN DATABASE FILE HSL028A-FARM COSTS
      *
     C     K1L028        SETLL     HSL028A
      *
      * THE FIELD 'RESET' IS A FLAG FIELD TO INDICATE WHETHER YOU ARE
      * ATTEMPTING TO REPOSITION THE USER CLOSE TO WHERE HE WAS IN THE
      * SUBFILE.
      * THE LOWEST SUBFILE RRN ON THE SCREEN FROM THE DSPF
      * FEEDBACK AREA (IDFLOW) WAS RETRIEVED EARLIER AND PUT IN WKFLOW.
      * ADD TO WKFLOW THE NUMBER OF LINES ON YOUR SUBFILE PAGE OR THE
      * NUMBER LESS 1 TO DETERMINE A SUBFILE RRN TO REPOSITION TO.
      * IF RESET IS 'NO', DON'T REPOSITION THE USER; JUST START OVER
      *
     C     RESET         IFEQ      YES
     C     WKFLOW        ADD       WKRLIN        MAXRRN
     C                   ELSE
     C                   Z-ADD     WKPLIN        MAXRRN
     C                   ENDIF
      *
      * LOAD THE SUBFILE UNTIL YOU HAVE THE REQUIRED NUMBER OF RECORDS
      * BY COMPARING THE HIDDEN RRN IN THE SUBFILE TO DESIRED MAXIMUM.
      * THE MAXIMUM WILL DEPEND ON WHETHER YOU ARE REPOSITIONING THE
      * SUBFILE OR NOT. STOP IF YOU GET TO THE END OF THE SUBFILE.
      *
     C     SVRRN1        DOUGE     MAXRRN
     C     *IN82         OREQ      *ON
     C                   EXSR      $LOAD1
     C                   ENDDO
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * LOAD THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $LOAD1        BEGSR
      *
     C                   Z-ADD     SVRRN1        HDRRN1
      *
      * SET THE COUNT OF RECORDS ON THE SUBFILE PAGE TO ZERO.
      * COUNT IS USED TO COUNT THE RECORDS WRITTEN TO THE SUBFILE.
      *
     C                   Z-ADD     0             COUNT             2 0
      *
      * FILL THE SUBFILE UNTIL THE END OF THE DATABASE FILE OR YOU
      * HAVE FILLED ALL THE LINES ON THE SUBFILE PAGE
      *
     C                   SETOFF                                       82
     C     *IN82         DOUEQ     *ON                                          DO FILL LOOP
     C     COUNT         ORGE      WKPLIN
      *
      * IF IN REVISE MODE, READ FARM COST RECORDS FOR THE FARM SITE
      * BUSINESS OFFICE AND THE EFFECTIVE DATE PASSED IN AS A PARM.
      * PLACE AN 'N' IN POSITION 53 TO PREVENT RECORD LOCKING
      *
     C     MODE          IFEQ      REVISE
     C     K1L028        READE     HSL028A                                82
     C                   ENDIF
      *
     C     *IN82         IFEQ      *OFF                                          IF FOUND
      *
     C                   ADD       1             COUNT
     C                   ADD       1             HDRRN1
     C                   MOVE      *BLANK        DFOPT
     C                   MOVE      *BLANK        DFACT
      *
      * IF IN REVISE MODE, FILL SUBFILE FIELDS FROM DATABASE FILE
      * AND RETRIEVE FARM NAME FROM THE FARM SITE MASTER
      *
     C     MODE          IFEQ      REVISE
     C                   Z-ADD     FCFSCD        DFFSCD
     C                   Z-ADD     FCHDRT        DFHDRT
     C                   EXSR      $FSNM
     C                   ELSE
      *
      * IF IN CREATE MODE, INITIALIZE SUBFILE FIELDS.
      *
     C                   Z-ADD     0             DFFSCD
     C                   MOVE      *BLANK        DFFSNM
     C                   Z-ADD     0             DFHDRT
     C                   ENDIF
      *
     C                   WRITE     HP173S1
     C                   SETON                                        81
      *
      * TO CONTROL THE PAGE OF THE SUBFILE TO DISPLAY, SET THE VALUE
      * FOR THE DSPF SFLRCDNBR FIELD TO BE EQUAL TO THE SFL HIDDEN RRN
      *
     C                   Z-ADD     HDRRN1        HDPAG1
      *
     C                   ENDIF                                                  IF FOUND
     C                   ENDDO                                                  DO FILL LOOP
      *
      * IF NO RECORDS WERE WRITTEN TO THE SUBFILE, THEN ISSUE
      * THE STANDARD ERROR MESSAGE OF NO DATA FOUND.
      *
     C     HDRRN1        IFEQ      0
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09002'     MGID(E)
     C                   ENDIF
     C                   ENDIF
      *
     C                   Z-ADD     HDRRN1        SVRRN1
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * READ CHANGED RECORDS IN SUBFILE AND
      * EDIT FOR VALID SUBFILE SELECTOR OPTIONS ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $EDOP1        BEGSR
      *
      * READ ALL THE CHANGED SUBFILE RECORDS EDITING FOR VALID SUBFILE
      * SELECTOR OPTIONS
      *
     C                   SETOFF                                       80
     C     *IN80         DOUEQ     *ON                                          DO READ C
     C                   READC     HP173S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
     C                   SETON                                        85
      *
      * SET OFF ERROR INDICATOR FOR SUBFILE SELECTOR
      *
     C                   SETOFF                                       30
      *
      * CONVERT OPTION USER ENTERED TO STANDARD FORMAT. FOR EXAMPLE,
      * A ' 1', '01', AND '1 ' MUST BE STANDARDIZED TO ' 1'.
      *
     C     WKOPT2        IFEQ      *BLANK                                       IF 2 = BLANK
     C                   MOVE      WKOPT1        WKOPT2
     C                   MOVE      *BLANKS       WKOPT1
     C                   ENDIF                                                  IF 2 = BLANK
      *
     C     WKOPT1        IFEQ      *ZEROS                                       IF 1 IS ZERO
     C                   MOVE      *BLANKS       WKOPT1
     C                   ENDIF                                                  IF 1 IS ZERO
      *
      * TEST FOR VALID SUBFILE OPTION ENTRY ON ALL CHANGED RECORDS
      *
     C     DFOPT         IFNE      ' 4'
     C     DFOPT         ANDNE     '  '
     C                   SETON                                        30
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09006'     MGID(E)
     C                   ENDIF
     C                   EXSR      $ERR1
     C                   ENDIF
      *
     C                   UPDATE    HP173S1
      *
      * SET OFF ERROR INDICATOR FOR SUBFILE SELECTOR
      *
     C                   SETOFF                                       30
     C                   ENDIF                                                  IF REC READ
     C                   ENDDO                                                  DO READ C
      * RESET MDT
     C                   SETOFF                                       85
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * READ AND EDIT CHANGED SUBFILE RECORDS FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $PROC1        BEGSR
      *
      * READ ALL THE CHANGED SUBFILE RECORDS PROCESSING THE SUBFILE
      * SELECTION
      *
     C                   SETOFF                                       80
     C     *IN80         DOUEQ     *ON                                          DO PROCESS
     C                   READC     HP173S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
     C                   SETON                                        85
      *
      * SET OFF THE ERROR INDICATORS
      *
     C                   SETOFF                                       303132
     C                   SETOFF                                       51
      *
     C     RTNCD         IFEQ      '00'                                         IF ENTER
     C                   MOVEL     NO            ERRFLG
      *
      *
      * Create mode
     C                   select
     C                   when      mode = create
     C                   if        dffscd <> 0 or dfhdrt <> 0
     C                   exsr      $edcr1
     C                   endif
      * Revise mode
     C                   when      mode = revise
     C                   exsr      $edrv1
     C                   endsl
      *
      * NOW, IF THE USER HAS ENTERED A SUBFILE OPTION, GO PERFORM
      * THE PROCESSING IF THERE ARE NO ERRORS.
      *
     C     ERRFLG        IFEQ      NO                                           IF DO CALLS
     C                   MOVE      *BLANKS       DFOPT
     C                   SETOFF                                       85
     C                   ENDIF                                                  IF DO CALLS
     C                   ENDIF                                                  IF ENTER
      *
      *  IF THERE WERE ANY ERRORS, SET ON THE SFLNXTCHG INDICATOR
      *
     C                   UPDATE    HP173S1
      *
      * SET OFF THE ERROR INDICATORS
      *
     C                   SETOFF                                       303132
     C                   SETOFF                                           51
      *
     C                   ENDIF                                                  IF REC READ
     C                   ENDDO                                                  DO PROCESS
      * SET MDT
     C                   SETOFF                                       85
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * RETRIEVE FARM SITE NAME
      *----------------------------------------------------------------
      *
     C     $FSNM         BEGSR
      *
     C     DFFSCD        CHAIN     HSP018                             91
     C     *IN91         IFEQ      *OFF
     C                   MOVEL     FSFSNM        DFFSNM
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     DFFSNM
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * Edit farm site (in create mode only)
      *---------------------------------------------------------------
      *
     C     $fscd         begsr
      *
     C                   move      *blank        dffsnm
      *
     C                   select
     C                   when      dffscd = 0
     C                   seton                                        31
     C                   movel     yes           errflg
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09001'     mgid(e)
     C                   exsr      $err1
     C                   endif
     C                   other
      *
     C     dffscd        chain     hsp018                             92
     C                   if        *in92 = *on                                  If bad farm
     C                   seton                                        31
     C                   movel     yes           errflg
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00131'     mgid(e)
     C                   clear                   mgw
     C                   move      dffscd        xxfscd
     C                   movea     xxfscd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   else
      *
     C                   move(p)   fsfsnm        dffsnm
      *
      * Must be in the business office that the user entered on
      * on the Work With.
      *
     C                   if        dffsbo <> fsfsbo                             If mismatch
     C                   seton                                        31
     C                   movel     yes           errflg
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00158'     mgid(e)
     C                   clear                   mgw
     C                   move      dffscd        xxfscd
     C                   movea     xxfscd        mgw(1)
     C                   movea     fsfsbo        mgw(6)
     C                   movea     dffsbo        mgw(11)
     C                   movea     mgw           mgdt(e)
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If mismatch
      *
      * Must be a BGF farm
      *
     C                   if        fsppcd <> 'BGF'                              If not BGF
     C                   seton                                        31
     C                   movel     yes           errflg
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09137'     mgid(e)
     C                   exsr      $err1
     C                   endif
     C                   endif                                                  If not BGF
     C                   endif                                                  If bad farm
     C                   endsl
      *
      * If farm is valid, check that the user has not already entered a
      * cost for this farm/date.
      *
     C     k2p028        chain(n)  hsp028                             92
     C                   if        *in92 = *off                                 If already
     C                   seton                                        31
     C                   movel     yes           errflg
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS00159'     mgid(e)
     C                   clear                   mgw
     C                   move      dffscd        xxfscd
     C                   movea     xxfscd        mgw(1)
     C                   movea     mgw           mgdt(e)
     C                   endif
     C                   endif                                                  If already
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * EDIT/WRITE RECORDS TO DATABASE FILE FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDCR1        BEGSR
      *
      * Validate:
      *   1) Farm Site
      *   2) Head rate
      *
     C                   exsr      $fscd
     C                   exsr      $hdrt
      *
      * WHEN A RECORD IS CREATED, THE CONSTANT '*CREATED' IS MOVED TO
      * A SUBFILE FIELD.  THIS IS DONE SO THAT IF SOME SUBFILE
      * RECORDS HAVE ERRORS AND THE SCREEN IS REDISPLAYED WITH ERROR
      * MESSAGES, THE USER WILL KNOW THAT THIS RECORD HAS BEEN CREATED
      * SUCCESSFULLY.  SETTING ON *IN62 WILL PROTECT THE FIELD.
      *
     C     ERRFLG        IFEQ      NO                                           IF NO ERROR
     C                   MOVEL     DFFSBO        FCFSBO
     C                   Z-ADD     DFFSCD        FCFSCD
     C                   Z-ADD     WKCYMD        FCEFDT
     C                   Z-ADD     DFHDRT        FCHDRT
     C                   Z-ADD     0             FCLBRT
      *
     C                   WRITE     FCREC
      *
     C                   MOVEL     '*CREATED'    DFACT
     C                   SETON                                        62
     C                   ENDIF                                                  IF NO ERROR
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * EDIT/UPDATE/DELETE A DATABASE RECORD FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $EDRV1        BEGSR
      *
      * CODE FOR REVISE MODE ONLY
      *
      * IF THE USER IS NOT DELETING THE RECORD, THEN VALIDATE HEAD RATE
      *
     C     DFOPT         IFNE      ' 4'
     C                   EXSR      $HDRT
     C                   ENDIF
      *
      * RETRIEVE RECORD AND LOCK BEFORE UPDATE/DELETE
      *
     C     ERRFLG        IFEQ      NO                                           IF NO ERROR
     C     K2P028        CHAIN     HSP028                             94
      *
      * WHEN A RECORD IS DELETED, THE CONSTANT '*DELETED' IS MOVED TO
      * THE SUBFILE FIELD.  THIS IS DONE SO THAT IF SOME SUBFILE
      * RECORDS HAVE ERRORS AND THE SCREEN IS REDISPLAYED WITH ERROR
      * MESSAGES, THE USER WILL KNOW THAT THIS RECORD HAS BEEN DELETED
      * SUCCESSFULLY.  *IN62 WILL PROTECT THE FIELDS.
      *
     C     *IN94         IFEQ      *OFF                                         IF FOUND
     C     DFOPT         IFEQ      ' 4'                                         IF DEL
     C                   MOVEL     YES           DELFLG
     C                   DELETE    FCREC
     C                   MOVEL     *BLANKS       DFOPT
     C                   MOVEL     '*DELETED'    DFACT
     C                   SETON                                        62
     C                   ELSE
      * NOT OPTION '4'
     C                   Z-ADD     DFHDRT        FCHDRT
     C                   UPDATE    FCREC
     C                   ENDIF                                                  IF DEL
     C                   ELSE
      *
      * THE RECORD HAS BEEN DELETED SINCE THIS PROGRAM RETRIEVED IT,
      * SO ISSUE THE STANDARD ERROR MESSAGE.
      *
     C     DFOPT         IFEQ      *BLANK
     C                   SETON                                        31
     C                   ELSE
     C                   SETON                                        30
     C                   ENDIF
      *
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09008'     MGID(E)
     C                   ENDIF
     C                   EXSR      $ERR1
     C                   ENDIF                                                  IF FOUND
     C                   ENDIF                                                  IF NO ERROR
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * Validate Head Rate
      *---------------------------------------------------------------
      *
      * Validations:
      *   1) required
      *   2) cannot be zero
      *
     C     $hdrt         begsr
      *
     C                   select
     C                   when      dfhdrt = 0
     C                   SETON                                        32
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09001'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
      *
     C                   when      dfhdrt < 0
     C                   SETON                                        32
     C                   MOVEL     YES           ERRFLG
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09000'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
     C                   endsl
      *
     C                   ENDSR
      /EJECT
      ****************************************************************
      * F4 PROMPT ON SCREEN 1
      ****************************************************************
      *
     C     $F4S1         BEGSR
      *
      * Farm site
     C                   select
     C                   when      fld = 'DFFSCD'
     C                   exsr      $rrn1
     C                   if        *in97 = *off and dfact = *blank              If ok
     C                             and dfmode = create
     C                   call      'HP5010'
     C                   parm      dffsbo        xxfsbo
     C                   parm      0             wkfscd
     C                   parm      *blank        xxfsnm
     C                   if        wkfscd <> 0
     C                   z-add     wkfscd        dffscd
     C                   movel     xxfsnm        dffsnm
     C                   endif
     C                   seton                                        8551
     C                   update    hp173s1
     C                   setoff                                       8551
      *
      * RESET THE SUBFILE RELATIVE RECORD NUMBER TO WHAT IT WAS BEFORE
      * THE USER TOOK F4 (IT WILL BE OUT-OF-SYNCH IF THE USER HAS
      * SELECTED A RECORD THUS CAUSING THE SUBFILE RECORD TO BE
      * RETRIEVED AND UPDATED.)  BUT, SET THE PAGE OF THE SUBFILE TO
      * BE DISPLAYED TO THE PAGE ON WHICH THE USER TOOK F4.
      *
     C                   Z-ADD     SVRRN1        HDRRN1
     C                   Z-ADD     HDRR1         HDPAG1
     C                   else
     C                   if        error < maxmsg
     C                   add       1             error
     C                   movel     'HS09011'     mgid(e)
     C                   endif
     C                   ENDIF                                                  If ok
     C                   OTHER
      *
      * F4 NOT VALID FOR THIS FIELD SO ISSUE MESSAGE
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09011'     MGID(E)
     C                   ENDIF
      *
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *****************************************************************
      * FLIP DATE TO MMDDYY
      *****************************************************************
      *
     C     $TOMDY        BEGSR
      *
     C                   Z-ADD     WKMON         WKMM
     C                   Z-ADD     WKDAY         WKDD
     C                   Z-ADD     WKYER         WKYY
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------------------------
      * SET THE SUBFILE TO REDISPLAY AT THE FIRST SCREEN THAT HAS ERRORS ON SCREEN 1
      *----------------------------------------------------------------------------------
      *
     C     $ERR1         BEGSR
      *
     C     ERROR         IFEQ      1
     C                   Z-ADD     HDRRN1        HDPAG1
     C                   ENDIF
      *
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * SET ON LR AND END JOB
      *---------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANKS       MGI
     C                   PARM      *BLANKS       MGD
     C                   PARM      *ZEROS        ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      ****************************************************************
      * FIND/RETRIEVE THE SUBFILE RECORD TO UPDATE
      * WHEN RETURNING FROM A SELECT PROGRAM ON SCREEN 1
      ****************************************************************
      *
      * HDRR1 IS THE HIDDEN FIELD ASSOCIATED WITH THE KEYWORD SFLCSRRRN
      * ON THE CONTROL RECORD IN THE DSPF.
      * HDRRN1 IS THE VALUE ASSOCIATED WITH THE KEYWORD 'KSFILE' IN
      * THE F-SPECS FOR THE WORKSTATION.
      *
     C     $RRN1         BEGSR
      *
     C                   SETOFF                                       97
      *
     C     HDRR1         IFNE      0
     C                   Z-ADD     HDRR1         HDRRN1
     C     HDRRN1        CHAIN     HP173S1                            97
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * INITIALIZATION SUBROUTINE
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * KEY FOR FILE HSL028A-FARM COSTS
      *
     C     K1L028        KLIST
     C                   KFLD                    XXFSBO
     C                   KFLD                    WKCYMD
      *
      * KEY FOR FILE HSP028-FARM COSTS
      *
     C     K2P028        KLIST
     C                   KFLD                    DFFSCD
     C                   KFLD                    WKCYMD
      *
      * PARM LISTS
      *
     C     *ENTRY        PLIST
     C     DFFSBO        PARM                    XXFSBO
     C                   PARM                    XXEFDT            8
     C                   PARM                    RTNCD
      *
      * GLOBAL DEFINES
      *
     C                   MOVEL     *BLANK        PGM              10            USED IN MSG
     C                   MOVEL     *BLANK        MSGFL            10            USED IN MSG
     C                   MOVEL     *BLANK        ROUTNE            6            ROUTINE
     C                   Z-ADD     0             MAXRRN            4 0          REPOSITION
     C                   MOVEL     NO            RESET             1            REPOSITION
     C                   MOVEL     NO            ERRFLG            1
     C                   MOVEL     NO            NOTFLG            1
     C                   MOVEL     NO            DELFLG            1
     C     *LIKE         DEFINE    DFMODE        MODE                           SFL POSITION
     C     *LIKE         DEFINE    IDFLOW        WKFLOW                         SFL POSITION
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
     C     *LIKE         DEFINE    HDRRN1        SVRRN1                         F4-PROMPT
      *
      * ALPHA PARM FIELDS USED IN CALLS TO/FROM OTHER PROGRAMS
      *
     C     *LIKE         DEFINE    DFFSBO        XXFSBO
     C     *LIKE         DEFINE    DFFSNM        XXFSNM
     C                   MOVE      *BLANK        XXFSCD            5
      *
      * NUMERIC PARM FIELDS USED IN CALLS TO/FROM OTHER PROGRAMS
      *
     C     *LIKE         DEFINE    DFFSCD        WKFSCD
      *
      * FLIP THE USER-SELECTED DATE FROM ALPHA CCYYMMDD TO:
      *   A) NUMERIC MMDDYY FOR DISPLAY PURPOSES, AND
      *   B) NUMERIC CCMMDDYY FOR ACCESSING THE DATABASE
      *
     C                   MOVEL     XXEFDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         DFMDY
      *
      * TO SUPPORT F5-REFRESH, LOGIC REQUIRES THE NUMBER OF LINES ON
      * THE SUBFILE PAGE AND ALSO THE NUMBER OF LINES LESS 1.  BY
      * SETTING THESE VALUES UP AS CONSTANT WORK FIELDS, THE PROCESSING
      * LOGIC CAN BE STANDARDIZED BETWEEN PROGRAMS.
      *
     C                   Z-ADD     11            WKPLIN            2 0          SFLPAG(0010)
     C     WKPLIN        SUB       1             WKRLIN            2 0          SFLPAG - 1
      *
      * ALWAYS BRING THE SCREEN UP IN REVISE MODE--EVEN IF THERE ARE
      * NOT ANY RECORDS TO REVISE.
      *
     C                   MOVEL     REVISE        MODE
     C                   MOVEL     REVISE        DFMODE
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
     C                   ENDSR
      /EJECT
