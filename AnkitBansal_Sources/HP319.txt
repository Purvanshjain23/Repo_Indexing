      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      Hog Production System
      * PROGRAM:     Cost Movements: Costed Movements
      * PROGRAMMER:  LeAnne Fedor
      * CREATED:     03/11/03
      *
      * FUNCTION:    This function costs each movement in the workfile.
      *
      ********************************************************************************************
      * MODIFICATIONS:
      ********************************************************************************************
      * DATE      PROGRAMMER
      *
      * 12/03/03  LeAnne Fedor
      *           Added logic for: feed pounds, cull sale head/pounds, DOA/KOA/Daily dead head/
      *           pounds, inventory adjustment head, wean weight.
      *
      * 12/13/04  LeAnne Fedor
      *           Several of our support files have been renamed to be the 'workfiles'
      *           that they truly are:
      *                          HSP113  became HSP352
      *                          HSP117  became HSP360
      *                          HSP119  became HSP361
      *            These workfiles are cleared at the beginning of each run. So, they hold
      *            only period data.
      /EJECT
      ********************************************************************************************
      * FILE SPECIFICATIONS
      ********************************************************************************************
      *
      *
     Fhsp047    uf a e           k disk
      *    Group period
      *
      *
     Fhsp352    if   e           k disk
      *    Origin groups
      *
      *
     Fhsp360    if   e           k disk
      *    Origin group inventory
      *
      *
     Fhsl118b   if   e           k disk    rename(cmrec:cmrecb)
      *    Costed movements
      *
      *
     Fhsl118c   if   e           k disk    rename(cmrec:cmrecc)
      *    Costed movements
      *
      *
     Fhsp118    o    e           k disk
      *    Costed movements
      *
      *
     Fhsp361    if   e           k disk
      *    Origin group summarized expenses
      *
      *
     Fhsl120b   if   e           k disk    rename(cxrec:cxrecb)
      *    Costed movements expense codes
      *
      *
     Fhsl120c   if   e           k disk    rename(cxrec:cxrecc)
      *    Costed movements expense codes
      *
      *
     Fhsp120    o    e           k disk
      *    Costed movements expense codes
      *
      *
     Fhsp362    if   e           k disk
      *    Workfile-Driver file of Movement Detail Records
      *
      *
     Fhsl362a   if   e           k disk    rename(wdrec:wdreca)
      *    Workfile-Driver file of Movement Detail Records
      *
      /EJECT
      ****************************************************************
      * DEFINITION SPECIFICATIONS
      ****************************************************************
      *
      *
      ****************************************************************
      * CONSTANTS
      ****************************************************************
      *
     D yes             c                   'Y'
     D no              c                   'N'
      *
      ****************************************************************
      * ARRAYS AND TABLES
      ****************************************************************
      *
      ****************************************************************
      * STANDALONE FIELDS
      ****************************************************************
      *
      *
      * Workfields for date manipulation
      *
     D wkdt            s                   like(wdrcdt)
     D wkisodate       s               D   datfmt(*iso)
     D wkisorcdt       s               D   datfmt(*iso)
     D wkisoopdt       s               D   datfmt(*iso)
      *
      *
      * Workfields
      *
     D wkpday          s                   like(cmorpday)
      *
     D wkwwhd          s                   like(gptdwwhd)
     D wkwwlb          s                   like(gptdwwlb)
     D wkavglb         s              7  2
      *
     D wkdays          s              3  0
     D wkppcd          s                   like(wdorppcd)
     D wkam            s                   like(cmam)
      *
     D wkinhd          s                   like(oiinhd)
     D wkortiam        s                   like(cmam)
     D wkortoam        s                   like(cmam)
     D wkorslam        s                   like(cmam)
      *
     D wkbgam          s                   like(cmam)
     D wkoraibgam      s                   like(cmam)
     D wkoraobgam      s                   like(cmam)
      *
      *           Expense dollars
      *
     D wkexam          s                   like(cmam)
     D wkexam118       s                   like(cmam)
     D wkoraiexam      s                   like(cmam)
     D wkoraoexam      s                   like(cmam)
      *
      *           Feed dollars
      *
     D wkfdam          s                   like(cmam)
     D wkoraifdam      s                   like(cmam)
     D wkoraofdam      s                   like(cmam)
      *
      *           Feed pounds
      *
     D wkfdlb          s                   like(cmfdlb)
     D wkoraifdlb      s                   like(cmfdlb)
     D wkoraofdlb      s                   like(cmfdlb)
      *
      *           Cull sale dollars
      *
     D wkcsam          s                   like(cmam)
     D wkoraicsam      s                   like(cmam)
     D wkoraocsam      s                   like(cmam)
      *
      *           Cull sale head
      *
     D wkcshd          s                   like(cmhd)
     D wkoraicshd      s                   like(cmhd)
     D wkoraocshd      s                   like(cmhd)
      *
      *           Cull sale pounds
      *
     D wkcslb          s                   like(cmcslb)
     D wkoraicslb      s                   like(cmcslb)
     D wkoraocslb      s                   like(cmcslb)
      *
      *           DOA head
      *
     D wkdohd          s                   like(cmhd)
     D wkoraidohd      s                   like(cmhd)
     D wkoraodohd      s                   like(cmhd)
      *
      *           DOA pounds
      *
     D wkdolb          s                   like(cmdolb)
     D wkoraidolb      s                   like(cmdolb)
     D wkoraodolb      s                   like(cmdolb)
      *
      *           KOA head
      *
     D wkkohd          s                   like(cmhd)
     D wkoraikohd      s                   like(cmhd)
     D wkoraokohd      s                   like(cmhd)
      *
      *           KOA pounds
      *
     D wkkolb          s                   like(cmkolb)
     D wkoraikolb      s                   like(cmkolb)
     D wkoraokolb      s                   like(cmkolb)
      *
      *           Daily dead head
      *
     D wkddhd          s                   like(cmhd)
     D wkoraiddhd      s                   like(cmhd)
     D wkoraoddhd      s                   like(cmhd)
      *
      *           Daily dead pounds
      *
     D wkddlb          s                   like(cmddlb)
     D wkoraiddlb      s                   like(cmddlb)
     D wkoraoddlb      s                   like(cmddlb)
      *
      *           Inventory adjustment head
      *
     D wkiahd          s                   like(cmhd)
     D wkoraiiahd      s                   like(cmhd)
     D wkoraoiahd      s                   like(cmhd)
      *
      ****************************************************************
      * DATA STRUCTURES
      ****************************************************************
      *
      *---------------------------------------------------------------
      * Standard program status data structure
      *---------------------------------------------------------------
      *    externally defined as UTPGFR (record format: PGMDSR)
     D pgmds         esds                  extname(utpgfr)
      *
      *
      *---------------------------------------------------------------
      * Local data area.
      *---------------------------------------------------------------
      *
     Dlda             uds                  dtaara(*lda)
     D  ldbpdt                 1     08  0
     D  ldepdt                 9     16  0
     D  ldper                 17     18  0
     D  ldeffl                19     19
     D  ldccyy                20     23  0
     D  ldbmdy                60     66  0
     D  ldemdy                70     76  0
      *
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ***************************************************************************************
      * MAINLINE
      ***************************************************************************************
      *
      * Start processing with the first day of the current period and continue
      * through the last day of the current period.  For each date, process the
      * BGF movements first followed by the Nursery and then the Grow Finish.
      *
     C                   z-add     ldbpdt        wkdt
      *
      *
     C                   dow       wkdt <= ldepdt                               Main do loop
      *
     C                   move      'BGF  '       wkppcd
     C                   exsr      $movements
      *
     C                   move      'NUR  '       wkppcd
     C                   exsr      $movements
      *
     C                   move      'GF   '       wkppcd
     C                   exsr      $movements
      *
     C                   move      wkdt          wkisodate
     C     wkisodate     adddur    1:*days       wkisodate
     C                   move      wkisodate     wkdt
     C                   enddo                                                  Main do loop
      *
      *
      * EOF Processing
     C                   seton                                        lr
      /EJECT
      *-------------------------------------------------------------------------------------
      * Process each movement for the specified date/phase from the workfile
      *-------------------------------------------------------------------------------------
      *
     C     $movements    begsr
      *
     C     key01         setll     hsp362
      *
     C                   dou       *in91 = *on                                  Do movements
     C     key01         reade     hsp362                                 91
     C                   if        *in91 = *off                                 If read
      *
      * Before going into the 'costing' logic, do the Wean Weight logic..
      * which has nothing to do with costing but logically fits into this
      * program.
     C                   if        wdmtcd = 'T' and wddnppcd <> 'BGF  '
     C                   select
     C                   when      wdorppcd = 'BGF  '
     C                   exsr      $bgfwean
     C                   other
     C                   exsr      $nurgfwean
     C                   endsl
     C                   endif
      *
      *
      * Now, proceed with the 'costing' logic.
      * First, retrieve origin group data.
      *
     C     key02         chain     hsp352                             92
     C                   if        *in92 = *on                                  If no origin
     C                   else
      *
     C                   z-add     0             wkexam118
     C                   z-add     0             wkortiam
     C                   z-add     0             wkortoam
     C                   z-add     0             wkorslam
      * Pig days
     C                   z-add     0             wkpday
      * BGF
     C                   z-add     0             wkoraibgam
     C                   z-add     0             wkoraobgam
     C                   z-add     0             wkbgam
      * Feed
     C                   z-add     0             wkoraifdam
     C                   z-add     0             wkoraofdam
      *
     C                   z-add     0             wkoraifdlb
     C                   z-add     0             wkoraofdlb
      * Cull sales
     C                   z-add     0             wkoraicsam
     C                   z-add     0             wkoraocsam
      *
     C                   z-add     0             wkoraicshd
     C                   z-add     0             wkoraocshd
      *
     C                   z-add     0             wkoraicslb
     C                   z-add     0             wkoraocslb
      * DOA
     C                   z-add     0             wkoraidohd
     C                   z-add     0             wkoraodohd
      *
     C                   z-add     0             wkoraidolb
     C                   z-add     0             wkoraodolb
      * KOA
     C                   z-add     0             wkoraikohd
     C                   z-add     0             wkoraokohd
      *
     C                   z-add     0             wkoraikolb
     C                   z-add     0             wkoraokolb
      * Daily dead
     C                   z-add     0             wkoraiddhd
     C                   z-add     0             wkoraoddhd
      *
     C                   z-add     0             wkoraiddlb
     C                   z-add     0             wkoraoddlb
      *
      * Inventory adjustment
     C                   z-add     0             wkoraiiahd
     C                   z-add     0             wkoraoiahd
      *
      * Now, if the origin group is a BGF group, you will ultimately
      * make the cost calc for this movement detail line using the
      * 'rate per head' just retrieved from the Origin Group Data file.
      *
      * But, if the origin group is not a BGF group, you will need:
      *        1) the dollars that transferred INTO the origin group
      *        2) the dollars that transferred INTO the origin group
      *        3) the dollars that transferred OUT OF the origin group
      *        4) the dollars sold OUT OF the origin group for MRKTS and FPS
      *           prior to the Received Date of the movement detail line you are
      *           processing/costing.
      *        5) And, after costing the movement, cost/write Expense Code records
      *
     C                   select
     C                   when      ogppcd = 'BGF  '
     C                   z-add     oghdrt        cmhdrt
     C                   exsr      $wrt118
     C                   other
      *
     C                   exsr      $pigdays
     C                   exsr      $alreadyin
     C                   exsr      $alreadyout
     C                   exsr      $rates
     C                   exsr      $expenses
     C                   exsr      $wrt118
     C                   endsl
      *
     C                   endif                                                  If no origin
      *
     C                   endif                                                  If read
     C                   enddo                                                  Do movements
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------------
      * Calculate Pig Days
      *-------------------------------------------------------------------------------
      *
     C     $pigdays      begsr
      *
     C                   if        ogopdt <> 0 and wdrcdt <> 0                  If dates
      *
      * Find the elapsed days between the origin group's open date on the received
      * date of the movement.
      *
     C     *iso          move      wdrcdt        wkisorcdt
     C     *iso          move      ogopdt        wkisoopdt
     C     wkisorcdt     subdur    wkisoopdt     wkdays:*d
      *
      * Multiply the 'head on this movement' times the elapsed days to get
      * pig days for this record.
      *
     C     wkdays        mult      wdhd          wkpday
      *
     C                   endif                                                  If dates
      *
     C                   endsr
      /EJECT
      *-------------------------------------------------------------------------------
      * Retrieve dollars transferred INTO this origin group prior to the received date
      *-------------------------------------------------------------------------------
      *
     C     $alreadyin    begsr
      *
     C     wdorhgsn      setll     hsl118c
      *
     C                   dou       *in94 = *on                                  Do prior in
     C     wdorhgsn      reade     hsl118c                                94
     C                   if        *in94 = *off and cmrcdt <= wdrcdt            If not eof
      *
     C                   if        cmmtcd = 'T'
     C                   add       cmam          wkortiam
     C                   endif
      * BGF
     C                   add       cmbgam        wkoraibgam
      * Feed
     C                   add       cmfdam        wkoraifdam
     C                   add       cmfdlb        wkoraifdlb
      * Cull sales
     C                   add       cmcsam        wkoraicsam
     C                   add       cmcshd        wkoraicshd
     C                   add       cmcslb        wkoraicslb
      * DOA
     C                   add       cmdohd        wkoraidohd
     C                   add       cmdolb        wkoraidolb
      * KOA
     C                   add       cmkohd        wkoraikohd
     C                   add       cmkolb        wkoraikolb
      * Daily dead
     C                   add       cmddhd        wkoraiddhd
     C                   add       cmddlb        wkoraiddlb
      *
      * Inventory adjustment
      *
     C                   add       cmiahd        wkoraiiahd
     C                   endif                                                  If not eof
     C                   enddo                                                  Do prior in
      *
     C                   endsr
      /EJECT
      *--------------------------------------------------------------------------------------
      * Retrieve amounts that have already gone out of this group.
      *--------------------------------------------------------------------------------------
      *
      * Retrieve amounts OUT of this origin group prior to this detail record we
      * are processing/costing. The catch here is, there may be several moves out of this
      * same origin group on the same 'received date'.  So, we want to accumulate amounts
      * from ALL the existing 'costed' records out of this origin group that have
      * a date on/before the date of the record we are currently costing.
      *
     C     $alreadyout   begsr
      *
     C     wdorhgsn      setll     hsl118b
      *
     C                   dou       *in94 = *on                                  Do prior out
     C     wdorhgsn      reade     hsl118b                                94
     C                   if        *in94 = *off and cmrcdt <= wdrcdt            If not eof
      *
     C                   add       cmbgam        wkoraobgam
      * Feed
     C                   add       cmfdam        wkoraofdam
     C                   add       cmfdlb        wkoraofdlb
      * Cull sales
     C                   add       cmcsam        wkoraocsam
     C                   add       cmcshd        wkoraocshd
     C                   add       cmcslb        wkoraocslb
      * DOA
     C                   add       cmdohd        wkoraodohd
     C                   add       cmdolb        wkoraodolb
      * KOA
     C                   add       cmkohd        wkoraokohd
     C                   add       cmkolb        wkoraokolb
      * Daily dead
     C                   add       cmddhd        wkoraoddhd
     C                   add       cmddlb        wkoraoddlb
      *
      * Inventory adjustments
      *
     C                   add       cmiahd        wkoraoiahd
      *
     C                   select
     C                   when      cmmtcd = 'T'
     C                   add       cmam          wkortoam
      *
     C                   when      cmmtcd = 'S'
     C                   add       cmam          wkorslam
     C                   endsl
      *
     C                   endif                                                  If not eof
     C                   enddo                                                  Do prior out
      *
     C                   endsr
      /EJECT
      *-----------------------------------------------------------------------
      * Calculate per head rates that you will need for record costing
      *-----------------------------------------------------------------------
      *
     C     $rates        begsr
      *
      * Calculate a 'total cost' rate.
      *
     C                   exsr      $totalrate
      *
      *
      * Calculate the total values still remaining with the origin group for
      * each of the following:
      *
      *    Feed
     C                   eval      wkfdam = wkoraifdam - wkoraofdam + ogftam
     C                   eval      wkfdlb = wkoraifdlb - wkoraofdlb + ogfdlb
      *    BGF
     C                   eval      wkbgam = wkoraibgam - wkoraobgam
      *    Cull sale
     C                   eval      wkcsam = wkoraicsam - wkoraocsam + ogcuam
     C                   eval      wkcslb = wkoraicslb - wkoraocslb + ogculvlb
     C                   eval      wkcshd = wkoraicshd - wkoraocshd + ogculvhd
      *    DOA
     C                   eval      wkdohd = wkoraidohd - wkoraodohd + ogdoahd
     C                   eval      wkdolb = wkoraidolb - wkoraodolb + ogdoalb
      *    KOA
     C                   eval      wkkohd = wkoraikohd - wkoraokohd + ogkoahd
     C                   eval      wkkolb = wkoraikolb - wkoraokolb + ogkoalb
      *    Daily dead
     C                   eval      wkddhd = wkoraiddhd - wkoraoddhd + ogddhd
     C                   eval      wkddlb = wkoraiddlb - wkoraoddlb + ogddlb
      *
      *    Inventory adjustment
      *
     C                   eval      wkiahd = wkoraiiahd - wkoraoiahd + ogiahd
      *
      *
      * Initialize all rates.
      *
     C                   z-add     0             cmbghdrt
     C                   z-add     0             cmfdhdrt
     C                   z-add     0             cmfdhdlb
     C                   z-add     0             cmcshdrt
     C                   z-add     0             cmcshdlb
     C                   z-add     0             cmcshdhd
     C                   z-add     0             cmdohdhd
     C                   z-add     0             cmdohdlb
     C                   z-add     0             cmkohdhd
     C                   z-add     0             cmkohdlb
     C                   z-add     0             cmddhdhd
     C                   z-add     0             cmddhdlb
     C                   z-add     0             cmiahdhd
      *
      *
      * Many rates are calculated using Inventory Head. So, if the
      * Inventory Head is not zero, calculate 'rates' per inventory head
      * using Inventory Head and the remaining values you just calculated above.
      *
     C                   if        wkinhd > 0                                   If inventory
      * Feed
     C     wkfdam        div(h)    wkinhd        cmfdhdrt
     C     wkfdlb        div(h)    wkinhd        cmfdhdlb
      *
      * BGF
     C     wkbgam        div(h)    wkinhd        cmbghdrt
      *
      * Cull sale
      *
     C     wkcsam        div(h)    wkinhd        cmcshdrt
     C     wkcshd        div(h)    wkinhd        cmcshdhd
      *
      * DOA/KOA/Daily dead/Inventory adjustment
      *
     C     wkdohd        div(h)    wkinhd        cmdohdhd
     C     wkkohd        div(h)    wkinhd        cmkohdhd
     C     wkddhd        div(h)    wkinhd        cmddhdhd
     C     wkiahd        div(h)    wkinhd        cmiahdhd
     C                   endif                                                  If inventory
      *
      *
      * Calulate the 'pounds' rates for Cull Sales/DOA/KOA/Daily Dead
      *
     C                   if        wkcshd <> 0
     C     wkcslb        div(h)    wkcshd        cmcshdlb
     C                   endif
      *
     C                   if        wkdohd <> 0
     C     wkdolb        div(h)    wkdohd        cmdohdlb
     C                   endif
      *
     C                   if        wkkohd <> 0
     C     wkkolb        div(h)    wkkohd        cmkohdlb
     C                   endif
      *
     C                   if        wkddhd <> 0
     C     wkddlb        div(h)    wkddhd        cmddhdlb
     C                   endif
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Calculate the total 'cost per head' rate value.
      *----------------------------------------------------------------
      *
     C     $totalrate    begsr
      *
      * Calculate the total dollars of cost that are still remaining with the
      * origin group.
     C                   eval      wkam = wkortiam + ogftam + ogxtam
     C                                    - ogcuam - wkortoam - wkorslam
      *
      * Retrieve the Origin Group Inventory Head for this Movement/Line Number
      * and calculate the 'per head transfer rate'.
      *
     C                   z-add     0             wkinhd
     C     key03         chain     hsp360                             92
     C                   if        *in92 = *off and oiinhd > 0                  If hit
     C                   z-add     oiinhd        wkinhd
     C     wkam          div(h)    wkinhd        cmhdrt
     C                   endif                                                  If hit
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Write a Costed Movement record
      *----------------------------------------------------------------
      *
     C     $wrt118       begsr
      *
     C                   z-add     ldccyy        cmacyr
     C                   z-add     ldper         cmacpe
      *
     C                   move      wdmtcd        cmmtcd
     C                   z-add     wdrcdt        cmrcdt
     C                   z-add     wdmvsn        cmmvsn
     C                   z-add     wdlnno        cmlnno
     C                   z-add     wdhd          cmhd
     C                   z-add     wdlb          cmlb
     C                   z-add     wdcrlb        cmcrlb
      *
     C                   move      wdorppcd      cmorppcd
     C                   z-add     wdorfscd      cmorfscd
     C                   z-add     wdorhgsn      cmorhgsn
      *
     C                   move      wddnppcd      cmdnppcd
     C                   z-add     wddnfscd      cmdnfscd
     C                   z-add     wddnhgsn      cmdnhgsn
      *
     C                   z-add     oiinhd        cmorinhd
     C                   z-add     wkortoam      cmortoam
     C                   z-add     wkortiam      cmortiam
     C                   z-add     wkorslam      cmorslam
      *
      * Pig days
     C                   z-add     wkpday        cmorpday
      * BGF
     C                   z-add     wkoraibgam    cmoraibgam
     C                   z-add     wkoraobgam    cmoraobgam
      *
      * Expenses
     C                   z-add     ogxtam        cmorxtam
     C                   z-add     wkexam118     cmexam
      *
      * Feed
     C                   z-add     ogftam        cmorftam
     C                   z-add     wkoraifdam    cmoraifdam
     C                   z-add     wkoraofdam    cmoraofdam
      *
     C                   z-add     ogfdlb        cmorfdlb
     C                   z-add     wkoraifdlb    cmoraifdlb
     C                   z-add     wkoraofdlb    cmoraofdlb
      *
      * Cull sales
     C                   z-add     ogcuam        cmorcuam
     C                   z-add     wkoraicsam    cmoraicsam
     C                   z-add     wkoraocsam    cmoraocsam
      *
     C                   z-add     ogculvhd      cmorcshd
     C                   z-add     wkoraicshd    cmoraicshd
     C                   z-add     wkoraocshd    cmoraocshd
      *
     C                   z-add     ogculvlb      cmorcslb
     C                   z-add     wkoraicslb    cmoraicslb
     C                   z-add     wkoraocslb    cmoraocslb
      * DOA
     C                   z-add     ogdoahd       cmordohd
     C                   z-add     wkoraidohd    cmoraidohd
     C                   z-add     wkoraodohd    cmoraodohd
      *
     C                   z-add     ogdoalb       cmordolb
     C                   z-add     wkoraidolb    cmoraidolb
     C                   z-add     wkoraodolb    cmoraodolb
      * KOA
     C                   z-add     ogkoahd       cmorkohd
     C                   z-add     wkoraikohd    cmoraikohd
     C                   z-add     wkoraokohd    cmoraokohd
      *
     C                   z-add     ogkoalb       cmorkolb
     C                   z-add     wkoraikolb    cmoraikolb
     C                   z-add     wkoraokolb    cmoraokolb
      * Daily dead
     C                   z-add     ogddhd        cmorddhd
     C                   z-add     wkoraiddhd    cmoraiddhd
     C                   z-add     wkoraoddhd    cmoraoddhd
      *
     C                   z-add     ogddlb        cmorddlb
     C                   z-add     wkoraiddlb    cmoraiddlb
     C                   z-add     wkoraoddlb    cmoraoddlb
      *
      * Inventory adjustment
      *
     C                   z-add     ogiahd        cmoriahd
     C                   z-add     wkoraiiahd    cmoraiiahd
     C                   z-add     wkoraoiahd    cmoraoiahd
      *
      *
      * Using the 'per head rate' and number of head received at the destination,
      * calculate the 'amount' of TOTAL dollars that will transfer on this record.
      *
     C     cmhdrt        mult(h)   cmhd          cmam
      *
      *
      * For origin BGF records,
      *    plop the amount value into the field BGF amount
      * For origin Nursery and Grow Finish groups only, determine if you
      *    need to override the transfer amount just calculated.
      *
     C                   select
     C                   when      cmorppcd = 'BGF  '
     C                   z-add     cmam          cmbgam
      *
     C                   other
     C                   exsr      $override
     C                   endsl
      *
     C                   write     cmrec
     C                   clear                   cmrec
      *
     C                   endsr
      /EJECT
      *------------------------------------------------------------------------------------
      * For origin Nursery and Grow Finish groups only, determine if you need to override
      *------------------------------------------------------------------------------------
      *
     C     $override     begsr
      *
      * Using the 'per head rate' and number of head received at the destination,
      * calculate various values that represent the quantites transferring on this
      * record.
      *
      * BGF dollars
      *
     C     cmbghdrt      mult(h)   cmhd          cmbgam
      *
      * Feed
      *
     C     cmfdhdrt      mult(h)   cmhd          cmfdam
     C     cmfdhdlb      mult(h)   cmhd          cmfdlb
      *
      * Cull sale
      *
     C     cmcshdrt      mult(h)   cmhd          cmcsam
     C     cmcshdhd      mult(h)   cmhd          cmcshd
     C     cmcshdlb      mult(h)   cmcshd        cmcslb
      *
      * DOA
     C     cmdohdhd      mult(h)   cmhd          cmdohd
     C     cmdohdlb      mult(h)   cmdohd        cmdolb
      *
      * KOA
     C     cmkohdhd      mult(h)   cmhd          cmkohd
     C     cmkohdlb      mult(h)   cmkohd        cmkolb
      *
      * Daily dead
      *
     C     cmddhdhd      mult(h)   cmhd          cmddhd
     C     cmddhdlb      mult(h)   cmddhd        cmddlb
      *
      * Inventory adjustments
      *
     C     cmiahdhd      mult(h)   cmhd          cmiahd
      *
      *
      * Now, override these values you just calculated with the value left when:
      *    the Inventory Head and Head fields are equal (ie: this is the last
      *    movement out of the group)
      *
     C                   select
     C                   when      cmhd <> 0 and cmhd = cmorinhd
     C                   z-add     wkam          cmam
     C                   z-add     wkbgam        cmbgam
     C                   z-add     wkfdam        cmfdam
     C                   z-add     wkfdlb        cmfdlb
     C                   z-add     wkcsam        cmcsam
     C                   z-add     wkcslb        cmcslb
     C                   z-add     wkcshd        cmcshd
     C                   z-add     wkdohd        cmdohd
     C                   z-add     wkdolb        cmdolb
     C                   z-add     wkkohd        cmkohd
     C                   z-add     wkkolb        cmkolb
     C                   z-add     wkddlb        cmddlb
     C                   z-add     wkddhd        cmddhd
     C                   z-add     wkiahd        cmiahd
     C                   other
      *
      * Override the calculated value with the value left when:
      *    the calculated value is more than the value left to transfer
      *
      * Total cost
     C                   if        cmam > wkam
     C                   z-add     wkam          cmam
     C                   endif
      * BGF dollars
     C                   if        cmbgam > wkbgam
     C                   z-add     wkbgam        cmbgam
     C                   endif
      *
      * Feed
     C                   select
     C                   when      cmfdam = 0
     C                   z-add     0             cmfdlb
      *
     C                   when      cmfdam > wkfdam
     C                   z-add     wkfdam        cmfdam
     C                   z-add     wkfdlb        cmfdlb
     C                   other
      *
     C                   if        cmfdlb > wkfdlb
     C                   z-add     wkfdlb        cmfdlb
     C                   endif
     C                   endsl
      *
      * Cull sale
     C                   select
     C                   when      cmcsam = 0
     C                   z-add     0             cmcshd
     C                   z-add     0             cmcslb
      *
     C                   when      cmcsam > wkcsam
     C                   z-add     wkcsam        cmcsam
     C                   z-add     wkcshd        cmcshd
     C                   z-add     wkcslb        cmcslb
      *
     C                   when      cmcshd >= wkcshd
     C                   z-add     wkcshd        cmcshd
     C                   z-add     wkcslb        cmcslb
     C                   other
      *
     C                   if        cmcslb > wkcslb
     C                   z-add     wkcslb        cmcslb
     C                   endif
     C                   endsl
      *
     C                   if        cmcshd = 0
     C                   z-add     0             cmcslb
     C                   endif
      *
      *
      * DOA
     C                   select
     C                   when      cmdohd = 0
     C                   z-add     0             cmdolb
      *
     C                   when      cmdohd >= wkdohd
     C                   z-add     wkdohd        cmdohd
     C                   z-add     wkdolb        cmdolb
     C                   other
      *
     C                   if        cmdolb > wkdolb
     C                   z-add     wkdolb        cmdolb
     C                   endif
     C                   endsl
      *
      * KOA
     C                   select
     C                   when      cmkohd = 0
     C                   z-add     0             cmkolb
      *
     C                   when      cmkohd >= wkkohd
     C                   z-add     wkkohd        cmkohd
     C                   z-add     wkkolb        cmkolb
     C                   other
      *
     C                   if        cmkolb > wkkolb
     C                   z-add     wkkolb        cmkolb
     C                   endif
     C                   endsl
      *
      * Daily dead
     C                   select
     C                   when      cmddhd = 0
     C                   z-add     0             cmddlb
      *
     C                   when      cmddhd >= wkddhd
     C                   z-add     wkddhd        cmddhd
     C                   z-add     wkddlb        cmddlb
     C                   other
      *
     C                   if        cmddlb > wkddlb
     C                   z-add     wkddlb        cmddlb
     C                   endif
     C                   endsl
      *
      * Inventory adjustments
      *
     C                   if        cmiahd > wkiahd
     C                   z-add     wkiahd        cmiahd
     C                   endif
      *
     C                   endsl
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Expenses
      *----------------------------------------------------------------
      *
      * For this movement/line number, you have to write a record for each
      * Expense Code that exists for the origin group/received date.
      * In this record, you will calculate the transfer amount for the Expense
      * Code. You will have to find the dollars already in/out for the code...
      * just like you did in earlier logic for feed/cull sales, etc..
      *
     C     $expenses     begsr
      *
      * Process each Expense Code record that exists for the origin group/received date.
      *
      *
     C     key02         setll     hsp361
      *
     C                   dou       *in90 = *on                                  Do codes
     C     key02         reade     hsp361                                 90
     C                   if        *in90 = *off                                 If read
      *
      * Retrieve all dollars of this expense code that have already gone out
      * of this group.
      *
     C                   z-add     0             wkoraoexam
     C     key04         setll     hsl120b
      *
     C                   dou       *in94 = *on                                  Do prior out
     C     key04         reade     hsl120b                                94
     C                   if        *in94 = *off and cxrcdt <= wdrcdt            If not eof
     C                   add       cxexam        wkoraoexam
     C                   endif                                                  If not eof
     C                   enddo                                                  Do prior out
      *
      *
      * Retrieve all dollars of this expense code that have already come into
      * of this group.
      *
     C                   z-add     0             wkoraiexam
     C     key04         setll     hsl120c
      *
     C                   dou       *in94 = *on                                  Do prior out
     C     key04         reade     hsl120c                                94
     C                   if        *in94 = *off and cxrcdt <= wdrcdt            If not eof
     C                   add       cxexam        wkoraiexam
     C                   endif                                                  If not eof
     C                   enddo                                                  Do prior out
      *
     C                   exsr      $wrt120
      *
     C                   endif                                                  If read
     C                   enddo                                                  Do codes
      *
     C                   endsr
      /EJECT
      *----------------------------------------------------------------
      * Write a Costed Movement Expense Code record
      *----------------------------------------------------------------
      *
     C     $wrt120       begsr
      *
     C                   z-add     ldccyy        cxacyr
     C                   z-add     ldper         cxacpe
      *
     C                   z-add     wdmvsn        cxmvsn
     C                   z-add     wdlnno        cxlnno
     C                   move      wdmtcd        cxmtcd
     C                   z-add     wdrcdt        cxrcdt
     C                   z-add     wdhd          cxhd
      *
     C                   move      wdorppcd      cxorppcd
     C                   z-add     wdorfscd      cxorfscd
     C                   z-add     wdorhgsn      cxorhgsn
      *
     C                   move      wddnppcd      cxdnppcd
     C                   z-add     wddnfscd      cxdnfscd
     C                   z-add     wddnhgsn      cxdnhgsn
      *
     C                   z-add     oiinhd        cxorinhd
     C                   move      osexcd        cxexcd
     C                   z-add     osxtam        cxorexam
      *
     C                   z-add     wkoraiexam    cxoraiexam
     C                   z-add     wkoraoexam    cxoraoexam
      *
      * Calculate the total dollars of this expense code that are still
      * remaining with the origin group.
      *
     C                   eval      wkexam = wkoraiexam - wkoraoexam + osxtam
      *
      * Calculate the 'per head rate'
      *
     C                   z-add     0             cxexhdrt
     C                   if        wkinhd > 0
     C     wkexam        div(h)    wkinhd        cxexhdrt
     C                   endif
      *
      * If 'per head rate' came out zero....the value was millicents, then put all the
      * remaining 'amount' into this record.  Otherwise,
      * calculate the 'amount' of expense code dollars that will transfer on this record
      * using the 'per head expense rate' and number of head received at the destination,
      *
     C                   select
     C                   when      cxexhdrt = 0
     C                   z-add     wkexam        cxexam
     C                   other
      *
     C     cxexhdrt      mult(h)   wdhd          cxexam
     C                   if        cxexam > wkexam
     C                   z-add     wkexam        cxexam
     C                   endif
     C                   endsl
      *
     C                   add       cxexam        wkexam118
      *
     C                   write     cxrec
     C                   clear                   cxrec
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------------
      * Wean Weight logic when origin group is a BGF group
      *----------------------------------------------------------------------------------------
      *
     C     $bgfwean      begsr
      *
     C                   z-add     wdhd          wkwwhd
     C                   z-add     wdlb          wkwwlb
      *
     C                   exsr      $upd047
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------------------------------
      * Wean Weight logic when origin group is a Nursery or Grow Finish
      *----------------------------------------------------------------------------------------
      *
     C     $nurgfwean    begsr
      *
     C                   z-add     0             wkavglb
      *
      * Retrieve most recent group/period record for origin group to get
      * latest to-date wean weight values and calculate an average weight.
      *
     C     wdorhgsn      chain     hsp047                             92
     C                   if        *in92 = *off and gptdwwhd <> 0               If hit
     C     gptdwwlb      div(h)    gptdwwhd      wkavglb
     C                   endif                                                  If hit
      *
      * Multiply the head on this movement times the Average Weight to get
      * wean weight pounds. Also, move the Head on this record into the
      * wean weight head workfield.
      *
     C     wdhd          mult(h)   wkavglb       wkwwlb
     C                   z-add     wdhd          wkwwhd
      *
     C                   exsr      $upd047
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Write/update HSP047
      *----------------------------------------------------------------
      *
     C     $upd047       begsr
      *
      * You need the 'cumulative' values for this group. SO, find the latest
      * Group Period record for the destination group. If you get a hit, add
      * the above head/pounds together with the record values to get the
      * 'cumulative' totals.
      *
     C     wddnhgsn      chain     hsp047                             92
     C                   if        *in92 = *off
     C                   add       gptdwwhd      wkwwhd
     C                   add       gptdwwlb      wkwwlb
     C                   endif
      *
      * Now, you have the total cumulative head/pounds in your workfields. Using the
      * year/period from the Costed Movement record, see if you already have a
      * year/period record for this group. If you have a record already, update it
      * with your new cumulative values; otherwise, write a record for group/year/period.
      *
     C     key05         chain     hsp047                             92
     C                   if        *in92 = *off
     C                   z-add     wkwwhd        gptdwwhd
     C                   z-add     wkwwlb        gptdwwlb
     C                   update    gprec
     C                   else
      *
     C                   z-add     ldccyy        gpacyr
     C                   z-add     ldper         gpacpe
     C                   z-add     wddnhgsn      gphgsn
     C                   z-add     wkwwhd        gptdwwhd
     C                   z-add     wkwwlb        gptdwwlb
     C                   write     gprec
     C                   endif
      *
     C                   endsr
      /eject
      *----------------------------------------------------------------
      * Initialization subroutine
      *----------------------------------------------------------------
      *
     C     *inzsr        begsr
      *
      * Key lists
      *
     C     key01         klist
     C                   kfld                    wkdt
     C                   kfld                    wkppcd
      *
     C     key02         klist
     C                   kfld                    wdorhgsn
     C                   kfld                    wdrcdt
      *
     C     key03         klist
     C                   kfld                    wdorhgsn
     C                   kfld                    wdmvsn
     C                   kfld                    wdlnno
      *
     C     key04         klist
     C                   kfld                    wdorhgsn
     C                   kfld                    osexcd
      *
     C     key05         klist
     C                   kfld                    wddnhgsn
     C                   kfld                    ldccyy
     C                   kfld                    ldper
      *
      *
     C                   endsr
      /EJECT
