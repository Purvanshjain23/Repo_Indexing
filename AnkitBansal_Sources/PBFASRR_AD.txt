// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBFASRR
// ?Date: 14.08.2025 Time: 03:47:42
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// WRK.TPM Facility Type = PAR.TPM Facility Type
WRK.TPM_Facility_Type = PAR.TPM_Facility_Type;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

// PGM.*Scan limit = CND.999999
PGM.*Scan_limit = 999999;

//?***** Change Log and Comments
DO;

//?** E002874 LJB 11/08/2013
//?** Change from Popup window to 132 char display. Change to filter by
//?** any of the fields across the display
ENDDO;

//?USER: Load subfile record from DBF record

//?* first time calcs
CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.TPM Facility Type = PAR.TPM Facility Type
CTL.TPM_Facility_Type = PAR.TPM_Facility_Type;

// WRK.TPM Facility Type = PAR.TPM Facility Type
WRK.TPM_Facility_Type = PAR.TPM_Facility_Type;

// CTL.TPM Location Code = PAR.TPM Location Code
CTL.TPM_Location_Code = PAR.TPM_Location_Code;

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

//?* Filter on Facility Type if passed in
CASE;

// IF CTL.TPM Facility Type NE WRK.Blank for 12          USR
IF CTL.TPM_Facility_Type <> WRK.Blank_for_12_USR;

CASE;

// IF DB1.TPM Facility Type NE CTL.TPM Facility Type
IF DB1.TPM_Facility_Type <> CTL.TPM_Facility_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

//?* Filter on Address
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Description 33 usr CAPS is Entered
IF CTL.Description_33_usr_CAPS <> *BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.TPM_Address_1);
PARAMETER(33);
PARAMETER(1);
PARAMETER(CTL.Description_33_usr_CAPS);
PARAMETER(33);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?* Filter on City
CASE;

// IF PGM.*Record selected is *YES
IF PGM.*Record_selected = 'Y';

CASE;

// IF CTL.Description 30 usr CAPS is Entered
IF CTL.Description_30_usr_CAPS <> *BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.TPM_City);
PARAMETER(30);
PARAMETER(1);
PARAMETER(CTL.Description_30_usr_CAPS);
PARAMETER(30);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Process subfile control

//?*CMD Keys
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.TPM Facility Type
IF PGM.*Cursor_field = CTL.TPM_Facility_Type;

// Call program SEL TPM Location Type  SL.
CALL PROGRAM(SEL TPM Location Type  SL) ('PBHESRR');
PARAMETER(CTL.TPM_Facility_Type);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?* Reload display if Facility Type Changes             E002874
CASE;

// IF CTL.TPM Facility Type NE WRK.TPM Facility Type
IF CTL.TPM_Facility_Type <> WRK.TPM_Facility_Type;

// WRK.TPM Facility Type = CTL.TPM Facility Type
WRK.TPM_Facility_Type = CTL.TPM_Facility_Type;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?* Reload display if Facility Type Changes             E002874
CASE;

// IF CTL.TPM Location Code NE WRK.TPM Location Code
IF CTL.TPM_Location_Code <> WRK.TPM_Location_Code;

CASE;

// IF CTL.TPM Facility Type is Not Entered
IF CTL.TPM_Facility_Type = *BLANK;

// Send error message - 'TPM Facility Type is required for this type of filtering.'
ERROR(USR4666);
MSGPARM(CTL.TPM_Facility_Type);

ENDIF;

ENDIF;

//?* Reposition if CTL city changes                      E002874
CASE;

// IF CTL.Description 30 usr CAPS NE LCL.Description 30 usr CAPS
IF CTL.Description_30_usr_CAPS <> LCL.Description_30_usr_CAPS;

// LCL.Description 33 usr CAPS = CTL.Description 33 usr CAPS
LCL.Description_33_usr_CAPS = CTL.Description_33_usr_CAPS;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?* Reposition if CTL address changes                   E002874
CASE;

// IF CTL.Description 33 usr CAPS NE LCL.Description 33 usr CAPS
IF CTL.Description_33_usr_CAPS <> LCL.Description_33_usr_CAPS;

// LCL.Description 33 usr CAPS = CTL.Description 33 usr CAPS
LCL.Description_33_usr_CAPS = CTL.Description_33_usr_CAPS;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process selected line

// PAR.TPM Facility Type = RCD.TPM Facility Type
PAR.TPM_Facility_Type = RCD.TPM_Facility_Type;

// PAR.TPM Location Code = RCD.TPM Location Code
PAR.TPM_Location_Code = RCD.TPM_Location_Code;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

RETURN;

ENDIF;

