// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDN4PFR
// ?Date: 14.08.2025 Time: 12:04:11
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?ARS039 - 11/21/96 - S. Schertz
//?Print *HOLD* for customers who have the Order Entry Hold Flag in their
//?customer record set to 'Y'.
EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('A/R');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(TOP_Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Record selection processing

//?Per project ARS019 this program has been changed to use customer name
//?  Name as the primary file.  A new program has been created over customer.
CASE;

// IF DB1.Ship To Customer EQ DB1.A/R Customer Number
IF DB1.Ship_To_Customer = DB1.AR_Customer_Number;

EXECUTE FUNCTION(RTV Alpha Age by Inv   RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1416400;
PARAMETER(PAR.Company_Number);
PARAMETER(DB1.AR_Customer_Number);
PARAMETER(PAR.Age_Due_Current_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_1_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_2_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_3_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_4_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_5_W_O_CB);
PARAMETER(PAR.Date_of_Last_Payment);
PARAMETER(PAR.Date_of_Highest_A_R_Bal);
PARAMETER(PAR.Amount_of_Highest_A_R_Bal);
PARAMETER(PAR.Date_of_Last_Aging);
PARAMETER(PAR.MTD_Invoices_Paid);
PARAMETER(PAR.YTD_Invoices_Paid);
PARAMETER(PAR.MTD_Days_Paid);
PARAMETER(PAR.YTD_Days_Paid);
PARAMETER(PAR.YTD_Sales_Invoiced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

// PAR.USR Tot. Due W/O CB = CND.Zero
PAR.USR_Tot_Due_W_O_CB = *ZERO;

// PAR.USR Tot. Due W/O CB = PAR.Age $ Due-Current-W/O CB + PAR.Age $ Due-Aging 1-W
PAR.USR_Tot_Due_W_O_CB = PAR.Age_Due_Current_W_O_CB + PAR.Age_Due_Aging_1_W_O_CB;

// PAR.USR Tot. Due W/O CB = PAR.Age $ Due-Aging 2-W/O CB + PAR.USR Tot. Due W/O CB
PAR.USR_Tot_Due_W_O_CB = PAR.Age_Due_Aging_2_W_O_CB + PAR.USR_Tot_Due_W_O_CB;

// PAR.USR Tot. Due W/O CB = PAR.Age $ Due-Aging 3-W/O CB + PAR.USR Tot. Due W/O CB
PAR.USR_Tot_Due_W_O_CB = PAR.Age_Due_Aging_3_W_O_CB + PAR.USR_Tot_Due_W_O_CB;

// PAR.USR Tot. Due W/O CB = PAR.Age $ Due-Aging 4-W/O CB + PAR.USR Tot. Due W/O CB
PAR.USR_Tot_Due_W_O_CB = PAR.Age_Due_Aging_4_W_O_CB + PAR.USR_Tot_Due_W_O_CB;

// PAR.USR Tot. Due W/O CB = PAR.Age $ Due-Aging 5-W/O CB + PAR.USR Tot. Due W/O CB
PAR.USR_Tot_Due_W_O_CB = PAR.Age_Due_Aging_5_W_O_CB + PAR.USR_Tot_Due_W_O_CB;

//?Only Print Customers that have a balance due
CASE;

// IF PAR.USR Tot. Due W/O CB is Zero
IF PAR.USR_Tot_Due_W_O_CB = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Only Print Customers that have a balance due
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*YES
PGM.*Record_selected = 'Y';

ENDIF;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(PAR.Company_Number);
PARAMETER(TOP_Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Aging Heading Info RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1355876;
PARAMETER(PAR.Company_Number);
PARAMETER(*ZERO);
PARAMETER(TOP_Time_of_Last_Aging);
PARAMETER(TOP_Date_of_Last_Aging);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(RTV A/R Aging info     RT) TYPE(RTVOBJ) FILE(CAASREP)          AC1110493;
PARAMETER(PAR.Company_Number);
PARAMETER(WRK.A_R_Aging_Days_1);
PARAMETER(WRK.A_R_Aging_Days_2);
PARAMETER(WRK.A_R_Aging_Days_3);
PARAMETER(WRK.A_R_Aging_Days_4);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// TOP.Company Number = PAR.Company Number
TOP_Company_Number = PAR.Company_Number;

// TOP.USR Age Heading A = WRK.A/R Aging Days - 1
TOP_USR_Age_Heading_A = WRK.A_R_Aging_Days_1;

// TOP.USR Age Heading B = TOP.USR Age Heading A + CON.1
TOP_USR_Age_Heading_B = TOP_USR_Age_Heading_A + 1;

// TOP.USR Age Heading C = WRK.A/R Aging Days - 2
TOP_USR_Age_Heading_C = WRK.A_R_Aging_Days_2;

// TOP.USR Age Heading D = TOP.USR Age Heading C + CON.1
TOP_USR_Age_Heading_D = TOP_USR_Age_Heading_C + 1;

// TOP.USR Age Heading E = WRK.A/R Aging Days - 3
TOP_USR_Age_Heading_E = WRK.A_R_Aging_Days_3;

// TOP.USR Age Heading F = TOP.USR Age Heading E + CON.1
TOP_USR_Age_Heading_F = TOP_USR_Age_Heading_E + 1;

// TOP.USR Age Heading G = WRK.A/R Aging Days - 4
TOP_USR_Age_Heading_G = WRK.A_R_Aging_Days_4;

// TOP.USR Age Heading H = WRK.A/R Aging Days - 4
TOP_USR_Age_Heading_H = WRK.A_R_Aging_Days_4;

//?USER: Print required level headings

// SUPPRESSED PRINT Customer Name header format

CASE;

IF NEW Ship_To_Customer;
EXECUTE FUNCTION(RTV Alpha Age by Inv   RT) TYPE(RTVOBJ) FILE(ARBCREP)          AC1416400;
PARAMETER(PAR.Company_Number);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(PAR.Age_Due_Current_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_1_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_2_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_3_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_4_W_O_CB);
PARAMETER(PAR.Age_Due_Aging_5_W_O_CB);
PARAMETER(CUR.Date_of_Last_Payment);
PARAMETER(CUR.Date_of_Highest_A_R_Bal);
PARAMETER(CUR.Amount_of_Highest_A_R_Bal);
PARAMETER(PAR.Date_of_Last_Aging);
PARAMETER(PAR.MTD_Invoices_Paid);
PARAMETER(PAR.YTD_Invoices_Paid);
PARAMETER(PAR.MTD_Days_Paid);
PARAMETER(PAR.YTD_Days_Paid);
PARAMETER(CUR.YTD_Sales_Invoiced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program CLC Avg Days to Pay    XF.
CALL PROGRAM(CLC Avg Days to Pay    XF) ('PDNAXFR');
PARAMETER(PAR.MTD_Invoices_Paid);
PARAMETER(PAR.YTD_Invoices_Paid);
PARAMETER(PAR.MTD_Days_Paid);
PARAMETER(PAR.YTD_Days_Paid);
PARAMETER(CUR.MTD_Avg_Days_to_Pay);
PARAMETER(CUR.YTD_Avg_Days_to_Pay);

EXECUTE FUNCTION(RTV Cust Age Inv Nite  RT) TYPE(RTVOBJ) FILE(CAEOREP)          AC1419872;
PARAMETER(PAR.Company_Number);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(CUR.Credit_Contact_Name);
PARAMETER(CUR.Credit_Contact_Telephone);
PARAMETER(CUR.Credit_Contact_Fax_Number);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Credit Limits,Name RT) TYPE(RTVOBJ) FILE(CABBREP)          AC1470848;
PARAMETER(CUR.Parent_Customer);
PARAMETER(CUR.USR_Parent_Name);
PARAMETER(WRK.Numeric_Field_Not_Needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(WRK.TXT_field_not_needed);
PARAMETER(CUR.Parent_Credit_Limit);
PARAMETER(WRK.Numeric_Field_Not_Needed);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?Print *HOLD* if customer order entry hold flag is yes
CASE;

// IF DB1.Order Entry Hold is New Order Hold
IF DB1.Order_Entry_Hold = 'Y';

// WRK.USR Flag 1 = CND.Yes
WRK.USR_Flag_1 = 'Y';

//?Print *HOLD* if customer order entry hold flag is yes
// IF *OTHERWISE
IF *OTHERWISE;

// WRK.USR Flag 1 = CND.No
WRK.USR_Flag_1 = 'N';

ENDIF;

// Print Ship To Customer header format
PRINT Ship To Customer header format;

ENDIF;

//?PRTOBJ calls after print of detail format

//?Embedded PRTOBJ : PRT Nite Age by Inv    PO
EXECUTE FUNCTION(PRT Nite Age by Inv    PO) TYPE(PRTOBJ);
PARAMETER(PAR.Company_Number);
PARAMETER(CUR.AR_Customer_Number);
PARAMETER(PAR.USR_Age_Current_B);
PARAMETER(PAR.USR_Age_Value_1_B);
PARAMETER(PAR.USR_Age_Value_2_B);
PARAMETER(PAR.USR_Age_Value_3_B);
PARAMETER(PAR.USR_Age_Value_4_B);
PARAMETER(PAR.USR_Age_Value_5_B);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Process after print of detail format

// WRK.USR Tot. Current = PAR.USR Age Current B + WRK.USR Tot. Current
WRK.USR_Tot_Current = PAR.USR_Age_Current_B + WRK.USR_Tot_Current;

// WRK.USR Tot. Age 1 = PAR.USR Age Value 1 B + WRK.USR Tot. Age 1
WRK.USR_Tot_Age_1 = PAR.USR_Age_Value_1_B + WRK.USR_Tot_Age_1;

// WRK.USR Tot. Age 2 = PAR.USR Age Value 2 B + WRK.USR Tot. Age 2
WRK.USR_Tot_Age_2 = PAR.USR_Age_Value_2_B + WRK.USR_Tot_Age_2;

// WRK.USR Tot. Age 3 = PAR.USR Age Value 3 B + WRK.USR Tot. Age 3
WRK.USR_Tot_Age_3 = PAR.USR_Age_Value_3_B + WRK.USR_Tot_Age_3;

// WRK.USR Tot. Age 4 = PAR.USR Age Value 4 B + WRK.USR Tot. Age 4
WRK.USR_Tot_Age_4 = PAR.USR_Age_Value_4_B + WRK.USR_Tot_Age_4;

// WRK.USR Tot. Age 5 = PAR.USR Age Value 5 B + WRK.USR Tot. Age 5
WRK.USR_Tot_Age_5 = PAR.USR_Age_Value_5_B + WRK.USR_Tot_Age_5;

// PAR.USR Age Current B = CND.equal to zero
PAR.USR_Age_Current_B = *ZERO;

// PAR.USR Age Value 1 B = CND.equal to zero
PAR.USR_Age_Value_1_B = *ZERO;

// PAR.USR Age Value 2 B = CND.equal to zero
PAR.USR_Age_Value_2_B = *ZERO;

// PAR.USR Age Value 3 B = CND.equal to zero
PAR.USR_Age_Value_3_B = *ZERO;

// PAR.USR Age Value 4 B = CND.equal to zero
PAR.USR_Age_Value_4_B = *ZERO;

// PAR.USR Age Value 5 B = CND.equal to zero
PAR.USR_Age_Value_5_B = *ZERO;

//?USER: Print required level totals

CASE;

IF NEW Ship_To_Customer;
// Print Ship To Customer totals format
PRINT Ship To Customer totals format;

ENDIF;

// SUPPRESSED PRINT Customer Name totals format

//?USER: On print of final totals format

// CUR.USR Tot. Current = WRK.USR Tot. Current
CUR.USR_Tot_Current = WRK.USR_Tot_Current;

// CUR.USR Tot. Age 1 = WRK.USR Tot. Age 1
CUR.USR_Tot_Age_1 = WRK.USR_Tot_Age_1;

// CUR.USR Tot. Age 2 = WRK.USR Tot. Age 2
CUR.USR_Tot_Age_2 = WRK.USR_Tot_Age_2;

// CUR.USR Tot. Age 3 = WRK.USR Tot. Age 3
CUR.USR_Tot_Age_3 = WRK.USR_Tot_Age_3;

// CUR.USR Tot. Age 4 = WRK.USR Tot. Age 4
CUR.USR_Tot_Age_4 = WRK.USR_Tot_Age_4;

// CUR.USR Tot. Age 5 = WRK.USR Tot. Age 5
CUR.USR_Tot_Age_5 = WRK.USR_Tot_Age_5;

// CUR.USR Tot. Due with CB = CUR.USR Tot. Current + CUR.USR Tot. Age 1
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Current + CUR.USR_Tot_Age_1;

// CUR.USR Tot. Due with CB = CUR.USR Tot. Age 2 + CUR.USR Tot. Due with CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_2 + CUR.USR_Tot_Due_with_CB;

// CUR.USR Tot. Due with CB = CUR.USR Tot. Age 3 + CUR.USR Tot. Due with CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_3 + CUR.USR_Tot_Due_with_CB;

// CUR.USR Tot. Due with CB = CUR.USR Tot. Age 4 + CUR.USR Tot. Due with CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_4 + CUR.USR_Tot_Due_with_CB;

// CUR.USR Tot. Due with CB = CUR.USR Tot. Age 5 + CUR.USR Tot. Due with CB
CUR.USR_Tot_Due_with_CB = CUR.USR_Tot_Age_5 + CUR.USR_Tot_Due_with_CB;

//?Current Percentage  of Total
CASE;

// IF CUR.USR Tot. Current is Not Zero
IF CUR.USR_Tot_Current <> *ZERO;

// PAR.Tot. Current % Calc = CUR.USR Tot. Current / CUR.USR Tot. Due with CB *Round
PAR.Tot_Current_Calc = CUR.USR_Tot_Current / CUR.USR_Tot_Due_with_CB 'H';

// CUR.Tot. Current % = PAR.Tot. Current % Calc * CON.100 *Rounded
CUR.Tot_Current = PAR.Tot_Current_Calc * 100 'H';

ENDIF;

//?Age 1 Percentage  of Total
CASE;

// IF CUR.USR Tot. Age 1 is Not Zero
IF CUR.USR_Tot_Age_1 <> *ZERO;

// PAR.Tot. Age 1 % Calc = CUR.USR Tot. Age 1 / CUR.USR Tot. Due with CB *Rounded
PAR.Tot_Age_1_Calc = CUR.USR_Tot_Age_1 / CUR.USR_Tot_Due_with_CB 'H';

// CUR.Tot. Age 1 % = PAR.Tot. Age 1 % Calc * CON.100 *Rounded
CUR.Tot_Age_1 = PAR.Tot_Age_1_Calc * 100 'H';

ENDIF;

//?Age 2 Percentage  of Total
CASE;

// IF CUR.USR Tot. Age 2 is Not Zero
IF CUR.USR_Tot_Age_2 <> *ZERO;

// PAR.Tot. Age 2 % Calc = CUR.USR Tot. Age 2 / CUR.USR Tot. Due with CB *Rounded
PAR.Tot_Age_2_Calc = CUR.USR_Tot_Age_2 / CUR.USR_Tot_Due_with_CB 'H';

// CUR.Tot. Age 2 % = PAR.Tot. Age 2 % Calc * CON.100 *Rounded
CUR.Tot_Age_2 = PAR.Tot_Age_2_Calc * 100 'H';

ENDIF;

//?Age 3 Percentage  of Total
CASE;

// IF CUR.USR Tot. Age 3 is Not Zero
IF CUR.USR_Tot_Age_3 <> *ZERO;

// PAR.Tot. Age 3 % Calc = CUR.USR Tot. Age 3 / CUR.USR Tot. Due with CB *Rounded
PAR.Tot_Age_3_Calc = CUR.USR_Tot_Age_3 / CUR.USR_Tot_Due_with_CB 'H';

// CUR.Tot. Age 3 % = PAR.Tot. Age 3 % Calc * CON.100 *Rounded
CUR.Tot_Age_3 = PAR.Tot_Age_3_Calc * 100 'H';

ENDIF;

//?Age 4 Percentage  of Total
CASE;

// IF CUR.USR Tot. Age 4 is Not Zero
IF CUR.USR_Tot_Age_4 <> *ZERO;

// PAR.Tot. Age 4 % Calc = CUR.USR Tot. Age 4 / CUR.USR Tot. Due with CB *Rounded
PAR.Tot_Age_4_Calc = CUR.USR_Tot_Age_4 / CUR.USR_Tot_Due_with_CB 'H';

// CUR.Tot. Age 4 % = PAR.Tot. Age 4 % Calc * CON.100 *Rounded
CUR.Tot_Age_4 = PAR.Tot_Age_4_Calc * 100 'H';

ENDIF;

//?Age 5 Percentage  of Total
CASE;

// IF CUR.USR Tot. Age 5 is Not Zero
IF CUR.USR_Tot_Age_5 <> *ZERO;

// PAR.Tot. Age 5 % Calc = CUR.USR Tot. Age 5 / CUR.USR Tot. Due with CB *Rounded
PAR.Tot_Age_5_Calc = CUR.USR_Tot_Age_5 / CUR.USR_Tot_Due_with_CB 'H';

// CUR.Tot. Age 5 % = PAR.Tot. Age 5 % Calc * CON.100 *Rounded
CUR.Tot_Age_5 = PAR.Tot_Age_5_Calc * 100 'H';

ENDIF;

