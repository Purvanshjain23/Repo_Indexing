// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POG9E1R
// ?Date: 14.08.2025 Time: 03:37:14
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('PKGUPD');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// PGM.*Program mode = PAR.*Program mode
PGM.*Program_mode = PAR.*Program_mode;

//?USER: Initialize detail screen (new record)

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Condition Desc. 2  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_2_USR = RTVCND(DTL.Record_Status);

// DTL.Condition Desc. 5  USR = Condition name of DTL.Pckg Type Class
DTL.Condition_Desc_5_USR = RTVCND(DTL.Pckg_Type_Class);

// DTL.Pre-printed Bag Sts = CND.No
DTL.Pre_printed_Bag_Sts = 'N';

//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Rtv Description       RT) TYPE(RTVOBJ) FILE(POCAREP)           AC1651957;
PARAMETER(DB1.Company_Number);
PARAMETER(DB1.Pckg_Item_Type);
PARAMETER(DTL.Condition_Desc_1_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.Condition Desc. 2  USR = Condition name of DTL.Record Status
DTL.Condition_Desc_2_USR = RTVCND(DTL.Record_Status);

// DTL.USR Weight, 9.2 = DB1.Pckg Tare Weight
DTL.USR_Weight_9_2 = DB1.Pckg_Tare_Weight;

EXECUTE FUNCTION(Rtv Pckng Reprtng Grp RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1652186;
PARAMETER(DB1.Pckg_Reporting_Group);
PARAMETER(DTL.Pckg_Group_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


// DTL.Condition Desc. 5  USR = Condition name of DTL.Pckg Type Class
DTL.Condition_Desc_5_USR = RTVCND(DTL.Pckg_Type_Class);

EXECUTE FUNCTION(Rtv Pckgng Grp Desc   RT) TYPE(RTVOBJ) FILE(POCCREP)           AC1652185;
PARAMETER(DB1.Pckg_Group_Category);
PARAMETER(DTL.Text_USR_40);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF DTL.Pre-printed Bag Sts EQ WRK.Blank for 4           USR
IF DTL.Pre_printed_Bag_Sts = WRK.Blank_for_4_USR;

// DTL.Pre-printed Bag Sts = CND.No
DTL.Pre_printed_Bag_Sts = 'N';

ENDIF;

//?USER: Validate detail screen fields

EXECUTE FUNCTION(Rtv Description       RT) TYPE(RTVOBJ) FILE(POCAREP)           AC1651957;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Pckg_Item_Type);
PARAMETER(DTL.Condition_Desc_1_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF DTL.Condition Desc. 1  USR EQ WRK.BLANK 1               USR
IF DTL.Condition_Desc_1_USR = WRK.BLANK_1_USR;

// Send error message - 'Packaging Type not found.'
ERROR(USR3168);

ENDIF;

EXECUTE FUNCTION(Rtv Pckng Reprtng Grp RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1652186;
PARAMETER(DTL.Pckg_Reporting_Group);
PARAMETER(DTL.Pckg_Group_Description);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF DTL.Pckg Group Description EQ WRK.BLANK 1               USR
IF DTL.Pckg_Group_Description = WRK.BLANK_1_USR;

// Send error message - 'Packaging Reporting Group not found.'
ERROR(USR3171);
MSGPARM(DTL.Pckg_Reporting_Group);

ENDIF;

EXECUTE FUNCTION(Rtv Pckgng Grp Desc   RT) TYPE(RTVOBJ) FILE(POCCREP)           AC1652185;
PARAMETER(DTL.Pckg_Group_Category);
PARAMETER(DTL.Text_USR_40);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?E00197
CASE;

// IF DTL.Pckg Item Type is Box Top
IF DTL.Pckg_Item_Type = 'BT';

// DTL.Pckg Tare Weight = CND.Not Entered
DTL.Pckg_Tare_Weight = *ZERO;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(Crt Packaging Item    CR) TYPE(CRTOBJ) FILE(POARREP)           AC1602023;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Packaging_Item_Code);
PARAMETER(DTL.Pckg_Item_Description);
PARAMETER(DTL.Pckg_List_Sequence);
PARAMETER(DTL.Pckg_Type_Class);
PARAMETER(DTL.Pckg_Item_Type);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Pckg_Unit_Cost);
PARAMETER(DTL.Pckg_Tare_Weight);
PARAMETER(DTL.Pckg_Reporting_Group);
PARAMETER(DTL.Pckg_Group_Category);
PARAMETER(DTL.Pckg_Modified_Weight);
PARAMETER(DTL.Pckg_Unused_Status_3);
PARAMETER(DTL.Pckg_Unused_Sts_2);
PARAMETER(DTL.Pre_printed_Bag_Sts);
PARAMETER(DTL.Pckg_Unused_Status_5);
PARAMETER(DTL.Pckg_Unused_Status_6);
PARAMETER(DTL.Pckg_Unused_Status_7);
PARAMETER(DTL.Pckg_Unused_Status_8);
PARAMETER(DTL.Pckg_Unused_Status_9);
PARAMETER(DTL.Pckg_Unused_Status_10);
PARAMETER(DTL.Pckg_Unused_Code);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Crt Date/Time      IF) TYPE(EXCINTFUN)                     AC1523477;
 PARAMETER(DB1.Record_Status);
 PARAMETER(DB1.Create_Date);
 PARAMETER(DB1.Create_Time);
 PARAMETER(DB1.Create_User);
 PARAMETER(DB1.Create_Program);
 PARAMETER(DB1.Change_Date);
 PARAMETER(DB1.Change_Time);
 PARAMETER(DB1.Change_User);
 PARAMETER(DB1.Change_Program);
 {
  //?Execute internal function

  //?*** Set RECORD STATUS field. ***
  // PAR.Record Status = CND.Active
  PAR.Record_Status = 'A';

  //?*** Set CREATE fields. ***
  // PAR.Create Date = JOB.*Job date
  PAR.Create_Date = JOB.*Job_date;

  // PAR.Create Time = JOB.*Job time
  PAR.Create_Time = JOB.*Job_time;

  // PAR.Create User = JOB.*USER
  PAR.Create_User = JOB.*USER;

  // PAR.Create Program = JOB.*PROGRAM
  PAR.Create_Program = JOB.*PROGRAM;

  //?*** Set CHANGE fields. ***
  // PAR.Change Date = CON.*ZERO
  PAR.Change_Date = *ZERO;

  // PAR.Change Time = CON.*ZERO
  PAR.Change_Time = *ZERO;

  // PAR.Change User = CON.*BLANK
  PAR.Change_User = *BLANK;

  // PAR.Change Program = CON.*BLANK
  PAR.Change_Program = *BLANK;

 }

 EXECUTE FUNCTION(Rtv Pckng Reprtng Cat RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1653012;
 PARAMETER(DB1.Pckg_Reporting_Group);
 PARAMETER(DB1.Pckg_Group_Category);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Packaging Item    IF) TYPE(EXCINTFUN) FILE(POARREP)        AC1608509;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Packaging_Item_Code);
PARAMETER(DTL.Pckg_Item_Description);
PARAMETER(DTL.Pckg_List_Sequence);
PARAMETER(DTL.Pckg_Type_Class);
PARAMETER(DTL.Pckg_Item_Type);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Pckg_Unit_Cost);
PARAMETER(DTL.Pckg_Tare_Weight);
PARAMETER(DTL.Pckg_Reporting_Group);
PARAMETER(DTL.Pckg_Group_Category);
PARAMETER(DTL.Pckg_Modified_Weight);
PARAMETER(DTL.Pckg_Unused_Status_3);
PARAMETER(DTL.Pckg_Unused_Sts_2);
PARAMETER(DTL.Pre_printed_Bag_Sts);
PARAMETER(DTL.Pckg_Unused_Status_5);
PARAMETER(DTL.Pckg_Unused_Status_6);
PARAMETER(DTL.Pckg_Unused_Status_7);
PARAMETER(DTL.Pckg_Unused_Status_8);
PARAMETER(DTL.Pckg_Unused_Status_9);
PARAMETER(DTL.Pckg_Unused_Status_10);
PARAMETER(DTL.Pckg_Unused_Code);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Create_Date);
PARAMETER(DTL.Create_Time);
PARAMETER(DTL.Create_User);
PARAMETER(DTL.Create_Program);
PARAMETER(DTL.Change_Date);
PARAMETER(DTL.Change_Time);
PARAMETER(DTL.Change_User);
PARAMETER(DTL.Change_Program);
PARAMETER(DTL.USR_Weight_9_2);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
{
 //?Execute internal function

 //?FP1271 - RMC - 03/30/08
 //? If the tare weight changed, mark packaging item Modified Sts=Y,
 //?  so the batch process will read this item and upadate all FG using
 //? it, and create the Carlisle PFS Prod records
 // LCL.Pckg Modified Weight = CND.No
 LCL.Pckg_Modified_Weight = 'N';

 EXECUTE FUNCTION(Rtv Incl in Misc Tare RT) TYPE(RTVOBJ) FILE(POCAREP)           AC1865444;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Pckg_Item_Type);
 PARAMETER(LCL.Incl_in_Misc_Tare);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 CASE;

 // IF LCL.Incl in Misc Tare is Yes
 IF LCL.Incl_in_Misc_Tare = 'Y';

 CASE;

 // IF PAR.Pckg Tare Weight NE PAR.USR Weight, 9.2
 IF PAR.Pckg_Tare_Weight <> PAR.USR_Weight_9_2;

 // LCL.Pckg Modified Weight = CND.Yes
 LCL.Pckg_Modified_Weight = 'Y';

 ENDIF;

 ENDIF;

 EXECUTE FUNCTION(Chg Packaging Item    CH) TYPE(CHGOBJ) FILE(POARREP)           AC1602024;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Packaging_Item_Code);
 PARAMETER(PAR.Pckg_Item_Description);
 PARAMETER(PAR.Pckg_List_Sequence);
 PARAMETER(PAR.Pckg_Type_Class);
 PARAMETER(PAR.Pckg_Item_Type);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Pckg_Unit_Cost);
 PARAMETER(PAR.Pckg_Tare_Weight);
 PARAMETER(PAR.Pckg_Reporting_Group);
 PARAMETER(PAR.Pckg_Group_Category);
 PARAMETER(LCL.Pckg_Modified_Weight);
 PARAMETER(PAR.Pckg_Unused_Status_3);
 PARAMETER(PAR.Pckg_Unused_Sts_2);
 PARAMETER(PAR.Pre_printed_Bag_Sts);
 PARAMETER(PAR.Pckg_Unused_Status_5);
 PARAMETER(PAR.Pckg_Unused_Status_6);
 PARAMETER(PAR.Pckg_Unused_Status_7);
 PARAMETER(PAR.Pckg_Unused_Status_8);
 PARAMETER(PAR.Pckg_Unused_Status_9);
 PARAMETER(PAR.Pckg_Unused_Status_10);
 PARAMETER(PAR.Pckg_Unused_Code);
 PARAMETER(PAR.Record_Status);
 PARAMETER(PAR.Create_Date);
 PARAMETER(PAR.Create_Time);
 PARAMETER(PAR.Create_User);
 PARAMETER(PAR.Create_Program);
 PARAMETER(PAR.Change_Date);
 PARAMETER(PAR.Change_Time);
 PARAMETER(PAR.Change_User);
 PARAMETER(PAR.Change_Program);
 {
  //?USER: Processing after Data read

  CASE;

  // IF PAR.Pckg Reporting Group NE DB1.Pckg Reporting Group
  IF PAR.Pckg_Reporting_Group <> DB1.Pckg_Reporting_Group;

  EXECUTE FUNCTION(Rtv Pckng Reprtng Cat RT) TYPE(RTVOBJ) FILE(POCBREP)           AC1653012;
  PARAMETER(PAR.Pckg_Reporting_Group);
  PARAMETER(WRK.Pckg_Group_Category);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   QUIT;

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  // WRK.Pckg Group Category = DB1.Pckg Group Category
  WRK.Pckg_Group_Category = DB1.Pckg_Group_Category;

  ENDIF;

  CASE;

  // IF DB1.Pckg Item Type NE PAR.Pckg Item Type
  IF DB1.Pckg_Item_Type <> PAR.Pckg_Item_Type;

  // OR DB1.Pckg Reporting Group NE PAR.Pckg Reporting Group
  OR DB1.Pckg_Reporting_Group <> PAR.Pckg_Reporting_Group;

  // OR DB1.Pckg Group Category NE WRK.Pckg Group Category
  OR DB1.Pckg_Group_Category <> WRK.Pckg_Group_Category;

  EXECUTE FUNCTION(Rtv Chg Pckg Itm flds RT) TYPE(RTVOBJ) FILE(POAZCPP)           AC1658130;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Packaging_Item_Code);
  PARAMETER(PAR.Pckg_Item_Type);
  PARAMETER(PAR.Pckg_Reporting_Group);
  PARAMETER(WRK.Pckg_Group_Category);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   //?USER: Process Data record

   EXECUTE FUNCTION(Chg Packaging BOM     CH) TYPE(CHGOBJ) FILE(POAZCPP)           AC1606856;
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Packaging_Item_Code);
   PARAMETER(DB1.Packaging_Item_Quantity);
   PARAMETER(PAR.Pckg_Item_Type);
   PARAMETER(PAR.Pckg_Reporting_Group);
   PARAMETER(PAR.Pckg_Group_Category);
   {
    //?USER: Processing before Data update

    EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
    PARAMETER(DB1.Change_Date);
    PARAMETER(DB1.Change_Time);
    PARAMETER(DB1.Change_User);
    PARAMETER(DB1.Change_Program);
    {
     //?Execute internal function

     // PAR.Change Date = JOB.*Job date
     PAR.Change_Date = JOB.*Job_date;

     // PAR.Change Time = JOB.*Job time
     PAR.Change_Time = JOB.*Job_time;

     // PAR.Change User = JOB.*USER
     PAR.Change_User = JOB.*USER;

     // PAR.Change Program = JOB.*PROGRAM
     PAR.Change_Program = JOB.*PROGRAM;

    }

    //?USER: Processing after Data update

    EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
    PARAMETER(DB1.Company_Number);
    PARAMETER('PRDPKG');
    PARAMETER(LCL.PFS_AccuSort_Active);
    PARAMETER(LCL.PFS_Carlisle_Active);
    {
     //?USER: Processing if Data record not found

     MOVE *ALL (To: PAR From: CON);

     //?USER: Process Data record

     MOVE *ALL (To: PAR From: DB1);

    }

    CASE;

    // IF LCL.PFS Carlisle Active is Yes
    IF LCL.PFS_Carlisle_Active = 'Y';

    // Call program PFS One Prod Pkging   XF.
    CALL PROGRAM(PFS One Prod Pkging   XF) ('PPNIXFR');
    PARAMETER(DB1.Company_Number);
    PARAMETER(DB1.Item_Code);
    PARAMETER(DB1.Packaging_Item_Code);
    PARAMETER('C');

    ENDIF;

   }

  }

  ENDIF;

  //?USER: Processing before Data update

  // DB1.Pckg Group Category = WRK.Pckg Group Category
  DB1.Pckg_Group_Category = WRK.Pckg_Group_Category;

  EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
  PARAMETER(DB1.Change_Date);
  PARAMETER(DB1.Change_Time);
  PARAMETER(DB1.Change_User);
  PARAMETER(DB1.Change_Program);
  {
   //?Execute internal function

   // PAR.Change Date = JOB.*Job date
   PAR.Change_Date = JOB.*Job_date;

   // PAR.Change Time = JOB.*Job time
   PAR.Change_Time = JOB.*Job_time;

   // PAR.Change User = JOB.*USER
   PAR.Change_User = JOB.*USER;

   // PAR.Change Program = JOB.*PROGRAM
   PAR.Change_Program = JOB.*PROGRAM;

  }

 }

 //?RMC Added 2.25.22
 EXECUTE FUNCTION(Rtv Chg rcd status   RT) TYPE(RTVOBJ) FILE(POAZCPP)            AC2203596;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Packaging_Item_Code);
 PARAMETER(PAR.Record_Status);
 {
  //?USER: Process Data record

  //?Chg record sts if it changed on the packaging item if FG item is inactive
  CASE;

  // IF PAR.Record Status NE DB1.Record Status
  IF PAR.Record_Status <> DB1.Record_Status;

  EXECUTE FUNCTION(RTV Record Status      RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1483076;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(LCL.Record_Status_1_Usr);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Record Status is Inactive
  IF PAR.Record_Status = 'I';

  // AND LCL.Record Status 1 Usr is Inactive
  AND LCL.Record_Status_1_Usr = 'I';

  EXECUTE FUNCTION(Chg Record status     CH) TYPE(CHGOBJ) FILE(POAZCPP)           AC2203597;
  PARAMETER(DB1.Company_Number);
  PARAMETER(DB1.Item_Code);
  PARAMETER(DB1.Packaging_Item_Code);
  PARAMETER(PAR.Record_Status);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(Set Chg Date/Time      IF) TYPE(EXCINTFUN)                     AC1523476;
   PARAMETER(DB1.Change_Date);
   PARAMETER(DB1.Change_Time);
   PARAMETER(DB1.Change_User);
   PARAMETER(DB1.Change_Program);
   {
    //?Execute internal function

    // PAR.Change Date = JOB.*Job date
    PAR.Change_Date = JOB.*Job_date;

    // PAR.Change Time = JOB.*Job time
    PAR.Change_Time = JOB.*Job_time;

    // PAR.Change User = JOB.*USER
    PAR.Change_User = JOB.*USER;

    // PAR.Change Program = JOB.*PROGRAM
    PAR.Change_Program = JOB.*PROGRAM;

   }

   //?USER: Processing after Data update

   EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
   PARAMETER(DB1.Company_Number);
   PARAMETER('PRDPKG');
   PARAMETER(LCL.PFS_AccuSort_Active);
   PARAMETER(LCL.PFS_Carlisle_Active);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   CASE;

   // IF LCL.PFS Carlisle Active is Yes
   IF LCL.PFS_Carlisle_Active = 'Y';

   // Call program PFS One Prod Pkging   XF.
   CALL PROGRAM(PFS One Prod Pkging   XF) ('PPNIXFR');
   PARAMETER(DB1.Company_Number);
   PARAMETER(DB1.Item_Code);
   PARAMETER(DB1.Packaging_Item_Code);
   PARAMETER('C');

   ENDIF;

  }

  ENDIF;

  ENDIF;

 }

 //?R17040 DN 02/24/21-Update IDE Pallet Tiers & Blocks in Item Dft Extsn.
 //?DO2642 DN 06/01/22-Set Spanish Description Line2 to Blank.
 // Call program Upd Itm Dft Extsn Info XF.
 CALL PROGRAM(Upd Itm Dft Extsn Info XF) ('PUJ4XFR');
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.IDE_Pallet_Tiers);
 PARAMETER(PAR.IDE_Pallet_Blocks);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);

}


//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.Return Code Usr = CND.*User Quit Requested
PAR.Return_Code_Usr = 'Y2U9999';

RETURN;

ENDIF;

