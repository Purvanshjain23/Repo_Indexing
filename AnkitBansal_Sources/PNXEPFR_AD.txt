// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNXEPFR
// ?Date: 14.08.2025 Time: 12:06:04
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv & Ctr Prt Hdg  IF) TYPE(EXCINTFUN)                     AC1258755;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Setup Prt Headings IF) TYPE(EXCINTFUN)                     AC1258771;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc to PrtCo US.
  EXECUTE FUNCTION(MOV Appl Desc to PrtCo US) TYPE(EXCUSRSRC) ('PD2KUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    $ACMP
  }

 }

}


// WRK.USR Display field = CND.no
WRK.USR_Display_field = 'N';

//?** display all fields on Top of Page
// WRK.Status - Y or N = CND.yes
WRK.Status_Y_or_N = 'Y';

//?** Set up field to test which carriers are being accumed for
//?** Veo's reports separate Seaboard from all other carriers
// WRK.Carrier Code Usr 1 = CON.SBD
WRK.Carrier_Code_Usr_1 = 'SBD';

//?USER: Record selection processing

//?** Skip if Backhaul Status in the record has not been entered
CASE;

// IF DB1.OHE Backhaul Status is Not Entered
IF DB1.OHE_Backhaul_Status = *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Match if company number is requested
CASE;

// IF PAR.OHE Backhaul Return to Co is not equal to zero
IF PAR.OHE_Backhaul_Return_to_Co <> *ZERO;

// AND DB1.OHE Backhaul Return to Co NE PAR.OHE Backhaul Return to Co
AND DB1.OHE_Backhaul_Return_to_Co <> PAR.OHE_Backhaul_Return_to_Co;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Match if carrier is requested
CASE;

// IF PAR.OHE Backhaul Carrier Code NE WRK.Blank for 4           USR
IF PAR.OHE_Backhaul_Carrier_Code <> WRK.Blank_for_4_USR;

// AND DB1.OHE Backhaul Carrier Code NE PAR.OHE Backhaul Carrier Code
AND DB1.OHE_Backhaul_Carrier_Code <> PAR.OHE_Backhaul_Carrier_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Match if Backhaul Status is requested
CASE;

// IF PAR.OHE Backhaul Status is Backhaul Status Entered
IF PAR.OHE_Backhaul_Status = 'B'/'D'/'F';

// AND DB1.OHE Backhaul Status NE PAR.OHE Backhaul Status
AND DB1.OHE_Backhaul_Status <> PAR.OHE_Backhaul_Status;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?** Select only if ASD is within requested date range
CASE;

// IF DB1.OHE Actual Ship Date LT PAR.From Date             USR
IF DB1.OHE_Actual_Ship_Date < PAR.From_Date_USR;

// OR DB1.OHE Actual Ship Date GT PAR.Thru Date             USR
OR DB1.OHE_Actual_Ship_Date > PAR.Thru_Date_USR;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?USER: Process top of page

//?** Company name or *ALL
CASE;

// IF PAR.OHE Backhaul Return to Co is equal to zero
IF PAR.OHE_Backhaul_Return_to_Co = *ZERO;

// TOP.Company Number = CON.*ZERO
TOP_Company_Number = *ZERO;

// WRK.Company Number = CND.Guymon
WRK.Company_Number = 360;

// TOP.Company Name DRV = CON.*ALL
TOP_Company_Name_DRV = *ALL;

//?** Company name or *ALL
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Company Number = PAR.OHE Backhaul Return to Co
TOP_Company_Number = PAR.OHE_Backhaul_Return_to_Co;

// WRK.Company Number = PAR.OHE Backhaul Return to Co
WRK.Company_Number = PAR.OHE_Backhaul_Return_to_Co;

EXECUTE FUNCTION(RTV Company Name Only  RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1100959;
PARAMETER(PAR.OHE_Backhaul_Return_to_Co);
PARAMETER(TOP_Company_Name_DRV);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


ENDIF;

//?** Carrier Name or *ALL
CASE;

// IF PAR.OHE Backhaul Carrier Code NE WRK.Blank for 4           USR
IF PAR.OHE_Backhaul_Carrier_Code <> WRK.Blank_for_4_USR;

// TOP.Carrier Code Usr = PAR.OHE Backhaul Carrier Code
TOP_Carrier_Code_Usr = PAR.OHE_Backhaul_Carrier_Code;

EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
PARAMETER(PAR.OHE_Backhaul_Carrier_Code);
PARAMETER(TOP_Carrier_Name_DRV);
PARAMETER(NLL.Record_Status);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** Carrier Name or *ALL
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Carrier Code Usr = WRK.Blank for 4           USR
TOP_Carrier_Code_Usr = WRK.Blank_for_4_USR;

// TOP.Carrier Name DRV = CON.*ALL
TOP_Carrier_Name_DRV = *ALL;

ENDIF;

//?** Backhaul Status or *ALL
CASE;

// IF PAR.OHE Backhaul Status is Backhaul Status Entered
IF PAR.OHE_Backhaul_Status = 'B'/'D'/'F';

// TOP.Description 14A      USR = Condition name of PAR.OHE Backhaul Status
TOP_Description_14A_USR = RTVCND(PAR.OHE_Backhaul_Status);

// TOP.Text 2 Length USR = PAR.OHE Backhaul Status
TOP_Text_2_Length_USR = PAR.OHE_Backhaul_Status;

//?** Backhaul Status or *ALL
// IF *OTHERWISE
IF *OTHERWISE;

// TOP.Description 14A      USR = CON.*ALL
TOP_Description_14A_USR = *ALL;

// TOP.Text 2 Length USR = WRK.Blank for 3          USR
TOP_Text_2_Length_USR = WRK.Blank_for_3_USR;

ENDIF;

//?** Print the date range requested
// TOP.From Date             USR = PAR.From Date             USR
TOP_From_Date_USR = PAR.From_Date_USR;

// TOP.Thru Date             USR = PAR.Thru Date             USR
TOP_Thru_Date_USR = PAR.Thru_Date_USR;

//?** Print the Week Begin Date with the fuel surcharge amount
EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
PARAMETER(WRK.Company_Number);
PARAMETER(PAR.Thru_Date_USR);
PARAMETER(WRK.FCR_Week_Begin_Date);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 CASE;

 // IF DB1.Day of Week is Sunday
 IF DB1.Day_of_Week = '1';

 // PAR.Date Sun USR = DB1.Post to G/L Date
 PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

 QUIT;

 ENDIF;

}


// TOP.Date From             USR = WRK.FCR Week Begin Date
TOP_Date_From_USR = WRK.FCR_Week_Begin_Date;

// TOP.Date To               USR = WRK.FCR Week Begin Date
TOP_Date_To_USR = WRK.FCR_Week_Begin_Date;

//?** If Company # is zero, pass in Guymon (360)
//?** RFS API Vol Corr Factor is Regular fuel surcharge (or Refridgerator)
EXECUTE FUNCTION(Rtv Fuel SurChrg Rate IF) TYPE(EXCINTFUN)                      AC1627433;
PARAMETER('FUEL');
PARAMETER(TOP_RFS_API_Vol_Corr_Factor);
PARAMETER(WRK.Company_Number);
PARAMETER(TOP_Thru_Date_USR);
PARAMETER('R');
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.FCR_Week_Begin_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // PAR.Date Sun USR = DB1.Post to G/L Date
  PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Frt Charge Rate   RT) TYPE(RTVOBJ) FILE(POBBCPP)           AC1627437;
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.FCR_Week_Begin_Date);
 PARAMETER(PAR.FCR_Rate_Amount);
 PARAMETER(PAR.Load_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.FCR Rate Amount = DB1.FCR Rate Amount
  PAR.FCR_Rate_Amount = DB1.FCR_Rate_Amount;

  CASE;

  // IF PAR.Load Type is Bulk
  IF PAR.Load_Type = 'B';

  // PAR.FCR Rate Amount = DB1.FCR Rate Amount 2
  PAR.FCR_Rate_Amount = DB1.FCR_Rate_Amount_2;

  ENDIF;

 }

}


// WRK.FCR Rate Amount = TOP.RFS API Vol Corr Factor
WRK.FCR_Rate_Amount = TOP_RFS_API_Vol_Corr_Factor;

//?** PRICE USR  is Bulk fuel surcharge
EXECUTE FUNCTION(Rtv Fuel SurChrg Rate IF) TYPE(EXCINTFUN)                      AC1627433;
PARAMETER('FUEL');
PARAMETER(TOP_Price_USR);
PARAMETER(WRK.Company_Number);
PARAMETER(TOP_Thru_Date_USR);
PARAMETER('B');
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Prior Sunday      RT) TYPE(RTVOBJ) FILE(CAAFREP)           AC1410775;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Scheduled_Ship_Date);
 PARAMETER(PAR.FCR_Week_Begin_Date);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  CASE;

  // IF DB1.Day of Week is Sunday
  IF DB1.Day_of_Week = '1';

  // PAR.Date Sun USR = DB1.Post to G/L Date
  PAR.Date_Sun_USR = DB1.Post_to_G_L_Date;

  QUIT;

  ENDIF;

 }

 EXECUTE FUNCTION(Rtv Frt Charge Rate   RT) TYPE(RTVOBJ) FILE(POBBCPP)           AC1627437;
 PARAMETER(PAR.FC_Code);
 PARAMETER(PAR.FCR_Week_Begin_Date);
 PARAMETER(PAR.FCR_Rate_Amount);
 PARAMETER(PAR.Load_Type);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PAR.FCR Rate Amount = DB1.FCR Rate Amount
  PAR.FCR_Rate_Amount = DB1.FCR_Rate_Amount;

  CASE;

  // IF PAR.Load Type is Bulk
  IF PAR.Load_Type = 'B';

  // PAR.FCR Rate Amount = DB1.FCR Rate Amount 2
  PAR.FCR_Rate_Amount = DB1.FCR_Rate_Amount_2;

  ENDIF;

 }

}


// WRK.FCR Rate Amount 2 = TOP.Price USR
WRK.FCR_Rate_Amount_2 = TOP_Price_USR;

//?USER: Null report processing

// Execute function CLC Set for Null Rpt   US.
EXECUTE FUNCTION(CLC Set for Null Rpt   US) TYPE(EXCUSRSRC) ('PDUUUFR');
{
 C                     MOVEL'Y'       W0AP1P
 C                     MOVEL'Y'       W0NEWP
}


// WRK.USR Display field = CND.yes
WRK.USR_Display_field = 'Y';

//?USER: Print required level headings

// SUPPRESSED PRINT OHE Backhaul Return to Co header format

CASE;

IF NEW OHE_Backhaul_Status;
// CUR.Description 14A      USR = Condition name of CUR.OHE Backhaul Status
CUR.Description_14A_USR = RTVCND(CUR.OHE_Backhaul_Status);

CASE;

// IF CUR.OHE Backhaul Return to Co is not equal to zero
IF CUR.OHE_Backhaul_Return_to_Co <> *ZERO;

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CUR.OHE_Backhaul_Return_to_Co);
PARAMETER(CUR.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// IF *OTHERWISE
IF *OTHERWISE;

// CUR.Company Name = CON.*BLANK
CUR.Company_Name = *BLANK;

ENDIF;

// SUPPRESSED PRINT OHE Backhaul Status header format

ENDIF;

// SUPPRESSED PRINT OHE Backhaul Carrier Code header format

// SUPPRESSED PRINT OHE Actual Ship Date header format

//?USER: On print of detail format

MOVE *ALL (To: CUR From: DB1);

// CUR.Text USR = Condition name of CUR.OHE Backhaul Status
CUR.Text_USR = RTVCND(CUR.OHE_Backhaul_Status);

EXECUTE FUNCTION(RTV Active Carr Name   RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1447369;
PARAMETER(CUR.OHE_Backhaul_Carrier_Code);
PARAMETER(CUR.USR_Carrier_Short);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

}


//?** only display fuel charge amounts on Top of Page
// WRK.Status - Y or N = CND.no
WRK.Status_Y_or_N = 'N';

EXECUTE FUNCTION(RTV Load All Fields    RT) TYPE(RTVOBJ) FILE(OMFJCPP)          AC1491510;
PARAMETER(CUR.Load_ID);
PARAMETER(NLL.Company_Number);
PARAMETER(NLL.Scheduled_Ship_Date);
PARAMETER(NLL.LTL_Flag);
PARAMETER(NLL.Load_Status);
PARAMETER(NLL.Reefer_Temperature);
PARAMETER(NLL.Seal_1);
PARAMETER(NLL.Seal_2);
PARAMETER(NLL.Seal_3);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(NLL.Total_Load_Order_Weight);
PARAMETER(NLL.Flat_Amount);
PARAMETER(NLL.Allocate_Pounds_Miles);
PARAMETER(NLL.Total_Stops);
PARAMETER(NLL.Trailer_Id);
PARAMETER(NLL.Transloader_Carrier_Code);
PARAMETER(NLL.BOL_Time);
PARAMETER(NLL.Carrier_Code);
PARAMETER(NLL.Truck_Size);
PARAMETER(NLL.Ld_Hdr_Ld_Dtl_Unused);
PARAMETER(NLL.Rated_Freight);
PARAMETER(NLL.Ship_Status);
PARAMETER(CUR.Load_Type);
PARAMETER(NLL.Number_Pallets_Received);
PARAMETER(NLL.Number_Pallets_Loaded);
PARAMETER(NLL.Load_Carrier_Pay_Amt);
PARAMETER(NLL.Estimated_Arrival_Time);
PARAMETER(NLL.Actual_Arrival_Date);
PARAMETER(NLL.Actual_Arrival_Time);
PARAMETER(NLL.Trailer_IN_Weight);
PARAMETER(NLL.Trailer_OUT_Weight);
PARAMETER(NLL.Actual_Departure_Date);
PARAMETER(NLL.Departure_Time);
PARAMETER(NLL.Schedule_Sequence_Number);
PARAMETER(NLL.Product_Temperature);
PARAMETER(NLL.Number_Spacers_Loaded);
PARAMETER(NLL.Car_Veh_Initials);
PARAMETER(CUR.Total_Miles_40_USR);
PARAMETER(NLL.Recorder_ID);
PARAMETER(NLL.Shipping_Method);
PARAMETER(NLL.Ship_From_Warehouse);
PARAMETER(NLL.Ship_To_State_Code);
PARAMETER(NLL.Gross_Weight);
PARAMETER(NLL.Carrier_Broker);
PARAMETER(NLL.Export_Status);
PARAMETER(NLL.Actual_Ship_Date);
PARAMETER(NLL.On_Time_Y_N);
PARAMETER(NLL.Truck_Ready_Date);
PARAMETER(NLL.Truck_Ready_Time);
PARAMETER(NLL.Spotted_Date);
PARAMETER(NLL.Spotted_Time);
PARAMETER(NLL.Load_Finished_Date);
PARAMETER(NLL.Load_Finished_Time);
PARAMETER(NLL.BOL_Complete_Date);
PARAMETER(NLL.BOL_Complete_Time);
PARAMETER(NLL.BOL_Received_Date);
PARAMETER(NLL.BOL_Received_Time);
PARAMETER(NLL.Truck_Departure_Date);
PARAMETER(NLL.Truck_Departure_Time);
PARAMETER(NLL.Adjusted_Departure_Date);
PARAMETER(NLL.Adjusted_Departure_Time);
PARAMETER(NLL.Shipping_Line);
PARAMETER(NLL.Port_Delv_Terminal);
PARAMETER(NLL.Vessel_Name);
PARAMETER(NLL.Voyage);
PARAMETER(NLL.Sail_Date);
PARAMETER(NLL.Booking_Number);
PARAMETER(NLL.Discharge_Port);
PARAMETER(NLL.Arrival_Date);
PARAMETER(NLL.Container_Number);
PARAMETER(NLL.Date_In);
PARAMETER(NLL.Time_In);
PARAMETER(NLL.Date_Out);
PARAMETER(NLL.Time_Out);
PARAMETER(NLL.Load_Total_Freight);
PARAMETER(NLL.Scheduled_Delivery_Date);
PARAMETER(NLL.Scheduled_Delivery_Time);
PARAMETER(NLL.LH_Unused_Sts);
PARAMETER(NLL.LH_Carrier_Payment_Sts);
PARAMETER(NLL.Bring_Back_Miles);
PARAMETER(NLL.Requested_Delivery_Date);
PARAMETER(NLL.Load_Acceptance_Flag);
PARAMETER(NLL.Warehouse_Code);
PARAMETER(NLL.On_Yard_Date);
PARAMETER(NLL.On_Yard_Time);
PARAMETER(NLL.Deadline_Departure_Date);
PARAMETER(NLL.Deadline_Departure_Time);
PARAMETER(NLL.Load_Held_Over);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(NLL.Ocean_BOL_Number);
PARAMETER(NLL.Express_Mail_Number);
PARAMETER(NLL.Express_Mail_Date);
PARAMETER(NLL.Load_Shag_Flag);
PARAMETER(NLL.Load_Wash_Flag);
PARAMETER(NLL.Product_Complete_Date);
PARAMETER(NLL.Product_Complete_Time);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(NLL.Tot_Pallet_Tare);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(NLL.Load_Confirmation_Time);
PARAMETER(NLL.Load_Door_1);
PARAMETER(NLL.Override_Total_Load_Miles);
PARAMETER(NLL.Load_Door_2);
PARAMETER(NLL.Partial_Load);
PARAMETER(NLL.Load_Confirmation_Fax_Sts);
PARAMETER(NLL.Export_Load_USDA_OK);
PARAMETER(NLL.Late_Delivery_Email_Flag);
PARAMETER(NLL.Load_Actual_Freight);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(NLL.Shipping_Temp_C_F_txt);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(NLL.LH_On_Time_Reason_Code);
PARAMETER(NLL.LH_Held_Over_Reason);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(*MISSING);
PARAMETER(NLL.EDI_Status_1);
PARAMETER(NLL.EDI_Status_2);
PARAMETER(NLL.EDI_Status_3);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


//?** Calculate surcharge for carrier/load, then accum for subtotal
//?** Fuel Surcharge for "Forced" is added to BOTH Forced and BH/DH columns
//?Calculate surcharge for Carrier = Seaboard (Forced or BH & DH)
CASE;

// IF CUR.OHE Backhaul Carrier Code EQ WRK.Carrier Code Usr 1
IF CUR.OHE_Backhaul_Carrier_Code = WRK.Carrier_Code_Usr_1;

CASE;

// IF CUR.OHE Backhaul Status is Forced
IF CUR.OHE_Backhaul_Status = 'F';

//?** Add surcharge to SBD Forced and SBD BH/DH
CASE;

// IF CUR.Load Type is Regular
IF CUR.Load_Type = 'R';

// CUR.Percent of Pieces  USR = WRK.FCR Rate Amount * CUR.Total Miles 4,0       USR *Rounded
CUR.Percent_of_Pieces_USR = WRK.FCR_Rate_Amount * CUR.Total_Miles_40_USR 'H';

// CUR.Market Price          USR = CUR.Percent of Pieces  USR
CUR.Market_Price_USR = CUR.Percent_of_Pieces_USR;

// NXT.Percent of Pieces  USR = NXT.Percent of Pieces  USR + CUR.Percent of Pieces  USR
NXT.Percent_of_Pieces_USR = NXT.Percent_of_Pieces_USR + CUR.Percent_of_Pieces_USR;

// NXT.Market Price          USR = NXT.Market Price          USR + CUR.Percent of Pieces  USR
NXT.Market_Price_USR = NXT.Market_Price_USR + CUR.Percent_of_Pieces_USR;

//?** Add surcharge to SBD Forced and SBD BH/DH
// IF CUR.Load Type is Bulk
IF CUR.Load_Type = 'B';

// CUR.Percent of Pieces  USR = WRK.FCR Rate Amount 2 * CUR.Total Miles 4,0       USR *Rounded
CUR.Percent_of_Pieces_USR = WRK.FCR_Rate_Amount_2 * CUR.Total_Miles_40_USR 'H';

// CUR.Market Price          USR = CUR.Percent of Pieces  USR
CUR.Market_Price_USR = CUR.Percent_of_Pieces_USR;

// NXT.Percent of Pieces  USR = NXT.Percent of Pieces  USR + CUR.Percent of Pieces  USR
NXT.Percent_of_Pieces_USR = NXT.Percent_of_Pieces_USR + CUR.Percent_of_Pieces_USR;

// NXT.Market Price          USR = NXT.Market Price          USR + CUR.Percent of Pieces  USR
NXT.Market_Price_USR = NXT.Market_Price_USR + CUR.Percent_of_Pieces_USR;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?** Add surcharge to SBD BH/DH
CASE;

// IF CUR.Load Type is Regular
IF CUR.Load_Type = 'R';

// CUR.Market Price          USR = WRK.FCR Rate Amount * CUR.Total Miles 4,0       USR *Rounded
CUR.Market_Price_USR = WRK.FCR_Rate_Amount * CUR.Total_Miles_40_USR 'H';

// NXT.Market Price          USR = NXT.Market Price          USR + CUR.Market Price          USR
NXT.Market_Price_USR = NXT.Market_Price_USR + CUR.Market_Price_USR;

//?** Add surcharge to SBD BH/DH
// IF CUR.Load Type is Bulk
IF CUR.Load_Type = 'B';

// CUR.Market Price          USR = WRK.FCR Rate Amount 2 * CUR.Total Miles 4,0       USR *Rounded
CUR.Market_Price_USR = WRK.FCR_Rate_Amount_2 * CUR.Total_Miles_40_USR 'H';

// NXT.Market Price          USR = NXT.Market Price          USR + CUR.Market Price          USR
NXT.Market_Price_USR = NXT.Market_Price_USR + CUR.Market_Price_USR;

ENDIF;

ENDIF;

ENDIF;

//?Calculate surcharge for Carrier <> Seaboard (Forced or BH & DH)
CASE;

// IF CUR.OHE Backhaul Carrier Code NE WRK.Carrier Code Usr 1
IF CUR.OHE_Backhaul_Carrier_Code <> WRK.Carrier_Code_Usr_1;

CASE;

// IF CUR.OHE Backhaul Status is Forced
IF CUR.OHE_Backhaul_Status = 'F';

//?** Add surcharge to Other Forced and Other BH/DH
CASE;

// IF CUR.Load Type is Regular
IF CUR.Load_Type = 'R';

// CUR.@Price 2 Decimals = WRK.FCR Rate Amount * CUR.Total Miles 4,0       USR *Rounded
CUR.@Price_2_Decimals = WRK.FCR_Rate_Amount * CUR.Total_Miles_40_USR 'H';

// CUR.Percent of Carcass USR = CUR.@Price 2 Decimals
CUR.Percent_of_Carcass_USR = CUR.@Price_2_Decimals;

// NXT.@Price 2 Decimals = NXT.@Price 2 Decimals + CUR.@Price 2 Decimals
NXT.@Price_2_Decimals = NXT.@Price_2_Decimals + CUR.@Price_2_Decimals;

// NXT.Percent of Carcass USR = NXT.Percent of Carcass USR + CUR.@Price 2 Decimals
NXT.Percent_of_Carcass_USR = NXT.Percent_of_Carcass_USR + CUR.@Price_2_Decimals;

//?** Add surcharge to Other Forced and Other BH/DH
// IF CUR.Load Type is Bulk
IF CUR.Load_Type = 'B';

// CUR.@Price 2 Decimals = WRK.FCR Rate Amount 2 * CUR.Total Miles 4,0       USR *Rounded
CUR.@Price_2_Decimals = WRK.FCR_Rate_Amount_2 * CUR.Total_Miles_40_USR 'H';

// CUR.Percent of Carcass USR = CUR.@Price 2 Decimals
CUR.Percent_of_Carcass_USR = CUR.@Price_2_Decimals;

// NXT.@Price 2 Decimals = NXT.@Price 2 Decimals + CUR.@Price 2 Decimals
NXT.@Price_2_Decimals = NXT.@Price_2_Decimals + CUR.@Price_2_Decimals;

// NXT.Percent of Carcass USR = NXT.Percent of Carcass USR + CUR.@Price 2 Decimals
NXT.Percent_of_Carcass_USR = NXT.Percent_of_Carcass_USR + CUR.@Price_2_Decimals;

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

//?** Add surcharge to SBD BH/DH
CASE;

// IF CUR.Load Type is Regular
IF CUR.Load_Type = 'R';

// CUR.Percent of Carcass USR = WRK.FCR Rate Amount * CUR.Total Miles 4,0       USR *Rounded
CUR.Percent_of_Carcass_USR = WRK.FCR_Rate_Amount * CUR.Total_Miles_40_USR 'H';

// NXT.Percent of Carcass USR = NXT.Percent of Carcass USR + CUR.Percent of Carcass USR
NXT.Percent_of_Carcass_USR = NXT.Percent_of_Carcass_USR + CUR.Percent_of_Carcass_USR;

//?** Add surcharge to SBD BH/DH
// IF CUR.Load Type is Bulk
IF CUR.Load_Type = 'B';

// CUR.Percent of Carcass USR = WRK.FCR Rate Amount 2 * CUR.Total Miles 4,0       USR *Rounded
CUR.Percent_of_Carcass_USR = WRK.FCR_Rate_Amount_2 * CUR.Total_Miles_40_USR 'H';

// NXT.Percent of Carcass USR = NXT.Percent of Carcass USR + CUR.Percent of Carcass USR
NXT.Percent_of_Carcass_USR = NXT.Percent_of_Carcass_USR + CUR.Percent_of_Carcass_USR;

ENDIF;

ENDIF;

ENDIF;

//?USER: Print required level totals

// SUPPRESSED PRINT OHE Actual Ship Date totals format

CASE;

IF NEW OHE_Backhaul_Carrier_Code;
EXECUTE FUNCTION(Carrier Name DRV) TYPE(DRVFLD)                                 AC1582201;
PARAMETER(CUR.Carrier_Name_DRV);
PARAMETER(CUR.OHE_Backhaul_Carrier_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Carrier Name       RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1382687;
 PARAMETER(PAR.Carrier_Code);
 PARAMETER(PAR.Carrier_Name_DRV);
 PARAMETER(NLL.Record_Status);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  // PGM.*Return code = CND.*Normal
  PGM.*Return_code = *BLANK;

 }

}


// Print OHE Backhaul Carrier Code totals format
PRINT OHE Backhaul Carrier Code totals format;

// NXT.Market Price          USR = NXT.Market Price          USR + CUR.Market Price          USR
NXT.Market_Price_USR = NXT.Market_Price_USR + CUR.Market_Price_USR;

// NXT.Percent of Pieces  USR = NXT.Percent of Pieces  USR + CUR.Percent of Pieces  USR
NXT.Percent_of_Pieces_USR = NXT.Percent_of_Pieces_USR + CUR.Percent_of_Pieces_USR;

// NXT.@Price 2 Decimals = NXT.@Price 2 Decimals + CUR.@Price 2 Decimals
NXT.@Price_2_Decimals = NXT.@Price_2_Decimals + CUR.@Price_2_Decimals;

// NXT.Percent of Carcass USR = NXT.Percent of Carcass USR + CUR.Percent of Carcass USR
NXT.Percent_of_Carcass_USR = NXT.Percent_of_Carcass_USR + CUR.Percent_of_Carcass_USR;

ENDIF;

CASE;

IF NEW OHE_Backhaul_Status;
// CUR.Description 14A      USR = Condition name of CUR.OHE Backhaul Status
CUR.Description_14A_USR = RTVCND(CUR.OHE_Backhaul_Status);

// Print OHE Backhaul Status totals format
PRINT OHE Backhaul Status totals format;

// NXT.Market Price          USR = NXT.Market Price          USR + CUR.Market Price          USR
NXT.Market_Price_USR = NXT.Market_Price_USR + CUR.Market_Price_USR;

// NXT.Percent of Pieces  USR = NXT.Percent of Pieces  USR + CUR.Percent of Pieces  USR
NXT.Percent_of_Pieces_USR = NXT.Percent_of_Pieces_USR + CUR.Percent_of_Pieces_USR;

// NXT.@Price 2 Decimals = NXT.@Price 2 Decimals + CUR.@Price 2 Decimals
NXT.@Price_2_Decimals = NXT.@Price_2_Decimals + CUR.@Price_2_Decimals;

// NXT.Percent of Carcass USR = NXT.Percent of Carcass USR + CUR.Percent of Carcass USR
NXT.Percent_of_Carcass_USR = NXT.Percent_of_Carcass_USR + CUR.Percent_of_Carcass_USR;

ENDIF;

CASE;

IF NEW OHE_Backhaul_Return_to_Co;
// Print OHE Backhaul Return to Co totals format
PRINT OHE Backhaul Return to Co totals format;

// NXT.Market Price          USR = NXT.Market Price          USR + CUR.Market Price          USR
NXT.Market_Price_USR = NXT.Market_Price_USR + CUR.Market_Price_USR;

// NXT.Percent of Pieces  USR = NXT.Percent of Pieces  USR + CUR.Percent of Pieces  USR
NXT.Percent_of_Pieces_USR = NXT.Percent_of_Pieces_USR + CUR.Percent_of_Pieces_USR;

// NXT.@Price 2 Decimals = NXT.@Price 2 Decimals + CUR.@Price 2 Decimals
NXT.@Price_2_Decimals = NXT.@Price_2_Decimals + CUR.@Price_2_Decimals;

// NXT.Percent of Carcass USR = NXT.Percent of Carcass USR + CUR.Percent of Carcass USR
NXT.Percent_of_Carcass_USR = NXT.Percent_of_Carcass_USR + CUR.Percent_of_Carcass_USR;

ENDIF;

