// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for POW6DFR
// ?Date: 14.08.2025 Time: 03:39:26
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('YR');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(Set Access            IF) TYPE(EXCINTFUN)                      AC1667888;
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);
PARAMETER(PAR.Output_Production_USR);
PARAMETER(PAR.Output_Begin_Inv_USR);
PARAMETER(PAR.Output_Not_Used_USR);
PARAMETER(PAR.Output_Partial_Prod_USR);
PARAMETER(PAR.Output_Head_Cut_Wgt_USR);
PARAMETER(PAR.Output_Conv_Start_Wgt);
PARAMETER(PAR.Output_Comment_USR);
PARAMETER(PAR.Add_Partial_USR);
PARAMETER(PAR.Calculate_Yield_USR);
PARAMETER(PAR.Publish_Yield_USR);
{
 //?Execute internal function

 //?** Accounting has all access **
 // PAR.Output Production USR = CND.no
 PAR.Output_Production_USR = 'N';

 // PAR.Output Begin Inv USR = CND.no
 PAR.Output_Begin_Inv_USR = 'N';

 // PAR.Output Not Used USR = CND.no
 PAR.Output_Not_Used_USR = 'N';

 // PAR.Output Partial Prod USR = CND.no
 PAR.Output_Partial_Prod_USR = 'N';

 // PAR.Output Head Cut/Wgt USR = CND.no
 PAR.Output_Head_Cut_Wgt_USR = 'N';

 // PAR.Output Conv Start Wgt = CND.no
 PAR.Output_Conv_Start_Wgt = 'N';

 // PAR.Output Comment USR = CND.no
 PAR.Output_Comment_USR = 'N';

 // PAR.Add Partial USR = CND.yes
 PAR.Add_Partial_USR = 'Y';

 // PAR.Calculate Yield USR = CND.yes
 PAR.Calculate_Yield_USR = 'Y';

 // PAR.Publish Yield USR = CND.yes
 PAR.Publish_Yield_USR = 'Y';

 CASE;

 // IF PAR.User Department is Production
 IF PAR.User_Department = 'PR';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 //?* Cannot enter Head Cut/Cold Weight *
 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // IF PAR.User Department is Main Break
 IF PAR.User_Department = 'MB';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // IF PAR.User Department is Converting
 IF PAR.User_Department = 'CV';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 // IF PAR.User Department is Product Manager
 IF PAR.User_Department = 'PM';

 // PAR.Output Production USR = CND.yes
 PAR.Output_Production_USR = 'Y';

 // PAR.Output Begin Inv USR = CND.yes
 PAR.Output_Begin_Inv_USR = 'Y';

 // PAR.Output Not Used USR = CND.yes
 PAR.Output_Not_Used_USR = 'Y';

 // PAR.Output Partial Prod USR = CND.yes
 PAR.Output_Partial_Prod_USR = 'Y';

 // PAR.Output Head Cut/Wgt USR = CND.yes
 PAR.Output_Head_Cut_Wgt_USR = 'Y';

 // PAR.Output Conv Start Wgt = CND.yes
 PAR.Output_Conv_Start_Wgt = 'Y';

 // PAR.Output Comment USR = CND.yes
 PAR.Output_Comment_USR = 'Y';

 // PAR.Add Partial USR = CND.no
 PAR.Add_Partial_USR = 'N';

 // PAR.Calculate Yield USR = CND.no
 PAR.Calculate_Yield_USR = 'N';

 // PAR.Publish Yield USR = CND.no
 PAR.Publish_Yield_USR = 'N';

 ENDIF;

}


// PAR.Error Flag            USR = CND.No
PAR.Error_Flag_USR = 'N';

//?USER: Initialize subfile control

EXECUTE FUNCTION(Rtv Head Cut/Cold Wgt RT) TYPE(RTVOBJ) FILE(POCRCPP)           AC1665520;
PARAMETER(CTL.Company_Number);
PARAMETER('CUT');
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER(CTL.Head_Cut);
PARAMETER(CTL.Cold_Weight);
PARAMETER(CTL.Avg_Cold_Weight);
PARAMETER(NLL.Start_Weight);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Company Name DRV) TYPE(DRVFLD)                                 AC1532476;
PARAMETER(CTL.Company_Name_DRV);
PARAMETER(CTL.Company_Number);
{
 //?Calculate derived field

 EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Company_Name_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Department Desc DRV) TYPE(DRVFLD)                              AC1666904;
PARAMETER(CTL.Department_Desc_DRV);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Dept Name    RT) TYPE(RTVOBJ) FILE(PDI5REP)           AC1286709;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Department_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Production Line Desc DRV) TYPE(DRVFLD)                         AC1666905;
PARAMETER(CTL.Production_Line_Desc_DRV);
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Department_Code);
PARAMETER(CTL.Production_Line_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Prod Line Desc    RT) TYPE(RTVOBJ) FILE(POCMREP)           AC1666906;
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Department_Code);
 PARAMETER(PAR.Production_Line_Code);
 PARAMETER(PAR.Production_Line_Desc_DRV);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


//?USER: Initialize subfile record from DBF record

EXECUTE FUNCTION(Rtv Comp Desc         RT) TYPE(RTVOBJ) FILE(POCYREP)           AC1670001;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Yld_Component_Code);
PARAMETER(RCD.Yld_Component_Desc);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Rtv Component Info    RT) TYPE(RTVOBJ) FILE(POCZREP)           AC1669682;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Department_Code);
PARAMETER(RCD.Production_Line_Code);
PARAMETER(RCD.Yld_Component_Code);
PARAMETER(RCD.PLYC_Type);
PARAMETER(RCD.PLYC_Percent_of_Weight);
PARAMETER(WRK.PLYC_Comment);
PARAMETER(WRK.Credit_Item_Inc_Exc_Sts);
PARAMETER(WRK.Type_Inc_Exc_Sts);
PARAMETER(WRK.Item_Structure_Type_Code);
PARAMETER(WRK.Group_Inc_Exc_Sts);
PARAMETER(WRK.Item_Structure_Group_Code);
PARAMETER(WRK.Class_Inc_Exc_Sts);
PARAMETER(WRK.Item_Structure_Class_Code);
PARAMETER(RCD.YC_Required_Sts);
PARAMETER(WRK.YC_Component_Group);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF RCD.PLYC Type is CL/IS
IF RCD.PLYC_Type = 'SC'/'IS';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.YDL Yld Comp Weight is Less than or equal zero
IF RCD.YDL_Yld_Comp_Weight <= *ZERO;

// AND RCD.YC Required Sts is yes
AND RCD.YC_Required_Sts = 'Y';

// PAR.Error Flag            USR = CND.Yes
PAR.Error_Flag_USR = 'Y';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F5=Refresh
CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F8=Next
CASE;

// IF CTL.*CMD key is SUBMIT/NEXT
IF CTL.*CMD_key = '08';

//?Cant goto yld appr for loins/boning until cut/biloin yld appr done
CASE;

// IF CTL.Department Code is Loin Boning
IF CTL.Department_Code = 'LOINS';

// AND CTL.Production Line Code is Boning
AND CTL.Production_Line_Code = 'BONING';

EXECUTE FUNCTION(Rtv Process Sts       RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688096;
PARAMETER(CTL.Company_Number);
PARAMETER('CUT');
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER('BILOIN');
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

//?Error if not yld approved
CASE;

// IF LCL.YDL Process Status is Yield Approved
IF LCL.YDL_Process_Status = '03'/'04';

//?Error if not yld approved
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Yield not calculated for &3 Production and Shift &4 for &2 Line.'
ERROR(USR3279);
MSGPARM('CUT');
MSGPARM('BILOIN');
MSGPARM(CTL.Production_Date);
MSGPARM(CTL.Production_Shift);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?Cant goto yld appr for Belly Skinls until belly sglrib/shtbel yld done
CASE;

// IF CTL.Department Code is Belly
IF CTL.Department_Code = 'BELLY';

// AND CTL.Production Line Code is Skinless
AND CTL.Production_Line_Code = 'SKINLS';

//?Check if the Line Hdr exists for the belly/sglrib/date/shift
EXECUTE FUNCTION(Rtv Process Sts       RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688096;
PARAMETER(CTL.Company_Number);
PARAMETER('BELLY');
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER('SGLRIB');
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

//?Error if not Yld Approved
CASE;

// IF LCL.YDL Process Status is Yield Approved
IF LCL.YDL_Process_Status = '03'/'04';

//?Error if not Yld Approved
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Yield not calculated for &3 Production and Shift &4 for &2 Line.'
ERROR(USR3279);
MSGPARM('BELLY');
MSGPARM('SGLRIB');
MSGPARM(CTL.Production_Date);
MSGPARM(CTL.Production_Shift);

QUIT;

ENDIF;

ENDIF;

//?Check if the Line Hdr exists for the belly/shtbel/date/shift
EXECUTE FUNCTION(Rtv Process Sts       RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688096;
PARAMETER(CTL.Company_Number);
PARAMETER('BELLY');
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER('SHTBEL');
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

//?Error if not Yld Approved
CASE;

// IF LCL.YDL Process Status is Yield Approved
IF LCL.YDL_Process_Status = '03'/'04';

//?Error if not Yld Approved
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Yield not calculated for &3 Production and Shift &4 for &2 Line.'
ERROR(USR3279);
MSGPARM('BELLY');
MSGPARM('SHTBEL');
MSGPARM(CTL.Production_Date);
MSGPARM(CTL.Production_Shift);

QUIT;

ENDIF;

ENDIF;

//?Check if the Line Hdr exists for the cut/belly/date/shift
ENDIF;

//?Cant goto yld appr for cut/belly or rib until belly/sglrib yld appr done
CASE;

// IF CTL.Department Code is CUT
IF CTL.Department_Code = 'CUT';

// AND CTL.Production Line Code is Belly
AND ( CTL.Production_Line_Code = 'BELLY';

// OR CTL.Production Line Code is Ribs
OR CTL.Production_Line_Code = 'RIB' );

EXECUTE FUNCTION(Rtv Process Sts       RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688096;
PARAMETER(CTL.Company_Number);
PARAMETER('BELLY');
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER('SGLRIB');
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

//?Error if not yld approved
CASE;

// IF LCL.YDL Process Status is Yield Approved
IF LCL.YDL_Process_Status = '03'/'04';

//?Error if not yld approved
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Yield not calculated for &3 Production and Shift &4 for &2 Line.'
ERROR(USR3279);
MSGPARM('BELLY');
MSGPARM('SGLRIB');
MSGPARM(CTL.Production_Date);
MSGPARM(CTL.Production_Shift);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?Cant goto yld appr for cut/belly until belly/shtbel yld appr done
CASE;

// IF CTL.Department Code is CUT
IF CTL.Department_Code = 'CUT';

// AND CTL.Production Line Code is Belly
AND CTL.Production_Line_Code = 'BELLY';

EXECUTE FUNCTION(Rtv Process Sts       RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688096;
PARAMETER(CTL.Company_Number);
PARAMETER('BELLY');
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER('SHTBEL');
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

//?Error if not yld approved
CASE;

// IF LCL.YDL Process Status is Yield Approved
IF LCL.YDL_Process_Status = '03'/'04';

//?Error if not yld approved
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Yield not calculated for &3 Production and Shift &4 for &2 Line.'
ERROR(USR3279);
MSGPARM('BELLY');
MSGPARM('SHTBEL');
MSGPARM(CTL.Production_Date);
MSGPARM(CTL.Production_Shift);

QUIT;

ENDIF;

ENDIF;

ENDIF;

//?Cant goto yld appr for belly/sglrib until belly/shtbel yld appr done
CASE;

// IF CTL.Department Code is Belly
IF CTL.Department_Code = 'BELLY';

// AND CTL.Production Line Code is Single Rib
AND CTL.Production_Line_Code = 'SGLRIB';

EXECUTE FUNCTION(Rtv Process Sts       RT) TYPE(RTVOBJ) FILE(POCSCPP)           AC1688096;
PARAMETER(CTL.Company_Number);
PARAMETER('BELLY');
PARAMETER(CTL.Production_Date);
PARAMETER(CTL.Production_Shift);
PARAMETER('SHTBEL');
PARAMETER(LCL.YDL_Post_Status);
PARAMETER(LCL.YDL_Process_Status);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// IF *OTHERWISE
IF *OTHERWISE;

//?Error if not yld approved
CASE;

// IF LCL.YDL Process Status is Yield Approved
IF LCL.YDL_Process_Status = '03'/'04';

//?Error if not yld approved
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Yield not calculated for &3 Production and Shift &4 for &2 Line.'
ERROR(USR3279);
MSGPARM('BELLY');
MSGPARM('SHTBEL');
MSGPARM(CTL.Production_Date);
MSGPARM(CTL.Production_Shift);

QUIT;

ENDIF;

ENDIF;

ENDIF;

CASE;

// IF PAR.Error Flag            USR is Yes
IF PAR.Error_Flag_USR = 'Y';

// Send error message - 'Start Weight(s) are not available for &1 Department and &2 Line.'
ERROR(USR3256);
MSGPARM(CTL.Department_Code);
MSGPARM(CTL.Production_Line_Code);

QUIT;

// IF PAR.YDL Process Status is 00-Reporting Not Started
IF PAR.YDL_Process_Status = *BLANK;

// Send error message - 'End of Shift not performed for &3 Production and Shift &4 for &2 Line.'
ERROR(USR3280);
MSGPARM(CTL.Department_Code);
MSGPARM(CTL.Production_Line_Code);
MSGPARM(CTL.Production_Date);
MSGPARM(CTL.Production_Shift);

QUIT;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF PAR.Calculate Yield USR is yes
IF PAR.Calculate_Yield_USR = 'Y';

// Call program Zzz Calculate Yield   XF.
CALL PROGRAM(Zzz Calculate Yield   XF) ('POWEXFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Department_Code);
PARAMETER(PAR.Production_Line_Code);
PARAMETER(PAR.Production_Date);
PARAMETER(PAR.Production_Shift);
PARAMETER(PAR.YDL_Post_Status);
PARAMETER(PAR.YDL_Process_Status);
PARAMETER(PAR.Record_Found_USR);
PARAMETER(PAR.Yld_Program_USR);
PARAMETER(PAR.User_Department);
PARAMETER(PAR.User_Access);

// PAR.Yld Program USR = CND.Yield Review
PAR.Yld_Program_USR = 'YR';

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Function not allowed.'
ERROR(USR1833);

ENDIF;

RETURN;

ENDIF;

ENDIF;

//?F7=BACK
CASE;

// IF CTL.*CMD key is BACK
IF CTL.*CMD_key = '07';

// PAR.Yld Program USR = CND.Inventory Reconcile
PAR.Yld_Program_USR = 'IR';

RETURN;

ENDIF;

//?USER: Exit program processing

CASE;

// IF CTL.*CMD key is *Exit
IF CTL.*CMD_key = '03';

// PAR.Yld Program USR = CND.Exit
PAR.Yld_Program_USR = 'EX';

RETURN;

ENDIF;

