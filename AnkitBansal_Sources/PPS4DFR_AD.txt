// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PPS4DFR
// ?Date: 14.08.2025 Time: 03:41:50
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('OMS');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


// LCL.First Time Flag = CND.Yes
LCL.First_Time_Flag = 'Y';

EXECUTE FUNCTION(Rtv Ord Dups Found    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1898212;
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);
PARAMETER(PAR.Order_Sequence_Number);
PARAMETER(PAR.Order_Secondary_Line_Seq);
PARAMETER(PAR.STATUS);
{
 //?USER: Initialize routine

 // LCL.First Time Flag = CND.Yes
 LCL.First_Time_Flag = 'Y';

 // PAR.STATUS = CND.No
 PAR.STATUS = 'N';

 //?USER: Process Data record

 CASE;

 // IF LCL.First Time Flag is Yes
 IF LCL.First_Time_Flag = 'Y';

 // LCL.PT Serial Number = DB1.PT Serial Number
 LCL.PT_Serial_Number = DB1.PT_Serial_Number;

 // LCL.Production Date = DB1.Production Date
 LCL.Production_Date = DB1.Production_Date;

 // LCL.First Time Flag = CND.NO
 LCL.First_Time_Flag = 'N';

 // IF *OTHERWISE
 IF *OTHERWISE;

 CASE;

 // IF LCL.PT Serial Number EQ DB1.PT Serial Number
 IF LCL.PT_Serial_Number = DB1.PT_Serial_Number;

 // AND LCL.Production Date EQ DB1.Production Date
 AND LCL.Production_Date = DB1.Production_Date;

 // PAR.STATUS = CND.Yes
 PAR.STATUS = 'Y';

 QUIT;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // LCL.PT Serial Number = DB1.PT Serial Number
 LCL.PT_Serial_Number = DB1.PT_Serial_Number;

 // LCL.Production Date = DB1.Production Date
 LCL.Production_Date = DB1.Production_Date;

 ENDIF;

 ENDIF;

}


// PGM.*Scan limit = CND.9999999
PGM.*Scan_limit = 9999999;

//?USER: Initialize subfile control

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// CTL.USR Quantity Accumulated = PAR.Quantity Shipped Total
CTL.USR_Quantity_Accumulated = PAR.Quantity_Shipped_Total;

// CTL.USR Weight Accumulated = PAR.Weight Shipped Total
CTL.USR_Weight_Accumulated = PAR.Weight_Shipped_Total;

// Call program RTV Item Descript.     XF.
CALL PROGRAM(RTV Item Descript.     XF) ('PDNGXFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(WRK.Description_Line_One);
PARAMETER(WRK.Description_Line_Two);

// CTL.USR Item Type Description = WRK.Description Line One
CTL.USR_Item_Type_Description = WRK.Description_Line_One;

// CTL.Weight Total 13.2     USR = CON.*ZERO
CTL.Weight_Total_13_2_USR = *ZERO;

// CTL.Quantity Adjustment 2 USR = CON.*ZERO
CTL.Quantity_Adjustment_2_USR = *ZERO;

EXECUTE FUNCTION(RTV Sum Qty and Wt    RT) TYPE(RTVOBJ) FILE(OMFNCPP)           AC1768596;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Quantity_Adjustment_2_USR);
PARAMETER(CTL.Weight_Total_13_2_USR);
{
 //?USER: Initialize routine

 //?RMC  chg from access path: Co/Ord/Item/Prod Date to RTV
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Weight Total 13.2     USR = PAR.Weight Total 13.2     USR + DB1.Case Weight
 PAR.Weight_Total_13_2_USR = PAR.Weight_Total_13_2_USR + DB1.Case_Weight;

 // PAR.Quantity 7.0 USR = PAR.Quantity 7.0 USR + DB1.Case Quantity
 PAR.Quantity_7_0_USR = PAR.Quantity_7_0_USR + DB1.Case_Quantity;

}


EXECUTE FUNCTION(RTV Warehouse Code RT) TYPE(RTVOBJ) FILE(OPBGWKP)              AC1577257;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(NLL.Price_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Initialize subfile record from DBF record

CASE;

// IF DB1.Item Code NE PAR.Item Code
IF DB1.Item_Code <> PAR.Item_Code;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

// IF DB1.PT Serial Number is Not Entered
IF DB1.PT_Serial_Number = *ZERO;

// AND DB1.Case Quantity is EQ *ZERO
AND DB1.Case_Quantity = *ZERO;

// AND DB1.Case Weight is EQ *ZERO
AND DB1.Case_Weight = *ZERO;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

EXECUTE FUNCTION(VAL Manifest Detail   RT) TYPE(RTVOBJ) FILE(POB2CPP)           AC1804110;
PARAMETER(RCD.Company_Number);
PARAMETER(RCD.Order_Number);
PARAMETER(RCD.Item_Code);
PARAMETER(RCD.PT_Serial_Number);
PARAMETER(RCD.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


//?DUP Cases
CASE;

// IF LCL.First Time Flag is Yes
IF LCL.First_Time_Flag = 'Y';

// LCL.PT Serial Number = RCD.PT Serial Number
LCL.PT_Serial_Number = RCD.PT_Serial_Number;

// LCL.Production Date = RCD.Production Date
LCL.Production_Date = RCD.Production_Date;

// LCL.First Time Flag = CND.NO
LCL.First_Time_Flag = 'N';

//?DUP Cases
// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF RCD.PT Serial Number EQ LCL.PT Serial Number
IF RCD.PT_Serial_Number = LCL.PT_Serial_Number;

// AND RCD.Production Date EQ LCL.Production Date
AND RCD.Production_Date = LCL.Production_Date;

// RCD.Text USR 4 = CON.DUP
RCD.Text_USR_4 = 'DUP';

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Text USR 4 = CON.*BLANK
RCD.Text_USR_4 = *BLANK;

// LCL.PT Serial Number = RCD.PT Serial Number
LCL.PT_Serial_Number = RCD.PT_Serial_Number;

// LCL.Production Date = RCD.Production Date
LCL.Production_Date = RCD.Production_Date;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

EXECUTE FUNCTION(RTV Company Name       RT) TYPE(RTVOBJ) FILE(CAABREP)          AC1255767;
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Company_Name);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program Dsp PFS Transactions  DF.
CALL PROGRAM(Dsp PFS Transactions  DF) ('PMW7DFR');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.USR_Item_Type_Description);

ENDIF;

CASE;

// IF CTL.*CMD key is CF11
IF CTL.*CMD_key = '11';

// Call program WW Ship Load/Order Sts DF.
CALL PROGRAM(WW Ship Load/Order Sts DF) ('PPVYDFR');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Order_Number);

ENDIF;

//?F21=Email Manifest Dtl - T11041 DN 08/02/17.
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// LCL.Email Address = CON.*BLANK
LCL.Email_Address = *BLANK;

// Call program Pmt Enter Email Addr  PV.
CALL PROGRAM(Pmt Enter Email Addr  PV) ('POWGPVR');
PARAMETER(LCL.Email_Address);

//?Export Data to Excel via SEQUEL.
CASE;

// IF LCL.Email Address is Entered
IF LCL.Email_Address <> *BLANK;

// Call program PRT Manifest Dtl SQL   CL.
SBMJOB;
CALL PROGRAM(PRT Manifest Dtl SQL   CL) ('PUDRUPC');
PARAMETER(CTL.Company_Number);
PARAMETER(CTL.Order_Number);
PARAMETER(CTL.Order_Sequence_Number);
PARAMETER(CTL.Order_Secondary_Line_Seq);
PARAMETER(CTL.Item_Code);
PARAMETER(CTL.Warehouse_Code);
PARAMETER(CTL.U_M_Ordered);
PARAMETER(LCL.Email_Address);
SBMJOBOVR JOB(PRTMANDTSH);
SBMJOBOVR JOBD(*USRPRF);
SBMJOBEND;

// Send information message - '&1'
MESSAGE(USR4976 *INFO);
MSGPARM('Job submitted.');

ENDIF;

ENDIF;

//?USER: Process command keys

CASE;

// IF CTL.*CMD key is *Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

