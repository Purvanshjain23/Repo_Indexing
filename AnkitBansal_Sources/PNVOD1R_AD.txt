// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNVOD1R
// ?Date: 14.08.2025 Time: 03:46:43
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('OMS');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV Default Co No App IF) TYPE(EXCINTFUN)                      AC1628378;
PARAMETER(LCL.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
 PARAMETER(JOB.*USER);
 PARAMETER(NLL.Allow_Multi_Company);
 PARAMETER(NLL.Default_Printer);
 PARAMETER(NLL.Salesperson_Code);
 PARAMETER(LCL.Company_Number);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.Company Number is Equal to zero
 IF LCL.Company_Number = *ZERO;

 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV First Default Co  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1628379;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV First Default Co  RT) TYPE(RTVOBJ) FILE(CADTREP)           AC1628379;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

 }

 ENDIF;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // PAR.Company Number = LCL.Company Number
 PAR.Company_Number = LCL.Company_Number;

 ENDIF;

}


//?USER: Load detail screen from DBF record

EXECUTE FUNCTION(RTV Market Price       RT) TYPE(RTVOBJ) FILE(OMF0CPP)          AC1199313;
PARAMETER(DB1.Commodity_Market_Code);
PARAMETER(DB1.Commodity_Price_Group);
PARAMETER(PAR.CIP_Price_Date);
PARAMETER(DTL.Market_Price);
PARAMETER(LCL.USR_Date_Priced);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Commodity Market Price = DB1.Commodity Market Price
 PAR.Commodity_Market_Price = DB1.Commodity_Market_Price;

 // PAR.USR Date Priced = DB1.Market Price Date
 PAR.USR_Date_Priced = DB1.Market_Price_Date;

 QUIT;

}


EXECUTE FUNCTION(Rtv Market Details    RT) TYPE(RTVOBJ) FILE(PNGBREP)           AC1989084;
PARAMETER(DB1.Item_Code);
PARAMETER(DB1.Commodity_Market_Code);
PARAMETER(NLL.Commodity_Price_Group);
PARAMETER(DTL.Market_Percent);
PARAMETER(DTL.Market_Prem_Ded);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// Call program RTV Pricing: CSFRTO   XF.
CALL PROGRAM(RTV Pricing: CSFRTO   XF) ('PNQ7XFR');
PARAMETER(*ZERO);
PARAMETER(DB1.Item_Code);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DTL.Freight_Rate_USR);
PARAMETER(LCL.Error_Return);

EXECUTE FUNCTION(Rtv CustItem Prc Elem RT) TYPE(RTVOBJ) FILE(PNF8REP)           AC1981910;
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(DB1.Item_Code);
PARAMETER('CITMOV');
PARAMETER(DTL.CIPE_Rate);
PARAMETER(DTL.CIPE_Rate_UOM);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(RTV Pricing: ACCRLS   IF) TYPE(EXCINTFUN)                      AC1824980;
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Price_Method_Code);
PARAMETER(DB1.Ship_To_Customer);
PARAMETER(PAR.CIP_Price_Date);
PARAMETER(DTL.Accrual_Pricing_USR);
PARAMETER(99);
PARAMETER(LCL.Error_Return);
PARAMETER(*ZERO);
{
 //?Execute internal function

 //?** Routine to Accumulate Accrual Rate
 CASE;

 // IF PAR.Event Called From is All Values
 IF PAR.Event_Called_From = '02'/'99'/**/'AO'/'AI';

 // LCL.Accrual Rate = CON.*ZERO
 LCL.Accrual_Rate = *ZERO;

 //?** This will read all accrual codes that are setup for the
 //?** ShipTo customer and accumulate the Accrual Rates.
 //?** If Actual Shipped Date is zeros, use Requested Ship Date
 CASE;

 // IF PAR.Actual Shipped Date is entered
 IF PAR.Actual_Shipped_Date <> *ZERO;

 // WRK.USR Date Shipped = PAR.Actual Shipped Date
 WRK.USR_Date_Shipped = PAR.Actual_Shipped_Date;

 //?** If Actual Shipped Date is zeros, use Requested Ship Date
 // IF *OTHERWISE
 IF *OTHERWISE;

 // WRK.USR Date Shipped = PAR.Requested Ship Date
 WRK.USR_Date_Shipped = PAR.Requested_Ship_Date;

 ENDIF;

 EXECUTE FUNCTION(Rtv Accrual Info      RT) TYPE(RTVOBJ) FILE(OMHOREP)           AC1626347;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(WRK.Accrual_Code);
 PARAMETER(1);
 PARAMETER(WRK.USR_Date_Shipped);
 PARAMETER(WRK.Period_Ending_Date);
 PARAMETER(WRK.Accrual_Rate);
 PARAMETER(NLL.All_Products_Y_N);
 PARAMETER(NLL.Accrual_Rate_Type);
 PARAMETER(NLL.Comm_Threshold_Period);
 PARAMETER(NLL.CAH_Unused_Date_1);
 PARAMETER(NLL.CAH_Unused_Date_2);
 PARAMETER(NLL.Comm_Min_Amt_Period);
 PARAMETER(NLL.Comm_Retroactive_Sts);
 PARAMETER(NLL.Accrual_Detail_Search);
 PARAMETER(NLL.Broker_Code);
 PARAMETER(NLL.Max_Accrual_Amount);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Order_Number);
 PARAMETER(PAR.Item_Code);
 {
  //?USER: Initialize routine

  // PAR.Pricing Retrieved Amount = CON.*ZERO
  PAR.Pricing_Retrieved_Amount = *ZERO;

  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?** The par.period begin date is either the Actual Shipped date
  //?** from the Order Detail file unless it is zeros, then it is
  //?** replaced by the Requested Ship Date.
  //?** Select the record where the ASD is within the date range
  CASE;

  // IF PAR.Period Beginning Date GE DB1.Period Beginning Date
  IF PAR.Period_Beginning_Date >= DB1.Period_Beginning_Date;

  // AND PAR.Period Beginning Date LE DB1.Period Ending Date
  AND PAR.Period_Beginning_Date <= DB1.Period_Ending_Date;

  EXECUTE FUNCTION(RTV Accrual Info-All   RT) TYPE(RTVOBJ) FILE(OMHLREP)          AC1825083;
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(NLL.Accrual_Description);
  PARAMETER(NLL.Automatic_Accrual_Y_N);
  PARAMETER(NLL.Print_On_Invoice_Y_N);
  PARAMETER(NLL.Rate_Usage);
  PARAMETER(LCL.Add_on_Allowance);
  PARAMETER(NLL.Accrual_Type);
  PARAMETER(NLL.Sub_Ledger_Code);
  PARAMETER(NLL.Reverse_Accrual_Code);
  PARAMETER(NLL.UOM_Primary_Dft);
  PARAMETER(NLL.G_L_Code_Dr);
  PARAMETER(NLL.G_L_Code_Cr);
  PARAMETER(NLL.G_L_Sub_Account_Code);
  PARAMETER(NLL.Sales_History_Exp_Bucket);
  PARAMETER(NLL.Post_to_G_L_Y_N);
  PARAMETER(NLL.All_Products_Y_N);
  PARAMETER(NLL.Accrual_Rate);
  PARAMETER(NLL.Accrual_Rate_Type);
  PARAMETER(NLL.Accrual_Detail_Search);
  PARAMETER(NLL.Standard_Schedule_Y_N);
  PARAMETER(NLL.Affect_Sales_Realz_Rpt);
  PARAMETER(LCL.Affect_Invoice_Price);
  PARAMETER(NLL.Invoice_Print_Type);
  PARAMETER(NLL.Max_Accrual_Amount);
  PARAMETER(NLL.Max_Accrual_Amount_Type);
  PARAMETER(NLL.Record_Status);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.Affect Invoice Price is yes
  IF LCL.Affect_Invoice_Price = 'Y';

  //?** Accumulate rate based on All Products Y/N value
  CASE;

  // IF DB1.All Products (Y/N) is Yes
  IF DB1.All_Products_Y_N = 'Y';

  // LCL.Accrual Rate = DB1.Accrual Rate
  LCL.Accrual_Rate = DB1.Accrual_Rate;

  //?** If YES, then use the rate from the Customer Accrual record
  CASE;

  // IF LCL.Add-on/Allowance is Allowance
  IF LCL.Add_on_Allowance = 'S';

  // LCL.Accrual Rate = CON.*ZERO - DB1.Accrual Rate
  LCL.Accrual_Rate = *ZERO - DB1.Accrual_Rate;

  ENDIF;

  // PAR.Pricing Retrieved Amount = PAR.Pricing Retrieved Amount + LCL.Accrual Rate
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount + LCL.Accrual_Rate;

  //?** Accumulate rate based on All Products Y/N value
  // IF DB1.All Products (Y/N) is Yes + Exceptions
  IF DB1.All_Products_Y_N = 'X';

  //?** If YES + Exceptions, then add the rate from either the Customer
  //?** Accrual Str or Customer Accrual Item file. The value in
  //?** the Accrual Detail Search field will determine which file.
  //?** If no record in either file then add the Customer Accural rate
  //?Retrieve Accrual Rate
  CASE;

  // IF DB1.Accrual Detail Search is Item
  IF DB1.Accrual_Detail_Search = 'I';

  EXECUTE FUNCTION(Rtv Item Accrual Rate RT) TYPE(RTVOBJ) FILE(OMHPREP)           AC1613037;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Accrual_Rate);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?Retrieve Accrual Rate
  // IF DB1.Accrual Detail Search is Item Structure
  IF DB1.Accrual_Detail_Search = 'S';

  //?** Retrieve the Item Structure fields from the Order Detail
  EXECUTE FUNCTION(Rtv Item FOB Price    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1559616;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(NLL.Price_Overage_Override);
  PARAMETER(NLL.Contract_Number);
  PARAMETER(NLL.Price_Status);
  PARAMETER(NLL.U_M_Ordered);
  PARAMETER(NLL.Unit_Price);
  PARAMETER(NLL.Unit_Price_Credit);
  PARAMETER(NLL.Unit_Price_Ordered_U_M);
  PARAMETER(NLL.Unit_Weight_Ordered_U_M);
  PARAMETER(NLL.Actual_Shipped_Date);
  PARAMETER(NLL.Affect_Inventory_Status);
  PARAMETER(NLL.Affect_Sales_Doll_Status);
  PARAMETER(NLL.Affect_Sales_Pnds_Status);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(NLL.Affect_Trade_Fund);
  PARAMETER(NLL.Affect_Commission);
  PARAMETER(NLL.Affect_Pricing);
  PARAMETER(NLL.Ord_TF_Exempt_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?PKD/SZ 07/20/09 Should check with Type/Group/Class first then just
  //?                Type/Group.
  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(LCL.Accrual_Rate);
  PARAMETER(NLL.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Check for item str type/group without the class  RMC 08/07/07
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Check for item str type/group without the class  RMC 08/07/07
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Accrual_Rate);
  PARAMETER(NLL.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  ENDIF;

  ENDIF;

  //?SZ 07/17/09 commented out. was overlaying when the accrual exception was 0
  //?PKD/SZ 07/20/09 -- Needed to check if the Item was found or not.
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?PKD/SZ 07/20/09 -- Needed to check if the Item was found or not.
  // IF *OTHERWISE
  IF *OTHERWISE;

  // LCL.Accrual Rate = DB1.Accrual Rate
  LCL.Accrual_Rate = DB1.Accrual_Rate;

  ENDIF;

  CASE;

  // IF LCL.Add-on/Allowance is Allowance
  IF LCL.Add_on_Allowance = 'S';

  // LCL.Accrual Rate = CON.*ZERO - LCL.Accrual Rate
  LCL.Accrual_Rate = *ZERO - LCL.Accrual_Rate;

  ENDIF;

  // PAR.Pricing Retrieved Amount = PAR.Pricing Retrieved Amount + LCL.Accrual Rate
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount + LCL.Accrual_Rate;

  //?** Accumulate rate based on All Products Y/N value
  // IF DB1.All Products (Y/N) is No
  IF DB1.All_Products_Y_N = 'N';

  //?** If NO, then only accumulate the rate if there is a record
  //?** in either the Customer Accrual Str or Customer Accrual Item
  //?** file. If no record in either file, just add zeros.
  CASE;

  // IF DB1.Accrual Detail Search is Item
  IF DB1.Accrual_Detail_Search = 'I';

  EXECUTE FUNCTION(Rtv Item Accrual Rate RT) TYPE(RTVOBJ) FILE(OMHPREP)           AC1613037;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Code);
  PARAMETER(LCL.Accrual_Rate);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF DB1.Accrual Detail Search is Item Structure
  IF DB1.Accrual_Detail_Search = 'S';

  EXECUTE FUNCTION(Rtv Item FOB Price    RT) TYPE(RTVOBJ) FILE(OPBGWKP)           AC1559616;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(NLL.Price_Overage_Override);
  PARAMETER(NLL.Contract_Number);
  PARAMETER(NLL.Price_Status);
  PARAMETER(NLL.U_M_Ordered);
  PARAMETER(NLL.Unit_Price);
  PARAMETER(NLL.Unit_Price_Credit);
  PARAMETER(NLL.Unit_Price_Ordered_U_M);
  PARAMETER(NLL.Unit_Weight_Ordered_U_M);
  PARAMETER(NLL.Actual_Shipped_Date);
  PARAMETER(NLL.Affect_Inventory_Status);
  PARAMETER(NLL.Affect_Sales_Doll_Status);
  PARAMETER(NLL.Affect_Sales_Pnds_Status);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(NLL.Affect_Trade_Fund);
  PARAMETER(NLL.Affect_Commission);
  PARAMETER(NLL.Affect_Pricing);
  PARAMETER(NLL.Ord_TF_Exempt_Code);
  {
   //?USER: Processing if Data record not found

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF PAR.Item Structure Type Code is Not Entered
  IF PAR.Item_Structure_Type_Code = *ZERO;

  // OR PAR.Item Structure Group Code is Not Entered
  OR PAR.Item_Structure_Group_Code = *ZERO;

  EXECUTE FUNCTION(Rtv Item Typ/Grp/Cls  RT) TYPE(RTVOBJ) FILE(CABZREP)           AC1298334;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Type_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(PAR.Item_Structure_Class_Code);
  PARAMETER(LCL.Accrual_Rate);
  PARAMETER(NLL.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  //?Check for item str type/group without the class  RMC 08/07/07
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Check for item str type/group without the class  RMC 08/07/07
  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV & Chk Rate Exists RT) TYPE(RTVOBJ) FILE(POC8REP)           AC1679311;
  PARAMETER(PAR.Ship_To_Customer);
  PARAMETER(DB1.Accrual_Code);
  PARAMETER(DB1.CAH_Sequence_No);
  PARAMETER(PAR.Item_Structure_Type_Code);
  PARAMETER(PAR.Item_Structure_Group_Code);
  PARAMETER(*ZERO);
  PARAMETER(LCL.Accrual_Rate);
  PARAMETER(NLL.Accrual_Rate_Type);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   MOVE *ALL (To: PAR From: CON);

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

   // PGM.*Return code = CND.*Normal
   PGM.*Return_code = *BLANK;

  }

  ENDIF;

  ENDIF;

  CASE;

  // IF LCL.Add-on/Allowance is Allowance
  IF LCL.Add_on_Allowance = 'S';

  // LCL.Accrual Rate = CON.*ZERO - LCL.Accrual Rate
  LCL.Accrual_Rate = *ZERO - LCL.Accrual_Rate;

  ENDIF;

  // PAR.Pricing Retrieved Amount = PAR.Pricing Retrieved Amount + LCL.Accrual Rate
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount + LCL.Accrual_Rate;

  ENDIF;

  ENDIF;

  ENDIF;

  //?USER: Exit processing

  EXECUTE FUNCTION(RTV Item Pricing Info  RT) TYPE(RTVOBJ) FILE(CABZREP)          AC1412083;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(NLL.UOM_Primary);
  PARAMETER(NLL.Conversion_Factor_1);
  PARAMETER(NLL.Operation_Factor_1);
  PARAMETER(NLL.UOM_Second);
  PARAMETER(NLL.Conversion_Factor_2);
  PARAMETER(NLL.Operation_Factor_2);
  PARAMETER(NLL.UOM_Third);
  PARAMETER(LCL.UOM_Pricing);
  PARAMETER(NLL.Unit_Weight);
  PARAMETER(NLL.Production_Date_Control);
  PARAMETER(NLL.Catch_Weight_Status);
  PARAMETER(NLL.Default_Commod_Mark_basis);
  PARAMETER(NLL.Commodity_Price_Group);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  CASE;

  // IF LCL.U/M - Pricing is Carcass Hundred Weight
  IF LCL.UOM_Pricing = 'CW';

  // OR LCL.U/M - Pricing is Thousand
  OR LCL.UOM_Pricing = 'M';

  // OR LCL.U/M - Pricing is Tons
  OR LCL.UOM_Pricing = 'TN';

  //?Hundred Weight
  CASE;

  // IF LCL.U/M - Pricing is Hundred Weight
  IF LCL.UOM_Pricing = 'CW';

  // PAR.Pricing Retrieved Amount =       *
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount * 100 'H';

  ENDIF;

  //?Thousand
  CASE;

  // IF LCL.U/M - Pricing is Thousand
  IF LCL.UOM_Pricing = 'M';

  // PAR.Pricing Retrieved Amount =       *
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount * 1000 'H';

  ENDIF;

  //?Tons
  CASE;

  // IF LCL.U/M - Pricing is Tons
  IF LCL.UOM_Pricing = 'TN';

  // PAR.Pricing Retrieved Amount =       *
  PAR.Pricing_Retrieved_Amount = PAR.Pricing_Retrieved_Amount * 2000 'H';

  ENDIF;

  ENDIF;

 }

 ENDIF;

 //?** Convert Price to CWT
 CASE;

 // IF PAR.Pricing Retrieved Amount is Not Zeros
 IF PAR.Pricing_Retrieved_Amount <> *ZERO;

 // Call program CLC Convert Price - CW XF.
 CALL PROGRAM(CLC Convert Price - CW XF) ('PDKUXFR');
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Item_Code);
 PARAMETER(PAR.Pricing_Retrieved_Amount);
 PARAMETER(PAR.Price_Adjustment_Amount);

 // PAR.Pricing Retrieved Amount = PAR.Price Adjustment Amount
 PAR.Pricing_Retrieved_Amount = PAR.Price_Adjustment_Amount;

 ENDIF;

 //?Conversion Documentation
 DO;

 //?*****
 //?** 05/25/2007 LJB DLY029
 //?** Accumulate rate for all Accrual Codes for this Ship To
 //?** Customer based on the value in the All Products Y/N field
 //?**
 //?** If Actual Shipped Date is zeros, use the Requested Ship Date.
 //?**
 //?** If YES, then use the rate from the Customer Accrual record.
 //?**
 //?** If YES + EXCEPTIONS, then use the rate from either the Customer
 //?** Accrual Structure or Customer Accrual Item file which is based
 //?** on the value in Accrual Detail Search field. If no record in
 //?** either file, then use the rate in the Customer Accrual record.
 //?**
 //?** If NO, then only accumulate the rate if there is a record
 //?** in either the Customer Accrual Str or Customer Accrual Item
 //?** file. If no record in either file, just add zeros.
 //?**
 //?** Price will be converted to CWT
 //?*****
 ENDDO;

}


//?USER: Process command keys

CASE;

// IF DTL.*CMD key is CF10
IF DTL.*CMD_key = '10';

// Call program WW Cust Accruals-Dsp  DF.
CALL PROGRAM(WW Cust Accruals-Dsp  DF) ('PPB2DFR');
PARAMETER(DTL.Ship_To_Customer);

ENDIF;

