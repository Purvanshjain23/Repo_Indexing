      *****************  RPG PROGRAM HEADING  ************************
      *
      * SYSTEM:      HOG PRODUCTION
      * PROGRAM:     HP701
      * TITLE:       VIEW MOVEMENTS FOR A GROUP
      * PROGRAMMER:  LEANNE FEDOR
      * CREATED:     06/22/95
      *
      * FUNCTION: THIS VIEW PROGRAM DISPLAYS THE MOVEMENTS FOR A GROUP.
      *
      *           RESTRICTORS:  HOG GROUP
      *           POSITIONERS:  MOVEMENT EVENT DATE
      *           SELECTORS:    MOVEMENT STATUS
      *                         MOVEMENT NUMBER
      *                         MOVEMENT TYPE
      *                         ORIGIN/DESTINATION FLAG
      *
      *           IT LOADS THE SUBFILE A PAGE AT A TIME.
      *           IT USES THE STANDARD MESSAGE HANDLING PROGRAM.
      *
      ****************************************************************
      * MODIFICATIONS:
      ****************************************************************
      * DATE      PROGRAMMER
      *
      * 11/01/95  LEANNE FEDOR
      *           RECOMPILE ONLY. NEW FIELD 'GROUP TYPE' ADDED TO
      *           HOG GROUP FILE.
      *
      * 02/06/96  LEANNE FEDOR
      *           RECOMPILE ONLY. NEW FIELD 'BOL PRINTED COUNT' ADDED
      *           TO SALES MOVEMENT HEADER FILE.
      *
      * 02/13/96  LEANNE FEDOR
      *           RECOMPILE ONLY. NEW FIELD 'BOL PRINTED COUNT' ADDED
      *           TO TRANSFER MOVEMENT HEADER FILE.
      *
      * 05/13/96  LEANNE FEDOR
      *           MADE CHANGES TO FACILITATE NEW JDE RELEASE CONVERSION
      *           CHANGED SEARCH TYPE TO 3A.
      *
      * 03/18/97  LEANNE FEDOR
      *           RECOMPILE ONLY. UPDATE TIME STAMP ADDED TO MOVEMENT
      *           EVENT FILE.
      *
      * 06/03/97  LEANNE FEDOR
      *           RECOMPILE ONLY. NEW FIELDS 'PURGE FLAG' AND 'DATE OF
      *           FIRST PURGE' ADDED TO HOG GROUP FILE.
      *
      * 02/16/98  LeAnne Fedor
      *           Recompile only. Added the following fields to the
      *           database for sales movement detail and check detail:
      *                     condemned head and pounds
      *                     yard dead head and pounds
      *
      * 04/13/98  LeAnne Fedor
      *           Recompile only. New field 'state' added to farm site file.
      *
      * 01/11/99  LeAnne Fedor
      *           Recompile only. New field 'scheduled kill date' added
      *           to sales movement header file.
      *
      * 01/04/00  LeAnne Fedor
      *           Added new selector on 'movement status'.
      *
      * 09/07/00  LeAnne Fedor
      *           Added an option to 'view' the detail on sales or transfer
      *           movements.
      *
      * 10/17/00  LeAnne Fedor
      *           Recompile only. New field 'load type' added to the sales
      *
      * 06/05/01  LeAnne Fedor
      *           Recompile only. New field 'multisite' added to Farm Site file.
      *
      * 06/28/01  LeAnne Fedor
      *           Recompile only.
      *           Three fields (manager/supervisor/multisite) renamed in Farm Site file.
      *           Manager and supervisor fields removed from Hog Group file.
      *
      * 09/04/01  LeAnne Fedor
      *           Recompile only. New 'square feet' fields added to Farm Site file.
      *
      * 12/11/02  LeAnne Fedor
      *           Per AMB, make the 'head column' logic like the logic in HP686-Hog
      *           Group Review.
      *
      * 07/06/09  LeAnne Ramsey
      *           Recompile only. Added new field 'Continuous Flow Flag' to Hog Group file.
      *
      * 10/16/13  LeAnne Ramsey (E2831)
      *           Recompile only. Added field 'MTech Reference'.
      /EJECT
      ****************************************************************
      * FILE SPECIFICATIONS
      ****************************************************************
      *
     FHPD701    CF   E             WORKSTN SFILE(HP701S1:HDRRN1)
     F                                     INFDS(IOFEED)
      *
     FHSP009    IF   E           K DISK
      *    BUSINESS OFFICE
      *
      *
     FHSP018    IF   E           K DISK
      *    FARM SITE
      *
      *
     FHSL034D   IF   E           K DISK
      *  HOG GROUPS
      *
      *
     FHSL058C   IF   E           K DISK    INFDS(DBFEED)
      *  MOVEMENT EVENT
      *
      *
     FHSP068    IF   E           K DISK
      *  KILLED/DEAD HOGS
      *
      *
     FHSP069    IF   E           K DISK
      *  INVENTORY ADJUSTMENT
      *
      *
     FHSP074    IF   E           K DISK
      *  TRANSFER HEADER
      *
      *
     FHSP075    IF   E           K DISK
      *  TRANSFER MOVEMENT DETAIL
      *
      *
     FHSP084    IF   E           K DISK
      *  SALE HEADER
      *
      *
     FHSP085    IF   E           K DISK
      *  SALE DETAIL
      *
      /EJECT
      ****************************************************************
      * Definition Specifications
      ****************************************************************
      *
      *---------------------------------------------------------------
      * STANDARD ERROR MESSAGE HANDLING DATA STRUCTURES
      *---------------------------------------------------------------
      *
      * FOR ERROR MESSAGE HANDLING, A PACKED INDEX (E) IS REQUIRED.
      * FOR PROGRAM READABILITY, DEFINE A CORRESPONDING ERROR COUNT
      * FIELD CALLED 'ERROR'
      *
     D                 DS                  INZ
     D  ERROR                  1      2P 0
     D  E                      1      2P 0
      *
      * THIS DATA STRUCTURE SUPPLIES THE NAME OF THE MESSAGE FILE TO
      * THE MESSAGE HANDLING CL PROGRAM.  THE FIELD NAME MSGFIL MUST BE
      * CONSTANT. THE VALUE IN QUOTES IS THE NAME OF THE SPECIFIC
      * MESSAGE FILE CONTAINING THE USER DEFINED MESSAGES.
      *
     D                 DS                  INZ
     D  MSGFIL                 1     10    INZ('HSMSGF    ')
      *
      * THE FOLLOWING 3 DATA STRUCTURES ARE USED TO SPEED MESSAGE
      * HANDLING SINCE IT IS FASTER TO CLEAR DATA STRUCTURES THAN
      * ARRAYS.  EACH IS ASSOCIATED WITH A STANDARD MESSAGE ARRAY.
      *
     D MGI             DS           140    INZ
     D  MGID                   1    140
     D                                     DIM(20)                              MSG ID ARRAY
      *
     D MGD             DS          1000    INZ
     D  MGDT                   1   1000
     D                                     DIM(20)                              MSG PARMS
      *
     D MGWK            DS            50    INZ
     D  MGW                    1     50
     D                                     DIM(50)                              MSG WORK PARMS
      *
      *---------------------------------------------------------------
      * STANDARD PROGRAM STATUS DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTPGFR (RECORD FORMAT: PGMDSR)
     D PGMDS         ESDS                  EXTNAME(UTPGFR)
      *
      *---------------------------------------------------------------
      * STANDARD WORKSTATION INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTWSFR (RECORD FORMAT: UTIDFRR)
     D IOFEED        E DS                  EXTNAME(UTWSFR)
      *
      *---------------------------------------------------------------
      * STANDARD DATABASE FILE INFORMATION DATA STRUCTURE
      *---------------------------------------------------------------
      *    EXTERNALLY DEFINED AS UTDBFR (RECORD FORMAT: FDBCKD)
     D DBFEED        E DS                  EXTNAME(UTDBFR)
      *
      *---------------------------------------------------------------
      *STANDARD SUBFILE SELECTOR CONVERSION
      *---------------------------------------------------------------
     D                 DS
     D  DFOPT                  1      2
     D  WKOPT1                 1      1
     D  WKOPT2                 2      2
      *---------------------------------------------------------------
      *  DATE FORMATS
      *---------------------------------------------------------------
      *
      * DATE IN MMDDYY FORMAT
      *
     D                 DS
     D  WKMDY                  1      6  0
     D  WKMM                   1      2  0
     D  WKDD                   3      4  0
     D  WKYY                   5      6  0
      *
      * DATE IN CCYYMMDD FORMAT
      *
     D                 DS
     D  WKCYMD                 1      8  0
     D  WKCEN                  1      2  0
     D  WKYER                  3      4  0
     D  WKMON                  5      6  0
     D  WKDAY                  7      8  0
      *
      *---------------------------------------------------------------
      *  NAMED CONSTANTS
      *---------------------------------------------------------------
      *
     D YES             C                   CONST('Y')
     D NO              C                   CONST('N')
     D SET1            C                   CONST('SET1  ')
     D EDIT1           C                   CONST('EDIT1 ')
     D SCRN1           C                   CONST('SCRN1 ')
     D EXIT            C                   CONST('EXIT  ')
      *
      * The following is a dummy C-spec to keep the D-specs from
      * running over into the C-specs on the compile listing. It
      * serves no other purpose and can be deleted at any time.
      *
     C                   if        sdpgm = *blank
     C                   endif
      /EJECT
      ****************************************************************
      * MAIN LINE
      ****************************************************************
      *
     C                   MOVEL     SET1          ROUTNE
      *
     C     *INLR         DOWEQ     *OFF                                         MAIN DO LOOP
     C     ROUTNE        CASEQ     SET1          $SET1
     C     ROUTNE        CASEQ     SCRN1         $SCRN1
     C     ROUTNE        CASEQ     EDIT1         $EDIT1
     C     ROUTNE        CASEQ     EXIT          $EXIT
     C                   ENDCS
     C                   ENDDO                                                  MAIN DO LOOP
      /EJECT
      *----------------------------------------------------------------
      * $SET1 - SUBROUTINE TO SET ENVIRONMENT FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SET1         BEGSR
      *
      *  CLEAR/FILL THE SUBFILE
      *
     C                   EXSR      $CLR1
     C                   EXSR      $FRSH1
      *
      *  SET ROUTINE TO DISPLAY SCREEN
      *
     C                   MOVEL     SCRN1         ROUTNE
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $SCRN1 - SUBROUTINE TO PERFORM OPERATOR I/O FOR SCREEN 1
      *----------------------------------------------------------------
      *
     C     $SCRN1        BEGSR
      *
      * WRITE THE ERROR MESSAGES FROM THE ERROR ARRAYS TO THE
      * ERROR MESSAGE SUBFILE
      *
     C                   EXSR      $WRMSG
      *
      * WRITE SCREEN 1 TO CRT
      *
     C                   WRITE     HP701K1
     C                   WRITE     HP701EC
     C                   EXFMT     HP701C1
      *
     C                   SETOFF                                       555657
      *
      * SET THE 'RESET' FLAG TO NO.  THIS FLAG IS USED TO DETERMINE
      * WHETHER TO REPOSITION THE USER TO A PARTICULAR PLACE IN THE
      * SUBFILE (RESET=YES) OR TO PLACE THE USER AT THE BEGINNNING OF
      * THE SUBFILE (RESET=NO)
      *
     C                   MOVEL     NO            RESET
      *
      * SAVE THE VALUE OF THE LOWEST SUBFILE RRN ON THE SCREEN FOR
      * LATER REPOSITIONING THE SUBFILE
      *
     C                   Z-ADD     IDFLOW        WKFLOW
      *
      * CLEAR THE MESSAGES FROM THE MESSAGE DATA STRUCTURES
      * AND PROGRAM MESSAGE QUEUE.
      *
     C                   EXSR      $CLMSG
      *
      * INITIALIZE THE RETURN CODE
      *
     C                   MOVEL     '00'          RTNCD
      *
      * GET USER'S ENTRY, SET THE RETURN CODE ACCORDING TO THE FUNCTION
      * KEY TAKEN BY THE USER, SET THE NEXT ROUTINE
      *
     C                   SELECT
     C     *IN03         WHENEQ    *ON                                          F3-EXIT
     C                   MOVEL     '03'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
      *
      * REPOSITION THE SUBFILE IF THE USER HAS CHANGED ANY OF THE
      * POSITIONERS OR SELECTORS IN THE CONTROL RECORD OR PROMPTED
      *
     C     *IN04         WHENEQ    *ON                                          F4-PROMPT
     C     SVMDY         ORNE      C1MDY
     C     SVMVSN        ORNE      C1MVSN
     C     SVMSCD        ORNE      C1MSCD
     C     SVMTCD        ORNE      C1MTCD
     C     SVODFL        ORNE      C1ODFL
     C     SVHG          ORNE      C1HG
     C     SVCVNO        ORNE      C1CVNO
      *
     C     *IN04         IFEQ      *ON
     C                   EXSR      $F4S1
     C                   ENDIF
      *
      * FLIP THE DATE FROM MMDDYY TO CCYYMMDD FOR KEYING PURPOSES
      *
     C                   Z-ADD     0             WKMEDT
     C     C1MDY         IFNE      SVMDY                                        IF DIFF DATE
     C     C1MDY         ANDNE     0
     C                   Z-ADD     C1MDY         PFRM8
     C                   EXSR      $DATE
     C     PRTRN         IFNE      *BLANK                                       IF INVALID
     C                   ELSE
     C                   Z-ADD     PTO8          WKMEDT
     C                   ENDIF                                                  IF INVALID
     C                   ENDIF                                                  IF DIFF DATE
      *
     C                   MOVEL     NO            RESET
     C                   MOVEL     SET1          ROUTNE
     C                   Z-ADD     C1MDY         SVMDY
     C                   Z-ADD     C1MVSN        SVMVSN
     C                   MOVEL     C1MSCD        SVMSCD
     C                   MOVEL     C1MTCD        SVMTCD
     C                   MOVEL     C1ODFL        SVODFL
     C                   MOVEL     C1HG          SVHG
     C                   Z-ADD     C1CVNO        SVCVNO
      *
     C     *IN05         WHENEQ    *ON                                          F5-REFRESH
     C                   MOVEL     YES           RESET
     C                   MOVEL     SET1          ROUTNE
      *
     C     *IN12         WHENEQ    *ON                                          F12-PREVIOUS
     C                   MOVEL     '12'          RTNCD
     C                   MOVEL     EXIT          ROUTNE
      *
     C     *IN25         WHENEQ    *ON                                          F25-ROLLUP
     C                   EXSR      $LOAD1
     C                   MOVEL     SCRN1         ROUTNE
     C                   OTHER
      *
      * USER HAS PRESSED ENTER. (NOTE: WE TYPICALLY EXIT
      * FROM A 'VIEW' PROGRAM WHEN THE USER PRESSES ENTER. BUT,
      * IN THIS VIEW THERE ARE SUBFILE OPTIONS AND SELECTORS.)
      *
     C                   MOVEL     EDIT1         ROUTNE
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $EDIT1 - SUBROUTINE TO EDIT INPUT FIELDS FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $EDIT1        BEGSR
      *
      * INITIALIZE CALLED PROGRAM FLAG
      *
     C                   MOVEL     NO            CALFLG
      *
      * FIRST, EDIT ALL THE SELECTIONS ENTERED BY THE USER IN THE
      * SUBFILE OPTION FIELD, TO SEE THAT VALID SELECTIONS WERE INPUT
      *
     C                   EXSR      $EDOP1
      *
      * IF THERE ARE NO ERRORS IN THE SUBFILE OPTION SELECTORS ENTERED
      * BY THE USER, THEN READ THE SELECTED SUBFILE RECORDS AND PROCESS
      *
     C     ERROR         IFEQ      0                                            IF NO ERROR
     C                   EXSR      $PROC1
     C                   ENDIF                                                  IF NO ERROR
      *
      * IF THERE ARE NO ERRORS,
      *
     C     ERROR         IFEQ      0                                            IF STILL OK
      *
     C                   SELECT
     C     CALFLG        WHENEQ    YES
     C                   Z-ADD     WKFLOW        HDPAG1
     C                   MOVEL     SCRN1         ROUTNE
     C                   OTHER
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDSL
     C                   ELSE
      *
      * IF THERE ARE SUBFILE ERRORS, SET THE SCREEN TO REDISPLAY
      *
     C                   MOVEL     SCRN1         ROUTNE
     C                   ENDIF                                                  IF STILL OK
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $EDOP1 - SUBROUTINE TO READ CHANGED RECORDS IN SUBFILE AND
      *          EDIT FOR VALID SUBFILE OPTIONS FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $EDOP1        BEGSR
      *
      * SET ON MDT
     C                   SETON                                        85
      *
      * READ ALL THE CHANGED SUBFILE RECORDS EDITING FOR VALID SUBFILE
      * SELECTOR OPTIONS
      *
     C                   SETOFF                                       80
     C     *IN80         DOUEQ     *ON                                          DO READ C
     C                   READC     HP701S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
      *
      * SET OFF ERROR INDICATOR FOR SUBFILE OPTION
      *
     C                   SETOFF                                       30
      *
      * CONVERT OPTION USER ENTERED TO STANDARD FORMAT. FOR EXAMPLE,
      * A ' 1', '01', AND '1 ' MUST BE STANDARDIZED TO ' 1'.
      *
     C     WKOPT2        IFEQ      *BLANK                                       IF 2 = BLANK
     C                   MOVE      WKOPT1        WKOPT2
     C                   MOVE      *BLANK        WKOPT1
     C                   ENDIF                                                  IF 2 = BLANK
      *
     C     WKOPT1        IFEQ      *ZERO                                        IF 1 IS ZERO
     C                   MOVE      *BLANK        WKOPT1
     C                   ENDIF                                                  IF 1 IS ZERO
      *
      * TEST FOR VALID SUBFILE OPTION ENTRY
      *
     C                   SELECT
     C                   WHEN      DFOPT = *BLANK
      *
     C                   WHEN      DFOPT <> ' 5'
     C                   SETON                                        30
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09006'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
      *
     C                   WHEN      DFMTCD <> 'T' AND DFMTCD <> 'S'
     C                   SETON                                        30
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09143'     MGID(E)
     C                   EXSR      $ERR1
     C                   ENDIF
      *
     C                   ENDSL
      *
     C                   UPDATE    HP701S1
     C                   SETOFF                                       30
     C                   ENDIF                                                  IF REC READ
     C                   ENDDO                                                  DO READ C
      * RESET MDT
     C                   SETOFF                                       85
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $PROC1 - SUBROUTINE TO READ AND EDIT CHANGED SUBFILE RECORDS
      *          FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $PROC1        BEGSR
      *
     C                   MOVEL     '00'          RTNCD
      *
      * READ ALL THE CHANGED SUBFILE RECORDS PROCESSING THE SUBFILE
      * SELECTION
      *
     C     *IN80         DOUEQ     *ON                                          DO PROCESS
     C                   READC     HP701S1                                80
     C     *IN80         IFEQ      *OFF                                         IF REC READ
      *
     C     RTNCD         IFEQ      '00'                                         IF ENTER
      *
      * NOW, IF THE USER HAS ENTERED A SUBFILE OPTION, GO PERFORM
      * THAT PROCESSING IF THERE ARE NO ERRORS.
      *
     C                   MOVEL     NO            CALFLG
      *
      * VIEW DETAIL ON SALES OR TRANSFER MOVEMENTS.
      *
     C     DFOPT         IFEQ      ' 5'
     C                   MOVEL     YES           CALFLG
     C                   MOVEL     YES           RESET
      *
     C                   SELECT
     C                   WHEN      DFMTCD = 'T'
     C                   CALL      'HP739'
     C                   PARM                    DFMVSN
     C                   PARM                    DFMSCD
     C                   PARM                    RTNCD
      *
     C                   WHEN      DFMTCD = 'S'
     C                   CALL      'HP746'
     C                   PARM                    DFMVSN
     C                   PARM                    DFMSCD
     C                   PARM                    RTNCD
     C                   ENDSL
      *
     C                   ENDIF
      *
      * CLEAR THE SUBFILE OPTION ENTERED BY THE USER
      *
     C                   MOVE      *BLANK        DFOPT
     C                   SETOFF                                       85
     C                   ELSE
     C                   SETON                                        85
     C                   ENDIF                                                  IF ENTER
      *
     C                   UPDATE    HP701S1
      *
     C                   ENDIF                                                  IF REC READ
     C                   ENDDO                                                  DO PROCESS
      * SET MDT
     C                   SETOFF                                       85
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $CLR1  - SUBROUTINE TO CLEAR THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $CLR1         BEGSR
      *
     C                   Z-ADD     0             SVRRN1
      *
     C                   CLEAR                   HP701S1
     C                   SETON                                        83        SFLCLR
     C                   WRITE     HP701C1
     C                   SETOFF                                       818283
      *                                                    81=SFLDSP
      *                                                    82=SFLEND
      *                                                    83=SFLCLR
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $FRSH1 - SUBROUTINE TO REFRESH/FILL THE SUBFILE ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $FRSH1        BEGSR
      *
      * POSITION ON GROUP AND MOVEMENT EVENT DATE
      *
     C     C1MDY         IFEQ      0
     C     WKHGSN        SETLL     HSL058C
     C                   ELSE
     C     K1L058        SETLL     HSL058C
     C                   ENDIF
      *
      * THE FIELD 'RESET' IS A FLAG FIELD TO INDICATE WHETHER YOU ARE
      * ATTEMPTING TO REPOSITION THE USER CLOSE TO WHERE HE WAS IN THE
      * SUBFILE.
      * THE LOWEST SUBFILE RRN ON THE SCREEN FROM THE DSPF
      * FEEDBACK AREA (IDFLOW) WAS RETRIEVED EARLIER AND PUT IN WKFLOW.
      * ADD TO WKFLOW THE NUMBER OF LINES ON YOUR SUBFILE PAGE OR THE
      * NUMBER LESS 1 TO DETERMINE A SUBFILE RRN TO REPOSITION TO.
      * IF RESET IS 'NO', DON'T REPOSITION THE USER; JUST START OVER
      *
     C     RESET         IFEQ      YES
     C     WKFLOW        ADD       WKRLIN        MAXRRN
     C                   ELSE
     C                   Z-ADD     WKPLIN        MAXRRN
     C                   ENDIF
      *
      * LOAD THE SUBFILE UNTIL YOU HAVE THE REQUIRED NUMBER OF RECORDS.
      * THE NUMBER WILL DEPEND ON WHETHER YOU ARE REPOSITIONING THE
      * SUBFILE OR NOT. STOP IF YOU GET TO THE END OF THE SUBFILE.
      *
     C     SVRRN1        DOUGE     MAXRRN
     C     *IN82         OREQ      *ON
     C                   EXSR      $LOAD1
     C                   ENDDO
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $LOAD1- SUBROUTINE TO LOAD THE SUBFILE FOR SCREEN 1
      *---------------------------------------------------------------
      *
     C     $LOAD1        BEGSR
      *
     C                   Z-ADD     SVRRN1        HDRRN1
      *
      * SET THE COUNT OF RECORDS ON THE SUBFILE PAGE TO ZERO.
      *
     C                   Z-ADD     0             COUNT
      *
      * FILL THE SUBFILE UNTIL THE END OF THE DATABASE FILE OR YOU
      * HAVE FILLED ALL THE LINES ON THE SUBFILE PAGE
      *
     C                   SETOFF                                       82
     C     *IN82         DOUEQ     *ON                                          DO FILL LOOP
     C     COUNT         ORGE      WKPLIN
      *
     C     WKHGSN        READE     HSL058C                                82
     C     *IN82         IFEQ      *OFF                                         IF READ
      *
     C                   Z-ADD     0             DFCVNO
     C                   MOVE      *BLANK        DFHG
      *
      * RETRIEVE ALPHA HOG GROUP CODE FOR THE 'OPPOSING' GROUP
      * ON TRANSFERS.
      *
     C     MEMTCD        IFEQ      'T'
     C     MEHSN         CHAIN     HSL034D                            92
     C     *IN92         IFEQ      *OFF
     C                   MOVEL     HGHGCD        DFHG
     C                   ELSE
     C                   MOVE      *BLANK        DFHG
     C                   ENDIF
     C                   ENDIF
      *
      *   ONLY INCLUDE RECORDS THAT MATCH THE USER'S SELECTORS
      *
     C     C1MVSN        IFNE      0                                             IF MOVEMENT
     C     C1MVSN        ANDNE     MEMVSN
     C                   ELSE
      *
     C     C1MTCD        IFNE      *BLANK                                        IF TYPE
     C     C1MTCD        ANDNE     MEMTCD
     C                   ELSE
      *
     C     C1ODFL        IFNE      *BLANK                                        IF O/D
     C     C1ODFL        ANDNE     MEODFL
     C                   ELSE
      *
     C     C1CVNO        IFNE      0                                             IF CUST
     C     C1CVNO        ANDNE     MECVNO
     C                   ELSE
      *
     C     C1HG          IFNE      *BLANK                                        IF GROUP
     C     C1HG          ANDNE     DFHG
     C                   ELSE
      *
     C                   Z-ADD     MEMVSN        DFMVSN
     C                   MOVEL     MEMTCD        DFMTCD
     C                   MOVEL     MEODFL        DFODFL
      *
      * FLIP EVENT DATE DATE TO MMDDYY
      *
     C                   Z-ADD     MEMEDT        WKCYMD
     C                   EXSR      $TOMDY
     C                   Z-ADD     WKMDY         DFMDY
      *
      *  GET HEAD AND STATUS
      *
     C                   SELECT
     C     MEMTCD        WHENEQ    'T'
     C                   EXSR      $TRAN
      *
     C     MEMTCD        WHENEQ    'S'
     C                   Z-ADD     MECVNO        DFCVNO
     C                   EXSR      $SALE
      *
     C     MEMTCD        WHENEQ    'A'
     C                   EXSR      $ADJ
      *
     C     MEMTCD        WHENEQ    'D'
     C                   EXSR      $DEAD
     C                   ENDSL
      *
      *
     C     C1MSCD        IFNE      *BLANK                                        IF STATUS
     C     C1MSCD        ANDNE     DFMSCD
     C                   ELSE
      *
     C                   ADD       1             COUNT
     C                   ADD       1             HDRRN1
     C                   WRITE     HP701S1
     C                   SETON                                        81
      *
      * FOR POSITIONING, PLACE THE SUBFILE RELATIVE RECORD NUMBER INTO
      * THE SFLRCDNBR FIELD (HDPAG1)
      *
     C                   Z-ADD     HDRRN1        HDPAG1
      *
     C                   ENDIF                                                  IF STATUS
     C                   ENDIF                                                  IF GROUP
     C                   ENDIF                                                  IF CUST
     C                   ENDIF                                                  IF O/D
     C                   ENDIF                                                  IF TYPE
     C                   ENDIF                                                  IF MOVEMENT
     C                   ENDIF                                                  IF READ
     C                   ENDDO                                                  DO FILL LOOP
      *
      * IF NO RECORDS WERE WRITTEN TO THE SUBFILE, THEN ISSUE
      * THE STANDARD MESSAGE 'NO DATA TO DISPLAY'.
      *
     C     HDRRN1        IFEQ      0
     C                   MOVEL     YES           NORECS
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09002'     MGID(E)
     C                   ENDIF
     C                   ELSE
     C                   MOVEL     NO            NORECS
     C                   ENDIF
      *
     C                   Z-ADD     HDRRN1        SVRRN1
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $DATE -  MANIPULATE DATES WITH DATE UTILITY
      *----------------------------------------------------------------
      *
     C     $DATE         BEGSR
      *
     C                   Z-ADD     0             PTO8
     C                   MOVEL     'MDY '        PFRFMT
     C                   MOVEL     'CYMD'        PTOFMT
     C                   Z-ADD     0             PDAYS
     C                   MOVE      *BLANK        PCODE
     C                   MOVE      *BLANK        PRTRN
     C                   CALL      'UT80060R'
     C                   PARM                    PFRM8             8 0
     C                   PARM                    PTO8              8 0
     C                   PARM                    PFRFMT            4
     C                   PARM                    PTOFMT            4
     C                   PARM                    PDAYS             4 0
     C                   PARM                    PCODE             1
     C                   PARM                    PRTRN             1
      *
     C                   ENDSR
      /EJECT
      *----------------------------------------------------------------
      * $TOMDY - FLIP DATE TO MMDDYY
      *----------------------------------------------------------------
      *
     C     $TOMDY        BEGSR
      *
     C                   Z-ADD     WKMON         WKMM
     C                   Z-ADD     WKDAY         WKDD
     C                   Z-ADD     WKYER         WKYY
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $F4S1 - F4 PROMPT ON SCREEN 1
      *---------------------------------------------------------------
      *
     C     $F4S1         BEGSR
      *
     C                   SELECT
      *
     C     FLD           WHENEQ    'C1MSCD'
     C                   CALL      'HP568'
     C                   PARM      *blank        XXMSCD
     C                   PARM      *blank        XXMSDS
     C                   SETON                                        54
     C     XXMSCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXMSCD        C1MSCD
     C                   ENDIF                                                  IF SELECTED
      *
      *
     C     FLD           WHENEQ    'C1MTCD'
     C                   MOVE      *BLANK        XXMTCD
     C                   MOVE      *BLANK        XXMTDS
     C                   CALL      'HP561'
     C                   PARM                    XXMTCD
     C                   PARM                    XXMTDS
     C                   SETON                                        55
     C     XXMTCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXMTCD        C1MTCD
     C                   ENDIF                                                  IF SELECTED
      *
      * IF JDE CUSTOMER NO.
      *
     C     FLD           WHENEQ    'C1CVNO'
     C                   MOVEL(P)  'C'           INAT1                          SEARCH TYPE
     C                   CALL      'HP513'
     C                   PARM                    BOCOCD                         COMPANY
     C                   PARM                    INAT1                          SEARCH TYPE
     C                   PARM      *ZERO         OUAJD                          JDE NUMBER
     C                   PARM      *BLANK        OUALPH                         JDE NAME
      *
     C                   SETON                                        57
     C     OUAJD         IFNE      0                                            IF SELECTED
     C                   Z-ADD     OUAJD         C1CVNO
     C                   ENDIF                                                  IF SELECTED
      *
      * IF HOG GROUP
      *
     C     FLD           WHENEQ    'C1HG'
     C                   MOVE      *BLANK        XXHGCD
     C                   MOVEL     C1FSCD        XXFSCD
     C                   CALL      'HP566'
     C                   PARM                    XXFSBO
     C                   PARM                    XXFSCD
     C                   PARM                    XXHGCD
     C                   SETON                                        56
      *
     C     XXHGCD        IFNE      *BLANK                                       IF SELECTED
     C                   MOVEL     XXHGCD        C1HG
     C                   ENDIF                                                  IF SELECTED
     C                   OTHER
      *
      * F4 NOT VALID FOR THIS FIELD SO ISSUE MESSAGE
      *
     C     ERROR         IFLT      MAXMSG
     C                   ADD       1             ERROR
     C                   MOVEL     'HS09011'     MGID(E)
     C                   ENDIF
     C                   ENDSL
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $TRAN - RETRIEVE TRANSFER MOVEMENT
      *---------------------------------------------------------------
      *
     C     $TRAN         BEGSR
      *
      * RETRIEVE STATUS FROM TRANSFER MOVEMENT HEADER
      *
     C     MEMVSN        CHAIN     HSP074                             92
     C     *IN92         IFEQ      *OFF
     C                   MOVEL     MHMSCD        DFMSCD
     C                   ELSE
     C                   MOVE      *BLANK        DFMSCD
     C                   ENDIF
      *
      * RETREIVE HEAD FROM TRANSFER MOVEMENT DETAIL FOR THIS
      * MOVEMENT AND LINE NUMBER.
      *
     C     K2P075        CHAIN     HSP075                             92
     C     *IN92         IFEQ      *OFF                                         IF FOUND
      *
     C                   SELECT
     C     MEODFL        WHENEQ    'O'
     C     DFMSCD        IFEQ      'SC'
     C                   Z-ADD     MDSCHD        DFHD
     C                   ELSE
     C     MDQLHD        ADD       MDRJHD        DFHD
     C                   ADD       MDDOHD        DFHD
     C                   ENDIF
      *
     C     MEODFL        WHENEQ    'D'
     C     MDQLHD        ADD       MDRJHD        DFHD
     C                   ENDSL
     C                   ENDIF                                                  IF FOUND
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $SALE - RETRIEVE SALES MOVEMENT
      *---------------------------------------------------------------
      *
     C     $SALE         BEGSR
      *
      * RETRIEVE THE STATUS FROM THE SALES MOVEMENT HEADER
      *
     C     MEMVSN        CHAIN     HSP084                             92
     C     *IN92         IFEQ      *OFF
     C                   MOVEL     SHMSCD        DFMSCD
     C                   ELSE
     C                   MOVE      *BLANK        DFMSCD
     C                   ENDIF
      *
      * RETREIVE HEAD FROM THE SALES MOVEMENT DETAIL FOR
      * THIS MOVEMENT/HOG GROUP.
      *
     C     K3P085        CHAIN     HSP085                             92
     C     *IN92         IFEQ      *OFF                                         IF FOUND
      *
     C                   SELECT
     C                   WHEN      DFMSCD = 'SC'
     C                   Z-ADD     SGSCHD        DFHD
      *
     C                   WHEN      DFMSCD = 'FP' OR
     C                             DFMSCD = 'PP' OR
     C                             DFMSCD = 'PG'
     C     SGDOHD        ADD       SGLVHD        DFHD
      *
     C                   OTHER
     C                   Z-ADD     SGSHHD        DFHD
     C                   ENDSL
      *
     C                   ENDIF                                                  IF FOUND
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $DEAD - RETRIEVE DAILY DEAD MOVEMENT
      *---------------------------------------------------------------
      *
     C     $DEAD         BEGSR
      *
      * RETRIEVE STATUS AND HEAD. FOR DAILY DEADS, THERE WILL ONLY BE
      * ONE RECORD PER MOVEMENT.
      *
     C     MEMVSN        CHAIN     HSP068                             92
     C     *IN92         IFEQ      *OFF
     C                   MOVEL     KDMSCD        DFMSCD
     C                   Z-ADD     KDKDHD        DFHD
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $ADJ - RETRIEVE ADJUSTMENT MOVEMENT
      *---------------------------------------------------------------
      *
     C     $ADJ          BEGSR
      *
      * RETRIEVE STATUS AND HEAD. FOR ADJUSTMENTS, THERE WILL ONLY BE
      * ONE RECORD PER MOVEMENT.
      *
     C     MEMVSN        CHAIN     HSP069                             92
     C     *IN92         IFEQ      *OFF
     C                   MOVEL     IAMSCD        DFMSCD
     C                   Z-ADD     IAIAHD        DFHD
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * $ERR1  - SUBROUTINE TO SET THE SUBFILE TO REDISPLAY AT
      *          THE FIRST SCREEN THAT HAS ERRORS
      *---------------------------------------------------------------
      *
     C     $ERR1         BEGSR
      *
     C     ERROR         IFEQ      1
     C                   Z-ADD     HDRRN1        HDPAG1
     C                   ENDIF
      *
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * $EXIT - SUBROUTINE TO SET ON LR AND END JOB
      *---------------------------------------------------------------
      *
     C     $EXIT         BEGSR
     C                   SETON                                        LR
     C                   ENDSR
      *
      *---------------------------------------------------------------
      * $WRMSG - SUBROUTINE TO WRITE ERROR MESSAGES
      *---------------------------------------------------------------
      *
     C     $WRMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM                    MGID
     C                   PARM                    MGDT
     C                   PARM                    ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      *
      *----------------------------------------------------------------
      * $CLMSG - SUBROUTINE TO CLEAR MESSAGES
      *----------------------------------------------------------------
      *
     C     $CLMSG        BEGSR
      *
     C                   CALL      'UT80045J'                           43
     C                   PARM      *BLANK        MGI
     C                   PARM      *BLANK        MGD
     C                   PARM      *ZERO         ERROR
     C                   PARM      SDPGM         PGM
     C                   PARM      MSGFIL        MSGFL
      *
      * IF CALL TO UT80045J FAILED, A MESSAGE HARDCODED IN THE DSPF
      * COMMAND KEY RECORD WILL BE SET ON. SO, REDISPLAY SCREEN TO USER
      *
     C     *IN43         IFEQ      *ON
     C                   MOVEL     SET1          ROUTNE
     C                   ENDIF
      *
     C                   ENDSR
      /EJECT
      *---------------------------------------------------------------
      * Initialization subroutine
      *---------------------------------------------------------------
      *
     C     *INZSR        BEGSR
      *
      * KEY LIST
      *
      * INVENTORY ADJUSMTENTS
      *
     C     K1L058        KLIST
     C                   KFLD                    WKHGSN
     C                   KFLD                    WKMEDT
      *
     C     K2P075        KLIST
     C                   KFLD                    MEMVSN
     C                   KFLD                    MELNNO
      *
     C     K3P085        KLIST
     C                   KFLD                    MEMVSN
     C                   KFLD                    MEHGSN
      *
      * PARM LISTS
      *
     C     *ENTRY        PLIST
     C                   PARM                    XXFSBO
     C                   PARM                    C1FSCD
     C                   PARM                    C1HGCD
     C                   PARM                    WKHGSN
     C                   PARM                    RTNCD
      *
      * GLOBAL DEFINES
     C                   MOVE      *BLANK        PGM              10            USED IN MSG
     C                   MOVE      *BLANK        MSGFL            10            USED IN MSG
     C                   MOVE      *BLANK        ROUTNE            6            ROUTINE
     C                   Z-ADD     0             MAXRRN            4 0          REPOSITION
     C                   MOVEL     NO            RESET             1            REPOSITION
     C                   MOVEL     NO            CALFLG            1
     C                   MOVEL     NO            NORECS            1            NO RECORDS
      *
     C     *LIKE         DEFINE    IDFLOW        WKFLOW
     C                   MOVEL     '00'          RTNCD             2            RETURN CODE
     C     *LIKE         DEFINE    HDRRN1        SVRRN1
     C                   Z-ADD     0             COUNT             2 0
      *
      * SAVE FIELDS FOR CONTROLLING REPOSITIONING ON
      * POSITIONERS AND SELECTORS
      *
     C     *LIKE         DEFINE    C1MDY         SVMDY
     C     *LIKE         DEFINE    C1MVSN        SVMVSN
     C     *LIKE         DEFINE    C1MTCD        SVMTCD
     C     *LIKE         DEFINE    C1MSCD        SVMSCD
     C     *LIKE         DEFINE    C1CVNO        SVCVNO
     C     *LIKE         DEFINE    C1HG          SVHG
     C     *LIKE         DEFINE    C1ODFL        SVODFL
      *
      * ALPHA PARM FIELDS USED IN CALLS TO/FROM OTHER PROGRAMS
      *
     C     *LIKE         DEFINE    IAFSBO        XXFSBO
     C     *LIKE         DEFINE    C1FSCD        XXFSCD
     C     *LIKE         DEFINE    C1HGCD        XXHGCD
     C     *LIKE         DEFINE    IAHGSN        WKHGSN
     C     *LIKE         DEFINE    C1MSCD        XXMSCD
     C                   MOVE      *BLANK        XXMSDS           20
     C     *LIKE         DEFINE    C1MTCD        XXMTCD
     C                   MOVE      *BLANK        XXMTDS           20
      *
      * JDE FIELDS
     C                   MOVE      *BLANK        INAT1             3            JDE ADDR TYP
     C                   MOVE      *BLANK        OUALPH           40            JDE NAME
     C     *LIKE         DEFINE    SHCVNO        OUAJD                          JDR ADDR OUT
      *
      * YOU HAVE TO HAVE A COMPANY NUMBER AS A PARM INTO THE
      * SELECT PROGRAM FOR J.E. EDWARDS. SO, GET THE FIRST ONE
      * FROM A BUSINESS OFFICE.
      *
     C     *LOVAL        SETLL     HSP009
     C                   READ(N)   HSP009                                 92
      *
      * WORK FIELDS
     C     *LIKE         DEFINE    IAIADT        WKMEDT
      *
      * RETRIEVE FARM SITE NAME FOR CONTROL RECORD
      *
     C     C1FSCD        CHAIN     HSP018                             90
     C     *IN90         IFEQ      *OFF
     C                   MOVEL     FSFSNM        C1FSNM
     C                   ELSE
     C                   MOVEL(P)  'UNKNOWN'     C1FSNM
     C                   ENDIF
      *
      * TO SUPPORT F5-REFRESH, LOGIC REQUIRES THE NUMBER OF LINES ON
      * THE SUBFILE PAGE AND ALSO THE NUMBER OF LINES LESS 1.  BY
      * SETTING THESE VALUES UP AS CONSTANT WORK FIELDS, THE PROCESSING
      * LOGIC CAN BE STANDARDIZED BETWEEN PROGRAMS.
      *
     C                   Z-ADD     11            WKPLIN            2 0          SFLPAG(0011)
     C     WKPLIN        SUB       1             WKRLIN            2 0          SFLPAG - 1
      *
      * THE FOLLOWING STANDARD CODE MUST BE INCLUDED TO MAKE THE
      * STANDARD ERROR MESSAGE HANDLING PROGRAM FUNCTION PROPERLY.
      * THIS CODE SETS AND CLEARS THE PROGRAM MESSAGE QUEUE.
      *
     C                   Z-ADD     20            MAXMSG            2 0
     C                   MOVEL     '*'           MSGPGM                         SET QUEUE
     C                   EXSR      $CLMSG                                       CLEAR MSG
      *
     C                   ENDSR
      /EJECT
