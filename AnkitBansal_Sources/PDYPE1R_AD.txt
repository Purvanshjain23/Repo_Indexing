// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PDYPE1R
// ?Date: 14.08.2025 Time: 03:27:28
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Rtv and Center Hdg IF) TYPE(EXCINTFUN)                     AC1258539;
PARAMETER('C/S');
{
 //?Execute internal function

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?  Force to add mode if warehouse code is blank
CASE;

// IF PAR.Warehouse Code is Warehouse Code Blank
IF PAR.Warehouse_Code = *BLANK;

// PGM.*Program mode = CND.*ADD
PGM.*Program_mode = 'ADD';

ENDIF;

//?dont dft prod whse for Hpb .. some Ext wareshouses need to not have one.
EXECUTE FUNCTION(RTV default Company    IF) TYPE(EXCINTFUN)                     AC1592222;
PARAMETER(LCL.Company_Number);
{
 //?Execute internal function

 EXECUTE FUNCTION(Rtv Profile Model     RT) TYPE(RTVOBJ) FILE(CADRREP)           AC1445577;
 PARAMETER(JOB.*USER);
 PARAMETER(PAR.User_Code_Model);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF PAR.User Code Model is equal to blank
 IF PAR.User_Code_Model = *BLANK;

 EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
 PARAMETER(JOB.*USER);
 PARAMETER('P/S');
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 // IF *OTHERWISE
 IF *OTHERWISE;

 EXECUTE FUNCTION(RTV Appl. Default Co   RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143068;
 PARAMETER(PAR.User_Code_Model);
 PARAMETER('P/S');
 PARAMETER(PAR.Company_Number);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 ENDIF;

}


EXECUTE FUNCTION(Rtv Plant Co/Org      RT) TYPE(RTVOBJ) FILE(PDJYREP)           AC1826265;
PARAMETER(LCL.Company_Number);
PARAMETER(LCL.Plant_Company_Sts);
PARAMETER(LCL.Company_Organization);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?***** Changes and Comments
DO;

//?WI609_2 JM 10/08/2024  Add Screen field Crt 856 ASN for 3PL Whse
//?                       in input mode.
//?                       New field is only for External warehouse.
//?                       Populated CRTOBJ/CHGOBJ to use new field.
//?                       Recompiled for change in Val Cust Setup 4/856 V2IF
//?E4119  RMC 5/23/16 Remove live with tpm checks; tpm location code update
//?P002045 LJB 10/03/2012  Add TPM Location Code, Validate existance
//? if entered, pass in if F4 to select.
//? Don't allow display, edit or F4 if not Live with TPM  02/19/2013
//?F2073 RMC 8/21/12 Allow edit of Prod Sched Max Days -- how many days
//? back will production be scheduled to be made.
//?F2073 RMC 6/27/12 Allow edit of whs inventory chill time-used for FZ
//? Whs And used to calculate when inventory is avail. the other one
//? is for how many days out to sched production.
//? If -0- then the Warehouse Chill Time is used
//?FP1110 - High Plains -- RM 09/11/07 Added "Req Meter Readings"
//?         field to Edit. it was Unused sts 4
//?FP1054 get prod whse from acctng company
//?FP1322 01/11/2010 RMC Dont req Prod Whse for HPB - their Ext Whses
//?        wont have a prod whse.
//?E01325 03/08/2011 RMC Added Default Carrier code - for ef4 shipped ords
//?E3191  07/28/2014 JJH Allow edit of Auto Inv Restoration field.
//? This field is used to designate if the Warehouse will participate
//? in the Automatic Inventory Restoration.  This field was previously
//? the WHS Unused Sts 9.
ENDDO;

//?USER: Initialize detail screen (new record)

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

// DTL.Include in Auto Pre Pick = CND.Excl in Auto Prelim Pick
DTL.Include_in_Auto_Pre_Pick = 'N';

//?If copying, retrieve all values for new Warehouse
CASE;

// IF PAR.Action Type is Copy
IF PAR.Action_Type = 'Y';

EXECUTE FUNCTION(RTV Warehouse Info     RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1910512;
PARAMETER(PAR.Warehouse_Copied);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Production_Warehouse_Code);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.Lot_Tracking_Flag);
PARAMETER(DTL.Default_Printer);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Trans_Contol_AS400_Plant);
PARAMETER(DTL.Warehouse_Location);
PARAMETER(DTL.Warehouse_Std_Chill_Time);
PARAMETER(DTL.Warehouse_Chill_Time);
PARAMETER(DTL.Include_in_Auto_Pre_Pick);
PARAMETER(DTL.Default_Manifest_Copies);
PARAMETER(DTL.Default_Load_Sequence);
PARAMETER(DTL.WHS_Slotting_Limit_Type);
PARAMETER(DTL.Shipping_Company);
PARAMETER(DTL.Accounting_Company);
PARAMETER(DTL.WHS_Sched_Prod_Max_Days);
PARAMETER(DTL.WHS_Inventory_Chill_Time);
PARAMETER(DTL.Parent_Warehouse);
PARAMETER(DTL.Default_Shipping_Whs);
PARAMETER(DTL.WHS_Live_with_Carlisle);
PARAMETER(DTL.WHS_PFS_Interface);
PARAMETER(DTL.WHS_Req_Meter_Reading_Shp);
PARAMETER(DTL.WHS_Default_Load_Type);
PARAMETER(DTL.WHS_TMS_Planning_Region);
PARAMETER(DTL.Default_Carrier_Code);
PARAMETER(DTL.Inventory_Logic_Version);
PARAMETER(DTL.WHS_Auto_Inv_Restoration);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(NLL.Job_Time);
PARAMETER(NLL.User_Id);
PARAMETER(NLL.Job_Name);
PARAMETER(NLL.Job_Date);
{
 //?USER: Initialize routine

 // PGM.*Record selected = CND.*NO
 PGM.*Record_selected = 'N';

 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PGM.*Record selected = CND.*YES
 PGM.*Record_selected = 'Y';

}


ENDIF;

//?USER: Initialize detail screen (existing record)

CASE;

// IF DTL.Production Warehouse Code is Warehouse Code not Blank
IF DTL.Production_Warehouse_Code <> *BLANK;

EXECUTE FUNCTION(RTV Warehouse          RT) TYPE(RTVOBJ) FILE(CAADREP)          AC1100960;
PARAMETER(DB1.Production_Warehouse_Code);
PARAMETER(DTL.USR_Warehouse_description);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 // PAR.Warehouse Description = DB1.Warehouse Description
 PAR.Warehouse_Description = DB1.Warehouse_Description;

}


ENDIF;

// DTL.Warehouse Type Desc. = Condition name of DTL.Warehouse Type
DTL.Warehouse_Type_Desc = RTVCND(DTL.Warehouse_Type);

// DTL.Transaction Control Desc = Condition name of DTL.Trans Contol AS400/Plant
DTL.Transaction_Control_Desc = RTVCND(DTL.Trans_Contol_AS400_Plant);

// DTL.Condition Desc. 8  USR = Condition name of DTL.Warehouse Location
DTL.Condition_Desc_8_USR = RTVCND(DTL.Warehouse_Location);

// DTL.Condition Desc. 9  USR = Condition name of DTL.Warehouse Std Chill Time
DTL.Condition_Desc_9_USR = RTVCND(DTL.Warehouse_Std_Chill_Time);

// DTL.Text USR = Condition name of DTL.WHS Slotting Limit Type
DTL.Text_USR = RTVCND(DTL.WHS_Slotting_Limit_Type);

// DTL.Condition Desc. 1  USR = Condition name of DTL.WHS Live w/Carlisle
DTL.Condition_Desc_1_USR = RTVCND(DTL.WHS_Live_with_Carlisle);

// DTL.Condition Desc. 2  USR = Condition name of DTL.WHS PFS Interface
DTL.Condition_Desc_2_USR = RTVCND(DTL.WHS_PFS_Interface);

//?USER: Validate detail screen fields

CASE;

// IF PGM.*Program mode is *ADD
IF PGM.*Program_mode = 'ADD';

// DTL.Record Status = CND.Active
DTL.Record_Status = 'A';

ENDIF;

//?** Add select and validation for TPM Location     P002045
//?** Only display and/or edit TPM Loc Code if Live with TPM
//?SEL:  Default Printer
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

// AND PGM.*Cursor field <IS> DTL.Default Printer
AND PGM.*Cursor_field = DTL.Default_Printer;

// Call program SEL Available Printers SR.
CALL PROGRAM(SEL Available Printers SR) ('PDTVSRR');
PARAMETER(WRK.PRT_Description);
PARAMETER(DTL.Default_Printer);

ENDIF;

//?SEL:  F4=Shipping Co, Accounting Co, Carrier, TPM Location
CASE;

// IF DTL.*CMD key is *Prompt
IF DTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> DTL.Shipping Company
IF PGM.*Cursor_field = DTL.Shipping_Company;

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(DTL.Shipping_Company);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Accounting Company
IF PGM.*Cursor_field = DTL.Accounting_Company;

// Call program SEL Company by Number  SR.
CALL PROGRAM(SEL Company by Number  SR) ('CAAJSRR');
PARAMETER(DTL.Accounting_Company);

ENDIF;

CASE;

// IF PGM.*Cursor field <IS> DTL.Default Carrier Code
IF PGM.*Cursor_field = DTL.Default_Carrier_Code;

// Call program SEL Active Carrier     SR.
CALL PROGRAM(SEL Active Carrier     SR) ('OMY6SRR');
PARAMETER(DTL.Default_Carrier_Code);

ENDIF;

ENDIF;

//?VAL:  Shipping Company
CASE;

// IF DTL.Shipping Company is greater than zero
IF DTL.Shipping_Company > *ZERO;

EXECUTE FUNCTION(Val Company Number    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC1343408;
PARAMETER(DTL.Shipping_Company);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Company not found.'
ERROR(USR2831);
MSGPARM(DTL.Shipping_Company);

ENDIF;

ENDIF;

//?VAL:  Accounting Company
CASE;

// IF DTL.Accounting Company is greater than zero
IF DTL.Accounting_Company > *ZERO;

EXECUTE FUNCTION(Val Company Number    RT) TYPE(RTVOBJ) FILE(CAABREP)           AC1343408;
PARAMETER(DTL.Accounting_Company);
PARAMETER(LCL.Record_Found_USR);
{
 //?USER: Processing if Data record not found

 // PAR.Record Found USR = CND.Record Not Found
 PAR.Record_Found_USR = 'N';

 //?USER: Process Data record

 // PAR.Record Found USR = CND.Record Found
 PAR.Record_Found_USR = 'Y';

}


CASE;

// IF LCL.Record Found USR is Record Not Found
IF LCL.Record_Found_USR = 'N';

// Send error message - 'Company not found.'
ERROR(USR2831);
MSGPARM(DTL.Accounting_Company);

ENDIF;

ENDIF;

//?VAL:  Dft Carrier    (E01325)
CASE;

// IF DTL.Default Carrier Code is Entered
IF DTL.Default_Carrier_Code <> *BLANK;

EXECUTE FUNCTION(Val Carrier Active     RT) TYPE(RTVOBJ) FILE(OMFFREP)          AC1418093;
PARAMETER(DTL.Default_Carrier_Code);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

}


CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

// Send error message - 'Carrier Info not found.'
ERROR(USR1180);
MSGPARM(DTL.Default_Carrier_Code);

ENDIF;

ENDIF;

//?Require zip code for Seaboard warehouse because of MPR  e2247
CASE;

// IF LCL.Company Organization is Seaboard
IF LCL.Company_Organization = 'S';

CASE;

// IF DTL.Zip/Postal Code is Blank
IF DTL.Zip_Postal_Code = *BLANK;

// Send error message - 'Zip/Postal required for MPR Processing.'
ERROR(USR4560);
MSGPARM(DTL.Zip_Postal_Code);

ENDIF;

ENDIF;

//?USER: Validate detail screen relations

CASE;

// IF LCL.Company Organization is High Plains Biodiesel
IF LCL.Company_Organization = 'H';

//?FP1322 - not req for hpb
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv Prd WHS w/AcctCo  RT) TYPE(RTVOBJ) FILE(CAADREP)           AC1917599;
PARAMETER(DTL.Accounting_Company);
PARAMETER(DTL.Production_Warehouse_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


ENDIF;

// DTL.Warehouse Type Desc. = Condition name of DTL.Warehouse Type
DTL.Warehouse_Type_Desc = RTVCND(DTL.Warehouse_Type);

// DTL.Transaction Control Desc = Condition name of DTL.Trans Contol AS400/Plant
DTL.Transaction_Control_Desc = RTVCND(DTL.Trans_Contol_AS400_Plant);

EXECUTE FUNCTION(VAL Printer Device     IF) TYPE(EXCINTFUN)                     AC1277933;
PARAMETER(DTL.Default_Printer);
{
 //?Execute internal function

 // PGM.*Return code = CND.*Normal
 PGM.*Return_code = *BLANK;

 // Execute function VAL object existence   US.
 EXECUTE FUNCTION(VAL object existence   US) TYPE(EXCUSRSRC) ('JCOBJR');
 PARAMETER(PAR.PRT_Printer_Device);
 PARAMETER(*OUTQ);
 PARAMETER(PGM.*Return_code);
 {
  C                     CALL 'JCOBJC'                   CL PROGRAM
  C                     PARM #IA8VN    UA8VN  10
  C                     PARM #IOBJT    UOBJT  10
  C           W0RTN     PARM           W0RTN
 }

 CASE;

 // IF PGM.*Return code is *Normal
 IF PGM.*Return_code = *BLANK;

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Send error message - ''&1' is invalid, please re-enter.'
 ERROR(USR0280);
 MSGPARM(PAR.PRT_Printer_Device);

 ENDIF;

}


// DTL.Condition Desc. 8  USR = Condition name of DTL.Warehouse Location
DTL.Condition_Desc_8_USR = RTVCND(DTL.Warehouse_Location);

// DTL.Condition Desc. 9  USR = Condition name of DTL.Warehouse Std Chill Time
DTL.Condition_Desc_9_USR = RTVCND(DTL.Warehouse_Std_Chill_Time);

// DTL.Text USR = Condition name of DTL.WHS Slotting Limit Type
DTL.Text_USR = RTVCND(DTL.WHS_Slotting_Limit_Type);

// DTL.Condition Desc. 1  USR = Condition name of DTL.WHS Live w/Carlisle
DTL.Condition_Desc_1_USR = RTVCND(DTL.WHS_Live_with_Carlisle);

// DTL.Condition Desc. 2  USR = Condition name of DTL.WHS PFS Interface
DTL.Condition_Desc_2_USR = RTVCND(DTL.WHS_PFS_Interface);

//?WI609_2 JM 01/07/2025-ASN 856 3PL flag is Blank for Internal Whse.
CASE;

// IF DTL.Warehouse Location is Internal (Plant)
IF DTL.Warehouse_Location = 'I';

// DTL.Crt 856 ASN for 3PL Whse = CND.Not Entered
DTL.Crt_856_ASN_for_3PL_Whse = *BLANK;

//?WI609_2 JM 01/07/2025-ASN 856 3PL flag is Blank for Internal Whse.
// IF DTL.Warehouse Location is External
IF DTL.Warehouse_Location = 'E';

//?Crt 856 ASN for 3PL Treat Blank as No.
CASE;

// IF DTL.Crt 856 ASN for 3PL Whse is Not Entered
IF DTL.Crt_856_ASN_for_3PL_Whse = *BLANK;

// DTL.Crt 856 ASN for 3PL Whse = CND.No
DTL.Crt_856_ASN_for_3PL_Whse = 'N';

//?Crt 856 ASN for 3PL Treat Blank as No.
// IF *OTHERWISE
IF *OTHERWISE;

//?Crt 856 ASN for 3PL Allow only Yes or No.
CASE;

// IF DTL.Crt 856 ASN for 3PL Whse is No
IF DTL.Crt_856_ASN_for_3PL_Whse = 'N';

// OR DTL.Crt 856 ASN for 3PL Whse is Yes
OR DTL.Crt_856_ASN_for_3PL_Whse = 'Y';

//?Crt 856 ASN for 3PL Allow only Yes or No.
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Create 856 ASN for 3PL should be Yes or No.'
ERROR(USR5530);
MSGPARM(DTL.Crt_856_ASN_for_3PL_Whse);

ENDIF;

ENDIF;

ENDIF;

//?USER: Create DBF record

EXECUTE FUNCTION(CRT Warehouse          CR) TYPE(CRTOBJ) FILE(CAADREP)          AC1100888;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Production_Warehouse_Code);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.Lot_Tracking_Flag);
PARAMETER(DTL.Default_Printer);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Trans_Contol_AS400_Plant);
PARAMETER(DTL.Warehouse_Location);
PARAMETER(DTL.Warehouse_Std_Chill_Time);
PARAMETER(DTL.Warehouse_Chill_Time);
PARAMETER(DTL.Include_in_Auto_Pre_Pick);
PARAMETER(DTL.Default_Manifest_Copies);
PARAMETER(DTL.Default_Load_Sequence);
PARAMETER(DTL.WHS_Slotting_Limit_Type);
PARAMETER(DTL.Shipping_Company);
PARAMETER(DTL.Accounting_Company);
PARAMETER(DTL.WHS_Sched_Prod_Max_Days);
PARAMETER(DTL.WHS_Inventory_Chill_Time);
PARAMETER(DTL.Parent_Warehouse);
PARAMETER(DTL.Default_Shipping_Whs);
PARAMETER(DTL.WHS_Live_with_Carlisle);
PARAMETER(DTL.WHS_PFS_Interface);
PARAMETER(DTL.WHS_Req_Meter_Reading_Shp);
PARAMETER(DTL.WHS_Default_Load_Type);
PARAMETER(DTL.WHS_TMS_Planning_Region);
PARAMETER(DTL.Default_Carrier_Code);
PARAMETER(DTL.Inventory_Logic_Version);
PARAMETER(DTL.WHS_Auto_Inv_Restoration);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Crt_856_ASN_for_3PL_Whse);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.Shipping_Company);
 PARAMETER('WHS');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is Yes
 IF LCL.PFS_Carlisle_Active = 'Y';

 // Call program PFS One Warehouse     XF.
 CALL PROGRAM(PFS One Warehouse     XF) ('PPM6XFR');
 PARAMETER(DB1.Shipping_Company);
 PARAMETER(DB1.Warehouse_Code);

 ENDIF;

}


//?USER: Change DBF record

EXECUTE FUNCTION(CHG Warehouse          CH) TYPE(CHGOBJ) FILE(CAADREP)          AC1100889;
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Warehouse_Description);
PARAMETER(DTL.Address_Line_1);
PARAMETER(DTL.Address_Line_2);
PARAMETER(DTL.Address_Line_3);
PARAMETER(DTL.City);
PARAMETER(DTL.Zip_Postal_Code);
PARAMETER(DTL.Production_Warehouse_Code);
PARAMETER(DTL.State_Code);
PARAMETER(DTL.Lot_Tracking_Flag);
PARAMETER(DTL.Default_Printer);
PARAMETER(DTL.Warehouse_Type);
PARAMETER(DTL.Trans_Contol_AS400_Plant);
PARAMETER(DTL.Warehouse_Location);
PARAMETER(DTL.Warehouse_Std_Chill_Time);
PARAMETER(DTL.Warehouse_Chill_Time);
PARAMETER(DTL.Include_in_Auto_Pre_Pick);
PARAMETER(DTL.Default_Manifest_Copies);
PARAMETER(DTL.Default_Load_Sequence);
PARAMETER(DTL.WHS_Slotting_Limit_Type);
PARAMETER(DTL.Shipping_Company);
PARAMETER(DTL.Accounting_Company);
PARAMETER(DTL.WHS_Sched_Prod_Max_Days);
PARAMETER(DTL.WHS_Inventory_Chill_Time);
PARAMETER(DTL.Parent_Warehouse);
PARAMETER(DTL.Default_Shipping_Whs);
PARAMETER(DTL.WHS_Live_with_Carlisle);
PARAMETER(DTL.WHS_PFS_Interface);
PARAMETER(DTL.WHS_Req_Meter_Reading_Shp);
PARAMETER(DTL.WHS_Default_Load_Type);
PARAMETER(DTL.WHS_TMS_Planning_Region);
PARAMETER(DTL.Default_Carrier_Code);
PARAMETER(DTL.Inventory_Logic_Version);
PARAMETER(DTL.WHS_Auto_Inv_Restoration);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Crt_856_ASN_for_3PL_Whse);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Date/Time Stamp   IF) TYPE(EXCINTFUN)                      AC1142219;
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*JOB
  PAR.Job_Name = JOB.*JOB;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 EXECUTE FUNCTION(Rtv Active Status     RT) TYPE(RTVOBJ) FILE(PPBUREP)           AC1740339;
 PARAMETER(DB1.Shipping_Company);
 PARAMETER('WHS');
 PARAMETER(LCL.PFS_AccuSort_Active);
 PARAMETER(LCL.PFS_Carlisle_Active);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 CASE;

 // IF LCL.PFS Carlisle Active is Yes
 IF LCL.PFS_Carlisle_Active = 'Y';

 // Call program PFS One Warehouse     XF.
 CALL PROGRAM(PFS One Warehouse     XF) ('PPM6XFR');
 PARAMETER(DB1.Shipping_Company);
 PARAMETER(DB1.Warehouse_Code);

 ENDIF;

}


//?USER: Process command keys

CASE;

// IF DTL.*CMD key is *Exit
IF DTL.*CMD_key = '03';

QUIT;

ENDIF;

CASE;

// IF PGM.*Program mode is *CHANGE
IF PGM.*Program_mode = 'CHG';

RETURN;

ENDIF;

