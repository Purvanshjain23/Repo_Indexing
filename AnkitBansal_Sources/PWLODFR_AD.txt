// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PWLODFR
// ?Date: 14.08.2025 Time: 02:56:49
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?Modification history
DO;

//?RMC 1/27/22 accum into lcl.count usr 2 not par.count usr 2
//? 5/14/2021 JBB SDN619 - Repayment by Business Users
//?                        Function created.  Copied from:
//?                        Sel Tattoo Hdr Repay  DF - Tattoo Header
ENDDO;

// PGM.*Scan limit = CND.No Max
PGM.*Scan_limit = 999999;

// PAR.Count USR 2 = CON.*ZERO
PAR.Count_USR_2 = *ZERO;

// LCL.TH Hog Class Type = CND.Market
LCL.TH_Hog_Class_Type = 'M';

// LCL.TH Kill Date = CON.*ZERO
LCL.TH_Kill_Date = *ZERO;

// LCL.First Time Flag Usr = CND.Yes
LCL.First_Time_Flag_Usr = 'Y';

//?USER: Initialize subfile control

//?Set Toggle description
CASE;

// IF LCL.TH Hog Class Type is Market
IF LCL.TH_Hog_Class_Type = 'M';

// CTL.Text 6 USR = CON.Market
CTL.Text_6_USR = 'Market';

//?Set Toggle description
// IF *OTHERWISE
IF *OTHERWISE;

// CTL.Text 6 USR = CON.Resale
CTL.Text_6_USR = 'Resale';

ENDIF;

// CTL.TH Hog Class Type = LCL.TH Hog Class Type
CTL.TH_Hog_Class_Type = LCL.TH_Hog_Class_Type;

// CTL.TRH Repayment ID = PAR.TRH Repayment ID
CTL.TRH_Repayment_ID = PAR.TRH_Repayment_ID;

//?Position records
CASE;

// IF LCL.First Time Flag Usr is Yes
IF LCL.First_Time_Flag_Usr = 'Y';

// CTL.TH Kill Date = PAR.TH Kill Date
CTL.TH_Kill_Date = PAR.TH_Kill_Date;

// LCL.First Time Flag Usr = CND.No
LCL.First_Time_Flag_Usr = 'N';

//?Position records
// IF CTL.TH Kill Date GT PAR.TH Kill Date
IF CTL.TH_Kill_Date > PAR.TH_Kill_Date;

// CTL.TH Kill Date = PAR.TH Kill Date
CTL.TH_Kill_Date = PAR.TH_Kill_Date;

// Send information message - 'Kill Date greater than Repayment Date.  Date reset to Repayment Date.
MESSAGE(PRK1603 *INFO);
MSGPARM(CTL.TH_Kill_Date);

ENDIF;

//?USER: Initialize subfile record from DBF record

//?Record selection
CASE;

// IF RCD.TH Hog Class Type NE LCL.TH Hog Class Type
IF RCD.TH_Hog_Class_Type <> LCL.TH_Hog_Class_Type;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Record selection
// IF RCD.TH Payment Sts is Unpaid Producer
IF RCD.TH_Payment_Sts = 'ML'/'SL'/'SC'/'IC'/'IL'/*BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?Record selection
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Chk Tattoo Exists TRD RT) TYPE(RTVOBJ) FILE(PWAXCPP)           AB1364902;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?If record already exists, do not select it
CASE;

// IF PGM.*Return code is *Record already exists
IF PGM.*Return_code = 'Y2U0003';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

// LCL.Count USR 2 = CON.*ZERO
LCL.Count_USR_2 = *ZERO;

//?If F10 pressed for toggle between Market and Resale hogs
CASE;

// IF CTL.*CMD key is Toggle
IF CTL.*CMD_key = '10';

//?Toggle Hog Class Type
CASE;

// IF LCL.TH Hog Class Type is Market
IF LCL.TH_Hog_Class_Type = 'M';

// LCL.TH Hog Class Type = CND.Resale
LCL.TH_Hog_Class_Type = 'R';

//?Toggle Hog Class Type
// IF *OTHERWISE
IF *OTHERWISE;

// LCL.TH Hog Class Type = CND.Market
LCL.TH_Hog_Class_Type = 'M';

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?USER: Process subfile record (Pre-confirm)

// LCL.Count USR 2 = LCL.Count USR 2 + CON.1
LCL.Count_USR_2 = LCL.Count_USR_2 + 1;

//?USER: Final processing (Pre-confirm)

//?If selection counter = 0, defer confirmation screen
CASE;

// IF LCL.Count USR 2 is Not Entered
IF LCL.Count_USR_2 = *ZERO;

// PGM.*Defer confirm = CND.Defer confirm
PGM.*Defer_confirm = 'Y';

ENDIF;

//?USER: Process subfile record (Post-confirm)

//?If record selected, create a Tattoo Header Job Sel record
CASE;

// IF RCD.*SFLSEL is *Select
IF RCD.*SFLSEL = '1'/'1';

//?Processing based on Hog Class Type
CASE;

// IF RCD.TH Hog Class Type is Market
IF RCD.TH_Hog_Class_Type = 'M';

EXECUTE FUNCTION(Rtv Crt Tattoo Repay  RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1364910;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(CTL.TRH_Repayment_ID);
{
 //?USER: Process Data record

 EXECUTE FUNCTION(Chk Tattoo Exists TRD RT) TYPE(RTVOBJ) FILE(PWAXCPP)           AB1364902;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(LCL.TRH_Repayment_ID);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 {
  //?USER: Processing if Data record not found

  // PGM.*Return code = CND.*Record does not exist
  PGM.*Return_code = 'Y2U0005';

  //?USER: Process Data record

  // PGM.*Return code = CND.*Record already exists
  PGM.*Return_code = 'Y2U0003';

 }

 //?If record does not exist in Tattoo Repayment Detail file
 CASE;

 // IF PGM.*Return code is *Record does not exist
 IF PGM.*Return_code = 'Y2U0005';

 //?Only create records for Market Hogs
 CASE;

 // IF DB1.TH Hog Class Type is Market
 IF DB1.TH_Hog_Class_Type = 'M';

 // LCL.Kill Date Usr = PAR.TH Kill Date + CON.-5 *DAYS
 LCL.Kill_Date_Usr = DATEINCR(PAR.TH_Kill_Date '-5' 'DY' 1111111 'NONE' 'N' 1);

 //?If Kill Date is within the last 5 days, create record
 CASE;

 // IF DB1.TH Kill Date GE LCL.Kill Date Usr
 IF DB1.TH_Kill_Date >= LCL.Kill_Date_Usr;

 EXECUTE FUNCTION(Rtv Site ID            RT) TYPE(RTVOBJ) FILE(PKDNCPP)          AB1268433;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(NLL.PD_Producer_Code);
 PARAMETER(LCL.PS_Site_ID);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Bo Info2          RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1285257;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(NLL.BOH_Quote_Price_Type);
 PARAMETER(NLL.BOH_Quoted_Base_Mkt_Price);
 PARAMETER(NLL.BOH_Commodity_Market_Code);
 PARAMETER(NLL.BOH_Commodity_Price_Group);
 PARAMETER(LCL.PC_Contract_Code);
 PARAMETER(LCL.PSC_Sub_Contract_Code);
 PARAMETER(NLL.GN_Genetic_Code);
 PARAMETER(NLL.PO_Option_Code);
 PARAMETER(NLL.CMP_Program_Code);
 {
  //?USER: Processing if Data record not found

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Rtv Buy Order Load    RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1192881;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(NLL.BOL_Kill_Date);
 PARAMETER(NLL.BOL_Pln_Delv_Start_Time);
 PARAMETER(NLL.BOL_Pln_Delv_End_Time);
 PARAMETER(NLL.BOL_Pln_Head_Delv);
 PARAMETER(NLL.BOL_Shipped_Wgt);
 PARAMETER(NLL.BOL_Pln_Delv_Date);
 PARAMETER(NLL.BOL_Freight_UOM);
 PARAMETER(NLL.BOL_Freight_Unit_Amt);
 PARAMETER(NLL.BOL_Freight_Amt);
 PARAMETER(NLL.BOL_Freight_Allocation);
 PARAMETER(NLL.BOL_Head_Received);
 PARAMETER(NLL.BOL_Live_Wgt_Received);
 PARAMETER(LCL.BOL_Trucker_Payment_Sts);
 PARAMETER(NLL.BOL_Trucker_Check_Number);
 PARAMETER(NLL.BOL_Trucker_Check_Date);
 PARAMETER(NLL.BOL_AP_Voucher);
 PARAMETER(NLL.BOL_Trailer);
 PARAMETER(NLL.BOL_Freight_Exp_Paid_By);
 PARAMETER(NLL.BOL_Scheduled_Kill_Shift);
 PARAMETER(NLL.BOL_Truck_Scale_Weigh_Sts);
 PARAMETER(NLL.Reported_to_USDA);
 PARAMETER(NLL.BOL_MPR_Prior_Day_Prch);
 PARAMETER(NLL.BOL_Violated_Auth_Tme_Sts);
 PARAMETER(NLL.TRK_Trucker_Code);
 PARAMETER(NLL.PD_Producer_Code);
 PARAMETER(NLL.PL_Location_Code);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

 EXECUTE FUNCTION(Crt Tattoo Repay Dtl  CR) TYPE(CRTOBJ) FILE(PWAXCPP)           AB1364795;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER(*BLANK);
 PARAMETER('C');
 PARAMETER(DB1.TH_Head_Received);
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(DB1.THP_Process_Code);
 PARAMETER(DB1.PD_Producer_Code);
 PARAMETER(LCL.PS_Site_ID);
 PARAMETER(LCL.BOL_Trucker_Payment_Sts);
 PARAMETER(DB1.TH_Source_Code);
 PARAMETER(DB1.PL_Location_Code);
 PARAMETER(LCL.PC_Contract_Code);
 PARAMETER(LCL.PSC_Sub_Contract_Code);
 {
  //?USER: Processing before Data update

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 // LCL.Tattoo Number Alpha = CVTVAR(DB1.TH Tattoo Number)
 LCL.Tattoo_Number_Alpha = CVTVAR(DB1.TH_Tattoo_Number);

 // LCL.TRC Comment = CONCAT(CON.Tattoo,LCL.Tattoo Number Alpha,CND.*One)
 LCL.TRC_Comment = 'Tattoo' + LCL.Tattoo_Number_Alpha (1);

 // LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.for Market Hogs created.,CND.*One)
 LCL.TRC_Comment = LCL.TRC_Comment + 'for Market Hogs created.' (1);

 EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.BOH_Company_Number);
 PARAMETER(DB1.BOH_Buy_Order_Number);
 PARAMETER(DB1.BOL_Load_Number);
 PARAMETER(DB1.TH_Tattoo_Number);
 PARAMETER(DB1.TH_Kill_Date);
 PARAMETER(LCL.TRC_Comment);
 PARAMETER('S');
 {
  //?USER: Processing before Data update

  //?Make sure BOH Company Number is populated
  CASE;

  // IF PAR.BOH Company Number is *ZERO
  IF PAR.BOH_Company_Number = *ZERO;

  // DB1.BOH Company Number = PAR.CC Company Number
  DB1.BOH_Company_Number = PAR.CC_Company_Number;

  ENDIF;

  EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
  PARAMETER(PAR.CC_Company_Number);
  PARAMETER(PAR.TRH_Repayment_ID);
  PARAMETER(DB1.TRC_Sequence);
  {
   //?USER: Processing if Data record not found

   // PAR.TRC Sequence = CON.1
   PAR.TRC_Sequence = 1;

   //?USER: Process Data record

   // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
   PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
  PARAMETER(DB1.RS_Record_Status);
  PARAMETER(DB1.RS_Job);
  PARAMETER(DB1.RS_Program);
  PARAMETER(DB1.RS_User_Added);
  PARAMETER(DB1.RS_Date_Added);
  PARAMETER(DB1.RS_Time_Added);
  {
   //?Execute internal function

   // PAR.RS Record Status = CND.Active
   PAR.RS_Record_Status = 'A';

   // PAR.RS User Added = JOB.*USER
   PAR.RS_User_Added = JOB.*USER;

   // PAR.RS Date Added = JOB.*Job date
   PAR.RS_Date_Added = JOB.*Job_date;

   // PAR.RS Time Added = JOB.*Job time
   PAR.RS_Time_Added = JOB.*Job_time;

   // PAR.RS Program = JOB.*PROGRAM
   PAR.RS_Program = JOB.*PROGRAM;

   // PAR.RS Job = JOB.*JOB
   PAR.RS_Job = JOB.*JOB;

  }

 }

 ENDIF;

 ENDIF;

 ENDIF;

}


// LCL.Count USR 2 = LCL.Count USR 2 + CON.1
LCL.Count_USR_2 = LCL.Count_USR_2 + 1;

//?If RCD Kill Date > LCL Kill Date, set PAR Kill Date = RCD value
CASE;

// IF RCD.TH Kill Date GT LCL.TH Kill Date
IF RCD.TH_Kill_Date > LCL.TH_Kill_Date;

// PAR.TH Kill Date = RCD.TH Kill Date
PAR.TH_Kill_Date = RCD.TH_Kill_Date;

// LCL.TH Kill Date = PAR.TH Kill Date
LCL.TH_Kill_Date = PAR.TH_Kill_Date;

ENDIF;

//?Processing based on Hog Class Type
// IF RCD.TH Hog Class Type is Resale
IF RCD.TH_Hog_Class_Type = 'R';

EXECUTE FUNCTION(Chk Tattoo Exists TRD RT) TYPE(RTVOBJ) FILE(PWAXCPP)           AB1364902;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
{
 //?USER: Processing if Data record not found

 // PGM.*Return code = CND.*Record does not exist
 PGM.*Return_code = 'Y2U0005';

 //?USER: Process Data record

 // PGM.*Return code = CND.*Record already exists
 PGM.*Return_code = 'Y2U0003';

}


//?If record does not exist in Tattoo Repayment Detail file
CASE;

// IF PGM.*Return code is *Record does not exist
IF PGM.*Return_code = 'Y2U0005';

EXECUTE FUNCTION(Rtv Pymt Sts/Proc Cde RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1235297;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(LCL.TH_Payment_Sts);
PARAMETER(LCL.THP_Process_Code);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


EXECUTE FUNCTION(Rtv Buy Order Load    RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1192881;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(NLL.BOL_Kill_Date);
PARAMETER(NLL.BOL_Pln_Delv_Start_Time);
PARAMETER(NLL.BOL_Pln_Delv_End_Time);
PARAMETER(NLL.BOL_Pln_Head_Delv);
PARAMETER(NLL.BOL_Shipped_Wgt);
PARAMETER(NLL.BOL_Pln_Delv_Date);
PARAMETER(NLL.BOL_Freight_UOM);
PARAMETER(NLL.BOL_Freight_Unit_Amt);
PARAMETER(NLL.BOL_Freight_Amt);
PARAMETER(NLL.BOL_Freight_Allocation);
PARAMETER(NLL.BOL_Head_Received);
PARAMETER(NLL.BOL_Live_Wgt_Received);
PARAMETER(LCL.BOL_Trucker_Payment_Sts);
PARAMETER(NLL.BOL_Trucker_Check_Number);
PARAMETER(NLL.BOL_Trucker_Check_Date);
PARAMETER(NLL.BOL_AP_Voucher);
PARAMETER(NLL.BOL_Trailer);
PARAMETER(NLL.BOL_Freight_Exp_Paid_By);
PARAMETER(NLL.BOL_Scheduled_Kill_Shift);
PARAMETER(NLL.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(NLL.Reported_to_USDA);
PARAMETER(NLL.BOL_MPR_Prior_Day_Prch);
PARAMETER(NLL.BOL_Violated_Auth_Tme_Sts);
PARAMETER(NLL.TRK_Trucker_Code);
PARAMETER(NLL.PD_Producer_Code);
PARAMETER(NLL.PL_Location_Code);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Crt Tattoo Repay Dtl  CR) TYPE(CRTOBJ) FILE(PWAXCPP)           AB1364795;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(CTL.TRH_Repayment_ID);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER(*BLANK);
PARAMETER('C');
PARAMETER(RCD.TH_Head_Received);
PARAMETER(LCL.TH_Payment_Sts);
PARAMETER(LCL.THP_Process_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(LCL.PS_Site_ID);
PARAMETER(LCL.BOL_Trucker_Payment_Sts);
PARAMETER(LCL.SR_Source_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(LCL.PC_Contract_Code);
PARAMETER(LCL.PSC_Sub_Contract_Code);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// LCL.Tattoo Number Alpha = CVTVAR(RCD.TH Tattoo Number)
LCL.Tattoo_Number_Alpha = CVTVAR(RCD.TH_Tattoo_Number);

// LCL.TRC Comment = CONCAT(CON.Resale Tattoo,LCL.Tattoo Number Alpha,CND.*One)
LCL.TRC_Comment = 'Resale Tattoo' + LCL.Tattoo_Number_Alpha (1);

// LCL.TRC Comment = CONCAT(LCL.TRC Comment,CON.for Resale Hog created.,CND.*One)
LCL.TRC_Comment = LCL.TRC_Comment + 'for Resale Hog created.' (1);

EXECUTE FUNCTION(Crt Tattoo Repay Cmnt CR) TYPE(CRTOBJ) FILE(PWAYCPP)           AB1364775;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(PAR.TRH_Repayment_ID);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(RCD.TH_Tattoo_Number);
PARAMETER(RCD.TH_Kill_Date);
PARAMETER(LCL.TRC_Comment);
PARAMETER('S');
{
 //?USER: Processing before Data update

 //?Make sure BOH Company Number is populated
 CASE;

 // IF PAR.BOH Company Number is *ZERO
 IF PAR.BOH_Company_Number = *ZERO;

 // DB1.BOH Company Number = PAR.CC Company Number
 DB1.BOH_Company_Number = PAR.CC_Company_Number;

 ENDIF;

 EXECUTE FUNCTION(Rtv Next Comment Seq# RT) TYPE(RTVOBJ) FILE(PWAYCPP)           AB1366735;
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.TRH_Repayment_ID);
 PARAMETER(DB1.TRC_Sequence);
 {
  //?USER: Processing if Data record not found

  // PAR.TRC Sequence = CON.1
  PAR.TRC_Sequence = 1;

  //?USER: Process Data record

  // PAR.TRC Sequence = DB1.TRC Sequence + CON.1
  PAR.TRC_Sequence = DB1.TRC_Sequence + 1;

  QUIT;

 }

 EXECUTE FUNCTION(Rtv Add Stamp         IF) TYPE(EXCINTFUN)                      AB1100935;
 PARAMETER(DB1.RS_Record_Status);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 PARAMETER(DB1.RS_User_Added);
 PARAMETER(DB1.RS_Date_Added);
 PARAMETER(DB1.RS_Time_Added);
 {
  //?Execute internal function

  // PAR.RS Record Status = CND.Active
  PAR.RS_Record_Status = 'A';

  // PAR.RS User Added = JOB.*USER
  PAR.RS_User_Added = JOB.*USER;

  // PAR.RS Date Added = JOB.*Job date
  PAR.RS_Date_Added = JOB.*Job_date;

  // PAR.RS Time Added = JOB.*Job time
  PAR.RS_Time_Added = JOB.*Job_time;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

 }

}


// LCL.Count USR 2 = LCL.Count USR 2 + CON.1
LCL.Count_USR_2 = LCL.Count_USR_2 + 1;

//?If RCD Kill Date > LCL Kill Date, set PAR Kill Date = RCD value
CASE;

// IF RCD.TH Kill Date GT LCL.TH Kill Date
IF RCD.TH_Kill_Date > LCL.TH_Kill_Date;

// PAR.TH Kill Date = RCD.TH Kill Date
PAR.TH_Kill_Date = RCD.TH_Kill_Date;

// LCL.TH Kill Date = PAR.TH Kill Date
LCL.TH_Kill_Date = PAR.TH_Kill_Date;

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?USER: Exit program processing

// PAR.Count USR 2 = LCL.Count USR 2
PAR.Count_USR_2 = LCL.Count_USR_2;

