// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLQPPVR
// ?Date: 14.08.2025 Time: 02:55:11
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//?MODIFICATIONS
//?01/23/2021 ISE H16853 - Increased the length from 5 to 7 and
//?                        corrected the alignment of Buy Order Number field
//?USER: Load screen

CASE;

// IF WRK.First Time Flag Usr EQ WRK.Blank USR
IF WRK.First_Time_Flag_Usr = WRK.Blank_USR;

// DTL.BOH Company Number = WRK.CC Company Number
DTL.BOH_Company_Number = WRK.CC_Company_Number;

// WRK.Display Print Prompt  Usr = CND.Prompt is to be displayed
WRK.Display_Print_Prompt_Usr = 'Y';

// WRK.First Time Flag Usr = CND.Yes
WRK.First_Time_Flag_Usr = 'Y';

ENDIF;

EXECUTE FUNCTION(Val Company Number    IF) TYPE(EXCINTFUN)                      AB1129077;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(LCL.Oms_Name);
PARAMETER(WRK.Invalid_Y_N_USR);
{
 //?Execute internal function

 // Call program Val Company Number    XF.
 CALL PROGRAM(Val Company Number    XF) ('PDGZXFR');
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(WRK.Invalid_Y_N_USR);

 CASE;

 // IF WRK.Invalid Y/N USR is Yes
 IF WRK.Invalid_Y_N_USR = 'Y';

 // Send error message - 'Invalid Company Number'
 ERROR(PRK0299);
 MSGPARM(PAR.CC_Company_Number);

 ENDIF;

 // PAR.Invalid Y/N USR = WRK.Invalid Y/N USR
 PAR.Invalid_Y_N_USR = WRK.Invalid_Y_N_USR;

}


EXECUTE FUNCTION(Rtv ShipHd/Spr/RecHd  RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1305145;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.BOL_Head_Received);
PARAMETER(DTL.BOL_Truck_Scale_Weigh_Sts);
PARAMETER(DTL.BOL_Shipped_Head);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


EXECUTE FUNCTION(Val DT per BOL ARRIVINRT) TYPE(RTVOBJ) FILE(PLAFCPP)           AB1304011;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.DSH_Kill_Date);
PARAMETER(DTL.DT_Delivery_Date);
PARAMETER(DTL.DT_Delivery_Time);
PARAMETER(DTL.DT_Delivery_Time_Seq);
PARAMETER(WRK.DT_Actual_Kill_Date);
PARAMETER(WRK.DT_Actual_Delivery_Hour);
PARAMETER(WRK.DT_Scheduled_Hour);
PARAMETER(WRK.DT_Delivery_Initiation);
PARAMETER(WRK.DT_Farm_Site_Code);
PARAMETER(WRK.DT_Building);
PARAMETER(WRK.DT_Room);
PARAMETER(WRK.DT_Sire_Line_Code);
PARAMETER(WRK.DT_Hog_Group_Reference);
PARAMETER(WRK.DT_Delivered_Head);
PARAMETER(WRK.DT_Delivered_Weight_lbs);
PARAMETER(WRK.DT_Trucker_Code_HPS);
PARAMETER(WRK.DT_Driver);
PARAMETER(WRK.DT_Loading_Crew);
PARAMETER(WRK.CHR_Code);
PARAMETER(WRK.DT_Load_Type);
PARAMETER(WRK.DT_Full_Split_Load);
PARAMETER(WRK.DT_Movement_Number);
PARAMETER(WRK.DT_Truck_ID);
PARAMETER(WRK.DT_Trailer_ID);
PARAMETER(WRK.DT_Transportation_Office);
PARAMETER(WRK.DT_Transprtn_Office_Date);
PARAMETER(WRK.DT_Transprtn_Office_Time);
PARAMETER(WRK.DT_Arrive@Frm_v_StartLd);
PARAMETER(WRK.DT_On_Time_Farm_Arrvl_Sts);
PARAMETER(WRK.DT_Route_Start_Pnt);
PARAMETER(WRK.DT_Route_Start_Date);
PARAMETER(WRK.DT_Route_Start_Time);
PARAMETER(WRK.DT_Route_Start_Variance);
PARAMETER(WRK.DT_Wait_@_Transp_Offc_Tm);
PARAMETER(WRK.DT_Arrive_@_Farm_Date);
PARAMETER(WRK.DT_Arrive_@_Farm_Time);
PARAMETER(WRK.DT_Drive_Time_To_Farm);
PARAMETER(WRK.DT_Start_Loading_Date);
PARAMETER(WRK.DT_Start_Loading_Time);
PARAMETER(WRK.DT_Start_Loading_Variance);
PARAMETER(WRK.DT_Wait_@_Farm);
PARAMETER(WRK.DT_Frm_End_Loading_Date);
PARAMETER(WRK.DT_Frm_End_Loading_Time);
PARAMETER(WRK.DT_Load_Time);
PARAMETER(WRK.DT_Leave_Farm_Date);
PARAMETER(WRK.DT_Leave_Farm_Time);
PARAMETER(WRK.DT_Wait_Depart_Frm);
PARAMETER(WRK.DT_Plt_TrkWsh_Arvl_Date);
PARAMETER(WRK.DT_Plt_TrkWsh_Arvl_Time);
PARAMETER(DTL.DT_Arrive_@_Plant_Date);
PARAMETER(DTL.DT_Arrive_@_Plant_Time);
PARAMETER(DTL.DT_Wait_@_TrkWsh);
PARAMETER(WRK.DT_Drive_Time_To_Plant);
PARAMETER(WRK.DT_Delv_Time_Variance);
PARAMETER(WRK.DT_On_Time_Delivery);
PARAMETER(WRK.Delivery_Reason_Code);
PARAMETER(DTL.DT_TrkScl_Weigh_In_Date);
PARAMETER(DTL.DT_TrkScl_Weigh_In_Time);
PARAMETER(DTL.DT_Wait_@_TrkScl);
PARAMETER(DTL.DT_To_Recv_Dock_Date);
PARAMETER(DTL.DT_To_Recv_Dock_Time);
PARAMETER(DTL.DT_Wait_Rcv_Dock);
PARAMETER(WRK.DT_Start_Unloading_Date);
PARAMETER(WRK.DT_Start_Unloading_Time);
PARAMETER(WRK.DT_Wait_@_Rcv_Dock);
PARAMETER(WRK.DT_End_Unload_Date);
PARAMETER(WRK.DT_End_Unload_Time);
PARAMETER(WRK.DT_Unload_Time);
PARAMETER(WRK.DT_Unload_Variance_Time);
PARAMETER(WRK.DT_TrkScl_Weigh_Out_Date);
PARAMETER(WRK.DT_TrkScl_Weigh_Out_Time);
PARAMETER(WRK.DT_Wait_Time_@_the_Plant);
PARAMETER(WRK.DT_Formula_Wait_Tm_@_Plt);
PARAMETER(WRK.DT_Source_Type);
PARAMETER(WRK.DT_GATE_UPDATE_YES);
PARAMETER(WRK.DT_Unused_Date);
PARAMETER(WRK.DT_Unused_Time);
PARAMETER(WRK.DT_Unused_Wait_Time);
PARAMETER(WRK.DSD_Scheduled_Delv_Head);
PARAMETER(WRK.DT_Head_Received);
PARAMETER(WRK.DT_Weight_Received);
PARAMETER(WRK.DT_Avg_Weight_Received);
PARAMETER(WRK.DT_Head_DOA);
PARAMETER(WRK.DT_Weight_DOA);
PARAMETER(WRK.DT_Head_Yard_Dead);
PARAMETER(WRK.DT_Weight_Yard_Dead);
PARAMETER(WRK.DT_Head_Condemned);
PARAMETER(WRK.DT_Weight_Condemned);
PARAMETER(WRK.DT_Head_Held_Over);
PARAMETER(WRK.DT_Weight_Held_Over);
PARAMETER(WRK.DT_Head_Killed);
PARAMETER(WRK.DT_Weight_Killed);
PARAMETER(WRK.DT_Head_Market);
PARAMETER(WRK.DT_Weight_Market);
PARAMETER(WRK.DT_Avg_Weight_Market);
PARAMETER(WRK.DT_Head_Resale);
PARAMETER(WRK.DT_Weight_Resale);
PARAMETER(WRK.DT_Avg_Weight_Resale);
PARAMETER(WRK.DT_Head_Unused_1);
PARAMETER(WRK.DT_Weight_Unused_1);
PARAMETER(WRK.DT_Head_Unused_2);
PARAMETER(WRK.DT_Weight_Unused_2);
PARAMETER(WRK.DT_Error_Sts);
PARAMETER(WRK.DT_Error_Reason);
PARAMETER(WRK.PD_Producer_Code);
PARAMETER(WRK.PL_Location_Code);
PARAMETER(WRK.SR_Source_Code);
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(LCL.Return_Code_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Return Code USR = CND.*Record does not exist
 PAR.Return_Code_USR = 'Y2U0005';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Return Code USR = CND.*Normal
 PAR.Return_Code_USR = *BLANK;

}


EXECUTE FUNCTION(Val Buy Order Load    RT) TYPE(RTVOBJ) FILE(PKEJCPP)           AB1215860;
PARAMETER(DTL.CC_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.BOL_IN_record_found_USR);
PARAMETER(DTL.BOL_OUT_record_found_USR);
{
 //?USER: Initialize routine

 // PAR.BOL IN  record found  USR = CND.No
 PAR.BOL_IN_record_found_USR = 'N';

 // PAR.BOL OUT record found  USR = CND.No
 PAR.BOL_OUT_record_found_USR = 'N';

 //?USER: Process Data record

 CASE;

 // IF DB1.BOLW Weight Type is In(En)
 IF DB1.BOLW_Weight_Type = 'I';

 // PAR.BOL IN  record found  USR = CND.Yes
 PAR.BOL_IN_record_found_USR = 'Y';

 // IF DB1.BOLW Weight Type is Out(Fuera)
 IF DB1.BOLW_Weight_Type = 'O';

 // PAR.BOL OUT record found  USR = CND.Yes
 PAR.BOL_OUT_record_found_USR = 'Y';

 ENDIF;

}


// DTL.Description 30 USR = CON.*BLANK
DTL.Description_30_USR = *BLANK;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// IF *OTHERWISE
IF *OTHERWISE;

// DTL.Description 30 USR = CON.BOLW not found
DTL.Description_30_USR = 'BOLW not found';

ENDIF;

