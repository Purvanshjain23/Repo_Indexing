// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKAZXFR
// ?Date: 14.08.2025 Time: 02:51:04
// ?------------------------------------------------------------------------------------------------

//?Execute user function

//?Modifications and Comments
DO;

//?H16853 ISE 11/02/20 - Increased the Buy Order Number field
//?  length from 5 to 7.
ENDDO;

EXECUTE FUNCTION(Rtv Avg Comptitors Tot Rt) TYPE(RTVOBJ) FILE(PKDGCPP)          AB1176557;
PARAMETER(PAR.BOH_Company_Number);
PARAMETER(PAR.BOH_Buy_Order_Number);
PARAMETER(PAR.BOL_Load_Number);
PARAMETER(PAR.TH_Tattoo_Number);
PARAMETER(PAR.TH_Kill_Date);
PARAMETER(WRK.Cmp_Base_Carc);
PARAMETER(WRK.Cmp_Lean_Premium_Carc);
PARAMETER(WRK.Cmp_Yield_Gain_Loss_Carc);
PARAMETER(WRK.Cmp_Carc_Val_Carc);
PARAMETER(WRK.Cmp_Sort_Dsc_Carc);
PARAMETER(WRK.Cmp_Std_Yield);
PARAMETER(WRK.Cmp_Base_Mkt_Price);
PARAMETER(WRK.Cmp_Base_Live);
PARAMETER(WRK.Cmp_Lean_Premium_Live);
PARAMETER(WRK.Cmp_Yield_Gain_Loss_Live);
PARAMETER(WRK.Cmp_Carc_Val_Live);
PARAMETER(WRK.Cmp_Sort_Dsc_Live);
{
 //?USER: Initialize routine

 EXECUTE FUNCTION(Rtv Cmp Competitors   RT) TYPE(RTVOBJ) FILE(PKARREP)           AB1166528;
 PARAMETER(WRK.Competitors_Code_1_Usr);
 PARAMETER(WRK.Competitors_Code_2_Usr);
 PARAMETER(WRK.Competitors_Code_3_Usr);
 {
  //?USER: Initialize routine

  // *MO.VE             1183529*Bu = ilt. in functions
  WRK.Count_USR = *ZERO;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Competitors_Code_1_Usr = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Competitors_Code_2_Usr = *BLANK;

  // *MO.VE             1183529*Bu = ilt. in functions
  PAR.Competitors_Code_3_Usr = *BLANK;

  //?USER: Process Data record

  // WRK.Count USR = WRK.Count USR + CON.001
  WRK.Count_USR = WRK.Count_USR + 001;

  CASE;

  // IF WRK.Count USR is One
  IF WRK.Count_USR = 1;

  // PAR.Competitors Code 1 Usr = DB1.CMP Program Code
  PAR.Competitors_Code_1_Usr = DB1.CMP_Program_Code;

  // IF WRK.Count USR is Two
  IF WRK.Count_USR = 2;

  // PAR.Competitors Code 2 Usr = DB1.CMP Program Code
  PAR.Competitors_Code_2_Usr = DB1.CMP_Program_Code;

  // IF WRK.Count USR is Three
  IF WRK.Count_USR = 3;

  // PAR.Competitors Code 3 Usr = DB1.CMP Program Code
  PAR.Competitors_Code_3_Usr = DB1.CMP_Program_Code;

  QUIT;

  ENDIF;

 }

 //?Initialate totals for averages
 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Cmp_Std_Yield = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Cmp_Base_Mkt_Price = *ZERO;

 //?carcass
 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Cmp_Base_Carc = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Cmp_Lean_Premium_Carc = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Cmp_Yield_Gain_Loss_Carc = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Cmp_Carc_Val_Carc = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Cmp_Sort_Dsc_Carc = *ZERO;

 //?Live
 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Cmp_Base_Live = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Cmp_Lean_Premium_Live = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Cmp_Yield_Gain_Loss_Live = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Cmp_Carc_Val_Live = *ZERO;

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.Cmp_Sort_Dsc_Live = *ZERO;

 //?USER: Process Data record

 CASE;

 // IF DB1.CMP Program Code EQ WRK.Competitors Code 1 Usr
 IF DB1.CMP_Program_Code = WRK.Competitors_Code_1_Usr;

 // OR DB1.CMP Program Code EQ WRK.Competitors Code 2 Usr
 OR DB1.CMP_Program_Code = WRK.Competitors_Code_2_Usr;

 // OR DB1.CMP Program Code EQ WRK.Competitors Code 3 Usr
 OR DB1.CMP_Program_Code = WRK.Competitors_Code_3_Usr;

 //?Yes accumulate
 DO;

 //?Accumulate totals for averages
 // PAR.Cmp Std Yield = PAR.Cmp Std Yield + DB1.CCT Std Yield
 PAR.Cmp_Std_Yield = PAR.Cmp_Std_Yield + DB1.CCT_Std_Yield;

 // PAR.Cmp Base Mkt Price = PAR.Cmp Base Mkt Price + DB1.CCT Base /Live CWT
 PAR.Cmp_Base_Mkt_Price = PAR.Cmp_Base_Mkt_Price + DB1.CCT_Base_Live_CWT;

 //?carcass
 // PAR.Cmp Base Carc = PAR.Cmp Base Carc + DB1.CCT Base /Carc CWT
 PAR.Cmp_Base_Carc = PAR.Cmp_Base_Carc + DB1.CCT_Base_Carc_CWT;

 // PAR.Cmp Lean Premium Carc = PAR.Cmp Lean Premium Carc + DB1.CCT Lean Prem /Carc
 PAR.Cmp_Lean_Premium_Carc = PAR.Cmp_Lean_Premium_Carc + DB1.CCT_Lean_Prem_Carc_CWT;

 // PAR.Cmp Yield Gain/Loss Carc = PAR.Cmp Yield Gain/Loss Carc + DB1.CCT Yield G/L
 PAR.Cmp_Yield_Gain_Loss_Carc = PAR.Cmp_Yield_Gain_Loss_Carc + DB1.CCT_Yield_G_L_Carc_CWT;

 // PAR.Cmp Carc Val Carc = PAR.Cmp Carc Val Carc + DB1.CCT Carc Val /Carc CWT
 PAR.Cmp_Carc_Val_Carc = PAR.Cmp_Carc_Val_Carc + DB1.CCT_Carc_Val_Carc_CWT;

 // PAR.Cmp Sort Dsc Carc = PAR.Cmp Sort Dsc Carc + DB1.CCT Sort Dsc /Carc CWT
 PAR.Cmp_Sort_Dsc_Carc = PAR.Cmp_Sort_Dsc_Carc + DB1.CCT_Sort_Dsc_Carc_CWT;

 //?Live
 // PAR.Cmp Base Live = PAR.Cmp Base Live + DB1.CCT Base /Live CWT
 PAR.Cmp_Base_Live = PAR.Cmp_Base_Live + DB1.CCT_Base_Live_CWT;

 // PAR.Cmp Lean Premium Live = PAR.Cmp Lean Premium Live + DB1.CCT Lean Prem /Live
 PAR.Cmp_Lean_Premium_Live = PAR.Cmp_Lean_Premium_Live + DB1.CCT_Lean_Prem_Live_CWT;

 // PAR.Cmp Yield Gain/Loss Live = PAR.Cmp Yield Gain/Loss Live + DB1.CCT Yield G/L
 PAR.Cmp_Yield_Gain_Loss_Live = PAR.Cmp_Yield_Gain_Loss_Live + DB1.CCT_Yield_G_L_Live_CWT;

 // PAR.Cmp Carc Val Live = PAR.Cmp Carc Val Live + DB1.CCT Carc Val /Live CWT
 PAR.Cmp_Carc_Val_Live = PAR.Cmp_Carc_Val_Live + DB1.CCT_Carc_Val_Live_CWT;

 // PAR.Cmp Sort Dsc Live = PAR.Cmp Sort Dsc Live + DB1.CCT Sort Dsc /Live CWT
 PAR.Cmp_Sort_Dsc_Live = PAR.Cmp_Sort_Dsc_Live + DB1.CCT_Sort_Dsc_Live_CWT;

 ENDDO;

 ENDIF;

}


// PAR.Cmp Std Yield = WRK.Cmp Std Yield / CON.3 *
PAR.Cmp_Std_Yield = WRK.Cmp_Std_Yield / 3;

// PAR.Cmp Base Mkt Price = WRK.Cmp Base Mkt Price / CON.3 *
PAR.Cmp_Base_Mkt_Price = WRK.Cmp_Base_Mkt_Price / 3;

//?carcass
// PAR.Cmp Base Carc = WRK.Cmp Base Carc / CON.3 *Rounded
PAR.Cmp_Base_Carc = WRK.Cmp_Base_Carc / 3 'H';

// PAR.Cmp Lean Premium Carc = WRK.Cmp Lean Premium Carc / CON.3 *Rounded
PAR.Cmp_Lean_Premium_Carc = WRK.Cmp_Lean_Premium_Carc / 3 'H';

// PAR.Cmp Yield Gain/Loss Carc = WRK.Cmp Yield Gain/Loss Carc / CON.3 *Rounded
PAR.Cmp_Yield_Gain_Loss_Carc = WRK.Cmp_Yield_Gain_Loss_Carc / 3 'H';

// PAR.Cmp Carc Val Carc = WRK.Cmp Carc Val Carc / CON.3 *Rounded
PAR.Cmp_Carc_Val_Carc = WRK.Cmp_Carc_Val_Carc / 3 'H';

// PAR.Cmp Sort Dsc Carc = WRK.Cmp Sort Dsc Carc / CON.3 *Rounded
PAR.Cmp_Sort_Dsc_Carc = WRK.Cmp_Sort_Dsc_Carc / 3 'H';

//?Live
// PAR.Cmp Base Live = WRK.Cmp Base Live / CON.3 *Rounded
PAR.Cmp_Base_Live = WRK.Cmp_Base_Live / 3 'H';

// PAR.Cmp Lean Premium Live = WRK.Cmp Lean Premium Live / CON.3 *Rounded
PAR.Cmp_Lean_Premium_Live = WRK.Cmp_Lean_Premium_Live / 3 'H';

// PAR.Cmp Yield Gain/Loss Live = WRK.Cmp Yield Gain/Loss Live / CON.3 *Rounded
PAR.Cmp_Yield_Gain_Loss_Live = WRK.Cmp_Yield_Gain_Loss_Live / 3 'H';

// PAR.Cmp Carc Val Live = WRK.Cmp Carc Val Live / CON.3 *Rounded
PAR.Cmp_Carc_Val_Live = WRK.Cmp_Carc_Val_Live / 3 'H';

// PAR.Cmp Sort Dsc Live = WRK.Cmp Sort Dsc Live / CON.3 *Rounded
PAR.Cmp_Sort_Dsc_Live = WRK.Cmp_Sort_Dsc_Live / 3 'H';

