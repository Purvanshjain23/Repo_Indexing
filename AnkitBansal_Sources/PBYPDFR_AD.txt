// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PBYPDFR
// ?Date: 14.08.2025 Time: 03:49:46
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('A/R');
PARAMETER(PAR.Company_Number);
PARAMETER(PAR.Warehouse_Code);
PARAMETER(PAR.Allow_Multi_Company);
PARAMETER(PAR.Default_Printer);
PARAMETER(PAR.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


EXECUTE FUNCTION(RTV Sys Date Format    RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1264543;
PARAMETER(PAR.User_Profile_Name);
PARAMETER(PAR.System_Date_Format);

// PAR.User Profile Name = JOB.*USER
PAR.User_Profile_Name = JOB.*USER;

// WRK.First Time Flag = CND.Yes
WRK.First_Time_Flag = 'Y';

//?USER: Initialize subfile control

CASE;

// IF WRK.First Time Flag is Yes
IF WRK.First_Time_Flag = 'Y';

// CTL.Record Status = CND.Active
CTL.Record_Status = 'A';

// WRK.First Time Flag = CND.NO
WRK.First_Time_Flag = 'N';

ENDIF;

// LCL.Fax Invoice Flag = CTL.Fax Invoice Flag
LCL.Fax_Invoice_Flag = CTL.Fax_Invoice_Flag;

// CTL.City = CTL.USR City 15
CTL.City = CTL.USR_City_15;

// LCL.Email Selection usr = CTL.Email Selection usr
LCL.Email_Selection_usr = CTL.Email_Selection_usr;

// LCL.EDI Advanced Ship Notice = CTL.EDI Advanced Ship Notice
LCL.EDI_Advanced_Ship_Notice = CTL.EDI_Advanced_Ship_Notice;

// LCL.STATUS = CTL.STATUS
LCL.STATUS = CTL.STATUS;

// LCL.EDI Trading Partner No. = CTL.EDI Trading Partner No.
LCL.EDI_Trading_Partner_No = CTL.EDI_Trading_Partner_No;

// LCL.EDI Cust Duns Number = CTL.EDI Cust Duns Number
LCL.EDI_Cust_Duns_Number = CTL.EDI_Cust_Duns_Number;

//?USER: Initialize subfile record from DBF record

// RCD.USR First New Subfile Rcd = CND.yes
RCD.USR_First_New_Subfile_Rcd = 'Y';

//?** Rtv Fax & Email info from Cust Distribution Entry  P000198
EXECUTE FUNCTION(RTV CDE 1st Fax only  IF) TYPE(EXCINTFUN)                      AC1981538;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER('AR-INVOICE');
PARAMETER(*ZERO);
PARAMETER(WRK.CDE_Name);
PARAMETER(WRK.CDE_Destination);
{
 //?Execute internal function

 EXECUTE FUNCTION(RTV CDE 1st Fax only  RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC1981532;
 PARAMETER(PAR.Ship_To_Customer);
 PARAMETER(PAR.Distribution_Code);
 PARAMETER(PAR.CDE_Sequence_Number);
 PARAMETER(PAR.CDE_Name);
 PARAMETER(PAR.CDE_Destination);
 {
  //?USER: Initialize routine

  MOVE *ALL (To: PAR From: CON);

  //?USER: Process Data record

  //?Return 1st active record with a fax number
  CASE;

  // IF DB1.CDE Destination Type is Fax
  IF DB1.CDE_Destination_Type = 'F';

  CASE;

  // IF DB1.Record Status is Active
  IF DB1.Record_Status = 'A';

  MOVE *ALL (To: PAR From: DB1);

  QUIT;

  ENDIF;

  ENDIF;

 }

}


//?** Set Fax flag if at least 1 fax record              P000198
CASE;

// IF WRK.CDE Destination is Entered
IF WRK.CDE_Destination <> *BLANK;

// RCD.Fax Invoice Flag = CND.Automatically Fax Invoice
RCD.Fax_Invoice_Flag = 'Y';

//?** Set Fax flag if at least 1 fax record              P000198
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Fax Invoice Flag = CND.No Automatic Fax Invoice
RCD.Fax_Invoice_Flag = 'N';

ENDIF;

//?04/17/19 DN R14851-Get Destination Type for Email or One Email/Invoice.
EXECUTE FUNCTION(RTV CDE 1st Eml only2 RT) TYPE(RTVOBJ) FILE(PNF7REP)           AC2170556;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER('AR-INVOICE');
PARAMETER(*ZERO);
PARAMETER(WRK.CDE_Name);
PARAMETER(LCL.CDE_Destination_Type);
PARAMETER(WRK.CDE_Destination);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Return 1st active record with an email address
 CASE;

 // IF DB1.CDE Destination Type is Email
 IF DB1.CDE_Destination_Type = 'E';

 // OR DB1.CDE Destination Type is One Email/Invoice
 OR DB1.CDE_Destination_Type = 'O';

 //?R14851 4/15/19  RMC ADDED Type = O
 CASE;

 // IF DB1.Record Status is Active
 IF DB1.Record_Status = 'A';

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

 ENDIF;

 ENDIF;

}


//?** Set Email flag if at least 1 email record          P000198
CASE;

// IF WRK.CDE Destination is Entered
IF WRK.CDE_Destination <> *BLANK;

// RCD.Email Selection usr = CND.Yes
RCD.Email_Selection_usr = 'Y';

//?04/17/19 DN R14851-Set Email Selection usr='O' if Destination Type='O'.
CASE;

// IF LCL.CDE Destination Type is One Email/Invoice
IF LCL.CDE_Destination_Type = 'O';

// RCD.Email Selection usr = CND.One Email/Invoice
RCD.Email_Selection_usr = 'O';

ENDIF;

//?** Set Email flag if at least 1 email record          P000198
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Email Selection usr = CND.No
RCD.Email_Selection_usr = 'N';

ENDIF;

EXECUTE FUNCTION(Rtv All Values        RT) TYPE(RTVOBJ) FILE(PDNEREP)           AC1569834;
PARAMETER(RCD.Ship_To_Customer);
PARAMETER(LCL.Internet_Password);
PARAMETER(LCL.Email_Address);
PARAMETER(LCL.Email_User_ID);
PARAMETER(RCD.EDI_Trading_Partner_No);
PARAMETER(RCD.EDI_Cust_Duns_Number);
PARAMETER(LCL.EDI_Warehouse_Store_No);
PARAMETER(LCL.State_Tax_ID);
PARAMETER(LCL.Cust_Shipping_Temp_C_F);
PARAMETER(LCL.One_Invoice_Per_PO);
PARAMETER(RCD.EDI_Advanced_Ship_Notice);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?a/r cust = ship to cust
CASE;

// IF DB1.Ship To Customer EQ DB1.A/R Customer Number
IF DB1.Ship_To_Customer = DB1.AR_Customer_Number;

// RCD.STATUS = CND.Yes
RCD.STATUS = 'Y';

//?a/r cust = ship to cust
// IF *OTHERWISE
IF *OTHERWISE;

// RCD.STATUS = CND.No
RCD.STATUS = 'N';

ENDIF;

//?** CTL Selectors:
//?SEL: Fax Invoice
CASE;

// IF CTL.Fax Invoice Flag is *ALL values
IF CTL.Fax_Invoice_Flag = 'Y'/'N';

CASE;

// IF CTL.Fax Invoice Flag NE RCD.Fax Invoice Flag
IF CTL.Fax_Invoice_Flag <> RCD.Fax_Invoice_Flag;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?04/17/19 DN R14851-Replace 'SEL: Email Invoice' to not use LST Value.
//?SEL: Email Invoice                            04/17/19 DN R14851
CASE;

// IF CTL.Email Selection usr is Not Selected
IF CTL.Email_Selection_usr = *BLANK;

// OR CTL.Email Selection usr EQ RCD.Email Selection usr
OR CTL.Email_Selection_usr = RCD.Email_Selection_usr;

//?SEL: Email Invoice                            04/17/19 DN R14851
// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: ASN EDI Flag
CASE;

// IF CTL.EDI Advanced Ship Notice NE LCL.BLANK 1               USR
IF CTL.EDI_Advanced_Ship_Notice <> LCL.BLANK_1_USR;

CASE;

// IF CTL.EDI Advanced Ship Notice NE RCD.EDI Advanced Ship Notice
IF CTL.EDI_Advanced_Ship_Notice <> RCD.EDI_Advanced_Ship_Notice;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// RCD.Name 25A USR = DB1.Customer Name
RCD.Name_25A_USR = DB1.Customer_Name;

//?SEL: Customer Name
CASE;

// IF CTL.Name 25A USR NE WRK.BLANK
IF CTL.Name_25A_USR <> WRK.BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.Name_25A_USR);
PARAMETER(25);
PARAMETER(1);
PARAMETER(CTL.Name_25A_USR);
PARAMETER(25);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

//?SEL: A/R Customer
CASE;

// IF RCD.Ship To Customer NE RCD.A/R Customer Number
IF RCD.Ship_To_Customer <> RCD.AR_Customer_Number;

// AND CTL.STATUS is Yes
AND CTL.STATUS = 'Y';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

//?SEL: A/R Customer
// IF RCD.Ship To Customer EQ RCD.A/R Customer Number
IF RCD.Ship_To_Customer = RCD.AR_Customer_Number;

// AND CTL.STATUS is No
AND CTL.STATUS = 'N';

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

//?SEL: Trading Partner
CASE;

// IF CTL.EDI Trading Partner No. is Entered
IF CTL.EDI_Trading_Partner_No <> *BLANK;

CASE;

// IF CTL.EDI Trading Partner No. is *
IF CTL.EDI_Trading_Partner_No = *;

CASE;

// IF RCD.EDI Trading Partner No. is Not Entered
IF RCD.EDI_Trading_Partner_No = *BLANK;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

// IF *OTHERWISE
IF *OTHERWISE;

CASE;

// IF CTL.EDI Trading Partner No. NE RCD.EDI Trading Partner No.
IF CTL.EDI_Trading_Partner_No <> RCD.EDI_Trading_Partner_No;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

ENDIF;

//?SEL: DUNS
CASE;

// IF CTL.EDI Cust Duns Number is NE Blank
IF CTL.EDI_Cust_Duns_Number <> *BLANK;

// Call program CLC Call Qclscan       UP.
CALL PROGRAM(CLC Call Qclscan       UP) ('QCLSCAN');
PARAMETER(RCD.EDI_Cust_Duns_Number);
PARAMETER(20);
PARAMETER(1);
PARAMETER(CTL.EDI_Cust_Duns_Number);
PARAMETER(20);
PARAMETER(1);
PARAMETER(1);
PARAMETER(*BLANK);
PARAMETER(WRK.USR_Qclscan_Result);

CASE;

// IF WRK.USR Qclscan Result ? is Does contain
IF WRK.USR_Qclscan_Result > 0;

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Record selected = CND.*NO
PGM.*Record_selected = 'N';

ENDIF;

ENDIF;

// PGM.*Scan limit = CON.999999
PGM.*Scan_limit = 999999;

//?USER: Process subfile control (Pre-confirm)

// CTL.USR Name = CTL.Name 25A USR
CTL.USR_Name = CTL.Name_25A_USR;

//?Name
CASE;

// IF CTL.USR Name NE LCL.USR Name
IF CTL.USR_Name <> LCL.USR_Name;

// Execute function CVT to Upper w/SpclChr US.
EXECUTE FUNCTION(CVT to Upper w/SpclChr US) TYPE(EXCUSRSRC) ('POODUFR');
PARAMETER(CTL.USR_Name);
PARAMETER(CTL.USR_Name);
{
 E                    AR1        30  1               ARRAY 2
 C                     MOVEA#IMKTX    AR1              LOAD ARRAY
 C                     Z-ADD1         X1      20       SET COUNTER
 C                     Z-ADD1         Y1      20       SET COUNTER
 * * * * * * * CHECK FOR ALPHABETIC CHARACTERS * * * * * * *
 C                     Z-ADD1         Y1
 C           Y1        DOWLT31
 C           AR1,Y1    IFEQ 'a'
 C                     MOVEL'A'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'b'
 C                     MOVEL'B'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'c'
 C                     MOVEL'C'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'd'
 C                     MOVEL'D'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'e'
 C                     MOVEL'E'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'f'
 C                     MOVEL'F'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'g'
 C                     MOVEL'G'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'h'
 C                     MOVEL'H'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'i'
 C                     MOVEL'I'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'j'
 C                     MOVEL'J'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'k'
 C                     MOVEL'K'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'l'
 C                     MOVEL'L'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'm'
 C                     MOVEL'M'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'n'
 C                     MOVEL'N'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'o'
 C                     MOVEL'O'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'p'
 C                     MOVEL'P'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'q'
 C                     MOVEL'Q'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'r'
 C                     MOVEL'R'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 's'
 C                     MOVEL'S'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 't'
 C                     MOVEL'T'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'u'
 C                     MOVEL'U'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'v'
 C                     MOVEL'V'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'w'
 C                     MOVEL'W'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'x'
 C                     MOVEL'X'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'y'
 C                     MOVEL'Y'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'z'
 C                     MOVEL'Z'       AR1,Y1
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     ADD  1         Y1
 C                     END
 C                     MOVEAAR1       #OMLTX           LOAD OUTPUT
}


// LCL.USR Name = CTL.USR Name
LCL.USR_Name = CTL.USR_Name;

// CTL.Name 25A USR = CTL.USR Name
CTL.Name_25A_USR = CTL.USR_Name;

// LCL.Name 25A USR = CTL.USR Name
LCL.Name_25A_USR = CTL.USR_Name;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?Fax info is from Cust Distribution Entry              P000198
CASE;

// IF CTL.Fax Invoice Flag NE LCL.Fax Invoice Flag
IF CTL.Fax_Invoice_Flag <> LCL.Fax_Invoice_Flag;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?Email info is from Cust Distribution Entry            P000198
CASE;

// IF CTL.Email Selection usr NE LCL.Email Selection usr
IF CTL.Email_Selection_usr <> LCL.Email_Selection_usr;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?A/R Customer flag
CASE;

// IF CTL.STATUS NE LCL.STATUS
IF CTL.STATUS <> LCL.STATUS;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?EDI Trade Partner
CASE;

// IF CTL.EDI Trading Partner No. NE LCL.EDI Trading Partner No.
IF CTL.EDI_Trading_Partner_No <> LCL.EDI_Trading_Partner_No;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?EDI ASN
CASE;

// IF CTL.EDI Advanced Ship Notice NE LCL.EDI Advanced Ship Notice
IF CTL.EDI_Advanced_Ship_Notice <> LCL.EDI_Advanced_Ship_Notice;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?EDI DUNS
CASE;

// IF LCL.EDI Cust Duns Number NE CTL.EDI Cust Duns Number
IF LCL.EDI_Cust_Duns_Number <> CTL.EDI_Cust_Duns_Number;

// Execute function CVT to Upper w/SpclChr US.
EXECUTE FUNCTION(CVT to Upper w/SpclChr US) TYPE(EXCUSRSRC) ('POODUFR');
PARAMETER(CTL.EDI_Cust_Duns_Number);
PARAMETER(CTL.EDI_Cust_Duns_Number);
{
 E                    AR1        30  1               ARRAY 2
 C                     MOVEA#IMKTX    AR1              LOAD ARRAY
 C                     Z-ADD1         X1      20       SET COUNTER
 C                     Z-ADD1         Y1      20       SET COUNTER
 * * * * * * * CHECK FOR ALPHABETIC CHARACTERS * * * * * * *
 C                     Z-ADD1         Y1
 C           Y1        DOWLT31
 C           AR1,Y1    IFEQ 'a'
 C                     MOVEL'A'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'b'
 C                     MOVEL'B'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'c'
 C                     MOVEL'C'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'd'
 C                     MOVEL'D'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'e'
 C                     MOVEL'E'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'f'
 C                     MOVEL'F'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'g'
 C                     MOVEL'G'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'h'
 C                     MOVEL'H'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'i'
 C                     MOVEL'I'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'j'
 C                     MOVEL'J'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'k'
 C                     MOVEL'K'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'l'
 C                     MOVEL'L'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'm'
 C                     MOVEL'M'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'n'
 C                     MOVEL'N'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'o'
 C                     MOVEL'O'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'p'
 C                     MOVEL'P'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'q'
 C                     MOVEL'Q'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'r'
 C                     MOVEL'R'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 's'
 C                     MOVEL'S'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 't'
 C                     MOVEL'T'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'u'
 C                     MOVEL'U'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'v'
 C                     MOVEL'V'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'w'
 C                     MOVEL'W'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'x'
 C                     MOVEL'X'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'y'
 C                     MOVEL'Y'       AR1,Y1
 C                     ELSE
 C           AR1,Y1    IFEQ 'z'
 C                     MOVEL'Z'       AR1,Y1
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     END
 C                     ADD  1         Y1
 C                     END
 C                     MOVEAAR1       #OMLTX           LOAD OUTPUT
}


// LCL.EDI Cust Duns Number = CTL.EDI Cust Duns Number
LCL.EDI_Cust_Duns_Number = CTL.EDI_Cust_Duns_Number;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?City
CASE;

// IF CTL.City NE CTL.USR City 15
IF CTL.City <> CTL.USR_City_15;

// CTL.City = CTL.USR City 15
CTL.City = CTL.USR_City_15;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

QUIT;

ENDIF;

//?F21=Process Print listing
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// LCL.Customer Number Pass  USR = CTL.Ship To Customer
LCL.Customer_Number_Pass_USR = CTL.Ship_To_Customer;

// Call program PRT Pass Cst/Cty/St/StsUP.
CALL PROGRAM(PRT Pass Cst/Cty/St/StsUP) ('PDYQUPR');
PARAMETER(WRK.Return_Code_Usr);
PARAMETER('A/R');
PARAMETER('PDCOPCLP');
PARAMETER(LCL.Customer_Number_Pass_USR);
PARAMETER(CTL.City);
PARAMETER(CTL.State_Code);
PARAMETER(CTL.Record_Status);
PARAMETER(PAR.System_Value_Numeric);
PARAMETER('Print Customer');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER(CTL.EDI_Trading_Partner_No);

CASE;

// IF WRK.Return Code Usr is *Blank
IF WRK.Return_Code_Usr = *BLANK;

// Send information message - 'Print has been submitted.'
MESSAGE(USR1832 *INFO);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?7=display Fax and/or Email addresses                 P000198
CASE;

// IF RCD.*SFLSEL is Option 7
IF RCD.*SFLSEL = '7'/'7';

//?Fax/Email is for Bill To customer only
CASE;

// IF RCD.STATUS is Yes
IF RCD.STATUS = 'Y';

// Call program Dsp Cust Dist Entry   DF.
CALL PROGRAM(Dsp Cust Dist Entry   DF) ('PBYRDFR');
PARAMETER(RCD.Ship_To_Customer);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Fax/Email is for Bill To customer only
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(RCD.AR_Customer_Number);

ENDIF;

ENDIF;

//?9=display Fax and/or Email addresses  R16455 for ship to
CASE;

// IF RCD.*SFLSEL is Option 9
IF RCD.*SFLSEL = '9'/'9';

//?Fax/Email is for Bill To customer only
CASE;

// IF RCD.STATUS is No
IF RCD.STATUS = 'N';

// Call program Dsp Cust Dist Entry   DF.
CALL PROGRAM(Dsp Cust Dist Entry   DF) ('PBYRDFR');
PARAMETER(RCD.Ship_To_Customer);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

//?Fax/Email is for Bill To customer only
// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'A/R Customer is invalid.'
ERROR(USR2110);
MSGPARM(RCD.AR_Customer_Number);

ENDIF;

ENDIF;

