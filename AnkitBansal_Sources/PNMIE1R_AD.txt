// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PNMIE1R
// ?Date: 14.08.2025 Time: 03:45:37
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

EXECUTE FUNCTION(VAL Set Inter. Access  IF) TYPE(EXCINTFUN)                     AC1144606;
PARAMETER('I/C');
PARAMETER(WRK.Company_Number);
PARAMETER(WRK.Warehouse_Code);
PARAMETER(WRK.Allow_Multi_Company);
PARAMETER(WRK.Default_Printer);
PARAMETER(WRK.Salesperson_Code);
{
 //?Execute internal function

 // PAR.User Profile Name = JOB.*USER
 PAR.User_Profile_Name = JOB.*USER;

 EXECUTE FUNCTION(VAL User/Application   IF) TYPE(EXCINTFUN)                     AC1144188;
 PARAMETER(PAR.User_Profile_Name);
 PARAMETER(PAR.Application_Code);
 PARAMETER(PAR.Company_Number);
 PARAMETER(PAR.Warehouse_Code);
 PARAMETER(PAR.Allow_Multi_Company);
 PARAMETER(PAR.Default_Printer);
 PARAMETER(PAR.Salesperson_Code);
 {
  //?Execute internal function

  //?RMC 5/11/09 Rtv default company from user profile --
  //?  Override user code model company if it exists
  EXECUTE FUNCTION(RTV Program Setup w/Co RT) TYPE(RTVOBJ) FILE(CADRREP)          AC1935572;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Allow_Multi_Company);
  PARAMETER(PAR.Default_Printer);
  PARAMETER(PAR.Salesperson_Code);
  PARAMETER(LCL.Company_Number);
  PARAMETER(PAR.User_Code_Model);
  {
   //?USER: Processing if Data record not found

   // PGM.*Return code = CND.*Record does not exist
   PGM.*Return_code = 'Y2U0005';

   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  //?User Profile Record Not found
  CASE;

  // IF PGM.*Return code is *Record does not exist
  IF PGM.*Return_code = 'Y2U0005';

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  CASE;

  // IF PAR.User Code Model is equal to blank
  IF PAR.User_Code_Model = *BLANK;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Profile_Name);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  // IF *OTHERWISE
  IF *OTHERWISE;

  EXECUTE FUNCTION(RTV Appl. Profile      RT) TYPE(RTVOBJ) FILE(CADTREP)          AC1143177;
  PARAMETER(PAR.User_Code_Model);
  PARAMETER(PAR.Application_Code);
  PARAMETER(PAR.Company_Number);
  PARAMETER(LCL.Warehouse_Code);
  {
   //?USER: Process Data record

   MOVE *ALL (To: PAR From: DB1);

  }

  ENDIF;

  // PAR.Warehouse Code = LCL.Warehouse Code
  PAR.Warehouse_Code = LCL.Warehouse_Code;

  //?Return code when not normal for Application Profile
  CASE;

  // IF PGM.*Return code is *Normal
  IF PGM.*Return_code = *BLANK;

  //?Return code when not normal for Application Profile
  // IF *OTHERWISE
  IF *OTHERWISE;

  // Execute function SET Message Queue Dest US.
  EXECUTE FUNCTION(SET Message Queue Dest US) TYPE(EXCUSRSRC) ('USNCUFR');
  {
   C                     MOVEL'*PRV '   ZAPGRL           PREVIOUS
  }

  // Send completion message - 'Application access denied for user &1 in application area &2'
  MESSAGE(USR0810 *COMPLETION);
  MSGPARM(PAR.User_Profile_Name);
  MSGPARM(PAR.Application_Code);

  PGM.*Return_code = 'Y2U9999';

  RETURN;

  ENDIF;

  //?Override company with User profile control's company if found
  CASE;

  // IF LCL.Company Number is not equal to zero
  IF LCL.Company_Number <> *ZERO;

  // PAR.Company Number = LCL.Company Number
  PAR.Company_Number = LCL.Company_Number;

  //?Get prod warehouse, if the appl got a warehouse
  CASE;

  // IF LCL.Warehouse Code is Not Blanks
  IF LCL.Warehouse_Code <> *BLANK;

  // Call program RTV Prod Whse for Co  XF.
  CALL PROGRAM(RTV Prod Whse for Co  XF) ('PNKDXFR');
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(LCL.Company_Number);

  ENDIF;

  ENDIF;

 }

 EXECUTE FUNCTION(SET Screen Headings    IF) TYPE(EXCINTFUN)                     AC1248058;
 PARAMETER(PAR.Application_Code);
 {
  //?Execute internal function

  EXECUTE FUNCTION(RTV Applic. Group Desc RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1274118;
  PARAMETER(PAR.Application_Code);
  PARAMETER(WRK.Description);
  {
   //?USER: Process Data record

   CASE;

   // IF DB1.Application Group is Blank
   IF DB1.Application_Group = *BLANK;

   MOVE *ALL (To: PAR From: DB1);

   // IF *OTHERWISE
   IF *OTHERWISE;

   EXECUTE FUNCTION(RTV Application Desc   RT) TYPE(RTVOBJ) FILE(CADNREP)          AC1249881;
   PARAMETER(DB1.Application_Group);
   PARAMETER(PAR.Description);
   {
    //?USER: Processing if Data record not found

    MOVE *ALL (To: PAR From: CON);

    // PGM.*Return code = CND.*Record does not exist
    PGM.*Return_code = 'Y2U0005';

    //?USER: Process Data record

    MOVE *ALL (To: PAR From: DB1);

   }

   ENDIF;

  }

  // WRK.USR Description 40 = WRK.Description
  WRK.USR_Description_40 = WRK.Description;

  // Execute function CLC Center Txt Str 40  US.
  EXECUTE FUNCTION(CLC Center Txt Str 40  US) TYPE(EXCUSRSRC) ('PDYJUFR');
  PARAMETER(WRK.USR_Description_40);
  PARAMETER(WRK.USR_Description_40_2);
  {
   E                    UCT        40  1               CENTER TABLE
   C                     MOVEA#IDSC4    UCT              LOAD ARRAY
   C                     Z-ADD40        UX      20       SET COUNTER
   C           UX        DOWGT0
   C           UCT,UX    IFEQ ' '
   C                     SUB  1         UX
   C                     ELSE
   C                     Z-ADDUX        UXH     20
   C                     Z-ADD0         UX
   C                     END
   C                     END
   C           40        SUB  UXH       UX
   C           UX        DIV  2         UX
   C           UX        IFGT 0
   C                     MOVE *BLANKS   UCT
   C                     MOVEA#IDSC4    UCT,UX
   C                     END
   C                     MOVEAUCT       #ODE40           LOAD OUTPUT
  }

  // Execute function MOV Appl Desc-Co Head  US.
  EXECUTE FUNCTION(MOV Appl Desc-Co Head  US) TYPE(EXCUSRSRC) ('PDYKUFR');
  PARAMETER(WRK.USR_Description_40_2);
  {
   C                     MOVE #IDE40    ##CMP
  }

 }

}


//?USER: Delete DBF record

EXECUTE FUNCTION(Del Item Loc/Crt Trn  DL) TYPE(DLTOBJ) FILE(PDL5CPP)           AC1505605;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Lot_Number);
PARAMETER(DTL.Location_Code);
PARAMETER(DTL.Location_Level);
{
 //?USER: Processing after Data update

 // PAR.ILL Item Qty On-Hand = DB1.ILL Item Qty On-Hand * CON.-1 *
 PAR.ILL_Item_Qty_On_Hand = DB1.ILL_Item_Qty_On_Hand * -1;

 EXECUTE FUNCTION(Crt Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1510270;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER('A');
 PARAMETER(JOB.*Job_date);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.ILL_Item_Qty_On_Hand);
 PARAMETER(DB1.ILL_Unit_Weight);
 PARAMETER(DB1.Lot_Number);
 PARAMETER(DB1.Location_Code);
 PARAMETER(DB1.Location_Level);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('P');
 PARAMETER(WRK.LTT_Unused_Sts_1);
 PARAMETER(WRK.LTT_Unused_Sts_2);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(PAR.LLT_Transaction_Date);
  PARAMETER(PAR.LLT_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.LLT Sequence # = CON.1
   PAR.LLT_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
   PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(PAR.LLT_Transaction_Date);
  PARAMETER(PAR.LLT_Sequence_Number);
  PARAMETER(PAR.LLT_Production_Date);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  PARAMETER(PAR.LLT_Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.LLT_Location_Level);
  PARAMETER(PAR.Transfer_Warehouse_Code);
  PARAMETER(PAR.LLT_Transfer_Lot_Number);
  PARAMETER(PAR.Transfer_Location_Code);
  PARAMETER(PAR.LLT_Transfer_Loc_Level);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.LLT_Status);
  PARAMETER(PAR.LTT_Unused_Sts_1);
  PARAMETER(PAR.LTT_Unused_Sts_2);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Item Loc/Crt Trn  CH) TYPE(CHGOBJ) FILE(PDL5CPP)           AC1505604;
PARAMETER(DTL.Company_Number);
PARAMETER(DTL.Item_Code);
PARAMETER(DTL.Warehouse_Code);
PARAMETER(DTL.Production_Date);
PARAMETER(DTL.Lot_Number);
PARAMETER(DTL.Location_Code);
PARAMETER(DTL.Location_Level);
PARAMETER(DTL.ILL_Item_Qty_On_Hand);
PARAMETER(DTL.ILL_Unit_Weight);
PARAMETER(DTL.ILL_Co_Packer_Lot_Num);
PARAMETER(DTL.ILL_Item_Wgt_On_Hand);
PARAMETER(DTL.ILL_Unused_Qty_3);
PARAMETER(DTL.ILL_Unused_Wgt_3);
PARAMETER(DTL.ILL_Avail_Ship_Date);
PARAMETER(DTL.ILL_Unused_Date_1);
PARAMETER(DTL.ILL_Unused_Date_2);
PARAMETER(DTL.ILL_Unused_Nbr_1);
PARAMETER(DTL.ILL_Customer_Code);
PARAMETER(DTL.ILL_Status);
PARAMETER(DTL.ILL_Unused_Sts_1);
PARAMETER(DTL.ILL_Unused_Sts_2);
PARAMETER(DTL.ILL_Unused_Sts_3);
PARAMETER(DTL.Inv_Hold_Reason_Code);
PARAMETER(DTL.EDI_Status_1);
PARAMETER(DTL.EDI_Status_2);
PARAMETER(DTL.EDI_Status_3);
PARAMETER(DTL.Record_Status);
PARAMETER(DTL.Job_Time);
PARAMETER(DTL.User_Id);
PARAMETER(DTL.Job_Name);
PARAMETER(DTL.Job_Date);
{
 //?USER: Processing after Data read

 // PAR.Quantity Loc On-Hand USR = PAR.ILL Item Qty On-Hand - DB1.ILL Item Qty On-Ha
 PAR.Quantity_Loc_On_Hand_USR = PAR.ILL_Item_Qty_On_Hand - DB1.ILL_Item_Qty_On_Hand;

 //?USER: Processing before Data update

 EXECUTE FUNCTION(Set Record Stamp CHGOB IF) TYPE(EXCINTFUN)                     AC1283156;
 PARAMETER(DB1.Job_Time);
 PARAMETER(DB1.User_Id);
 PARAMETER(DB1.Job_Name);
 PARAMETER(DB1.Job_Date);
 {
  //?Execute internal function

  // PAR.Job Time = JOB.*Job time
  PAR.Job_Time = JOB.*Job_time;

  // PAR.User Id = JOB.*USER
  PAR.User_Id = JOB.*USER;

  // PAR.Job Name = JOB.*PROGRAM
  PAR.Job_Name = JOB.*PROGRAM;

  // PAR.Job Date = JOB.*Job date
  PAR.Job_Date = JOB.*Job_date;

 }

 //?USER: Processing after Data update

 CASE;

 // IF PAR.Quantity Loc On-Hand USR is NE Zero
 IF PAR.Quantity_Loc_On_Hand_USR <> *ZERO;

 EXECUTE FUNCTION(Crt Item Lot/Loc Trns IF) TYPE(EXCINTFUN)                      AC1510270;
 PARAMETER(DB1.Company_Number);
 PARAMETER(DB1.Item_Code);
 PARAMETER(DB1.Warehouse_Code);
 PARAMETER('A');
 PARAMETER(JOB.*Job_date);
 PARAMETER(DB1.Production_Date);
 PARAMETER(PAR.Quantity_Loc_On_Hand_USR);
 PARAMETER(WRK.LLT_Transaction_Wgt);
 PARAMETER(DB1.Lot_Number);
 PARAMETER(DB1.Location_Code);
 PARAMETER(DB1.Location_Level);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*BLANK);
 PARAMETER(*ZERO);
 PARAMETER(*ZERO);
 PARAMETER('P');
 PARAMETER(WRK.LTT_Unused_Sts_1);
 PARAMETER(WRK.LTT_Unused_Sts_2);
 {
  //?Execute internal function

  EXECUTE FUNCTION(Rtv Next Seq #        RT) TYPE(RTVOBJ) FILE(PDL7CPP)           AC1510279;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(PAR.LLT_Transaction_Date);
  PARAMETER(PAR.LLT_Sequence_Number);
  {
   //?USER: Processing if Data record not found

   // PAR.LLT Sequence # = CON.1
   PAR.LLT_Sequence_Number = 1;

   //?USER: Process Data record

   // PAR.LLT Sequence # = DB1.LLT Sequence # + CON.1
   PAR.LLT_Sequence_Number = DB1.LLT_Sequence_Number + 1;

   QUIT;

  }

  EXECUTE FUNCTION(Crt Item Lot/Loc Trns CR) TYPE(CRTOBJ) FILE(PDL7CPP)           AC1505285;
  PARAMETER(PAR.Company_Number);
  PARAMETER(PAR.Item_Code);
  PARAMETER(PAR.Warehouse_Code);
  PARAMETER(PAR.LLT_Transaction_Type);
  PARAMETER(PAR.LLT_Transaction_Date);
  PARAMETER(PAR.LLT_Sequence_Number);
  PARAMETER(PAR.LLT_Production_Date);
  PARAMETER(PAR.LLT_Transaction_Qty);
  PARAMETER(PAR.LLT_Transaction_Wgt);
  PARAMETER(PAR.LLT_Lot_Number);
  PARAMETER(PAR.Location_Code);
  PARAMETER(PAR.LLT_Location_Level);
  PARAMETER(PAR.Transfer_Warehouse_Code);
  PARAMETER(PAR.LLT_Transfer_Lot_Number);
  PARAMETER(PAR.Transfer_Location_Code);
  PARAMETER(PAR.LLT_Transfer_Loc_Level);
  PARAMETER(PAR.Order_Number);
  PARAMETER(PAR.LLT_Status);
  PARAMETER(PAR.LTT_Unused_Sts_1);
  PARAMETER(PAR.LTT_Unused_Sts_2);
  PARAMETER(PAR.EDI_Status_1);
  PARAMETER(PAR.EDI_Status_2);
  PARAMETER(PAR.EDI_Status_3);
  PARAMETER(PAR.Record_Status);
  PARAMETER(PAR.Job_Time);
  PARAMETER(PAR.User_Id);
  PARAMETER(PAR.Job_Name);
  PARAMETER(PAR.Job_Date);
  {
   //?USER: Processing before Data update

   EXECUTE FUNCTION(SET Record Stamp CRTOB IF) TYPE(EXCINTFUN)                     AC1282865;
   PARAMETER(DB1.Record_Status);
   PARAMETER(DB1.Job_Time);
   PARAMETER(DB1.User_Id);
   PARAMETER(DB1.Job_Name);
   PARAMETER(DB1.Job_Date);
   {
    //?Execute internal function

    // PAR.Record Status = CND.Active
    PAR.Record_Status = 'A';

    // PAR.Job Time = JOB.*Job time
    PAR.Job_Time = JOB.*Job_time;

    // PAR.User Id = JOB.*USER
    PAR.User_Id = JOB.*USER;

    // PAR.Job Name = JOB.*PROGRAM
    PAR.Job_Name = JOB.*PROGRAM;

    // PAR.Job Date = JOB.*Job date
    PAR.Job_Date = JOB.*Job_date;

   }

  }

 }

 ENDIF;

}


