// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PLAQDFR
// ?Date: 14.08.2025 Time: 02:53:29
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

//? 4/12/2017 JBB C9426 - Add Ref fields to the screen.
//?Modification history
DO;

//? 4/12/2017 JBB C9426 - Add Ref fields to the screen.
//?11/02/2020 ISE H16853 - CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
ENDDO;

EXECUTE FUNCTION(Val Application/User  IF) TYPE(EXCINTFUN)                      AB1129080;
PARAMETER(PAR.Oms_Warehouse_Code);
PARAMETER(WRK.CC_Company_Number);
PARAMETER('HPE');
PARAMETER(PAR.Oms_SalesPerson_Code);
PARAMETER(PAR.Oms_Allow_Multi_Company);
PARAMETER(PAR.Oms_Default_Printer);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(PAR.Oms_Access_Denied_Y_N);
{
 //?Execute internal function

 // Call program Val Application/User  XF.
 CALL PROGRAM(Val Application/User  XF) ('PDGXXFR');
 PARAMETER(PAR.Oms_Warehouse_Code);
 PARAMETER(PAR.CC_Company_Number);
 PARAMETER(PAR.Oms_Application_Code);
 PARAMETER(PAR.Oms_SalesPerson_Code);
 PARAMETER(PAR.Oms_Allow_Multi_Company);
 PARAMETER(PAR.Oms_Default_Printer);
 PARAMETER(PAR.Oms_Name);
 PARAMETER(PAR.Oms_System_Value_Alpha);
 PARAMETER(PAR.Oms_Access_Denied_Y_N);

 CASE;

 // IF PAR.Oms Access Denied (Y/N) is Yes
 IF PAR.Oms_Access_Denied_Y_N = 'Y';

 // Send error message - 'Access Denied for User'
 ERROR(PRK0298);

 // IF *OTHERWISE
 IF *OTHERWISE;

 // Execute function Mov ApplN to Company  US.
 EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
 PARAMETER(PAR.Oms_System_Value_Alpha);
 {
  C***   MOVE USER SOURCE                      ***
  C                     MOVEL#IEVTX    ##CMP
 }

 ENDIF;

}


// PAR.PRT Night Queue Run Sts = CND.No
PAR.PRT_Night_Queue_Run_Sts = 'N';

// LCL.Company Value Code    USR = CND.HPE & HPS Application Usd
LCL.Company_Value_Code_USR = 'DLVTRKRULE';

// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(WRK.CC_Company_Number);
PARAMETER(LCL.Company_Value_Code_USR);
PARAMETER(LCL.System_Value_Alpha_USR);

// WRK.Co Uses HPE & HPS usr = LCL.System Value Alpha    USR
WRK.Co_Uses_HPE_HPS_usr = LCL.System_Value_Alpha_USR;

//?USER: Initialize subfile control

//?Accum for CTL context head totals
DO;

// CTL.DSH Planned Kill Head = PAR.DSH Planned Kill Head
CTL.DSH_Planned_Kill_Head = PAR.DSH_Planned_Kill_Head;

EXECUTE FUNCTION(Rtv Accum by SrcCode  RT) TYPE(RTVOBJ) FILE(PLAECPP)           AB1245734;
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(CTL.Head_Total_CNT_USR);
PARAMETER(CTL.Head_Total_OTH_USR);
PARAMETER(CTL.Head_Total_SBD_USR);
{
 //?USER: Initialize routine

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 //?Date 03/17/2004 By Susan Mason  TFM Release 01 for Head Total SBD
 CASE;

 // IF DB1.SR Source Code is Contract
 IF DB1.SR_Source_Code = 'CPR';

 // PAR.Head Total CNT USR = PAR.Head Total CNT USR + DB1.DSD Scheduled Delv Head
 PAR.Head_Total_CNT_USR = PAR.Head_Total_CNT_USR + DB1.DSD_Scheduled_Delv_Head;

 // IF DB1.SR Source Code is Open Daily Buys
 IF DB1.SR_Source_Code = 'ODB';

 // PAR.Head Total OTH USR = PAR.Head Total OTH USR + DB1.DSD Scheduled Delv Head
 PAR.Head_Total_OTH_USR = PAR.Head_Total_OTH_USR + DB1.DSD_Scheduled_Delv_Head;

 // IF DB1.SR Source Code is Seaboard
 IF DB1.SR_Source_Code = 'SBD';

 // OR DB1.SR Source Code is Triumph Foods Member
 OR DB1.SR_Source_Code = 'TFM';

 //?Date 03/17/2004 Susan Mason Add condition = Triumph Foods Member
 // PAR.Head Total SBD USR = PAR.Head Total SBD USR + DB1.DSD Scheduled Delv Head
 PAR.Head_Total_SBD_USR = PAR.Head_Total_SBD_USR + DB1.DSD_Scheduled_Delv_Head;

 ENDIF;

}


// Compute: Sched Head USR
CTL.Scheduled_Head_USR = ( CTL.Head_Total_SBD_USR + CTL.Head_Total_CNT_USR )                       +
+ CTL.Head_Total_OTH_USR;

// CTL.DIFF Total Head = CTL.DSH Planned Kill Head - CTL.Scheduled Head USR
CTL.DIFF_Total_Head = CTL.DSH_Planned_Kill_Head - CTL.Scheduled_Head_USR;

ENDDO;

//?USER: Initialize subfile record from DBF record

// RCD.Status 1 = CND.No
RCD.Status_1 = 'N';

CASE;

// IF DB1.SR Source Code is Open Daily Buys
IF DB1.SR_Source_Code = 'ODB';

// AND DB1.BOH Buy Order Number is EQ Zero
AND DB1.BOH_Buy_Order_Number = *ZERO;

// RCD.Status 1 = CND.Yes
RCD.Status_1 = 'Y';

ENDIF;

EXECUTE FUNCTION(Rtv Next Line No      RT) TYPE(RTVOBJ) FILE(PLAKCPP)           AB1244994;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(WRK.DSC_Line_Number);
{
 //?USER: Processing if Data record not found

 // PAR.DSC Line Number = CON.1
 PAR.DSC_Line_Number = 1;

 //?USER: Process Data record

 // PAR.DSC Line Number = DB1.DSC Line Number + CON.1
 PAR.DSC_Line_Number = DB1.DSC_Line_Number + 1;

 QUIT;

}


CASE;

// IF WRK.DSC Line Number is comments exist
IF WRK.DSC_Line_Number > 1;

// RCD.Asterisk Text Field = CON.*
RCD.Asterisk_Text_Field = *;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.Asterisk Text Field = CON.*BLANK
RCD.Asterisk_Text_Field = *BLANK;

ENDIF;

CASE;

// IF DB1.DSD Source Type is Internal
IF DB1.DSD_Source_Type = 'I';

CASE;

// IF DB1.DSD Farm Site Code is Entered
IF DB1.DSD_Farm_Site_Code > *ZERO;

// RCD.PL Location Code = DB1.DSD Farm Site Code
RCD.PL_Location_Code = DB1.DSD_Farm_Site_Code;

// IF *OTHERWISE
IF *OTHERWISE;

// RCD.PL Location Code = CON.*BLANK
RCD.PL_Location_Code = *BLANK;

ENDIF;

ENDIF;

//?USER: Process subfile control (Pre-confirm)

//?F4=PROMPT
CASE;

// IF CTL.*CMD key is *Prompt
IF CTL.*CMD_key = '04';

CASE;

// IF PGM.*Cursor field <IS> CTL.SR Source Code
IF PGM.*Cursor_field = CTL.SR_Source_Code;

// Call program Sel Source            SR.
CALL PROGRAM(Sel Source            SR) ('PKDRSRR');
PARAMETER(CTL.SR_Source_Code);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?F5=Refresh
CASE;

// IF CTL.*CMD key is Refresh
IF CTL.*CMD_key = '05';

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F6=Crt Detail
CASE;

// IF CTL.*CMD key is *Create
IF CTL.*CMD_key = '06';

// Call program Edt Delv Sched Dtl    ER.
CALL PROGRAM(Edt Delv Sched Dtl    ER) ('PLBFE1R');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(*ZERO);
PARAMETER(*ZERO);
PARAMETER(*ZERO);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F7=Create BOs
CASE;

// IF CTL.*CMD key is CF07
IF CTL.*CMD_key = '07';

// Call program Pmt Crt BOH/BOL Auto   PV.
CALL PROGRAM(Pmt Crt BOH/BOL Auto   PV) ('PLBHPVR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?F21=Print Schedule
CASE;

// IF CTL.*CMD key is CF21
IF CTL.*CMD_key = '21';

// Call program Pmt Print Options WEB XF.
CALL PROGRAM(Pmt Print Options WEB XF) ('POT2PVR');
PARAMETER('Print Delivery Schedule');
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
PARAMETER(PAR.PRT_Night_Queue_Run_Sts);
PARAMETER(PAR.PRT_Night_Queue);
PARAMETER('HPE');

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Retrieve message - 'JOB(&1) jobq(&2) log(&3) hold(&4)'
PGM.*Sbmjob_override_string = RTVMSG(PRK0812);
PARAMETER('PRTDELVSCH');
PARAMETER(*JOBD);
PARAMETER(*JOBD_JOBD_JOBD);
PARAMETER(*NO);

// Call program Prt Delivery Schedule CL.
SBMJOB;
CALL PROGRAM(Prt Delivery Schedule CL) ('PLBZUPR');
PARAMETER(CTL.CC_Company_Number);
PARAMETER(CTL.DSH_Kill_Date);
PARAMETER(PAR.PRT_Printer_Device);
PARAMETER(PAR.PRT_Hold_Output_Sts);
PARAMETER(PAR.PRT_Save_Output_Sts);
PARAMETER(PAR.PRT_Copies);
SBMJOBEND;

// Send information message - 'Delivery Schedule printed for &1'
MESSAGE(PRK1055 *INFO);
MSGPARM(CTL.DSH_Kill_Date);

ENDIF;

ENDIF;

//?USER: Process subfile record (Pre-confirm)

//?2=Edit Slot
CASE;

// IF RCD.*SFLSEL is Edit
IF RCD.*SFLSEL = '2'/'2';

//?Error: Locked Status
CASE;

// IF RCD.DSD Lock Status is Locked
IF RCD.DSD_Lock_Status = 'L';

// Send error message - 'Option &1 not valid for Status &2.'
ERROR(PRK0771);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.DSD_Lock_Status);

//?Error: Locked Status
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Edt Delv Sched Dtl    ER.
CALL PROGRAM(Edt Delv Sched Dtl    ER) ('PLBFE1R');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?I=Edit Internal
CASE;

// IF RCD.*SFLSEL is Internal
IF RCD.*SFLSEL = 'I';

//?Error: Locked Status
CASE;

// IF RCD.DSD Lock Status is Locked
IF RCD.DSD_Lock_Status = 'L';

// Send error message - 'Option &1 not valid for Status &2.'
ERROR(PRK0771);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.DSD_Lock_Status);

//?Error: Locked Status
// IF *OTHERWISE
IF *OTHERWISE;

// Call program Zzz Delv Schd Dtl INT ER.
CALL PROGRAM(Zzz Delv Schd Dtl INT ER) ('PLB0E1R');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

//?3=Clear Slot
CASE;

// IF RCD.*SFLSEL is *Option 3 request
IF RCD.*SFLSEL = '3'/'3';

//?ERROR: Lock Status
CASE;

// IF RCD.DSD Lock Status is Locked
IF RCD.DSD_Lock_Status = 'L';

// Send error message - 'Option &1 not valid for Status &2.'
ERROR(PRK0771);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.DSD_Lock_Status);

//?ERROR: Lock Status
// IF *OTHERWISE
IF *OTHERWISE;

//?ERROR: Source Type
CASE;

// IF RCD.DSD Source Type is Internal
IF RCD.DSD_Source_Type = 'I';

// Send error message - 'Option &1 not valid for source type &2.'
ERROR(PRK1049);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.DSD_Source_Type);

//?ERROR: Source Type
// IF *OTHERWISE
IF *OTHERWISE;

EXECUTE FUNCTION(Rtv BOL Tattoo Info   RT) TYPE(RTVOBJ) FILE(PKA1CPP)           AB1213937;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(NLL.TH_HPS_Movement_Ref_#);
PARAMETER(LCL.Record_Found_TH_USR);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 // PAR.Record Found TH USR = CND.Record Not Found
 PAR.Record_Found_TH_USR = 'N';

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 // PAR.Record Found TH USR = CND.Record Found
 PAR.Record_Found_TH_USR = 'Y';

 QUIT;

}


CASE;

// IF LCL.Record Found TH USR is Record Found
IF LCL.Record_Found_TH_USR = 'Y';

// Send error message - 'A Tattoo Header is using the record.  Delete is invalid.'
ERROR(PRK0262);

// IF *OTHERWISE
IF *OTHERWISE;

// Call program Clr Slot in DSD       PV.
CALL PROGRAM(Clr Slot in DSD       PV) ('PLBGPVR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

ENDIF;

ENDIF;

ENDIF;

//?5=Edit BO
CASE;

// IF RCD.*SFLSEL is Select Option 5
IF RCD.*SFLSEL = '5'/'5';

//?Error: No producer
CASE;

// IF RCD.PD Producer Code is Blank
IF RCD.PD_Producer_Code = *BLANK;

// Send error message - 'Producer and Location are required.'
ERROR(PRK0749);
MSGPARM(RCD.PD_Producer_Code);
MSGPARM(RCD.PL_Location_Code);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

//?Error: Internal producer
CASE;

// IF RCD.DSD Source Type is Internal
IF RCD.DSD_Source_Type = 'I';

// Send error message - 'Option &1 not valid for source type &2.'
ERROR(PRK1049);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.DSD_Source_Type);

QUIT;

ENDIF;

//?Error: No head
CASE;

// IF RCD.DSD Scheduled Delv Head is Zero
IF RCD.DSD_Scheduled_Delv_Head = *ZERO;

// Send error message - 'Scheduled Head is required.'
ERROR(PRK1075);
MSGPARM(RCD.DSD_Scheduled_Delv_Head);

QUIT;

ENDIF;

//?Create BO Header &/or Load
CASE;

// IF RCD.BOL Load Number is EQ Zero
IF RCD.BOL_Load_Number = *ZERO;

//?9/23/03  See if BO Exists for kill/prod/loc
EXECUTE FUNCTION(Rtv BOH For Prdcr/Loc RT) TYPE(RTVOBJ) FILE(PKAWCPP)           AB1246633;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(LCL.BOH_Buy_Order_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
{
 //?USER: Initialize routine

 // PAR.BOH Buy Order Number = CON.*ZERO
 PAR.BOH_Buy_Order_Number = *ZERO;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

 QUIT;

}


CASE;

// IF LCL.BOH Buy Order Number is NE Zero
IF LCL.BOH_Buy_Order_Number <> *ZERO;

//?9/23/03  Ask user if using existing BOH or creating a new one.
// Call program Sel Buy Ord b/Kll/Prd DF.
CALL PROGRAM(Sel Buy Ord b/Kll/Prd DF) ('PLDYDFR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);
PARAMETER(LCL.BOH_Buy_Order_Number);

// IF *OTHERWISE
IF *OTHERWISE;

// PGM.*Return code = CND.*Normal
PGM.*Return_code = *BLANK;

ENDIF;

CASE;

// IF PGM.*Return code is *Normal
IF PGM.*Return_code = *BLANK;

// Call program Crt BOH/BOL f/DelvSch XF.
CALL PROGRAM(Crt BOH/BOL f/DelvSch XF) ('PLBEXFR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Scheduled_Delv_Head);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(LCL.BOH_Company_Number);
PARAMETER(LCL.BOH_Buy_Order_Number);
PARAMETER(LCL.BOL_Load_Number);
PARAMETER(RCD.DSD_PRD_Srv_Batch_ID);
PARAMETER(RCD.DSD_PRD_Srv_Sched_ID);
PARAMETER(RCD.DSD_Ref_1);
PARAMETER(RCD.DSD_Ref_2);
PARAMETER(RCD.DSD_Ref_Status);
PARAMETER('Y');

CASE;

// IF LCL.BOH Buy Order Number is NE Zero
IF LCL.BOH_Buy_Order_Number <> *ZERO;

EXECUTE FUNCTION(Chg Delv Sched Dtl    CH) TYPE(CHGOBJ) FILE(PLAECPP)           AB1244728;
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.DSD_Scheduled_Hour);
PARAMETER(RCD.DSD_Farm_Site_Code);
PARAMETER(RCD.DSD_Building);
PARAMETER(RCD.DSD_Room);
PARAMETER(RCD.DSD_Sire_Line_Code);
PARAMETER(RCD.DSD_Hog_Group_Code);
PARAMETER(RCD.DSD_Unused_Head);
PARAMETER(RCD.DSD_Scheduled_Delv_Head);
PARAMETER(RCD.DSD_Scheduled_Kill_Head);
PARAMETER(RCD.DSD_Transportation_Office);
PARAMETER(RCD.DSD_Trucker_Code_HPS);
PARAMETER(RCD.DSD_Driver);
PARAMETER(RCD.DSD_Loading_Crew);
PARAMETER(RCD.CHR_Code);
PARAMETER(RCD.DSD_Load_Type);
PARAMETER(RCD.DSD_Full_Split_Load);
PARAMETER(RCD.DSD_Movement_Number);
PARAMETER(RCD.DSD_Truck_ID);
PARAMETER(RCD.DSD_Trailer_ID);
PARAMETER(RCD.DSD_Movement_Printed);
PARAMETER(RCD.DSD_Sched_Route_Start_Pnt);
PARAMETER(RCD.DSD_Sched_Route_Start_Dte);
PARAMETER(RCD.DSD_Sched_Route_Start_Tim);
PARAMETER(RCD.DSD_Sch_Farm_Arrival_Date);
PARAMETER(RCD.DSD_Sch_Farm_Arrival_Time);
PARAMETER(RCD.DSD_Sch_Start_Load_Date);
PARAMETER(RCD.DSD_Sch_Start_Load_Time);
PARAMETER(RCD.DSD_Receiving_Shift);
PARAMETER(RCD.DSD_Kill_Shift);
PARAMETER(RCD.DSD_BOL_Kill_Shift);
PARAMETER(RCD.DSD_HPS_Post_Status);
PARAMETER(RCD.DSD_HPE_Post_Status);
PARAMETER(RCD.DSD_Lock_Status);
PARAMETER(RCD.DSD_Source_Type);
PARAMETER(RCD.DSD_Transfer_Sts);
PARAMETER(RCD.DSD_Unused_Date);
PARAMETER(RCD.DSD_Unused_Time);
PARAMETER(RCD.SR_Source_Code);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(LCL.BOH_Company_Number);
PARAMETER(LCL.BOH_Buy_Order_Number);
PARAMETER(LCL.BOL_Load_Number);
PARAMETER(RCD.DSD_PRD_Srv_Batch_ID);
PARAMETER(RCD.DSD_PRD_Srv_Sched_ID);
PARAMETER(RCD.DSD_Ref_1);
PARAMETER(RCD.DSD_Ref_2);
PARAMETER(RCD.DSD_Ref_Status);
PARAMETER(RCD.RS_User_Changed);
PARAMETER(RCD.RS_Date_Changed);
PARAMETER(RCD.RS_Time_Changed);
PARAMETER(RCD.RS_Record_Status);
PARAMETER(RCD.RS_Job);
PARAMETER(RCD.RS_Program);
PARAMETER(RCD.RS_User_Added);
PARAMETER(RCD.RS_Date_Added);
PARAMETER(RCD.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

}


ENDIF;

// RCD.BOH Company Number = LCL.BOH Company Number
RCD.BOH_Company_Number = LCL.BOH_Company_Number;

// RCD.BOH Buy Order Number = LCL.BOH Buy Order Number
RCD.BOH_Buy_Order_Number = LCL.BOH_Buy_Order_Number;

// RCD.BOL Load Number = LCL.BOL Load Number
RCD.BOL_Load_Number = LCL.BOL_Load_Number;

ENDIF;

ENDIF;

CASE;

// IF RCD.BOH Buy Order Number is NE Zero
IF RCD.BOH_Buy_Order_Number <> *ZERO;

// Call program Edt Buy Order and Load ET.
CALL PROGRAM(Edt Buy Order and Load ET) ('PKAOETR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(WRK.Head_Total_USR);
PARAMETER(PAR.Oms_Name);
PARAMETER(PAR.Oms_System_Value_Alpha);

ENDIF;

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?6=Move Slot
CASE;

// IF RCD.*SFLSEL is Select Option 6
IF RCD.*SFLSEL = '6'/'6';

//?if company use HPS this move is not allowed here
CASE;

// IF WRK.Co Uses HPE & HPS usr is Uses HPS Applications
IF WRK.Co_Uses_HPE_HPS_usr = 'Y';

// Send error message - 'Option not allowed'
ERROR(PRK0648);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

//?Error: No producer
CASE;

// IF RCD.PD Producer Code is Blank
IF RCD.PD_Producer_Code = *BLANK;

// Send error message - 'Producer and Location are required.'
ERROR(PRK0749);
MSGPARM(RCD.PD_Producer_Code);
MSGPARM(RCD.PL_Location_Code);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

//?Error: Internal producer
CASE;

// IF RCD.DSD Source Type is Internal
IF RCD.DSD_Source_Type = 'I';

// Send error message - 'Option &1 not valid for source type &2.'
ERROR(PRK1049);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.DSD_Source_Type);

QUIT;

ENDIF;

//?Error: No head
CASE;

// IF RCD.DSD Scheduled Delv Head is Zero
IF RCD.DSD_Scheduled_Delv_Head = *ZERO;

// Send error message - 'Scheduled Head is required.'
ERROR(PRK1075);
MSGPARM(RCD.DSD_Scheduled_Delv_Head);

QUIT;

ENDIF;

//?Error No  BO Header &/or Load
CASE;

// IF RCD.BOL Load Number is EQ Zero
IF RCD.BOL_Load_Number = *ZERO;

//?is required
// Send error message - 'Buy Order Load not found.'
ERROR(PRK0051);

QUIT;

ENDIF;

EXECUTE FUNCTION(Rtv Received Head     RT) TYPE(RTVOBJ) FILE(PKAXCPP)           AB1251893;
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER(LCL.BOL_Head_Received);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?If head received is greater then zero then hogs are received
CASE;

// IF LCL.BOL Head Received is Not 0
IF LCL.BOL_Head_Received <> *ZERO;

// Send error message - 'Hogs have been received'
ERROR(PRK1227);
MSGPARM(RCD.BOH_Buy_Order_Number);
MSGPARM(RCD.BOL_Load_Number);

QUIT;

ENDIF;

// Call program Pmt MoveTimeSltFromSchPV.
CALL PROGRAM(Pmt MoveTimeSltFromSchPV) ('PLOHPVR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.DSD_Movement_Number);
PARAMETER(RCD.PD_Producer_Code);
PARAMETER(RCD.PL_Location_Code);
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);
PARAMETER(RCD.BOL_Load_Number);
PARAMETER('S');
PARAMETER('From WW Delivery Schedule');

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?7=Dsp Detail
CASE;

// IF RCD.*SFLSEL is Select Option 7
IF RCD.*SFLSEL = '7'/'7';

// Call program Dsp Delv Sched Dtl    DR.
CALL PROGRAM(Dsp Delv Sched Dtl    DR) ('PLARD1R');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);

ENDIF;

//?8=Dsp Split
CASE;

// IF RCD.*SFLSEL is Select Option 8
IF RCD.*SFLSEL = '8'/'8';

CASE;

// IF RCD.DSD Full/Split Load is Split
IF RCD.DSD_Full_Split_Load = 'S';

// Call program Dsp Delv Sched Split  DF.
CALL PROGRAM(Dsp Delv Sched Split  DF) ('PLAVDFR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);
PARAMETER(RCD.DSD_Farm_Site_Code);

// IF *OTHERWISE
IF *OTHERWISE;

// Send error message - 'Option &1 not valid for Status &2.'
ERROR(PRK0771);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.DSD_Full_Split_Load);

ENDIF;

ENDIF;

//?9=Edt Comm
CASE;

// IF RCD.*SFLSEL is Select Option 9
IF RCD.*SFLSEL = '9'/'9';

// Call program Edt Delivery Sched Cm EF.
CALL PROGRAM(Edt Delivery Sched Cm EF) ('PLAXEFR');
PARAMETER(RCD.CC_Company_Number);
PARAMETER(RCD.DSH_Kill_Date);
PARAMETER(RCD.DSD_Delivery_Date);
PARAMETER(RCD.DSD_Delivery_Time);
PARAMETER(RCD.DSD_Delivery_Time_Seq);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

//?10=Edit Producer Location
CASE;

// IF RCD.*SFLSEL is *Option 10 (Reusable)
IF RCD.*SFLSEL = '10';

//?Edit the Producer Location on a Buy Order
//?Error: No producer
CASE;

// IF RCD.PD Producer Code is Blank
IF RCD.PD_Producer_Code = *BLANK;

// Send error message - 'Producer and Location are required.'
ERROR(PRK0749);
MSGPARM(RCD.PD_Producer_Code);
MSGPARM(RCD.PL_Location_Code);
MSGPARM(RCD.*SFLSEL);

QUIT;

ENDIF;

//?Error: Internal producer
CASE;

// IF RCD.DSD Source Type is Internal
IF RCD.DSD_Source_Type = 'I';

// Send error message - 'Option &1 not valid for source type &2.'
ERROR(PRK1049);
MSGPARM(RCD.*SFLSEL);
MSGPARM(RCD.DSD_Source_Type);

QUIT;

ENDIF;

// Call program Edt Buy Order Prod/LocPV.
CALL PROGRAM(Edt Buy Order Prod/LocPV) ('PLKSPVR');
PARAMETER(RCD.BOH_Company_Number);
PARAMETER(RCD.BOH_Buy_Order_Number);

// PGM.*Reload subfile = CND.*YES
PGM.*Reload_subfile = 'Y';

ENDIF;

