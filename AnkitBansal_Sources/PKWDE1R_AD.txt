// ?------------------------------------------------------------------------------------------------
// ?Synon action diagram for PKWDE1R
// ?Date: 14.08.2025 Time: 02:50:40
// ?------------------------------------------------------------------------------------------------

//?USER: Initialize program

// Execute function Mov ApplN to Company  US.
EXECUTE FUNCTION(Mov ApplN to Company  US) TYPE(EXCUSRSRC) ('PKMFUFR');
PARAMETER(PAR.Oms_System_Value_Alpha);
{
 C***   MOVE USER SOURCE                      ***
 C                     MOVEL#IEVTX    ##CMP
}


//?E2423 Mtech Live or Not Live *** Interfaces to HPS ***
//?E2423 Mtech Live extra review with Purva and Susan
//?Get the MTech Live Yes or No
DO;

//?Mtech Live Yes or no
// Call program Rtv Company Values    XF.
CALL PROGRAM(Rtv Company Values    XF) ('PDGKXFR');
PARAMETER(PAR.BOH_Company_Number);
PARAMETER('MTECHLIVE');
PARAMETER(WRK.System_Value_Alpha_USR);

// LCL.MTech Live Yes or No = WRK.System Value Alpha    USR
LCL.MTech_Live_Yes_or_No = WRK.System_Value_Alpha_USR;

ENDDO;

//?this is a program that may not be used any more when live with mtech
//?H16853 ISE 11/02/2020 CHANGE BUY ORDER NUMBER FIELD LENGTH FROM 5 TO 7
//?USER: Initialize detail screen (existing record)

EXECUTE FUNCTION(Name Producer DRV) TYPE(DRVFLD)                                AB1110026;
PARAMETER(DTL.Name_Producer_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Name_Producer_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DB1.PD_Producer_Code);
PARAMETER(DB1.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Sex Desc Usr = Condition name of DTL.TH Sex
DTL.Sex_Desc_Usr = RTVCND(DTL.TH_Sex);

EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
PARAMETER(DB1.GN_Genetic_Code);
PARAMETER(DTL.GN_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.GN_Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Group Reference Code  USR = DB1.TH Tattoo Reference
DTL.Group_Reference_Code_USR = DB1.TH_Group_Reference;

CASE;

// IF DB1.TH Source Type is Internal
IF DB1.TH_Source_Type = 'I';

// AND LCL.MTech Live Yes or No is No MTech not Live
AND LCL.MTech_Live_Yes_or_No = 'N';

// Call program Z1v HPS Grp from Mvmt UP.
CALL PROGRAM(Z1v HPS Grp from Mvmt UP) ('HP258');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DB1.TH_HPS_Movement_Ref_#);
PARAMETER(DTL.Group_Reference_Code_USR);

// IF DB1.TH Source Type is Internal
IF DB1.TH_Source_Type = 'I';

// AND LCL.MTech Live Yes or No is Yes MTech is Live
AND LCL.MTech_Live_Yes_or_No = 'Y';

//?E2423 Mtech Live
//?Group Reference should be on the record
//?Currently Group Reference is blank within the Guymon data
//?what ever they enter that is what we would get
ENDIF;

//?Save input fields to check for changes later
// WRK.GN Genetic Code = DTL.GN Genetic Code
WRK.GN_Genetic_Code = DTL.GN_Genetic_Code;

// DTL.OMS State             USR = DTL.TH State
DTL.OMS_State_USR = DTL.TH_State;

// Call program Rtv State Desc         XF.
CALL PROGRAM(Rtv State Desc         XF) ('PDXSXFR');
PARAMETER(DTL.OMS_State_USR);
PARAMETER(DTL.State_Desc_15_USR);

//?USER: Validate detail screen fields

EXECUTE FUNCTION(Name Producer DRV) TYPE(DRVFLD)                                AB1110026;
PARAMETER(DTL.Name_Producer_DRV);
PARAMETER(DTL.PD_Producer_Code);
{
 //?Calculate derived field

 EXECUTE FUNCTION(Rtv Producer Name     RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1101542;
 PARAMETER(PAR.PD_Producer_Code);
 PARAMETER(PAR.Name_Producer_DRV);
 {
  //?USER: Process Data record

  MOVE *ALL (To: PAR From: DB1);

 }

}


EXECUTE FUNCTION(Rtv Pdctn Loc Name    RT) TYPE(RTVOBJ) FILE(PKAFREP)           AB1101543;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.PL_Name);
{
 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.Sex Desc Usr = Condition name of DTL.TH Sex
DTL.Sex_Desc_Usr = RTVCND(DTL.TH_Sex);

EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.GN_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.GN_Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


// DTL.TH State = DTL.OMS State             USR
DTL.TH_State = DTL.OMS_State_USR;

//?Val Movement Reference
CASE;

// IF DTL.TH Movement Reference # EQ WRK.Zero USR
IF DTL.TH_HPS_Movement_Ref_# = WRK.Zero_USR;

// Send error message - 'Movement Reference is invalid.'
ERROR(PRK0538);

//?Val Movement Reference
// IF *OTHERWISE
IF *OTHERWISE;

//?Internals only for Group Reference Number
CASE;

// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// AND LCL.MTech Live Yes or No is No MTech not Live
AND LCL.MTech_Live_Yes_or_No = 'N';

//?E2423 Mtech Live will not use this HPS program
// Call program Z1l HPS Movement Rfrn UP.
CALL PROGRAM(Z1l HPS Movement Rfrn UP) ('HP251');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(WRK.Scheduled_Kill_Dt_8_0_USR);
PARAMETER(LCL.Scheduled_Head_USR);

CASE;

// IF WRK.Return Code USR is HPS Movement Rfrnc Err 1
IF WRK.Return_Code_USR = 'HPSM1';

// Send error message - 'Movement Reference is invalid.'
ERROR(PRK0538);

ENDIF;

// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

// AND LCL.MTech Live Yes or No is Yes MTech is Live
AND LCL.MTech_Live_Yes_or_No = 'Y';

//?E2423 Mtech Live will not use this HPS program
ENDIF;

ENDIF;

//?Internals only for Group Reference Number
//?Val Group Reference
CASE;

// IF DTL.TH Source Type is Internal
IF DTL.TH_Source_Type = 'I';

//?E2423 Mtech Live will not use this HPS program
CASE;

// IF LCL.MTech Live Yes or No is No MTech not Live
IF LCL.MTech_Live_Yes_or_No = 'N';

// Call program Z1l HPS Group Rfrnc   UP.
CALL PROGRAM(Z1l HPS Group Rfrnc   UP) ('HP250');
PARAMETER(WRK.Return_Code_USR);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(DTL.Group_Reference_Code_USR);
PARAMETER(DTL.TH_Group_Reference);
PARAMETER(WRK.Genetic_Code_2_USR);
PARAMETER(WRK.TH_Sex);

CASE;

// IF WRK.Return Code USR is HPS Group Rfrnc Err 1
IF WRK.Return_Code_USR = 'HPSG1';

// DTL.TH Tattoo Reference = DTL.Group Reference Code  USR
DTL.TH_Group_Reference = DTL.Group_Reference_Code_USR;

// Send error message - 'Group Reference is invalid.'
ERROR(PRK0539);

// IF *OTHERWISE
IF *OTHERWISE;

//?E2423 Mtech Live will not use this HPS program
// Call program Z1v HPS Farm Info     UP.
CALL PROGRAM(Z1v HPS Farm Info     UP) ('HP249');
PARAMETER(WRK.*Return_code);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(WRK.Farm_site_Name_f_HPS_USR);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(WRK.HPS_FS_Comp_Relation_USR);
PARAMETER(WRK.State);

CASE;

// IF DTL.TH HPS Farm Site NE WRK.Zero USR
IF DTL.TH_HPS_Farm_Site <> WRK.Zero_USR;

// DTL.TH State = WRK.State
DTL.TH_State = WRK.State;

// DTL.OMS State             USR = WRK.State
DTL.OMS_State_USR = WRK.State;

// Call program Rtv State Desc         XF.
CALL PROGRAM(Rtv State Desc         XF) ('PDXSXFR');
PARAMETER(DTL.OMS_State_USR);
PARAMETER(DTL.State_Desc_15_USR);

ENDIF;

ENDIF;

// IF LCL.MTech Live Yes or No is Yes MTech is Live
IF LCL.MTech_Live_Yes_or_No = 'Y';

//?E2423 Do not validate group reference
//?E2423 the users need to enter farm site and state from the screen
ENDIF;

ENDIF;

//?Default Genetic
CASE;

// IF DTL.GN Genetic Code is BLANKS
IF DTL.GN_Genetic_Code = *BLANK;

// DTL.GN Genetic Code = WRK.Genetic Code 2 USR
DTL.GN_Genetic_Code = WRK.Genetic_Code_2_USR;

ENDIF;

//?Default Sex
CASE;

// IF DTL.TH Sex EQ WRK.Blank USR
IF DTL.TH_Sex = WRK.Blank_USR;

// DTL.TH Sex = WRK.TH Sex
DTL.TH_Sex = WRK.TH_Sex;

ENDIF;

//?Externals only for Group Reference Number
//?Val Group Reference
CASE;

// IF DTL.TH Source Type is External
IF DTL.TH_Source_Type = 'E';

EXECUTE FUNCTION(Rtv EDI Trading Prt#  RT) TYPE(RTVOBJ) FILE(PKACREP)           AB1200949;
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(WRK.PD_EDI_Trading_Partner_#);
{
 //?USER: Processing if Data record not found

 MOVE *ALL (To: PAR From: CON);

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


CASE;

// IF WRK.EDI Trading Partner # NE WRK.Zero USR
IF WRK.EDI_Trading_Partner_# <> WRK.Zero_USR;

// PAR.#Txt USR = DTL.Group Reference Code  USR
PAR.#Txt_USR = DTL.Group_Reference_Code_USR;

// Execute function Clc Find Char in Str  US.
EXECUTE FUNCTION(Clc Find Char in Str  US) TYPE(EXCUSRSRC) ('PKORUFR');
PARAMETER(PAR.#Txt_USR);
PARAMETER(',');
PARAMETER(PAR.@Status_Yes_No);
{
 E                    SCN        80  1               SCAN FIELD
 C                     MOVEL'N'       #OABST
 C                     MOVEA#IC6TX    SCN              LOAD ARRAY
 C                     Z-ADD1         UX      20       SET COUNTER
 C           UX        DOWLE80
 C           SCN,UX    IFEQ #IHITX
 C                     MOVEL'Y'       #OABST
 C                     END
 C                     ADD  1         UX
 C                     END
}


CASE;

// IF PAR.@Status (Yes/No) is Yes
IF PAR.@Status_Yes_No = 'Y';

// Send error message - 'Group Reference cannot contain a comma (,).'
ERROR(PRK0830);
MSGPARM(DTL.Group_Reference_Code_USR);

ENDIF;

ENDIF;

ENDIF;

//?CALC: Detail screen function fields

// DTL.Sex Desc Usr = Condition name of DTL.TH Sex
DTL.Sex_Desc_Usr = RTVCND(DTL.TH_Sex);

EXECUTE FUNCTION(Rtv Genetic Record    RT) TYPE(RTVOBJ) FILE(PKAIREP)           AB1107738;
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.GN_Description);
{
 //?USER: Processing if Data record not found

 // *MO.VE             1183529*Bu = ilt. in functions
 PAR.GN_Description = *BLANK;

 //?USER: Process Data record

 MOVE *ALL (To: PAR From: DB1);

}


//?USER: Change DBF record

EXECUTE FUNCTION(Chg Tattoo Grp Ref    CH) TYPE(CHGOBJ) FILE(PKA1CPP)           AB1208187;
PARAMETER(DTL.BOH_Company_Number);
PARAMETER(DTL.BOH_Buy_Order_Number);
PARAMETER(DTL.BOL_Load_Number);
PARAMETER(DTL.TH_Tattoo_Number);
PARAMETER(DTL.TH_Kill_Date);
PARAMETER(DTL.TH_Purchase_Date);
PARAMETER(DTL.TH_Group_Reference);
PARAMETER(DTL.TH_Live_Purchase_UOM);
PARAMETER(DTL.TH_Live_Purchase_Price);
PARAMETER(DTL.TH_Live_Gross_Amt);
PARAMETER(DTL.TH_LIve_Net_Amt);
PARAMETER(DTL.TH_Resale_UOM);
PARAMETER(DTL.TH_Recalc_Live_Wgt_Yld);
PARAMETER(DTL.TH_Pricing_Date);
PARAMETER(DTL.TH_Resale_Spread_Sts);
PARAMETER(DTL.TH_Dead_On_Arrival);
PARAMETER(DTL.TH_Head_Received);
PARAMETER(DTL.TH_Yard_Deads);
PARAMETER(DTL.TH_Held_Over);
PARAMETER(DTL.TH_Head_Condemned);
PARAMETER(DTL.TH_Head_Killed);
PARAMETER(DTL.TH_Head_Adds);
PARAMETER(DTL.TH_Head_Accepted);
PARAMETER(DTL.TH_Live_Wgt);
PARAMETER(DTL.TH_Adj_Live_Wgt);
PARAMETER(DTL.TH_Hot_Wgt);
PARAMETER(DTL.TH_Tot_Loin_Eye_Depth);
PARAMETER(DTL.TH_Tot_Backfat_Inches);
PARAMETER(DTL.TH_Tot_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Live_Wgt);
PARAMETER(DTL.TH_Avg_Hot_Wgt);
PARAMETER(DTL.TH_Avg_Light_Reflectance);
PARAMETER(DTL.TH_Avg_Lean_Percent);
PARAMETER(DTL.TH_Avg_Loin_Eye_Depth);
PARAMETER(DTL.TH_Avg_Backfat);
PARAMETER(DTL.TH_Std_Yield_Percent);
PARAMETER(DTL.TH_Actual_Yield);
PARAMETER(DTL.TH_Adj_Actual_Yield);
PARAMETER(DTL.TH_Yield_Difference);
PARAMETER(DTL.TH_Recalc_Live_Wgt);
PARAMETER(DTL.TH_CM_Market_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price);
PARAMETER(DTL.TH_CM_Base_Mkt_Price_Amt);
PARAMETER(DTL.TH_CM_Sort_Discount_Amt);
PARAMETER(DTL.TH_CM_Yield_Gain_Loss_Amt);
PARAMETER(DTL.TH_CM_Base_Carcass_Value);
PARAMETER(DTL.TH_CM_LN_AddOn_Deduct_Amt);
PARAMETER(DTL.TH_CM_Carcass_Gross_Amt);
PARAMETER(DTL.TH_Deduction_Amt);
PARAMETER(DTL.TH_Total_Net_WO_Adds);
PARAMETER(DTL.TH_Carcass_Net_Amt);
PARAMETER(DTL.TH_Additions_Amt);
PARAMETER(DTL.TH_Payment_Gross);
PARAMETER(DTL.Th_Payment_Net_Amt);
PARAMETER(DTL.TH_AP_Voucher_Document#);
PARAMETER(DTL.TH_Freight_Amount);
PARAMETER(DTL.TH_Accrual_Amount);
PARAMETER(DTL.TH_Fixed_Cost_Amount);
PARAMETER(DTL.TH_Calc_Net_Sts);
PARAMETER(DTL.TH_Payment_Sts);
PARAMETER(DTL.TH_Header_Error_Sts);
PARAMETER(DTL.TH_Detail_Error_Sts);
PARAMETER(DTL.TH_Kill_Balancing_Sts);
PARAMETER(DTL.TH_Bal_to_Kill_Gen);
PARAMETER(DTL.TH_Commission_A_P_Voucher);
PARAMETER(DTL.TH_Voucher_Payment_Date);
PARAMETER(DTL.TH_User_Error_Override);
PARAMETER(DTL.TH_Held_Over_Record);
PARAMETER(DTL.TH_Sex);
PARAMETER(DTL.TH_Held_Ovr_Completed_Dte);
PARAMETER(DTL.TH_Commission_Paid_Date);
PARAMETER(DTL.TH_Actual_Check_Date);
PARAMETER(DTL.TH_Shipped_Weight);
PARAMETER(DTL.TH_Avg_Hot_Wgt_EXC_ADD);
PARAMETER(DTL.TH_FFLI);
PARAMETER(DTL.TH_Kill_Product_Value);
PARAMETER(DTL.TH_Cut_Product_Value);
PARAMETER(DTL.TH_Render_Product_Value);
PARAMETER(DTL.TH_Head_Excluded);
PARAMETER(DTL.TH_CM_Bse_Mkt_Live_CWT);
PARAMETER(DTL.TH_CM_Bse_Mkt_Carc_CWT);
PARAMETER(DTL.TH_CM_Srt_Dsc_Live_CWT);
PARAMETER(DTL.TH_CM_Srt_Dsc_Carc_CWT);
PARAMETER(DTL.TH_CM_Yld_G_L_Live_CWT);
PARAMETER(DTL.TH_CM_Yld_G_L_Carc_CWT);
PARAMETER(DTL.TH_CM_Crc_Val_Live_CWT);
PARAMETER(DTL.TH_CM_Crc_Val_Carc_CWT);
PARAMETER(DTL.TH_CM_Lean_Prem_Live_CWT);
PARAMETER(DTL.TH_CM_Lean_Prem_Carc_CWT);
PARAMETER(DTL.TH_CM_Gross_Live_CWT);
PARAMETER(DTL.TH_CM_Gross_Carc_CWT);
PARAMETER(DTL.TH_Source_Type);
PARAMETER(DTL.TH_Scale_Ticket_Sts);
PARAMETER(DTL.TH_Payment_Type);
PARAMETER(DTL.TH_HPS_Movement_Ref_#);
PARAMETER(DTL.TH_Source_Code);
PARAMETER(DTL.TH_Hog_Class_Type);
PARAMETER(DTL.TH_Posted_to_HPS_Flag);
PARAMETER(DTL.TH_Schedule_Kill_Shift);
PARAMETER(DTL.TH_Shift_Held_Over);
PARAMETER(DTL.TH_State);
PARAMETER(DTL.TH_HPS_Farm_Site);
PARAMETER(DTL.DF_Defect_Code);
PARAMETER(DTL.THP_Process_Code);
PARAMETER(DTL.PD_Producer_Code);
PARAMETER(DTL.PL_Location_Code);
PARAMETER(DTL.HB_Buyer_Code);
PARAMETER(DTL.GN_Genetic_Code);
PARAMETER(DTL.HC_Class_Code);
PARAMETER(DTL.RS_User_Changed);
PARAMETER(DTL.RS_Date_Changed);
PARAMETER(DTL.RS_Time_Changed);
PARAMETER(DTL.RS_Record_Status);
PARAMETER(DTL.RS_Job);
PARAMETER(DTL.RS_Program);
PARAMETER(DTL.RS_User_Added);
PARAMETER(DTL.RS_Date_Added);
PARAMETER(DTL.RS_Time_Added);
{
 //?USER: Processing before Data update

 EXECUTE FUNCTION(Rtv Change Stamp      IF) TYPE(EXCINTFUN)                      AB1100934;
 PARAMETER(DB1.RS_User_Changed);
 PARAMETER(DB1.RS_Date_Changed);
 PARAMETER(DB1.RS_Time_Changed);
 PARAMETER(DB1.RS_Job);
 PARAMETER(DB1.RS_Program);
 {
  //?Execute internal function

  // PAR.RS User Changed = JOB.*USER
  PAR.RS_User_Changed = JOB.*USER;

  // PAR.RS Date Changed = JOB.*Job date
  PAR.RS_Date_Changed = JOB.*Job_date;

  // PAR.RS Time Changed = JOB.*Job time
  PAR.RS_Time_Changed = JOB.*Job_time;

  // PAR.RS Job = JOB.*JOB
  PAR.RS_Job = JOB.*JOB;

  // PAR.RS Program = JOB.*PROGRAM
  PAR.RS_Program = JOB.*PROGRAM;

 }

 EXECUTE FUNCTION(Chg/Crt Tatto/Spc Flds IF) TYPE(EXCINTFUN)                     AB1189848;
 PARAMETER(DB1.TH_Payment_Sts);
 PARAMETER(DB1.TH_Payment_Type);
 {
  //?Execute internal function

  EXECUTE FUNCTION(HPE056 Payment Type) TYPE(EXCINTFUN)                           AB1189849;
  {
   //?Execute internal function

   //?1/10/96  HPE056   Allow payment type to be update based on
   //?                  what the payment status is at the time this
   //?                  tattoo is being updated
  }

  //?Function Description:  If there are any fields that need to be
  //?Changed/Created during the Change functions or Create function
  //?Presently: Payment Type
  //?Add this routine to all of the change objects and create object
  //?that update the Payment Type
  CASE;

  // IF PAR.TH Payment Sts is Live anything
  IF PAR.TH_Payment_Sts = 'ML'/'PL'/'NL'/'SL'/'IL';

  // PAR.TH Payment Type = CND.Live
  PAR.TH_Payment_Type = 'L';

  // IF *OTHERWISE
  IF *OTHERWISE;

  // PAR.TH Payment Type = CND.Carcass Merit
  PAR.TH_Payment_Type = 'C';

  ENDIF;

 }

}


